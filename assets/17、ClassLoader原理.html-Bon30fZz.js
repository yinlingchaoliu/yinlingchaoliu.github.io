import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CtvCwAmI.js";const e={},p=t(`<h3 id="classloader原理" tabindex="-1"><a class="header-anchor" href="#classloader原理"><span>ClassLoader原理</span></a></h3><p>class 与 object互相引用，可以让class找到实例，实例找到对应class</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Class <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	jClass            <span class="token operator">*</span>Object		<span class="token comment">// java.lang.Class实例</span>
<span class="token punctuation">}</span>

<span class="token comment">// 表示实例</span>
<span class="token keyword">type</span> Object <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	extra <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">//todo native 记录额外信息 class</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="classloader原理-1" tabindex="-1"><a class="header-anchor" href="#classloader原理-1"><span>classLoader原理</span></a></h3><ul><li>1 、先加载&quot;java/lang/Class&quot;</li><li>2、加载基本数据类型</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 创建一个类加载器</span>
<span class="token comment">//todo bootstrp ClassLoader启动类加载器   </span>
<span class="token keyword">func</span> <span class="token function">NewClassLoader</span><span class="token punctuation">(</span>cp <span class="token operator">*</span>classpath<span class="token punctuation">.</span>Classpath<span class="token punctuation">,</span> verboseFlag <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">*</span>ClassLoader <span class="token punctuation">{</span>
	loader <span class="token operator">:=</span> <span class="token operator">&amp;</span>ClassLoader<span class="token punctuation">{</span>
		cp<span class="token punctuation">:</span>          cp<span class="token punctuation">,</span>
		verboseFlag<span class="token punctuation">:</span> verboseFlag<span class="token punctuation">,</span> <span class="token comment">//添加测试标志</span>
		classMap<span class="token punctuation">:</span>    <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Class<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//先载入java.lang.Class</span>
	loader<span class="token punctuation">.</span><span class="token function">loadBasicClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">//加载基本类型</span>
	loader<span class="token punctuation">.</span><span class="token function">loadPrimitiveClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> loader
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先加载class ，构建class与object关系</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassLoader<span class="token punctuation">)</span> <span class="token function">loadBasicClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token comment">//bootstrap loader 先加载 java/lang/Class</span>
	jlClass <span class="token operator">:=</span> self<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span><span class="token string">&quot;java/lang/Class&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">//互相引用 class与object ,便于互相查找</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> class <span class="token operator">:=</span> <span class="token keyword">range</span> self<span class="token punctuation">.</span>classMap <span class="token punctuation">{</span>
		<span class="token keyword">if</span> class<span class="token punctuation">.</span>jClass <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			class<span class="token punctuation">.</span>jClass <span class="token operator">=</span> jlClass<span class="token punctuation">.</span><span class="token function">NewObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//新建object</span>
			class<span class="token punctuation">.</span>jClass<span class="token punctuation">.</span>extra <span class="token operator">=</span> class         <span class="token comment">// object.extra 指向当前class</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加载基本数据类型</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//加载基本类型</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassLoader<span class="token punctuation">)</span> <span class="token function">loadPrimitiveClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> primitiveType<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> primitiveTypes <span class="token punctuation">{</span>
		self<span class="token punctuation">.</span><span class="token function">loadPrimitiveClass</span><span class="token punctuation">(</span>primitiveType<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// void</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassLoader<span class="token punctuation">)</span> <span class="token function">loadPrimitiveClass</span><span class="token punctuation">(</span>className <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	class <span class="token operator">:=</span> <span class="token operator">&amp;</span>Class<span class="token punctuation">{</span>
		accessFlags<span class="token punctuation">:</span> ACC_PUBLIC<span class="token punctuation">,</span>
		name<span class="token punctuation">:</span>        className<span class="token punctuation">,</span>
		loader<span class="token punctuation">:</span>      self<span class="token punctuation">,</span>
		initStarted<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	class<span class="token punctuation">.</span>jClass <span class="token operator">=</span> self<span class="token punctuation">.</span>classMap<span class="token punctuation">[</span><span class="token string">&quot;java/lang/Class&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">NewObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	class<span class="token punctuation">.</span>jClass<span class="token punctuation">.</span>extra <span class="token operator">=</span> class
	self<span class="token punctuation">.</span>classMap<span class="token punctuation">[</span>className<span class="token punctuation">]</span> <span class="token operator">=</span> class
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LoadClass</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 把类数据加载到方法区</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassLoader<span class="token punctuation">)</span> <span class="token function">LoadClass</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Class <span class="token punctuation">{</span>
	<span class="token keyword">if</span> class<span class="token punctuation">,</span> ok <span class="token operator">:=</span> self<span class="token punctuation">.</span>classMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> class <span class="token comment">// 类已经加载</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> class <span class="token operator">*</span>Class

	<span class="token comment">//数组类型</span>
	<span class="token keyword">if</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;[&#39;</span> <span class="token punctuation">{</span>
		class <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">loadArrayClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		class <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">loadNonArrayClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//互相引用 class与object</span>
	<span class="token keyword">if</span> jlClass<span class="token punctuation">,</span> ok <span class="token operator">:=</span> self<span class="token punctuation">.</span>classMap<span class="token punctuation">[</span><span class="token string">&quot;java/lang/Class&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		class<span class="token punctuation">.</span>jClass <span class="token operator">=</span> jlClass<span class="token punctuation">.</span><span class="token function">NewObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		class<span class="token punctuation">.</span>jClass<span class="token punctuation">.</span>extra <span class="token operator">=</span> class
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> class <span class="token comment">// 普通类的数据来自于class文件，数组类的数据是jvm在运行期间动态生成的</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>native/java/lang/Class.go</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> jlClass <span class="token operator">=</span> <span class="token string">&quot;java/lang/Class&quot;</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	native<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>jlClass<span class="token punctuation">,</span> <span class="token string">&quot;getPrimitiveClass&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(Ljava/lang/String;)Ljava/lang/Class;&quot;</span><span class="token punctuation">,</span> getPrimitiveClass<span class="token punctuation">)</span>
	native<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>jlClass<span class="token punctuation">,</span> <span class="token string">&quot;getName0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()Ljava/lang/String;&quot;</span><span class="token punctuation">,</span> getName0<span class="token punctuation">)</span>
	native<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>jlClass<span class="token punctuation">,</span> <span class="token string">&quot;desiredAssertionStatus0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(Ljava/lang/Class;)Z&quot;</span><span class="token punctuation">,</span> desiredAssertionStatus0<span class="token punctuation">)</span>
	native<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>jlClass<span class="token punctuation">,</span> <span class="token string">&quot;isInterface&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()Z&quot;</span><span class="token punctuation">,</span> isInterface<span class="token punctuation">)</span>
	native<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>jlClass<span class="token punctuation">,</span> <span class="token string">&quot;isPrimitive&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()Z&quot;</span><span class="token punctuation">,</span> isPrimitive<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// static native Class&lt;?&gt; getPrimitiveClass(String name);</span>
<span class="token comment">// (Ljava/lang/String;)Ljava/lang/Class;</span>
<span class="token keyword">func</span> <span class="token function">getPrimitiveClass</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	nameObj <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">LocalVars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetRef</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	name <span class="token operator">:=</span> heap<span class="token punctuation">.</span><span class="token function">GoString</span><span class="token punctuation">(</span>nameObj<span class="token punctuation">)</span>

	loader <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Loader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	class <span class="token operator">:=</span> loader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">JClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PushRef</span><span class="token punctuation">(</span>class<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// private native String getName0();</span>
<span class="token comment">// ()Ljava/lang/String;</span>
<span class="token keyword">func</span> <span class="token function">getName0</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	this <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">LocalVars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	class <span class="token operator">:=</span> this<span class="token punctuation">.</span><span class="token function">Extra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>heap<span class="token punctuation">.</span>Class<span class="token punctuation">)</span>

	name <span class="token operator">:=</span> class<span class="token punctuation">.</span><span class="token function">JavaName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	nameObj <span class="token operator">:=</span> heap<span class="token punctuation">.</span><span class="token function">JString</span><span class="token punctuation">(</span>class<span class="token punctuation">.</span><span class="token function">Loader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>

	frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PushRef</span><span class="token punctuation">(</span>nameObj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// private static native boolean desiredAssertionStatus0(Class&lt;?&gt; clazz);</span>
<span class="token comment">// (Ljava/lang/Class;)Z</span>
<span class="token keyword">func</span> <span class="token function">desiredAssertionStatus0</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// todo</span>
	frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PushBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// public native boolean isInterface();</span>
<span class="token comment">// ()Z</span>
<span class="token keyword">func</span> <span class="token function">isInterface</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	vars <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">LocalVars</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	this <span class="token operator">:=</span> vars<span class="token punctuation">.</span><span class="token function">GetThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	class <span class="token operator">:=</span> this<span class="token punctuation">.</span><span class="token function">Extra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>heap<span class="token punctuation">.</span>Class<span class="token punctuation">)</span>

	stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	stack<span class="token punctuation">.</span><span class="token function">PushBoolean</span><span class="token punctuation">(</span>class<span class="token punctuation">.</span><span class="token function">IsInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// public native boolean isPrimitive();</span>
<span class="token comment">// ()Z</span>
<span class="token keyword">func</span> <span class="token function">isPrimitive</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	vars <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">LocalVars</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	this <span class="token operator">:=</span> vars<span class="token punctuation">.</span><span class="token function">GetThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	class <span class="token operator">:=</span> this<span class="token punctuation">.</span><span class="token function">Extra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>heap<span class="token punctuation">.</span>Class<span class="token punctuation">)</span>

	stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	stack<span class="token punctuation">.</span><span class="token function">PushBoolean</span><span class="token punctuation">(</span>class<span class="token punctuation">.</span><span class="token function">IsPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>class文件加载顺序</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>+ go run main <span class="token parameter variable">-verbose:class</span> <span class="token parameter variable">-cp</span> test/lib/example.jar jvmgo.book.ch09.TestLoadClass
<span class="token punctuation">[</span>loadNonArrayClass Loaded java/lang/Object from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar<span class="token punctuation">]</span>
<span class="token punctuation">[</span>loadNonArrayClass Loaded java/io/Serializable from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar<span class="token punctuation">]</span>
<span class="token punctuation">[</span>loadNonArrayClass Loaded java/lang/reflect/AnnotatedElement from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar<span class="token punctuation">]</span>
<span class="token punctuation">[</span>loadNonArrayClass Loaded java/lang/reflect/GenericDeclaration from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar<span class="token punctuation">]</span>
<span class="token punctuation">[</span>loadNonArrayClass Loaded java/lang/reflect/Type from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar<span class="token punctuation">]</span>
<span class="token punctuation">[</span>loadNonArrayClass Loaded java/lang/Class from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar<span class="token punctuation">]</span>
<span class="token punctuation">[</span>loadNonArrayClass Loaded jvmgo/book/ch09/TestLoadClass from /Users/chentong/github/jvmgo/go/test/lib/example.jar<span class="token punctuation">]</span>
<span class="token punctuation">[</span>loadNonArrayClass Loaded java/lang/Comparable from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar<span class="token punctuation">]</span>
<span class="token punctuation">[</span>loadNonArrayClass Loaded java/lang/CharSequence from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar<span class="token punctuation">]</span>
<span class="token punctuation">[</span>loadNonArrayClass Loaded java/lang/String from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar<span class="token punctuation">]</span>
<span class="token punctuation">[</span>loadNonArrayClass Loaded java/lang/Cloneable from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar<span class="token punctuation">]</span>
+ <span class="token builtin class-name">echo</span> OK
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实战项目地址" tabindex="-1"><a class="header-anchor" href="#实战项目地址"><span>实战项目地址</span></a></h3><p>https://gitee.com/yinlingchaoliu/jvmgo.git</p><p>提交标签 &quot;native&quot;</p>`,19),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","17、ClassLoader原理.html.vue"]]),k=JSON.parse('{"path":"/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/17%E3%80%81ClassLoader%E5%8E%9F%E7%90%86.html","title":"17、ClassLoader原理","lang":"zh-CN","frontmatter":{"title":"17、ClassLoader原理","date":"2024-04-10T06:06:06.000Z","category":["手动编写jvm虚拟机"],"tag":["jvmgo"],"description":"ClassLoader原理 class 与 object互相引用，可以让class找到实例，实例找到对应class classLoader原理 1 、先加载\\"java/lang/Class\\" 2、加载基本数据类型 先加载class ，构建class与object关系 加载基本数据类型 LoadClass native/java/lang/Class.g...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/17%E3%80%81ClassLoader%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"17、ClassLoader原理"}],["meta",{"property":"og:description","content":"ClassLoader原理 class 与 object互相引用，可以让class找到实例，实例找到对应class classLoader原理 1 、先加载\\"java/lang/Class\\" 2、加载基本数据类型 先加载class ，构建class与object关系 加载基本数据类型 LoadClass native/java/lang/Class.g..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T22:43:38.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"jvmgo"}],["meta",{"property":"article:published_time","content":"2024-04-10T06:06:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-09T22:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"17、ClassLoader原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T06:06:06.000Z\\",\\"dateModified\\":\\"2024-04-09T22:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"ClassLoader原理","slug":"classloader原理","link":"#classloader原理","children":[]},{"level":3,"title":"classLoader原理","slug":"classloader原理-1","link":"#classloader原理-1","children":[]},{"level":3,"title":"实战项目地址","slug":"实战项目地址","link":"#实战项目地址","children":[]}],"git":{"createdTime":1711376238000,"updatedTime":1712702618000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":2.06,"words":619},"filePathRelative":"basis/jvm/手动编写jvm虚拟机/17、ClassLoader原理.md","localizedDate":"2024年4月10日","excerpt":"<h3>ClassLoader原理</h3>\\n<p>class 与 object互相引用，可以让class找到实例，实例找到对应class</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">type</span> Class <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\tjClass            <span class=\\"token operator\\">*</span>Object\\t\\t<span class=\\"token comment\\">// java.lang.Class实例</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 表示实例</span>\\n<span class=\\"token keyword\\">type</span> Object <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\textra <span class=\\"token keyword\\">interface</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>  <span class=\\"token comment\\">//todo native 记录额外信息 class</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
