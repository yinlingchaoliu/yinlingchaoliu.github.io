import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as o,a as e}from"./app-CtvCwAmI.js";const r={},i=e("p",null,"java自动内存管理：给对象分配内存以及回收分配给对象内存",-1),a=e("ul",null,[e("li",null,[e("p",null,"1、对象优先在Eden分配，当Eden区没有足够空间进行分配时，虚拟机发起一次MinorGC")]),e("li",null,[e("p",null,"2、大对象直接进入老年代")]),e("li",null,[e("p",null,"3、长期存活的对象将进入老年代，当对象在新生代经历一定次数（15）MinorGC，就会晋升到老年代")]),e("li",null,[e("p",null,"4、动态对象年龄判定，如果青年代在Survivor中相同年龄所有对象大小大于Survivor空间的一半，则大于等于该年龄的对象直接进入老年代，无须等待要求指定MaxTenuringThreshold年龄")])],-1),l=[i,a];function c(p,d){return n(),o("div",null,l)}const u=t(r,[["render",c],["__file","内存分配和回收策略.html.vue"]]),h=JSON.parse('{"path":"/basis/advanced/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%92%8C%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5.html","title":"内存分配和回收策略","lang":"zh-CN","frontmatter":{"title":"内存分配和回收策略","date":"2024-03-25T22:02:09.000Z","category":["知识进阶"],"tag":["archive"],"description":"java自动内存管理：给对象分配内存以及回收分配给对象内存 1、对象优先在Eden分配，当Eden区没有足够空间进行分配时，虚拟机发起一次MinorGC 2、大对象直接进入老年代 3、长期存活的对象将进入老年代，当对象在新生代经历一定次数（15）MinorGC，就会晋升到老年代 4、动态对象年龄判定，如果青年代在Survivor中相同年龄所有对象大小大...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/advanced/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%92%8C%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"内存分配和回收策略"}],["meta",{"property":"og:description","content":"java自动内存管理：给对象分配内存以及回收分配给对象内存 1、对象优先在Eden分配，当Eden区没有足够空间进行分配时，虚拟机发起一次MinorGC 2、大对象直接进入老年代 3、长期存活的对象将进入老年代，当对象在新生代经历一定次数（15）MinorGC，就会晋升到老年代 4、动态对象年龄判定，如果青年代在Survivor中相同年龄所有对象大小大..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T09:37:40.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-25T22:02:09.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-26T09:37:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内存分配和回收策略\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-25T22:02:09.000Z\\",\\"dateModified\\":\\"2024-03-26T09:37:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711445860000,"updatedTime":1711445860000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":0.64,"words":192},"filePathRelative":"basis/advanced/内存分配和回收策略.md","localizedDate":"2024年3月26日","excerpt":"<p>java自动内存管理：给对象分配内存以及回收分配给对象内存</p>\\n<ul>\\n<li>\\n<p>1、对象优先在Eden分配，当Eden区没有足够空间进行分配时，虚拟机发起一次MinorGC</p>\\n</li>\\n<li>\\n<p>2、大对象直接进入老年代</p>\\n</li>\\n<li>\\n<p>3、长期存活的对象将进入老年代，当对象在新生代经历一定次数（15）MinorGC，就会晋升到老年代</p>\\n</li>\\n<li>\\n<p>4、动态对象年龄判定，如果青年代在Survivor中相同年龄所有对象大小大于Survivor空间的一半，则大于等于该年龄的对象直接进入老年代，无须等待要求指定MaxTenuringThreshold年龄</p>\\n</li>\\n</ul>","autoDesc":true}');export{u as comp,h as data};
