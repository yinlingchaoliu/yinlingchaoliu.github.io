import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,f as e}from"./app-CtvCwAmI.js";const t="/assets/defaultServiceManager-4cZhCNGs.png",p={},c=e('<h3 id="获得servicemanage" tabindex="-1"><a class="header-anchor" href="#获得servicemanage"><span>获得serviceManage</span></a></h3><p>defaultServiceManager 等价于 new BpServiceManager(new BpBinder(0));</p><p>ProcessState::self()主要工作：</p><ul><li>调用open()，打开/dev/binder驱动设备；</li><li>再利用mmap()，创建大小为1M-8K的内存地址空间； *设定当前进程最大的最大并发Binder线程个数为16。BpServiceManager巧妙将通信层与业务层逻辑合为一体，</li></ul><p>通过继承接口IServiceManager实现了接口中的业务逻辑函数；</p><ul><li>通过成员变量mRemote= new BpBinder(0)进行Binder通信工作。</li><li>BpBinder通过handler来指向所对应BBinder, 在整个Binder系统中handle=0代表</li><li>ServiceManager所对应的BBinder</li></ul><p><strong class="red">client端 server端相对于serverManage都是客户端, 所以是bpBinder</strong></p><figure><img src="'+t+`" alt="获得服务" tabindex="0" loading="lazy"><figcaption>获得服务</figcaption></figure><h3 id="核心代码" tabindex="-1"><a class="header-anchor" href="#核心代码"><span>核心代码</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>sp<span class="token operator">&lt;</span>IServiceManager<span class="token operator">&gt;</span> <span class="token function">defaultServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>gDefaultServiceManager <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> gDefaultServiceManager<span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
        AutoMutex <span class="token function">_l</span><span class="token punctuation">(</span>gDefaultServiceManagerLock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//加锁</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>gDefaultServiceManager <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token comment">//【见下文小节二,三,四】</span>
            gDefaultServiceManager <span class="token operator">=</span> interface_cast<span class="token operator">&lt;</span>IServiceManager<span class="token operator">&gt;</span><span class="token punctuation">(</span>
                ProcessState<span class="token operator">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getContextObject</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>gDefaultServiceManager <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
                <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> gDefaultServiceManager<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

sp<span class="token operator">&lt;</span>ProcessState<span class="token operator">&gt;</span> ProcessState<span class="token operator">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Mutex<span class="token operator">::</span>Autolock <span class="token function">_l</span><span class="token punctuation">(</span>gProcessMutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>gProcess <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> gProcess<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//实例化ProcessState 【见小节2.2】</span>
    gProcess <span class="token operator">=</span> new ProcessState<span class="token punctuation">;</span>
    <span class="token keyword">return</span> gProcess<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


template<span class="token operator">&lt;</span>typename INTERFACE<span class="token operator">&gt;</span>
<span class="token keyword">inline</span> sp<span class="token operator">&lt;</span>INTERFACE<span class="token operator">&gt;</span> <span class="token function">interface_cast</span><span class="token punctuation">(</span><span class="token keyword">const</span> sp<span class="token operator">&lt;</span>IBinder<span class="token operator">&gt;</span><span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> INTERFACE<span class="token operator">::</span><span class="token function">asInterface</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//【见小节4.2】</span>
<span class="token punctuation">}</span>

<span class="token comment">//模版函数</span>
<span class="token comment">//位于IServiceManager.h文件 【见小节4.3】</span>
<span class="token function">DECLARE_META_INTERFACE</span><span class="token punctuation">(</span>ServiceManager<span class="token punctuation">)</span>
<span class="token comment">//位于IServiceManager.cpp文件 【见小节4.4】</span>
<span class="token function">IMPLEMENT_META_INTERFACE</span><span class="token punctuation">(</span>ServiceManager<span class="token punctuation">,</span><span class="token string">&quot;android.os.IServiceManager&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用模版方法" tabindex="-1"><a class="header-anchor" href="#使用模版方法"><span>使用模版方法</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//用于申明asInterface(),getInterfaceDescriptor()</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DECLARE_META_INTERFACE</span><span class="token expression"><span class="token punctuation">(</span>INTERFACE<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">IMPLEMENT_META_INTERFACE</span><span class="token expression"><span class="token punctuation">(</span>INTERFACE<span class="token punctuation">,</span> NAME<span class="token punctuation">)</span> </span><span class="token comment">//用于实现上述两个方法</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 实现BPServiceManager对象</span>
<span class="token function">IMPLEMENT_META_INTERFACE</span><span class="token punctuation">(</span>ServiceManager<span class="token punctuation">,</span><span class="token string">&quot;android.os.IServiceManager&quot;</span><span class="token punctuation">)</span>

<span class="token operator">==</span><span class="token operator">&gt;</span> 转换为
<span class="token keyword">const</span> android<span class="token operator">::</span>String16 IServiceManager<span class="token operator">::</span><span class="token function">descriptor</span><span class="token punctuation">(</span>“android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IServiceManager”<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> android<span class="token operator">::</span>String16<span class="token operator">&amp;</span> IServiceManager<span class="token operator">::</span><span class="token function">getInterfaceDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
     <span class="token keyword">return</span> IServiceManager<span class="token operator">::</span>descriptor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

 android<span class="token operator">::</span>sp<span class="token operator">&lt;</span>IServiceManager<span class="token operator">&gt;</span> IServiceManager<span class="token operator">::</span><span class="token function">asInterface</span><span class="token punctuation">(</span><span class="token keyword">const</span> android<span class="token operator">::</span>sp<span class="token operator">&lt;</span>android<span class="token operator">::</span>IBinder<span class="token operator">&gt;</span><span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
       android<span class="token operator">::</span>sp<span class="token operator">&lt;</span>IServiceManager<span class="token operator">&gt;</span> intr<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           intr <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span>IServiceManager <span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
               obj<span class="token operator">-&gt;</span><span class="token function">queryLocalInterface</span><span class="token punctuation">(</span>IServiceManager<span class="token operator">::</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>intr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               intr <span class="token operator">=</span> new <span class="token function">BpServiceManager</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
       <span class="token keyword">return</span> intr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

IServiceManager<span class="token operator">::</span><span class="token function">IServiceManager</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
IServiceManager<span class="token operator">::</span><span class="token operator">~</span> <span class="token function">IServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码路径" tabindex="-1"><a class="header-anchor" href="#代码路径"><span>代码路径</span></a></h3><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>framework/native/libs/binder/
  <span class="token list punctuation">-</span> ProcessState.cpp
  <span class="token list punctuation">-</span> BpBinder.cpp
  <span class="token list punctuation">-</span> Binder.cpp
  <span class="token list punctuation">-</span> IServiceManager.cpp

framework/native/include/binder/
  <span class="token list punctuation">-</span> IServiceManager.h
  <span class="token list punctuation">-</span> IInterface.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),o=[c];function i(r,l){return a(),s("div",null,o)}const k=n(p,[["render",i],["__file","获得serviceManage.html.vue"]]),v=JSON.parse('{"path":"/fe/framework/binder/%E8%8E%B7%E5%BE%97serviceManage.html","title":"获得serviceManage","lang":"zh-CN","frontmatter":{"title":"获得serviceManage","date":"2024-04-14T11:47:50.000Z","order":3,"category":["framework"],"tag":["binder"],"description":"获得serviceManage defaultServiceManager 等价于 new BpServiceManager(new BpBinder(0)); ProcessState::self()主要工作： 调用open()，打开/dev/binder驱动设备； 再利用mmap()，创建大小为1M-8K的内存地址空间； *设定当前进程最大的最大并...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/fe/framework/binder/%E8%8E%B7%E5%BE%97serviceManage.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"获得serviceManage"}],["meta",{"property":"og:description","content":"获得serviceManage defaultServiceManager 等价于 new BpServiceManager(new BpBinder(0)); ProcessState::self()主要工作： 调用open()，打开/dev/binder驱动设备； 再利用mmap()，创建大小为1M-8K的内存地址空间； *设定当前进程最大的最大并..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-22T23:46:25.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"binder"}],["meta",{"property":"article:published_time","content":"2024-04-14T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-22T23:46:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"获得serviceManage\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-14T11:47:50.000Z\\",\\"dateModified\\":\\"2024-04-22T23:46:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"获得serviceManage","slug":"获得servicemanage","link":"#获得servicemanage","children":[]},{"level":3,"title":"核心代码","slug":"核心代码","link":"#核心代码","children":[]},{"level":3,"title":"使用模版方法","slug":"使用模版方法","link":"#使用模版方法","children":[]},{"level":3,"title":"代码路径","slug":"代码路径","link":"#代码路径","children":[]}],"git":{"createdTime":1713319747000,"updatedTime":1713829585000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":1.42,"words":425},"filePathRelative":"fe/framework/binder/获得serviceManage.md","localizedDate":"2024年4月14日","excerpt":"<h3>获得serviceManage</h3>\\n<p>defaultServiceManager 等价于 new BpServiceManager(new BpBinder(0));</p>\\n<p>ProcessState::self()主要工作：</p>\\n<ul>\\n<li>调用open()，打开/dev/binder驱动设备；</li>\\n<li>再利用mmap()，创建大小为1M-8K的内存地址空间；\\n*设定当前进程最大的最大并发Binder线程个数为16。BpServiceManager巧妙将通信层与业务层逻辑合为一体，</li>\\n</ul>\\n<p>通过继承接口IServiceManager实现了接口中的业务逻辑函数；</p>","autoDesc":true}');export{k as comp,v as data};
