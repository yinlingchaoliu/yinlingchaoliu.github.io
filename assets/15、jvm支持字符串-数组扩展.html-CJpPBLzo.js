import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CtvCwAmI.js";const p={},e=t(`<h3 id="采用hook方式生成字符串" tabindex="-1"><a class="header-anchor" href="#采用hook方式生成字符串"><span>采用hook方式生成字符串</span></a></h3><ol><li>加载java/lang/String =&gt; jstr</li><li>ClassLoader加载&#39;[C&#39; char数组</li><li>将go 字符串utf-8 转换为 java utf-16格式</li><li>反射修改string value字段</li></ol><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// go string -&gt; java.lang.String</span>
<span class="token keyword">func</span> <span class="token function">JString</span><span class="token punctuation">(</span>loader <span class="token operator">*</span>ClassLoader<span class="token punctuation">,</span> goStr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Object <span class="token punctuation">{</span>
	<span class="token keyword">if</span> internedStr<span class="token punctuation">,</span> ok <span class="token operator">:=</span> internedStrings<span class="token punctuation">[</span>goStr<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> internedStr
	<span class="token punctuation">}</span>

	<span class="token comment">//go 字符串 utf-8 =&gt; java utf-16</span>
	chars <span class="token operator">:=</span> <span class="token function">stringToUtf16</span><span class="token punctuation">(</span>goStr<span class="token punctuation">)</span>

	<span class="token comment">//加载 java类 char数组</span>
	jChars <span class="token operator">:=</span> <span class="token operator">&amp;</span>Object<span class="token punctuation">{</span>loader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span><span class="token string">&quot;[C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chars<span class="token punctuation">}</span>

	<span class="token comment">//加载java类 String</span>
	jStr <span class="token operator">:=</span> loader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span><span class="token string">&quot;java/lang/String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NewObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">//反射设置</span>
	jStr<span class="token punctuation">.</span><span class="token function">SetRefVar</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;[C&quot;</span><span class="token punctuation">,</span> jChars<span class="token punctuation">)</span>

	internedStrings<span class="token punctuation">[</span>goStr<span class="token punctuation">]</span> <span class="token operator">=</span> jStr
	<span class="token keyword">return</span> jStr
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反射支持</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>object<span class="token punctuation">.</span><span class="token keyword">go</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Object<span class="token punctuation">)</span> <span class="token function">GetRefVar</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> descriptor <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Object <span class="token punctuation">{</span>
	field <span class="token operator">:=</span> self<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	slots <span class="token operator">:=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token punctuation">(</span>Slots<span class="token punctuation">)</span>
	<span class="token keyword">return</span> slots<span class="token punctuation">.</span><span class="token function">GetRef</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>slotId<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Object<span class="token punctuation">)</span> <span class="token function">SetRefVar</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> descriptor <span class="token builtin">string</span><span class="token punctuation">,</span> ref <span class="token operator">*</span>Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	field <span class="token operator">:=</span> self<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	slots <span class="token operator">:=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token punctuation">(</span>Slots<span class="token punctuation">)</span>
	slots<span class="token punctuation">.</span><span class="token function">SetRef</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>slotId<span class="token punctuation">,</span> ref<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

class<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Class<span class="token punctuation">)</span> <span class="token function">getField</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> descriptor <span class="token builtin">string</span><span class="token punctuation">,</span> isStatic <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">*</span>Field <span class="token punctuation">{</span>
	<span class="token keyword">for</span> c <span class="token operator">:=</span> self<span class="token punctuation">;</span> c <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> c <span class="token operator">=</span> c<span class="token punctuation">.</span>superClass <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> field <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>fields <span class="token punctuation">{</span>
			<span class="token keyword">if</span> field<span class="token punctuation">.</span><span class="token function">IsStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> isStatic <span class="token operator">&amp;&amp;</span>
				field<span class="token punctuation">.</span>name <span class="token operator">==</span> name <span class="token operator">&amp;&amp;</span>
				field<span class="token punctuation">.</span>descriptor <span class="token operator">==</span> descriptor <span class="token punctuation">{</span>

				<span class="token keyword">return</span> field
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// todo 支持反射 reflection</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Class<span class="token punctuation">)</span> <span class="token function">GetRefVar</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">,</span> fieldDescriptor <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Object <span class="token punctuation">{</span>
	field <span class="token operator">:=</span> self<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">,</span> fieldDescriptor<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>staticVars<span class="token punctuation">.</span><span class="token function">GetRef</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>slotId<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Class<span class="token punctuation">)</span> <span class="token function">SetRefVar</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">,</span> fieldDescriptor <span class="token builtin">string</span><span class="token punctuation">,</span> ref <span class="token operator">*</span>Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	field <span class="token operator">:=</span> self<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">,</span> fieldDescriptor<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
	self<span class="token punctuation">.</span>staticVars<span class="token punctuation">.</span><span class="token function">SetRef</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>slotId<span class="token punctuation">,</span> ref<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>idc扩展</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//todo 特别支持</span>
	<span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>  <span class="token comment">//todo 支持字符串 压栈</span>
		internedStr <span class="token operator">:=</span> heap<span class="token punctuation">.</span><span class="token function">JString</span><span class="token punctuation">(</span>class<span class="token punctuation">.</span><span class="token function">Loader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		stack<span class="token punctuation">.</span><span class="token function">PushRef</span><span class="token punctuation">(</span>internedStr<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>classloader扩展</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">initStaticFinalVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token keyword">case</span> <span class="token string">&quot;Ljava/lang/String;&quot;</span><span class="token punctuation">:</span> <span class="token comment">//todo 支持字符串</span>
			goStr <span class="token operator">:=</span> cp<span class="token punctuation">.</span><span class="token function">GetConstant</span><span class="token punctuation">(</span>cpIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
			jStr <span class="token operator">:=</span> <span class="token function">JString</span><span class="token punctuation">(</span>class<span class="token punctuation">.</span><span class="token function">Loader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>goStr<span class="token punctuation">)</span>
			vars<span class="token punctuation">.</span><span class="token function">SetRef</span><span class="token punctuation">(</span>slotId<span class="token punctuation">,</span>jStr<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串测试" tabindex="-1"><a class="header-anchor" href="#字符串测试"><span>字符串测试</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>
<span class="token keyword">func</span> <span class="token function">Interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//字符串参数</span>
	jArgs <span class="token operator">:=</span> <span class="token function">createArgsArray</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Loader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>
	frame<span class="token punctuation">.</span><span class="token function">LocalVars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetRef</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>jArgs<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//创建args数组</span>
<span class="token keyword">func</span> <span class="token function">createArgsArray</span><span class="token punctuation">(</span>loader <span class="token operator">*</span>heap<span class="token punctuation">.</span>ClassLoader<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>heap<span class="token punctuation">.</span>Object <span class="token punctuation">{</span>
	<span class="token comment">//加载class类</span>
	stringClass <span class="token operator">:=</span> loader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span><span class="token string">&quot;java/lang/String&quot;</span><span class="token punctuation">)</span>
	argsArr <span class="token operator">:=</span> stringClass<span class="token punctuation">.</span><span class="token function">ArrayClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NewArray</span><span class="token punctuation">(</span><span class="token function">uint</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	jArgs <span class="token operator">:=</span> argsArr<span class="token punctuation">.</span><span class="token function">Refs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> arg <span class="token operator">:=</span> <span class="token keyword">range</span> args <span class="token punctuation">{</span>
		jArgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">JString</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> arg<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> argsArr
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shell脚本" tabindex="-1"><a class="header-anchor" href="#shell脚本"><span>shell脚本</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#测试字符串数组</span>
go run main   <span class="token parameter variable">-test</span> <span class="token string">&quot;string&quot;</span>  <span class="token parameter variable">-cp</span> test/lib/example.jar   jvmgo.book.ch01.HelloWorld
<span class="token comment">#测试字符串参数</span>
go run main   <span class="token parameter variable">-test</span> <span class="token string">&quot;string&quot;</span>  <span class="token parameter variable">-cp</span> test/lib/example.jar   jvmgo.book.ch08.PrintArgs  <span class="token string">&#39;go jvm args&#39;</span> <span class="token string">&#39;PrintArgs&#39;</span> <span class="token string">&#39;Hello , World&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实战项目地址" tabindex="-1"><a class="header-anchor" href="#实战项目地址"><span>实战项目地址</span></a></h3><p>https://gitee.com/yinlingchaoliu/jvmgo.git</p><p>提交标签 &quot;array&quot;</p>`,16),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","15、jvm支持字符串-数组扩展.html.vue"]]),d=JSON.parse(`{"path":"/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/15%E3%80%81jvm%E6%94%AF%E6%8C%81%E5%AD%97%E7%AC%A6%E4%B8%B2-%E6%95%B0%E7%BB%84%E6%89%A9%E5%B1%95.html","title":"15、jvm支持字符串-数组扩展","lang":"zh-CN","frontmatter":{"title":"15、jvm支持字符串-数组扩展","date":"2024-04-10T06:06:06.000Z","category":["手动编写jvm虚拟机"],"tag":["jvmgo"],"description":"采用hook方式生成字符串 加载java/lang/String => jstr ClassLoader加载'[C' char数组 将go 字符串utf-8 转换为 java utf-16格式 反射修改string value字段 反射支持 idc扩展 classloader扩展 字符串测试 shell脚本 实战项目地址 https://gitee.c...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/15%E3%80%81jvm%E6%94%AF%E6%8C%81%E5%AD%97%E7%AC%A6%E4%B8%B2-%E6%95%B0%E7%BB%84%E6%89%A9%E5%B1%95.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"15、jvm支持字符串-数组扩展"}],["meta",{"property":"og:description","content":"采用hook方式生成字符串 加载java/lang/String => jstr ClassLoader加载'[C' char数组 将go 字符串utf-8 转换为 java utf-16格式 反射修改string value字段 反射支持 idc扩展 classloader扩展 字符串测试 shell脚本 实战项目地址 https://gitee.c..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T22:43:38.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"jvmgo"}],["meta",{"property":"article:published_time","content":"2024-04-10T06:06:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-09T22:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"15、jvm支持字符串-数组扩展\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T06:06:06.000Z\\",\\"dateModified\\":\\"2024-04-09T22:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"采用hook方式生成字符串","slug":"采用hook方式生成字符串","link":"#采用hook方式生成字符串","children":[]},{"level":3,"title":"字符串测试","slug":"字符串测试","link":"#字符串测试","children":[]},{"level":3,"title":"shell脚本","slug":"shell脚本","link":"#shell脚本","children":[]},{"level":3,"title":"实战项目地址","slug":"实战项目地址","link":"#实战项目地址","children":[]}],"git":{"createdTime":1711376238000,"updatedTime":1712702618000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":1.45,"words":435},"filePathRelative":"basis/jvm/手动编写jvm虚拟机/15、jvm支持字符串-数组扩展.md","localizedDate":"2024年4月10日","excerpt":"<h3>采用hook方式生成字符串</h3>\\n<ol>\\n<li>加载java/lang/String =&gt; jstr</li>\\n<li>ClassLoader加载'[C'  char数组</li>\\n<li>将go 字符串utf-8  转换为 java utf-16格式</li>\\n<li>反射修改string value字段</li>\\n</ol>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token comment\\">// go string -&gt; java.lang.String</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">JString</span><span class=\\"token punctuation\\">(</span>loader <span class=\\"token operator\\">*</span>ClassLoader<span class=\\"token punctuation\\">,</span> goStr <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span>Object <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span> internedStr<span class=\\"token punctuation\\">,</span> ok <span class=\\"token operator\\">:=</span> internedStrings<span class=\\"token punctuation\\">[</span>goStr<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span> ok <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> internedStr\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token comment\\">//go 字符串 utf-8 =&gt; java utf-16</span>\\n\\tchars <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">stringToUtf16</span><span class=\\"token punctuation\\">(</span>goStr<span class=\\"token punctuation\\">)</span>\\n\\n\\t<span class=\\"token comment\\">//加载 java类 char数组</span>\\n\\tjChars <span class=\\"token operator\\">:=</span> <span class=\\"token operator\\">&amp;</span>Object<span class=\\"token punctuation\\">{</span>loader<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">LoadClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"[C\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> chars<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token comment\\">//加载java类 String</span>\\n\\tjStr <span class=\\"token operator\\">:=</span> loader<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">LoadClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"java/lang/String\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">NewObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n\\t<span class=\\"token comment\\">//反射设置</span>\\n\\tjStr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">SetRefVar</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"value\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"[C\\"</span><span class=\\"token punctuation\\">,</span> jChars<span class=\\"token punctuation\\">)</span>\\n\\n\\tinternedStrings<span class=\\"token punctuation\\">[</span>goStr<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> jStr\\n\\t<span class=\\"token keyword\\">return</span> jStr\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{k as comp,d as data};
