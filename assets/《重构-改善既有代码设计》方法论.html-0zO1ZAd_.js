import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as s,c as d,a as e,b as t,d as n,f as r}from"./app-CtvCwAmI.js";const c={},l=e("h1",{id:"重构方法论",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#重构方法论"},[e("span",null,"重构方法论")])],-1),p=e("p",null,"####引言 1、程序可持续特点有四个特点： 1）代码清晰，容易阅读 2）所有逻辑都只在唯一地点指定，即无重复代码 3）新的改动不会危及现有行为，即开闭原则 4）尽可能简单表达条件逻辑",-1),m={href:"https://www.jianshu.com/p/e8c9649ae347",target:"_blank",rel:"noopener noreferrer"},E=r("<p>####GOF点评 设计模式为重构提供目标，以重构方式改进软件质量</p><p>####1、定义 <strong>不改变软件可观察行为</strong>的前提下，改善其内部结构 2种含义： 1、保持代码功能不变，既不多，也不少 2、重构<strong>不需要了解软件行为</strong>，调整软件内部结构</p><p>####2、方法论 1）原则：<strong>无重复代码</strong>，单一职责，测试驱动 2）目标：<strong>设计模式</strong>为重构提供目标 3）时机：添加功能，修补错误，复审代码 4）切入点：<strong>”坏味道“代码与对应手法</strong> 5）记录：<strong>重构修改清单</strong> 6）弊端：重构会引入中间层 7）优化：找出真正问题，遵循二八原则</p>",3),u={href:"https://www.jianshu.com/p/e8c9649ae347",target:"_blank",rel:"noopener noreferrer"},g=r(`<p>####重构原则</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>事不过三，三则重构
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一次做某件事时只管去做，第二次做类似事会产生反感，但无论如何还是可以去做，第三次做类似的事，你就应该重构。 一句话解释：无重复代码</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>单一职责原则
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>就一个类而言，应该仅有一个引起它变化的原因 关键：一个类，只做一件事</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>最少知道原则
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一个对象应该对其他对象有最少了解 一句话理解：访问对象，又要减少耦合</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>TDD --测试驱动开发
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用单元测试保证观察行为一致</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>二八原则
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>先分析真正问题，在根据实际情况，考虑重构。优化遵循二八原则</p><p>####记录重构清单 1）命名，建造重构词汇表，统一名称规范 2）重构手法与情景映射，关联 3）重构原因：为什么（why） 4）重构和修改功能是两件事，一件事做完，再处理另一件事</p><p>####何时停止是重构的压轴 摘自《重构 改善既有代码设计》</p><p>这些技术如此精彩，可他们却仅仅是个开始，这是为什么？答案很简单：因为你还不知道何时应该使用它们。何时不该使用它们；何时开始，何时停止；何时前进、何时等待。使重构能够成功的，不是前面各自独立的技术，而是这种节奏。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>得道标志是：你可以自信停止重构。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在重构者的整场表演中，“停止”正式压轴大戏 在悬崖峭壁上的小径行走；只要有光，你就可以前进，虽然谨慎却仍然自信。但是，一旦太阳下山，你就应该停止前进；夜晚你就应该睡觉，并且相信明天早晨太阳仍然升起。</p>`,16);function h(_,v){const a=o("ExternalLinkIcon");return s(),d("div",null,[l,p,e("p",null,[t("2、如何重构让代码可持续化 "),e("a",m,[t("重构实战"),n(a)])]),E,e("p",null,[t("方法论对应实战 "),e("a",u,[t("重构实战"),n(a)])]),g])}const A=i(c,[["render",h],["__file","《重构-改善既有代码设计》方法论.html.vue"]]),B=JSON.parse('{"path":"/basis/refactor/%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/%E3%80%8A%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1%E3%80%8B%E6%96%B9%E6%B3%95%E8%AE%BA.html","title":"《重构-改善既有代码设计》方法论","lang":"zh-CN","frontmatter":{"title":"《重构-改善既有代码设计》方法论","date":"2024-03-24T11:47:50.000Z","category":["重构-改善代码设计"],"tag":["archive"],"description":"重构方法论 ####引言 1、程序可持续特点有四个特点： 1）代码清晰，容易阅读 2）所有逻辑都只在唯一地点指定，即无重复代码 3）新的改动不会危及现有行为，即开闭原则 4）尽可能简单表达条件逻辑 2、如何重构让代码可持续化 重构实战 ####GOF点评 设计模式为重构提供目标，以重构方式改进软件质量 ####1、定义 不改变软件可观察行为的前提下，改...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/refactor/%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/%E3%80%8A%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1%E3%80%8B%E6%96%B9%E6%B3%95%E8%AE%BA.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"《重构-改善既有代码设计》方法论"}],["meta",{"property":"og:description","content":"重构方法论 ####引言 1、程序可持续特点有四个特点： 1）代码清晰，容易阅读 2）所有逻辑都只在唯一地点指定，即无重复代码 3）新的改动不会危及现有行为，即开闭原则 4）尽可能简单表达条件逻辑 2、如何重构让代码可持续化 重构实战 ####GOF点评 设计模式为重构提供目标，以重构方式改进软件质量 ####1、定义 不改变软件可观察行为的前提下，改..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T14:17:18.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-24T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T14:17:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《重构-改善既有代码设计》方法论\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-24T11:47:50.000Z\\",\\"dateModified\\":\\"2024-03-25T14:17:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711376238000,"updatedTime":1711376238000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":2.68,"words":803},"filePathRelative":"basis/refactor/重构-改善代码设计/《重构-改善既有代码设计》方法论.md","localizedDate":"2024年3月24日","excerpt":"\\n<p>####引言\\n1、程序可持续特点有四个特点：\\n1）代码清晰，容易阅读\\n2）所有逻辑都只在唯一地点指定，即无重复代码\\n3）新的改动不会危及现有行为，即开闭原则\\n4）尽可能简单表达条件逻辑</p>\\n<p>2、如何重构让代码可持续化\\n<a href=\\"https://www.jianshu.com/p/e8c9649ae347\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">重构实战</a></p>\\n<p>####GOF点评\\n设计模式为重构提供目标，以重构方式改进软件质量</p>\\n<p>####1、定义\\n<strong>不改变软件可观察行为</strong>的前提下，改善其内部结构\\n2种含义：\\n1、保持代码功能不变，既不多，也不少\\n2、重构<strong>不需要了解软件行为</strong>，调整软件内部结构</p>","autoDesc":true}');export{A as comp,B as data};
