import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CtvCwAmI.js";const p={},c=t(`<p>创建对象需要关键指令</p><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>idc</td><td>常量池常量推到操作数栈顶</td></tr><tr><td>new</td><td>新建实例</td></tr><tr><td>putfield/getfield</td><td>存取实例变量</td></tr><tr><td>putstatic/getstatic</td><td>存取静态变量</td></tr><tr><td>Instanceof/checkcast</td><td>判断对象是否属于某类型</td></tr></tbody></table><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>public class MyObject <span class="token punctuation">{</span>

    public static <span class="token builtin">int</span> staticVar<span class="token punctuation">;</span>
    public <span class="token builtin">int</span> instanceVar<span class="token punctuation">;</span>

    public static void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">int</span> x <span class="token operator">=</span> <span class="token number">32768</span><span class="token punctuation">;</span> <span class="token comment">// ldc</span>
        MyObject myObj <span class="token operator">=</span> <span class="token builtin">new</span> <span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new</span>
        MyObject<span class="token punctuation">.</span>staticVar <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">// putstatic</span>
        x <span class="token operator">=</span> MyObject<span class="token punctuation">.</span>staticVar<span class="token punctuation">;</span> <span class="token comment">// getstatic</span>
        myObj<span class="token punctuation">.</span>instanceVar <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">// putfield</span>
        x <span class="token operator">=</span> myObj<span class="token punctuation">.</span>instanceVar<span class="token punctuation">;</span> <span class="token comment">// getfield</span>
        Object obj <span class="token operator">=</span> myObj<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj instanceof MyObject<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// instanceof</span>
            myObj <span class="token operator">=</span> <span class="token punctuation">(</span>MyObject<span class="token punctuation">)</span> obj<span class="token punctuation">;</span> <span class="token comment">// checkcast</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myObj<span class="token punctuation">.</span>instanceVar<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关键指令编写" tabindex="-1"><a class="header-anchor" href="#关键指令编写"><span>关键指令编写</span></a></h3><p>new</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>NEW<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cp <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConstantPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 1. 获取当前栈帧所在类的常量池</span>
	classRef <span class="token operator">:=</span> cp<span class="token punctuation">.</span><span class="token function">GetConstant</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>Index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>heap<span class="token punctuation">.</span>ClassRef<span class="token punctuation">)</span> <span class="token comment">// 2. 获取类符号引用</span>
	class <span class="token operator">:=</span> classRef<span class="token punctuation">.</span><span class="token function">ResolvedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment">// 3. 根据类符号引用创建类</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>class<span class="token punctuation">.</span><span class="token function">InitStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		frame<span class="token punctuation">.</span><span class="token function">RevertNextPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		base<span class="token punctuation">.</span><span class="token function">InitClass</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> class<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> class<span class="token punctuation">.</span><span class="token function">IsInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> class<span class="token punctuation">.</span><span class="token function">IsAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.InstantiationError&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	ref <span class="token operator">:=</span> class<span class="token punctuation">.</span><span class="token function">NewObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment">// 4. 创建对象</span>
	frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PushRef</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span> <span class="token comment">// 5. 将引用对象push到栈顶</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>getstatic</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>GET_STATIC<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cp <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConstantPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 1. 获取字段符号引用</span>
	fieldRef <span class="token operator">:=</span> cp<span class="token punctuation">.</span><span class="token function">GetConstant</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>Index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>heap<span class="token punctuation">.</span>FieldRef<span class="token punctuation">)</span>
	<span class="token comment">// 2. 将字段符号引用解析为Field</span>
	field <span class="token operator">:=</span> fieldRef<span class="token punctuation">.</span><span class="token function">ResolvedField</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	class <span class="token operator">:=</span> field<span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token operator">!</span>class<span class="token punctuation">.</span><span class="token function">InitStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		frame<span class="token punctuation">.</span><span class="token function">RevertNextPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		base<span class="token punctuation">.</span><span class="token function">InitClass</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> class<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 不是静态变量</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>field<span class="token punctuation">.</span><span class="token function">IsStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.IncompatibleClassChangeError&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	slots <span class="token operator">:=</span> class<span class="token punctuation">.</span><span class="token function">StaticVars</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 3. 从Field的静态变量列表中获取值，push到操作数栈</span>
	<span class="token keyword">switch</span> field<span class="token punctuation">.</span><span class="token function">Descriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token char">&#39;Z&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;S&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;I&#39;</span><span class="token punctuation">:</span>
		stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span>slots<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">SlotId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token char">&#39;F&#39;</span><span class="token punctuation">:</span>
		stack<span class="token punctuation">.</span><span class="token function">PushFloat</span><span class="token punctuation">(</span>slots<span class="token punctuation">.</span><span class="token function">GetFloat</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">SlotId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token char">&#39;J&#39;</span><span class="token punctuation">:</span>
		stack<span class="token punctuation">.</span><span class="token function">PushLong</span><span class="token punctuation">(</span>slots<span class="token punctuation">.</span><span class="token function">GetLong</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">SlotId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token char">&#39;D&#39;</span><span class="token punctuation">:</span>
		stack<span class="token punctuation">.</span><span class="token function">PushDouble</span><span class="token punctuation">(</span>slots<span class="token punctuation">.</span><span class="token function">GetDouble</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">SlotId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token char">&#39;L&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;[&#39;</span><span class="token punctuation">:</span> <span class="token comment">// 对象或数组</span>
		stack<span class="token punctuation">.</span><span class="token function">PushRef</span><span class="token punctuation">(</span>slots<span class="token punctuation">.</span><span class="token function">GetRef</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">SlotId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>getfield</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>GET_FIELD<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cp <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConstantPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 1. 获取字段符号引用</span>
	fieldRef <span class="token operator">:=</span> cp<span class="token punctuation">.</span><span class="token function">GetConstant</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>Index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>heap<span class="token punctuation">.</span>FieldRef<span class="token punctuation">)</span>
	<span class="token comment">// 2. 将字段符号引用解析为Field</span>
	field <span class="token operator">:=</span> fieldRef<span class="token punctuation">.</span><span class="token function">ResolvedField</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> field<span class="token punctuation">.</span><span class="token function">IsStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.IncompatibleClassChangeError&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 3. 获取对象引用</span>
	ref <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> ref <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.NullPointerException&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	slots <span class="token operator">:=</span> ref<span class="token punctuation">.</span><span class="token function">Fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 4. 从对象引用的实例变量列表中获取值，push到操作数栈</span>
	<span class="token keyword">switch</span> field<span class="token punctuation">.</span><span class="token function">Descriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token char">&#39;Z&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;S&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;I&#39;</span><span class="token punctuation">:</span>
		stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span>slots<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">SlotId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token char">&#39;F&#39;</span><span class="token punctuation">:</span>
		stack<span class="token punctuation">.</span><span class="token function">PushFloat</span><span class="token punctuation">(</span>slots<span class="token punctuation">.</span><span class="token function">GetFloat</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">SlotId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token char">&#39;J&#39;</span><span class="token punctuation">:</span>
		stack<span class="token punctuation">.</span><span class="token function">PushLong</span><span class="token punctuation">(</span>slots<span class="token punctuation">.</span><span class="token function">GetLong</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">SlotId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token char">&#39;D&#39;</span><span class="token punctuation">:</span>
		stack<span class="token punctuation">.</span><span class="token function">PushDouble</span><span class="token punctuation">(</span>slots<span class="token punctuation">.</span><span class="token function">GetDouble</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">SlotId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token char">&#39;L&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;[&#39;</span><span class="token punctuation">:</span> <span class="token comment">// 对象或数组</span>
		stack<span class="token punctuation">.</span><span class="token function">PushRef</span><span class="token punctuation">(</span>slots<span class="token punctuation">.</span><span class="token function">GetRef</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">SlotId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>checkcast</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>CHECK_CAST<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 1. 从操作数栈获取对象引用ref</span>
	stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	ref <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	stack<span class="token punctuation">.</span><span class="token function">PushRef</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span>
	<span class="token comment">// (Integer)null -&gt; null引用可以转换为任何类型</span>
	<span class="token keyword">if</span> ref <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	cp <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConstantPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 2. 获取当前栈帧所在类的常量池</span>
	classRef <span class="token operator">:=</span> cp<span class="token punctuation">.</span><span class="token function">GetConstant</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>Index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>heap<span class="token punctuation">.</span>ClassRef<span class="token punctuation">)</span> <span class="token comment">// 3. 获取类符号引用</span>
	class <span class="token operator">:=</span> classRef<span class="token punctuation">.</span><span class="token function">ResolvedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment">// 4. 根据类符号引用创建类</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ref<span class="token punctuation">.</span><span class="token function">IsInstanceOf</span><span class="token punctuation">(</span>class<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 5. 判断 ref instanceof class</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.ClassCastException&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 6. 如果不是，抛异常</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>instanceof</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>INSTANCE_OF<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 1. 从操作数栈获取对象引用ref</span>
	stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	ref <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// null instanceof Xxx -&gt; false</span>
	<span class="token keyword">if</span> ref <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	cp <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConstantPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 2. 获取当前栈帧所在类的常量池</span>
	classRef <span class="token operator">:=</span> cp<span class="token punctuation">.</span><span class="token function">GetConstant</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>Index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>heap<span class="token punctuation">.</span>ClassRef<span class="token punctuation">)</span> <span class="token comment">// 3. 获取类符号引用</span>
	class <span class="token operator">:=</span> classRef<span class="token punctuation">.</span><span class="token function">ResolvedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment">// 4. 根据类符号引用创建类</span>
	<span class="token keyword">if</span> ref<span class="token punctuation">.</span><span class="token function">IsInstanceOf</span><span class="token punctuation">(</span>class<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 5. 判断 ref instanceof class</span>
		stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 6. 将结果压入栈</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>idc指令</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>LDC<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">_ldc</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> self<span class="token punctuation">.</span>Index<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>LDC_W<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">_ldc</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> self<span class="token punctuation">.</span>Index<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>LDC2_W<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 1. 从运行时常量池获取常量c</span>
	stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	cp <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConstantPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c <span class="token operator">:=</span> cp<span class="token punctuation">.</span><span class="token function">GetConstant</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>Index<span class="token punctuation">)</span>

	<span class="token comment">// 2. 将常量c压入操作数栈</span>
	<span class="token keyword">switch</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token builtin">int64</span><span class="token punctuation">:</span>
		stack<span class="token punctuation">.</span><span class="token function">PushLong</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>
		stack<span class="token punctuation">.</span><span class="token function">PushDouble</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.ClassFormatError&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">_ldc</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">,</span> index <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 1. 从运行时常量池获取常量c</span>
	stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	cp <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConstantPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c <span class="token operator">:=</span> cp<span class="token punctuation">.</span><span class="token function">GetConstant</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>

	<span class="token comment">// 2. 将常量c压入操作数栈</span>
	<span class="token keyword">switch</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token builtin">int32</span><span class="token punctuation">:</span>
		stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">float32</span><span class="token punctuation">:</span>
		stack<span class="token punctuation">.</span><span class="token function">PushFloat</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">float32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">//case string:</span>
	<span class="token comment">//case *heap.ClassRef:</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;todo:ldc!&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写测试类" tabindex="-1"><a class="header-anchor" href="#编写测试类"><span>编写测试类</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>
<span class="token comment">//测试classloader</span>
<span class="token keyword">func</span> <span class="token function">parseClassLoader</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>Cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>

	cp <span class="token operator">:=</span> classpath<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>XjreOption<span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>cpOption<span class="token punctuation">)</span>
	<span class="token comment">//获得classLoader</span>
	classLoader <span class="token operator">:=</span> heap<span class="token punctuation">.</span><span class="token function">NewClassLoader</span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span>
	<span class="token comment">//获得加载类名字</span>
	className <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>class<span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	mainClass <span class="token operator">:=</span> classLoader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span>
	<span class="token comment">//获得main方法</span>
	mainMethod <span class="token operator">:=</span> mainClass<span class="token punctuation">.</span><span class="token function">GetMainMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> mainMethod <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">interpret</span><span class="token punctuation">(</span>mainMethod<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>&quot;Main method not found in class <span class="token operator">%</span>s
&quot;<span class="token punctuation">,</span>cmd<span class="token punctuation">.</span>class<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shell脚本" tabindex="-1"><a class="header-anchor" href="#shell脚本"><span>shell脚本</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run main <span class="token parameter variable">-test</span> <span class="token string">&quot;classloader&quot;</span> <span class="token parameter variable">-cp</span> test/lib/example.jar jvmgo.book.ch06.MyObject <span class="token comment">#测试classloader</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="实战项目地址" tabindex="-1"><a class="header-anchor" href="#实战项目地址"><span>实战项目地址</span></a></h3><p>https://gitee.com/yinlingchaoliu/jvmgo.git</p>`,22),o=[c];function e(l,i){return s(),a("div",null,o)}const d=n(p,[["render",e],["__file","11、对象实例化new-object.html.vue"]]),r=JSON.parse('{"path":"/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/11%E3%80%81%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E5%8C%96new-object.html","title":"11、对象实例化new-object","lang":"zh-CN","frontmatter":{"title":"11、对象实例化new-object","date":"2024-04-10T06:06:06.000Z","category":["手动编写jvm虚拟机"],"tag":["jvmgo"],"description":"创建对象需要关键指令 关键指令编写 new getstatic getfield checkcast instanceof idc指令 编写测试类 shell脚本 实战项目地址 https://gitee.com/yinlingchaoliu/jvmgo.git","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/11%E3%80%81%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E5%8C%96new-object.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"11、对象实例化new-object"}],["meta",{"property":"og:description","content":"创建对象需要关键指令 关键指令编写 new getstatic getfield checkcast instanceof idc指令 编写测试类 shell脚本 实战项目地址 https://gitee.com/yinlingchaoliu/jvmgo.git"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T22:43:38.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"jvmgo"}],["meta",{"property":"article:published_time","content":"2024-04-10T06:06:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-09T22:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"11、对象实例化new-object\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T06:06:06.000Z\\",\\"dateModified\\":\\"2024-04-09T22:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"关键指令编写","slug":"关键指令编写","link":"#关键指令编写","children":[]},{"level":3,"title":"编写测试类","slug":"编写测试类","link":"#编写测试类","children":[]},{"level":3,"title":"shell脚本","slug":"shell脚本","link":"#shell脚本","children":[]},{"level":3,"title":"实战项目地址","slug":"实战项目地址","link":"#实战项目地址","children":[]}],"git":{"createdTime":1711376238000,"updatedTime":1712702618000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":3.14,"words":943},"filePathRelative":"basis/jvm/手动编写jvm虚拟机/11、对象实例化new-object.md","localizedDate":"2024年4月10日","excerpt":"<p>创建对象需要关键指令</p>\\n<table>\\n<thead>\\n<tr>\\n<th>指令</th>\\n<th>作用</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>idc</td>\\n<td>常量池常量推到操作数栈顶</td>\\n</tr>\\n<tr>\\n<td>new</td>\\n<td>新建实例</td>\\n</tr>\\n<tr>\\n<td>putfield/getfield</td>\\n<td>存取实例变量</td>\\n</tr>\\n<tr>\\n<td>putstatic/getstatic</td>\\n<td>存取静态变量</td>\\n</tr>\\n<tr>\\n<td>Instanceof/checkcast</td>\\n<td>判断对象是否属于某类型</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{d as comp,r as data};
