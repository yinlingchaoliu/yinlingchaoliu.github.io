import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CtvCwAmI.js";const e={},p=t(`<h3 id="原因" tabindex="-1"><a class="header-anchor" href="#原因"><span>原因</span></a></h3><p>自己手动写java虚拟机源码，属于章回式讲课。</p><p>实际项目，要减少冗余重复代码，让接手的人易于理解</p><p>也要有单元测试类，便于项目重构</p><p>因此添加testOption</p><h3 id="测试参数" tabindex="-1"><a class="header-anchor" href="#测试参数"><span>测试参数</span></a></h3><p>增加 -test</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Cmd <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	testOption  <span class="token builtin">string</span>  <span class="token comment">// 指定测试方法</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">parseCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Cmd <span class="token punctuation">{</span>
	<span class="token comment">//增加测试方法</span>
	flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmd<span class="token punctuation">.</span>testOption<span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main函数调用</p><p>根据cmd.testOption内容判断调用测试方法</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cmd <span class="token operator">:=</span> <span class="token function">parseCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> cmd<span class="token punctuation">.</span>versionFlag <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;version 0.0.1&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> cmd<span class="token punctuation">.</span>helpFlag <span class="token operator">||</span> cmd<span class="token punctuation">.</span>class <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		<span class="token function">printUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> cmd<span class="token punctuation">.</span>testOption <span class="token operator">==</span> <span class="token string">&quot;cmd&quot;</span> <span class="token punctuation">{</span>
		<span class="token function">parseCmdLine</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> cmd<span class="token punctuation">.</span>testOption <span class="token operator">==</span> <span class="token string">&quot;classpath&quot;</span> <span class="token punctuation">{</span>
		<span class="token function">parseClasspath</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token function">startJvm</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试shell脚本</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-ex</span>

<span class="token builtin class-name">cd</span> ./go
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>
<span class="token comment">#main 编译目录</span>
go run main <span class="token parameter variable">-version</span>
//测试 命令行功能
go run main <span class="token parameter variable">-test</span> <span class="token string">&quot;cmd&quot;</span> <span class="token number">12</span> <span class="token number">344</span> <span class="token number">567</span>
//测试类查找功能
go run main <span class="token parameter variable">-test</span> <span class="token string">&quot;classpath&quot;</span> java.lang.Object
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实战项目地址" tabindex="-1"><a class="header-anchor" href="#实战项目地址"><span>实战项目地址</span></a></h3><p>https://gitee.com/yinlingchaoliu/jvmgo.git</p>`,15),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(e,[["render",i],["__file","4、添加testOption-便于单元测试.html.vue"]]),m=JSON.parse('{"path":"/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/4%E3%80%81%E6%B7%BB%E5%8A%A0testOption-%E4%BE%BF%E4%BA%8E%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html","title":"4、添加testOption-便于单元测试","lang":"zh-CN","frontmatter":{"title":"4、添加testOption-便于单元测试","date":"2024-04-10T06:06:06.000Z","category":["手动编写jvm虚拟机"],"tag":["jvmgo"],"description":"原因 自己手动写java虚拟机源码，属于章回式讲课。 实际项目，要减少冗余重复代码，让接手的人易于理解 也要有单元测试类，便于项目重构 因此添加testOption 测试参数 增加 -test main函数调用 根据cmd.testOption内容判断调用测试方法 测试shell脚本 实战项目地址 https://gitee.com/yinlingch...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/4%E3%80%81%E6%B7%BB%E5%8A%A0testOption-%E4%BE%BF%E4%BA%8E%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"4、添加testOption-便于单元测试"}],["meta",{"property":"og:description","content":"原因 自己手动写java虚拟机源码，属于章回式讲课。 实际项目，要减少冗余重复代码，让接手的人易于理解 也要有单元测试类，便于项目重构 因此添加testOption 测试参数 增加 -test main函数调用 根据cmd.testOption内容判断调用测试方法 测试shell脚本 实战项目地址 https://gitee.com/yinlingch..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T22:43:38.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"jvmgo"}],["meta",{"property":"article:published_time","content":"2024-04-10T06:06:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-09T22:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4、添加testOption-便于单元测试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T06:06:06.000Z\\",\\"dateModified\\":\\"2024-04-09T22:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"原因","slug":"原因","link":"#原因","children":[]},{"level":3,"title":"测试参数","slug":"测试参数","link":"#测试参数","children":[]},{"level":3,"title":"实战项目地址","slug":"实战项目地址","link":"#实战项目地址","children":[]}],"git":{"createdTime":1711376238000,"updatedTime":1712702618000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":0.78,"words":233},"filePathRelative":"basis/jvm/手动编写jvm虚拟机/4、添加testOption-便于单元测试.md","localizedDate":"2024年4月10日","excerpt":"<h3>原因</h3>\\n<p>自己手动写java虚拟机源码，属于章回式讲课。</p>\\n<p>实际项目，要减少冗余重复代码，让接手的人易于理解</p>\\n<p>也要有单元测试类，便于项目重构</p>\\n<p>因此添加testOption</p>\\n<h3>测试参数</h3>\\n<p>增加 -test</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">type</span> Cmd <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\ttestOption  <span class=\\"token builtin\\">string</span>  <span class=\\"token comment\\">// 指定测试方法</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">parseCmd</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span>Cmd <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">//增加测试方法</span>\\n\\tflag<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">StringVar</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>cmd<span class=\\"token punctuation\\">.</span>testOption<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"test\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"test\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,m as data};
