import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as a,f as p}from"./app-CtvCwAmI.js";const o={},n=p('<h3 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h3><ol><li><p>生产者和消费者 阻塞队列是给生产者和消费者解耦的</p></li><li><p>多生产者和多消费者场景</p></li><li><p>线程池与生产消费者模式</p></li></ol><h3 id="线上问题定位" tabindex="-1"><a class="header-anchor" href="#线上问题定位"><span>线上问题定位</span></a></h3><p>top 查看每个进程的情况</p><p>top 1 查看每个CPU的性能数据。</p><p>top -H 看每个线程的性能信息</p><p>第一种情况，某个线程CPU利用率一直100%，则说明是这个线程有可能有死循环，那么 请记住这个PID。</p><p>第二种情况，某个线程一直在TOP 10的位置，这说明这个线程可能有性能问题。</p><p>第三种情况，CPU利用率高的几个线程在不停变化，说明并不是由某一个线程导致CPU 偏高。 如果是第一种情况，也有可能是GC造成，可以用jstat命令看一下GC情况</p><p>sudo /opt/java/bin/jstat -gcutil 31177 1000 5</p><p>sudo -u admin /opt/taobao/java/bin/jstack 31177 &gt; /home/tengfei.fangtf/dump17</p><h3 id="性能测试" tabindex="-1"><a class="header-anchor" href="#性能测试"><span>性能测试</span></a></h3><p>当前有多少台机器在压测服务器 netstat -nat | grep 12200 –c</p><p>数据库连接 netstat -nat | grep 3306 –c</p><p>ps命令查看下线程数 ps -eLf | grep java -c</p><p>慢的SQL grep Y /home/admin/logs/xxx/monitor/dal-rw-monitor.log |awk -F&#39;,&#39; &#39;{print $7$5}&#39; | sort -nr|head -20</p><p>查看网络流量。 cat /proc/net/dev</p><p>查看系统平均负载。 cat /proc/loadavg</p><p>查看系统内存情况。 cat /proc/meminfo</p><p>查看CPU的利用率。 cat /proc/stat</p><h3 id="git地址" tabindex="-1"><a class="header-anchor" href="#git地址"><span>git地址</span></a></h3><p>https://github.com/yinlingchaoliu/juc</p>',22),i=[n];function r(c,l){return e(),a("div",null,i)}const h=t(o,[["render",r],["__file","11.java编程实践.html.vue"]]),m=JSON.parse('{"path":"/basis/juc/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/11.java%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5.html","title":"11.java编程实践","lang":"zh-CN","frontmatter":{"title":"11.java编程实践","date":"2024-03-25T22:02:09.000Z","order":11,"category":["java并发编程艺术"],"tag":["juc"],"description":"场景 生产者和消费者 阻塞队列是给生产者和消费者解耦的 多生产者和多消费者场景 线程池与生产消费者模式 线上问题定位 top 查看每个进程的情况 top 1 查看每个CPU的性能数据。 top -H 看每个线程的性能信息 第一种情况，某个线程CPU利用率一直100%，则说明是这个线程有可能有死循环，那么 请记住这个PID。 第二种情况，某个线程一直在T...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/juc/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/11.java%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"11.java编程实践"}],["meta",{"property":"og:description","content":"场景 生产者和消费者 阻塞队列是给生产者和消费者解耦的 多生产者和多消费者场景 线程池与生产消费者模式 线上问题定位 top 查看每个进程的情况 top 1 查看每个CPU的性能数据。 top -H 看每个线程的性能信息 第一种情况，某个线程CPU利用率一直100%，则说明是这个线程有可能有死循环，那么 请记住这个PID。 第二种情况，某个线程一直在T..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T08:03:08.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"juc"}],["meta",{"property":"article:published_time","content":"2024-03-25T22:02:09.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-09T08:03:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"11.java编程实践\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-25T22:02:09.000Z\\",\\"dateModified\\":\\"2024-04-09T08:03:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"场景","slug":"场景","link":"#场景","children":[]},{"level":3,"title":"线上问题定位","slug":"线上问题定位","link":"#线上问题定位","children":[]},{"level":3,"title":"性能测试","slug":"性能测试","link":"#性能测试","children":[]},{"level":3,"title":"git地址","slug":"git地址","link":"#git地址","children":[]}],"git":{"createdTime":1712619790000,"updatedTime":1712649788000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":1.22,"words":367},"filePathRelative":"basis/juc/java并发编程艺术/11.java编程实践.md","localizedDate":"2024年3月26日","excerpt":"<h3>场景</h3>\\n<ol>\\n<li>\\n<p>生产者和消费者 阻塞队列是给生产者和消费者解耦的</p>\\n</li>\\n<li>\\n<p>多生产者和多消费者场景</p>\\n</li>\\n<li>\\n<p>线程池与生产消费者模式</p>\\n</li>\\n</ol>\\n<h3>线上问题定位</h3>\\n<p>top  查看每个进程的情况</p>\\n<p>top 1  查看每个CPU的性能数据。</p>\\n<p>top -H  看每个线程的性能信息</p>\\n<p>第一种情况，某个线程CPU利用率一直100%，则说明是这个线程有可能有死循环，那么\\n请记住这个PID。</p>\\n<p>第二种情况，某个线程一直在TOP 10的位置，这说明这个线程可能有性能问题。</p>","autoDesc":true}');export{h as comp,m as data};
