import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o,c as p,a,b as e,d as i,f as d}from"./app-CtvCwAmI.js";const r={},l={href:"https://www.jianshu.com/p/20108abc1dd6",target:"_blank",rel:"noopener noreferrer"},c={href:"https://www.jianshu.com/p/b5b8afd008b3",target:"_blank",rel:"noopener noreferrer"},u={href:"https://mp.weixin.qq.com/s/6Q818XA5FaHd7jJMFBG60w",target:"_blank",rel:"noopener noreferrer"},m=d(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>--重塑模块化
    --改变通信方式
        --接口暴露
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>难点：技术难点卡在如何创造这两个函数上来支持这个功能</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="token function">include_with_api</span><span class="token punctuation">(</span>project<span class="token punctuation">:</span><span class="token interpolation-string"><span class="token string">&quot;:plugin-messenger-foundation&quot;</span></span><span class="token punctuation">)</span><span class="token comment">//初始化项目</span>
dependencies<span class="token punctuation">{</span>
      <span class="token function">compileApi</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;:plugin-messenger-foundation&quot;</span></span><span class="token punctuation">)</span><span class="token comment">//引入项目依赖</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>“.api”化的功能，强大在于，在编译的时候，子组件将公用接口下沉到基础库，供其他module使用，而不会导致base module急剧增大，分工职责更加明确化 效果==&gt;使用效果前<img src="https://upload-images.jianshu.io/upload_images/5526061-b13f7f51bbacc388.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="" loading="lazy"> 使用效果后==&gt;<img src="https://upload-images.jianshu.io/upload_images/5526061-bc174451c7fe01bd.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="" loading="lazy"> 其中“.api”立下承担50%效果</p><p>#####2、编写的思想 声明式编程：将模块中代码拆分为“声明+实现”，其他模块只需要引用声明即可。 微信的方案，只留了一个遐想空间“自动生成一个sdk工程，拷贝.api后缀文件到工程当中，后面其他工程依赖编译的只是这个生成工程，简单好用” 解决方案是那两个函数include_with_api，compileApi，此时感受到一万点暴击</p><p>经过了一周的钻研已经攻克了，先从使用教程，再到原理分析</p><p>#####3使用教程</p><p>在根目录下build.gradle</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>buildscript<span class="token punctuation">{</span>
  dependencies <span class="token punctuation">{</span>
    <span class="token comment">//本插件代码已上传jcenter ，下载记得翻墙</span>
    classpath <span class="token string">&#39;com.chaoliu:weixinApi:1.0.0&#39;</span> 
  <span class="token punctuation">}</span>
    repositories <span class="token punctuation">{</span>
        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//gradle 脚本尾部</span>
apply plugin<span class="token punctuation">:</span> <span class="token string">&#39;weixinApi&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>gradle.properties 声明</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>##支持声明api式编程
##引用的moudle
ApiModule=&#39;:module_api&#39;
##是否每次都执行 未配置此属性 默认为true 
isRunAlways=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>支持weixinapi脚本自动触发，且有良心提示</p><figure><img src="https://upload-images.jianshu.io/upload_images/5526061-dbbfc90ed27021d4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="组名weixinapi，且有良心提示" tabindex="0" loading="lazy"><figcaption>组名weixinapi，且有良心提示</figcaption></figure><p>settings.gradle 正常写法</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//api testmodule 为lib库
include &#39;:module_api&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>若有module采用&quot;.api&quot;方式开发 引入公共ApiModule即可</p><p><code>特别提供addComponent 函数，只有在assemble任务才引入依赖</code> 开发中避免本moudle引入过多其他module声明</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>    //和正常开发无任何变化
    implementation project(&#39;:module_api&#39;)

    // addComponent(&#39;:module_api&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想编辑.api后缀的java文件，为了能让Android Studio继续高亮该怎么办？可以在File Type中把.api作为java文件类型。</p><figure><img src="https://upload-images.jianshu.io/upload_images/5526061-8db9432c8a99af18.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="设置File Types" tabindex="0" loading="lazy"><figcaption>设置File Types</figcaption></figure><p>#####4、喜欢的朋友们记得给我的项目一个star https://github.com/yinlingchaoliu/AndroidComponent 具体代码位置去&quot;.api&quot;插件 component/weixinApi</p><p>示例module module_main ,module_girls</p><p>下一篇进行原理分析，如何进行操作，解决这个问题</p>`,23);function g(v,b){const n=s("ExternalLinkIcon");return o(),p("div",null,[a("p",null,[e("今天终于方案研究出来了，双击666 ####导航 "),a("a",l,[e('第3章 组件声明式编程 仿微信".api"化(上)'),i(n)]),a("a",c,[e('第3章 仿微信".api"化 实现原理（下）'),i(n)])]),a("p",null,[e("#####1、背景 "),a("a",u,[e("微信Android模块化架构重构实践"),i(n)]),e("，在腾讯文章中提到“.api”解决方案 原文介绍位置，建议读此文读者反复读这个位置")]),m])}const f=t(r,[["render",g],["__file","第3章-组件声明式编程-仿微信_-api_化.html.vue"]]),w=JSON.parse('{"path":"/fe/android/Android%E7%BB%84%E4%BB%B6%E5%8C%96/%E7%AC%AC3%E7%AB%A0-%E7%BB%84%E4%BB%B6%E5%A3%B0%E6%98%8E%E5%BC%8F%E7%BC%96%E7%A8%8B-%E4%BB%BF%E5%BE%AE%E4%BF%A1_-api_%E5%8C%96.html","title":"第3章-组件声明式编程-仿微信\\"-api\\"化","lang":"zh-CN","frontmatter":{"title":"第3章-组件声明式编程-仿微信\\"-api\\"化","date":"2024-03-24T11:47:50.000Z","category":["Android组件化"],"tag":["archive"],"description":"今天终于方案研究出来了，双击666 ####导航 第3章 组件声明式编程 仿微信\\".api\\"化(上) 第3章 仿微信\\".api\\"化 实现原理（下） #####1、背景 微信Android模块化架构重构实践，在腾讯文章中提到“.api”解决方案 原文介绍位置，建议读此文读者反复读这个位置 难点：技术难点卡在如何创造这两个函数上来支持这个功能 “.api”...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/fe/android/Android%E7%BB%84%E4%BB%B6%E5%8C%96/%E7%AC%AC3%E7%AB%A0-%E7%BB%84%E4%BB%B6%E5%A3%B0%E6%98%8E%E5%BC%8F%E7%BC%96%E7%A8%8B-%E4%BB%BF%E5%BE%AE%E4%BF%A1_-api_%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"第3章-组件声明式编程-仿微信\\"-api\\"化"}],["meta",{"property":"og:description","content":"今天终于方案研究出来了，双击666 ####导航 第3章 组件声明式编程 仿微信\\".api\\"化(上) 第3章 仿微信\\".api\\"化 实现原理（下） #####1、背景 微信Android模块化架构重构实践，在腾讯文章中提到“.api”解决方案 原文介绍位置，建议读此文读者反复读这个位置 难点：技术难点卡在如何创造这两个函数上来支持这个功能 “.api”..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://upload-images.jianshu.io/upload_images/5526061-b13f7f51bbacc388.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T14:17:18.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-24T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T14:17:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第3章-组件声明式编程-仿微信\\\\\\"-api\\\\\\"化\\",\\"image\\":[\\"https://upload-images.jianshu.io/upload_images/5526061-b13f7f51bbacc388.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\",\\"https://upload-images.jianshu.io/upload_images/5526061-bc174451c7fe01bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\",\\"https://upload-images.jianshu.io/upload_images/5526061-dbbfc90ed27021d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\",\\"https://upload-images.jianshu.io/upload_images/5526061-8db9432c8a99af18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\"],\\"datePublished\\":\\"2024-03-24T11:47:50.000Z\\",\\"dateModified\\":\\"2024-03-25T14:17:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711376238000,"updatedTime":1711376238000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":2.42,"words":725},"filePathRelative":"fe/android/Android组件化/第3章-组件声明式编程-仿微信\\"-api\\"化.md","localizedDate":"2024年3月24日","excerpt":"<p>今天终于方案研究出来了，双击666\\n####导航\\n<a href=\\"https://www.jianshu.com/p/20108abc1dd6\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">第3章 组件声明式编程 仿微信\\".api\\"化(上)</a>\\n<a href=\\"https://www.jianshu.com/p/b5b8afd008b3\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">第3章 仿微信\\".api\\"化 实现原理（下）</a></p>\\n<p>#####1、背景\\n<a href=\\"https://mp.weixin.qq.com/s/6Q818XA5FaHd7jJMFBG60w\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">微信Android模块化架构重构实践</a>，在腾讯文章中提到“.api”解决方案\\n原文介绍位置，建议读此文读者反复读这个位置</p>","autoDesc":true}');export{f as comp,w as data};
