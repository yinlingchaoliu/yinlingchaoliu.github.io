import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,f as t}from"./app-CtvCwAmI.js";const e={},p=t(`<h3 id="知识扩展" tabindex="-1"><a class="header-anchor" href="#知识扩展"><span>知识扩展</span></a></h3><p>method_info[]</p><p>找到属性为code代码，二进制进行解析</p><p>魔法数是0x OPCODE</p><p>java虚拟机指令 以opcode开头</p><p>java虚拟机256条指令</p><p>定义205条指令 0~202 (0x00~0xCA)、0xFE、0xFF</p><p>定义助记符</p><p>例如 0x00 助记符 nop</p><h3 id="指令集方法" tabindex="-1"><a class="header-anchor" href="#指令集方法"><span>指令集方法</span></a></h3><p>普通计算压栈出栈</p><p>控制访问偏移量</p><p>指令集做两件事</p><p>1、读取操作码</p><p>2、执行操作数栈</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Instruction <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">FetchOperands</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>BytecodeReader<span class="token punctuation">)</span> <span class="token comment">//读取操作码</span>
	<span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token comment">//执行操作数栈</span>
<span class="token punctuation">}</span>

<span class="token comment">// 1. 没有操作数的指令</span>
<span class="token keyword">type</span> NoOperandsInstruction <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>NoOperandsInstruction<span class="token punctuation">)</span> <span class="token function">FetchOperands</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ByteCodeReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// nothing to do</span>
<span class="token punctuation">}</span>

<span class="token comment">// 2. 跳转指令 -&gt;用于跳转下一个方法</span>
<span class="token keyword">type</span> BranchInstruction <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Offset <span class="token builtin">int</span> <span class="token comment">// 跳转偏移量</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>BranchInstruction<span class="token punctuation">)</span> <span class="token function">FetchOperands</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ByteCodeReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	self<span class="token punctuation">.</span>Offset <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">ReadInt16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 从字节码中读取一个两字节的数，作为偏移量</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>branch.go</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Branch</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">,</span> offset <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	pc <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	nextpc <span class="token operator">:=</span> pc <span class="token operator">+</span> offset
	frame<span class="token punctuation">.</span><span class="token function">SetNextPC</span><span class="token punctuation">(</span>nextpc<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="add指令" tabindex="-1"><a class="header-anchor" href="#add指令"><span>add指令</span></a></h3><p>压栈出栈做计算</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> IADD <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>IADD<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	v2 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	v1 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	result <span class="token operator">:=</span> v1 <span class="token operator">+</span> v2
	stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="goto指令" tabindex="-1"><a class="header-anchor" href="#goto指令"><span>goto指令</span></a></h3><p>偏移量offset做控制</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> GOTO <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	base<span class="token punctuation">.</span>BranchInstruction
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>GOTO<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	base<span class="token punctuation">.</span><span class="token function">Branch</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> self<span class="token punctuation">.</span>Offset<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实战项目地址" tabindex="-1"><a class="header-anchor" href="#实战项目地址"><span>实战项目地址</span></a></h3><p>https://gitee.com/yinlingchaoliu/jvmgo.git</p>`,26),o=[p];function c(i,l){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","7、指令集.html.vue"]]),k=JSON.parse('{"path":"/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/7%E3%80%81%E6%8C%87%E4%BB%A4%E9%9B%86.html","title":"7、指令集","lang":"zh-CN","frontmatter":{"title":"7、指令集","date":"2024-04-10T06:06:06.000Z","category":["手动编写jvm虚拟机"],"tag":["jvmgo"],"description":"知识扩展 method_info[] 找到属性为code代码，二进制进行解析 魔法数是0x OPCODE java虚拟机指令 以opcode开头 java虚拟机256条指令 定义205条指令 0~202 (0x00~0xCA)、0xFE、0xFF 定义助记符 例如 0x00 助记符 nop 指令集方法 普通计算压栈出栈 控制访问偏移量 指令集做两件事 ...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/7%E3%80%81%E6%8C%87%E4%BB%A4%E9%9B%86.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"7、指令集"}],["meta",{"property":"og:description","content":"知识扩展 method_info[] 找到属性为code代码，二进制进行解析 魔法数是0x OPCODE java虚拟机指令 以opcode开头 java虚拟机256条指令 定义205条指令 0~202 (0x00~0xCA)、0xFE、0xFF 定义助记符 例如 0x00 助记符 nop 指令集方法 普通计算压栈出栈 控制访问偏移量 指令集做两件事 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T22:43:38.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"jvmgo"}],["meta",{"property":"article:published_time","content":"2024-04-10T06:06:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-09T22:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7、指令集\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T06:06:06.000Z\\",\\"dateModified\\":\\"2024-04-09T22:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"知识扩展","slug":"知识扩展","link":"#知识扩展","children":[]},{"level":3,"title":"指令集方法","slug":"指令集方法","link":"#指令集方法","children":[]},{"level":3,"title":"add指令","slug":"add指令","link":"#add指令","children":[]},{"level":3,"title":"goto指令","slug":"goto指令","link":"#goto指令","children":[]},{"level":3,"title":"实战项目地址","slug":"实战项目地址","link":"#实战项目地址","children":[]}],"git":{"createdTime":1711376238000,"updatedTime":1712702618000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":1.04,"words":312},"filePathRelative":"basis/jvm/手动编写jvm虚拟机/7、指令集.md","localizedDate":"2024年4月10日","excerpt":"<h3>知识扩展</h3>\\n<p>method_info[]</p>\\n<p>找到属性为code代码，二进制进行解析</p>\\n<p>魔法数是0x OPCODE</p>\\n<p>java虚拟机指令 以opcode开头</p>\\n<p>java虚拟机256条指令</p>\\n<p>定义205条指令 0~202 (0x00~0xCA)、0xFE、0xFF</p>\\n<p>定义助记符</p>\\n<p>例如 0x00    助记符 nop</p>\\n<h3>指令集方法</h3>\\n<p>普通计算压栈出栈</p>\\n<p>控制访问偏移量</p>\\n<p>指令集做两件事</p>\\n<p>1、读取操作码</p>\\n<p>2、执行操作数栈</p>","autoDesc":true}');export{d as comp,k as data};
