import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c,a as n,d as a,w as t,f as i,b as e}from"./app-CtvCwAmI.js";const u="/assets/frame-5wyRdmlE.png",d={},r=i('<h3 id="运行时栈帧结构" tabindex="-1"><a class="header-anchor" href="#运行时栈帧结构"><span>运行时栈帧结构</span></a></h3><figure><img src="'+u+`" alt="运行时栈帧结构" tabindex="0" loading="lazy"><figcaption>运行时栈帧结构</figcaption></figure><h4 id="局部变量表" tabindex="-1"><a class="header-anchor" href="#局部变量表"><span>局部变量表</span></a></h4><p>局部变量表式一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量</p><ul><li><p>变量槽slot为最小单位，每个solt存放一个boolean,char,short,int,float,reference,returnAddress类型的值.</p></li><li><p>64位机器，连续2个slot空间为long,double类型分配</p></li><li><p>虚拟机使用索引定位方式使用slot, n 代表第n个slot, long，double采用 n和n+1两个slot</p></li><li><p>为了尽可能节省栈帧空间，局部变量表中Slot是可以重用的。 出现问题，当PC计数器超过作用域，slot交给其他变量复用。会影响到gc回收</p></li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>不使用的对象应手动赋值为null
尤其指分配的大对象
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//空闲空间未被回收</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> placeHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    system<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="操作数栈" tabindex="-1"><a class="header-anchor" href="#操作数栈"><span>操作数栈</span></a></h4><p>操作栈 后入先出 执行指令，是压栈出栈的过程</p><h4 id="动态链接" tabindex="-1"><a class="header-anchor" href="#动态链接"><span>动态链接</span></a></h4><p>栈帧中指向运行时常量池的引用，持有这个引用为了支持方法调用过程中动态连接</p><h4 id="方法返回地址" tabindex="-1"><a class="header-anchor" href="#方法返回地址"><span>方法返回地址</span></a></h4><p>当一个方法执行后，退出方法</p><ul><li>方法返回字节指令码 返回值给调用者</li><li>方法执行遇到异常 athrow指令码 异常给调用者</li></ul><h3 id="方法调用" tabindex="-1"><a class="header-anchor" href="#方法调用"><span>方法调用</span></a></h3><h4 id="解析" tabindex="-1"><a class="header-anchor" href="#解析"><span>解析</span></a></h4><p>所有方法调用中目标方法在class文件里面都是常量池中符号引用</p><p>类加载解析过程中，会将其中一部分符号引用转化为直接引用</p><p>invokestatic指令码，调用静态方法</p><p>invokespecial指令码，调用构造<code>&lt;init&gt;</code>方法，</p><p>invokevirtual指令码，调用虚方法</p><p>invokeinterface指令码，调用接口方法</p><p>invokedynamic指令码，调用动态方法</p><p>final 修饰方法 是非虚方法</p><h4 id="分派" tabindex="-1"><a class="header-anchor" href="#分派"><span>分派</span></a></h4><p>多态实现原理</p><ol><li>静态分派 依赖静态类型来定位方法执行版本称之为静态分派</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dispatch</span><span class="token punctuation">{</span>

  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Human</span> guy<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello,guy!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Man</span> man<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello,man!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Woman</span> guy<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello,woman!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Human</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Human</span> woman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Dispatch</span> dispatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dispatch<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dispatch<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>woman<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

 输出结果 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
 
 hello<span class="token punctuation">,</span>guy<span class="token operator">!</span>
 hello<span class="token punctuation">,</span>guy<span class="token operator">!</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译结果</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>dispatch<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Man</span><span class="token punctuation">)</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>
dispatch<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Woman</span><span class="token punctuation">)</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>动态分派</li></ol><p>重写</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dispatch</span><span class="token punctuation">{</span>

  <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span><span class="token punctuation">{</span>
      <span class="token annotation punctuation">@Override</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello,man!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span><span class="token punctuation">{</span>
     <span class="token annotation punctuation">@Override</span>
     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello,woman!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Human</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Human</span> woman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    man<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    woman<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

 输出结果 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
 
 hello<span class="token punctuation">,</span>man<span class="token operator">!</span>
 hello<span class="token punctuation">,</span>woman<span class="token operator">!</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>单分派和多分派</li><li>虚拟分派 虚方法表存放方法实际地址 invokeinterface</li></ol><h3 id="字节码执行引擎" tabindex="-1"><a class="header-anchor" href="#字节码执行引擎"><span>字节码执行引擎</span></a></h3><p>解释执行</p><p>基于栈的解释器</p><h3 id="文档说明" tabindex="-1"><a class="header-anchor" href="#文档说明"><span>文档说明</span></a></h3><h4 id="_1-指令集" tabindex="-1"><a class="header-anchor" href="#_1-指令集"><span>1.指令集</span></a></h4>`,39),k=n("h4",{id:"_2-方法调用和返回",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-方法调用和返回"},[n("span",null,"2.方法调用和返回")])],-1),m=n("h4",{id:"_3-基于栈的解释器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-基于栈的解释器"},[n("span",null,"3. 基于栈的解释器")])],-1);function v(b,h){const s=o("RouteLink");return l(),c("div",null,[r,n("p",null,[a(s,{to:"/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/7%E3%80%81%E6%8C%87%E4%BB%A4%E9%9B%86.html"},{default:t(()=>[e("指令集文档")]),_:1})]),k,n("p",null,[a(s,{to:"/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/12%E3%80%81%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E5%92%8C%E8%BF%94%E5%9B%9E.html"},{default:t(()=>[e("方法调用和返回文档")]),_:1})]),m,n("p",null,[a(s,{to:"/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/8%E3%80%81%E8%A7%A3%E9%87%8A%E5%99%A8.html"},{default:t(()=>[e("解释器文档")]),_:1})])])}const E=p(d,[["render",v],["__file","6、字节码执行引擎.html.vue"]]),w=JSON.parse('{"path":"/basis/jvm/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/6%E3%80%81%E5%AD%97%E8%8A%82%E7%A0%81%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E.html","title":"6、字节码执行引擎","lang":"zh-CN","frontmatter":{"title":"6、字节码执行引擎","date":"2024-04-10T06:06:06.000Z","category":["深入理解java虚拟机"],"tag":["jvm"],"description":"运行时栈帧结构 运行时栈帧结构运行时栈帧结构 局部变量表 局部变量表式一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量 变量槽slot为最小单位，每个solt存放一个boolean,char,short,int,float,reference,returnAddress类型的值. 64位机器，连续2个slot空间为long,double类型...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/jvm/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/6%E3%80%81%E5%AD%97%E8%8A%82%E7%A0%81%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"6、字节码执行引擎"}],["meta",{"property":"og:description","content":"运行时栈帧结构 运行时栈帧结构运行时栈帧结构 局部变量表 局部变量表式一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量 变量槽slot为最小单位，每个solt存放一个boolean,char,short,int,float,reference,returnAddress类型的值. 64位机器，连续2个slot空间为long,double类型..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T03:01:58.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"jvm"}],["meta",{"property":"article:published_time","content":"2024-04-10T06:06:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T03:01:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6、字节码执行引擎\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T06:06:06.000Z\\",\\"dateModified\\":\\"2024-04-12T03:01:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"运行时栈帧结构","slug":"运行时栈帧结构","link":"#运行时栈帧结构","children":[]},{"level":3,"title":"方法调用","slug":"方法调用","link":"#方法调用","children":[]},{"level":3,"title":"字节码执行引擎","slug":"字节码执行引擎","link":"#字节码执行引擎","children":[]},{"level":3,"title":"文档说明","slug":"文档说明","link":"#文档说明","children":[]}],"git":{"createdTime":1712797641000,"updatedTime":1712890918000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":3}]},"readingTime":{"minutes":2.7,"words":809},"filePathRelative":"basis/jvm/深入理解java虚拟机/6、字节码执行引擎.md","localizedDate":"2024年4月10日","excerpt":"<h3>运行时栈帧结构</h3>\\n<figure><figcaption>运行时栈帧结构</figcaption></figure>\\n<h4>局部变量表</h4>\\n<p>局部变量表式一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量</p>\\n<ul>\\n<li>\\n<p>变量槽slot为最小单位，每个solt存放一个boolean,char,short,int,float,reference,returnAddress类型的值.</p>\\n</li>\\n<li>\\n<p>64位机器，连续2个slot空间为long,double类型分配</p>\\n</li>\\n<li>\\n<p>虚拟机使用索引定位方式使用slot, n 代表第n个slot, long，double采用 n和n+1两个slot</p>\\n</li>\\n<li>\\n<p>为了尽可能节省栈帧空间，局部变量表中Slot是可以重用的。\\n出现问题，当PC计数器超过作用域，slot交给其他变量复用。会影响到gc回收</p>\\n</li>\\n</ul>","autoDesc":true}');export{E as comp,w as data};
