import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as e}from"./app-CtvCwAmI.js";const p="/assets/create_manageservice-C4WcwXAE.png",t={},o=e('<h3 id="启动servicemanage" tabindex="-1"><a class="header-anchor" href="#启动servicemanage"><span>启动serviceManage</span></a></h3><p>ServiceManager最核心的两个功能为查询和注册服务：</p><ul><li>注册服务：记录服务名和handle信息，保存到svclist列表；</li><li>查询服务：根据服务名查询相应的的handle信息。</li></ul><h3 id="启动流程" tabindex="-1"><a class="header-anchor" href="#启动流程"><span>启动流程</span></a></h3><figure><img src="'+p+`" alt="ServiceManager启动流程" tabindex="0" loading="lazy"><figcaption>ServiceManager启动流程</figcaption></figure><p>ServiceManager启动流程</p><ul><li>打开binder驱动：binder_open；</li><li>注册成为binder服务的大管家(守护进程)：binder_become_context_manager；</li><li>进入无限循环，处理client端发来的请求：binder_loop；</li><li>注册服务的过程，根据服务名称，但同一个服务已注册，重新注册前会先移除之前的注册信息</li><li>死亡通知: 当binder所在进程死亡后,会调用binder_release方法,然后调用binder_node_release.这个过程便会发出死亡通知的回调.</li></ul><h3 id="启动命令" tabindex="-1"><a class="header-anchor" href="#启动命令"><span>启动命令</span></a></h3><p>init进程解析init.rc文件, 启动service_manager进程</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">service</span> servicemanager /system/bin/servicemanager
    class core
    user system
    group system
    critical
    onrestart restart healthd
    onrestart restart zygote
    onrestart restart media
    onrestart restart surfaceflinger
    onrestart restart drm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动流程核心代码" tabindex="-1"><a class="header-anchor" href="#启动流程核心代码"><span>启动流程核心代码</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">binder_state</span> <span class="token operator">*</span>bs<span class="token punctuation">;</span>
    <span class="token comment">//打开binder驱动，申请128k字节大小的内存空间 【见小节2.2】</span>
    bs <span class="token operator">=</span> <span class="token function">binder_open</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">//成为上下文管理者 【见小节2.3】</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">binder_become_context_manager</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    selinux_enabled <span class="token operator">=</span> <span class="token function">is_selinux_enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//selinux权限是否使能</span>
    sehandle <span class="token operator">=</span> <span class="token function">selinux_android_service_context_handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">selinux_status_open</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>selinux_enabled <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sehandle <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//无法获取sehandle</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getcon</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>service_manager_context<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//无法获取service_manager上下文</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">//进入无限循环，处理client端发来的请求 【见小节2.4】</span>
    <span class="token function">binder_loop</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> svcmgr_handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="loop循环和解析" tabindex="-1"><a class="header-anchor" href="#loop循环和解析"><span>loop循环和解析</span></a></h3><p>loop循环</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">binder_loop</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">binder_state</span> <span class="token operator">*</span>bs<span class="token punctuation">,</span> binder_handler func<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">binder_write_read</span> bwr<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> readbuf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    bwr<span class="token punctuation">.</span>write_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    bwr<span class="token punctuation">.</span>write_consumed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    bwr<span class="token punctuation">.</span>write_buffer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    readbuf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> BC_ENTER_LOOPER<span class="token punctuation">;</span>
    <span class="token comment">//将BC_ENTER_LOOPER命令发送给binder驱动，让Service Manager进入循环 </span>
    <span class="token function">binder_write</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> readbuf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bwr<span class="token punctuation">.</span>read_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>readbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bwr<span class="token punctuation">.</span>read_consumed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        bwr<span class="token punctuation">.</span>read_buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span> readbuf<span class="token punctuation">;</span>

        res <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>bs<span class="token operator">-&gt;</span>fd<span class="token punctuation">,</span> BINDER_WRITE_READ<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bwr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//进入循环，不断地binder读写过程</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        res <span class="token operator">=</span> <span class="token function">binder_parse</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span> readbuf<span class="token punctuation">,</span> bwr<span class="token punctuation">.</span>read_consumed<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析处理</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">binder_parse</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">binder_state</span> <span class="token operator">*</span>bs<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">binder_io</span> <span class="token operator">*</span>bio<span class="token punctuation">,</span>
                 <span class="token class-name">uintptr_t</span> ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> binder_handler func<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">uintptr_t</span> end <span class="token operator">=</span> ptr <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span> size<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>ptr <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint32_t</span> cmd <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> ptr<span class="token punctuation">;</span>
        ptr <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> BR_NOOP<span class="token operator">:</span>  <span class="token comment">//无操作，退出循环</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> BR_TRANSACTION_COMPLETE<span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> BR_INCREFS<span class="token operator">:</span>
        <span class="token keyword">case</span> BR_ACQUIRE<span class="token operator">:</span>
        <span class="token keyword">case</span> BR_RELEASE<span class="token operator">:</span>
        <span class="token keyword">case</span> BR_DECREFS<span class="token operator">:</span>
            ptr <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">binder_ptr_cookie</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> BR_TRANSACTION<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">struct</span> <span class="token class-name">binder_transaction_data</span> <span class="token operator">*</span>txn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">binder_transaction_data</span> <span class="token operator">*</span><span class="token punctuation">)</span> ptr<span class="token punctuation">;</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token function">binder_dump_txn</span><span class="token punctuation">(</span>txn<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">unsigned</span> rdata<span class="token punctuation">[</span><span class="token number">256</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">struct</span> <span class="token class-name">binder_io</span> msg<span class="token punctuation">;</span> 
                <span class="token keyword">struct</span> <span class="token class-name">binder_io</span> reply<span class="token punctuation">;</span>
                <span class="token keyword">int</span> res<span class="token punctuation">;</span>
                <span class="token function">bio_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>reply<span class="token punctuation">,</span> rdata<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rdata<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">bio_init_from_txn</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> txn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从txn解析出binder_io信息</span>
                res <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> txn<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//回复</span>
                <span class="token function">binder_send_reply</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">,</span> txn<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            ptr <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>txn<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> BR_REPLY<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">struct</span> <span class="token class-name">binder_transaction_data</span> <span class="token operator">*</span>txn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">binder_transaction_data</span> <span class="token operator">*</span><span class="token punctuation">)</span> ptr<span class="token punctuation">;</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token function">binder_dump_txn</span><span class="token punctuation">(</span>txn<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bio<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">bio_init_from_txn</span><span class="token punctuation">(</span>bio<span class="token punctuation">,</span> txn<span class="token punctuation">)</span><span class="token punctuation">;</span>
                bio <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            ptr <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>txn<span class="token punctuation">)</span><span class="token punctuation">;</span>
            r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> BR_DEAD_BINDER<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">struct</span> <span class="token class-name">binder_death</span> <span class="token operator">*</span>death <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">binder_death</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">binder_uintptr_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">;</span>
            ptr <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">binder_uintptr_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// binder死亡消息</span>
            death<span class="token operator">-&gt;</span><span class="token function">func</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> death<span class="token operator">-&gt;</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> BR_FAILED_REPLY<span class="token operator">:</span>
            r <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> BR_DEAD_REPLY<span class="token operator">:</span>
            r <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注册服务和查询服务" tabindex="-1"><a class="header-anchor" href="#注册服务和查询服务"><span>注册服务和查询服务</span></a></h3><p>查询服务</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">uint32_t</span> <span class="token function">do_find_service</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">binder_state</span> <span class="token operator">*</span>bs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">uint16_t</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token class-name">uid_t</span> uid<span class="token punctuation">,</span> <span class="token class-name">pid_t</span> spid<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//查询相应的服务 【见小节3.1.1】</span>
    <span class="token keyword">struct</span> <span class="token class-name">svcinfo</span> <span class="token operator">*</span>si <span class="token operator">=</span> <span class="token function">find_svc</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>si <span class="token operator">||</span> <span class="token operator">!</span>si<span class="token operator">-&gt;</span>handle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>si<span class="token operator">-&gt;</span>allow_isolated<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uid_t</span> appid <span class="token operator">=</span> uid <span class="token operator">%</span> AID_USER<span class="token punctuation">;</span>
        <span class="token comment">//检查该服务是否允许孤立于进程而单独存在</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>appid <span class="token operator">&gt;=</span> AID_ISOLATED_START <span class="token operator">&amp;&amp;</span> appid <span class="token operator">&lt;=</span> AID_ISOLATED_END<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//服务是否满足查询条件</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">svc_can_find</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> len<span class="token punctuation">,</span> spid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> si<span class="token operator">-&gt;</span>handle<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册服务</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">do_add_service</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">binder_state</span> <span class="token operator">*</span>bs<span class="token punctuation">,</span>
                   <span class="token keyword">const</span> <span class="token class-name">uint16_t</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span>
                   <span class="token class-name">uint32_t</span> handle<span class="token punctuation">,</span> <span class="token class-name">uid_t</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> allow_isolated<span class="token punctuation">,</span>
                   <span class="token class-name">pid_t</span> spid<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">svcinfo</span> <span class="token operator">*</span>si<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handle <span class="token operator">||</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">//权限检查【见小节3.2.1】</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">svc_can_register</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> len<span class="token punctuation">,</span> spid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//服务检索【见小节3.1.1】</span>
    si <span class="token operator">=</span> <span class="token function">find_svc</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>si<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>si<span class="token operator">-&gt;</span>handle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">svcinfo_death</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> si<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//服务已注册时，释放相应的服务【见小节3.2.2】</span>
        <span class="token punctuation">}</span>
        si<span class="token operator">-&gt;</span>handle <span class="token operator">=</span> handle<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        si <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>si<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>si<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//内存不足，无法分配足够内存</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        si<span class="token operator">-&gt;</span>handle <span class="token operator">=</span> handle<span class="token punctuation">;</span>
        si<span class="token operator">-&gt;</span>len <span class="token operator">=</span> len<span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>si<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//内存拷贝服务信息</span>
        si<span class="token operator">-&gt;</span>name<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
        si<span class="token operator">-&gt;</span>death<span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> svcinfo_death<span class="token punctuation">;</span>
        si<span class="token operator">-&gt;</span>death<span class="token punctuation">.</span>ptr <span class="token operator">=</span> si<span class="token punctuation">;</span>
        si<span class="token operator">-&gt;</span>allow_isolated <span class="token operator">=</span> allow_isolated<span class="token punctuation">;</span>
        si<span class="token operator">-&gt;</span>next <span class="token operator">=</span> svclist<span class="token punctuation">;</span> <span class="token comment">// svclist保存所有已注册的服务</span>
        svclist <span class="token operator">=</span> si<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//以BC_ACQUIRE命令，handle为目标的信息，通过ioctl发送给binder驱动</span>
    <span class="token function">binder_acquire</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//以BC_REQUEST_DEATH_NOTIFICATION命令的信息，通过ioctl发送给binder驱动，主要用于清理内存等收尾工作。[见小节3.3]</span>
    <span class="token function">binder_link_to_death</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> handle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>si<span class="token operator">-&gt;</span>death<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码路径" tabindex="-1"><a class="header-anchor" href="#代码路径"><span>代码路径</span></a></h3><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>framework/native/cmds/servicemanager/
  <span class="token list punctuation">-</span> service_manager.c
  <span class="token list punctuation">-</span> binder.c
  
kernel/drivers/ (不同Linux分支路径略有不同)
  <span class="token list punctuation">-</span> staging/android/binder.c
  <span class="token list punctuation">-</span> android/binder.c 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),c=[o];function i(l,u){return s(),a("div",null,c)}const d=n(t,[["render",i],["__file","启动serviceManage.html.vue"]]),v=JSON.parse('{"path":"/fe/framework/binder/%E5%90%AF%E5%8A%A8serviceManage.html","title":"启动serviceManage","lang":"zh-CN","frontmatter":{"title":"启动serviceManage","date":"2024-04-14T11:47:50.000Z","order":2,"category":["framework"],"tag":["binder"],"description":"启动serviceManage ServiceManager最核心的两个功能为查询和注册服务： 注册服务：记录服务名和handle信息，保存到svclist列表； 查询服务：根据服务名查询相应的的handle信息。 启动流程 ServiceManager启动流程ServiceManager启动流程 ServiceManager启动流程 打开binder...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/fe/framework/binder/%E5%90%AF%E5%8A%A8serviceManage.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"启动serviceManage"}],["meta",{"property":"og:description","content":"启动serviceManage ServiceManager最核心的两个功能为查询和注册服务： 注册服务：记录服务名和handle信息，保存到svclist列表； 查询服务：根据服务名查询相应的的handle信息。 启动流程 ServiceManager启动流程ServiceManager启动流程 ServiceManager启动流程 打开binder..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-22T23:46:25.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"binder"}],["meta",{"property":"article:published_time","content":"2024-04-14T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-22T23:46:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"启动serviceManage\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-14T11:47:50.000Z\\",\\"dateModified\\":\\"2024-04-22T23:46:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"启动serviceManage","slug":"启动servicemanage","link":"#启动servicemanage","children":[]},{"level":3,"title":"启动流程","slug":"启动流程","link":"#启动流程","children":[]},{"level":3,"title":"启动命令","slug":"启动命令","link":"#启动命令","children":[]},{"level":3,"title":"启动流程核心代码","slug":"启动流程核心代码","link":"#启动流程核心代码","children":[]},{"level":3,"title":"loop循环和解析","slug":"loop循环和解析","link":"#loop循环和解析","children":[]},{"level":3,"title":"注册服务和查询服务","slug":"注册服务和查询服务","link":"#注册服务和查询服务","children":[]},{"level":3,"title":"代码路径","slug":"代码路径","link":"#代码路径","children":[]}],"git":{"createdTime":1713319747000,"updatedTime":1713829585000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":3.46,"words":1039},"filePathRelative":"fe/framework/binder/启动serviceManage.md","localizedDate":"2024年4月14日","excerpt":"<h3>启动serviceManage</h3>\\n<p>ServiceManager最核心的两个功能为查询和注册服务：</p>\\n<ul>\\n<li>注册服务：记录服务名和handle信息，保存到svclist列表；</li>\\n<li>查询服务：根据服务名查询相应的的handle信息。</li>\\n</ul>\\n<h3>启动流程</h3>\\n<figure><figcaption>ServiceManager启动流程</figcaption></figure>\\n<p>ServiceManager启动流程</p>\\n<ul>\\n<li>打开binder驱动：binder_open；</li>\\n<li>注册成为binder服务的大管家(守护进程)：binder_become_context_manager；</li>\\n<li>进入无限循环，处理client端发来的请求：binder_loop；</li>\\n<li>注册服务的过程，根据服务名称，但同一个服务已注册，重新注册前会先移除之前的注册信息</li>\\n<li>死亡通知: 当binder所在进程死亡后,会调用binder_release方法,然后调用binder_node_release.这个过程便会发出死亡通知的回调.</li>\\n</ul>","autoDesc":true}');export{d as comp,v as data};
