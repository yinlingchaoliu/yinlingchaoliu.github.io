import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o,c as p,a as i,b as e,d as t,f as n}from"./app-CtvCwAmI.js";const s={},g={href:"http://www.oreilly.com/programming/free/software-architecture-patterns.csp",target:"_blank",rel:"noopener noreferrer"},c={href:"http://www.oreilly.com/programming/free/files/software-architecture-patterns.pdf",target:"_blank",rel:"noopener noreferrer"},u=i("img",{src:"http://upload-images.jianshu.io/upload_images/5526061-6263032fb405dca5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240",alt:"image",loading:"lazy"},null,-1),m=n('<h2 id="一、分层架构" tabindex="-1"><a class="header-anchor" href="#一、分层架构"><span>一、分层架构</span></a></h2><p>分层架构（layered architecture）是最常见的软件架构，也是事实上的标准架构。如果你不知道要用什么架构，那就用它。</p><p>这种架构将软件分成若干个水平层，每一层都有清晰的角色和分工，不需要知道其他层的细节。层与层之间通过接口通信。</p><p>虽然没有明确约定，软件一定要分成多少层，但是四层的结构最常见。 <img src="http://upload-images.jianshu.io/upload_images/5526061-f64d0c03ad1e4f3e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="image" loading="lazy"></p><ul><li>表现层（presentation）：用户界面，负责视觉和用户互动</li><li>业务层（business）：实现业务逻辑</li><li>持久层（persistence）：提供数据，SQL 语句就放在这一层</li><li>数据库（database） ：保存数据</li></ul><p>有的软件在逻辑层和持久层之间，加了一个服务层（service），提供不同业务逻辑需要的一些通用接口。</p><p>用户的请求将依次通过这四层的处理，不能跳过其中任何一层。 <img src="http://upload-images.jianshu.io/upload_images/5526061-b2846c7ab8eb677c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="image" loading="lazy"> 优点</p><ul><li>结构简单，容易理解和开发</li><li>不同技能的程序员可以分工，负责不同的层，天然适合大多数软件公司的组织架构</li><li>每一层都可以独立测试，其他层的接口通过模拟解决</li></ul><p>缺点</p><ul><li>一旦环境变化，需要代码调整或增加功能时，通常比较麻烦和费时</li><li>部署比较麻烦，即使只修改一个小地方，往往需要整个软件重新部署，不容易做持续发布</li><li>软件升级时，可能需要整个服务暂停</li><li>扩展性差。用户请求大量增加时，必须依次扩展每一层，由于每一层内部是耦合的，扩展会很困难</li></ul><h2 id="二、事件驱动架构" tabindex="-1"><a class="header-anchor" href="#二、事件驱动架构"><span>二、事件驱动架构</span></a></h2><p>事件（event）是状态发生变化时，软件发出的通知。</p><p>事件驱动架构（event-driven architecture）就是通过事件进行通信的软件架构。它分成四个部分。 <img src="http://upload-images.jianshu.io/upload_images/5526061-d73879f49af5bfef.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="image" loading="lazy"> 对于简单的项目，事件队列、分发器和事件通道，可以合为一体，整个软件就分成事件代理和事件处理器两部分。 <img src="http://upload-images.jianshu.io/upload_images/5526061-f451e1ce3892e971.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="image" loading="lazy"> 优点</p><ul><li>分布式的异步架构，事件处理器之间高度解耦，软件的扩展性好</li><li>适用性广，各种类型的项目都可以用</li><li>性能较好，因为事件的异步本质，软件不易产生堵塞</li><li>事件处理器可以独立地加载和卸载，容易部署</li></ul><p>缺点</p><ul><li>涉及异步编程（要考虑远程通信、失去响应等情况），开发相对复杂</li><li>难以支持原子性操作，因为事件通过会涉及多个处理器，很难回滚</li><li>分布式和异步特性导致这个架构较难测试</li></ul><h2 id="三、微核架构" tabindex="-1"><a class="header-anchor" href="#三、微核架构"><span>三、微核架构</span></a></h2><p>微核架构（microkernel architecture）又称为&quot;插件架构&quot;（plug-in architecture），指的是软件的内核相对较小，主要功能和业务逻辑都通过插件实现。</p><p>内核（core）通常只包含系统运行的最小功能。插件则是互相独立的，插件之间的通信，应该减少到最低，避免出现互相依赖的问题。 <img src="http://upload-images.jianshu.io/upload_images/5526061-ee762ad3a35b9882.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="image" loading="lazy"> 优点</p><ul><li>良好的功能延伸性（extensibility），需要什么功能，开发一个插件即可</li><li>功能之间是隔离的，插件可以独立的加载和卸载，使得它比较容易部署，</li><li>可定制性高，适应不同的开发需要</li><li>可以渐进式地开发，逐步增加功能</li></ul><p>缺点</p><ul><li>扩展性（scalability）差，内核通常是一个独立单元，不容易做成分布式</li><li>开发难度相对较高，因为涉及到插件与内核的通信，以及内部的插件登记机制</li></ul><h2 id="四、微服务架构" tabindex="-1"><a class="header-anchor" href="#四、微服务架构"><span>四、微服务架构</span></a></h2><p>微服务架构（microservices architecture）是服务导向架构（service-oriented architecture，缩写 SOA）的升级。</p><p>每一个服务就是一个独立的部署单元（separately deployed unit）。这些单元都是分布式的，互相解耦，通过远程通信协议（比如REST、SOAP）联系。 <img src="http://upload-images.jianshu.io/upload_images/5526061-d995107826a9238c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="image" loading="lazy"> 微服务架构分成三种实现模式。</p><ul><li>RESTful API 模式：服务通过 API 提供，云服务就属于这一类</li><li>RESTful 应用模式：服务通过传统的网络协议或者应用协议提供，背后通常是一个多功能的应用程序，常见于企业内部</li><li>集中消息模式：采用消息代理（message broker），可以实现消息队列、负载均衡、统一日志和异常处理，缺点是会出现单点失败，消息代理可能要做成集群</li></ul><p>优点</p><ul><li>扩展性好，各个服务之间低耦合</li><li>容易部署，软件从单一可部署单元，被拆成了多个服务，每个服务都是可部署单元</li><li>容易开发，每个组件都可以进行持续集成式的开发，可以做到实时部署，不间断地升级</li><li>易于测试，可以单独测试每一个服务</li></ul><p>缺点</p><ul><li>由于强调互相独立和低耦合，服务可能会拆分得很细。这导致系统依赖大量的微服务，变得很凌乱和笨重，性能也会不佳。</li><li>一旦服务之间需要通信（即一个服务要用到另一个服务），整个架构就会变得复杂。典型的例子就是一些通用的 Utility 类，一种解决方案是把它们拷贝到每一个服务中去，用冗余换取架构的简单性。</li><li>分布式的本质使得这种架构很难实现原子性操作，交易回滚会比较困难。</li></ul><p>五、云架构 云结构（cloud architecture）主要解决扩展性和并发的问题，是最容易扩展的架构。</p><p>它的高扩展性，主要原因是没使用中央数据库，而是把数据都复制到内存中，变成可复制的内存数据单元。然后，业务处理能力封装成一个个处理单元（prcessing unit）。访问量增加，就新建处理单元；访问量减少，就关闭处理单元。由于没有中央数据库，所以扩展性的最大瓶颈消失了。由于每个处理单元的数据都在内存里，最好要进行数据持久化。</p><p>这个模式主要分成两部分：处理单元（processing unit）和虚拟中间件（virtualized middleware）。</p><ul><li>处理单元：实现业务逻辑</li><li>虚拟中间件：负责通信、保持sessions、数据复制、分布式处理、处理单元的部署。 <img src="http://upload-images.jianshu.io/upload_images/5526061-5ebef1e2dee02734.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="image" loading="lazy"> 虚拟中间件又包含四个组件。</li><li>消息中间件（Messaging Grid）：管理用户请求和session，当一个请求进来以后，决定分配给哪一个处理单元。</li><li>数据中间件（Data Grid）：将数据复制到每一个处理单元，即数据同步。保证某个处理单元都得到同样的数据。</li><li>处理中间件（Processing Grid）：可选，如果一个请求涉及不同类型的处理单元，该中间件负责协调处理单元</li><li>部署中间件（Deployment Manager）：负责处理单元的启动和关闭，监控负载和响应时间，当负载增加，就新启动处理单元，负载减少，就关闭处理单元。</li></ul><p>优点</p><ul><li>高负载，高扩展性</li><li>动态部署</li></ul><p>缺点</p><ul><li>实现复杂，成本较高</li><li>主要适合网站类应用，不合适大量数据吞吐的大型数据库应用</li><li>较难测试</li></ul><p>转自阮一峰 http://www.ruanyifeng.com/blog/2016/09/software-architecture.html</p>',39);function d(h,w){const a=l("ExternalLinkIcon");return o(),p("div",null,[i("p",null,[e("软件架构（software architecture）就是软件的基本结构。 O'Reilly 出版过一本免费的小册子"),i("a",g,[e("《Software Architecture Patterns》"),t(a)]),e("（"),i("a",c,[e("PDF"),t(a)]),e("）， 介绍了五种最常见的软件架构，是非常好的入门读物。我读后受益匪浅，下面就是我的笔记。 "),u]),m])}const y=r(s,[["render",d],["__file","软件架构.html.vue"]]),b=JSON.parse(`{"path":"/basis/architect/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84.html","title":"软件架构","lang":"zh-CN","frontmatter":{"title":"软件架构","date":"2024-03-24T11:47:50.000Z","category":["架构相关"],"tag":["archive"],"description":"软件架构（software architecture）就是软件的基本结构。 O'Reilly 出版过一本免费的小册子《Software Architecture Patterns》（PDF）， 介绍了五种最常见的软件架构，是非常好的入门读物。我读后受益匪浅，下面就是我的笔记。 image 一、分层架构 分层架构（layered architecture...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/architect/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"软件架构"}],["meta",{"property":"og:description","content":"软件架构（software architecture）就是软件的基本结构。 O'Reilly 出版过一本免费的小册子《Software Architecture Patterns》（PDF）， 介绍了五种最常见的软件架构，是非常好的入门读物。我读后受益匪浅，下面就是我的笔记。 image 一、分层架构 分层架构（layered architecture..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://upload-images.jianshu.io/upload_images/5526061-6263032fb405dca5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T14:17:18.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-24T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T14:17:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"软件架构\\",\\"image\\":[\\"http://upload-images.jianshu.io/upload_images/5526061-6263032fb405dca5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\",\\"http://upload-images.jianshu.io/upload_images/5526061-f64d0c03ad1e4f3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\",\\"http://upload-images.jianshu.io/upload_images/5526061-b2846c7ab8eb677c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\",\\"http://upload-images.jianshu.io/upload_images/5526061-d73879f49af5bfef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\",\\"http://upload-images.jianshu.io/upload_images/5526061-f451e1ce3892e971.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\",\\"http://upload-images.jianshu.io/upload_images/5526061-ee762ad3a35b9882.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\",\\"http://upload-images.jianshu.io/upload_images/5526061-d995107826a9238c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\",\\"http://upload-images.jianshu.io/upload_images/5526061-5ebef1e2dee02734.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\"],\\"datePublished\\":\\"2024-03-24T11:47:50.000Z\\",\\"dateModified\\":\\"2024-03-25T14:17:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":2,"title":"一、分层架构","slug":"一、分层架构","link":"#一、分层架构","children":[]},{"level":2,"title":"二、事件驱动架构","slug":"二、事件驱动架构","link":"#二、事件驱动架构","children":[]},{"level":2,"title":"三、微核架构","slug":"三、微核架构","link":"#三、微核架构","children":[]},{"level":2,"title":"四、微服务架构","slug":"四、微服务架构","link":"#四、微服务架构","children":[]}],"git":{"createdTime":1711376238000,"updatedTime":1711376238000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":6.74,"words":2023},"filePathRelative":"basis/architect/软件架构.md","localizedDate":"2024年3月24日","excerpt":"<p>软件架构（software architecture）就是软件的基本结构。\\nO'Reilly 出版过一本免费的小册子<a href=\\"http://www.oreilly.com/programming/free/software-architecture-patterns.csp\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">《Software Architecture Patterns》</a>（<a href=\\"http://www.oreilly.com/programming/free/files/software-architecture-patterns.pdf\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">PDF</a>）， 介绍了五种最常见的软件架构，是非常好的入门读物。我读后受益匪浅，下面就是我的笔记。\\n<img src=\\"http://upload-images.jianshu.io/upload_images/5526061-6263032fb405dca5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240\\" alt=\\"image\\" loading=\\"lazy\\"></p>","autoDesc":true}`);export{y as comp,b as data};
