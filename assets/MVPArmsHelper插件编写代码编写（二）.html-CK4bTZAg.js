import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as s,c as l,a as e,b as t,d as a,f as o}from"./app-CtvCwAmI.js";const c={},d={href:"https://www.jianshu.com/p/13006b034211",target:"_blank",rel:"noopener noreferrer"},p={href:"https://www.jianshu.com/p/35d40e172a63",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.jianshu.com/p/cd0bd74f800b",target:"_blank",rel:"noopener noreferrer"},u=o(`<p>####一、插件编写流程 1、触发Action事件，获得复制内容（见上一） 2、弹框补充信息 3、生成对应模板信息 4、动态插入文件</p><p>####一、弹框补充对应信息 新建--》GUI Form 生成文件继承JFrame 如安卓代码一般编写 拖拽的时候自动生成控件ID</p><p>####二、生成对应模板信息类<img src="https://upload-images.jianshu.io/upload_images/5526061-6ccb721e05c7d788.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="" loading="lazy"> 详见ArmsConstant.java</p><p>三、动态插入文件 核心是PSI 程序结构接口，通俗讲java像xml一样解析 http://www.jetbrains.org/intellij/sdk/docs/basics/architectural_overview/psi.html?search=Psi</p><p>修改project文件 常见三个点 1、寻找文件 2、java文件加载、解析、 3、新文件写入内容(非java)</p><p>1、寻找文件</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//api
FilenameIndex.getFilesByName(project, name, scope);

//真实封装
public static PsiFile getFileByName(PsiFile psiFile, String fileName) {
        Project project = psiFile.getProject();
        PsiFile[] psiFiles = FilenameIndex.getFilesByName(project, fileName, new EverythingGlobalScope(psiFile.getProject()));
        if (psiFiles.length != 0) {
            return psiFiles[0];
        }
        return null;
    }

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、java文件加载、解析、</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//psiFile转psiClass
    public static PsiClass getPsiClass(PsiFile psiFile) {
        String fullName = psiFile.getName();
        String className = fullName.split(&quot;\\.&quot;)[0];
        PsiClass[] psiClasses = PsiShortNamesCache.getInstance(psiFile.getProject()).getClassesByName(className, new EverythingGlobalScope(psiFile.getProject()));
        return psiClasses[0];
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//插入文件
PsiElementFactory factory = PsiFileUtils.getFactory(psiFile);
String  content = ArmConstant.getPageContractView(entity);
psiClass.add(factory.createMethodFromText(content,psiClass));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>//新建文件写入</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>directory.createFile(entity.getClearResponseBean()+&quot;.java&quot;);
        PsiFile file = directory.findFile(entity.getClearResponseBean()+&quot;.java&quot;);
        VirtualFile vf= file.getVirtualFile();
        String  content = ArmConstant.getBeanStr(entity);
        ToastUtil.show(content);
        try {
            vf.setBinaryContent(content.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>####部署 编译后可以生成插件<img src="https://upload-images.jianshu.io/upload_images/5526061-59a0158c5e087b89.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="" loading="lazy"></p><p>####github 代码 https://github.com/yinlingchaoliu/MVPArmsNetworkHelper</p>`,14);function g(v,h){const i=r("ExternalLinkIcon");return s(),l("div",null,[e("p",null,[t("####导航 "),e("a",d,[t("MVPArmsHelper 网络代码自动生成插件"),a(i)]),e("a",p,[t("MVPArmsHelper插件编写环境配置（一）"),a(i)]),e("a",m,[t("MVPArmsHelper插件编写代码编写（二）"),a(i)])]),u])}const P=n(c,[["render",g],["__file","MVPArmsHelper插件编写代码编写（二）.html.vue"]]),f=JSON.parse('{"path":"/fe/android/%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99/MVPArmsHelper%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99%EF%BC%88%E4%BA%8C%EF%BC%89.html","title":"MVPArmsHelper插件编写代码编写（二）","lang":"zh-CN","frontmatter":{"title":"MVPArmsHelper插件编写代码编写（二）","date":"2024-03-24T11:47:50.000Z","category":["框架编写分析"],"tag":["archive"],"description":"####导航 MVPArmsHelper 网络代码自动生成插件 MVPArmsHelper插件编写环境配置（一） MVPArmsHelper插件编写代码编写（二） ####一、插件编写流程 1、触发Action事件，获得复制内容（见上一） 2、弹框补充信息 3、生成对应模板信息 4、动态插入文件 ####一、弹框补充对应信息 新建--》GUI Form...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/fe/android/%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99/MVPArmsHelper%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99%EF%BC%88%E4%BA%8C%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"MVPArmsHelper插件编写代码编写（二）"}],["meta",{"property":"og:description","content":"####导航 MVPArmsHelper 网络代码自动生成插件 MVPArmsHelper插件编写环境配置（一） MVPArmsHelper插件编写代码编写（二） ####一、插件编写流程 1、触发Action事件，获得复制内容（见上一） 2、弹框补充信息 3、生成对应模板信息 4、动态插入文件 ####一、弹框补充对应信息 新建--》GUI Form..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://upload-images.jianshu.io/upload_images/5526061-6ccb721e05c7d788.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T14:17:18.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-24T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T14:17:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MVPArmsHelper插件编写代码编写（二）\\",\\"image\\":[\\"https://upload-images.jianshu.io/upload_images/5526061-6ccb721e05c7d788.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\",\\"https://upload-images.jianshu.io/upload_images/5526061-59a0158c5e087b89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\"],\\"datePublished\\":\\"2024-03-24T11:47:50.000Z\\",\\"dateModified\\":\\"2024-03-25T14:17:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711376238000,"updatedTime":1711376238000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":1.29,"words":386},"filePathRelative":"fe/android/框架编写/MVPArmsHelper插件编写代码编写（二）.md","localizedDate":"2024年3月24日","excerpt":"<p>####导航\\n<a href=\\"https://www.jianshu.com/p/13006b034211\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">MVPArmsHelper 网络代码自动生成插件</a>\\n<a href=\\"https://www.jianshu.com/p/35d40e172a63\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">MVPArmsHelper插件编写环境配置（一）</a>\\n<a href=\\"https://www.jianshu.com/p/cd0bd74f800b\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">MVPArmsHelper插件编写代码编写（二）</a></p>","autoDesc":true}');export{P as comp,f as data};
