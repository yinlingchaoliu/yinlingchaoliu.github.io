import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as a,f as i}from"./app-CtvCwAmI.js";const n={},s=i(`<h5 id="_1、封装、继承、多态" tabindex="-1"><a class="header-anchor" href="#_1、封装、继承、多态"><span>1、封装、继承、多态</span></a></h5><ul><li>封装：把对象的属性与行为封装为一个独立整体，并尽可能隐藏对象内部细节</li><li>继承：子类继承父类的特征和行为，实现重用</li><li>多态：同一个行为具有多个不同表现形式或形态的能力 多态三个必要条件： 1、继承父类 2、重写父类方法 3、父类引用指向子类对象</li></ul><h5 id="_2、重写和重载" tabindex="-1"><a class="header-anchor" href="#_2、重写和重载"><span>2、重写和重载</span></a></h5><p>1、重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变 2、重载是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</p><h5 id="_3、创建内部类和静态内部类" tabindex="-1"><a class="header-anchor" href="#_3、创建内部类和静态内部类"><span>3、创建内部类和静态内部类</span></a></h5><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public class Test {

    class A{

    }

    static class B{

    }

    public static void main(){
        Test.A a = new Test().new A(); //只有创建外部类，才能继续创建内部类
        Test.B b = new Test.B();
    }

}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),l=[s];function r(c,d){return t(),a("div",null,l)}const p=e(n,[["render",r],["__file","java基础知识(一).html.vue"]]),v=JSON.parse('{"path":"/basis/advanced/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E4%B8%80).html","title":"java基础知识(一)","lang":"zh-CN","frontmatter":{"title":"java基础知识(一)","date":"2024-03-25T22:02:09.000Z","category":["知识进阶"],"tag":["archive"],"description":"1、封装、继承、多态 封装：把对象的属性与行为封装为一个独立整体，并尽可能隐藏对象内部细节 继承：子类继承父类的特征和行为，实现重用 多态：同一个行为具有多个不同表现形式或形态的能力 多态三个必要条件： 1、继承父类 2、重写父类方法 3、父类引用指向子类对象 2、重写和重载 1、重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/advanced/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E4%B8%80).html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"java基础知识(一)"}],["meta",{"property":"og:description","content":"1、封装、继承、多态 封装：把对象的属性与行为封装为一个独立整体，并尽可能隐藏对象内部细节 继承：子类继承父类的特征和行为，实现重用 多态：同一个行为具有多个不同表现形式或形态的能力 多态三个必要条件： 1、继承父类 2、重写父类方法 3、父类引用指向子类对象 2、重写和重载 1、重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T09:37:40.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-25T22:02:09.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-26T09:37:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java基础知识(一)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-25T22:02:09.000Z\\",\\"dateModified\\":\\"2024-03-26T09:37:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711445860000,"updatedTime":1711445860000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":0.87,"words":262},"filePathRelative":"basis/advanced/java基础知识(一).md","localizedDate":"2024年3月26日","excerpt":"<h5>1、封装、继承、多态</h5>\\n<ul>\\n<li>封装：把对象的属性与行为封装为一个独立整体，并尽可能隐藏对象内部细节</li>\\n<li>继承：子类继承父类的特征和行为，实现重用</li>\\n<li>多态：同一个行为具有多个不同表现形式或形态的能力\\n多态三个必要条件：\\n1、继承父类\\n2、重写父类方法\\n3、父类引用指向子类对象</li>\\n</ul>\\n<h5>2、重写和重载</h5>\\n<p>1、重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变\\n2、重载是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</p>\\n<h5>3、创建内部类和静态内部类</h5>","autoDesc":true}');export{p as comp,v as data};
