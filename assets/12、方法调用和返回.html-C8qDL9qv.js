import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CtvCwAmI.js";const p={},e=t(`<h3 id="知识扩展" tabindex="-1"><a class="header-anchor" href="#知识扩展"><span>知识扩展</span></a></h3><p>静态方法和实例方法</p><table><thead><tr><th>静态方法(类方法)</th><th>实例方法</th></tr></thead><tbody><tr><td>通过类调用</td><td>通过实例调用</td></tr><tr><td>静态绑定</td><td>动态绑定</td></tr><tr><td>编译期确定</td><td>运行期确定</td></tr></tbody></table><ul><li>invokestatic 静态方法</li><li>invokespecial 调用无须绑定的实例方法，例如：构造方法，私有方法，super</li><li>invokeinterface 动态绑定- 调用接口</li><li>invokevirtual 动态绑定 -其他</li><li>invokedynamic 动态绑定 扩展</li></ul><h3 id="关键流程" tabindex="-1"><a class="header-anchor" href="#关键流程"><span>关键流程</span></a></h3><p>解析符号引用 找方法</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 从当前类及其父类中查找方法</span>
<span class="token keyword">func</span> <span class="token function">lookupMethod</span><span class="token punctuation">(</span>class <span class="token operator">*</span>Class<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Method <span class="token punctuation">{</span>
	method <span class="token operator">:=</span> <span class="token function">LookupMethodInClass</span><span class="token punctuation">(</span>class<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>
	<span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		method <span class="token operator">=</span> <span class="token function">lookupMethodInInterfaces</span><span class="token punctuation">(</span>class<span class="token punctuation">.</span>interfaces<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> method
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="核心方法调用" tabindex="-1"><a class="header-anchor" href="#核心方法调用"><span>核心方法调用</span></a></h3><p>方法调用</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// invokerFrame - 调用当前的方法的哪一个方法栈帧</span>
<span class="token comment">// method - 当前方法，即被 invokerFrame 调用的方法</span>
<span class="token keyword">func</span> <span class="token function">InvokeMethod</span><span class="token punctuation">(</span>invokerFrame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">,</span> method <span class="token operator">*</span>heap<span class="token punctuation">.</span>Method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 1.使用同一个线程为当前方法创建栈帧并压入线程栈顶</span>
	thread <span class="token operator">:=</span> invokerFrame<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	newFrame <span class="token operator">:=</span> thread<span class="token punctuation">.</span><span class="token function">NewFrame</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span>
	thread<span class="token punctuation">.</span><span class="token function">PushFrame</span><span class="token punctuation">(</span>newFrame<span class="token punctuation">)</span>

	<span class="token comment">// 2. 获取当前方法需要的参数个数，并从调用者 invokerFrame 的操作数栈中弹出制定个数个参数，放到当前方法的栈帧的本地变量中</span>
	argSlotCount <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">ArgSlotCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> argSlotCount <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> argSlotCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
			slot <span class="token operator">:=</span> invokerFrame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PopSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			newFrame<span class="token punctuation">.</span><span class="token function">LocalVars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetSlot</span><span class="token punctuation">(</span><span class="token function">uint</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> slot<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//hack</span>
	<span class="token keyword">if</span> method<span class="token punctuation">.</span><span class="token function">IsNative</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> method<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;registerNatives&quot;</span> <span class="token punctuation">{</span>
			thread<span class="token punctuation">.</span><span class="token function">PopFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>&quot;native method<span class="token punctuation">:</span> <span class="token operator">%</span>v<span class="token punctuation">.</span><span class="token operator">%</span>v<span class="token operator">%</span>v
&quot;<span class="token punctuation">,</span>
				method<span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">Descriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回指令</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 将当前栈帧的返回值（操作数栈顶）移除并推入调用者栈帧的操作数栈顶</span>
<span class="token comment">// 将当前栈帧从线程中移除</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ARETURN<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	thread <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	currentFrame <span class="token operator">:=</span> thread<span class="token punctuation">.</span><span class="token function">PopFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 当前方法的栈帧</span>
	invokerFrame <span class="token operator">:=</span> thread<span class="token punctuation">.</span><span class="token function">TopFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用当前方法的前一个方法的栈帧</span>
	retVal <span class="token operator">:=</span> currentFrame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PopRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	invokerFrame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PushRef</span><span class="token punctuation">(</span>retVal<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>IRETURN<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	thread <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	currentFrame <span class="token operator">:=</span> thread<span class="token punctuation">.</span><span class="token function">PopFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 当前方法的栈帧</span>
	invokerFrame <span class="token operator">:=</span> thread<span class="token punctuation">.</span><span class="token function">TopFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用当前方法的前一个方法的栈帧</span>
	retVal <span class="token operator">:=</span> currentFrame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	invokerFrame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span>retVal<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法调用指令</p><p>invokestatic 静态方法</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>INVOKE_STATIC<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cp <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConstantPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	methodRef <span class="token operator">:=</span> cp<span class="token punctuation">.</span><span class="token function">GetConstant</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>Index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>heap<span class="token punctuation">.</span>MethodRef<span class="token punctuation">)</span>
	method <span class="token operator">:=</span> methodRef<span class="token punctuation">.</span><span class="token function">ResolveMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 根据方法符号引用：方法name、方法描述符descriptor、所包含的类指针 查找方法</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">IsStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.IncompatibleClassChangeError&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	class <span class="token operator">:=</span> methodRef<span class="token punctuation">.</span><span class="token function">ResolvedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>class<span class="token punctuation">.</span><span class="token function">InitStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		frame<span class="token punctuation">.</span><span class="token function">RevertNextPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		base<span class="token punctuation">.</span><span class="token function">InitClass</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> class<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	base<span class="token punctuation">.</span><span class="token function">InvokeMethod</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> method<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>invokespecial 构造方法</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>INVOKE_SPECIAL<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	currentClass <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	cp <span class="token operator">:=</span> currentClass<span class="token punctuation">.</span><span class="token function">ConstantPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	methodRef <span class="token operator">:=</span> cp<span class="token punctuation">.</span><span class="token function">GetConstant</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>Index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>heap<span class="token punctuation">.</span>MethodRef<span class="token punctuation">)</span>
	resolvedClass <span class="token operator">:=</span> methodRef<span class="token punctuation">.</span><span class="token function">ResolvedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	resolveMethod <span class="token operator">:=</span> methodRef<span class="token punctuation">.</span><span class="token function">ResolveMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment">//构造方法</span>
	<span class="token keyword">if</span> resolveMethod<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;&lt;init&gt;&quot;</span> <span class="token operator">&amp;&amp;</span> resolveMethod<span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> resolvedClass <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.NoSuchMethodError&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> resolveMethod<span class="token punctuation">.</span><span class="token function">IsStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.IncompatibleClassChangeError&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
      <span class="token comment">//todo count -1避免数组越界</span>
	ref <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetRefFromTop</span><span class="token punctuation">(</span>resolveMethod<span class="token punctuation">.</span><span class="token function">ArgSlotCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 弹出 this 引用</span>
	<span class="token keyword">if</span> ref <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.NullPointerException&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	base<span class="token punctuation">.</span><span class="token function">InvokeMethod</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> resolveMethod<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>invokeinterface</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>INVOKE_INTERFACE<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cp <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConstantPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	methodRef <span class="token operator">:=</span> cp<span class="token punctuation">.</span><span class="token function">GetConstant</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>heap<span class="token punctuation">.</span>InterfaceMethodRef<span class="token punctuation">)</span>
	resolvedMethod <span class="token operator">:=</span> methodRef<span class="token punctuation">.</span><span class="token function">ResolvedInterfaceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> resolvedMethod<span class="token punctuation">.</span><span class="token function">IsStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> resolvedMethod<span class="token punctuation">.</span><span class="token function">IsPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.IncompatibleClassChangeError&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	ref <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetRefFromTop</span><span class="token punctuation">(</span>resolvedMethod<span class="token punctuation">.</span><span class="token function">ArgSlotCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> ref <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.NullPointerException&quot;</span><span class="token punctuation">)</span> <span class="token comment">// todo</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ref<span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsImplements</span><span class="token punctuation">(</span>methodRef<span class="token punctuation">.</span><span class="token function">ResolvedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.IncompatibleClassChangeError&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	methodToBeInvoked <span class="token operator">:=</span> heap<span class="token punctuation">.</span><span class="token function">LookupMethodInClass</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		methodRef<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> methodRef<span class="token punctuation">.</span><span class="token function">Descriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> methodToBeInvoked <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> methodToBeInvoked<span class="token punctuation">.</span><span class="token function">IsAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.AbstractMethodError&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>methodToBeInvoked<span class="token punctuation">.</span><span class="token function">IsPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.IllegalAccessError&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	base<span class="token punctuation">.</span><span class="token function">InvokeMethod</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> methodToBeInvoked<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写解释器interpreter" tabindex="-1"><a class="header-anchor" href="#编写解释器interpreter"><span>编写解释器interpreter</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Interpret</span><span class="token punctuation">(</span>method <span class="token operator">*</span>heap<span class="token punctuation">.</span>Method<span class="token punctuation">,</span> logInst <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	thread <span class="token operator">:=</span> rtda<span class="token punctuation">.</span><span class="token function">NewTread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">//创建线程</span>
	frame <span class="token operator">:=</span> thread<span class="token punctuation">.</span><span class="token function">NewFrame</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token comment">//创建栈帧</span>
	thread<span class="token punctuation">.</span><span class="token function">PushFrame</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span>          <span class="token comment">//将栈帧push线程stack中</span>
	<span class="token keyword">defer</span> <span class="token function">catchErr</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span>
	<span class="token function">loop</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> logInst<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//执行指令</span>
<span class="token keyword">func</span> <span class="token function">loop</span><span class="token punctuation">(</span>thread <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Thread<span class="token punctuation">,</span> logInst <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	reader <span class="token operator">:=</span> <span class="token operator">&amp;</span>base<span class="token punctuation">.</span>ByteCodeReader<span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token comment">//获取当前栈</span>
		frame <span class="token operator">:=</span> thread<span class="token punctuation">.</span><span class="token function">CurrentFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		pc <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">NextPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		thread<span class="token punctuation">.</span><span class="token function">SetPC</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span>

		<span class="token comment">//decode</span>
		reader<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pc<span class="token punctuation">)</span>
		<span class="token comment">//读取指令opcode</span>
		opcode <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadUint8</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 读取操作码 opCode（指令类型）</span>
		inst <span class="token operator">:=</span> instructions<span class="token punctuation">.</span><span class="token function">NewInstruction</span><span class="token punctuation">(</span>opcode<span class="token punctuation">)</span> <span class="token comment">// 根据opCode创建相应的指令</span>
		inst<span class="token punctuation">.</span><span class="token function">FetchOperands</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span>                  <span class="token comment">// 从字节码中读取操作数</span>
		frame<span class="token punctuation">.</span><span class="token function">SetNextPC</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">PC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 将当前读取到的字节码的位置设置到 frame 的 nextPc 中，用于执行下一条指令</span>

		<span class="token keyword">if</span> logInst <span class="token punctuation">{</span>
			<span class="token function">logInstruction</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> inst<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		<span class="token comment">//执行栈帧</span>
		inst<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span>

		<span class="token comment">//线程中栈帧执行完毕退出</span>
		<span class="token keyword">if</span> thread<span class="token punctuation">.</span><span class="token function">IsStackEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试demo" tabindex="-1"><a class="header-anchor" href="#测试demo"><span>测试demo</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//函数调用与返回</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvokeDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">InvokeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InvokeDemo</span><span class="token punctuation">.</span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// invokestatic</span>
        <span class="token class-name">InvokeDemo</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// invokespecial</span>
        demo<span class="token punctuation">.</span><span class="token function">instanceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// invokespecial</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// invokespecial</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// invokevirtual</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span><span class="token punctuation">)</span> demo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// invokeinterface</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">instanceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="go-测试分支" tabindex="-1"><a class="header-anchor" href="#go-测试分支"><span>go 测试分支</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//测试函数调用与返回</span>
<span class="token keyword">func</span> <span class="token function">parseReturn</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>Cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>

	cp <span class="token operator">:=</span> classpath<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>XjreOption<span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>cpOption<span class="token punctuation">)</span>
	<span class="token comment">//获得classLoader</span>
	classLoader <span class="token operator">:=</span> heap<span class="token punctuation">.</span><span class="token function">NewClassLoader</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>verboseClassFlag<span class="token punctuation">)</span>
	<span class="token comment">//获得加载类名字</span>
	className <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>class<span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	mainClass <span class="token operator">:=</span> classLoader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span>
	<span class="token comment">//获得main方法</span>
	mainMethod <span class="token operator">:=</span> mainClass<span class="token punctuation">.</span><span class="token function">GetMainMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> mainMethod <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">Interpret</span><span class="token punctuation">(</span>mainMethod<span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>verboseInstFlag<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>&quot;Main method not found in class <span class="token operator">%</span>s
&quot;<span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>class<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shell脚本" tabindex="-1"><a class="header-anchor" href="#shell脚本"><span>shell脚本</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#测试函数调用返回</span>
go run main <span class="token parameter variable">-verbose:class</span> <span class="token parameter variable">-verbose:inst</span>  <span class="token parameter variable">-test</span> <span class="token string">&quot;return&quot;</span>  <span class="token parameter variable">-cp</span> test/lib/example.jar   jvmgo.book.ch07.InvokeDemo
go run main <span class="token parameter variable">-verbose:class</span> <span class="token parameter variable">-verbose:inst</span>  <span class="token parameter variable">-test</span> <span class="token string">&quot;return&quot;</span>  <span class="token parameter variable">-cp</span> test/lib/example.jar   jvmgo.book.ch07.FibonacciTest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实战项目地址" tabindex="-1"><a class="header-anchor" href="#实战项目地址"><span>实战项目地址</span></a></h3><p>https://gitee.com/yinlingchaoliu/jvmgo.git</p><p>提交代码标记 “return”</p>`,30),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","12、方法调用和返回.html.vue"]]),d=JSON.parse('{"path":"/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/12%E3%80%81%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E5%92%8C%E8%BF%94%E5%9B%9E.html","title":"12、方法调用和返回","lang":"zh-CN","frontmatter":{"title":"12、方法调用和返回","date":"2024-04-10T06:06:06.000Z","category":["手动编写jvm虚拟机"],"tag":["jvmgo"],"description":"知识扩展 静态方法和实例方法 invokestatic 静态方法 invokespecial 调用无须绑定的实例方法，例如：构造方法，私有方法，super invokeinterface 动态绑定- 调用接口 invokevirtual 动态绑定 -其他 invokedynamic 动态绑定 扩展 关键流程 解析符号引用 找方法 核心方法调用 方法调用...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/12%E3%80%81%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E5%92%8C%E8%BF%94%E5%9B%9E.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"12、方法调用和返回"}],["meta",{"property":"og:description","content":"知识扩展 静态方法和实例方法 invokestatic 静态方法 invokespecial 调用无须绑定的实例方法，例如：构造方法，私有方法，super invokeinterface 动态绑定- 调用接口 invokevirtual 动态绑定 -其他 invokedynamic 动态绑定 扩展 关键流程 解析符号引用 找方法 核心方法调用 方法调用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T22:43:38.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"jvmgo"}],["meta",{"property":"article:published_time","content":"2024-04-10T06:06:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-09T22:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"12、方法调用和返回\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T06:06:06.000Z\\",\\"dateModified\\":\\"2024-04-09T22:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"知识扩展","slug":"知识扩展","link":"#知识扩展","children":[]},{"level":3,"title":"关键流程","slug":"关键流程","link":"#关键流程","children":[]},{"level":3,"title":"核心方法调用","slug":"核心方法调用","link":"#核心方法调用","children":[]},{"level":3,"title":"编写解释器interpreter","slug":"编写解释器interpreter","link":"#编写解释器interpreter","children":[]},{"level":3,"title":"测试demo","slug":"测试demo","link":"#测试demo","children":[]},{"level":3,"title":"go 测试分支","slug":"go-测试分支","link":"#go-测试分支","children":[]},{"level":3,"title":"shell脚本","slug":"shell脚本","link":"#shell脚本","children":[]},{"level":3,"title":"实战项目地址","slug":"实战项目地址","link":"#实战项目地址","children":[]}],"git":{"createdTime":1711376238000,"updatedTime":1712702618000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":3.53,"words":1059},"filePathRelative":"basis/jvm/手动编写jvm虚拟机/12、方法调用和返回.md","localizedDate":"2024年4月10日","excerpt":"<h3>知识扩展</h3>\\n<p>静态方法和实例方法</p>\\n<table>\\n<thead>\\n<tr>\\n<th>静态方法(类方法)</th>\\n<th>实例方法</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>通过类调用</td>\\n<td>通过实例调用</td>\\n</tr>\\n<tr>\\n<td>静态绑定</td>\\n<td>动态绑定</td>\\n</tr>\\n<tr>\\n<td>编译期确定</td>\\n<td>运行期确定</td>\\n</tr>\\n</tbody>\\n</table>\\n<ul>\\n<li>invokestatic 静态方法</li>\\n<li>invokespecial 调用无须绑定的实例方法，例如：构造方法，私有方法，super</li>\\n<li>invokeinterface 动态绑定- 调用接口</li>\\n<li>invokevirtual  动态绑定 -其他</li>\\n<li>invokedynamic 动态绑定 扩展</li>\\n</ul>","autoDesc":true}');export{r as comp,d as data};
