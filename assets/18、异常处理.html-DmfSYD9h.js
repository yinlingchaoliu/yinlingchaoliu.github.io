import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CtvCwAmI.js";const p={},e=t(`<h3 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h3><p>unchecked 异常 ： java.lang.RuntimeException、java.lang.Error</p><p>checked异常:其他</p><p>异常父类：java.lang.Throwable</p><p>异常指令 athrow</p><p>需要实现Throwable native方法</p><p>private native Throwable fillInStackTrace(int dummy)</p><h4 id="_1、注册native方法" tabindex="-1"><a class="header-anchor" href="#_1、注册native方法"><span>1、注册native方法</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> jlThrowable <span class="token operator">=</span> <span class="token string">&quot;java/lang/Throwable&quot;</span>

<span class="token keyword">type</span> StackTraceElement <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	fileName   <span class="token builtin">string</span>
	className  <span class="token builtin">string</span>
	methodName <span class="token builtin">string</span>
	lineNumber <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>StackTraceElement<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s.%s(%s:%d)&quot;</span><span class="token punctuation">,</span>
		self<span class="token punctuation">.</span>className<span class="token punctuation">,</span> self<span class="token punctuation">.</span>methodName<span class="token punctuation">,</span> self<span class="token punctuation">.</span>fileName<span class="token punctuation">,</span> self<span class="token punctuation">.</span>lineNumber<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	native<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>jlThrowable<span class="token punctuation">,</span> <span class="token string">&quot;fillInStackTrace&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(I)Ljava/lang/Throwable;&quot;</span><span class="token punctuation">,</span> fillInStackTrace<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// private native Throwable fillInStackTrace(int dummy);</span>
<span class="token comment">// (I)Ljava/lang/Throwable;</span>
<span class="token keyword">func</span> <span class="token function">fillInStackTrace</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	this <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">LocalVars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PushRef</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span>

	stes <span class="token operator">:=</span> <span class="token function">createStackTraceElements</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> frame<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	this<span class="token punctuation">.</span><span class="token function">SetExtra</span><span class="token punctuation">(</span>stes<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java代码</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">catchOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        <span class="token function">tryItOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">TestExc</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">handleExc</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异常处理表</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> ExceptionHandler <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	startPc   <span class="token builtin">int</span>       <span class="token comment">//try代码段</span>
	endPc     <span class="token builtin">int</span>       <span class="token comment">//try代码段</span>
	handlerPc <span class="token builtin">int</span>       <span class="token comment">//处理句柄</span>
	catchType <span class="token operator">*</span>ClassRef <span class="token comment">//异常类</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Method</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Method <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	exceptionTable ExceptionTable <span class="token comment">//异常处理表</span>
	lineNumberTable <span class="token operator">*</span> classfile<span class="token punctuation">.</span>LineNumberTableAttribute
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Method<span class="token punctuation">)</span> <span class="token function">copyAttributes</span><span class="token punctuation">(</span>cfMethod <span class="token operator">*</span>classfile<span class="token punctuation">.</span>MemberInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> codeAttr <span class="token operator">:=</span> cfMethod<span class="token punctuation">.</span><span class="token function">CodeAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> codeAttr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		self<span class="token punctuation">.</span>maxStack <span class="token operator">=</span> codeAttr<span class="token punctuation">.</span><span class="token function">MaxStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>maxLocals <span class="token operator">=</span> codeAttr<span class="token punctuation">.</span><span class="token function">MaxLocals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>code <span class="token operator">=</span> codeAttr<span class="token punctuation">.</span><span class="token function">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">//todo exception 增加异常处理</span>
		self<span class="token punctuation">.</span>exceptionTable <span class="token operator">=</span> <span class="token function">newExceptionTable</span><span class="token punctuation">(</span>codeAttr<span class="token punctuation">.</span><span class="token function">ExceptionTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>class<span class="token punctuation">.</span>constantPool<span class="token punctuation">)</span>
		<span class="token comment">// todo 代码行号</span>
		self<span class="token punctuation">.</span>lineNumberTable <span class="token operator">=</span> codeAttr<span class="token punctuation">.</span><span class="token function">LineNumberTableAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Method<span class="token punctuation">)</span> <span class="token function">FindExceptionHandler</span><span class="token punctuation">(</span>exClass <span class="token operator">*</span>Class<span class="token punctuation">,</span> pc <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	handler <span class="token operator">:=</span> self<span class="token punctuation">.</span>exceptionTable<span class="token punctuation">.</span><span class="token function">findExceptionHandler</span><span class="token punctuation">(</span>exClass<span class="token punctuation">,</span> pc<span class="token punctuation">)</span>
	<span class="token keyword">if</span> handler <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> handler<span class="token punctuation">.</span>handlerPc
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Method<span class="token punctuation">)</span> <span class="token function">GetLineNumber</span><span class="token punctuation">(</span>pc <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token function">IsNative</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> self<span class="token punctuation">.</span>lineNumberTable <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>lineNumberTable<span class="token punctuation">.</span><span class="token function">GetLineNumber</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>newExceptionTable</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//todo exception 异常处理</span>
<span class="token keyword">type</span> ExceptionTable <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>ExceptionHandler

<span class="token keyword">type</span> ExceptionHandler <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	startPc   <span class="token builtin">int</span>       <span class="token comment">//try代码段</span>
	endPc     <span class="token builtin">int</span>       <span class="token comment">//try代码段</span>
	handlerPc <span class="token builtin">int</span>       <span class="token comment">//处理句柄</span>
	catchType <span class="token operator">*</span>ClassRef <span class="token comment">//异常类</span>
<span class="token punctuation">}</span>

<span class="token comment">//从classfile生成异常处理</span>
<span class="token keyword">func</span> <span class="token function">newExceptionTable</span><span class="token punctuation">(</span>entries <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>classfile<span class="token punctuation">.</span>ExceptionTableEntry<span class="token punctuation">,</span> cp <span class="token operator">*</span>ConstantPool<span class="token punctuation">)</span> ExceptionTable <span class="token punctuation">{</span>
	table <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>ExceptionHandler<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> entry <span class="token operator">:=</span> <span class="token keyword">range</span> entries <span class="token punctuation">{</span>
		table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>ExceptionHandler<span class="token punctuation">{</span>
			startPc<span class="token punctuation">:</span>   <span class="token function">int</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">StartPc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			endPc<span class="token punctuation">:</span>     <span class="token function">int</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">EndPc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			handlerPc<span class="token punctuation">:</span> <span class="token function">int</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">HandlerPc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			catchType<span class="token punctuation">:</span> <span class="token function">getCatchType</span><span class="token punctuation">(</span><span class="token function">uint</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">CatchType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> table
<span class="token punctuation">}</span>

<span class="token comment">//获得异常类</span>
<span class="token keyword">func</span> <span class="token function">getCatchType</span><span class="token punctuation">(</span>index <span class="token builtin">uint</span><span class="token punctuation">,</span> cp <span class="token operator">*</span>ConstantPool<span class="token punctuation">)</span> <span class="token operator">*</span>ClassRef <span class="token punctuation">{</span>
	<span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span> <span class="token comment">// catch all</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> cp<span class="token punctuation">.</span><span class="token function">GetConstant</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ClassRef<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self ExceptionTable<span class="token punctuation">)</span> <span class="token function">findExceptionHandler</span><span class="token punctuation">(</span>exClass <span class="token operator">*</span>Class<span class="token punctuation">,</span> pc <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ExceptionHandler <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> handler <span class="token operator">:=</span> <span class="token keyword">range</span> self <span class="token punctuation">{</span>
		<span class="token comment">// jvms: The start_pc is inclusive and end_pc is exclusive</span>
		<span class="token keyword">if</span> pc <span class="token operator">&gt;=</span> handler<span class="token punctuation">.</span>startPc <span class="token operator">&amp;&amp;</span> pc <span class="token operator">&lt;</span> handler<span class="token punctuation">.</span>endPc <span class="token punctuation">{</span>
			<span class="token keyword">if</span> handler<span class="token punctuation">.</span>catchType <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> handler <span class="token comment">//catch-all</span>
			<span class="token punctuation">}</span>
			catchClass <span class="token operator">:=</span> handler<span class="token punctuation">.</span>catchType<span class="token punctuation">.</span><span class="token function">ResolvedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> catchClass <span class="token operator">==</span> exClass <span class="token operator">||</span> catchClass<span class="token punctuation">.</span><span class="token function">IsSuperClassOf</span><span class="token punctuation">(</span>exClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> handler
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异常代码行数</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>CodeAttribute<span class="token punctuation">)</span> <span class="token function">LineNumberTableAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>LineNumberTableAttribute <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> attrInfo <span class="token operator">:=</span> <span class="token keyword">range</span> self<span class="token punctuation">.</span>attributes <span class="token punctuation">{</span>
		<span class="token keyword">switch</span> attrInfo<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token operator">*</span>LineNumberTableAttribute<span class="token punctuation">:</span>
			<span class="token keyword">return</span> attrInfo<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>LineNumberTableAttribute<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异常指令athrow</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ATHROW<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ex <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PopRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> ex <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.NullPointerException&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	thread <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">//未找异常处理方法</span>
	<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">findAndGotoExceptionHandler</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//抛出uncaught异常</span>
		<span class="token function">handleUncaughtException</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> ex<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">findAndGotoExceptionHandler</span><span class="token punctuation">(</span>thread <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Thread<span class="token punctuation">,</span> ex <span class="token operator">*</span>heap<span class="token punctuation">.</span>Object<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		frame <span class="token operator">:=</span> thread<span class="token punctuation">.</span><span class="token function">CurrentFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		pc <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">NextPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

		handlerPC <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FindExceptionHandler</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pc<span class="token punctuation">)</span>
		<span class="token keyword">if</span> handlerPC <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			stack<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			stack<span class="token punctuation">.</span><span class="token function">PushRef</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span>
			frame<span class="token punctuation">.</span><span class="token function">SetNextPC</span><span class="token punctuation">(</span>handlerPC<span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span>
		<span class="token punctuation">}</span>

		thread<span class="token punctuation">.</span><span class="token function">PopFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> thread<span class="token punctuation">.</span><span class="token function">IsStackEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token comment">// todo</span>
<span class="token keyword">func</span> <span class="token function">handleUncaughtException</span><span class="token punctuation">(</span>thread <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Thread<span class="token punctuation">,</span> ex <span class="token operator">*</span>heap<span class="token punctuation">.</span>Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	thread<span class="token punctuation">.</span><span class="token function">ClearStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	jMsg <span class="token operator">:=</span> ex<span class="token punctuation">.</span><span class="token function">GetRefVar</span><span class="token punctuation">(</span><span class="token string">&quot;detailMessage&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ljava/lang/String;&quot;</span><span class="token punctuation">)</span>
	goMsg <span class="token operator">:=</span> heap<span class="token punctuation">.</span><span class="token function">GoString</span><span class="token punctuation">(</span>jMsg<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">JavaName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> goMsg<span class="token punctuation">)</span>

	stes <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">Extra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stes<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		ste <span class="token operator">:=</span> stes<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">interface</span> <span class="token punctuation">{</span>
			<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;	at &quot;</span> <span class="token operator">+</span> ste<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异常测试" tabindex="-1"><a class="header-anchor" href="#异常测试"><span>异常测试</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#exception 异常处理</span>
go run main   <span class="token parameter variable">-cp</span> test/lib/example.jar   jvmgo.book.ch10.ParseIntTest  <span class="token number">123</span>
go run main   <span class="token parameter variable">-cp</span> test/lib/example.jar   jvmgo.book.ch10.ParseIntTest  abc
go run main   <span class="token parameter variable">-cp</span> test/lib/example.jar   jvmgo.book.ch10.ParseIntTest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实战项目地址" tabindex="-1"><a class="header-anchor" href="#实战项目地址"><span>实战项目地址</span></a></h3><p>https://gitee.com/yinlingchaoliu/jvmgo.git</p><p>提交标签 &quot;exception&quot;</p>`,26),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","18、异常处理.html.vue"]]),d=JSON.parse('{"path":"/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/18%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html","title":"18、异常处理","lang":"zh-CN","frontmatter":{"title":"18、异常处理","date":"2024-04-10T06:06:06.000Z","category":["手动编写jvm虚拟机"],"tag":["jvmgo"],"description":"异常处理 unchecked 异常 ： java.lang.RuntimeException、java.lang.Error checked异常:其他 异常父类：java.lang.Throwable 异常指令 athrow 需要实现Throwable native方法 private native Throwable fillInStackTrace...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/18%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"18、异常处理"}],["meta",{"property":"og:description","content":"异常处理 unchecked 异常 ： java.lang.RuntimeException、java.lang.Error checked异常:其他 异常父类：java.lang.Throwable 异常指令 athrow 需要实现Throwable native方法 private native Throwable fillInStackTrace..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T22:43:38.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"jvmgo"}],["meta",{"property":"article:published_time","content":"2024-04-10T06:06:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-09T22:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"18、异常处理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T06:06:06.000Z\\",\\"dateModified\\":\\"2024-04-09T22:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[]},{"level":3,"title":"异常测试","slug":"异常测试","link":"#异常测试","children":[]},{"level":3,"title":"实战项目地址","slug":"实战项目地址","link":"#实战项目地址","children":[]}],"git":{"createdTime":1711376238000,"updatedTime":1712702618000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":2.06,"words":617},"filePathRelative":"basis/jvm/手动编写jvm虚拟机/18、异常处理.md","localizedDate":"2024年4月10日","excerpt":"<h3>异常处理</h3>\\n<p>unchecked 异常 ： java.lang.RuntimeException、java.lang.Error</p>\\n<p>checked异常:其他</p>\\n<p>异常父类：java.lang.Throwable</p>\\n<p>异常指令 athrow</p>\\n<p>需要实现Throwable native方法</p>\\n<p>private native Throwable fillInStackTrace(int dummy)</p>\\n<h4>1、注册native方法</h4>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">const</span> jlThrowable <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"java/lang/Throwable\\"</span>\\n\\n<span class=\\"token keyword\\">type</span> StackTraceElement <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\tfileName   <span class=\\"token builtin\\">string</span>\\n\\tclassName  <span class=\\"token builtin\\">string</span>\\n\\tmethodName <span class=\\"token builtin\\">string</span>\\n\\tlineNumber <span class=\\"token builtin\\">int</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>self <span class=\\"token operator\\">*</span>StackTraceElement<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">String</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">string</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">return</span> fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Sprintf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%s.%s(%s:%d)\\"</span><span class=\\"token punctuation\\">,</span>\\n\\t\\tself<span class=\\"token punctuation\\">.</span>className<span class=\\"token punctuation\\">,</span> self<span class=\\"token punctuation\\">.</span>methodName<span class=\\"token punctuation\\">,</span> self<span class=\\"token punctuation\\">.</span>fileName<span class=\\"token punctuation\\">,</span> self<span class=\\"token punctuation\\">.</span>lineNumber<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">init</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\tnative<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Register</span><span class=\\"token punctuation\\">(</span>jlThrowable<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"fillInStackTrace\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"(I)Ljava/lang/Throwable;\\"</span><span class=\\"token punctuation\\">,</span> fillInStackTrace<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// private native Throwable fillInStackTrace(int dummy);</span>\\n<span class=\\"token comment\\">// (I)Ljava/lang/Throwable;</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">fillInStackTrace</span><span class=\\"token punctuation\\">(</span>frame <span class=\\"token operator\\">*</span>rtda<span class=\\"token punctuation\\">.</span>Frame<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\tthis <span class=\\"token operator\\">:=</span> frame<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">LocalVars</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetThis</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\tframe<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">OperandStack</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">PushRef</span><span class=\\"token punctuation\\">(</span>this<span class=\\"token punctuation\\">)</span>\\n\\n\\tstes <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">createStackTraceElements</span><span class=\\"token punctuation\\">(</span>this<span class=\\"token punctuation\\">,</span> frame<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Thread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\tthis<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">SetExtra</span><span class=\\"token punctuation\\">(</span>stes<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
