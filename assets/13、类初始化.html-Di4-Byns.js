import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CtvCwAmI.js";const e={},p=t(`<h3 id="类初始化触发情况" tabindex="-1"><a class="header-anchor" href="#类初始化触发情况"><span>类初始化触发情况</span></a></h3><ul><li>1、执行new指令创建类实例</li><li>2、执行putstatic、getstatic 指令存取类的静态变量</li><li>3、执行invokestatic调用静态方法</li><li>4、初始化一个类时，类的超类还没有初始化，要先初始化超类</li><li>5、执行某些反射操作</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Class <span class="token keyword">struct</span><span class="token punctuation">{</span>
<span class="token comment">//其他字段</span>
    initStarted <span class="token builtin">bool</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Class<span class="token punctuation">)</span> <span class="token function">InitStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>initStarted
<span class="token punctuation">}</span>

<span class="token comment">// setter</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Class<span class="token punctuation">)</span> <span class="token function">StartInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	self<span class="token punctuation">.</span>initStarted <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化逻辑" tabindex="-1"><a class="header-anchor" href="#初始化逻辑"><span>初始化逻辑</span></a></h3><p>在指令 putstatic、getstatic、new、invokestatic 添加初始化逻辑</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token keyword">if</span> <span class="token operator">!</span>class<span class="token punctuation">.</span><span class="token function">InitStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		frame<span class="token punctuation">.</span><span class="token function">RevertNextPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		base<span class="token punctuation">.</span><span class="token function">InitClass</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> class<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Frame<span class="token punctuation">)</span> <span class="token function">RevertNextPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	self<span class="token punctuation">.</span>nextPC <span class="token operator">=</span> self<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>pc
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>base逻辑</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">InitClass</span><span class="token punctuation">(</span>thread <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Thread<span class="token punctuation">,</span> class <span class="token operator">*</span>heap<span class="token punctuation">.</span>Class<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	class<span class="token punctuation">.</span><span class="token function">StartInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment">// 设置开始初始化标志</span>
	<span class="token function">scheduleClinit</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> class<span class="token punctuation">)</span> <span class="token comment">// 准备执行类初始化方法，push到栈顶，下一次执行的时候就会执行&lt;cinit&gt;</span>
	<span class="token function">initSuperClass</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> class<span class="token punctuation">)</span> <span class="token comment">// 循环初始化父类</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">scheduleClinit</span><span class="token punctuation">(</span>thread <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Thread<span class="token punctuation">,</span> class <span class="token operator">*</span>heap<span class="token punctuation">.</span>Class<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	clinit <span class="token operator">:=</span> class<span class="token punctuation">.</span><span class="token function">GetClinitMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> clinit <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// exec &lt;clinit&gt;</span>
		newFrame <span class="token operator">:=</span> thread<span class="token punctuation">.</span><span class="token function">NewFrame</span><span class="token punctuation">(</span>clinit<span class="token punctuation">)</span>
		thread<span class="token punctuation">.</span><span class="token function">PushFrame</span><span class="token punctuation">(</span>newFrame<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">initSuperClass</span><span class="token punctuation">(</span>thread <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Thread<span class="token punctuation">,</span> class <span class="token operator">*</span>heap<span class="token punctuation">.</span>Class<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>class<span class="token punctuation">.</span><span class="token function">IsInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		superClass <span class="token operator">:=</span> class<span class="token punctuation">.</span><span class="token function">SuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> superClass <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>superClass<span class="token punctuation">.</span><span class="token function">InitStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">InitClass</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> superClass<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实战项目地址" tabindex="-1"><a class="header-anchor" href="#实战项目地址"><span>实战项目地址</span></a></h3><p>https://gitee.com/yinlingchaoliu/jvmgo.git</p>`,11),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","13、类初始化.html.vue"]]),k=JSON.parse('{"path":"/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/13%E3%80%81%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96.html","title":"13、类初始化","lang":"zh-CN","frontmatter":{"title":"13、类初始化","date":"2024-04-10T06:06:06.000Z","category":["手动编写jvm虚拟机"],"tag":["jvmgo"],"description":"类初始化触发情况 1、执行new指令创建类实例 2、执行putstatic、getstatic 指令存取类的静态变量 3、执行invokestatic调用静态方法 4、初始化一个类时，类的超类还没有初始化，要先初始化超类 5、执行某些反射操作 初始化逻辑 在指令 putstatic、getstatic、new、invokestatic 添加初始化逻辑 ...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/13%E3%80%81%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"13、类初始化"}],["meta",{"property":"og:description","content":"类初始化触发情况 1、执行new指令创建类实例 2、执行putstatic、getstatic 指令存取类的静态变量 3、执行invokestatic调用静态方法 4、初始化一个类时，类的超类还没有初始化，要先初始化超类 5、执行某些反射操作 初始化逻辑 在指令 putstatic、getstatic、new、invokestatic 添加初始化逻辑 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T22:43:38.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"jvmgo"}],["meta",{"property":"article:published_time","content":"2024-04-10T06:06:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-09T22:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"13、类初始化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T06:06:06.000Z\\",\\"dateModified\\":\\"2024-04-09T22:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"类初始化触发情况","slug":"类初始化触发情况","link":"#类初始化触发情况","children":[]},{"level":3,"title":"初始化逻辑","slug":"初始化逻辑","link":"#初始化逻辑","children":[]},{"level":3,"title":"实战项目地址","slug":"实战项目地址","link":"#实战项目地址","children":[]}],"git":{"createdTime":1712702618000,"updatedTime":1712702618000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":0.9,"words":269},"filePathRelative":"basis/jvm/手动编写jvm虚拟机/13、类初始化.md","localizedDate":"2024年4月10日","excerpt":"<h3>类初始化触发情况</h3>\\n<ul>\\n<li>1、执行new指令创建类实例</li>\\n<li>2、执行putstatic、getstatic 指令存取类的静态变量</li>\\n<li>3、执行invokestatic调用静态方法</li>\\n<li>4、初始化一个类时，类的超类还没有初始化，要先初始化超类</li>\\n<li>5、执行某些反射操作</li>\\n</ul>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">type</span> Class <span class=\\"token keyword\\">struct</span><span class=\\"token punctuation\\">{</span>\\n<span class=\\"token comment\\">//其他字段</span>\\n    initStarted <span class=\\"token builtin\\">bool</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>self <span class=\\"token operator\\">*</span>Class<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">InitStarted</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">bool</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">return</span> self<span class=\\"token punctuation\\">.</span>initStarted\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// setter</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>self <span class=\\"token operator\\">*</span>Class<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">StartInit</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\tself<span class=\\"token punctuation\\">.</span>initStarted <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
