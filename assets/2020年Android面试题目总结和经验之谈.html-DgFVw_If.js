import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as a,c as r,a as e,b as l,d as o,f as s}from"./app-CtvCwAmI.js";const c={},d=s('<p>####菜虫给我留念学习mark 2020年Android面试题目总结和经验之谈</p><p>####菜虫大佬催我上进 @北京_陈桐 jvm，线程与锁（synchroinze与lock，偏底层），hashMap原理碰撞扩容（建议反复看源码），view绘制流程（非自定义view），handler（底层+Threadlocl），进程间通信（aidl、binder原理机制（mmap）），面向对象6大原则，设计模式、高性能编程，优化，算法</p><ol><li>百度面试 1.1 jvm加载原理 1.2 全局变量和局部变量区别 1.3 方法锁和静态锁的区别 1.4 子类继承父类，子类和父类里面都有静态变量，构造方法，普通方法， 当jvm加载的时候是如何执行的 1.5 handler机制，本地线程是用来干嘛的 1.6 单例模式的几种写法</li><li>完美世界面试 2.1 16位字节变量都有哪些 2.2 死锁是什么，举例 2.3 静态变量锁和方法锁的区别 2.4 事件分发，dispatch和intercept和ontouchevent是如何执行的， onTouchEvent是如何执行的 2.5 场景1：addView方法加载A布局然后remove（A），然后addView（B布局）方法执行 场景2：addView方法加载A然后addView（B）， requestView方法在场景1和2分别是如何执行的， 各自执行效率如何 2.6 布局A经过scale进行属性缩放， 缩放之后y轴对应的点坐标有没有变化 2.7 都用过哪些布局，constentLayout用过吗 2.8 int变量位移几位，如何执行的 2.9 utf-8和Unicode编码区别 2.10 数组和链表区别 2.11 rxjava中map和flapmap区别 2.12 constraintLayout用法</li><li>腾讯音视频部门面试 3.1 viewGroup和view的onDraw方法区别 3.2 recycleview的缓存机制，item不可见时是否会执行onBind方法 3.3 requestLayout、measureLayout、invalidate区别 3.4 图片压缩加载 3.5 sql语句left join和right join区别</li><li>百度车联网面试题</li><li>项目中的设计模式，对设计模式怎么理解的</li><li>进程间通讯</li><li>单例模式双重校验机制</li><li>内存优化</li><li>jvm相关</li><li>ANR相关 度小满面试：</li><li>线程间怎么通信的</li><li>怎么做的webview</li><li>算法：输入一个整形数组和一个target值，输入数组里面两个数，两者之和等于target</li><li>hashmap怎么实现的 拓展大小机制是什么样的？</li><li>图片压缩：宽高压缩和质量压缩；</li><li>讲一讲https的ssl</li><li>构造方法可以被复写吗</li><li>static方法可以被复写吗 oppo面试（小游戏部门）：</li><li>进程间通信哪些，binder机制底层</li><li>activity里面setContentView做了什么</li><li>activity window saface三者区别</li><li>listview和recycleview区别</li><li>多线程有哪些？参数有哪些</li><li>线程有方式创建</li><li>做了哪些性能优化</li><li>讲一讲事件分发</li><li>讲一讲如何绘制view的，流程，每一步都做了什么</li><li>有没有封装过组件</li><li>内存优化，引用是谁的引用，层次说一下</li><li>rgb556 占多少字节</li><li>sychonized和lock区别</li><li>sleep和wait（）区别</li><li>讲讲okhttp</li><li>leakcanary底部怎么实现的</li><li>parcel和serilizable区别</li></ol><p>快手</p><ol><li>hashmap实现原理，哈希值一样如何储存的，如何查找其中一项，时间复杂度多少？</li><li>讲一讲voilate和sychnroized？</li><li>Recycleview四级缓存，自定义缓存如何做的？</li><li>View是如何绘制的？不能只说绘制的三个方法，如何通知到要去绘制的？</li><li>GC回收机制，是如何知道哪个对象该被回收的？</li><li>算法：输入两个链表，让其合一起输出一个链表</li></ol><p>番茄一面 https://www.notion.so/59cafae8d24844c0b9b39bcc86b478ae</p><p>阿里</p><h2 id="_2020-5-19-15-00阿里一面" tabindex="-1"><a class="header-anchor" href="#_2020-5-19-15-00阿里一面"><span>2020 5.19 15:00阿里一面</span></a></h2>',8),_={href:"https://www.notion.so/Component-d2c3f90a85894ccfb935cf7c86de2e71",target:"_blank",rel:"noopener noreferrer"},h=e("li",null,[e("p",null,"你们是如何解决跨模块调用的")],-1),p={href:"https://www.notion.so/RxJava-1ed280f4185348f285cd13091637087c",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.notion.so/ArrayList-18bc732c363a43af90f0f09caff2dd4a",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.notion.so/LinkedList-537bb6fb18a94f3989a91b632945680a",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.notion.so/HashMap-add31c2da3c34c818035f6b4188fe300",target:"_blank",rel:"noopener noreferrer"},w=e("p",null,"N 个整数, 在不使用循环的前提下. 取最大的前五个. 实则是 Top K 的问题",-1),m={href:"https://www.notion.so/528701907958473cae985601dff77e60",target:"_blank",rel:"noopener noreferrer"},A=e("li",null,"把 100 个整数都放进堆里面, 然后取前 N 个就行了",-1),v={href:"https://www.notion.so/PriorityQueue-8f4c3da6642c47cdb5ff51d59037dde8",target:"_blank",rel:"noopener noreferrer"},g={href:"https://leetcode-cn.com/problemset/all/?search=top",target:"_blank",rel:"noopener noreferrer"},E={href:"https://leetcode-cn.com/problemset/all/?search=top",target:"_blank",rel:"noopener noreferrer"},k=e("li",null,[e("p",null,"二叉搜索树的查询效率取决于什么？"),e("p",null,"取决于树的高度, 所以树需要一些平衡的操作. 降低树的高度. 让树平衡")],-1),j=e("h2",{id:"_2020-5-20-14-00字节跳动一面",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2020-5-20-14-00字节跳动一面"},[e("span",null,"2020 5.20 14:00字节跳动一面")])],-1),B={href:"https://www.notion.so/Component-d2c3f90a85894ccfb935cf7c86de2e71",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.notion.so/RxJava-1ed280f4185348f285cd13091637087c",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.notion.so/HashMap-add31c2da3c34c818035f6b4188fe300",target:"_blank",rel:"noopener noreferrer"},L=e("li",null,[e("p",null,"说说 View 的绘制流程, 不是单单指 View 的 draw. 整个过程")],-1),z=e("li",null,[e("p",null,"为什么匿名内部类使用外部变量, 变量需要使用 final"),e("p",null,"防止后续的代码去改变变量的引用的地址. 造成数据的不一致性. 但是一些引用对象内部的属性值还是可以被改变的. 只是保证了被 final 修饰的变量指向的地址不会被改变")],-1),C=e("p",null,"说说平衡二叉树和红黑树的区别",-1),V={href:"https://www.notion.so/5462e2f23894481194c8b2c4a12f2f49",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.notion.so/Red-Black-Tree-a784ccb534c246389b39a6cdb4248058",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.notion.so/AVL-Tree-33fe0200c2e84a4cb2a5ed54e86a8e5b",target:"_blank",rel:"noopener noreferrer"},N=e("p",null,"快速排序的实现",-1),R={href:"https://www.notion.so/a499e6d663e04085bcf3c9f9826af9db",target:"_blank",rel:"noopener noreferrer"},D=e("p",null,"爬楼梯问题, 每次怕1,2节楼梯, N 节楼梯有多少种可能",-1),J=e("p",null,"这个比较简单就不写了, 自己去看吧. 一种是递归、一种是动态规划 dp(n) = dp(n - 2) + dp(n - 1)",-1),q={href:"https://github.com/xiaojinzi123/MyLeetcode/blob/472b38081bf41c617c4b6379f5666e01e950614d/src/main/java/com/xiaojinzi/Answer_34_%E7%88%AC%E6%A5%BC%E6%A2%AF.java",target:"_blank",rel:"noopener noreferrer"},F={href:"https://github.com/xiaojinzi123/MyLeetcode/blob/472b38081bf41c617c4b6379f5666e01e950614d/src/main/java/com/xiaojinzi/Answer_34_%E7%88%AC%E6%A5%BC%E6%A2%AF.java",target:"_blank",rel:"noopener noreferrer"},H=e("p",null,"一副扑克牌, 大小王可以算任意牌. 问随机抽 N 张牌. 判断其是否是连续的. 花色不同也可.",-1),P={href:"https://github.com/xiaojinzi123/MyLeetcode/blob/master/src/main/java/com/xiaojinzi/Answer_32_%E5%88%A4%E6%96%AD%E9%A1%BA%E5%AD%90.java",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/xiaojinzi123/MyLeetcode/blob/master/src/main/java/com/xiaojinzi/Answer_32_%E5%88%A4%E6%96%AD%E9%A1%BA%E5%AD%90.java",target:"_blank",rel:"noopener noreferrer"},G=e("li",null,[e("p",null,"首屏广告 SDK 的设计"),e("p",null,"由于我们之前都不复杂并且没有啥难度, 所以当时没有 get 到面试官的点. 可能面试官遇到的都是很复杂的了. 他讲了一些："),e("ol",null,[e("li",null,"广告的显示问题, 比如网络差, 无网络等"),e("li",null,"广告的收益性"),e("li",null,"... 忘了")]),e("p",null,"后面我抽空去查资料补上")],-1);function I(K,Q){const n=t("ExternalLinkIcon");return a(),r("div",null,[d,e("ul",null,[e("li",null,[e("p",null,[e("a",_,[l("Component"),o(n)]),l("相关")])]),h,e("li",null,[e("p",null,[l("说说 RxJava 的线程切换是如何实现的. 见 "),e("a",p,[l("RxJava 面试题"),o(n)])])]),e("li",null,[e("p",null,[e("a",f,[l("ArrayList"),o(n)]),l("和 "),e("a",u,[l("LinkedList"),o(n)]),l("的区别")])]),e("li",null,[e("p",null,[l("说说 "),e("a",b,[l("HashMap"),o(n)]),l("的数据结构")])]),e("li",null,[w,e("ul",null,[e("li",null,[l("使用 "),e("a",m,[l("堆"),o(n)]),l("这个数据结构.")]),A,e("li",null,[l("也可以使用现成的 "),e("a",v,[l("PriorityQueue"),o(n)]),l("这个优先级队列. 内部就是用堆实现的.")]),e("li",null,[l("LeetCode 上相关的题目："),e("a",g,[o(n)]),e("a",E,[l("https://leetcode-cn.com/problemset/all/?search=top"),o(n)])])])]),k]),j,e("ul",null,[e("li",null,[e("p",null,[e("a",B,[l("Component"),o(n)]),l("相关")])]),e("li",null,[e("p",null,[l("说说 RxJava 的线程切换是如何实现的. 见 "),e("a",x,[l("RxJava 面试题"),o(n)])])]),e("li",null,[e("p",null,[l("说说 "),e("a",y,[l("HashMap"),o(n)]),l("的数据结构")])]),L,z,e("li",null,[C,e("ul",null,[e("li",null,[l("见 "),e("a",V,[l("平衡二叉树和红黑树的区别"),o(n)])]),e("li",null,[l("see "),e("a",T,[l("Red-Black Tree"),o(n)]),l("And "),e("a",M,[l("AVL Tree"),o(n)])])])]),e("li",null,[N,e("p",null,[e("a",R,[l("快速排序"),o(n)])])]),e("li",null,[D,J,e("p",null,[l("代码："),e("a",q,[o(n)]),e("a",F,[l("https://github.com/xiaojinzi123/MyLeetcode/blob/472b38081bf41c617c4b6379f5666e01e950614d/src/main/java/com/xiaojinzi/Answer_34_爬楼梯.java"),o(n)])])]),e("li",null,[H,e("p",null,[e("a",P,[o(n)]),e("a",S,[l("https://github.com/xiaojinzi123/MyLeetcode/blob/master/src/main/java/com/xiaojinzi/Answer_32_判断顺子.java"),o(n)])])]),G])])}const Z=i(c,[["render",I],["__file","2020年Android面试题目总结和经验之谈.html.vue"]]),W=JSON.parse('{"path":"/insight/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/2020%E5%B9%B4Android%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93%E5%92%8C%E7%BB%8F%E9%AA%8C%E4%B9%8B%E8%B0%88.html","title":"2020年Android面试题目总结和经验之谈","lang":"zh-CN","frontmatter":{"title":"2020年Android面试题目总结和经验之谈","date":"2024-03-24T11:47:50.000Z","category":["Caliburn随笔"],"tag":["archive"],"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"2020 5.19 15:00阿里一面","slug":"_2020-5-19-15-00阿里一面","link":"#_2020-5-19-15-00阿里一面","children":[]},{"level":2,"title":"2020 5.20 14:00字节跳动一面","slug":"_2020-5-20-14-00字节跳动一面","link":"#_2020-5-20-14-00字节跳动一面","children":[]}],"git":{"createdTime":1711376238000,"updatedTime":1711376238000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":5.66,"words":1697},"filePathRelative":"insight/心得体会/2020年Android面试题目总结和经验之谈.md","localizedDate":"2024年3月24日"}');export{Z as comp,W as data};
