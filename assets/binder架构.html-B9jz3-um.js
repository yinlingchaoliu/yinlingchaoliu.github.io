import{_ as n}from"./bpbinder-BweVx7vb.js";import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,f as t}from"./app-CtvCwAmI.js";const p="/assets/binder_arch-BHp2fz-d.png",c="/assets/binder_class-Qrt6zCtg.png",i="/assets/binder_ipc-BI3rmhdG.png",o="/assets/binder_tran-mPZ0OVh3.png",l="/assets/ams-thHYgstj.png",r="/assets/binder_comm-BsPKME79.png",u={},d=t('<h3 id="binder架构" tabindex="-1"><a class="header-anchor" href="#binder架构"><span>binder架构</span></a></h3><figure><img src="'+p+'" alt="binder架构" tabindex="0" loading="lazy"><figcaption>binder架构</figcaption></figure><h3 id="binder类图" tabindex="-1"><a class="header-anchor" href="#binder类图"><span>binder类图</span></a></h3><figure><img src="'+c+'" alt="binder类图" tabindex="0" loading="lazy"><figcaption>binder类图</figcaption></figure><ul><li><p>ServiceManager：通过getIServiceManager方法获取的是ServiceManagerProxy对象； ServiceManager的addService, getService实际工作都交由ServiceManagerProxy的相应方法来处理；</p></li><li><p>ServiceManagerProxy：其成员变量mRemote指向BinderProxy对象，ServiceManagerProxy的addService, getService方法最终是交由mRemote来完成。</p></li><li><p>ServiceManagerNative：其方法asInterface()返回的是ServiceManagerProxy对象，ServiceManager便是借助ServiceManagerNative类来找到ServiceManagerProxy；</p></li><li><p>Binder：其成员变量mObject和方法execTransact()用于native方法</p></li><li><p>BinderInternal：内部有一个GcWatcher类，用于处理和调试与Binder相关的垃圾回收。</p></li><li><p>IBinder：接口中常量FLAG_ONEWAY：客户端利用binder跟服务端通信是阻塞式的，但如果设置了FLAG_ONEWAY，这成为非阻塞的调用方式，客户端能立即返回，服务端采用回调方式来通知客户端完成情况。另外IBinder接口有一个内部接口DeathDecipient(死亡通告)。</p></li></ul><h3 id="binder进程与线程" tabindex="-1"><a class="header-anchor" href="#binder进程与线程"><span>Binder进程与线程</span></a></h3><p><img src="'+i+'" alt="binder进程与线程" loading="lazy"> Binder线程池：每个Server进程在启动时会创建一个binder线程池，并向其中注册一个Binder线程；之后Server进程也可以向binder线程池注册新的线程，或者Binder驱动在探测到没有空闲binder线程时会主动向Server进程注册新的的binder线程。对于一个Server进程有一个最大Binder线程数限制，默认为16个binder线程，例如Android的system_server进程就存在16个线程。对于所有Client端进程的binder请求都是交由Server端进程的binder线程来处理的。</p><h3 id="binder传输过程" tabindex="-1"><a class="header-anchor" href="#binder传输过程"><span>Binder传输过程</span></a></h3><p><img src="'+o+'" alt="Binder传输过程" loading="lazy"> 发送端把binder_transaction节点，插入到目标进程或其子线程的todo队列中，等目标进程或线程不断循环地从todo队列中取出数据并进行相应的操作</p><h3 id="binder路由" tabindex="-1"><a class="header-anchor" href="#binder路由"><span>Binder路由</span></a></h3><figure><img src="'+n+'" alt="Binder路由" tabindex="0" loading="lazy"><figcaption>Binder路由</figcaption></figure><p>binder的路由原理：BpBinder发送端，根据handler，在当前binder_proc中，找到相应的binder_ref，由binder_ref再找到目标binder_node实体，由目标binder_node再找到目标进程binder_proc。简单地方式是直接把binder_transaction节点插入到binder_proc的todo队列中，完成传输过程。</p><h3 id="通信过程-ams" tabindex="-1"><a class="header-anchor" href="#通信过程-ams"><span>通信过程 AMS</span></a></h3><figure><img src="'+l+'" alt="ams" tabindex="0" loading="lazy"><figcaption>ams</figcaption></figure><figure><img src="'+r+`" alt="通讯过程" tabindex="0" loading="lazy"><figcaption>通讯过程</figcaption></figure><ol><li>发起端线程向Binder Driver发起binder ioctl请求后, 便采用环不断talkWithDriver,此时该线程处于阻塞状态, 直到收到如下BR_XXX命令才会结束该过程.</li></ol><ul><li>BR_TRANSACTION_COMPLETE: oneway模式下,收到该命令则退出</li><li>BR_REPLY: 非oneway模式下,收到该命令才退出;</li><li>BR_DEAD_REPLY: 目标进程/线程/binder实体为空, 以及释放正在等待reply的binder thread或者binder buffer;</li><li>BR_FAILED_REPLY: 情况较多,比如非法handle, 错误事务栈, security, 内存不足, buffer不足, 数据拷贝失败, 节点创建失败, 各种不匹配等问题</li><li>BR_ACQUIRE_RESULT: 目前未使用的协议;</li></ul><ol start="2"><li><p>左图中waitForResponse收到BR_TRANSACTION_COMPLETE,则直接退出循环, 则没有机会执行executeCommand()方法, 故将其颜色画为灰色. 除以上5种BR_XXX命令, 当收到其他BR命令,则都会执行executeCommand过程.</p></li><li><p>目标Binder线程创建后, 便进入joinThreadPool()方法, 采用循环不断地循环执行getAndExecuteCommand()方法, 当bwr的读写buffer都没有数据时,则阻塞在binder_thread_read的wait_event过程. 另外,正常情况下binder线程一旦创建则不会退出.</p></li></ol><h3 id="关键代码" tabindex="-1"><a class="header-anchor" href="#关键代码"><span>关键代码</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ComponentName</span> <span class="token function">startService</span><span class="token punctuation">(</span><span class="token class-name">IApplicationThread</span> caller<span class="token punctuation">,</span> <span class="token class-name">Intent</span> service<span class="token punctuation">,</span> <span class="token class-name">String</span> resolvedType<span class="token punctuation">,</span> <span class="token class-name">String</span> callingPackage<span class="token punctuation">,</span> <span class="token keyword">int</span> userId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>
    <span class="token comment">//获取或创建Parcel对象【见小节2.2】</span>
    <span class="token class-name">Parcel</span> data <span class="token operator">=</span> <span class="token class-name">Parcel</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Parcel</span> reply <span class="token operator">=</span> <span class="token class-name">Parcel</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span><span class="token function">writeInterfaceToken</span><span class="token punctuation">(</span><span class="token class-name">IActivityManager</span><span class="token punctuation">.</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span><span class="token function">writeStrongBinder</span><span class="token punctuation">(</span>caller <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> caller<span class="token punctuation">.</span><span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    service<span class="token punctuation">.</span><span class="token function">writeToParcel</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//写入Parcel数据 【见小节2.3】</span>
    data<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>resolvedType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>callingPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//通过Binder传递数据【见小节2.5】</span>
    mRemote<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span><span class="token constant">START_SERVICE_TRANSACTION</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//读取应答消息的异常情况</span>
    reply<span class="token punctuation">.</span><span class="token function">readException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//根据reply数据来创建ComponentName对象</span>
    <span class="token class-name">ComponentName</span> res <span class="token operator">=</span> <span class="token class-name">ComponentName</span><span class="token punctuation">.</span><span class="token function">readFromParcel</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//【见小节2.2.3】</span>
    data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AMN.getDefault</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token class-name">IActivityManager</span> <span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// [见流程2.4.2]</span>
    <span class="token keyword">return</span> gDefault<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IActivityManager</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">IActivityManager</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//首次调用create()来获取AMP对象[见流程2.4.3]</span>
                mInstance <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> mInstance<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IActivityManager</span><span class="token punctuation">&gt;</span></span> gDefault <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IActivityManager</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">IActivityManager</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取名为&quot;activity&quot;的服务</span>
        <span class="token class-name">IBinder</span> b <span class="token operator">=</span> <span class="token class-name">ServiceManager</span><span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token string">&quot;activity&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建AMP对象[见流程2.4.4]</span>
        <span class="token class-name">IActivityManager</span> am <span class="token operator">=</span> <span class="token function">asInterface</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> am<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ActivityManagerNative</span> <span class="token keyword">extends</span> <span class="token class-name">Binder</span> <span class="token keyword">implements</span> <span class="token class-name">IActivityManager</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token class-name">IActivityManager</span> <span class="token function">asInterface</span><span class="token punctuation">(</span><span class="token class-name">IBinder</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//此处obj = BinderProxy, descriptor = &quot;android.app.IActivityManager&quot;; [见流程2.4.5]</span>
        <span class="token class-name">IActivityManager</span> in <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IActivityManager</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span><span class="token function">queryLocalInterface</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//此处为null</span>
            <span class="token keyword">return</span> in<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//[见流程2.4.6]</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActivityManagerProxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Binder</span> <span class="token keyword">implements</span> <span class="token class-name">IBinder</span> <span class="token punctuation">{</span>
    <span class="token comment">//对于Binder对象的调用,则返回值不为空</span>
    <span class="token keyword">public</span> <span class="token class-name">IInterface</span> <span class="token function">queryLocalInterface</span><span class="token punctuation">(</span><span class="token class-name">String</span> descriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//mDescriptor的初始化在attachInterface()过程中赋值</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mDescriptor<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> mOwner<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//由上一小节[2.4.4]调用的流程便是此处,返回Null</span>
<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">BinderProxy</span> <span class="token keyword">implements</span> <span class="token class-name">IBinder</span> <span class="token punctuation">{</span>
    <span class="token comment">//BinderProxy对象的调用, 则返回值为空</span>
    <span class="token keyword">public</span> <span class="token class-name">IInterface</span> <span class="token function">queryLocalInterface</span><span class="token punctuation">(</span><span class="token class-name">String</span> descriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ActivityManagerProxy</span> <span class="token keyword">implements</span> <span class="token class-name">IActivityManager</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ActivityManagerProxy</span><span class="token punctuation">(</span><span class="token class-name">IBinder</span> remote<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mRemote <span class="token operator">=</span> remote<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">BinderProxy</span> <span class="token keyword">implements</span> <span class="token class-name">IBinder</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">transact</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">Parcel</span> data<span class="token punctuation">,</span> <span class="token class-name">Parcel</span> reply<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>
        <span class="token comment">//用于检测Parcel大小是否大于800k</span>
        <span class="token class-name">Binder</span><span class="token punctuation">.</span><span class="token function">checkParcel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token string">&quot;Unreasonably large binder buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//【见2.6】</span>
        <span class="token keyword">return</span> <span class="token function">transactNative</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原生方法</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> jboolean <span class="token function">android_os_BinderProxy_transact</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">,</span>
    jint code<span class="token punctuation">,</span> jobject dataObj<span class="token punctuation">,</span> jobject replyObj<span class="token punctuation">,</span> jint flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">//将java Parcel转为c++ Parcel</span>
    Parcel<span class="token operator">*</span> data <span class="token operator">=</span> <span class="token function">parcelForJavaObject</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> dataObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Parcel<span class="token operator">*</span> reply <span class="token operator">=</span> <span class="token function">parcelForJavaObject</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> replyObj<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//gBinderProxyOffsets.mObject中保存的是new BpBinder(handle)对象</span>
    IBinder<span class="token operator">*</span> target <span class="token operator">=</span> <span class="token punctuation">(</span>IBinder<span class="token operator">*</span><span class="token punctuation">)</span> env<span class="token operator">-&gt;</span><span class="token function">GetLongField</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> gBinderProxyOffsets<span class="token punctuation">.</span>mObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">//此处便是BpBinder::transact()【见小节2.7】</span>
    <span class="token class-name">status_t</span> err <span class="token operator">=</span> target<span class="token operator">-&gt;</span><span class="token function">transact</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">//最后根据transact执行具体情况，抛出相应的Exception</span>
    <span class="token function">signalExceptionForError</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> err<span class="token punctuation">,</span> true <span class="token punctuation">,</span> data<span class="token operator">-&gt;</span><span class="token function">dataSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> JNI_FALSE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token class-name">status_t</span> BpBinder<span class="token operator">::</span><span class="token function">transact</span><span class="token punctuation">(</span>
    <span class="token class-name">uint32_t</span> code<span class="token punctuation">,</span> <span class="token keyword">const</span> Parcel<span class="token operator">&amp;</span> data<span class="token punctuation">,</span> Parcel<span class="token operator">*</span> reply<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mAlive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 【见小节2.8】</span>
        <span class="token class-name">status_t</span> status <span class="token operator">=</span> IPCThreadState<span class="token operator">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">transact</span><span class="token punctuation">(</span>
            mHandle<span class="token punctuation">,</span> code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> DEAD_OBJECT<span class="token punctuation">)</span> mAlive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> status<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> DEAD_OBJECT<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token class-name">status_t</span> IPCThreadState<span class="token operator">::</span><span class="token function">transact</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> handle<span class="token punctuation">,</span>
                                  <span class="token class-name">uint32_t</span> code<span class="token punctuation">,</span> <span class="token keyword">const</span> Parcel<span class="token operator">&amp;</span> data<span class="token punctuation">,</span>
                                  Parcel<span class="token operator">*</span> reply<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">status_t</span> err <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">errorCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数据错误检查</span>
    flags <span class="token operator">|=</span> TF_ACCEPT_FDS<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> NO_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// 传输数据 【见小节2.9】</span>
        err <span class="token operator">=</span> <span class="token function">writeTransactionData</span><span class="token punctuation">(</span>BC_TRANSACTION<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> handle<span class="token punctuation">,</span> code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> NO_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reply<span class="token punctuation">)</span> reply<span class="token operator">-&gt;</span><span class="token function">setError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>mLastError <span class="token operator">=</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 默认情况下,都是采用非oneway的方式, 也就是需要等待服务端的返回结果</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> TF_ONE_WAY<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reply<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//reply对象不为空 【见小节2.10】</span>
            err <span class="token operator">=</span> <span class="token function">waitForResponse</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            Parcel fakeReply<span class="token punctuation">;</span>
            err <span class="token operator">=</span> <span class="token function">waitForResponse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fakeReply<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        err <span class="token operator">=</span> <span class="token function">waitForResponse</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>transact主要过程:</p><p>先执行writeTransactionData()已向Parcel数据类型的mOut写入数据，此时mIn还没有数据； 然后执行waitForResponse()方法，循环执行，直到收到应答消息. 调用talkWithDriver()跟驱动交互，收到应答消息，便会写入mIn, 则根据收到的不同响应吗，执行相应的操作。 此处调用waitForResponse根据是否有设置TF_ONE_WAY的标记:</p><p>当已设置oneway时, 则调用waitForResponse(NULL, NULL); 当未设置oneway时, 则调用waitForResponse(reply) 或 waitForResponse(&amp;fakeReply)</p><h3 id="源码目录" tabindex="-1"><a class="header-anchor" href="#源码目录"><span>源码目录</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>framework/base/core/java/android/os/
  - IInterface.java
  - IServiceManager.java
  - ServiceManager.java
  - ServiceManagerNative.java(内含ServiceManagerProxy类)

framework/base/core/java/android/os/
  - IBinder.java
  - Binder.java(内含BinderProxy类)
  - Parcel.java

framework/base/core/java/com/android/internal/os/
  - BinderInternal.java

framework/base/core/jni/
  - AndroidRuntime.cpp
  - android_os_Parcel.cpp
  - android_util_Binder.cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),k=[d];function v(m,b){return a(),e("div",null,k)}const w=s(u,[["render",v],["__file","binder架构.html.vue"]]),h=JSON.parse('{"path":"/fe/framework/binder/binder%E6%9E%B6%E6%9E%84.html","title":"binder架构","lang":"zh-CN","frontmatter":{"title":"binder架构","date":"2024-04-23T11:47:50.000Z","order":10,"category":["framework"],"tag":["binder"],"description":"binder架构 binder架构binder架构 binder类图 binder类图binder类图 ServiceManager：通过getIServiceManager方法获取的是ServiceManagerProxy对象； ServiceManager的addService, getService实际工作都交由ServiceManagerPro...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/fe/framework/binder/binder%E6%9E%B6%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"binder架构"}],["meta",{"property":"og:description","content":"binder架构 binder架构binder架构 binder类图 binder类图binder类图 ServiceManager：通过getIServiceManager方法获取的是ServiceManagerProxy对象； ServiceManager的addService, getService实际工作都交由ServiceManagerPro..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-22T23:46:25.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"binder"}],["meta",{"property":"article:published_time","content":"2024-04-23T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-22T23:46:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"binder架构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-23T11:47:50.000Z\\",\\"dateModified\\":\\"2024-04-22T23:46:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"binder架构","slug":"binder架构","link":"#binder架构","children":[]},{"level":3,"title":"binder类图","slug":"binder类图","link":"#binder类图","children":[]},{"level":3,"title":"Binder进程与线程","slug":"binder进程与线程","link":"#binder进程与线程","children":[]},{"level":3,"title":"Binder传输过程","slug":"binder传输过程","link":"#binder传输过程","children":[]},{"level":3,"title":"Binder路由","slug":"binder路由","link":"#binder路由","children":[]},{"level":3,"title":"通信过程 AMS","slug":"通信过程-ams","link":"#通信过程-ams","children":[]},{"level":3,"title":"关键代码","slug":"关键代码","link":"#关键代码","children":[]},{"level":3,"title":"源码目录","slug":"源码目录","link":"#源码目录","children":[]}],"git":{"createdTime":1713323599000,"updatedTime":1713829585000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":5.6,"words":1680},"filePathRelative":"fe/framework/binder/binder架构.md","localizedDate":"2024年4月23日","excerpt":"<h3>binder架构</h3>\\n<figure><figcaption>binder架构</figcaption></figure>\\n<h3>binder类图</h3>\\n<figure><figcaption>binder类图</figcaption></figure>\\n<ul>\\n<li>\\n<p>ServiceManager：通过getIServiceManager方法获取的是ServiceManagerProxy对象； ServiceManager的addService, getService实际工作都交由ServiceManagerProxy的相应方法来处理；</p>\\n</li>\\n<li>\\n<p>ServiceManagerProxy：其成员变量mRemote指向BinderProxy对象，ServiceManagerProxy的addService, getService方法最终是交由mRemote来完成。</p>\\n</li>\\n<li>\\n<p>ServiceManagerNative：其方法asInterface()返回的是ServiceManagerProxy对象，ServiceManager便是借助ServiceManagerNative类来找到ServiceManagerProxy；</p>\\n</li>\\n<li>\\n<p>Binder：其成员变量mObject和方法execTransact()用于native方法</p>\\n</li>\\n<li>\\n<p>BinderInternal：内部有一个GcWatcher类，用于处理和调试与Binder相关的垃圾回收。</p>\\n</li>\\n<li>\\n<p>IBinder：接口中常量FLAG_ONEWAY：客户端利用binder跟服务端通信是阻塞式的，但如果设置了FLAG_ONEWAY，这成为非阻塞的调用方式，客户端能立即返回，服务端采用回调方式来通知客户端完成情况。另外IBinder接口有一个内部接口DeathDecipient(死亡通告)。</p>\\n</li>\\n</ul>","autoDesc":true}');export{w as comp,h as data};
