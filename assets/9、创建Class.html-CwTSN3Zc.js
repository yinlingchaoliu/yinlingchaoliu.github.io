import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CtvCwAmI.js";const p={},e=t(`<h3 id="知识扩展" tabindex="-1"><a class="header-anchor" href="#知识扩展"><span>知识扩展</span></a></h3><p>方法区存储类信息</p><p>创建Class 1、存储类信息 2、常量池转化为运行时常量池</p><h3 id="_1、从classfile读取信息-拷贝到类中" tabindex="-1"><a class="header-anchor" href="#_1、从classfile读取信息-拷贝到类中"><span>1、从classFile读取信息，拷贝到类中</span></a></h3><p>Class</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Class <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	accessFlags       <span class="token builtin">uint16</span>        <span class="token comment">// 类访问标志</span>
	name              <span class="token builtin">string</span>        <span class="token comment">// 类名（全限定）</span>
	superClassName    <span class="token builtin">string</span>        <span class="token comment">// 父类名（全限定），eg. java/lang/Object</span>
	interfaceNames    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>      <span class="token comment">// 接口名（全限定）</span>
	constantPool      <span class="token operator">*</span>ConstantPool <span class="token comment">// 运行时常量池</span>
	fields            <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Field      <span class="token comment">// 字段表</span>
	methods           <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Method     <span class="token comment">// 方法表</span>
	loader            <span class="token operator">*</span>ClassLoader  <span class="token comment">// 类加载器</span>
	superClass        <span class="token operator">*</span>Class        <span class="token comment">// 父类指针</span>
	interfaces        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Class      <span class="token comment">// 实现的接口指针</span>
	instanceSlotCount <span class="token builtin">uint</span>          <span class="token comment">// 存放实例变量占据的空间大小（包含从父类继承来的实例变量）（其中long和double占两个slot）</span>
	staticSlotCount   <span class="token builtin">uint</span>          <span class="token comment">// 存放类变量占据的空间大小（只包含当前类的类变量）（其中long和double占两个slot）</span>
	staticVars        Slots         <span class="token comment">// 存放静态变量</span>
	initStarted       <span class="token builtin">bool</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、创建class实例总方法</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newClass</span><span class="token punctuation">(</span>cf <span class="token operator">*</span>classfile<span class="token punctuation">.</span>ClassFile<span class="token punctuation">)</span> <span class="token operator">*</span>Class <span class="token punctuation">{</span>
	class <span class="token operator">:=</span> <span class="token operator">&amp;</span>Class<span class="token punctuation">{</span><span class="token punctuation">}</span>
	class<span class="token punctuation">.</span>accessFlags <span class="token operator">=</span> cf<span class="token punctuation">.</span><span class="token function">AccessFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	class<span class="token punctuation">.</span>name <span class="token operator">=</span> cf<span class="token punctuation">.</span><span class="token function">ClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	class<span class="token punctuation">.</span>superClassName <span class="token operator">=</span> cf<span class="token punctuation">.</span><span class="token function">SuperClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	class<span class="token punctuation">.</span>interfaceNames <span class="token operator">=</span> cf<span class="token punctuation">.</span><span class="token function">InterfaceNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	class<span class="token punctuation">.</span>constantPool <span class="token operator">=</span> <span class="token function">newConstantPool</span><span class="token punctuation">(</span>class<span class="token punctuation">,</span> cf<span class="token punctuation">.</span><span class="token function">ConstantPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	class<span class="token punctuation">.</span>fields <span class="token operator">=</span> <span class="token function">newFields</span><span class="token punctuation">(</span>class<span class="token punctuation">,</span> cf<span class="token punctuation">.</span><span class="token function">Fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	class<span class="token punctuation">.</span>methods <span class="token operator">=</span> <span class="token function">newMethods</span><span class="token punctuation">(</span>class<span class="token punctuation">,</span> cf<span class="token punctuation">.</span><span class="token function">Methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> class
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>公共字段信息 (访问标志，访问名字，描述符)</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Field 与 Method 的父类，不是 Class 的父类</span>
<span class="token keyword">type</span> ClassMember <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	accessFlags <span class="token builtin">uint16</span>
	name        <span class="token builtin">string</span>
	descriptor  <span class="token builtin">string</span>
	class       <span class="token operator">*</span>Class <span class="token comment">// 所属的类</span>
<span class="token punctuation">}</span>

<span class="token comment">// 从 classFile 中复制数据</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassMember<span class="token punctuation">)</span> <span class="token function">copyMemberInfo</span><span class="token punctuation">(</span>memberInfo <span class="token operator">*</span>classfile<span class="token punctuation">.</span>MemberInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	self<span class="token punctuation">.</span>accessFlags <span class="token operator">=</span> memberInfo<span class="token punctuation">.</span><span class="token function">AccessFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	self<span class="token punctuation">.</span>name <span class="token operator">=</span> memberInfo<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	self<span class="token punctuation">.</span>descriptor <span class="token operator">=</span> memberInfo<span class="token punctuation">.</span><span class="token function">Descriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// d 是否可以访问 self(字段或方法)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassMember<span class="token punctuation">)</span> <span class="token function">isAccessibleTo</span><span class="token punctuation">(</span>d <span class="token operator">*</span>Class<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token comment">// self 是 public</span>
	<span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token function">IsPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span>
	c <span class="token operator">:=</span> self<span class="token punctuation">.</span>class
	<span class="token comment">// self 是 protected，则只有 d 是 self所在的class c的子类或者同一个包可以访问</span>
	<span class="token comment">// 注意 protected 不只是子类级别，同包也可访问</span>
	<span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token function">IsProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> d <span class="token operator">==</span> c <span class="token operator">||</span> d<span class="token punctuation">.</span><span class="token function">isSubClassOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span> c<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> d<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// self 是 default 级别</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>self<span class="token punctuation">.</span><span class="token function">IsPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> d<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> d <span class="token operator">==</span> c
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 classFile 创建 字段表</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Field <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ClassMember
	constantValueIndex <span class="token builtin">uint</span>
	slotId             <span class="token builtin">uint</span>
<span class="token punctuation">}</span>

<span class="token comment">// 根据 classFile 创建 字段表</span>
<span class="token keyword">func</span> <span class="token function">newFields</span><span class="token punctuation">(</span>class <span class="token operator">*</span>Class<span class="token punctuation">,</span> cfFields <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>classfile<span class="token punctuation">.</span>MemberInfo<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Field <span class="token punctuation">{</span>
	fields <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Field<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>cfFields<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> cfField <span class="token operator">:=</span> <span class="token keyword">range</span> cfFields <span class="token punctuation">{</span>
		fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Field<span class="token punctuation">{</span><span class="token punctuation">}</span>
		fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>class <span class="token operator">=</span> class
		fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyMemberInfo</span><span class="token punctuation">(</span>cfField<span class="token punctuation">)</span>
		fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyAttributes</span><span class="token punctuation">(</span>cfField<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> fields
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 classFile 创建 方法表</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Method <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ClassMember
	maxStack  <span class="token builtin">uint</span>
	maxLocals <span class="token builtin">uint</span>
	code      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token comment">// 方法字节码表</span>
	argSlotCount <span class="token builtin">uint</span> <span class="token comment">// 参数个数</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newMethods</span><span class="token punctuation">(</span>class <span class="token operator">*</span>Class<span class="token punctuation">,</span> cfMethods <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>classfile<span class="token punctuation">.</span>MemberInfo<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Method <span class="token punctuation">{</span>
	methods <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Method<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>cfMethods<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> cfMethod <span class="token operator">:=</span> <span class="token keyword">range</span> cfMethods <span class="token punctuation">{</span>
		methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Method<span class="token punctuation">{</span><span class="token punctuation">}</span>
		methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>class <span class="token operator">=</span> class
		methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyMemberInfo</span><span class="token punctuation">(</span>cfMethod<span class="token punctuation">)</span>
		methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyAttributes</span><span class="token punctuation">(</span>cfMethod<span class="token punctuation">)</span>
		methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">calArgSlotCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> methods
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、把-classfile-中的常量池转化为运行时常量池" tabindex="-1"><a class="header-anchor" href="#_2、把-classfile-中的常量池转化为运行时常量池"><span>2、把 classFile 中的常量池转化为运行时常量池</span></a></h4><p>将[]classfile.ConstantInfo 转化为[]heap.Constant</p><p>取值通过常量池来获得</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 常量项</span>
<span class="token keyword">type</span> Constant <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 运行时常量池</span>
<span class="token keyword">type</span> ConstantPool <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	class  <span class="token operator">*</span>Class <span class="token comment">// 所属的类</span>
	consts <span class="token punctuation">[</span><span class="token punctuation">]</span>Constant
<span class="token punctuation">}</span>

<span class="token comment">//创建运行时常量池 []consts</span>
<span class="token keyword">func</span> <span class="token function">newConstantPool</span><span class="token punctuation">(</span>class <span class="token operator">*</span>Class<span class="token punctuation">,</span> cfCp classfile<span class="token punctuation">.</span>ConstantPool<span class="token punctuation">)</span> <span class="token operator">*</span>ConstantPool <span class="token punctuation">{</span>
	cpCount <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>cfCp<span class="token punctuation">)</span>
	consts <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Constant<span class="token punctuation">,</span> cpCount<span class="token punctuation">)</span>
	rtCp <span class="token operator">:=</span> <span class="token operator">&amp;</span>ConstantPool<span class="token punctuation">{</span>class<span class="token punctuation">,</span> consts<span class="token punctuation">}</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cpCount<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		cpInfo <span class="token operator">:=</span> cfCp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		<span class="token keyword">switch</span> cpInfo<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 字面量：整数、浮点数、字符串</span>
		<span class="token keyword">case</span> <span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantIntegerInfo<span class="token punctuation">:</span>
			consts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cpInfo<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantIntegerInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantFloatInfo<span class="token punctuation">:</span>
			consts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cpInfo<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantFloatInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantLongInfo<span class="token punctuation">:</span>
			consts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cpInfo<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantLongInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			i<span class="token operator">++</span>
		<span class="token keyword">case</span> <span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantDoubleInfo<span class="token punctuation">:</span>
			consts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cpInfo<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantDoubleInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			i<span class="token operator">++</span>
		<span class="token keyword">case</span> <span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantStringInfo<span class="token punctuation">:</span>
			consts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cpInfo<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantStringInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token comment">// 符号引用：类、字段、方法、接口方法</span>
		<span class="token keyword">case</span> <span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantClassInfo<span class="token punctuation">:</span>
			classInfo <span class="token operator">:=</span> cpInfo<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantClassInfo<span class="token punctuation">)</span>
			consts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newClassRef</span><span class="token punctuation">(</span>rtCp<span class="token punctuation">,</span> classInfo<span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantFieldrefInfo<span class="token punctuation">:</span>
			fieldrefInfo <span class="token operator">:=</span> cpInfo<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantFieldrefInfo<span class="token punctuation">)</span>
			consts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newFieldRef</span><span class="token punctuation">(</span>rtCp<span class="token punctuation">,</span> fieldrefInfo<span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantMethodrefInfo<span class="token punctuation">:</span>
			methodrefInfo <span class="token operator">:=</span> cpInfo<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantMethodrefInfo<span class="token punctuation">)</span>
			consts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newMethodRef</span><span class="token punctuation">(</span>rtCp<span class="token punctuation">,</span> methodrefInfo<span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantInterfaceMethodrefInfo<span class="token punctuation">:</span>
			interfaceMethodrefInfo <span class="token operator">:=</span> cpInfo<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantInterfaceMethodrefInfo<span class="token punctuation">)</span>
			consts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newInterfaceMethodRef</span><span class="token punctuation">(</span>rtCp<span class="token punctuation">,</span> interfaceMethodrefInfo<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> rtCp
<span class="token punctuation">}</span>


<span class="token comment">// 根据索引返回常量项 取值</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ConstantPool<span class="token punctuation">)</span> <span class="token function">GetConstant</span><span class="token punctuation">(</span>index <span class="token builtin">uint</span><span class="token punctuation">)</span> Constant <span class="token punctuation">{</span>
	<span class="token keyword">if</span> c <span class="token operator">:=</span> self<span class="token punctuation">.</span>consts<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> c <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> c
	<span class="token punctuation">}</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;No Constant at index %d&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类、字段、方法、接口存引用</p><p>字符串 存常量池索引</p><p>引用类</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 符号引用基类</span>
<span class="token keyword">type</span> SymRef <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	cp        <span class="token operator">*</span>ConstantPool <span class="token comment">// 符号引用所在的常量池</span>
	className <span class="token builtin">string</span>        <span class="token comment">// 类的全限定名</span>
	class     <span class="token operator">*</span>Class        <span class="token comment">// 符号引用所属的类</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>SymRef<span class="token punctuation">)</span> <span class="token function">ResolvedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Class <span class="token punctuation">{</span>
	<span class="token keyword">if</span> self<span class="token punctuation">.</span>class <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		self<span class="token punctuation">.</span><span class="token function">resolveClassRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>class
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>SymRef<span class="token punctuation">)</span> <span class="token function">resolveClassRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	d <span class="token operator">:=</span> self<span class="token punctuation">.</span>cp<span class="token punctuation">.</span>class
	c <span class="token operator">:=</span> d<span class="token punctuation">.</span>loader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>className<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>c<span class="token punctuation">.</span><span class="token function">isAccessibleTo</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.IllegalAccessError&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	self<span class="token punctuation">.</span>class <span class="token operator">=</span> c
<span class="token punctuation">}</span>



<span class="token comment">// 类符号引用</span>
<span class="token keyword">type</span> ClassRef <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	SymRef
<span class="token punctuation">}</span>

<span class="token comment">// 将 classfile.ConstantClassInfo 转化为 ClassRef</span>
<span class="token keyword">func</span> <span class="token function">newClassRef</span><span class="token punctuation">(</span>cp <span class="token operator">*</span>ConstantPool<span class="token punctuation">,</span> classInfo <span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantClassInfo<span class="token punctuation">)</span> <span class="token operator">*</span>ClassRef <span class="token punctuation">{</span>
	ref <span class="token operator">:=</span> <span class="token operator">&amp;</span>ClassRef<span class="token punctuation">{</span><span class="token punctuation">}</span>
	ref<span class="token punctuation">.</span>cp <span class="token operator">=</span> cp
	ref<span class="token punctuation">.</span>className <span class="token operator">=</span> classInfo<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> ref
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> MemberRef <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	SymRef
	name       <span class="token builtin">string</span>
	descriptor <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>MemberRef<span class="token punctuation">)</span> <span class="token function">copyMemberRefInfo</span><span class="token punctuation">(</span>refInfo <span class="token operator">*</span>classfile<span class="token punctuation">.</span>ConstantMemberrefInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	self<span class="token punctuation">.</span>className <span class="token operator">=</span> refInfo<span class="token punctuation">.</span><span class="token function">ClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>descriptor <span class="token operator">=</span> refInfo<span class="token punctuation">.</span><span class="token function">NameAndDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// getter</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>MemberRef<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>name
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>MemberRef<span class="token punctuation">)</span> <span class="token function">Descriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>descriptor
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实战项目地址" tabindex="-1"><a class="header-anchor" href="#实战项目地址"><span>实战项目地址</span></a></h3><p>https://gitee.com/yinlingchaoliu/jvmgo.git</p>`,25),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","9、创建Class.html.vue"]]),d=JSON.parse('{"path":"/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/9%E3%80%81%E5%88%9B%E5%BB%BAClass.html","title":"9、创建Class","lang":"zh-CN","frontmatter":{"title":"9、创建Class","date":"2024-04-10T06:06:06.000Z","category":["手动编写jvm虚拟机"],"tag":["jvmgo"],"description":"知识扩展 方法区存储类信息 创建Class 1、存储类信息 2、常量池转化为运行时常量池 1、从classFile读取信息，拷贝到类中 Class 1、创建class实例总方法 公共字段信息 (访问标志，访问名字，描述符) 根据 classFile 创建 字段表 根据 classFile 创建 方法表 2、把 classFile 中的常量池转化为运行时...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/9%E3%80%81%E5%88%9B%E5%BB%BAClass.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"9、创建Class"}],["meta",{"property":"og:description","content":"知识扩展 方法区存储类信息 创建Class 1、存储类信息 2、常量池转化为运行时常量池 1、从classFile读取信息，拷贝到类中 Class 1、创建class实例总方法 公共字段信息 (访问标志，访问名字，描述符) 根据 classFile 创建 字段表 根据 classFile 创建 方法表 2、把 classFile 中的常量池转化为运行时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T22:43:38.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"jvmgo"}],["meta",{"property":"article:published_time","content":"2024-04-10T06:06:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-09T22:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9、创建Class\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T06:06:06.000Z\\",\\"dateModified\\":\\"2024-04-09T22:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"知识扩展","slug":"知识扩展","link":"#知识扩展","children":[]},{"level":3,"title":"1、从classFile读取信息，拷贝到类中","slug":"_1、从classfile读取信息-拷贝到类中","link":"#_1、从classfile读取信息-拷贝到类中","children":[]},{"level":3,"title":"实战项目地址","slug":"实战项目地址","link":"#实战项目地址","children":[]}],"git":{"createdTime":1711376238000,"updatedTime":1712702618000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":3.27,"words":982},"filePathRelative":"basis/jvm/手动编写jvm虚拟机/9、创建Class.md","localizedDate":"2024年4月10日","excerpt":"<h3>知识扩展</h3>\\n<p>方法区存储类信息</p>\\n<p>创建Class\\n1、存储类信息\\n2、常量池转化为运行时常量池</p>\\n<h3>1、从classFile读取信息，拷贝到类中</h3>\\n<p>Class</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">type</span> Class <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\taccessFlags       <span class=\\"token builtin\\">uint16</span>        <span class=\\"token comment\\">// 类访问标志</span>\\n\\tname              <span class=\\"token builtin\\">string</span>        <span class=\\"token comment\\">// 类名（全限定）</span>\\n\\tsuperClassName    <span class=\\"token builtin\\">string</span>        <span class=\\"token comment\\">// 父类名（全限定），eg. java/lang/Object</span>\\n\\tinterfaceNames    <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">string</span>      <span class=\\"token comment\\">// 接口名（全限定）</span>\\n\\tconstantPool      <span class=\\"token operator\\">*</span>ConstantPool <span class=\\"token comment\\">// 运行时常量池</span>\\n\\tfields            <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">*</span>Field      <span class=\\"token comment\\">// 字段表</span>\\n\\tmethods           <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">*</span>Method     <span class=\\"token comment\\">// 方法表</span>\\n\\tloader            <span class=\\"token operator\\">*</span>ClassLoader  <span class=\\"token comment\\">// 类加载器</span>\\n\\tsuperClass        <span class=\\"token operator\\">*</span>Class        <span class=\\"token comment\\">// 父类指针</span>\\n\\tinterfaces        <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">*</span>Class      <span class=\\"token comment\\">// 实现的接口指针</span>\\n\\tinstanceSlotCount <span class=\\"token builtin\\">uint</span>          <span class=\\"token comment\\">// 存放实例变量占据的空间大小（包含从父类继承来的实例变量）（其中long和double占两个slot）</span>\\n\\tstaticSlotCount   <span class=\\"token builtin\\">uint</span>          <span class=\\"token comment\\">// 存放类变量占据的空间大小（只包含当前类的类变量）（其中long和double占两个slot）</span>\\n\\tstaticVars        Slots         <span class=\\"token comment\\">// 存放静态变量</span>\\n\\tinitStarted       <span class=\\"token builtin\\">bool</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
