import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CtvCwAmI.js";const e={},p=t(`<h3 id="_1、基础概念" tabindex="-1"><a class="header-anchor" href="#_1、基础概念"><span>1、基础概念</span></a></h3><p>线程：程序执行流最小单元。 线程拥有各自计数器，堆栈，局部变量的属性，并且能够访问共享内存变量</p><p>注意：线程可以访问共享内存变量，高并发是指多线程对共享资源的原子操作。</p><p>线程优先级：1-10级，默认是5，高优先级分配时间片数量多于低优先级</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Thread.setPriority(5);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：优先级不能作为程序正确性依赖，因操作系统差异</p><p>精灵进程：后台调度及支持性工作的进程</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Thread.setDaemon(true);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2、线程状态" tabindex="-1"><a class="header-anchor" href="#_2、线程状态"><span>2、线程状态</span></a></h3><p>java线程状态6种：</p><table><thead><tr><th>线程状态</th><th>描述</th></tr></thead><tbody><tr><td>初始状态(NEW)</td><td>新创建了一个线程对象，但还没有调用start()方法</td></tr><tr><td>运行状态(RUNNABLE)</td><td>Java线程中将就绪（ready）和运行中（running）两种状态笼统的成为“运行”。</td></tr><tr><td>阻塞状态(BLOCKED)</td><td>表示线程阻塞于锁</td></tr><tr><td>等待状态(WAITING)</td><td>进入该状态的线程需要等待</td></tr><tr><td>超时等待状态(TIME_WAITING)</td><td>该状态不同于WAITING，它可以在指定的时间内自行返回</td></tr><tr><td>终止状态(TERMINATED)</td><td>表示该线程已经执行完毕</td></tr></tbody></table><figure><img src="https://upload-images.jianshu.io/upload_images/5526061-9852cf763271acad.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="线程状态图" tabindex="0" loading="lazy"><figcaption>线程状态图</figcaption></figure><h3 id="_3、线程函数" tabindex="-1"><a class="header-anchor" href="#_3、线程函数"><span>3、线程函数</span></a></h3><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>sleep</td><td>休眠，对象锁不会释放，不可以被interrupt（）中断</td></tr><tr><td>join</td><td>等待目标程序完成后再继续执行</td></tr><tr><td>yield</td><td>线程礼让，运行状态转为就绪状态，让出执行权</td></tr><tr><td>interrupt</td><td>中断线程</td></tr><tr><td>IsInterrupted</td><td>判断线程是否被中断</td></tr></tbody></table><h3 id="join与yield区别" tabindex="-1"><a class="header-anchor" href="#join与yield区别"><span>join与yield区别</span></a></h3><p>join 线程之间顺序执行 yield 让出当前线程执行权</p><ol><li><p>启动线程之前，最好构建名字，便于定位</p></li><li><p>中断理解：线程中断的标识位，由其他线程通知该线程，若当前线程sleep,则无法中断</p></li><li><p>过期方法suspend、resume、stop不用。原因：陷入暂停、停止，线程不会释放占有资源，引发不确定性</p></li><li><p>安全终止线程： 1）interrupt中断 2）用boolean变量控制</p><p>实战示例</p></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//实现demo</span>
<span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">WorkRunner</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> switchFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// boolean变量线程安全且插入屏障</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//两重判断，一个boolean，一个支持中断状态</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>switchFlag <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        switchFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//调用者</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WorkRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;work&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//两种中断方法</span>
    thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象锁" tabindex="-1"><a class="header-anchor" href="#对象锁"><span>对象锁</span></a></h3><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>wait</td><td>当前线程调用对象的wait()方法，当前线程释放对象锁，进入等待队列。</td></tr><tr><td>wait(long timeout)</td><td>超时等待返回，单位毫秒</td></tr><tr><td>wait(long,int)</td><td>单位纳秒</td></tr><tr><td>notify</td><td>通知一个在对象上等待的线程，使其wait返回</td></tr><tr><td>notifyAll</td><td>通知所有等待线程在该对象的线程</td></tr></tbody></table><p><strong>wait，notify等方法必须放在synchroized代码块中</strong></p><h3 id="经典范例" tabindex="-1"><a class="header-anchor" href="#经典范例"><span>经典范例</span></a></h3><h3 id="等待-通知-生产消费者" tabindex="-1"><a class="header-anchor" href="#等待-通知-生产消费者"><span>等待-通知（生产消费者）</span></a></h3><ol><li><p>消费者 1）获取对象的锁 2）条件不满足等待（wait），被通知后仍要检查条件 3）条件满足执行</p></li><li><p>生产者 1）获得对象的锁 2）改变条件 3）通知所有等待对象上的线程</p></li></ol><p>伪代码</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>synchrionized(对象){
    while(条件不满足){
        对象.wait();
    }
    处理逻辑
}

synchionized(对象){
    改变条件
    对象.notifyAll()
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实战编程" tabindex="-1"><a class="header-anchor" href="#实战编程"><span>实战编程</span></a></h3><p>1、消费者 须增加超时设计</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public synchrionized void fetch(){
    long future =   System.currentTimeMills()+mills;
    long remaining = mills;
    while( 条件 &amp;&amp; remaining &gt; 0){
        对象.wait(remaining);
        remaining = future - System.currentTimeMills();
    }
    处理逻辑
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点：避免方法执行时间过长，不会永久阻塞调用者</p><p>2、阻塞队列BlockQueue 阻塞队列用来给生产者与消费者解耦</p><p>3、线程池 本质一个线程安全工作队列连接工作者线程和客户端线程</p><h3 id="实现线程池的三步" tabindex="-1"><a class="header-anchor" href="#实现线程池的三步"><span>实现线程池的三步</span></a></h3><p>1、实现线程安全的阻塞队列 (生产者-消费者范例)</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlockQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加元素</span>
    <span class="token class-name">E</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//取走元素</span>
    <span class="token class-name">E</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token keyword">int</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//队列size</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">ArrayBlockQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> implement <span class="token class-name">BlockQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> blockList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> volaitle <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token comment">//生产者</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">synchionized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>
            blockList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            lock<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//消费者</span>
    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token keyword">int</span> timeout<span class="token punctuation">)</span><span class="token punctuation">{</span>
    
        <span class="token function">synchionized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>timeout <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>blockList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">long</span> future <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>timeout<span class="token punctuation">;</span>
                <span class="token keyword">long</span> remaining <span class="token operator">=</span> timeout<span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>blockList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> remain <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>remaining<span class="token punctuation">)</span><span class="token punctuation">;</span>            
                    remaining <span class="token operator">=</span> future <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>                
            <span class="token punctuation">}</span>
        <span class="token keyword">return</span> blockList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//消费者</span>
    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//获得当前队列大小</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">synchionized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>
            size <span class="token operator">=</span> blockList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、编写执行者可安全终止的Worker</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Worker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Job</span> extend <span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> implement <span class="token class-name">Runnable</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> switchFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BlockQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Job</span><span class="token punctuation">&gt;</span></span> blockQueue<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token class-name">BlockQueue</span> queue<span class="token punctuation">)</span><span class="token punctuation">{</span>
        blockQueue <span class="token operator">=</span> queue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>switchFlag <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">Job</span> job <span class="token operator">=</span> blockQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            job<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        switchFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、线程池框架</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>线程池接口规范
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ThreadPool</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Job</span> <span class="token keyword">extends</span> <span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token comment">//执行工作</span>
    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Job</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//关闭线程池</span>
    <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//增加线程</span>
    <span class="token keyword">void</span> <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//减少线程</span>
    <span class="token keyword">void</span> <span class="token function">removeWork</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//当前任务job数</span>
    <span class="token keyword">int</span> <span class="token function">getJobSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//当前线程数</span>
    <span class="token keyword">int</span> <span class="token function">getThreadCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token class-name">SimpleThreadPool</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Job</span> <span class="token keyword">extends</span> <span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> implement <span class="token class-name">ThreadPool</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Job</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>

<span class="token comment">//任务阻塞队列</span>
<span class="token keyword">private</span> <span class="token class-name">BlockQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Job</span><span class="token punctuation">&gt;</span></span> blockQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Job</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>

<span class="token comment">//线程队列</span>
<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">&gt;</span></span> workerList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sysnchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//最大线程数</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_WORK_NUM</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">//默认线程数</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_WORK_NUM</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">SimpleThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_WORK_NUM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//执行任务</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Job</span> job<span class="token punctuation">)</span><span class="token punctuation">{</span>
    blockQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//关闭线程池</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> synchrionized <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Worker</span> worker <span class="token operator">:</span> workerList<span class="token punctuation">)</span><span class="token punctuation">{</span>
        worker<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//增加线程任务</span>
<span class="token keyword">public</span> synchrionized <span class="token keyword">void</span> <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">//当前线程数</span>
   <span class="token keyword">int</span> threadNum <span class="token operator">=</span> workerList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//限制创建线程数不能超过最大限度</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>threadNum <span class="token operator">+</span> num <span class="token operator">&gt;</span> <span class="token constant">MAX_WORK_NUM</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       num <span class="token operator">=</span> <span class="token constant">MAX_WORK_NUM</span> <span class="token operator">-</span> threadNum <span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">creatOneWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> synchrionized <span class="token keyword">void</span> <span class="token function">removeWorker</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//当前线程数</span>
   <span class="token keyword">int</span> threadNum <span class="token operator">=</span> workerList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//最大删除数是当前线程数</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&gt;</span> threadNum<span class="token punctuation">)</span><span class="token punctuation">{</span>
        num <span class="token operator">=</span> threadNum<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

    <span class="token comment">//移除工作线程</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Worker</span> worker <span class="token operator">=</span> workerList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        worker<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        workerList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token comment">//当前线程数</span>
<span class="token keyword">public</span> synchrionized <span class="token keyword">int</span> <span class="token function">getThreadCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> workerList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//获得当前任务数</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getJobSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> blockQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//创建一个线程</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">creatOneWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token comment">//创建工作者</span>
    <span class="token class-name">Worker</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>blockQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    workerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ThreadPoolExecutor线程池</p><p>ThreadFactory定制线程</p><p>Executors.newFixedThreadPool() 固定线程数</p><p>Executors.newCachedThreadPool() 缓存线程池</p><p>Executors.newScheduledThreadPool() 定时线程池</p>`,44),o=[p];function c(i,l){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","java线程深入讲解及线程池实现.html.vue"]]),r=JSON.parse('{"path":"/basis/juc/java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java%E7%BA%BF%E7%A8%8B%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3%E5%8F%8A%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AE%9E%E7%8E%B0.html","title":"java线程深入讲解及线程池实现","lang":"zh-CN","frontmatter":{"title":"java线程深入讲解及线程池实现","date":"2024-03-24T11:47:50.000Z","category":["java高并发编程"],"tag":["juc"],"description":"1、基础概念 线程：程序执行流最小单元。 线程拥有各自计数器，堆栈，局部变量的属性，并且能够访问共享内存变量 注意：线程可以访问共享内存变量，高并发是指多线程对共享资源的原子操作。 线程优先级：1-10级，默认是5，高优先级分配时间片数量多于低优先级 注意：优先级不能作为程序正确性依赖，因操作系统差异 精灵进程：后台调度及支持性工作的进程 2、线程状态...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/juc/java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java%E7%BA%BF%E7%A8%8B%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3%E5%8F%8A%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"java线程深入讲解及线程池实现"}],["meta",{"property":"og:description","content":"1、基础概念 线程：程序执行流最小单元。 线程拥有各自计数器，堆栈，局部变量的属性，并且能够访问共享内存变量 注意：线程可以访问共享内存变量，高并发是指多线程对共享资源的原子操作。 线程优先级：1-10级，默认是5，高优先级分配时间片数量多于低优先级 注意：优先级不能作为程序正确性依赖，因操作系统差异 精灵进程：后台调度及支持性工作的进程 2、线程状态..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://upload-images.jianshu.io/upload_images/5526061-9852cf763271acad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-09T00:56:59.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"juc"}],["meta",{"property":"article:published_time","content":"2024-03-24T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-09T00:56:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java线程深入讲解及线程池实现\\",\\"image\\":[\\"https://upload-images.jianshu.io/upload_images/5526061-9852cf763271acad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\"],\\"datePublished\\":\\"2024-03-24T11:47:50.000Z\\",\\"dateModified\\":\\"2024-05-09T00:56:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"1、基础概念","slug":"_1、基础概念","link":"#_1、基础概念","children":[]},{"level":3,"title":"2、线程状态","slug":"_2、线程状态","link":"#_2、线程状态","children":[]},{"level":3,"title":"3、线程函数","slug":"_3、线程函数","link":"#_3、线程函数","children":[]},{"level":3,"title":"join与yield区别","slug":"join与yield区别","link":"#join与yield区别","children":[]},{"level":3,"title":"对象锁","slug":"对象锁","link":"#对象锁","children":[]},{"level":3,"title":"经典范例","slug":"经典范例","link":"#经典范例","children":[]},{"level":3,"title":"等待-通知（生产消费者）","slug":"等待-通知-生产消费者","link":"#等待-通知-生产消费者","children":[]},{"level":3,"title":"实战编程","slug":"实战编程","link":"#实战编程","children":[]},{"level":3,"title":"实现线程池的三步","slug":"实现线程池的三步","link":"#实现线程池的三步","children":[]}],"git":{"createdTime":1711376238000,"updatedTime":1715216219000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":5.04,"words":1512},"filePathRelative":"basis/juc/java高并发编程/java线程深入讲解及线程池实现.md","localizedDate":"2024年3月24日","excerpt":"<h3>1、基础概念</h3>\\n<p>线程：程序执行流最小单元。\\n线程拥有各自计数器，堆栈，局部变量的属性，并且能够访问共享内存变量</p>\\n<p>注意：线程可以访问共享内存变量，高并发是指多线程对共享资源的原子操作。</p>\\n<p>线程优先级：1-10级，默认是5，高优先级分配时间片数量多于低优先级</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>Thread.setPriority(5);\\n</code></pre></div><p>注意：优先级不能作为程序正确性依赖，因操作系统差异</p>","autoDesc":true}');export{k as comp,r as data};
