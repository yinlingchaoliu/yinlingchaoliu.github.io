import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CtvCwAmI.js";const p={},e=t(`<h3 id="知识扩展" tabindex="-1"><a class="header-anchor" href="#知识扩展"><span>知识扩展</span></a></h3><ul><li>1、依赖classpath 读取class文件</li><li>2、map存储class类</li><li>3、动态加载class</li></ul><h3 id="_1、定义classloader" tabindex="-1"><a class="header-anchor" href="#_1、定义classloader"><span>1、定义classloader</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> ClassLoader <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	cp       <span class="token operator">*</span>classpath<span class="token punctuation">.</span>Classpath <span class="token comment">// 用于搜索和读取 class 文件</span>
	classMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Class    <span class="token comment">// 已经加载的类数据，key=全限定类名</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建一个类加载器</span>
<span class="token keyword">func</span> <span class="token function">NewClassLoader</span><span class="token punctuation">(</span>cp <span class="token operator">*</span>classpath<span class="token punctuation">.</span>Classpath<span class="token punctuation">)</span> <span class="token operator">*</span>ClassLoader <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>ClassLoader<span class="token punctuation">{</span>
		cp<span class="token punctuation">:</span>       cp<span class="token punctuation">,</span>
		classMap<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Class<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 把类数据加载到方法区</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassLoader<span class="token punctuation">)</span> <span class="token function">LoadClass</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Class <span class="token punctuation">{</span>
	<span class="token keyword">if</span> class<span class="token punctuation">,</span> ok <span class="token operator">:=</span> self<span class="token punctuation">.</span>classMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> class <span class="token comment">// 类已经加载</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">loadNonArrayClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// 普通类的数据来自于class文件，数组类的数据是jvm在运行期间动态生成的</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、类加载过程" tabindex="-1"><a class="header-anchor" href="#_2、类加载过程"><span>2、类加载过程</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 类加载过程</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassLoader<span class="token punctuation">)</span> <span class="token function">loadNonArrayClass</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Class <span class="token punctuation">{</span>
	data<span class="token punctuation">,</span> entry <span class="token operator">:=</span> self<span class="token punctuation">.</span><span class="token function">readClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// 1. 找到class文件并读取为 byte[]</span>
	class <span class="token operator">:=</span> self<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>     <span class="token comment">// 2. byte[] -&gt; ClassFile -&gt; Class，并放入方法区</span>
	<span class="token function">link</span><span class="token punctuation">(</span>class<span class="token punctuation">)</span>                         <span class="token comment">// 3. 进行链接</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>&quot;<span class="token punctuation">[</span>Loaded <span class="token operator">%</span>s from <span class="token operator">%</span>s<span class="token punctuation">]</span>
&quot;<span class="token punctuation">,</span> name<span class="token punctuation">,</span> entry<span class="token punctuation">)</span>
	<span class="token keyword">return</span> class
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>readClass 从classpath 读取 class []byte</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassLoader<span class="token punctuation">)</span> <span class="token function">readClass</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> classpath<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	data<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> err <span class="token operator">:=</span> self<span class="token punctuation">.</span>cp<span class="token punctuation">.</span><span class="token function">ReadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.ClassNotFoundException: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> data<span class="token punctuation">,</span> entry
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>defineClass 加载class</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassLoader<span class="token punctuation">)</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token operator">*</span>Class <span class="token punctuation">{</span>
	class <span class="token operator">:=</span> <span class="token function">parseClass</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
	class<span class="token punctuation">.</span>loader <span class="token operator">=</span> self
	<span class="token function">resolveSuperClass</span><span class="token punctuation">(</span>class<span class="token punctuation">)</span>          <span class="token comment">// 递归加载父类</span>
	<span class="token function">resolveInterfaces</span><span class="token punctuation">(</span>class<span class="token punctuation">)</span>          <span class="token comment">// 递归加载接口类</span>
	self<span class="token punctuation">.</span>classMap<span class="token punctuation">[</span>class<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> class <span class="token comment">// 放入已加载列表</span>
	<span class="token keyword">return</span> class
<span class="token punctuation">}</span>

<span class="token comment">// byte[] -&gt; ClassFile -&gt; Class</span>
<span class="token keyword">func</span> <span class="token function">parseClass</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token operator">*</span>Class <span class="token punctuation">{</span>
	cf<span class="token punctuation">,</span> err <span class="token operator">:=</span> classfile<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.ClassFormatError&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">newClass</span><span class="token punctuation">(</span>cf<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">resolveSuperClass</span><span class="token punctuation">(</span>class <span class="token operator">*</span>Class<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> class<span class="token punctuation">.</span>name <span class="token operator">!=</span> <span class="token string">&quot;java/lang/Object&quot;</span> <span class="token punctuation">{</span>
		class<span class="token punctuation">.</span>superClass <span class="token operator">=</span> class<span class="token punctuation">.</span>loader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span>class<span class="token punctuation">.</span>superClassName<span class="token punctuation">)</span> <span class="token comment">// 递归加载父类</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">resolveInterfaces</span><span class="token punctuation">(</span>class <span class="token operator">*</span>Class<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	interfaceCount <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>class<span class="token punctuation">.</span>interfaceNames<span class="token punctuation">)</span>
	<span class="token keyword">if</span> interfaceCount <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		class<span class="token punctuation">.</span>interfaces <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Class<span class="token punctuation">,</span> interfaceCount<span class="token punctuation">)</span>
		<span class="token keyword">for</span> i<span class="token punctuation">,</span> interfaceName <span class="token operator">:=</span> <span class="token keyword">range</span> class<span class="token punctuation">.</span>interfaceNames <span class="token punctuation">{</span>
			class<span class="token punctuation">.</span>interfaces<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> class<span class="token punctuation">.</span>loader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span>interfaceName<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>link 链接class 给class赋初始值</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">link</span><span class="token punctuation">(</span>class <span class="token operator">*</span>Class<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">verify</span><span class="token punctuation">(</span>class<span class="token punctuation">)</span>  <span class="token comment">// 验证</span>
	<span class="token function">prepare</span><span class="token punctuation">(</span>class<span class="token punctuation">)</span> <span class="token comment">// 准备</span>
<span class="token punctuation">}</span>

<span class="token comment">// 准备阶段：给类变量分配空间并给予初始值</span>
<span class="token keyword">func</span> <span class="token function">prepare</span><span class="token punctuation">(</span>class <span class="token operator">*</span>Class<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">calcInstanceFieldSlotIds</span><span class="token punctuation">(</span>class<span class="token punctuation">)</span> <span class="token comment">// 计算实例变量的个数，并分别标号</span>
	<span class="token function">calcStaticFieldSlotIds</span><span class="token punctuation">(</span>class<span class="token punctuation">)</span>   <span class="token comment">// 计算类变量的个数，并分别标号</span>
	<span class="token function">allocAndInitStaticVars</span><span class="token punctuation">(</span>class<span class="token punctuation">)</span>   <span class="token comment">// 为类变量分配空间并初始化</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实战项目地址" tabindex="-1"><a class="header-anchor" href="#实战项目地址"><span>实战项目地址</span></a></h3><p>https://gitee.com/yinlingchaoliu/jvmgo.git</p>`,14),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","10、类加载器.html.vue"]]),d=JSON.parse('{"path":"/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/10%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.html","title":"10、类加载器","lang":"zh-CN","frontmatter":{"title":"10、类加载器","date":"2024-04-10T06:06:06.000Z","category":["手动编写jvm虚拟机"],"tag":["jvmgo"],"description":"知识扩展 1、依赖classpath 读取class文件 2、map存储class类 3、动态加载class 1、定义classloader 2、类加载过程 readClass 从classpath 读取 class []byte defineClass 加载class link 链接class 给class赋初始值 实战项目地址 https://gi...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/10%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"10、类加载器"}],["meta",{"property":"og:description","content":"知识扩展 1、依赖classpath 读取class文件 2、map存储class类 3、动态加载class 1、定义classloader 2、类加载过程 readClass 从classpath 读取 class []byte defineClass 加载class link 链接class 给class赋初始值 实战项目地址 https://gi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T22:43:38.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"jvmgo"}],["meta",{"property":"article:published_time","content":"2024-04-10T06:06:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-09T22:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10、类加载器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T06:06:06.000Z\\",\\"dateModified\\":\\"2024-04-09T22:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"知识扩展","slug":"知识扩展","link":"#知识扩展","children":[]},{"level":3,"title":"1、定义classloader","slug":"_1、定义classloader","link":"#_1、定义classloader","children":[]},{"level":3,"title":"2、类加载过程","slug":"_2、类加载过程","link":"#_2、类加载过程","children":[]},{"level":3,"title":"实战项目地址","slug":"实战项目地址","link":"#实战项目地址","children":[]}],"git":{"createdTime":1711376238000,"updatedTime":1712702618000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":1.63,"words":489},"filePathRelative":"basis/jvm/手动编写jvm虚拟机/10、类加载器.md","localizedDate":"2024年4月10日","excerpt":"<h3>知识扩展</h3>\\n<ul>\\n<li>1、依赖classpath 读取class文件</li>\\n<li>2、map存储class类</li>\\n<li>3、动态加载class</li>\\n</ul>\\n<h3>1、定义classloader</h3>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">type</span> ClassLoader <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\tcp       <span class=\\"token operator\\">*</span>classpath<span class=\\"token punctuation\\">.</span>Classpath <span class=\\"token comment\\">// 用于搜索和读取 class 文件</span>\\n\\tclassMap <span class=\\"token keyword\\">map</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">*</span>Class    <span class=\\"token comment\\">// 已经加载的类数据，key=全限定类名</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 创建一个类加载器</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">NewClassLoader</span><span class=\\"token punctuation\\">(</span>cp <span class=\\"token operator\\">*</span>classpath<span class=\\"token punctuation\\">.</span>Classpath<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span>ClassLoader <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">&amp;</span>ClassLoader<span class=\\"token punctuation\\">{</span>\\n\\t\\tcp<span class=\\"token punctuation\\">:</span>       cp<span class=\\"token punctuation\\">,</span>\\n\\t\\tclassMap<span class=\\"token punctuation\\">:</span> <span class=\\"token function\\">make</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">map</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">*</span>Class<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 把类数据加载到方法区</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>self <span class=\\"token operator\\">*</span>ClassLoader<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">LoadClass</span><span class=\\"token punctuation\\">(</span>name <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span>Class <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span> class<span class=\\"token punctuation\\">,</span> ok <span class=\\"token operator\\">:=</span> self<span class=\\"token punctuation\\">.</span>classMap<span class=\\"token punctuation\\">[</span>name<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span> ok <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> class <span class=\\"token comment\\">// 类已经加载</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">return</span> self<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">loadNonArrayClass</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 普通类的数据来自于class文件，数组类的数据是jvm在运行期间动态生成的</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
