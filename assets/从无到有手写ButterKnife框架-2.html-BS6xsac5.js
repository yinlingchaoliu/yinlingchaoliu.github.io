import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as d,c as l,a as i,b as e,d as t,f as s}from"./app-CtvCwAmI.js";const c={},v={href:"https://www.jianshu.com/p/a96de1aa4e29",target:"_blank",rel:"noopener noreferrer"},o={href:"https://www.jianshu.com/p/f8856e913224",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.jianshu.com/p/cdf417e52cab",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.jianshu.com/p/43eb69b2beeb",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.jianshu.com/p/a91cbfb8b1a1",target:"_blank",rel:"noopener noreferrer"},p={href:"https://www.jianshu.com/p/8418ef144b29",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.jianshu.com/p/2da1ca9d8ffa",target:"_blank",rel:"noopener noreferrer"},f=s(`<p>#####1、前言 javapoet解决重复模板代码编写问题 模板代码都类似，这样重复写来写去很烦 javapoet会是一阵强心剂</p><p>语法主要 @see https://github.com/square/javapoet 编写模板代码切记从上往下写，符合人的习惯，并且不会遗漏，</p><p><code>现写类，再写变量，再写方法，最后文件输出</code></p><p>#####javapoet模板代码编写 模板如下:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/**
 * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY CHENTONG.
 */
public class FirstActivity_ViewBinding implements Unbinder {
  private FirstActivity target;

  @UiThread
  public FirstActivity_ViewBinding(FirstActivity target, View source) {
    this.target = target;
    target.helloTv = source.findViewById( R.id.helloTv );
  }

  @Override
  public void unbind() {
    target.helloTv = null;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、模板要抽出变与不变的地方 不变的放在常量类中，变的用poet写 javapoet代码如下: //引入两个类 或者可以采用Class.forName()</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public interface Unbinder {
    void unbind();

    //空方法
    Unbinder EMPTY = new Unbinder() {
        @Override public void unbind() { }
    };
}

public class View {
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>//自动输出代码</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public final class JavaPoet {

    private static final String SUFFIX = &quot;_ViewBinding&quot;;

    private static final String JAVA_DOC = &quot;DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY CHENTONG.
&quot;;

    public static void main(String[] args) {

        try {
            gennerateCode(JavaPoet.class);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    private static void gennerateCode(Class target) throws ClassNotFoundException, IOException {

        //类全路径
        String qualifiedName = target.getName().toString();
        //包名
        String packageName = qualifiedName.substring( 0, qualifiedName.lastIndexOf( &quot;.&quot; ) );
        //类文件
        String fileName = target.getSimpleName() + SUFFIX;

        //eg：public class FirstActivity_ViewBinding implements Unbinder
        //构造类
        TypeSpec.Builder typeBuilder = TypeSpec.classBuilder( fileName )
                .addJavadoc( JAVA_DOC )
                .addModifiers( Modifier.PUBLIC )
                .addSuperinterface( Unbinder.class );

        //eg:private FirstActivity target;
        FieldSpec fieldSpec = FieldSpec.builder( target,&quot;target&quot;,Modifier.PRIVATE ).build();

        //field添加当前类中
        typeBuilder.addField( fieldSpec );

        //eg:@UiThread
        //  public FirstActivity_ViewBinding(FirstActivity target, View source) {
        //    this.target = target;
        //    target.helloTv = source.findViewById( R.id.helloTv );
        //  }
        //构造方法
        MethodSpec.Builder constructorBuilder = MethodSpec.constructorBuilder()
//                                    .addAnnotation( UiThread.class )
                                    .addModifiers( Modifier.PUBLIC )
                                    .addParameter( target,&quot;target&quot; )
                                    .addParameter( View.class,&quot;source&quot; );

        constructorBuilder.addStatement( &quot;this.target = target&quot; );
        constructorBuilder.addStatement( &quot;target.helloTv = source.findViewById( R.id.helloTv )&quot; );


        //构造方法添加到类中
        typeBuilder.addMethod( constructorBuilder.build() );

        //eg:@Override
        //  public void unbind() {
        //    target.helloTv = null;
        //  }
        //解绑方法
        MethodSpec.Builder unbindBuilder = MethodSpec.methodBuilder( &quot;unbind&quot; )
                .addAnnotation( Override.class )
                .addModifiers( Modifier.PUBLIC )
                .returns( void.class );

        unbindBuilder.addStatement( &quot;target.helloTv = null&quot; );

        //解绑方法添加类中
        typeBuilder.addMethod( unbindBuilder.build() );

        //创建文件 并且输出打印到到System.out
        JavaFile.builder( packageName, typeBuilder.build()).build().writeTo( System.out );
    }

}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码，亲测可用</p><p>#####从无到有手写butterKnife框架 https://github.com/yinlingchaoliu/JavaPoetDemo</p>`,11);function g(_,w){const n=r("ExternalLinkIcon");return d(),l("div",null,[i("p",null,[e("#####导航 一、"),i("a",v,[e("代码的演进"),t(n)]),e(" 二、"),i("a",o,[e("butterKnife反射调用"),t(n)]),e(" 三、"),i("a",u,[e("javapoet自动生成模板代码"),t(n)]),e(" 四、"),i("a",m,[e("apt与注解"),t(n)]),e(" 五、"),i("a",b,[e("注解支持多层继承"),t(n)]),e(" 六、"),i("a",p,[e("apt调试"),t(n)]),e(" 七、"),i("a",h,[e("javapoet语法"),t(n)])]),f])}const T=a(c,[["render",g],["__file","从无到有手写ButterKnife框架-2.html.vue"]]),y=JSON.parse('{"path":"/fe/android/%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E6%89%8B%E5%86%99ButterKnife%E6%A1%86%E6%9E%B6-2.html","title":"从无到有手写ButterKnife框架-2","lang":"zh-CN","frontmatter":{"title":"从无到有手写ButterKnife框架-2","date":"2024-03-24T11:47:50.000Z","category":["框架编写分析"],"tag":["archive"],"description":"#####导航 一、代码的演进 二、butterKnife反射调用 三、javapoet自动生成模板代码 四、apt与注解 五、注解支持多层继承 六、apt调试 七、javapoet语法 #####1、前言 javapoet解决重复模板代码编写问题 模板代码都类似，这样重复写来写去很烦 javapoet会是一阵强心剂 语法主要 @see https:/...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/fe/android/%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E6%89%8B%E5%86%99ButterKnife%E6%A1%86%E6%9E%B6-2.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"从无到有手写ButterKnife框架-2"}],["meta",{"property":"og:description","content":"#####导航 一、代码的演进 二、butterKnife反射调用 三、javapoet自动生成模板代码 四、apt与注解 五、注解支持多层继承 六、apt调试 七、javapoet语法 #####1、前言 javapoet解决重复模板代码编写问题 模板代码都类似，这样重复写来写去很烦 javapoet会是一阵强心剂 语法主要 @see https:/..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T14:17:18.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-24T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T14:17:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从无到有手写ButterKnife框架-2\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-24T11:47:50.000Z\\",\\"dateModified\\":\\"2024-03-25T14:17:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711376238000,"updatedTime":1711376238000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":1.83,"words":548},"filePathRelative":"fe/android/框架编写/从无到有手写ButterKnife框架-2.md","localizedDate":"2024年3月24日","excerpt":"<p>#####导航\\n一、<a href=\\"https://www.jianshu.com/p/a96de1aa4e29\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">代码的演进</a>\\n二、<a href=\\"https://www.jianshu.com/p/f8856e913224\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">butterKnife反射调用</a>\\n三、<a href=\\"https://www.jianshu.com/p/cdf417e52cab\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">javapoet自动生成模板代码</a>\\n四、<a href=\\"https://www.jianshu.com/p/43eb69b2beeb\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">apt与注解</a>\\n五、<a href=\\"https://www.jianshu.com/p/a91cbfb8b1a1\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">注解支持多层继承</a>\\n六、<a href=\\"https://www.jianshu.com/p/8418ef144b29\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">apt调试</a>\\n七、<a href=\\"https://www.jianshu.com/p/2da1ca9d8ffa\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">javapoet语法</a></p>","autoDesc":true}');export{T as comp,y as data};
