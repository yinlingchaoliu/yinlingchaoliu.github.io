import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CtvCwAmI.js";const p={},e=t(`<h3 id="知识扩展" tabindex="-1"><a class="header-anchor" href="#知识扩展"><span>知识扩展</span></a></h3><ul><li>基本型数组 一维数组</li><li>引用型数组 多维数组</li></ul><table><thead><tr><th>数组类</th><th>普通类</th></tr></thead><tbody><tr><td>java虚拟机运行时生成</td><td>class文件加载</td></tr><tr><td>newarray/anewarray</td><td>new创建</td></tr><tr><td>存放aload/astore</td><td>存放putfield/getfield</td></tr></tbody></table><p>arraylength读取长度</p><ul><li><p>([)+数组元素类型描述符 eg:</p></li><li><p>int[] -&gt; [I</p></li><li><p>int[][] -&gt;[[I</p></li><li><p>Object -&gt; [Ljava/lang/Object;</p></li></ul><h3 id="关键函数" tabindex="-1"><a class="header-anchor" href="#关键函数"><span>关键函数</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Object <span class="token keyword">struct</span><span class="token punctuation">{</span>
  class <span class="token operator">*</span>Class
  data  <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">//void *</span>
<span class="token punctuation">}</span>

<span class="token comment">// 新创建的实例对象需要赋初值，go默认赋了</span>
<span class="token keyword">func</span> <span class="token function">newObject</span><span class="token punctuation">(</span>class <span class="token operator">*</span>Class<span class="token punctuation">)</span> <span class="token operator">*</span>Object <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Object<span class="token punctuation">{</span>
		class<span class="token punctuation">:</span>  class<span class="token punctuation">,</span>
		data<span class="token punctuation">:</span> <span class="token function">newSlots</span><span class="token punctuation">(</span>class<span class="token punctuation">.</span>instanceSlotCount<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以int数组为例</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>array_object<span class="token punctuation">.</span><span class="token keyword">go</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Object<span class="token punctuation">)</span> <span class="token function">Ints</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int32</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int32</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//arraylength</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Object<span class="token punctuation">)</span> <span class="token function">ArrayLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int32</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> self<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int32</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token function">int32</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Not array!&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

array_class<span class="token punctuation">.</span><span class="token keyword">go</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Class<span class="token punctuation">)</span> <span class="token function">NewArray</span><span class="token punctuation">(</span>count <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token operator">*</span>Object <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>self<span class="token punctuation">.</span><span class="token function">IsArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Not array class: &quot;</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">switch</span> self<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token string">&quot;[I&quot;</span><span class="token punctuation">:</span> <span class="token comment">//int</span>
		<span class="token keyword">return</span> <span class="token operator">&amp;</span>Object<span class="token punctuation">{</span>self<span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int32</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">}</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token operator">&amp;</span>Object<span class="token punctuation">{</span>self<span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Object<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类加载器支持数组</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>class_loader<span class="token punctuation">.</span><span class="token keyword">go</span>

<span class="token comment">// 把类数据加载到方法区</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassLoader<span class="token punctuation">)</span> <span class="token function">LoadClass</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Class <span class="token punctuation">{</span>
	<span class="token keyword">if</span> class<span class="token punctuation">,</span> ok <span class="token operator">:=</span> self<span class="token punctuation">.</span>classMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> class <span class="token comment">// 类已经加载</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//数组类型</span>
	<span class="token keyword">if</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;[&#39;</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">loadArrayClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//非数组类型</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">loadNonArrayClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// 普通类的数据来自于class文件，数组类的数据是jvm在运行期间动态生成的</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassLoader<span class="token punctuation">)</span> <span class="token function">loadArrayClass</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Class <span class="token punctuation">{</span>
	class <span class="token operator">:=</span> <span class="token operator">&amp;</span>Class<span class="token punctuation">{</span>
		accessFlags<span class="token punctuation">:</span> ACC_PUBLIC<span class="token punctuation">,</span> <span class="token comment">// todo</span>
		name<span class="token punctuation">:</span>        name<span class="token punctuation">,</span>
		loader<span class="token punctuation">:</span>      self<span class="token punctuation">,</span>
		initStarted<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
		superClass<span class="token punctuation">:</span>  self<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span><span class="token string">&quot;java/lang/Object&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		interfaces<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Class<span class="token punctuation">{</span>
			self<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span><span class="token string">&quot;java/lang/Cloneable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			self<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span><span class="token string">&quot;java/io/Serializable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	self<span class="token punctuation">.</span>classMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> class
	<span class="token keyword">return</span> class
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>newarray指令</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>NEW_ARRAY<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	count <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> count <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.NegativeArraySizeException&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	classLoader <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Loader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	arrClass <span class="token operator">:=</span> <span class="token function">getPrimitiveArrayClass</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> self<span class="token punctuation">.</span>atype<span class="token punctuation">)</span>
	arr <span class="token operator">:=</span> arrClass<span class="token punctuation">.</span><span class="token function">NewArray</span><span class="token punctuation">(</span><span class="token function">uint</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>
	stack<span class="token punctuation">.</span><span class="token function">PushRef</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">getPrimitiveArrayClass</span><span class="token punctuation">(</span>loader <span class="token operator">*</span>heap<span class="token punctuation">.</span>ClassLoader<span class="token punctuation">,</span> atype <span class="token builtin">uint8</span><span class="token punctuation">)</span> <span class="token operator">*</span>heap<span class="token punctuation">.</span>Class <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> atype <span class="token punctuation">{</span>
	<span class="token keyword">case</span> AT_BOOLEAN<span class="token punctuation">:</span>
		<span class="token keyword">return</span> loader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span><span class="token string">&quot;[Z&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> AT_BYTE<span class="token punctuation">:</span>
		<span class="token keyword">return</span> loader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span><span class="token string">&quot;[B&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> AT_CHAR<span class="token punctuation">:</span>
		<span class="token keyword">return</span> loader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span><span class="token string">&quot;[C&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> AT_SHORT<span class="token punctuation">:</span>
		<span class="token keyword">return</span> loader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span><span class="token string">&quot;[S&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> AT_INT<span class="token punctuation">:</span>
		<span class="token keyword">return</span> loader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span><span class="token string">&quot;[I&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> AT_LONG<span class="token punctuation">:</span>
		<span class="token keyword">return</span> loader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span><span class="token string">&quot;[J&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> AT_FLOAT<span class="token punctuation">:</span>
		<span class="token keyword">return</span> loader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span><span class="token string">&quot;[F&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> AT_DOUBLE<span class="token punctuation">:</span>
		<span class="token keyword">return</span> loader<span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span><span class="token string">&quot;[D&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid atype!&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>符号表转换 class_name_helper.go</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>
<span class="token keyword">var</span> primitiveTypes <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
	<span class="token string">&quot;void&quot;</span><span class="token punctuation">:</span>    <span class="token string">&quot;V&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;boolean&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Z&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;byte&quot;</span><span class="token punctuation">:</span>    <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;short&quot;</span><span class="token punctuation">:</span>   <span class="token string">&quot;S&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;int&quot;</span><span class="token punctuation">:</span>     <span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;long&quot;</span><span class="token punctuation">:</span>    <span class="token string">&quot;J&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;char&quot;</span><span class="token punctuation">:</span>    <span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;float&quot;</span><span class="token punctuation">:</span>   <span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;double&quot;</span><span class="token punctuation">:</span>  <span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// [XXX -&gt; [[XXX</span>
<span class="token comment">// int -&gt; [I</span>
<span class="token comment">// XXX -&gt; [LXXX;</span>
<span class="token keyword">func</span> <span class="token function">getArrayClassName</span><span class="token punctuation">(</span>className <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;[&quot;</span> <span class="token operator">+</span> <span class="token function">toDescriptor</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// [[XXX -&gt; [XXX</span>
<span class="token comment">// [LXXX; -&gt; XXX</span>
<span class="token comment">// [I -&gt; int</span>
<span class="token keyword">func</span> <span class="token function">getComponentClassName</span><span class="token punctuation">(</span>className <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> className<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;[&#39;</span> <span class="token punctuation">{</span>
		componentTypeDescriptor <span class="token operator">:=</span> className<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
		<span class="token keyword">return</span> <span class="token function">toClassName</span><span class="token punctuation">(</span>componentTypeDescriptor<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Not array: &quot;</span> <span class="token operator">+</span> className<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// [XXX =&gt; [XXX</span>
<span class="token comment">// int  =&gt; I</span>
<span class="token comment">// XXX  =&gt; LXXX;</span>
<span class="token keyword">func</span> <span class="token function">toDescriptor</span><span class="token punctuation">(</span>className <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> className<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;[&#39;</span> <span class="token punctuation">{</span>
		<span class="token comment">// array</span>
		<span class="token keyword">return</span> className
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> d<span class="token punctuation">,</span> ok <span class="token operator">:=</span> primitiveTypes<span class="token punctuation">[</span>className<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token comment">// primitive</span>
		<span class="token keyword">return</span> d
	<span class="token punctuation">}</span>
	<span class="token comment">// object</span>
	<span class="token keyword">return</span> <span class="token string">&quot;L&quot;</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">&quot;;&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">// [XXX  =&gt; [XXX</span>
<span class="token comment">// LXXX; =&gt; XXX</span>
<span class="token comment">// I     =&gt; int</span>
<span class="token keyword">func</span> <span class="token function">toClassName</span><span class="token punctuation">(</span>descriptor <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> descriptor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;[&#39;</span> <span class="token punctuation">{</span>
		<span class="token comment">// array</span>
		<span class="token keyword">return</span> descriptor
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> descriptor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;L&#39;</span> <span class="token punctuation">{</span>
		<span class="token comment">// object</span>
		<span class="token keyword">return</span> descriptor<span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token function">len</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> className<span class="token punctuation">,</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> primitiveTypes <span class="token punctuation">{</span>
		<span class="token keyword">if</span> d <span class="token operator">==</span> descriptor <span class="token punctuation">{</span>
			<span class="token comment">// primitive</span>
			<span class="token keyword">return</span> className
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid descriptor: &quot;</span> <span class="token operator">+</span> descriptor<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>aload/astore指令</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>AALOAD<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	index <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	arrRef <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token function">checkNotNil</span><span class="token punctuation">(</span>arrRef<span class="token punctuation">)</span>
	refs <span class="token operator">:=</span> arrRef<span class="token punctuation">.</span><span class="token function">Refs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">checkIndex</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>refs<span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>
	stack<span class="token punctuation">.</span><span class="token function">PushRef</span><span class="token punctuation">(</span>refs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>AASTORE<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	ref <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	index <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	arrRef <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token function">checkNotNil</span><span class="token punctuation">(</span>arrRef<span class="token punctuation">)</span>
	refs <span class="token operator">:=</span> arrRef<span class="token punctuation">.</span><span class="token function">Refs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">checkIndex</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>refs<span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>
	refs<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> ref
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试数组" tabindex="-1"><a class="header-anchor" href="#测试数组"><span>测试数组</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run main <span class="token parameter variable">-verbose:class</span> <span class="token parameter variable">-verbose:inst</span>  <span class="token parameter variable">-test</span> <span class="token string">&quot;array&quot;</span>  <span class="token parameter variable">-cp</span> test/lib/example.jar   jvmgo.book.ch08.BubbleSortTest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="实战项目地址" tabindex="-1"><a class="header-anchor" href="#实战项目地址"><span>实战项目地址</span></a></h3><p>https://gitee.com/yinlingchaoliu/jvmgo.git</p>`,21),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","14、jvm支持数组.html.vue"]]),d=JSON.parse('{"path":"/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/14%E3%80%81jvm%E6%94%AF%E6%8C%81%E6%95%B0%E7%BB%84.html","title":"14、jvm支持数组","lang":"zh-CN","frontmatter":{"title":"14、jvm支持数组","date":"2024-04-10T06:06:06.000Z","category":["手动编写jvm虚拟机"],"tag":["jvmgo"],"description":"知识扩展 基本型数组 一维数组 引用型数组 多维数组 arraylength读取长度 ([)+数组元素类型描述符 eg: int[] -> [I int[][] ->[[I Object -> [Ljava/lang/Object; 关键函数 以int数组为例 类加载器支持数组 newarray指令 符号表转换 class_name_helper.go...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/14%E3%80%81jvm%E6%94%AF%E6%8C%81%E6%95%B0%E7%BB%84.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"14、jvm支持数组"}],["meta",{"property":"og:description","content":"知识扩展 基本型数组 一维数组 引用型数组 多维数组 arraylength读取长度 ([)+数组元素类型描述符 eg: int[] -> [I int[][] ->[[I Object -> [Ljava/lang/Object; 关键函数 以int数组为例 类加载器支持数组 newarray指令 符号表转换 class_name_helper.go..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T22:43:38.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"jvmgo"}],["meta",{"property":"article:published_time","content":"2024-04-10T06:06:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-09T22:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"14、jvm支持数组\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T06:06:06.000Z\\",\\"dateModified\\":\\"2024-04-09T22:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"知识扩展","slug":"知识扩展","link":"#知识扩展","children":[]},{"level":3,"title":"关键函数","slug":"关键函数","link":"#关键函数","children":[]},{"level":3,"title":"测试数组","slug":"测试数组","link":"#测试数组","children":[]},{"level":3,"title":"实战项目地址","slug":"实战项目地址","link":"#实战项目地址","children":[]}],"git":{"createdTime":1711376238000,"updatedTime":1712702618000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":2.2,"words":659},"filePathRelative":"basis/jvm/手动编写jvm虚拟机/14、jvm支持数组.md","localizedDate":"2024年4月10日","excerpt":"<h3>知识扩展</h3>\\n<ul>\\n<li>基本型数组  一维数组</li>\\n<li>引用型数组  多维数组</li>\\n</ul>\\n<table>\\n<thead>\\n<tr>\\n<th>数组类</th>\\n<th>普通类</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>java虚拟机运行时生成</td>\\n<td>class文件加载</td>\\n</tr>\\n<tr>\\n<td>newarray/anewarray</td>\\n<td>new创建</td>\\n</tr>\\n<tr>\\n<td>存放aload/astore</td>\\n<td>存放putfield/getfield</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{k as comp,d as data};
