import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as p,f as a}from"./app-CtvCwAmI.js";const o={},n=a("<p>###第一性原理：依赖倒置原则</p><p>通俗解释；将代码分成接口和实现两部分，在编写代码时，让系统的其他部分只依赖于接口</p><p>面向接口编程</p><p>####1、移除方法或字段 对外发布的接口，是不能移除</p><p>####2、移除或添加一个类或者接口 移除不可以，添加容许</p><p>####3、向现有继承体系中添加一个接口或者类 添加可以，向后兼容</p><p>####4、添加方法或字段 添加可以，要小心</p><p>####5、JAVA中接口和类的区别 java接口最突出特性是多继承，但真正大部分情况用不到。 选择真正的理由，对性能的最求。因为多继承可以减少对内存的占用。</p><p>####6、接口弱点背后的优点 向现有接口中添加方法，总是不太容易，向后兼容不可能，与此对立优点：应用接口的效果是不可变 定义一个不可变的契约，那么就应该用接口</p><p>####7、添加方法的另一种方案 采用final类</p><p>####8、抽象类建议不要多用 使用抽象类，不符合面向接口编程原则，存在偷懒嫌疑 特殊点：抽象类一个优势，权限访问</p><p>####9、要为增加参数做好准备 做好扩展性</p><p>####10、接口VS类 面向接口编程，接口并非指java中interface，而是指抽象内容</p>",13),r=[n];function c(i,E){return e(),p("div",null,r)}const A=t(o,[["render",c],["__file","第6章-面向接口而非实现进行编程.html.vue"]]),l=JSON.parse('{"path":"/basis/architect/%E8%BD%AF%E4%BB%B6%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E8%89%BA%E6%9C%AF/%E7%AC%AC6%E7%AB%A0-%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E8%80%8C%E9%9D%9E%E5%AE%9E%E7%8E%B0%E8%BF%9B%E8%A1%8C%E7%BC%96%E7%A8%8B.html","title":"第6章-面向接口而非实现进行编程","lang":"zh-CN","frontmatter":{"title":"第6章-面向接口而非实现进行编程","date":"2024-03-24T11:47:50.000Z","category":["软件框架设计艺术"],"tag":["archive"],"description":"###第一性原理：依赖倒置原则 通俗解释；将代码分成接口和实现两部分，在编写代码时，让系统的其他部分只依赖于接口 面向接口编程 ####1、移除方法或字段 对外发布的接口，是不能移除 ####2、移除或添加一个类或者接口 移除不可以，添加容许 ####3、向现有继承体系中添加一个接口或者类 添加可以，向后兼容 ####4、添加方法或字段 添加可以，要小...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/architect/%E8%BD%AF%E4%BB%B6%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E8%89%BA%E6%9C%AF/%E7%AC%AC6%E7%AB%A0-%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E8%80%8C%E9%9D%9E%E5%AE%9E%E7%8E%B0%E8%BF%9B%E8%A1%8C%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"第6章-面向接口而非实现进行编程"}],["meta",{"property":"og:description","content":"###第一性原理：依赖倒置原则 通俗解释；将代码分成接口和实现两部分，在编写代码时，让系统的其他部分只依赖于接口 面向接口编程 ####1、移除方法或字段 对外发布的接口，是不能移除 ####2、移除或添加一个类或者接口 移除不可以，添加容许 ####3、向现有继承体系中添加一个接口或者类 添加可以，向后兼容 ####4、添加方法或字段 添加可以，要小..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T14:17:18.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-24T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T14:17:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第6章-面向接口而非实现进行编程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-24T11:47:50.000Z\\",\\"dateModified\\":\\"2024-03-25T14:17:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711376238000,"updatedTime":1711376238000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":1.34,"words":403},"filePathRelative":"basis/architect/软件框架设计艺术/第6章-面向接口而非实现进行编程.md","localizedDate":"2024年3月24日","excerpt":"<p>###第一性原理：依赖倒置原则</p>\\n<p>通俗解释；将代码分成接口和实现两部分，在编写代码时，让系统的其他部分只依赖于接口</p>\\n<p>面向接口编程</p>\\n<p>####1、移除方法或字段\\n对外发布的接口，是不能移除</p>\\n<p>####2、移除或添加一个类或者接口\\n移除不可以，添加容许</p>\\n<p>####3、向现有继承体系中添加一个接口或者类\\n添加可以，向后兼容</p>\\n<p>####4、添加方法或字段\\n添加可以，要小心</p>\\n<p>####5、JAVA中接口和类的区别\\njava接口最突出特性是多继承，但真正大部分情况用不到。\\n选择真正的理由，对性能的最求。因为多继承可以减少对内存的占用。</p>","autoDesc":true}');export{A as comp,l as data};
