import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CtvCwAmI.js";const p={},e=t(`<h3 id="本地方法注册与调用" tabindex="-1"><a class="header-anchor" href="#本地方法注册与调用"><span>本地方法注册与调用</span></a></h3><p>注册</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//本地方法定义为函数</span>
<span class="token keyword">type</span> NativeMethod <span class="token keyword">func</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span>

<span class="token comment">//定义函数数组</span>
<span class="token keyword">var</span> registry <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>NativeMethod<span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">//空方法</span>
<span class="token keyword">func</span> <span class="token function">emptyNativeMethod</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// do nothing</span>
<span class="token punctuation">}</span>

<span class="token comment">//注册本地方法</span>
<span class="token keyword">func</span> <span class="token function">Register</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> methodDescriptor <span class="token builtin">string</span><span class="token punctuation">,</span> method NativeMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	key <span class="token operator">:=</span> className <span class="token operator">+</span> <span class="token string">&quot;~&quot;</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">&quot;~&quot;</span> <span class="token operator">+</span> methodDescriptor
	registry<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> method
<span class="token punctuation">}</span>

<span class="token comment">//寻找注册方法</span>
<span class="token keyword">func</span> <span class="token function">FindNativeMethod</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> methodDescriptor <span class="token builtin">string</span><span class="token punctuation">)</span> NativeMethod <span class="token punctuation">{</span>
	key <span class="token operator">:=</span> className <span class="token operator">+</span> <span class="token string">&quot;~&quot;</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">&quot;~&quot;</span> <span class="token operator">+</span> methodDescriptor
	<span class="token keyword">if</span> method<span class="token punctuation">,</span> ok <span class="token operator">:=</span> registry<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> method
	<span class="token punctuation">}</span>

	<span class="token comment">//如果是 object中 registerNatives 返回空方法，且此方法不会注册到registry中</span>
	<span class="token keyword">if</span> methodDescriptor <span class="token operator">==</span> <span class="token string">&quot;()V&quot;</span> <span class="token operator">&amp;&amp;</span> methodName <span class="token operator">==</span> <span class="token string">&quot;registerNatives&quot;</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> emptyNativeMethod
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>invoke_native指令</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>INVOKE_NATIVE<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	method <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	className <span class="token operator">:=</span> method<span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	methodName <span class="token operator">:=</span> method<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	methodDescriptor <span class="token operator">:=</span> method<span class="token punctuation">.</span><span class="token function">Descriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	nativeMethod <span class="token operator">:=</span> native<span class="token punctuation">.</span><span class="token function">FindNativeMethod</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> methodDescriptor<span class="token punctuation">)</span>
	<span class="token keyword">if</span> nativeMethod <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		methodInfo <span class="token operator">:=</span> className <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> methodDescriptor
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.UnsatisfiedLinkError: &quot;</span> <span class="token operator">+</span> methodInfo<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token function">nativeMethod</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用本地方法</p><p>method.go</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newMethod</span><span class="token punctuation">(</span>class <span class="token operator">*</span>Class<span class="token punctuation">,</span> cfMethod <span class="token operator">*</span>classfile<span class="token punctuation">.</span>MemberInfo<span class="token punctuation">)</span> <span class="token operator">*</span>Method <span class="token punctuation">{</span>
	method <span class="token operator">:=</span> <span class="token operator">&amp;</span>Method<span class="token punctuation">{</span><span class="token punctuation">}</span>
	method<span class="token punctuation">.</span>class <span class="token operator">=</span> class
	method<span class="token punctuation">.</span><span class="token function">copyMemberInfo</span><span class="token punctuation">(</span>cfMethod<span class="token punctuation">)</span>
	method<span class="token punctuation">.</span><span class="token function">copyAttributes</span><span class="token punctuation">(</span>cfMethod<span class="token punctuation">)</span>
	<span class="token comment">//method.calArgSlotCount() //参数</span>
	md <span class="token operator">:=</span> <span class="token function">parseMethodDescriptor</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span>descriptor<span class="token punctuation">)</span>
	method<span class="token punctuation">.</span><span class="token function">calcArgSlotCount</span><span class="token punctuation">(</span>md<span class="token punctuation">.</span>parameterTypes<span class="token punctuation">)</span>
	<span class="token keyword">if</span> method<span class="token punctuation">.</span><span class="token function">IsNative</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//方法字节码表插入Code</span>
		method<span class="token punctuation">.</span><span class="token function">injectCodeAttribute</span><span class="token punctuation">(</span>md<span class="token punctuation">.</span>returnType<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> method
<span class="token punctuation">}</span>

<span class="token comment">//0xfe 对应助记符指令 invoke_native</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Method<span class="token punctuation">)</span> <span class="token function">injectCodeAttribute</span><span class="token punctuation">(</span>returnType <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	self<span class="token punctuation">.</span>maxStack <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment">// todo</span>
	self<span class="token punctuation">.</span>maxLocals <span class="token operator">=</span> self<span class="token punctuation">.</span>argSlotCount
	<span class="token keyword">switch</span> returnType<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token char">&#39;V&#39;</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xb1</span><span class="token punctuation">}</span> <span class="token comment">// return</span>
	<span class="token keyword">case</span> <span class="token char">&#39;L&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;[&#39;</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xb0</span><span class="token punctuation">}</span> <span class="token comment">// areturn</span>
	<span class="token keyword">case</span> <span class="token char">&#39;D&#39;</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xaf</span><span class="token punctuation">}</span> <span class="token comment">// dreturn</span>
	<span class="token keyword">case</span> <span class="token char">&#39;F&#39;</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xae</span><span class="token punctuation">}</span> <span class="token comment">// freturn</span>
	<span class="token keyword">case</span> <span class="token char">&#39;J&#39;</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xad</span><span class="token punctuation">}</span> <span class="token comment">// lreturn</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xac</span><span class="token punctuation">}</span> <span class="token comment">// ireturn</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加native类" tabindex="-1"><a class="header-anchor" href="#添加native类"><span>添加native类</span></a></h3><p>native/java/lang/Object.go</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> lang

<span class="token keyword">import</span> <span class="token string">&quot;unsafe&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;main/native&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;main/rtda&quot;</span>

<span class="token keyword">const</span> jlObject <span class="token operator">=</span> <span class="token string">&quot;java/lang/Object&quot;</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	native<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>jlObject<span class="token punctuation">,</span> <span class="token string">&quot;getClass&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()Ljava/lang/Class;&quot;</span><span class="token punctuation">,</span> getClass<span class="token punctuation">)</span>
	native<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>jlObject<span class="token punctuation">,</span> <span class="token string">&quot;hashCode&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()I&quot;</span><span class="token punctuation">,</span> hashCode<span class="token punctuation">)</span>
	native<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>jlObject<span class="token punctuation">,</span> <span class="token string">&quot;clone&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()Ljava/lang/Object;&quot;</span><span class="token punctuation">,</span> clone<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// public final native Class&lt;?&gt; getClass();</span>
<span class="token comment">// ()Ljava/lang/Class;</span>
<span class="token keyword">func</span> <span class="token function">getClass</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	this <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">LocalVars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	class <span class="token operator">:=</span> this<span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">JClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PushRef</span><span class="token punctuation">(</span>class<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// public native int hashCode();</span>
<span class="token comment">// ()I</span>
<span class="token keyword">func</span> <span class="token function">hashCode</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	this <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">LocalVars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	hash <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// protected native Object clone() throws CloneNotSupportedException;</span>
<span class="token comment">// ()Ljava/lang/Object;</span>
<span class="token keyword">func</span> <span class="token function">clone</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	this <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">LocalVars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	cloneable <span class="token operator">:=</span> this<span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Loader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">LoadClass</span><span class="token punctuation">(</span><span class="token string">&quot;java/lang/Cloneable&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>this<span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsImplements</span><span class="token punctuation">(</span>cloneable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.CloneNotSupportedException&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PushRef</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在invoke_native中注册</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//todo 非常重要</span>
	<span class="token boolean">_</span> <span class="token string">&quot;main/native/java/lang&quot;</span> <span class="token comment">//@todo init 注册</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试方法" tabindex="-1"><a class="header-anchor" href="#测试方法"><span>测试方法</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#测试本地方法调用</span>
go run main    <span class="token parameter variable">-cp</span> test/lib/example.jar   jvmgo.book.ch09.GetClassTest
go run main    <span class="token parameter variable">-cp</span> test/lib/example.jar   jvmgo.book.ch09.StringTest
go run main    <span class="token parameter variable">-cp</span> test/lib/example.jar   jvmgo.book.ch09.ObjectTest
go run main    <span class="token parameter variable">-cp</span> test/lib/example.jar   jvmgo.book.ch09.CloneTest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实战项目地址" tabindex="-1"><a class="header-anchor" href="#实战项目地址"><span>实战项目地址</span></a></h3><p>https://gitee.com/yinlingchaoliu/jvmgo.git</p><p>提交标签 &quot;native&quot;</p>`,18),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","16、本地方法调用.html.vue"]]),d=JSON.parse('{"path":"/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/16%E3%80%81%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8.html","title":"16、本地方法调用","lang":"zh-CN","frontmatter":{"title":"16、本地方法调用","date":"2024-04-10T06:06:06.000Z","category":["手动编写jvm虚拟机"],"tag":["jvmgo"],"description":"本地方法注册与调用 注册 invoke_native指令 调用本地方法 method.go 添加native类 native/java/lang/Object.go 在invoke_native中注册 测试方法 实战项目地址 https://gitee.com/yinlingchaoliu/jvmgo.git 提交标签 \\"native\\"","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/16%E3%80%81%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"16、本地方法调用"}],["meta",{"property":"og:description","content":"本地方法注册与调用 注册 invoke_native指令 调用本地方法 method.go 添加native类 native/java/lang/Object.go 在invoke_native中注册 测试方法 实战项目地址 https://gitee.com/yinlingchaoliu/jvmgo.git 提交标签 \\"native\\""}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T22:43:38.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"jvmgo"}],["meta",{"property":"article:published_time","content":"2024-04-10T06:06:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-09T22:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"16、本地方法调用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T06:06:06.000Z\\",\\"dateModified\\":\\"2024-04-09T22:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"本地方法注册与调用","slug":"本地方法注册与调用","link":"#本地方法注册与调用","children":[]},{"level":3,"title":"添加native类","slug":"添加native类","link":"#添加native类","children":[]},{"level":3,"title":"测试方法","slug":"测试方法","link":"#测试方法","children":[]},{"level":3,"title":"实战项目地址","slug":"实战项目地址","link":"#实战项目地址","children":[]}],"git":{"createdTime":1711376238000,"updatedTime":1712702618000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":1.62,"words":486},"filePathRelative":"basis/jvm/手动编写jvm虚拟机/16、本地方法调用.md","localizedDate":"2024年4月10日","excerpt":"<h3>本地方法注册与调用</h3>\\n<p>注册</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token comment\\">//本地方法定义为函数</span>\\n<span class=\\"token keyword\\">type</span> NativeMethod <span class=\\"token keyword\\">func</span><span class=\\"token punctuation\\">(</span>frame <span class=\\"token operator\\">*</span>rtda<span class=\\"token punctuation\\">.</span>Frame<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">//定义函数数组</span>\\n<span class=\\"token keyword\\">var</span> registry <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">map</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">]</span>NativeMethod<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//空方法</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">emptyNativeMethod</span><span class=\\"token punctuation\\">(</span>frame <span class=\\"token operator\\">*</span>rtda<span class=\\"token punctuation\\">.</span>Frame<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">// do nothing</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//注册本地方法</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">Register</span><span class=\\"token punctuation\\">(</span>className<span class=\\"token punctuation\\">,</span> methodName<span class=\\"token punctuation\\">,</span> methodDescriptor <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> method NativeMethod<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\tkey <span class=\\"token operator\\">:=</span> className <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"~\\"</span> <span class=\\"token operator\\">+</span> methodName <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"~\\"</span> <span class=\\"token operator\\">+</span> methodDescriptor\\n\\tregistry<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> method\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//寻找注册方法</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">FindNativeMethod</span><span class=\\"token punctuation\\">(</span>className<span class=\\"token punctuation\\">,</span> methodName<span class=\\"token punctuation\\">,</span> methodDescriptor <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> NativeMethod <span class=\\"token punctuation\\">{</span>\\n\\tkey <span class=\\"token operator\\">:=</span> className <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"~\\"</span> <span class=\\"token operator\\">+</span> methodName <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"~\\"</span> <span class=\\"token operator\\">+</span> methodDescriptor\\n\\t<span class=\\"token keyword\\">if</span> method<span class=\\"token punctuation\\">,</span> ok <span class=\\"token operator\\">:=</span> registry<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span> ok <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> method\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token comment\\">//如果是 object中 registerNatives 返回空方法，且此方法不会注册到registry中</span>\\n\\t<span class=\\"token keyword\\">if</span> methodDescriptor <span class=\\"token operator\\">==</span> <span class=\\"token string\\">\\"()V\\"</span> <span class=\\"token operator\\">&amp;&amp;</span> methodName <span class=\\"token operator\\">==</span> <span class=\\"token string\\">\\"registerNatives\\"</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> emptyNativeMethod\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">nil</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
