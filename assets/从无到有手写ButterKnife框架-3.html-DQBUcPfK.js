import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as d,c as r,a as n,b as e,d as l,f as a}from"./app-CtvCwAmI.js";const v={},c={href:"https://www.jianshu.com/p/a96de1aa4e29",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.jianshu.com/p/f8856e913224",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.jianshu.com/p/cdf417e52cab",target:"_blank",rel:"noopener noreferrer"},o={href:"https://www.jianshu.com/p/43eb69b2beeb",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.jianshu.com/p/a91cbfb8b1a1",target:"_blank",rel:"noopener noreferrer"},p={href:"https://www.jianshu.com/p/8418ef144b29",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.jianshu.com/p/2da1ca9d8ffa",target:"_blank",rel:"noopener noreferrer"},h={href:"https://docs.oracle.com/javase/6/docs/technotes/guides/apt/index.html",target:"_blank",rel:"noopener noreferrer"},E=a(`<p>注解有三种【SOURCE，RUNTIME, CLASS】源码，运行时，编译，其中编译期效率最高的。</p><p>解决问题：通过注解，动态生成模板代码</p><p>#####apt与javapoet联动</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>1、抽象模板关键参数（只关注参数）
2、定义注解传入关键参数
3、引入apt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>1、抽象模板参数</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/**
 * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY CHENTONG.
 */
public class FirstActivity_ViewBinding implements Unbinder {
  private FirstActivity target;

  @UiThread
  public FirstActivity_ViewBinding(FirstActivity target, View source) {
    this.target = target;
    target.helloTv = source.findViewById( R.id.helloTv );
  }

  @Override
  public void unbind() {
    target.helloTv = null;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个类中核心的一句话 target.helloTv = source.findViewById( R.id.helloTv ); 因为获得注解的同时，就会获得当前元素(Type,Field,Method),所以helloTv,这个field不用关注 关键参数就是元素ResId。</p><ul><li>2 定义注解</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>eg： @ViewId(R.id.helloTv)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1、新建module 选择选择java library ，工程名poet-annotation 2、新建注解 ViewId</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@Retention(CLASS) @Target(FIELD)
public @interface ViewId {
    /** View ID to which the field will be bound. */
    @IdRes int value();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>3、apt 新建module 命名为poet-compiler 其中编写的时候，要注意包 javax.annotation.processing javax.lang.model 方法用法</li></ul><p>base类 方便后续开发</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public abstract class BaseProcessor extends AbstractProcessor {

    protected Filer mFiler; //输出位置
    protected Logger logger;
    protected Types types;
    protected Elements elementUtils;

    // Module name, maybe its &#39;app&#39; or others
    protected String moduleName = null;
    protected Map&lt;String, String&gt; options = null;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init( processingEnv );
        mFiler = processingEnv.getFiler();
        types = processingEnv.getTypeUtils();
        elementUtils = processingEnv.getElementUtils();
        logger = new Logger( processingEnv.getMessager() );
        options = processingEnv.getOptions();
        if (MapUtils.isNotEmpty( options )) {
            moduleName = options.get( KEY_MODULE_NAME );
        }
        if (StringUtils.isNotEmpty( moduleName )) {
            logger.info( &quot;The user has configuration the module name, it was [&quot; + moduleName + &quot;]&quot; );
        } else {
            logger.error( NO_MODULE_NAME_TIPS );
        }
    }

    //判断当前是不是activity类
    public boolean isActivity(TypeElement typeElement){
        TypeMirror activityTm = elementUtils.getTypeElement(Consts.ACTIVITY).asType();
        if (types.isSubtype(typeElement.asType(),activityTm )) return true;
        return false;
    }

    //判断当前类是fragment
    public boolean isFragment(TypeElement typeElement){
        TypeMirror fragmentTm = elementUtils.getTypeElement(Consts.FRAGMENT).asType();
        TypeMirror fragmentTmV4 = elementUtils.getTypeElement(Consts.FRAGMENT_V4).asType();
        if (types.isSubtype(typeElement.asType(),fragmentTm )
                || types.isSubtype(typeElement.asType(),fragmentTmV4 )){
            return true;
        }
        return false;
    }

    @Override
    public Set&lt;String&gt; getSupportedOptions() {
        return new HashSet&lt;String&gt;() {{
            this.add( KEY_MODULE_NAME );
        }};
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解生成代码类</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@AutoService(Processor.class)
public class ViewIdProcessor extends BaseProcessor {

    private Map&lt;TypeElement, List&lt;Element&gt;&gt; parentAndChild = new HashMap&lt;&gt;();  //包含父类的注解

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init( processingEnv );
        logger.info(&quot;&gt;&gt;&gt; ViewIdProcessor init. &lt;&lt;&lt;&quot;);
    }

    @Override
    public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) {

        if (CollectionUtils.isNotEmpty( annotations )){

            Set&lt;? extends Element&gt; viewIdElements = roundEnv.getElementsAnnotatedWith(ViewId.class);
            try {
                categories( viewIdElements );

                //支持多层注解 field字段去重  不需要注释掉即可
                supportSuperAnnotation();

                gennerateHelper();
            } catch (Exception e) {
                logger.error( e );
            }

            return true;
        }
        return false;
    }

    //自动生成代码
    private void gennerateHelper() throws IOException {
        //根据类路径获得类型
        TypeElement type_unbinder = elementUtils.getTypeElement(Consts.UNBINDER);

        //用于判断当前类类型
        TypeMirror viewTm =  elementUtils.getTypeElement( Consts.VIEW ).asType();

        TypeElement uiThreadType =  elementUtils.getTypeElement( Consts.UI_THREAD );

        if (MapUtils.isNotEmpty( parentAndChild )){

            for (Map.Entry&lt;TypeElement, List&lt;Element&gt;&gt; entry : parentAndChild.entrySet()){
                TypeElement typeElement = entry.getKey();
                List&lt;Element&gt; elementList = entry.getValue();

                //类全路径
                String qualifiedName = typeElement.getQualifiedName().toString();
                //包名
                String packageName = qualifiedName.substring(0, qualifiedName.lastIndexOf(&quot;.&quot;));
                //类文件
                String fileName = typeElement.getSimpleName() + SUFFIX;

                //新建类Target_ViewBinding
                TypeSpec.Builder targetClassType = TypeSpec.classBuilder( fileName )
                        .addModifiers( Modifier.PUBLIC)
                        .addJavadoc( WARNING_TIPS )
                        .addSuperinterface( ClassName.get(type_unbinder.asType()) ); //实现接口

                //新建field target字段
                FieldSpec targetField = FieldSpec.builder(TypeName.get( typeElement.asType() ),&quot;target&quot;,Modifier.PRIVATE)
                        .build();

                //target类增加一行field
                targetClassType.addField( targetField );


                //新建构造方法Target_ViewBinding(Target target,View source)
                MethodSpec.Builder constructorBuilder = MethodSpec.constructorBuilder()
                        .addAnnotation( ClassName.get( uiThreadType ) )
                        .addModifiers( Modifier.PUBLIC )
                        .addParameter( TypeName.get( typeElement.asType() ),&quot;target&quot; )
                        .addParameter( TypeName.get( viewTm ),&quot;source&quot; )
                        .addStatement( &quot;this.target = target&quot; );

                for (Element element :elementList){

                    //获取控件ID
                    ViewId viewIdAnnotation = element.getAnnotation( ViewId.class );
                    int viewId = viewIdAnnotation.value();

                    //获取当前field字段
                    String fieldName = element.getSimpleName().toString();
                    constructorBuilder.addStatement( &quot;target.&quot;+fieldName + &quot; = source.findViewById( $L )&quot; ,viewId);
                }

                //创建构造方法
                MethodSpec  constructor = constructorBuilder.build();

                //target类增加构造方法
                targetClassType.addMethod( constructor );

                //新建方法 unbind
                MethodSpec.Builder unbindBuilder = MethodSpec.methodBuilder(&quot;unbind&quot;)
                        .addAnnotation( Override.class )
                        .addModifiers( Modifier.PUBLIC )
                        .returns( void.class );

                for (Element element :elementList){
                    String fieldName = element.getSimpleName().toString();
                    unbindBuilder.addStatement( &quot;target.&quot;+fieldName+&quot; = null&quot; );
                }
                //创建释放方法
                MethodSpec unbinder = unbindBuilder.build();

                //target类增加释放方法
                targetClassType.addMethod( unbinder );

                //创建target类
                TypeSpec targetType = targetClassType.build();

                //写类
                JavaFile.builder(packageName, targetType).build().writeTo(mFiler);
                //打印
                JavaFile.builder(packageName, targetType).build().writeTo(System.out);
            }

        }
    }

    /**
     *
     * @param elements
     * @throws IllegalAccessException
     *  当前类type元素和当前类元素的列表
     */
    private void categories(Set&lt;? extends Element&gt; elements) throws IllegalAccessException {
        if (CollectionUtils.isNotEmpty(elements)) {
            for (Element element : elements) {
                //获得当前元素的TypeElement
                TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();

                if (element.getModifiers().contains(Modifier.PRIVATE)) {
                    throw new IllegalAccessException(&quot;The inject fields CAN NOT BE &#39;private&#39;!!! please check field [&quot;
                            + element.getSimpleName() + &quot;] in class [&quot; + enclosingElement.getQualifiedName() + &quot;]&quot;);
                }

                if (parentAndChild.containsKey(enclosingElement)) { // Has categries
                    parentAndChild.get(enclosingElement).add(element);
                } else {
                    List&lt;Element&gt; childs = new ArrayList&lt;&gt;();
                    childs.add(element);
                    parentAndChild.put(enclosingElement, childs);
                }
            }

            logger.info(&quot;categories finished.&quot;);
        }
    }

    /**
     * Field元素 注解支持多层继承
     * 未做算法优化，仅做测试
     */
    private void supportSuperAnnotation(){
        TreeUtils tree = new TreeUtils( );
        parentAndChild = tree.supportSuperAnnotation( parentAndChild );
    }

    //建议这种写法,减少改字符串
    @Override
    public Set&lt;String&gt; getSupportedAnnotationTypes() {
        return new HashSet&lt;String&gt;() {{
            this.add( ViewId.class.getName() );
        }};
    }

}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>#####从无到有手写butterKnife框架 https://github.com/yinlingchaoliu/JavaPoetDemo</p><p>具体参考 https://cloud.tencent.com/developer/article/1006210</p>`,18);function f(y,T){const i=s("ExternalLinkIcon");return d(),r("div",null,[n("p",null,[e("#####导航 一、"),n("a",c,[e("代码的演进"),l(i)]),e(" 二、"),n("a",u,[e("butterKnife反射调用"),l(i)]),e(" 三、"),n("a",m,[e("javapoet自动生成模板代码"),l(i)]),e(" 四、"),n("a",o,[e("apt与注解"),l(i)]),e(" 五、"),n("a",b,[e("注解支持多层继承"),l(i)]),e(" 六、"),n("a",p,[e("apt调试"),l(i)]),e(" 七、"),n("a",g,[e("javapoet语法"),l(i)])]),n("p",null,[e("#####1、前言 "),n("a",h,[e("Annotation Processing Tool (apt)"),l(i)]),e("是编译期处理注解的工具")]),E])}const _=t(v,[["render",f],["__file","从无到有手写ButterKnife框架-3.html.vue"]]),N=JSON.parse('{"path":"/fe/android/%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E6%89%8B%E5%86%99ButterKnife%E6%A1%86%E6%9E%B6-3.html","title":"从无到有手写ButterKnife框架-3","lang":"zh-CN","frontmatter":{"title":"从无到有手写ButterKnife框架-3","date":"2024-03-24T11:47:50.000Z","category":["框架编写分析"],"tag":["archive"],"description":"#####导航 一、代码的演进 二、butterKnife反射调用 三、javapoet自动生成模板代码 四、apt与注解 五、注解支持多层继承 六、apt调试 七、javapoet语法 #####1、前言 Annotation Processing Tool (apt)是编译期处理注解的工具 注解有三种【SOURCE，RUNTIME, CLASS】源...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/fe/android/%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E6%89%8B%E5%86%99ButterKnife%E6%A1%86%E6%9E%B6-3.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"从无到有手写ButterKnife框架-3"}],["meta",{"property":"og:description","content":"#####导航 一、代码的演进 二、butterKnife反射调用 三、javapoet自动生成模板代码 四、apt与注解 五、注解支持多层继承 六、apt调试 七、javapoet语法 #####1、前言 Annotation Processing Tool (apt)是编译期处理注解的工具 注解有三种【SOURCE，RUNTIME, CLASS】源..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T14:17:18.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-24T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T14:17:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从无到有手写ButterKnife框架-3\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-24T11:47:50.000Z\\",\\"dateModified\\":\\"2024-03-25T14:17:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711376238000,"updatedTime":1711376238000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":3.62,"words":1085},"filePathRelative":"fe/android/框架编写/从无到有手写ButterKnife框架-3.md","localizedDate":"2024年3月24日","excerpt":"<p>#####导航\\n一、<a href=\\"https://www.jianshu.com/p/a96de1aa4e29\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">代码的演进</a>\\n二、<a href=\\"https://www.jianshu.com/p/f8856e913224\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">butterKnife反射调用</a>\\n三、<a href=\\"https://www.jianshu.com/p/cdf417e52cab\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">javapoet自动生成模板代码</a>\\n四、<a href=\\"https://www.jianshu.com/p/43eb69b2beeb\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">apt与注解</a>\\n五、<a href=\\"https://www.jianshu.com/p/a91cbfb8b1a1\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">注解支持多层继承</a>\\n六、<a href=\\"https://www.jianshu.com/p/8418ef144b29\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">apt调试</a>\\n七、<a href=\\"https://www.jianshu.com/p/2da1ca9d8ffa\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">javapoet语法</a></p>","autoDesc":true}');export{_ as comp,N as data};
