import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CtvCwAmI.js";const e="/assets/binder_layout-CJZjgSug.png",p="/assets/binder_bc_br-B9wM7F0_.png",o="/assets/binder_rw-BrTRGxKM.png",c="/assets/binder_copy-CKL0d4xF.png",i="/assets/binder_driver-yCmEZNc2.png",l={},r=t('<h3 id="驱动分层" tabindex="-1"><a class="header-anchor" href="#驱动分层"><span>驱动分层</span></a></h3><figure><img src="'+e+'" alt="驱动协议分层" tabindex="0" loading="lazy"><figcaption>驱动协议分层</figcaption></figure><p>业务层: demo()便是Client端和Server共同协商好的统一方法 IPC层: handle、RPC数据、代码、协议 内核层: Binder Driver</p><h3 id="binder通信过程" tabindex="-1"><a class="header-anchor" href="#binder通信过程"><span>Binder通信过程</span></a></h3><figure><img src="'+p+'" alt="Binder通信协议" tabindex="0" loading="lazy"><figcaption>Binder通信协议</figcaption></figure><p>Binder协议</p><ul><li>BINDER_COMMAND_PROTOCOL：binder请求码，以”BC_“开头，简称BC码，用于从IPC层传递到Binder Driver层；</li><li>BINDER_RETURN_PROTOCOL ：binder响应码，以”BR_“开头，简称BR码，用于从Binder Driver层传递到IPC层；</li></ul><p>Binder IPC通信进程的交互：</p><ul><li>client进程执行binder_thread_write，根据BC_XXX命令，生成相应的binder_work；</li><li>server进程执行binder_thread_read，根据binder_work.type类型，生成BR_XXX，发送到用户空间处理。</li></ul><figure><img src="'+o+'" alt="通信过程" tabindex="0" loading="lazy"><figcaption>通信过程</figcaption></figure><h3 id="一次拷贝" tabindex="-1"><a class="header-anchor" href="#一次拷贝"><span>一次拷贝</span></a></h3><figure><img src="'+c+`" alt="一次拷贝" tabindex="0" loading="lazy"><figcaption>一次拷贝</figcaption></figure><h3 id="核心方法" tabindex="-1"><a class="header-anchor" href="#核心方法"><span>核心方法</span></a></h3><p>binder_thread_write</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">binder_thread_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>ptr <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> thread<span class="token operator">-&gt;</span>return_error <span class="token operator">==</span> BR_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">get_user</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> __user <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span>；<span class="token comment">//获取IPC数据中的Binder协议(BC码)</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> BC_INCREFS<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">case</span> BC_ACQUIRE<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">case</span> BC_RELEASE<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">case</span> BC_DECREFS<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">case</span> BC_INCREFS_DONE<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">case</span> BC_ACQUIRE_DONE<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">case</span> BC_FREE_BUFFER<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            
            <span class="token keyword">case</span> BC_TRANSACTION<span class="token operator">:</span>
            <span class="token keyword">case</span> BC_REPLY<span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token keyword">struct</span> <span class="token class-name">binder_transaction_data</span> tr<span class="token punctuation">;</span>
                <span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tr<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">)</span>； <span class="token comment">//拷贝用户空间tr到内核</span>
                <span class="token comment">//创建事务</span>
                <span class="token function">binder_transaction</span><span class="token punctuation">(</span>proc<span class="token punctuation">,</span> thread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tr<span class="token punctuation">,</span> cmd <span class="token operator">==</span> BC_REPLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>

            <span class="token keyword">case</span> BC_REGISTER_LOOPER<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">case</span> BC_ENTER_LOOPER<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">case</span> BC_EXIT_LOOPER<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">case</span> BC_REQUEST_DEATH_NOTIFICATION<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">case</span> BC_CLEAR_DEATH_NOTIFICATION<span class="token operator">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">case</span> BC_DEAD_BINDER_DONE<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>binder_transaction</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">binder_transaction</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">binder_proc</span> <span class="token operator">*</span>proc<span class="token punctuation">,</span>
               <span class="token keyword">struct</span> <span class="token class-name">binder_thread</span> <span class="token operator">*</span>thread<span class="token punctuation">,</span>
               <span class="token keyword">struct</span> <span class="token class-name">binder_transaction_data</span> <span class="token operator">*</span>tr<span class="token punctuation">,</span> <span class="token keyword">int</span> reply<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//根据各种判定，获取以下信息：</span>
    <span class="token keyword">struct</span> <span class="token class-name">binder_thread</span> <span class="token operator">*</span>target_thread； <span class="token comment">//目标线程</span>
    <span class="token keyword">struct</span> <span class="token class-name">binder_proc</span> <span class="token operator">*</span>target_proc；    <span class="token comment">//目标进程</span>
    <span class="token keyword">struct</span> <span class="token class-name">binder_node</span> <span class="token operator">*</span>target_node；    <span class="token comment">//目标binder节点</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>target_list；      <span class="token comment">//目标TODO队列</span>
    <span class="token class-name">wait_queue_head_t</span> <span class="token operator">*</span>target_wait；     <span class="token comment">//目标等待队列</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    
    <span class="token comment">//分配两个结构体内存</span>
    <span class="token keyword">struct</span> <span class="token class-name">binder_transaction</span> <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">binder_work</span> <span class="token operator">*</span>tcomplete <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>tcomplete<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//从target_proc分配一块buffer【见小节3.2】</span>
    t<span class="token operator">-&gt;</span>buffer <span class="token operator">=</span> <span class="token function">binder_alloc_buf</span><span class="token punctuation">(</span>target_proc<span class="token punctuation">,</span> tr<span class="token operator">-&gt;</span>data_size<span class="token punctuation">,</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> offp <span class="token operator">&lt;</span> off_end<span class="token punctuation">;</span> offp<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>fp<span class="token operator">-&gt;</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> BINDER_TYPE_BINDER<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">case</span> BINDER_TYPE_WEAK_BINDER<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">case</span> BINDER_TYPE_HANDLE<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">case</span> BINDER_TYPE_WEAK_HANDLE<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">case</span> BINDER_TYPE_FD<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//向目标进程的target_list添加BINDER_WORK_TRANSACTION事务</span>
    t<span class="token operator">-&gt;</span>work<span class="token punctuation">.</span>type <span class="token operator">=</span> BINDER_WORK_TRANSACTION<span class="token punctuation">;</span>
    <span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token operator">-&gt;</span>work<span class="token punctuation">.</span>entry<span class="token punctuation">,</span> target_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//向当前线程的todo队列添加BINDER_WORK_TRANSACTION_COMPLETE事务</span>
    tcomplete<span class="token operator">-&gt;</span>type <span class="token operator">=</span> BINDER_WORK_TRANSACTION_COMPLETE<span class="token punctuation">;</span>
    <span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tcomplete<span class="token operator">-&gt;</span>entry<span class="token punctuation">,</span> <span class="token operator">&amp;</span>thread<span class="token operator">-&gt;</span>todo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target_wait<span class="token punctuation">)</span>
        <span class="token function">wake_up_interruptible</span><span class="token punctuation">(</span>target_wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>binder_thread_read</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>binder_thread_read（）<span class="token punctuation">{</span>
    wait_for_proc_work <span class="token operator">=</span> thread<span class="token operator">-&gt;</span>transaction_stack <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span>
            <span class="token function">list_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread<span class="token operator">-&gt;</span>todo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//根据wait_for_proc_work来决定wait在当前线程还是进程的等待队列</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>wait_for_proc_work<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token function">wait_event_freezable_exclusive</span><span class="token punctuation">(</span>proc<span class="token operator">-&gt;</span>wait<span class="token punctuation">,</span> <span class="token function">binder_has_proc_work</span><span class="token punctuation">(</span>proc<span class="token punctuation">,</span> thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token function">wait_event_freezable</span><span class="token punctuation">(</span>thread<span class="token operator">-&gt;</span>wait<span class="token punctuation">,</span> <span class="token function">binder_has_thread_work</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//当&amp;thread-&gt;todo和&amp;proc-&gt;todo都为空时，goto到retry标志处，否则往下执行：</span>
        <span class="token keyword">struct</span> <span class="token class-name">binder_transaction_data</span> tr<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">binder_transaction</span> <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>w<span class="token operator">-&gt;</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">case</span> BINDER_WORK_TRANSACTION<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
          <span class="token keyword">case</span> BINDER_WORK_TRANSACTION_COMPLETE<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
          <span class="token keyword">case</span> BINDER_WORK_NODE<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
          <span class="token keyword">case</span> BINDER_WORK_DEAD_BINDER<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
          <span class="token keyword">case</span> BINDER_WORK_DEAD_BINDER_AND_CLEAR<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
          <span class="token keyword">case</span> BINDER_WORK_CLEAR_DEATH_NOTIFICATION<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
done<span class="token operator">:</span>
    <span class="token operator">*</span>consumed <span class="token operator">=</span> ptr <span class="token operator">-</span> buffer<span class="token punctuation">;</span>
    <span class="token comment">//当满足请求线程加已准备线程数等于0，已启动线程数小于最大线程数(15)，</span>
    <span class="token comment">//且looper状态为已注册或已进入时创建新的线程。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>proc<span class="token operator">-&gt;</span>requested_threads <span class="token operator">+</span> proc<span class="token operator">-&gt;</span>ready_threads <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
        proc<span class="token operator">-&gt;</span>requested_threads_started <span class="token operator">&lt;</span> proc<span class="token operator">-&gt;</span>max_threads <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>thread<span class="token operator">-&gt;</span>looper <span class="token operator">&amp;</span> <span class="token punctuation">(</span>BINDER_LOOPER_STATE_REGISTERED <span class="token operator">|</span>
         BINDER_LOOPER_STATE_ENTERED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        proc<span class="token operator">-&gt;</span>requested_threads<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 生成BR_SPAWN_LOOPER命令，用于创建新的线程</span>
        <span class="token function">put_user</span><span class="token punctuation">(</span>BR_SPAWN_LOOPER<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> __user <span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token punctuation">)</span>；
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="binder驱动底层方法" tabindex="-1"><a class="header-anchor" href="#binder驱动底层方法"><span>binder驱动底层方法</span></a></h3><p>驱动设备的初始化(binder_init)，打开 (binder_open)，映射(binder_mmap)，数据操作(binder_ioctl)。</p><figure><img src="`+i+`" alt="驱动基础方法" tabindex="0" loading="lazy"><figcaption>驱动基础方法</figcaption></figure><h3 id="核心代码" tabindex="-1"><a class="header-anchor" href="#核心代码"><span>核心代码</span></a></h3><p>binder_init</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">binder_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token comment">//创建名为binder的工作队列</span>
    binder_deferred_workqueue <span class="token operator">=</span> <span class="token function">create_singlethread_workqueue</span><span class="token punctuation">(</span><span class="token string">&quot;binder&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    binder_debugfs_dir_entry_root <span class="token operator">=</span> <span class="token function">debugfs_create_dir</span><span class="token punctuation">(</span><span class="token string">&quot;binder&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>binder_debugfs_dir_entry_root<span class="token punctuation">)</span>
        binder_debugfs_dir_entry_proc <span class="token operator">=</span> <span class="token function">debugfs_create_dir</span><span class="token punctuation">(</span><span class="token string">&quot;proc&quot;</span><span class="token punctuation">,</span>
                         binder_debugfs_dir_entry_root<span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token comment">// 注册misc设备</span>
    ret <span class="token operator">=</span> <span class="token function">misc_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>binder_miscdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>binder_debugfs_dir_entry_root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">//在debugfs文件系统中创建一系列的文件</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结构体</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">miscdevice</span> binder_miscdev <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>minor <span class="token operator">=</span> MISC_DYNAMIC_MINOR<span class="token punctuation">,</span> <span class="token comment">//次设备号 动态分配</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;binder&quot;</span><span class="token punctuation">,</span>     <span class="token comment">//设备名</span>
    <span class="token punctuation">.</span>fops <span class="token operator">=</span> <span class="token operator">&amp;</span>binder_fops  <span class="token comment">//设备的文件操作结构，这是file_operations结构</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> binder_fops <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>owner <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>poll <span class="token operator">=</span> binder_poll<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>unlocked_ioctl <span class="token operator">=</span> binder_ioctl<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>compat_ioctl <span class="token operator">=</span> binder_ioctl<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mmap <span class="token operator">=</span> binder_mmap<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>open <span class="token operator">=</span> binder_open<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>flush <span class="token operator">=</span> binder_flush<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>release <span class="token operator">=</span> binder_release<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),u=[r];function d(k,v){return s(),a("div",null,u)}const b=n(l,[["render",d],["__file","binder驱动原理.html.vue"]]),g=JSON.parse('{"path":"/fe/framework/binder/binder%E9%A9%B1%E5%8A%A8%E5%8E%9F%E7%90%86.html","title":"binder驱动原理","lang":"zh-CN","frontmatter":{"title":"binder驱动原理","date":"2024-04-14T11:47:50.000Z","order":8,"category":["framework"],"tag":["binder"],"description":"驱动分层 驱动协议分层驱动协议分层 业务层: demo()便是Client端和Server共同协商好的统一方法 IPC层: handle、RPC数据、代码、协议 内核层: Binder Driver Binder通信过程 Binder通信协议Binder通信协议 Binder协议 BINDER_COMMAND_PROTOCOL：binder请求码，以”...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/fe/framework/binder/binder%E9%A9%B1%E5%8A%A8%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"binder驱动原理"}],["meta",{"property":"og:description","content":"驱动分层 驱动协议分层驱动协议分层 业务层: demo()便是Client端和Server共同协商好的统一方法 IPC层: handle、RPC数据、代码、协议 内核层: Binder Driver Binder通信过程 Binder通信协议Binder通信协议 Binder协议 BINDER_COMMAND_PROTOCOL：binder请求码，以”..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-22T23:46:25.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"binder"}],["meta",{"property":"article:published_time","content":"2024-04-14T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-22T23:46:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"binder驱动原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-14T11:47:50.000Z\\",\\"dateModified\\":\\"2024-04-22T23:46:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"驱动分层","slug":"驱动分层","link":"#驱动分层","children":[]},{"level":3,"title":"Binder通信过程","slug":"binder通信过程","link":"#binder通信过程","children":[]},{"level":3,"title":"一次拷贝","slug":"一次拷贝","link":"#一次拷贝","children":[]},{"level":3,"title":"核心方法","slug":"核心方法","link":"#核心方法","children":[]},{"level":3,"title":"binder驱动底层方法","slug":"binder驱动底层方法","link":"#binder驱动底层方法","children":[]},{"level":3,"title":"核心代码","slug":"核心代码","link":"#核心代码","children":[]}],"git":{"createdTime":1713829585000,"updatedTime":1713829585000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":2.81,"words":843},"filePathRelative":"fe/framework/binder/binder驱动原理.md","localizedDate":"2024年4月14日","excerpt":"<h3>驱动分层</h3>\\n<figure><figcaption>驱动协议分层</figcaption></figure>\\n<p>业务层: demo()便是Client端和Server共同协商好的统一方法\\nIPC层: handle、RPC数据、代码、协议\\n内核层: Binder Driver</p>\\n<h3>Binder通信过程</h3>\\n<figure><figcaption>Binder通信协议</figcaption></figure>\\n<p>Binder协议</p>\\n<ul>\\n<li>BINDER_COMMAND_PROTOCOL：binder请求码，以”BC_“开头，简称BC码，用于从IPC层传递到Binder Driver层；</li>\\n<li>BINDER_RETURN_PROTOCOL ：binder响应码，以”BR_“开头，简称BR码，用于从Binder Driver层传递到IPC层；</li>\\n</ul>","autoDesc":true}');export{b as comp,g as data};
