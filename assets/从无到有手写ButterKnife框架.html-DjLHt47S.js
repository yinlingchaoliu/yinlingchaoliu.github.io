import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as d,c as s,a as n,b as e,d as t,f as l}from"./app-CtvCwAmI.js";const o={},v={href:"https://www.jianshu.com/p/a96de1aa4e29",target:"_blank",rel:"noopener noreferrer"},c={href:"https://www.jianshu.com/p/f8856e913224",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.jianshu.com/p/cdf417e52cab",target:"_blank",rel:"noopener noreferrer"},p={href:"https://www.jianshu.com/p/43eb69b2beeb",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.jianshu.com/p/a91cbfb8b1a1",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.jianshu.com/p/8418ef144b29",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.jianshu.com/p/2da1ca9d8ffa",target:"_blank",rel:"noopener noreferrer"},f=l(`<p>#####1、前言 butterknife归根结底：不用手写findviewbyId，用模板自动生成代码，减少不必要重复工作。 与其上手直接写代码，不如阐述渐进的思路，理解会透彻一些。</p><p>####2、代码演进 1、最初代码</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>    TextView helloTv;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate( savedInstanceState );
        setContentView( R.layout.activity_main );
        helloTv = findViewById( R.id.helloTv );
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当代码变多后 2、简单封装后代码</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>  TextView helloTv;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate( savedInstanceState );
        setContentView( R.layout.activity_main );
        initView();
    }

    private void initView(){
        this.helloTv = findViewById( R.id.helloTv );
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、可以更进一步封装</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>    TextView helloTv;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate( savedInstanceState );
        setContentView( R.layout.activity_main );
        initView(FirstActivity.this, getWindow().getDecorView());
    }

    private void initView(FirstActivity activity, View view ){
        activity.helloTv = view.findViewById( R.id.helloTv );
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、可以将初始化控件代码专门抽出一个类</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/**
 * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY CHENTONG.
 */
public class FirstActivity_ViewBinding implements Unbinder {
  private FirstActivity target;

  @UiThread
  public FirstActivity_ViewBinding(FirstActivity target, View source) {
    this.target = target;
    target.helloTv = source.findViewById( R.id.helloTv );
  }

  @Override
  public void unbind() {
    target.helloTv = null;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看此时代码更像一个模板。</p><p>调用方式也比较固定死板</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>    TextView helloTv;
    Unbinder unbinder;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate( savedInstanceState );
        setContentView( R.layout.activity_main );
        unbinder = new FirstActivity_ViewBinding(FirstActivity.this, getWindow().getDecorView());
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        unbinder.unbind();
        unbinder=null;
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从一次一次演化，findViewById代码编写，一次比一次趋近于模板化，很套路毫无新鲜感。</p><p>日常手头重复的工作，很像模板，是时候开始改变了</p><p>#####从无到有手写butterKnife框架 https://github.com/yinlingchaoliu/JavaPoetDemo</p>`,15);function w(g,_){const i=r("ExternalLinkIcon");return d(),s("div",null,[n("p",null,[e("#####导航 一、"),n("a",v,[e("代码的演进"),t(i)]),e(" 二、"),n("a",c,[e("butterKnife反射调用"),t(i)]),e(" 三、"),n("a",u,[e("javapoet自动生成模板代码"),t(i)]),e(" 四、"),n("a",p,[e("apt与注解"),t(i)]),e(" 五、"),n("a",m,[e("注解支持多层继承"),t(i)]),e(" 六、"),n("a",b,[e("apt调试"),t(i)]),e(" 七、"),n("a",h,[e("javapoet语法"),t(i)])]),f])}const E=a(o,[["render",w],["__file","从无到有手写ButterKnife框架.html.vue"]]),x=JSON.parse('{"path":"/fe/android/%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E6%89%8B%E5%86%99ButterKnife%E6%A1%86%E6%9E%B6.html","title":"从无到有手写ButterKnife框架","lang":"zh-CN","frontmatter":{"title":"从无到有手写ButterKnife框架","date":"2024-03-24T11:47:50.000Z","category":["框架编写分析"],"tag":["archive"],"description":"#####导航 一、代码的演进 二、butterKnife反射调用 三、javapoet自动生成模板代码 四、apt与注解 五、注解支持多层继承 六、apt调试 七、javapoet语法 #####1、前言 butterknife归根结底：不用手写findviewbyId，用模板自动生成代码，减少不必要重复工作。 与其上手直接写代码，不如阐述渐进的思路...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/fe/android/%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E6%89%8B%E5%86%99ButterKnife%E6%A1%86%E6%9E%B6.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"从无到有手写ButterKnife框架"}],["meta",{"property":"og:description","content":"#####导航 一、代码的演进 二、butterKnife反射调用 三、javapoet自动生成模板代码 四、apt与注解 五、注解支持多层继承 六、apt调试 七、javapoet语法 #####1、前言 butterknife归根结底：不用手写findviewbyId，用模板自动生成代码，减少不必要重复工作。 与其上手直接写代码，不如阐述渐进的思路..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T14:17:18.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-24T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T14:17:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从无到有手写ButterKnife框架\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-24T11:47:50.000Z\\",\\"dateModified\\":\\"2024-03-25T14:17:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711376238000,"updatedTime":1711376238000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":1.35,"words":404},"filePathRelative":"fe/android/框架编写/从无到有手写ButterKnife框架.md","localizedDate":"2024年3月24日","excerpt":"<p>#####导航\\n一、<a href=\\"https://www.jianshu.com/p/a96de1aa4e29\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">代码的演进</a>\\n二、<a href=\\"https://www.jianshu.com/p/f8856e913224\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">butterKnife反射调用</a>\\n三、<a href=\\"https://www.jianshu.com/p/cdf417e52cab\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">javapoet自动生成模板代码</a>\\n四、<a href=\\"https://www.jianshu.com/p/43eb69b2beeb\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">apt与注解</a>\\n五、<a href=\\"https://www.jianshu.com/p/a91cbfb8b1a1\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">注解支持多层继承</a>\\n六、<a href=\\"https://www.jianshu.com/p/8418ef144b29\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">apt调试</a>\\n七、<a href=\\"https://www.jianshu.com/p/2da1ca9d8ffa\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">javapoet语法</a></p>","autoDesc":true}');export{E as comp,x as data};
