import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CtvCwAmI.js";const e={},p=t(`<h3 id="权限管理" tabindex="-1"><a class="header-anchor" href="#权限管理"><span>权限管理</span></a></h3><p>本质: 外部访问通过内部代理，而不是直接访问</p><h3 id="核心代码" tabindex="-1"><a class="header-anchor" href="#核心代码"><span>核心代码</span></a></h3><p>远程调用</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">status_t</span> IPCThreadState<span class="token operator">::</span><span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    BBinder<span class="token operator">*</span> obj<span class="token punctuation">;</span>
    RefBase<span class="token operator">::</span>weakref_type<span class="token operator">*</span> refs<span class="token punctuation">;</span>
    <span class="token class-name">status_t</span> result <span class="token operator">=</span> NO_ERROR<span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> BR_TRANSACTION<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token class-name">pid_t</span> origPid <span class="token operator">=</span> mCallingPid<span class="token punctuation">;</span>
            <span class="token keyword">const</span> <span class="token class-name">uid_t</span> origUid <span class="token operator">=</span> mCallingUid<span class="token punctuation">;</span>
            mCallingPid <span class="token operator">=</span> tr<span class="token punctuation">.</span>sender_pid<span class="token punctuation">;</span> <span class="token comment">//设置调用者pid</span>
            mCallingUid <span class="token operator">=</span> tr<span class="token punctuation">.</span>sender_euid<span class="token punctuation">;</span><span class="token comment">//设置调用者uid</span>

            reinterpret_cast<span class="token operator">&lt;</span>BBinder<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">transact</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span>code<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span>
                        <span class="token operator">&amp;</span>reply<span class="token punctuation">,</span> tr<span class="token punctuation">.</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mCallingPid <span class="token operator">=</span> origPid<span class="token punctuation">;</span> <span class="token comment">//恢复原来的pid</span>
            mCallingUid <span class="token operator">=</span> origUid<span class="token punctuation">;</span> <span class="token comment">//恢复原来的uid</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token comment">//作用是清空远程调用端的uid和pid，用当前本地进程的uid和pid替代；</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//作用是恢复远程调用端的uid和pid信息，正好是\`clearCallingIdentity\`的反过程;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">restoreCallingIdentity</span><span class="token punctuation">(</span><span class="token keyword">long</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>清空远程调用端的uid和pid</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> jlong <span class="token function">android_os_Binder_clearCallingIdentity</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject clazz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//调用IPCThreadState类的方法执行</span>
    <span class="token keyword">return</span> IPCThreadState<span class="token operator">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">int64_t</span> IPCThreadState<span class="token operator">::</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">int64_t</span> token <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">int64_t</span><span class="token punctuation">)</span>mCallingUid<span class="token operator">&lt;&lt;</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">|</span> mCallingPid<span class="token punctuation">;</span>
    <span class="token function">clearCaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> token<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> IPCThreadState<span class="token operator">::</span><span class="token function">clearCaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    mCallingPid <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前进程pid赋值给mCallingPid</span>
    mCallingUid <span class="token operator">=</span> <span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前进程uid赋值给mCallingUid</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">android_os_Binder_restoreCallingIdentity</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject clazz<span class="token punctuation">,</span> jlong token<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//token记录着uid信息，将其右移32位得到的是uid</span>
    <span class="token keyword">int</span> uid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>token<span class="token operator">&gt;&gt;</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>uid <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> uid <span class="token operator">&lt;</span> <span class="token number">999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//目前Android中不存在小于999的uid，当uid&lt;999则抛出异常。</span>
        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">jniThrowException</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;java/lang/IllegalStateException&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//调用IPCThreadState类的方法执行</span>
    IPCThreadState<span class="token operator">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">restoreCallingIdentity</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> IPCThreadState<span class="token operator">::</span><span class="token function">restoreCallingIdentity</span><span class="token punctuation">(</span><span class="token class-name">int64_t</span> token<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    mCallingUid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>token<span class="token operator">&gt;&gt;</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mCallingPid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>token<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码路径" tabindex="-1"><a class="header-anchor" href="#代码路径"><span>代码路径</span></a></h3><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>frameworks/base/core/java/android/os/Binder.java
frameworks/base/core/jni/android_util_Binder.cpp
frameworks/native/libs/binder/IPCThreadState.cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","IPC权限控制.html.vue"]]),k=JSON.parse('{"path":"/fe/framework/binder/IPC%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6.html","title":"IPC权限管理","lang":"zh-CN","frontmatter":{"title":"IPC权限管理","date":"2024-04-14T11:47:50.000Z","order":7,"category":["framework"],"tag":["binder"],"description":"权限管理 本质: 外部访问通过内部代理，而不是直接访问 核心代码 远程调用 清空远程调用端的uid和pid 代码路径","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/fe/framework/binder/IPC%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"IPC权限管理"}],["meta",{"property":"og:description","content":"权限管理 本质: 外部访问通过内部代理，而不是直接访问 核心代码 远程调用 清空远程调用端的uid和pid 代码路径"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-22T23:46:25.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"binder"}],["meta",{"property":"article:published_time","content":"2024-04-14T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-22T23:46:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IPC权限管理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-14T11:47:50.000Z\\",\\"dateModified\\":\\"2024-04-22T23:46:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"权限管理","slug":"权限管理","link":"#权限管理","children":[]},{"level":3,"title":"核心代码","slug":"核心代码","link":"#核心代码","children":[]},{"level":3,"title":"代码路径","slug":"代码路径","link":"#代码路径","children":[]}],"git":{"createdTime":1713829585000,"updatedTime":1713829585000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":1.21,"words":362},"filePathRelative":"fe/framework/binder/IPC权限控制.md","localizedDate":"2024年4月14日","excerpt":"<h3>权限管理</h3>\\n<p>本质: 外部访问通过内部代理，而不是直接访问</p>\\n<h3>核心代码</h3>\\n<p>远程调用</p>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token class-name\\">status_t</span> IPCThreadState<span class=\\"token operator\\">::</span><span class=\\"token function\\">executeCommand</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">int32_t</span> cmd<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    BBinder<span class=\\"token operator\\">*</span> obj<span class=\\"token punctuation\\">;</span>\\n    RefBase<span class=\\"token operator\\">::</span>weakref_type<span class=\\"token operator\\">*</span> refs<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">status_t</span> result <span class=\\"token operator\\">=</span> NO_ERROR<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">switch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">uint32_t</span><span class=\\"token punctuation\\">)</span>cmd<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">case</span> BR_TRANSACTION<span class=\\"token operator\\">:</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">const</span> <span class=\\"token class-name\\">pid_t</span> origPid <span class=\\"token operator\\">=</span> mCallingPid<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">const</span> <span class=\\"token class-name\\">uid_t</span> origUid <span class=\\"token operator\\">=</span> mCallingUid<span class=\\"token punctuation\\">;</span>\\n            mCallingPid <span class=\\"token operator\\">=</span> tr<span class=\\"token punctuation\\">.</span>sender_pid<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//设置调用者pid</span>\\n            mCallingUid <span class=\\"token operator\\">=</span> tr<span class=\\"token punctuation\\">.</span>sender_euid<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//设置调用者uid</span>\\n\\n            reinterpret_cast<span class=\\"token operator\\">&lt;</span>BBinder<span class=\\"token operator\\">*</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>tr<span class=\\"token punctuation\\">.</span>cookie<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">transact</span><span class=\\"token punctuation\\">(</span>tr<span class=\\"token punctuation\\">.</span>code<span class=\\"token punctuation\\">,</span> buffer<span class=\\"token punctuation\\">,</span>\\n                        <span class=\\"token operator\\">&amp;</span>reply<span class=\\"token punctuation\\">,</span> tr<span class=\\"token punctuation\\">.</span>flags<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            mCallingPid <span class=\\"token operator\\">=</span> origPid<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//恢复原来的pid</span>\\n            mCallingUid <span class=\\"token operator\\">=</span> origUid<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//恢复原来的uid</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
