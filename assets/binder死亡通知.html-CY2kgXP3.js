import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,f as e}from"./app-CtvCwAmI.js";const t="/assets/binder_death-lv6hMKwh.png",p={},i=e('<h3 id="binder死亡通知" tabindex="-1"><a class="header-anchor" href="#binder死亡通知"><span>binder死亡通知</span></a></h3><p>本质: binder client端收尾工作</p><figure><img src="'+t+`" alt="binder死亡通知" tabindex="0" loading="lazy"><figcaption>binder死亡通知</figcaption></figure><p>死亡通知是为了让Bp端(客户端进程)进能知晓Bn端(服务端进程)的生死情况，当Bn端进程死亡后能通知到Bp端。</p><p>定义：AppDeathRecipient是继承IBinder::DeathRecipient类，主要需要实现其binderDied()来进行死亡通告。</p><p>注册：binder-&gt;linkToDeath(AppDeathRecipient)是为了将AppDeathRecipient死亡通知注册到Binder上。</p><p>Bp端只需要覆写binderDied()方法，实现一些后尾清除类的工作，则在Bn端死掉后，会回调binderDied()进行相应处理。</p><p>linkToDeath过程</p><ol><li>requestDeathNotification过程向驱动传递的命令BC_REQUEST_DEATH_NOTIFICATION，参数有mHandle和BpBinder对象；</li><li>binder_thread_write()过程，同一个BpBinder可以注册多个死亡回调，但Kernel只允许注册一次死亡通知。</li><li>注册死亡回调的过程，实质就是向binder_ref结构体添加binder_ref_death指针， binder_ref_death的cookie记录BpBinder指针。</li></ol><p>unlinkToDeath过程</p><ol><li>unlinkToDeath只有当该BpBinder的所有mObituaries都被移除，才会向驱动层执行清除死亡通知的动作， 否则只是从native层移除某个recipient。</li><li>clearDeathNotification过程向驱动传递BC_CLEAR_DEATH_NOTIFICATION，参数有mHandle和BpBinder对象；</li><li>binder_thread_write()过程，将BINDER_WORK_CLEAR_DEATH_NOTIFICATION事务添加当前当前进程/线程的todo队列</li></ol><p>触发死亡回调</p><ol><li>服务实体进程：binder_release过程会执行binder_node_release()，loop该binder_node下所有的ref-&gt;death对象。 当存在，则将BINDER_WORK_DEAD_BINDER事务添加ref-&gt;proc-&gt;todo（即ref所在进程的todo队列)</li><li>引用所在进程：执行binder_thread_read()过程，向用户空间写入BR_DEAD_BINDER，并触发死亡回调。</li><li>发送死亡通知sendObituary</li></ol><h3 id="核心代码" tabindex="-1"><a class="header-anchor" href="#核心代码"><span>核心代码</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ActivityManagerService</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 收尾工作
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">attachApplicationLocked</span><span class="token punctuation">(</span><span class="token class-name">IApplicationThread</span> thread<span class="token punctuation">,</span> <span class="token keyword">int</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//创建IBinder.DeathRecipient子类对象</span>
        <span class="token class-name">AppDeathRecipient</span> adr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppDeathRecipient</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//建立binder死亡回调</span>
        thread<span class="token punctuation">.</span><span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">linkToDeath</span><span class="token punctuation">(</span>adr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        app<span class="token punctuation">.</span>deathRecipient <span class="token operator">=</span> adr<span class="token punctuation">;</span>
        <span class="token comment">//取消binder死亡回调</span>
        app<span class="token punctuation">.</span><span class="token function">unlinkDeathRecipient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">AppDeathRecipient</span> <span class="token keyword">implements</span> <span class="token class-name">IBinder<span class="token punctuation">.</span>DeathRecipient</span> <span class="token punctuation">{</span>
        <span class="token comment">//触发回调方法</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">binderDied</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">ActivityManagerService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">appDiedLocked</span><span class="token punctuation">(</span>mApp<span class="token punctuation">,</span> mPid<span class="token punctuation">,</span> mAppThread<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口实现</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Binder</span> <span class="token keyword">implements</span> <span class="token class-name">IBinder</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">linkToDeath</span><span class="token punctuation">(</span><span class="token class-name">DeathRecipient</span> recipient<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">unlinkToDeath</span><span class="token punctuation">(</span><span class="token class-name">DeathRecipient</span> recipient<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">BinderProxy</span> <span class="token keyword">implements</span> <span class="token class-name">IBinder</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">linkToDeath</span><span class="token punctuation">(</span><span class="token class-name">DeathRecipient</span> recipient<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">unlinkToDeath</span><span class="token punctuation">(</span><span class="token class-name">DeathRecipient</span> recipient<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">android_os_BinderProxy_linkToDeath</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">,</span>
        jobject recipient<span class="token punctuation">,</span> jint flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>recipient <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">jniThrowNullPointerException</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//获取BinderProxy.mObject成员变量值, 即BpBinder对象</span>
    IBinder<span class="token operator">*</span> target <span class="token operator">=</span> <span class="token punctuation">(</span>IBinder<span class="token operator">*</span><span class="token punctuation">)</span>env<span class="token operator">-&gt;</span><span class="token function">GetLongField</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> gBinderProxyOffsets<span class="token punctuation">.</span>mObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">//只有Binder代理对象才会进入该分支</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token operator">-&gt;</span><span class="token function">localBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        DeathRecipientList<span class="token operator">*</span> list <span class="token operator">=</span> <span class="token punctuation">(</span>DeathRecipientList<span class="token operator">*</span><span class="token punctuation">)</span>
                env<span class="token operator">-&gt;</span><span class="token function">GetLongField</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> gBinderProxyOffsets<span class="token punctuation">.</span>mOrgue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建JavaDeathRecipient对象[见小节2.1.1]</span>
        sp<span class="token operator">&lt;</span>JavaDeathRecipient<span class="token operator">&gt;</span> jdr <span class="token operator">=</span> new <span class="token function">JavaDeathRecipient</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> recipient<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//建立死亡通知[见小节2.2]</span>
        <span class="token class-name">status_t</span> err <span class="token operator">=</span> target<span class="token operator">-&gt;</span><span class="token function">linkToDeath</span><span class="token punctuation">(</span>jdr<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> NO_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//添加死亡通告失败, 则从list移除引用[见小节2.1.3]</span>
            jdr<span class="token operator">-&gt;</span><span class="token function">clearReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">signalExceptionForError</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> err<span class="token punctuation">,</span> true <span class="token comment">/*canThrowRemoteException*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码路径" tabindex="-1"><a class="header-anchor" href="#代码路径"><span>代码路径</span></a></h3><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>frameworks/base/core/java/android/os/Binder.java
frameworks/base/core/jni/android_util_Binder.cpp
frameworks/native/libs/binder/BpBinder.cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),o=[i];function c(l,r){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","binder死亡通知.html.vue"]]),v=JSON.parse('{"path":"/fe/framework/binder/binder%E6%AD%BB%E4%BA%A1%E9%80%9A%E7%9F%A5.html","title":"binder死亡通知","lang":"zh-CN","frontmatter":{"title":"binder死亡通知","date":"2024-04-14T11:47:50.000Z","order":6,"category":["framework"],"tag":["binder"],"description":"binder死亡通知 本质: binder client端收尾工作 binder死亡通知binder死亡通知 死亡通知是为了让Bp端(客户端进程)进能知晓Bn端(服务端进程)的生死情况，当Bn端进程死亡后能通知到Bp端。 定义：AppDeathRecipient是继承IBinder::DeathRecipient类，主要需要实现其binderDied(...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/fe/framework/binder/binder%E6%AD%BB%E4%BA%A1%E9%80%9A%E7%9F%A5.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"binder死亡通知"}],["meta",{"property":"og:description","content":"binder死亡通知 本质: binder client端收尾工作 binder死亡通知binder死亡通知 死亡通知是为了让Bp端(客户端进程)进能知晓Bn端(服务端进程)的生死情况，当Bn端进程死亡后能通知到Bp端。 定义：AppDeathRecipient是继承IBinder::DeathRecipient类，主要需要实现其binderDied(..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-22T23:46:25.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"binder"}],["meta",{"property":"article:published_time","content":"2024-04-14T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-22T23:46:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"binder死亡通知\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-14T11:47:50.000Z\\",\\"dateModified\\":\\"2024-04-22T23:46:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"binder死亡通知","slug":"binder死亡通知","link":"#binder死亡通知","children":[]},{"level":3,"title":"核心代码","slug":"核心代码","link":"#核心代码","children":[]},{"level":3,"title":"代码路径","slug":"代码路径","link":"#代码路径","children":[]}],"git":{"createdTime":1713829585000,"updatedTime":1713829585000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":2.35,"words":705},"filePathRelative":"fe/framework/binder/binder死亡通知.md","localizedDate":"2024年4月14日","excerpt":"<h3>binder死亡通知</h3>\\n<p>本质: binder client端收尾工作</p>\\n<figure><figcaption>binder死亡通知</figcaption></figure>\\n<p>死亡通知是为了让Bp端(客户端进程)进能知晓Bn端(服务端进程)的生死情况，当Bn端进程死亡后能通知到Bp端。</p>\\n<p>定义：AppDeathRecipient是继承IBinder::DeathRecipient类，主要需要实现其binderDied()来进行死亡通告。</p>\\n<p>注册：binder-&gt;linkToDeath(AppDeathRecipient)是为了将AppDeathRecipient死亡通知注册到Binder上。</p>","autoDesc":true}');export{k as comp,v as data};
