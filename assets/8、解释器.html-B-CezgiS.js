import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CtvCwAmI.js";const e={},p=t(`<h3 id="执行指令集的调用者" tabindex="-1"><a class="header-anchor" href="#执行指令集的调用者"><span>执行指令集的调用者</span></a></h3><p>指令集包含两部分 读取指令和执行</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Instruction <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">FetchOperands</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ByteCodeReader<span class="token punctuation">)</span> <span class="token comment">// 从字节码流中取出操作数 输入变量</span>
	<span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span>            <span class="token comment">// 执行指令逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释器是将指令以逻辑方式运行</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//解释器 外部不能访问 私有方法</span>
<span class="token keyword">func</span> <span class="token function">interpret</span><span class="token punctuation">(</span>methodInfo <span class="token operator">*</span>classfile<span class="token punctuation">.</span>MemberInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>

	<span class="token comment">//获得method类 code属性</span>
	codeAttr <span class="token operator">:=</span> methodInfo<span class="token punctuation">.</span><span class="token function">CodeAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	maxLocals <span class="token operator">:=</span> codeAttr<span class="token punctuation">.</span><span class="token function">MaxLocals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	maxStack <span class="token operator">:=</span> codeAttr<span class="token punctuation">.</span><span class="token function">MaxStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	bytecode <span class="token operator">:=</span> codeAttr<span class="token punctuation">.</span><span class="token function">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	thread <span class="token operator">:=</span> rtda<span class="token punctuation">.</span><span class="token function">NewTread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	frame  <span class="token operator">:=</span> thread<span class="token punctuation">.</span><span class="token function">NewTestFrame</span><span class="token punctuation">(</span>maxLocals<span class="token punctuation">,</span>maxStack<span class="token punctuation">)</span>

	thread<span class="token punctuation">.</span><span class="token function">PushFrame</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span>

	<span class="token keyword">defer</span> <span class="token function">catchErr</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span>
	<span class="token function">loop</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> bytecode<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//异常处理 因没有实现return指令 catch异常</span>
<span class="token keyword">func</span> <span class="token function">catchErr</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> r<span class="token operator">:=</span><span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>&quot;LocalVars<span class="token punctuation">:</span><span class="token operator">%</span>v
&quot;<span class="token punctuation">,</span>frame<span class="token punctuation">.</span><span class="token function">LocalVars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>&quot;OperandStack<span class="token punctuation">:</span><span class="token operator">%</span>v
&quot;<span class="token punctuation">,</span>frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>&quot;no <span class="token keyword">return</span> fun 
&quot;<span class="token punctuation">)</span>
		<span class="token comment">//panic(r)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//loop执行循环所有方法</span>
<span class="token keyword">func</span> <span class="token function">loop</span><span class="token punctuation">(</span>thread <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Thread<span class="token punctuation">,</span> bytecode <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

	frame<span class="token operator">:=</span>thread<span class="token punctuation">.</span><span class="token function">PopFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	reader<span class="token operator">:=</span> <span class="token operator">&amp;</span>base<span class="token punctuation">.</span>ByteCodeReader<span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token keyword">for</span><span class="token punctuation">{</span>
		<span class="token comment">//寻找下一个函数 计算pc</span>
		pc<span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">NextPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		thread<span class="token punctuation">.</span><span class="token function">SetPC</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span>

		<span class="token comment">//设置初始值   解码指令</span>
		reader<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">,</span>pc<span class="token punctuation">)</span>
		<span class="token comment">//读取指令集</span>
		opcode<span class="token operator">:=</span>reader<span class="token punctuation">.</span><span class="token function">ReadUint8</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">//指令集转义</span>
		inst<span class="token operator">:=</span>instructions<span class="token punctuation">.</span><span class="token function">NewInstruction</span><span class="token punctuation">(</span>opcode<span class="token punctuation">)</span>
		<span class="token comment">//读取变量</span>
		inst<span class="token punctuation">.</span><span class="token function">FetchOperands</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span>
		<span class="token comment">//获得下一个指令集便宜</span>
		frame<span class="token punctuation">.</span><span class="token function">SetNextPC</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">PC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

		<span class="token comment">//excute   执行</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>&quot;pc<span class="token punctuation">:</span><span class="token operator">%</span>2d inst<span class="token punctuation">:</span><span class="token operator">%</span>T <span class="token operator">%</span>v
&quot;<span class="token punctuation">,</span> pc<span class="token punctuation">,</span> inst<span class="token punctuation">,</span> inst<span class="token punctuation">)</span>
		inst<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调用解释器" tabindex="-1"><a class="header-anchor" href="#调用解释器"><span>调用解释器</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//测试解释器和指令集</span>
<span class="token keyword">func</span> <span class="token function">parseInterpret</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>Cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cp <span class="token operator">:=</span> classpath<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>XjreOption<span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>cpOption<span class="token punctuation">)</span>
	className <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>class<span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token comment">//获得classfile</span>
	cf <span class="token operator">:=</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> cp<span class="token punctuation">)</span>
	<span class="token comment">//获得main函数</span>
	mainMethod<span class="token operator">:=</span><span class="token function">getMainMethod</span><span class="token punctuation">(</span>cf<span class="token punctuation">)</span>
	<span class="token keyword">if</span> mainMethod <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">//解释器执行</span>
		<span class="token function">interpret</span><span class="token punctuation">(</span>mainMethod<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>&quot;Main method not found in class <span class="token operator">%</span>s
&quot;<span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>class<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//获得main函数</span>
<span class="token keyword">func</span> <span class="token function">getMainMethod</span><span class="token punctuation">(</span>cf <span class="token operator">*</span>classfile<span class="token punctuation">.</span>ClassFile<span class="token punctuation">)</span> <span class="token operator">*</span>classfile<span class="token punctuation">.</span>MemberInfo <span class="token punctuation">{</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> m <span class="token operator">:=</span> <span class="token keyword">range</span> cf<span class="token punctuation">.</span><span class="token function">Methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> m<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;main&quot;</span> <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">.</span><span class="token function">Descriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;([Ljava/lang/String;)V&quot;</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> m
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shell脚本" tabindex="-1"><a class="header-anchor" href="#shell脚本"><span>shell脚本</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run main <span class="token parameter variable">-test</span> <span class="token string">&quot;interpret&quot;</span> <span class="token parameter variable">-cp</span> test/lib/example.jar jvmgo.book.ch05.GaussTest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="实战项目地址" tabindex="-1"><a class="header-anchor" href="#实战项目地址"><span>实战项目地址</span></a></h3><p>https://gitee.com/yinlingchaoliu/jvmgo.git</p>`,11),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","8、解释器.html.vue"]]),k=JSON.parse('{"path":"/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/8%E3%80%81%E8%A7%A3%E9%87%8A%E5%99%A8.html","title":"8、解释器","lang":"zh-CN","frontmatter":{"title":"8、解释器","date":"2024-04-10T06:06:06.000Z","category":["手动编写jvm虚拟机"],"tag":["jvmgo"],"description":"执行指令集的调用者 指令集包含两部分 读取指令和执行 解释器是将指令以逻辑方式运行 调用解释器 shell脚本 实战项目地址 https://gitee.com/yinlingchaoliu/jvmgo.git","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/jvm/%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/8%E3%80%81%E8%A7%A3%E9%87%8A%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"8、解释器"}],["meta",{"property":"og:description","content":"执行指令集的调用者 指令集包含两部分 读取指令和执行 解释器是将指令以逻辑方式运行 调用解释器 shell脚本 实战项目地址 https://gitee.com/yinlingchaoliu/jvmgo.git"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T22:43:38.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"jvmgo"}],["meta",{"property":"article:published_time","content":"2024-04-10T06:06:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-09T22:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8、解释器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T06:06:06.000Z\\",\\"dateModified\\":\\"2024-04-09T22:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"执行指令集的调用者","slug":"执行指令集的调用者","link":"#执行指令集的调用者","children":[]},{"level":3,"title":"调用解释器","slug":"调用解释器","link":"#调用解释器","children":[]},{"level":3,"title":"shell脚本","slug":"shell脚本","link":"#shell脚本","children":[]},{"level":3,"title":"实战项目地址","slug":"实战项目地址","link":"#实战项目地址","children":[]}],"git":{"createdTime":1711376238000,"updatedTime":1712702618000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":1.32,"words":395},"filePathRelative":"basis/jvm/手动编写jvm虚拟机/8、解释器.md","localizedDate":"2024年4月10日","excerpt":"<h3>执行指令集的调用者</h3>\\n<p>指令集包含两部分 读取指令和执行</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">type</span> Instruction <span class=\\"token keyword\\">interface</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token function\\">FetchOperands</span><span class=\\"token punctuation\\">(</span>reader <span class=\\"token operator\\">*</span>ByteCodeReader<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 从字节码流中取出操作数 输入变量</span>\\n\\t<span class=\\"token function\\">Execute</span><span class=\\"token punctuation\\">(</span>frame <span class=\\"token operator\\">*</span>rtda<span class=\\"token punctuation\\">.</span>Frame<span class=\\"token punctuation\\">)</span>            <span class=\\"token comment\\">// 执行指令逻辑</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
