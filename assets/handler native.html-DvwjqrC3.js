import{_ as n}from"./handler_framework-C46iR7UQ.js";import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,f as t}from"./app-CtvCwAmI.js";const p="/assets/messageQueue-Dj31QK0v.png",o="/assets/nativeMessageQueue--81BGftv.png",c="/assets/queue_native-daudyNL4.png",l="/assets/pollInner-DsX4pyHn.png",i={},u=t('<h3 id="handler整体架构" tabindex="-1"><a class="header-anchor" href="#handler整体架构"><span>handler整体架构</span></a></h3><figure><img src="'+n+'" alt="handler架构" tabindex="0" loading="lazy"><figcaption>handler架构</figcaption></figure><h3 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列"><span>消息队列</span></a></h3><figure><img src="'+p+'" alt="消息队列" tabindex="0" loading="lazy"><figcaption>消息队列</figcaption></figure><figure><img src="'+o+`" alt="框架图" tabindex="0" loading="lazy"><figcaption>框架图</figcaption></figure><ul><li>Java层和Native层的MessageQueue通过JNI建立关联，彼此之间能相互调用</li><li>native层实现 Handler/Looper/Message 与java层没有真正关联，逻辑独立,单独实现</li><li>消息处理流程是先处理Native Message，再处理Native Request，最后处理Java Message (上层消息少,响应时间长的原因)</li></ul><h3 id="native层关键方法" tabindex="-1"><a class="header-anchor" href="#native层关键方法"><span>native层关键方法</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">nativeInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">nativeDestroy</span><span class="token punctuation">(</span><span class="token keyword">long</span> ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">nativePollOnce</span><span class="token punctuation">(</span><span class="token keyword">long</span> ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">nativeWake</span><span class="token punctuation">(</span><span class="token keyword">long</span> ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">nativeIsPolling</span><span class="token punctuation">(</span><span class="token keyword">long</span> ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">nativeSetFileDescriptorEvents</span><span class="token punctuation">(</span><span class="token keyword">long</span> ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> events<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="消息队列native方法" tabindex="0" loading="lazy"><figcaption>消息队列native方法</figcaption></figure><h3 id="发送消息sendmessage和唤醒" tabindex="-1"><a class="header-anchor" href="#发送消息sendmessage和唤醒"><span>发送消息sendMessage和唤醒</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Looper</span><span class="token operator">::</span><span class="token function">sendMessage</span><span class="token operator">-&gt;</span><span class="token class-name">Looper</span><span class="token operator">::</span><span class="token function">sendMessageDelayed</span><span class="token operator">-&gt;</span>sendMessageAtTime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发送消息维护到 MessageEnvelope wake 管道</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> Looper<span class="token operator">::</span><span class="token function">sendMessageAtTime</span><span class="token punctuation">(</span><span class="token class-name">nsecs_t</span> uptime<span class="token punctuation">,</span> <span class="token keyword">const</span> sp<span class="token operator">&lt;</span>MessageHandler<span class="token operator">&gt;</span><span class="token operator">&amp;</span> handler<span class="token punctuation">,</span>
        <span class="token keyword">const</span> Message<span class="token operator">&amp;</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span> <span class="token comment">//请求锁</span>
        AutoMutex <span class="token function">_l</span><span class="token punctuation">(</span>mLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">size_t</span> messageCount <span class="token operator">=</span> mMessageEnvelopes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//找到message应该插入的位置i</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> messageCount <span class="token operator">&amp;&amp;</span> uptime <span class="token operator">&gt;=</span> mMessageEnvelopes<span class="token punctuation">.</span><span class="token function">itemAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>uptime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//加入消息 维护在 mMessageEnvelopes</span>
        MessageEnvelope <span class="token function">messageEnvelope</span><span class="token punctuation">(</span>uptime<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mMessageEnvelopes<span class="token punctuation">.</span><span class="token function">insertAt</span><span class="token punctuation">(</span>messageEnvelope<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//如果当前正在发送消息，那么不再调用wake()，直接返回。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mSendingMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token comment">//释放锁</span>
    <span class="token comment">//当把消息加入到消息队列的头部时，需要唤醒poll循环。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">wake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nativewake-唤醒poll循环" tabindex="-1"><a class="header-anchor" href="#nativewake-唤醒poll循环"><span>nativeWake 唤醒poll循环</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MessageQueue</span><span class="token punctuation">.</span>enqueueMessage<span class="token operator">-&gt;</span>nativeWake<span class="token operator">-&gt;</span>android_os_MessageQueue_nativeWake<span class="token operator">-&gt;</span><span class="token class-name">NativeMessageQueue</span><span class="token operator">::</span><span class="token function">wake</span><span class="token operator">-&gt;</span><span class="token class-name">Looper</span><span class="token operator">::</span><span class="token function">wake</span><span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> Looper<span class="token operator">::</span><span class="token function">wake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint64_t</span> inc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 向管道mWakeEventFd写入字符1</span>
    <span class="token class-name">ssize_t</span> nWrite <span class="token operator">=</span> <span class="token function">TEMP_FAILURE_RETRY</span><span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>mWakeEventFd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>inc<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nWrite <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">!=</span> EAGAIN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">ALOGW</span><span class="token punctuation">(</span><span class="token string">&quot;Could not write wake signal, errno=%d&quot;</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>写入字符&#39;1&#39; ,用于需要唤醒poll循环</li></ul><h3 id="nativepollonce-取出消息和处理消息" tabindex="-1"><a class="header-anchor" href="#nativepollonce-取出消息和处理消息"><span>nativePollOnce 取出消息和处理消息</span></a></h3><p>nativePollOnce用于提取消息队列中的消息，提取消息的调用链</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MessageQueue</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">nativePollOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>android_os_MessageQueue_nativePollOnce<span class="token operator">-&gt;</span><span class="token class-name">NativeMessageQueue</span><span class="token operator">::</span><span class="token function">pollOnce</span><span class="token operator">-&gt;</span><span class="token class-name">Looper</span><span class="token operator">::</span><span class="token function">pollOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token class-name">Looper</span><span class="token operator">::</span><span class="token function">pollInner</span><span class="token operator">-&gt;</span>epoll_wait<span class="token operator">-&gt;</span>awoken
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>nativePollOnce 对java层阻塞及时作用，对native层队列进行读取消息和消息处理</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> Looper<span class="token operator">::</span><span class="token function">pollInner</span><span class="token punctuation">(</span><span class="token keyword">int</span> timeoutMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> POLL_WAKE<span class="token punctuation">;</span>
    mResponses<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mResponseIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    mPolling <span class="token operator">=</span> true<span class="token punctuation">;</span> <span class="token comment">//即将处于idle状态</span>
    <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> eventItems<span class="token punctuation">[</span>EPOLL_MAX_EVENTS<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//fd最大个数为16</span>
    <span class="token comment">//等待事件发生或者超时，在nativeWake()方法，向管道写端写入字符，则该方法会返回；</span>
    <span class="token keyword">int</span> eventCount <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>mEpollFd<span class="token punctuation">,</span> eventItems<span class="token punctuation">,</span> EPOLL_MAX_EVENTS<span class="token punctuation">,</span> timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>

    mPolling <span class="token operator">=</span> false<span class="token punctuation">;</span> <span class="token comment">//不再处于idle状态</span>
    mLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//请求锁</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mEpollRebuildRequired<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mEpollRebuildRequired <span class="token operator">=</span> false<span class="token punctuation">;</span>
        <span class="token function">rebuildEpollLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// epoll重建，直接跳转Done;</span>
        <span class="token keyword">goto</span> Done<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>eventCount <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">goto</span> Done<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        result <span class="token operator">=</span> POLL_ERROR<span class="token punctuation">;</span> <span class="token comment">// epoll事件个数小于0，发生错误，直接跳转Done;</span>
        <span class="token keyword">goto</span> Done<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>eventCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//epoll事件个数等于0，发生超时，直接跳转Done;</span>
        result <span class="token operator">=</span> POLL_TIMEOUT<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> Done<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//循环遍历，处理所有的事件</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> eventCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> fd <span class="token operator">=</span> eventItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>
        <span class="token class-name">uint32_t</span> epollEvents <span class="token operator">=</span> eventItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> mWakeEventFd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>epollEvents <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">awoken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//已经唤醒了，则读取并清空管道数据</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">ssize_t</span> requestIndex <span class="token operator">=</span> mRequests<span class="token punctuation">.</span><span class="token function">indexOfKey</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestIndex <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> events <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>epollEvents <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span> events <span class="token operator">|=</span> EVENT_INPUT<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>epollEvents <span class="token operator">&amp;</span> EPOLLOUT<span class="token punctuation">)</span> events <span class="token operator">|=</span> EVENT_OUTPUT<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>epollEvents <span class="token operator">&amp;</span> EPOLLERR<span class="token punctuation">)</span> events <span class="token operator">|=</span> EVENT_ERROR<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>epollEvents <span class="token operator">&amp;</span> EPOLLHUP<span class="token punctuation">)</span> events <span class="token operator">|=</span> EVENT_HANGUP<span class="token punctuation">;</span>
                <span class="token comment">//处理request，生成对应的reponse对象，push到响应数组</span>
                <span class="token function">pushResponse</span><span class="token punctuation">(</span>events<span class="token punctuation">,</span> mRequests<span class="token punctuation">.</span><span class="token function">valueAt</span><span class="token punctuation">(</span>requestIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
Done<span class="token operator">:</span> <span class="token punctuation">;</span>
    <span class="token comment">//再处理Native的Message，调用相应回调方法</span>
    mNextMessageUptime <span class="token operator">=</span> LLONG_MAX<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>mMessageEnvelopes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">nsecs_t</span> now <span class="token operator">=</span> <span class="token function">systemTime</span><span class="token punctuation">(</span>SYSTEM_TIME_MONOTONIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> MessageEnvelope<span class="token operator">&amp;</span> messageEnvelope <span class="token operator">=</span> mMessageEnvelopes<span class="token punctuation">.</span><span class="token function">itemAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>messageEnvelope<span class="token punctuation">.</span>uptime <span class="token operator">&lt;=</span> now<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">{</span>
                sp<span class="token operator">&lt;</span>MessageHandler<span class="token operator">&gt;</span> handler <span class="token operator">=</span> messageEnvelope<span class="token punctuation">.</span>handler<span class="token punctuation">;</span>
                Message message <span class="token operator">=</span> messageEnvelope<span class="token punctuation">.</span>message<span class="token punctuation">;</span>
                mMessageEnvelopes<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                mSendingMessage <span class="token operator">=</span> true<span class="token punctuation">;</span>
                mLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//释放锁</span>
                <span class="token comment">//todo 处理消息事件</span>
                handler<span class="token operator">-&gt;</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            mLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//请求锁</span>
            mSendingMessage <span class="token operator">=</span> false<span class="token punctuation">;</span>
            result <span class="token operator">=</span> POLL_CALLBACK<span class="token punctuation">;</span> <span class="token comment">// 发生回调</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            mNextMessageUptime <span class="token operator">=</span> messageEnvelope<span class="token punctuation">.</span>uptime<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    mLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//释放锁</span>

    <span class="token comment">//处理带有Callback()方法的Response事件，执行Reponse相应的回调方法</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mResponses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Response<span class="token operator">&amp;</span> response <span class="token operator">=</span> mResponses<span class="token punctuation">.</span><span class="token function">editItemAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ident <span class="token operator">==</span> POLL_CALLBACK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> fd <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>
            <span class="token keyword">int</span> events <span class="token operator">=</span> response<span class="token punctuation">.</span>events<span class="token punctuation">;</span>
            <span class="token keyword">void</span><span class="token operator">*</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
            <span class="token comment">// 处理请求的回调方法</span>
            <span class="token keyword">int</span> callbackResult <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>callback<span class="token operator">-&gt;</span><span class="token function">handleEvent</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> events<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>callbackResult <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">removeFd</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>seq<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//移除fd</span>
            <span class="token punctuation">}</span>
            response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//清除reponse引用的回调方法</span>
            result <span class="token operator">=</span> POLL_CALLBACK<span class="token punctuation">;</span>  <span class="token comment">// 发生回调</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> Looper<span class="token operator">::</span><span class="token function">awoken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint64_t</span> counter<span class="token punctuation">;</span>
    <span class="token comment">//不断读取管道数据，目的就是为了清空管道内容</span>
    <span class="token function">TEMP_FAILURE_RETRY</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>mWakeEventFd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>counter<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="native消息处理" tabindex="0" loading="lazy"><figcaption>native消息处理</figcaption></figure><h3 id="nativeinit-创建消息队列和looper" tabindex="-1"><a class="header-anchor" href="#nativeinit-创建消息队列和looper"><span>nativeInit 创建消息队列和Looper</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">nativeInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>android_os_MessageQueue_nativeInit<span class="token operator">-&gt;</span><span class="token keyword">new</span> <span class="token class-name">NativeMessageQueue</span><span class="token operator">-&gt;</span><span class="token keyword">new</span> <span class="token class-name">Looper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>epoll_ctl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">MessageQueue</span><span class="token punctuation">(</span>boolean quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mQuitAllowed <span class="token operator">=</span> quitAllowed<span class="token punctuation">;</span>
    <span class="token comment">//mPtr记录native消息队列的信息</span>
    mPtr <span class="token operator">=</span> <span class="token function">nativeInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>

<span class="token keyword">static</span> jlong <span class="token function">android_os_MessageQueue_nativeInit</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jclass clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//初始化native消息队列</span>
    NativeMessageQueue<span class="token operator">*</span> nativeMessageQueue <span class="token operator">=</span> new <span class="token function">NativeMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nativeMessageQueue<span class="token operator">-&gt;</span><span class="token function">incStrong</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//增加引用计数</span>
    <span class="token keyword">return</span> reinterpret_cast<span class="token operator">&lt;</span>jlong<span class="token operator">&gt;</span><span class="token punctuation">(</span>nativeMessageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

NativeMessageQueue<span class="token operator">::</span><span class="token function">NativeMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">:</span> <span class="token function">mPollEnv</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mPollObj</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mExceptionObj</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">//类比于java层的Looper</span>
    mLooper <span class="token operator">=</span> Looper<span class="token operator">::</span><span class="token function">getForThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取TLS中的Looper对象</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mLooper <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mLooper <span class="token operator">=</span> new <span class="token function">Looper</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建native层的Looper</span>
        Looper<span class="token operator">::</span><span class="token function">setForThread</span><span class="token punctuation">(</span>mLooper<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//保存native层的Looper到TLS</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Looper<span class="token operator">::</span><span class="token function">Looper</span><span class="token punctuation">(</span>bool allowNonCallbacks<span class="token punctuation">)</span> <span class="token operator">:</span>
        <span class="token function">mAllowNonCallbacks</span><span class="token punctuation">(</span>allowNonCallbacks<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mSendingMessage</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">mPolling</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mEpollFd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mEpollRebuildRequired</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">mNextRequestSeq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mResponseIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mNextMessageUptime</span><span class="token punctuation">(</span>LLONG_MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mWakeEventFd <span class="token operator">=</span> <span class="token function">eventfd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> EFD_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//构造唤醒事件的fd</span>
    AutoMutex <span class="token function">_l</span><span class="token punctuation">(</span>mLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rebuildEpollLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//重建Epoll事件</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> Looper<span class="token operator">::</span><span class="token function">rebuildEpollLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mEpollFd <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">close</span><span class="token punctuation">(</span>mEpollFd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关闭旧的epoll实例</span>
    <span class="token punctuation">}</span>
    mEpollFd <span class="token operator">=</span> <span class="token function">epoll_create</span><span class="token punctuation">(</span>EPOLL_SIZE_HINT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建新的epoll实例，并注册wake管道</span>
    <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> eventItem<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span> eventItem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>epoll_event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把未使用的数据区域进行置0操作</span>
    eventItem<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN<span class="token punctuation">;</span> <span class="token comment">//可读事件</span>
    eventItem<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> mWakeEventFd<span class="token punctuation">;</span>
    <span class="token comment">//将唤醒事件(mWakeEventFd)添加到epoll实例(mEpollFd)</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>mEpollFd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> mWakeEventFd<span class="token punctuation">,</span> <span class="token operator">&amp;</span> eventItem<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mRequests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> Request<span class="token operator">&amp;</span> request <span class="token operator">=</span> mRequests<span class="token punctuation">.</span><span class="token function">valueAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> eventItem<span class="token punctuation">;</span>
        request<span class="token punctuation">.</span><span class="token function">initEventItem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eventItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将request队列的事件，分别添加到epoll实例</span>
        <span class="token keyword">int</span> epollResult <span class="token operator">=</span> <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>mEpollFd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> request<span class="token punctuation">.</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span> eventItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Looper对象中的mWakeEventFd添加到epoll监控，以及mRequests也添加到epoll的监控范围内。</p><h3 id="nativedestroy-销毁" tabindex="-1"><a class="header-anchor" href="#nativedestroy-销毁"><span>nativeDestroy 销毁</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>dispose<span class="token operator">-&gt;</span><span class="token function">nativeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>android_os_MessageQueue_nativeDestroy<span class="token operator">-&gt;</span>decStrong
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="常用结构体" tabindex="-1"><a class="header-anchor" href="#常用结构体"><span>常用结构体</span></a></h3><p>Message</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">Message</span> <span class="token punctuation">{</span>
    <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">what</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Message</span><span class="token punctuation">(</span><span class="token keyword">int</span> what<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">what</span><span class="token punctuation">(</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">int</span> what<span class="token punctuation">;</span> <span class="token comment">// 消息类型</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>信息bean</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span> <span class="token comment">//请求结构体</span>
    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ident<span class="token punctuation">;</span>
    <span class="token keyword">int</span> events<span class="token punctuation">;</span>
    <span class="token keyword">int</span> seq<span class="token punctuation">;</span>
    sp<span class="token operator">&lt;</span>LooperCallback<span class="token operator">&gt;</span> callback<span class="token punctuation">;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">initEventItem</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">epoll_event</span><span class="token operator">*</span> eventItem<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Response</span> <span class="token punctuation">{</span> <span class="token comment">//响应结构体</span>
    <span class="token keyword">int</span> events<span class="token punctuation">;</span>
    Request request<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">MessageEnvelope</span> <span class="token punctuation">{</span> <span class="token comment">//信封结构体</span>
    <span class="token function">MessageEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">uptime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">MessageEnvelope</span><span class="token punctuation">(</span><span class="token class-name">nsecs_t</span> uptime<span class="token punctuation">,</span> <span class="token keyword">const</span> sp<span class="token operator">&lt;</span>MessageHandler<span class="token operator">&gt;</span> handler<span class="token punctuation">,</span>
            <span class="token keyword">const</span> Message<span class="token operator">&amp;</span> message<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">uptime</span><span class="token punctuation">(</span>uptime<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">handler</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">message</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">nsecs_t</span> uptime<span class="token punctuation">;</span>
    sp<span class="token operator">&lt;</span>MessageHandler<span class="token operator">&gt;</span> handler<span class="token punctuation">;</span>
    Message message<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>MessageEnvelope正如其名字，信封。MessageEnvelope里面记录着收信人(handler)，发信时间(uptime)，信件内容(message)</li><li>采用mMessageEnvelopes 维护消息列表</li></ul><p>MessageHandler 消息处理</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>class MessageHandler <span class="token operator">:</span> public virtual RefBase <span class="token punctuation">{</span>
protected<span class="token operator">:</span>
    virtual <span class="token operator">~</span><span class="token function">MessageHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
public<span class="token operator">:</span>
    virtual <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token keyword">const</span> Message<span class="token operator">&amp;</span> message<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LooperCallback</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>class LooperCallback <span class="token operator">:</span> public virtual RefBase <span class="token punctuation">{</span>
protected<span class="token operator">:</span>
    virtual <span class="token operator">~</span><span class="token function">LooperCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
public<span class="token operator">:</span>
    <span class="token comment">//用于处理指定的文件描述符的poll事件</span>
    virtual <span class="token keyword">int</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> events<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="源码路径" tabindex="-1"><a class="header-anchor" href="#源码路径"><span>源码路径</span></a></h3><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>framework/base/core/java/andorid/os/MessageQueue.java
framework/base/core/jni/android_os_MessageQueue.cpp
framework/base/core/java/andorid/os/Looper.java

system/core/libutils/Looper.cpp
system/core/include/utils/Looper.h
system/core/libutils/RefBase.cpp

framework/base/native/android/looper.cpp
framework/native/include/android/looper.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41),k=[u];function r(d,v){return a(),e("div",null,k)}const f=s(i,[["render",r],["__file","handler native.html.vue"]]),w=JSON.parse('{"path":"/fe/framework/handler/handler%20native.html","title":"handler native层","lang":"zh-CN","frontmatter":{"title":"handler native层","date":"2024-04-23T11:47:50.000Z","order":2,"category":["framework"],"tag":["handler"],"description":"handler整体架构 handler架构handler架构 消息队列 消息队列消息队列 框架图框架图 Java层和Native层的MessageQueue通过JNI建立关联，彼此之间能相互调用 native层实现 Handler/Looper/Message 与java层没有真正关联，逻辑独立,单独实现 消息处理流程是先处理Native Messag...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/fe/framework/handler/handler%20native.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"handler native层"}],["meta",{"property":"og:description","content":"handler整体架构 handler架构handler架构 消息队列 消息队列消息队列 框架图框架图 Java层和Native层的MessageQueue通过JNI建立关联，彼此之间能相互调用 native层实现 Handler/Looper/Message 与java层没有真正关联，逻辑独立,单独实现 消息处理流程是先处理Native Messag..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T11:49:40.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"handler"}],["meta",{"property":"article:published_time","content":"2024-04-23T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T11:49:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"handler native层\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-23T11:47:50.000Z\\",\\"dateModified\\":\\"2024-04-24T11:49:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"handler整体架构","slug":"handler整体架构","link":"#handler整体架构","children":[]},{"level":3,"title":"消息队列","slug":"消息队列","link":"#消息队列","children":[]},{"level":3,"title":"native层关键方法","slug":"native层关键方法","link":"#native层关键方法","children":[]},{"level":3,"title":"发送消息sendMessage和唤醒","slug":"发送消息sendmessage和唤醒","link":"#发送消息sendmessage和唤醒","children":[]},{"level":3,"title":"nativeWake 唤醒poll循环","slug":"nativewake-唤醒poll循环","link":"#nativewake-唤醒poll循环","children":[]},{"level":3,"title":"nativePollOnce 取出消息和处理消息","slug":"nativepollonce-取出消息和处理消息","link":"#nativepollonce-取出消息和处理消息","children":[]},{"level":3,"title":"nativeInit 创建消息队列和Looper","slug":"nativeinit-创建消息队列和looper","link":"#nativeinit-创建消息队列和looper","children":[]},{"level":3,"title":"nativeDestroy 销毁","slug":"nativedestroy-销毁","link":"#nativedestroy-销毁","children":[]},{"level":3,"title":"常用结构体","slug":"常用结构体","link":"#常用结构体","children":[]},{"level":3,"title":"源码路径","slug":"源码路径","link":"#源码路径","children":[]}],"git":{"createdTime":1713917085000,"updatedTime":1713959380000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":3}]},"readingTime":{"minutes":4.94,"words":1481},"filePathRelative":"fe/framework/handler/handler native.md","localizedDate":"2024年4月23日","excerpt":"<h3>handler整体架构</h3>\\n<figure><figcaption>handler架构</figcaption></figure>\\n<h3>消息队列</h3>\\n<figure><figcaption>消息队列</figcaption></figure>\\n<figure><figcaption>框架图</figcaption></figure>\\n<ul>\\n<li>Java层和Native层的MessageQueue通过JNI建立关联，彼此之间能相互调用</li>\\n<li>native层实现 Handler/Looper/Message 与java层没有真正关联，逻辑独立,单独实现</li>\\n<li>消息处理流程是先处理Native Message，再处理Native Request，最后处理Java Message (上层消息少,响应时间长的原因)</li>\\n</ul>","autoDesc":true}');export{f as comp,w as data};
