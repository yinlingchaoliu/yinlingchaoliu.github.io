import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as n,a as o}from"./app-CtvCwAmI.js";const a={},r=o("p",null,"原则：找相同代码，责任职能划分，减少相同代码 1）字段上移/下移 要点：部分与整体关系 2） 函数上移 要点：有些函数，在各个子类中产生完全相同效果 3）构造函数本体上移 要点：在超类新建一个构造函数，并在子类构造函数中调用它 4）函数下移 要点：超类中某个函数只与部分子类有关 5）提炼子类 要点：类中某些特性只被某些（而非全部）实例用到 方案：新建一个子类，将上面所说的那一部分特性转移到子类中 6）提炼超类 要点：两个类有类似特性 方案：为这两个类建立一个超类，将相同特性转移至超类 7）提炼接口 要点：将相同的子集提炼到一个独立接口中 8）折叠继承体系 要点：超类和子类之间无太大区别 方案：将他们合为一体 9）塑造模板函数 方案：你有一些子类，其中相应的某些函数以相同顺序执行类似操作，但各个操作的细节上有所不同。 10）以委托取代继承 要点：子类只使用超类接口中的一部分 11）以继承取代委托 要点：委托函数太多",-1),c=[r];function i(p,m){return e(),n("div",null,c)}const E=t(a,[["render",i],["__file","处理继承关系.html.vue"]]),d=JSON.parse('{"path":"/basis/refactor/%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/%E5%A4%84%E7%90%86%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.html","title":"处理继承关系","lang":"zh-CN","frontmatter":{"title":"处理继承关系","date":"2024-03-24T11:47:50.000Z","category":["重构-改善代码设计"],"tag":["archive"],"description":"原则：找相同代码，责任职能划分，减少相同代码 1）字段上移/下移 要点：部分与整体关系 2） 函数上移 要点：有些函数，在各个子类中产生完全相同效果 3）构造函数本体上移 要点：在超类新建一个构造函数，并在子类构造函数中调用它 4）函数下移 要点：超类中某个函数只与部分子类有关 5）提炼子类 要点：类中某些特性只被某些（而非全部）实例用到 方案：新建一...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/refactor/%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/%E5%A4%84%E7%90%86%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"处理继承关系"}],["meta",{"property":"og:description","content":"原则：找相同代码，责任职能划分，减少相同代码 1）字段上移/下移 要点：部分与整体关系 2） 函数上移 要点：有些函数，在各个子类中产生完全相同效果 3）构造函数本体上移 要点：在超类新建一个构造函数，并在子类构造函数中调用它 4）函数下移 要点：超类中某个函数只与部分子类有关 5）提炼子类 要点：类中某些特性只被某些（而非全部）实例用到 方案：新建一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T14:17:18.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-24T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T14:17:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"处理继承关系\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-24T11:47:50.000Z\\",\\"dateModified\\":\\"2024-03-25T14:17:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711376238000,"updatedTime":1711376238000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":1.24,"words":372},"filePathRelative":"basis/refactor/重构-改善代码设计/处理继承关系.md","localizedDate":"2024年3月24日","excerpt":"<p>原则：找相同代码，责任职能划分，减少相同代码\\n1）字段上移/下移\\n要点：部分与整体关系\\n2） 函数上移\\n要点：有些函数，在各个子类中产生完全相同效果\\n3）构造函数本体上移\\n要点：在超类新建一个构造函数，并在子类构造函数中调用它\\n4）函数下移\\n要点：超类中某个函数只与部分子类有关\\n5）提炼子类\\n要点：类中某些特性只被某些（而非全部）实例用到\\n方案：新建一个子类，将上面所说的那一部分特性转移到子类中\\n6）提炼超类\\n要点：两个类有类似特性\\n方案：为这两个类建立一个超类，将相同特性转移至超类\\n7）提炼接口\\n要点：将相同的子集提炼到一个独立接口中\\n8）折叠继承体系\\n要点：超类和子类之间无太大区别\\n方案：将他们合为一体\\n9）塑造模板函数\\n方案：你有一些子类，其中相应的某些函数以相同顺序执行类似操作，但各个操作的细节上有所不同。\\n10）以委托取代继承\\n要点：子类只使用超类接口中的一部分\\n11）以继承取代委托\\n要点：委托函数太多</p>","autoDesc":true}');export{E as comp,d as data};
