import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,a as t}from"./app-CtvCwAmI.js";const o={},i=t("p",null,"复用、暴露、再导出 ####1、谨慎使用第三方API 封装第三方Api，不要将第三方api接口暴露出来 让第三方库对用户不可见 ####2、只暴露抽象内容 暴露内容越多，留给API使用或演进的余地越小",-1),r=t("p",null,"####3、强化API的一致性 要约束一个方法行为，最好方法避免这个方法被覆盖 要约束一大堆方法，最好的方法编程final类",-1),c=t("p",null,"####4、代理和组合 面向对象的核心概念是继承，所有内容围绕这个概念展开 多用组合，少用继承",-1),p=t("p",null,"####5、避免API误用 凡是只要有可能，那么就一定有人会去做，要牢记API用户绝对是一个有创意的群体",-1),A=[i,r,c,p];function l(s,m){return a(),n("div",null,A)}const h=e(o,[["render",l],["__file","第10章-与其他API协作.html.vue"]]),_=JSON.parse('{"path":"/basis/architect/%E8%BD%AF%E4%BB%B6%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E8%89%BA%E6%9C%AF/%E7%AC%AC10%E7%AB%A0-%E4%B8%8E%E5%85%B6%E4%BB%96API%E5%8D%8F%E4%BD%9C.html","title":"第10章-与其他API协作","lang":"zh-CN","frontmatter":{"title":"第10章-与其他API协作","date":"2024-03-24T11:47:50.000Z","category":["软件框架设计艺术"],"tag":["archive"],"description":"复用、暴露、再导出 ####1、谨慎使用第三方API 封装第三方Api，不要将第三方api接口暴露出来 让第三方库对用户不可见 ####2、只暴露抽象内容 暴露内容越多，留给API使用或演进的余地越小 ####3、强化API的一致性 要约束一个方法行为，最好方法避免这个方法被覆盖 要约束一大堆方法，最好的方法编程final类 ####4、代理和组合 面...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/architect/%E8%BD%AF%E4%BB%B6%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E8%89%BA%E6%9C%AF/%E7%AC%AC10%E7%AB%A0-%E4%B8%8E%E5%85%B6%E4%BB%96API%E5%8D%8F%E4%BD%9C.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"第10章-与其他API协作"}],["meta",{"property":"og:description","content":"复用、暴露、再导出 ####1、谨慎使用第三方API 封装第三方Api，不要将第三方api接口暴露出来 让第三方库对用户不可见 ####2、只暴露抽象内容 暴露内容越多，留给API使用或演进的余地越小 ####3、强化API的一致性 要约束一个方法行为，最好方法避免这个方法被覆盖 要约束一大堆方法，最好的方法编程final类 ####4、代理和组合 面..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T14:17:18.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-24T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T14:17:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第10章-与其他API协作\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-24T11:47:50.000Z\\",\\"dateModified\\":\\"2024-03-25T14:17:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711376238000,"updatedTime":1711376238000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":0.75,"words":226},"filePathRelative":"basis/architect/软件框架设计艺术/第10章-与其他API协作.md","localizedDate":"2024年3月24日","excerpt":"<p>复用、暴露、再导出\\n####1、谨慎使用第三方API\\n封装第三方Api，不要将第三方api接口暴露出来\\n让第三方库对用户不可见\\n####2、只暴露抽象内容\\n暴露内容越多，留给API使用或演进的余地越小</p>\\n<p>####3、强化API的一致性\\n要约束一个方法行为，最好方法避免这个方法被覆盖\\n要约束一大堆方法，最好的方法编程final类</p>\\n<p>####4、代理和组合\\n面向对象的核心概念是继承，所有内容围绕这个概念展开\\n多用组合，少用继承</p>\\n<p>####5、避免API误用\\n凡是只要有可能，那么就一定有人会去做，要牢记API用户绝对是一个有创意的群体</p>\\n","autoDesc":true}');export{h as comp,_ as data};
