import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as n,c as l,a as e,b as r,d as o,f as s}from"./app-CtvCwAmI.js";const c="/assets/design-6UzMMmC-.png",d={},p=s('<h5 id="设计模式定义" tabindex="-1"><a class="header-anchor" href="#设计模式定义"><span>设计模式定义</span></a></h5><p>设计模式在设计者是一种流行的思考设计问题的方法，是一套被反复使用，多数人知晓的，经过分类编目的，代码设计经验的总结。使用了设计模式，是为了使代码具有可重用性，让代码更容易被他人理解和保证代码的可靠性</p><h5 id="设计模式按照类型划分" tabindex="-1"><a class="header-anchor" href="#设计模式按照类型划分"><span>设计模式按照类型划分</span></a></h5><ul><li>创建型设计模式：用来解耦对象的实例化过程。</li><li>结构型设计模式：将类和对象按照一定规则组合成一个更加强大的结构体。</li><li>行为型设计模式：定义类和对象的交互行为。</li></ul><h5 id="设计模式简单定义" tabindex="-1"><a class="header-anchor" href="#设计模式简单定义"><span>设计模式简单定义</span></a></h5><figure><img src="'+c+'" alt="23种设计模式简单定义" tabindex="0" loading="lazy"><figcaption>23种设计模式简单定义</figcaption></figure><h5 id="文字版" tabindex="-1"><a class="header-anchor" href="#文字版"><span>文字版</span></a></h5><h6 id="创建型设计模式" tabindex="-1"><a class="header-anchor" href="#创建型设计模式"><span>创建型设计模式</span></a></h6><ul><li>单例模式：确保一个类只有一个实例，提供一个全局访问点</li><li>建造者模式：封装一个复杂对象过程，按照步骤构建对象</li><li>原型模式：通过复制现有实例创建新实例</li><li>简单工厂模式：一个工厂类根据传入参数决定创建哪一种产品实例</li><li>工厂方法模式：定义一个用于创建对象的接口，让子类决定实例化那个类</li><li>抽象工厂模式：创建相关依赖对象家族，而无须指定具体类</li></ul><h6 id="结构型设计模式" tabindex="-1"><a class="header-anchor" href="#结构型设计模式"><span>结构型设计模式</span></a></h6><ul><li>适配器模式：将一个类的方法或者接口转换成客户希望另一个接口</li><li>组合模式：将对象组成成树形结构以表示“整体-部分”的层次结构</li><li>装饰模式：动态的给对象添加新的功能</li><li>外观模式：对外提供一个统一方法，用来访问子系统中一群接口</li><li>桥接模式：将抽象部分与实现部分分离，使他们都可以独立进行变化</li><li>享元模式：通过共享技术来有效支持大量细粒度的对象</li><li>代理模式：为其他对象提供一种代理以控制对这个对象的访问</li></ul><h6 id="行为型设计模式" tabindex="-1"><a class="header-anchor" href="#行为型设计模式"><span>行为型设计模式</span></a></h6><ul><li>模板模式：定义一个算法结构，而将一些步骤延迟到子类实现</li><li>解释器模式：定义一个语言，定义它的文法的一种表示，并定义一个解释器</li><li>策略模式：定义一系列算法，把它们封装起来，并且使它们可以互相替换</li><li>状态模式：允许一个对象在其内部状态改变时改变它的行为</li><li>观察者模式：对象间一对多依赖关系，一个对象改变，依赖于它对象得到通知并更新</li><li>备忘录模式：在不破坏封装前提下，保存对象内部状态</li><li>中介者模式:用一个中介对象来封装一系列对象交互</li><li>命令模式：将命令请求封装成一个对象，可以将不同请求来进行参数化</li><li>访问者模式：在不改变数据结构的前提下，增加作用于一组元素对象新功能</li><li>责任链模式：将请求的发送者和接受者解耦，使得多个对象都有处理这个请求的机会</li><li>迭代器模式：一种遍历访问容器对象中各个元素的方法，不暴露该对象内部结构</li></ul><h5 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h5>',14),h={href:"https://github.com/BeesAndroid/BeesAndroid/blob/master/doc/Android%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.md",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,"《Android源码设计模式解析与实战》",-1);function E(u,_){const t=a("ExternalLinkIcon");return n(),l("div",null,[p,e("p",null,[e("a",h,[r("郭孝星:Android系统设计原则与设计模式"),o(t)])]),m])}const f=i(d,[["render",E],["__file","23种设计模式简单定义.html.vue"]]),b=JSON.parse('{"path":"/basis/design-pattern/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E5%8D%95%E5%AE%9A%E4%B9%89.html","title":"23种设计模式简单定义","lang":"zh-CN","frontmatter":{"title":"23种设计模式简单定义","date":"2024-03-24T11:47:50.000Z","category":["设计模式"],"tag":["archive"],"description":"设计模式定义 设计模式在设计者是一种流行的思考设计问题的方法，是一套被反复使用，多数人知晓的，经过分类编目的，代码设计经验的总结。使用了设计模式，是为了使代码具有可重用性，让代码更容易被他人理解和保证代码的可靠性 设计模式按照类型划分 创建型设计模式：用来解耦对象的实例化过程。 结构型设计模式：将类和对象按照一定规则组合成一个更加强大的结构体。 行为型...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/design-pattern/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E5%8D%95%E5%AE%9A%E4%B9%89.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"23种设计模式简单定义"}],["meta",{"property":"og:description","content":"设计模式定义 设计模式在设计者是一种流行的思考设计问题的方法，是一套被反复使用，多数人知晓的，经过分类编目的，代码设计经验的总结。使用了设计模式，是为了使代码具有可重用性，让代码更容易被他人理解和保证代码的可靠性 设计模式按照类型划分 创建型设计模式：用来解耦对象的实例化过程。 结构型设计模式：将类和对象按照一定规则组合成一个更加强大的结构体。 行为型..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T14:17:18.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-24T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T14:17:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"23种设计模式简单定义\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-24T11:47:50.000Z\\",\\"dateModified\\":\\"2024-03-25T14:17:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711376238000,"updatedTime":1711376238000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":3.07,"words":921},"filePathRelative":"basis/design-pattern/23种设计模式简单定义.md","localizedDate":"2024年3月24日","excerpt":"<h5>设计模式定义</h5>\\n<p>设计模式在设计者是一种流行的思考设计问题的方法，是一套被反复使用，多数人知晓的，经过分类编目的，代码设计经验的总结。使用了设计模式，是为了使代码具有可重用性，让代码更容易被他人理解和保证代码的可靠性</p>\\n<h5>设计模式按照类型划分</h5>\\n<ul>\\n<li>创建型设计模式：用来解耦对象的实例化过程。</li>\\n<li>结构型设计模式：将类和对象按照一定规则组合成一个更加强大的结构体。</li>\\n<li>行为型设计模式：定义类和对象的交互行为。</li>\\n</ul>\\n<h5>设计模式简单定义</h5>\\n<figure><figcaption>23种设计模式简单定义</figcaption></figure>","autoDesc":true}');export{f as comp,b as data};
