import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CtvCwAmI.js";const e="/assets/media-DHjs-hcI.png",p="/assets/register-RfFE3thY.png",o="/assets/smstatus-COZuhIlw.png",c={},i=t('<h3 id="注册服务" tabindex="-1"><a class="header-anchor" href="#注册服务"><span>注册服务</span></a></h3><figure><img src="'+e+'" alt="media类图" tabindex="0" loading="lazy"><figcaption>media类图</figcaption></figure><figure><img src="'+p+'" alt="注册时序图" tabindex="0" loading="lazy"><figcaption>注册时序图</figcaption></figure><figure><img src="'+o+`" alt="状态流转图" tabindex="0" loading="lazy"><figcaption>状态流转图</figcaption></figure><h4 id="流程" tabindex="-1"><a class="header-anchor" href="#流程"><span>流程</span></a></h4><ol><li>MediaPlayerService进程调用ioctl()向Binder驱动发送IPC数据</li><li>Binder驱动收到该Binder请求，生成BR_TRANSACTION命令</li><li>Service Manager的线程收到请求，调用服务注册函数将服务”media.player”注册到服务目录中。当服务注册完成后，生成IPC应答数据(BC_REPLY)</li><li>Binder驱动收到该Binder应答请求，生成BR_REPLY命令，在MediaPlayerService收到该命令后，知道服务注册完成便可以正常使用</li></ol><h4 id="本质" tabindex="-1"><a class="header-anchor" href="#本质"><span>本质:</span></a></h4><ul><li>client和serviceManager通过binder驱动通信,</li><li>client在驱动写入指定数据，登记状态。</li><li>serverManager在looper中发现数据，登记注册服务，生成应答数据通知client</li><li>client收到应答数据，完成注册服务。</li></ul><h3 id="核心代码" tabindex="-1"><a class="header-anchor" href="#核心代码"><span>核心代码</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc __unused<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">InitializeIcuOrDie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获得ProcessState实例对象【见小节2.1】</span>
    sp<span class="token operator">&lt;</span>ProcessState<span class="token operator">&gt;</span> <span class="token function">proc</span><span class="token punctuation">(</span>ProcessState<span class="token operator">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取BpServiceManager对象</span>
    sp<span class="token operator">&lt;</span>IServiceManager<span class="token operator">&gt;</span> sm <span class="token operator">=</span> <span class="token function">defaultServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    AudioFlinger<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//注册多媒体服务  【见小节3.1】</span>
    MediaPlayerService<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ResourceManagerService<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    CameraService<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    AudioPolicyService<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    SoundTriggerHwService<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    RadioService<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">registerExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//启动Binder线程池</span>
    ProcessState<span class="token operator">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">startThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//当前线程加入到线程池</span>
    IPCThreadState<span class="token operator">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">joinThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

<span class="token keyword">void</span> MediaPlayerService<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//注册服务【见小节3.2】</span>
    <span class="token function">defaultServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">addService</span><span class="token punctuation">(</span><span class="token function">String16</span><span class="token punctuation">(</span><span class="token string">&quot;media.player&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new <span class="token function">MediaPlayerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

virtual <span class="token class-name">status_t</span> <span class="token function">addService</span><span class="token punctuation">(</span><span class="token keyword">const</span> String16<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">const</span> sp<span class="token operator">&lt;</span>IBinder<span class="token operator">&gt;</span><span class="token operator">&amp;</span> service<span class="token punctuation">,</span> bool allowIsolated<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Parcel data<span class="token punctuation">,</span> reply<span class="token punctuation">;</span> <span class="token comment">//Parcel是数据通信包</span>
    <span class="token comment">//写入头信息&quot;android.os.IServiceManager&quot;</span>
    data<span class="token punctuation">.</span><span class="token function">writeInterfaceToken</span><span class="token punctuation">(</span>IServiceManager<span class="token operator">::</span><span class="token function">getInterfaceDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
    data<span class="token punctuation">.</span><span class="token function">writeString16</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// name为 &quot;media.player&quot;</span>
    data<span class="token punctuation">.</span><span class="token function">writeStrongBinder</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// MediaPlayerService对象【见小节3.2.1】</span>
    data<span class="token punctuation">.</span><span class="token function">writeInt32</span><span class="token punctuation">(</span>allowIsolated <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// allowIsolated= false</span>
    <span class="token comment">//remote()指向的是BpBinder对象【见小节3.3】</span>
    <span class="token class-name">status_t</span> err <span class="token operator">=</span> <span class="token function">remote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">transact</span><span class="token punctuation">(</span>ADD_SERVICE_TRANSACTION<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> err <span class="token operator">==</span> NO_ERROR <span class="token operator">?</span> reply<span class="token punctuation">.</span><span class="token function">readExceptionCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等待与驱动通信</p><p>IPC.waitForResponse talkWithDriver</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">status_t</span> IPCThreadState<span class="token operator">::</span><span class="token function">waitForResponse</span><span class="token punctuation">(</span>Parcel <span class="token operator">*</span>reply<span class="token punctuation">,</span> <span class="token class-name">status_t</span> <span class="token operator">*</span>acquireResult<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">int32_t</span> cmd<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> err<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token function">talkWithDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> NO_ERROR<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 【见流程2.8】</span>
        err <span class="token operator">=</span> mIn<span class="token punctuation">.</span><span class="token function">errorCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&lt;</span> NO_ERROR<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mIn<span class="token punctuation">.</span><span class="token function">dataAvail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>

        cmd <span class="token operator">=</span> mIn<span class="token punctuation">.</span><span class="token function">readInt32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> BR_TRANSACTION_COMPLETE<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">case</span> BR_DEAD_REPLY<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">case</span> BR_FAILED_REPLY<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">case</span> BR_ACQUIRE_RESULT<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">case</span> BR_REPLY<span class="token operator">:</span>
            <span class="token punctuation">{</span>
              binder_transaction_data tr<span class="token punctuation">;</span>
              err <span class="token operator">=</span> mIn<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>reply<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> TF_STATUS_CODE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      reply<span class="token operator">-&gt;</span><span class="token function">ipcSetDataReference</span><span class="token punctuation">(</span>
                          reinterpret_cast<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span>
                          tr<span class="token punctuation">.</span>data_size<span class="token punctuation">,</span>
                          reinterpret_cast<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token class-name">binder_size_t</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>offsets<span class="token punctuation">)</span><span class="token punctuation">,</span>
                          tr<span class="token punctuation">.</span>offsets_size<span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">binder_size_t</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                          freeBuffer<span class="token punctuation">,</span> this<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                  <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">goto</span> finish<span class="token punctuation">;</span>

            <span class="token keyword">default</span><span class="token operator">:</span>
                err <span class="token operator">=</span> <span class="token function">executeCommand</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> NO_ERROR<span class="token punctuation">)</span> <span class="token keyword">goto</span> finish<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取服务" tabindex="-1"><a class="header-anchor" href="#获取服务"><span>获取服务</span></a></h3><p>请求服务(getService)过程，就是向servicemanager进程查询指定服务，</p><p>当执行binder_transaction()时，会区分请求服务所属进程情况。</p><ol><li>当请求服务的进程与服务属于不同进程，则为请求服务所在进程创建binder_ref对象，指向服务进程中的binder_node; 最终readStrongBinder()，返回的是BpBinder对象；</li><li>当请求服务的进程与服务属于同一进程，则不再创建新对象，只是引用计数加1，并且修改type为BINDER_TYPE_BINDER或BINDER_TYPE_WEAK_BINDER。 最终readStrongBinder()，返回的是BBinder对象的真实子类；</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>sp<span class="token operator">&lt;</span>IMediaPlayerService<span class="token operator">&gt;</span><span class="token operator">&amp;</span>
IMediaDeathNotifier<span class="token operator">::</span><span class="token function">getMediaPlayerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Mutex<span class="token operator">::</span>Autolock <span class="token function">_l</span><span class="token punctuation">(</span>sServiceLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sMediaPlayerService <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sp<span class="token operator">&lt;</span>IServiceManager<span class="token operator">&gt;</span> sm <span class="token operator">=</span> <span class="token function">defaultServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取ServiceManager</span>
        sp<span class="token operator">&lt;</span>IBinder<span class="token operator">&gt;</span> binder<span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            <span class="token comment">//获取名为&quot;media.player&quot;的服务 </span>
            binder <span class="token operator">=</span> sm<span class="token operator">-&gt;</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token function">String16</span><span class="token punctuation">(</span><span class="token string">&quot;media.player&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>binder <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.5s</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>sDeathNotifier <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sDeathNotifier <span class="token operator">=</span> new <span class="token function">DeathNotifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建死亡通知对象</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//将死亡通知连接到binder 【见流程14】</span>
        binder<span class="token operator">-&gt;</span><span class="token function">linkToDeath</span><span class="token punctuation">(</span>sDeathNotifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sMediaPlayerService <span class="token operator">=</span> interface_cast<span class="token operator">&lt;</span>IMediaPlayerService<span class="token operator">&gt;</span><span class="token punctuation">(</span>binder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sMediaPlayerService<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


virtual sp<span class="token operator">&lt;</span>IBinder<span class="token operator">&gt;</span> <span class="token function">getService</span><span class="token punctuation">(</span><span class="token keyword">const</span> String16<span class="token operator">&amp;</span> name<span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">unsigned</span> n<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            sp<span class="token operator">&lt;</span>IBinder<span class="token operator">&gt;</span> svc <span class="token operator">=</span> <span class="token function">checkService</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>svc <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> svc<span class="token punctuation">;</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


virtual sp<span class="token operator">&lt;</span>IBinder<span class="token operator">&gt;</span> <span class="token function">checkService</span><span class="token punctuation">(</span> <span class="token keyword">const</span> String16<span class="token operator">&amp;</span> name<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
    Parcel data<span class="token punctuation">,</span> reply<span class="token punctuation">;</span>
    <span class="token comment">//写入RPC头</span>
    data<span class="token punctuation">.</span><span class="token function">writeInterfaceToken</span><span class="token punctuation">(</span>IServiceManager<span class="token operator">::</span><span class="token function">getInterfaceDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//写入服务名</span>
    data<span class="token punctuation">.</span><span class="token function">writeString16</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">remote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">transact</span><span class="token punctuation">(</span>CHECK_SERVICE_TRANSACTION<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">readStrongBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码路径" tabindex="-1"><a class="header-anchor" href="#代码路径"><span>代码路径</span></a></h3><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>framework/native/libs/binder/
  <span class="token list punctuation">-</span> Binder.cpp
  <span class="token list punctuation">-</span> BpBinder.cpp
  <span class="token list punctuation">-</span> IPCThreadState.cpp
  <span class="token list punctuation">-</span> ProcessState.cpp
  <span class="token list punctuation">-</span> IServiceManager.cpp
  <span class="token list punctuation">-</span> IInterface.cpp
  <span class="token list punctuation">-</span> Parcel.cpp

frameworks/native/include/binder/
  <span class="token list punctuation">-</span> IInterface.h (包括BnInterface, BpInterface)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),l=[i];function u(r,k){return s(),a("div",null,l)}const m=n(c,[["render",u],["__file","注册和获取服务.html.vue"]]),b=JSON.parse('{"path":"/fe/framework/binder/%E6%B3%A8%E5%86%8C%E5%92%8C%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1.html","title":"注册和获取服务","lang":"zh-CN","frontmatter":{"title":"注册和获取服务","date":"2024-04-14T11:47:50.000Z","order":4,"category":["framework"],"tag":["binder"],"description":"注册服务 media类图media类图 注册时序图注册时序图 状态流转图状态流转图 流程 MediaPlayerService进程调用ioctl()向Binder驱动发送IPC数据 Binder驱动收到该Binder请求，生成BR_TRANSACTION命令 Service Manager的线程收到请求，调用服务注册函数将服务”media.player...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/fe/framework/binder/%E6%B3%A8%E5%86%8C%E5%92%8C%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"注册和获取服务"}],["meta",{"property":"og:description","content":"注册服务 media类图media类图 注册时序图注册时序图 状态流转图状态流转图 流程 MediaPlayerService进程调用ioctl()向Binder驱动发送IPC数据 Binder驱动收到该Binder请求，生成BR_TRANSACTION命令 Service Manager的线程收到请求，调用服务注册函数将服务”media.player..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-22T23:46:25.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"binder"}],["meta",{"property":"article:published_time","content":"2024-04-14T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-22T23:46:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"注册和获取服务\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-14T11:47:50.000Z\\",\\"dateModified\\":\\"2024-04-22T23:46:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"注册服务","slug":"注册服务","link":"#注册服务","children":[]},{"level":3,"title":"核心代码","slug":"核心代码","link":"#核心代码","children":[]},{"level":3,"title":"获取服务","slug":"获取服务","link":"#获取服务","children":[]},{"level":3,"title":"代码路径","slug":"代码路径","link":"#代码路径","children":[]}],"git":{"createdTime":1713319747000,"updatedTime":1713829585000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":3}]},"readingTime":{"minutes":2.79,"words":836},"filePathRelative":"fe/framework/binder/注册和获取服务.md","localizedDate":"2024年4月14日","excerpt":"<h3>注册服务</h3>\\n<figure><figcaption>media类图</figcaption></figure>\\n<figure><figcaption>注册时序图</figcaption></figure>\\n<figure><figcaption>状态流转图</figcaption></figure>\\n<h4>流程</h4>\\n<ol>\\n<li>MediaPlayerService进程调用ioctl()向Binder驱动发送IPC数据</li>\\n<li>Binder驱动收到该Binder请求，生成BR_TRANSACTION命令</li>\\n<li>Service Manager的线程收到请求，调用服务注册函数将服务”media.player”注册到服务目录中。当服务注册完成后，生成IPC应答数据(BC_REPLY)</li>\\n<li>Binder驱动收到该Binder应答请求，生成BR_REPLY命令，在MediaPlayerService收到该命令后，知道服务注册完成便可以正常使用</li>\\n</ol>","autoDesc":true}');export{m as comp,b as data};
