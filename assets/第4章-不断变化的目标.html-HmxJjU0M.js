import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as i,f as a}from"./app-CtvCwAmI.js";const n={},l=a(`<p>判断一个API是否优秀，并不是简单根据第一个版本给出判断，而是看多年后，该API是否还能存在，是否仍旧保持不错</p><p>清单</p><ul><li>1、第一个版本远非完美</li><li>2、API向后兼容（stable API）</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>源代码兼容
二进制兼容
功能兼容，api的副作用一致
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>3、面向用例的重要性 了解用户两种方式： 1、找一些用户，对其研究 2、基于用例，用例站在用户视角 3、结合使用场景 4、文档</p></li><li><p>4、设计评审 解决方案：从团队成员中选择一些技术最好的人，指导他们来设计自己所需的API，这样会造成一致性问题。设计评审会达成一致性</p></li></ul><p>背景：过去人们一直认为设计工作不能由一个集体来完成，他需要一个架构师对所有设计进行决策，当然可以简化很多工作，但存在一个规模的限制。职责：设计，维护，传道（告诉别人如何使用）。唯一架构师的方式会受到规模限制。</p><p>优秀API的规则</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>1.用例驱动API设计
2.API设计的一致性
3.简单清晰的API
4.少即是多
5.支持改进
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>5、一个API的生命周期 开发API过程其实就是一个沟通交流的过程。沟通双方就是API用户和API设计者</li></ul><p>API是开发人员与用户的沟通方式</p><ul><li>6、逐步改善</li></ul><p>软件熵增加，采用推到重来这种方法，很难从根本上解决问题</p><p>解决方案：改变工作方式（即下篇设计实战）</p>`,13),r=[l];function c(o,s){return t(),i("div",null,r)}const A=e(n,[["render",c],["__file","第4章-不断变化的目标.html.vue"]]),m=JSON.parse('{"path":"/basis/architect/%E8%BD%AF%E4%BB%B6%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E8%89%BA%E6%9C%AF/%E7%AC%AC4%E7%AB%A0-%E4%B8%8D%E6%96%AD%E5%8F%98%E5%8C%96%E7%9A%84%E7%9B%AE%E6%A0%87.html","title":"第4章-不断变化的目标","lang":"zh-CN","frontmatter":{"title":"第4章-不断变化的目标","date":"2024-03-24T11:47:50.000Z","category":["软件框架设计艺术"],"tag":["archive"],"description":"判断一个API是否优秀，并不是简单根据第一个版本给出判断，而是看多年后，该API是否还能存在，是否仍旧保持不错 清单 1、第一个版本远非完美 2、API向后兼容（stable API） 3、面向用例的重要性 了解用户两种方式： 1、找一些用户，对其研究 2、基于用例，用例站在用户视角 3、结合使用场景 4、文档 4、设计评审 解决方案：从团队成员中选择...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/architect/%E8%BD%AF%E4%BB%B6%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E8%89%BA%E6%9C%AF/%E7%AC%AC4%E7%AB%A0-%E4%B8%8D%E6%96%AD%E5%8F%98%E5%8C%96%E7%9A%84%E7%9B%AE%E6%A0%87.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"第4章-不断变化的目标"}],["meta",{"property":"og:description","content":"判断一个API是否优秀，并不是简单根据第一个版本给出判断，而是看多年后，该API是否还能存在，是否仍旧保持不错 清单 1、第一个版本远非完美 2、API向后兼容（stable API） 3、面向用例的重要性 了解用户两种方式： 1、找一些用户，对其研究 2、基于用例，用例站在用户视角 3、结合使用场景 4、文档 4、设计评审 解决方案：从团队成员中选择..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T14:17:18.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-24T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T14:17:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第4章-不断变化的目标\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-24T11:47:50.000Z\\",\\"dateModified\\":\\"2024-03-25T14:17:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711376238000,"updatedTime":1711376238000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":1.52,"words":457},"filePathRelative":"basis/architect/软件框架设计艺术/第4章-不断变化的目标.md","localizedDate":"2024年3月24日","excerpt":"<p>判断一个API是否优秀，并不是简单根据第一个版本给出判断，而是看多年后，该API是否还能存在，是否仍旧保持不错</p>\\n<p>清单</p>\\n<ul>\\n<li>1、第一个版本远非完美</li>\\n<li>2、API向后兼容（stable API）</li>\\n</ul>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>源代码兼容\\n二进制兼容\\n功能兼容，api的副作用一致\\n</code></pre></div><ul>\\n<li>\\n<p>3、面向用例的重要性\\n了解用户两种方式：\\n1、找一些用户，对其研究\\n2、基于用例，用例站在用户视角\\n3、结合使用场景\\n4、文档</p>\\n</li>\\n<li>\\n<p>4、设计评审\\n解决方案：从团队成员中选择一些技术最好的人，指导他们来设计自己所需的API，这样会造成一致性问题。设计评审会达成一致性</p>\\n</li>\\n</ul>","autoDesc":true}');export{A as comp,m as data};
