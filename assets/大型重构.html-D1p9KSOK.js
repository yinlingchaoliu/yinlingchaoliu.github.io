import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o,c as n,a as t}from"./app-CtvCwAmI.js";const a={},r=t("p",null,"####大型重构 原则：单一职责",-1),c=t("p",null,"1）梳理并分解继承体系 坏味道：某个继承体系同时承担两项责任 手法：建立那个继承体系，并通过委托关系让其中一个可以调用另一个",-1),i=t("p",null,"2）将过程化设计转化对象设计 坏味道：你手上一些传统过程化风格的代码 手法：将数据记录变成对象，将大块行为分成小块，并将行为移入相关对象中",-1),p=t("p",null,"3)将逻辑与视图分离（MVC） 坏味道：视图包含业务逻辑",-1),s=t("p",null,"4）提炼继承体系 坏味道：你有某个类做了太多工作，其中一部分工作是以大量条件表达式完成的 手法：建立继承体系，以一个子类表示一种特殊情况",-1),l=[r,c,i,p,s];function m(d,E){return o(),n("div",null,l)}const u=e(a,[["render",m],["__file","大型重构.html.vue"]]),g=JSON.parse('{"path":"/basis/refactor/%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/%E5%A4%A7%E5%9E%8B%E9%87%8D%E6%9E%84.html","title":"大型重构","lang":"zh-CN","frontmatter":{"title":"大型重构","date":"2024-03-24T11:47:50.000Z","category":["重构-改善代码设计"],"tag":["archive"],"description":"####大型重构 原则：单一职责 1）梳理并分解继承体系 坏味道：某个继承体系同时承担两项责任 手法：建立那个继承体系，并通过委托关系让其中一个可以调用另一个 2）将过程化设计转化对象设计 坏味道：你手上一些传统过程化风格的代码 手法：将数据记录变成对象，将大块行为分成小块，并将行为移入相关对象中 3)将逻辑与视图分离（MVC） 坏味道：视图包含业务逻...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/refactor/%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/%E5%A4%A7%E5%9E%8B%E9%87%8D%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"大型重构"}],["meta",{"property":"og:description","content":"####大型重构 原则：单一职责 1）梳理并分解继承体系 坏味道：某个继承体系同时承担两项责任 手法：建立那个继承体系，并通过委托关系让其中一个可以调用另一个 2）将过程化设计转化对象设计 坏味道：你手上一些传统过程化风格的代码 手法：将数据记录变成对象，将大块行为分成小块，并将行为移入相关对象中 3)将逻辑与视图分离（MVC） 坏味道：视图包含业务逻..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T14:17:18.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-24T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T14:17:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"大型重构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-24T11:47:50.000Z\\",\\"dateModified\\":\\"2024-03-25T14:17:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711376238000,"updatedTime":1711376238000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":0.78,"words":233},"filePathRelative":"basis/refactor/重构-改善代码设计/大型重构.md","localizedDate":"2024年3月24日","excerpt":"<p>####大型重构\\n原则：单一职责</p>\\n<p>1）梳理并分解继承体系\\n坏味道：某个继承体系同时承担两项责任\\n手法：建立那个继承体系，并通过委托关系让其中一个可以调用另一个</p>\\n<p>2）将过程化设计转化对象设计\\n坏味道：你手上一些传统过程化风格的代码\\n手法：将数据记录变成对象，将大块行为分成小块，并将行为移入相关对象中</p>\\n<p>3)将逻辑与视图分离（MVC）\\n坏味道：视图包含业务逻辑</p>\\n<p>4）提炼继承体系\\n坏味道：你有某个类做了太多工作，其中一部分工作是以大量条件表达式完成的\\n手法：建立继承体系，以一个子类表示一种特殊情况</p>\\n","autoDesc":true}');export{u as comp,g as data};
