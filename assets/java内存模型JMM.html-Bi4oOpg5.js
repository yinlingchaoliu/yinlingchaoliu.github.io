import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as i,a}from"./app-CtvCwAmI.js";const o={},n=a("figure",null,[a("img",{src:"https://upload-images.jianshu.io/upload_images/5526061-4938e77b7845d370.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240",alt:"java内存模型",tabindex:"0",loading:"lazy"}),a("figcaption",null,"java内存模型")],-1),r=a("p",null,"Java 线程之间的通信总是隐式进行，并且采用的是共享内存模型。 这里提到的共享内存模型指的就是 Java 内存模型(简称 JMM)，JMM 决定一个线程对共享变量 的写入何时对另一个线程可见。 从抽象的角度来看，JMM 定义了线程和主内存之间的抽象关系:线程之间的共享变量存储在主内存(main memory)中，每 个线程都有一个私有的本地内存(local memory)，本地内存中存储了该线程以读/写共享变量的副本。 本地内存是 JMM 的一个抽象概念，并不真实存在。它涵 盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。",-1),m=[n,r];function p(c,s){return t(),i("div",null,m)}const g=e(o,[["render",p],["__file","java内存模型JMM.html.vue"]]),M=JSON.parse('{"path":"/basis/advanced/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8BJMM.html","title":"java内存模型JMM","lang":"zh-CN","frontmatter":{"title":"java内存模型JMM","date":"2024-03-25T22:02:09.000Z","category":["知识进阶"],"tag":["archive"],"description":"java内存模型java内存模型 Java 线程之间的通信总是隐式进行，并且采用的是共享内存模型。 这里提到的共享内存模型指的就是 Java 内存模型(简称 JMM)，JMM 决定一个线程对共享变量 的写入何时对另一个线程可见。 从抽象的角度来看，JMM 定义了线程和主内存之间的抽象关系:线程之间的共享变量存储在主内存(main memory)中，每 ...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/advanced/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8BJMM.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"java内存模型JMM"}],["meta",{"property":"og:description","content":"java内存模型java内存模型 Java 线程之间的通信总是隐式进行，并且采用的是共享内存模型。 这里提到的共享内存模型指的就是 Java 内存模型(简称 JMM)，JMM 决定一个线程对共享变量 的写入何时对另一个线程可见。 从抽象的角度来看，JMM 定义了线程和主内存之间的抽象关系:线程之间的共享变量存储在主内存(main memory)中，每 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://upload-images.jianshu.io/upload_images/5526061-4938e77b7845d370.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T09:37:40.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-25T22:02:09.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-26T09:37:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java内存模型JMM\\",\\"image\\":[\\"https://upload-images.jianshu.io/upload_images/5526061-4938e77b7845d370.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\"],\\"datePublished\\":\\"2024-03-25T22:02:09.000Z\\",\\"dateModified\\":\\"2024-03-26T09:37:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711445860000,"updatedTime":1711445860000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":0.78,"words":234},"filePathRelative":"basis/advanced/java内存模型JMM.md","localizedDate":"2024年3月26日","excerpt":"<figure><img src=\\"https://upload-images.jianshu.io/upload_images/5526061-4938e77b7845d370.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240\\" alt=\\"java内存模型\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>java内存模型</figcaption></figure>\\n<p>Java 线程之间的通信总是隐式进行，并且采用的是共享内存模型。\\n这里提到的共享内存模型指的就是 Java 内存模型(简称 JMM)，JMM 决定一个线程对共享变量 的写入何时对另一个线程可见。\\n从抽象的角度来看，JMM 定义了线程和主内存之间的抽象关系:线程之间的共享变量存储在主内存(main memory)中，每 个线程都有一个私有的本地内存(local memory)，本地内存中存储了该线程以读/写共享变量的副本。\\n本地内存是 JMM 的一个抽象概念，并不真实存在。它涵 盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。</p>","autoDesc":true}');export{g as comp,M as data};
