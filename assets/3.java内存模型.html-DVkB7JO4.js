import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,f as e}from"./app-CtvCwAmI.js";const t="/assets/jmm-an-Oos10.png",p={},l=e('<h3 id="java内存模型基础" tabindex="-1"><a class="header-anchor" href="#java内存模型基础"><span>java内存模型基础</span></a></h3><p>并发编程，两个关键问题：线程通信和线程同步</p><p>java并发采用共享内存模型，通信是隐式调用的.</p><figure><img src="'+t+`" alt="java内存模型" tabindex="0" loading="lazy"><figcaption>java内存模型</figcaption></figure><p>1）线程A把本地内存A更新过的共享变量刷新到主内存中去</p><p>2）线程B到主内存中去读取线程A之前已更新过共享变量</p><p>这两个步骤实质上是线程A在向线程B发送消息，而且这个通信过程必须要经过主内存。JMM通过控制主内存与每个线程的本地内存之间的交互，来为Java程序员提供 内存可见性保证</p><h3 id="重排序" tabindex="-1"><a class="header-anchor" href="#重排序"><span>重排序</span></a></h3><p>执行程序时，为了提高性能，编译器和处理器常常会对指令做重排</p><ol><li>编译器优化的重排序</li><li>指令级并行的重排序</li><li>内存系统的重排序</li><li>最终执行的指令序列</li></ol><p>内存屏障避免特定指令重排</p><p>happens-before (线程内操作按序执行)，实际情况未必，保证结果可见</p><p>as-if-serial语义：重排序不能改变执行结果</p><p>不改变程序执行结果的前提下，尽可能提高并行度</p><h3 id="java内存模型一致性" tabindex="-1"><a class="header-anchor" href="#java内存模型一致性"><span>java内存模型一致性</span></a></h3><p>1、一个线程中所有操作必须按照程序的顺序来执行 2、所有线程都只能看到一个单一操作执行顺序。在顺序一致性内存模型中，每个操作都必须原子执行且立刻对所有线程可见</p><h3 id="volatile内存语义" tabindex="-1"><a class="header-anchor" href="#volatile内存语义"><span>volatile内存语义</span></a></h3><p>当一个volatile变量时，JMM会把本地内存中共享变量值刷新到主内存</p><ol><li>防止指令重排</li><li>volatile 可见性</li><li>volatile 变量原子性 volatile++这种复合操作不 具有原子性。</li></ol><h3 id="锁内存含义" tabindex="-1"><a class="header-anchor" href="#锁内存含义"><span>锁内存含义</span></a></h3><p>临界区互斥执行，还可以让释放锁的线程向获取同一个锁的线程发生消息</p><p>当线程释放锁时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存中</p><p>当线程获取锁时，JMM会把该线程对应的本地内存置为无效。从而使得被监视器保护的 临界区代码必须从主内存中读取共享变量</p><p>总结</p><p>线程A释放一个锁，实质上是线程A向接下来将要获取这个锁的某个线程发出了(线程A 对共享变量所做修改的)消息。</p><p>线程B获取一个锁，实质上是线程B接收了之前某个线程发出的(在释放这个锁之前对共 享变量所做修改的)消息。</p><p>线程A释放锁，随后线程B获取这个锁，这个过程实质上是线程A通过主内存向线程B发送消息。</p><h3 id="final内存含义" tabindex="-1"><a class="header-anchor" href="#final内存含义"><span>final内存含义</span></a></h3><p>1、final修饰，在构造方法中，不能指令重排</p><p>2、初次读包含final域对象，与初次读对象中final域，不能指令重排</p><p>3、只要对象正确构造(没有内存溢出)，final修饰线程安全</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceFactory</span> <span class="token punctuation">{</span>
       <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InstanceHolder</span> <span class="token punctuation">{</span>
           <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Instance</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Instance</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token class-name">InstanceHolder</span><span class="token punctuation">.</span>instance <span class="token punctuation">;</span>  <span class="token comment">// 这里将导致InstanceHolder类被初始化</span>
      <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="double-check" tabindex="-1"><a class="header-anchor" href="#double-check"><span>Double Check</span></a></h3><p>volatile作用：防止指令重排</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>memory = allocate() //1、分配对象内存空间
ctorInstance(memory) //2、初始化对象
instance = menory //3、设置instance为memory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、3重排 ，导致instance未正确初始化</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SafeDoubleCheckedLocking</span> <span class="token punctuation">{</span>
       <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">;</span>
       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Instance</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SafeDoubleCheckedLocking</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
              <span class="token punctuation">}</span> 
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37),c=[l];function i(o,r){return n(),s("div",null,c)}const v=a(p,[["render",i],["__file","3.java内存模型.html.vue"]]),k=JSON.parse('{"path":"/basis/juc/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/3.java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html","title":"3.java内存模型","lang":"zh-CN","frontmatter":{"title":"3.java内存模型","date":"2024-03-25T22:02:09.000Z","order":3,"category":["java并发编程艺术"],"tag":["juc"],"description":"java内存模型基础 并发编程，两个关键问题：线程通信和线程同步 java并发采用共享内存模型，通信是隐式调用的. java内存模型java内存模型 1）线程A把本地内存A更新过的共享变量刷新到主内存中去 2）线程B到主内存中去读取线程A之前已更新过共享变量 这两个步骤实质上是线程A在向线程B发送消息，而且这个通信过程必须要经过主内存。JMM通过控制主...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/juc/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/3.java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"3.java内存模型"}],["meta",{"property":"og:description","content":"java内存模型基础 并发编程，两个关键问题：线程通信和线程同步 java并发采用共享内存模型，通信是隐式调用的. java内存模型java内存模型 1）线程A把本地内存A更新过的共享变量刷新到主内存中去 2）线程B到主内存中去读取线程A之前已更新过共享变量 这两个步骤实质上是线程A在向线程B发送消息，而且这个通信过程必须要经过主内存。JMM通过控制主..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-08T23:43:10.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"juc"}],["meta",{"property":"article:published_time","content":"2024-03-25T22:02:09.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-08T23:43:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.java内存模型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-25T22:02:09.000Z\\",\\"dateModified\\":\\"2024-04-08T23:43:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[{"level":3,"title":"java内存模型基础","slug":"java内存模型基础","link":"#java内存模型基础","children":[]},{"level":3,"title":"重排序","slug":"重排序","link":"#重排序","children":[]},{"level":3,"title":"java内存模型一致性","slug":"java内存模型一致性","link":"#java内存模型一致性","children":[]},{"level":3,"title":"volatile内存语义","slug":"volatile内存语义","link":"#volatile内存语义","children":[]},{"level":3,"title":"锁内存含义","slug":"锁内存含义","link":"#锁内存含义","children":[]},{"level":3,"title":"final内存含义","slug":"final内存含义","link":"#final内存含义","children":[]},{"level":3,"title":"Double Check","slug":"double-check","link":"#double-check","children":[]}],"git":{"createdTime":1712619790000,"updatedTime":1712619790000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":3.09,"words":926},"filePathRelative":"basis/juc/java并发编程艺术/3.java内存模型.md","localizedDate":"2024年3月26日","excerpt":"<h3>java内存模型基础</h3>\\n<p>并发编程，两个关键问题：线程通信和线程同步</p>\\n<p>java并发采用共享内存模型，通信是隐式调用的.</p>\\n<figure><figcaption>java内存模型</figcaption></figure>\\n<p>1）线程A把本地内存A更新过的共享变量刷新到主内存中去</p>\\n<p>2）线程B到主内存中去读取线程A之前已更新过共享变量</p>\\n<p>这两个步骤实质上是线程A在向线程B发送消息，而且这个通信过程必须要经过主内存。JMM通过控制主内存与每个线程的本地内存之间的交互，来为Java程序员提供 内存可见性保证</p>\\n<h3>重排序</h3>","autoDesc":true}');export{v as comp,k as data};
