const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:n})=>n),bt=et(V(JSON.parse("{\"/\":{\"documentCount\":2005,\"nextId\":2005,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2@0\",\"3\":\"3\",\"4\":\"3@0\",\"5\":\"4\",\"6\":\"5\",\"7\":\"6\",\"8\":\"6#定制若依\",\"9\":\"6#平台简介\",\"10\":\"6#友情链接-若依-ruoyi-cloud-ant-design版本。\",\"11\":\"6#spring-boot-特点\",\"12\":\"6#系统结构\",\"13\":\"6#架构图\",\"14\":\"6#内置功能\",\"15\":\"6#在线体验\",\"16\":\"7\",\"17\":\"7@0\",\"18\":\"7@1\",\"19\":\"8\",\"20\":\"8@0\",\"21\":\"8@1\",\"22\":\"9\",\"23\":\"9#_1-到官网下载最新的webstorm\",\"24\":\"9#_2-安装\",\"25\":\"9#_3-破解\",\"26\":\"9@0\",\"27\":\"9@1\",\"28\":\"10\",\"29\":\"10@0\",\"30\":\"10@1\",\"31\":\"11\",\"32\":\"11@0\",\"33\":\"11@1\",\"34\":\"12\",\"35\":\"12@0\",\"36\":\"12@1\",\"37\":\"13\",\"38\":\"13@0\",\"39\":\"13@1\",\"40\":\"14\",\"41\":\"14@0\",\"42\":\"14@1\",\"43\":\"15\",\"44\":\"15@0\",\"45\":\"15@1\",\"46\":\"16\",\"47\":\"16@0\",\"48\":\"16@1\",\"49\":\"17\",\"50\":\"17@0\",\"51\":\"17@1\",\"52\":\"18\",\"53\":\"18@0\",\"54\":\"18@1\",\"55\":\"19\",\"56\":\"19@0\",\"57\":\"19@1\",\"58\":\"20\",\"59\":\"20@0\",\"60\":\"20@1\",\"61\":\"21\",\"62\":\"21@0\",\"63\":\"21@1\",\"64\":\"22\",\"65\":\"22@0\",\"66\":\"22@1\",\"67\":\"23\",\"68\":\"23@0\",\"69\":\"23@1\",\"70\":\"24\",\"71\":\"24@0\",\"72\":\"24@1\",\"73\":\"25\",\"74\":\"25@0\",\"75\":\"25@1\",\"76\":\"26\",\"77\":\"26@0\",\"78\":\"26@1\",\"79\":\"27\",\"80\":\"27@0\",\"81\":\"27@1\",\"82\":\"28\",\"83\":\"28@0\",\"84\":\"28@1\",\"85\":\"29\",\"86\":\"29@0\",\"87\":\"29@1\",\"88\":\"30\",\"89\":\"30@0\",\"90\":\"30@1\",\"91\":\"31\",\"92\":\"31@0\",\"93\":\"31@1\",\"94\":\"32\",\"95\":\"32@0\",\"96\":\"32@1\",\"97\":\"33\",\"98\":\"33@0\",\"99\":\"33@1\",\"100\":\"34\",\"101\":\"34@0\",\"102\":\"34@1\",\"103\":\"35\",\"104\":\"35@0\",\"105\":\"35@1\",\"106\":\"36\",\"107\":\"36@0\",\"108\":\"36@1\",\"109\":\"37\",\"110\":\"37@0\",\"111\":\"37@1\",\"112\":\"38\",\"113\":\"38@0\",\"114\":\"38@1\",\"115\":\"39\",\"116\":\"39@0\",\"117\":\"39@1\",\"118\":\"40\",\"119\":\"40@0\",\"120\":\"40@1\",\"121\":\"41\",\"122\":\"41@0\",\"123\":\"41@1\",\"124\":\"42\",\"125\":\"42@0\",\"126\":\"42@1\",\"127\":\"43\",\"128\":\"43@0\",\"129\":\"44\",\"130\":\"44@0\",\"131\":\"44@1\",\"132\":\"45\",\"133\":\"45@0\",\"134\":\"45@1\",\"135\":\"46\",\"136\":\"46@0\",\"137\":\"46@1\",\"138\":\"47\",\"139\":\"47@0\",\"140\":\"47@1\",\"141\":\"48\",\"142\":\"48@0\",\"143\":\"48@1\",\"144\":\"49\",\"145\":\"49#说明\",\"146\":\"49@0\",\"147\":\"49@1\",\"148\":\"50\",\"149\":\"50@0\",\"150\":\"50@1\",\"151\":\"51\",\"152\":\"51@0\",\"153\":\"51@1\",\"154\":\"52\",\"155\":\"52@0\",\"156\":\"52@1\",\"157\":\"53\",\"158\":\"53#_1、封装、继承、多态\",\"159\":\"53#_2、重写和重载\",\"160\":\"53#_3、创建内部类和静态内部类\",\"161\":\"53@0\",\"162\":\"53@1\",\"163\":\"54\",\"164\":\"54@0\",\"165\":\"54@1\",\"166\":\"55\",\"167\":\"55#_1、volatile和synchronized的区别\",\"168\":\"55#_2、通过静态内部类实现单例好处\",\"169\":\"55#_3、synchronized三种用法-此知识点常考\",\"170\":\"55@0\",\"171\":\"55@1\",\"172\":\"56\",\"173\":\"56@0\",\"174\":\"56@1\",\"175\":\"57\",\"176\":\"57@0\",\"177\":\"57@1\",\"178\":\"58\",\"179\":\"58@0\",\"180\":\"58@1\",\"181\":\"59\",\"182\":\"59@0\",\"183\":\"59@1\",\"184\":\"60\",\"185\":\"60@0\",\"186\":\"60@1\",\"187\":\"61\",\"188\":\"61@0\",\"189\":\"61@1\",\"190\":\"62\",\"191\":\"62@0\",\"192\":\"62@1\",\"193\":\"63\",\"194\":\"63#_1、双亲委托模型\",\"195\":\"63#_2、为什么使用双亲委托\",\"196\":\"63#_3、jvm在搜索类中-如何判定两个class相同\",\"197\":\"63#_4、代码实现\",\"198\":\"63@0\",\"199\":\"63@1\",\"200\":\"64\",\"201\":\"64@0\",\"202\":\"64@1\",\"203\":\"65\",\"204\":\"65#_1、标记-清除算法-mark-sweep\",\"205\":\"65#_2、标记-整理算法-mark-compat\",\"206\":\"65#_3、复制算法\",\"207\":\"65#_4、分代收集算法\",\"208\":\"65#_5、垃圾收集器\",\"209\":\"65@0\",\"210\":\"65@1\",\"211\":\"66\",\"212\":\"66#_1、list-set-map特点\",\"213\":\"66#_2、线程安全集合类与非线程安全\",\"214\":\"66#_3、-arraylist与linkedlist区别\",\"215\":\"66#_4、-arraylist与linkedlist扩容\",\"216\":\"66#_5、hashset和treeset区别\",\"217\":\"66#_6、set集合从原理上如何保证不重复\",\"218\":\"66@0\",\"219\":\"66@1\",\"220\":\"67\",\"221\":\"67@0\",\"222\":\"67@1\",\"223\":\"68\",\"224\":\"68@0\",\"225\":\"68@1\",\"226\":\"69\",\"227\":\"69#_1、遇到问题\",\"228\":\"69#_2、解决方案\",\"229\":\"69#_3、知识进阶导图\",\"230\":\"69#_4、反思的反思\",\"231\":\"69@0\",\"232\":\"69@1\",\"233\":\"70\",\"234\":\"70@0\",\"235\":\"70@1\",\"236\":\"71\",\"237\":\"71#classfile结构体\",\"238\":\"71@0\",\"239\":\"71@1\",\"240\":\"72\",\"241\":\"72@0\",\"242\":\"72@1\",\"243\":\"73\",\"244\":\"73@0\",\"245\":\"73@1\",\"246\":\"74\",\"247\":\"74#四种线程池\",\"248\":\"74#任务性质分类\",\"249\":\"74#示例代码pool\",\"250\":\"74@0\",\"251\":\"74@1\",\"252\":\"75\",\"253\":\"75@0\",\"254\":\"75@1\",\"255\":\"76\",\"256\":\"76#_1、设计模式有哪些\",\"257\":\"76#_2、设计模式定义\",\"258\":\"76#_3、动态代理和静态代理区别\",\"259\":\"76#_4、动态代理写法\",\"260\":\"76#_5、简单工厂、工厂方法、抽象工厂、建造者模式区别\",\"261\":\"76#_6、装饰模式与代理模式区别、与桥接者模式相比\",\"262\":\"76#_7、外观模式和中介模式区别\",\"263\":\"76#_8、策略模式和状态模式区别\",\"264\":\"76#_9、适配器模式、装饰者模式、外观模式异同\",\"265\":\"76#_10、重构之代码坏味道\",\"266\":\"76@0\",\"267\":\"76@1\",\"268\":\"77\",\"269\":\"77@0\",\"270\":\"77@1\",\"271\":\"78\",\"272\":\"78@0\",\"273\":\"78@1\",\"274\":\"79\",\"275\":\"79#_0、排序算法大纲\",\"276\":\"79#_1、排序算法\",\"277\":\"79#_1、排序算法时间复杂度\",\"278\":\"79#_1、冒泡算法\",\"279\":\"79#_2、快速排序\",\"280\":\"79#_3、插入排序\",\"281\":\"79#_4、希尔排序\",\"282\":\"79#_5、选择排序\",\"283\":\"79#_6、堆排序\",\"284\":\"79#_7、归并排序\",\"285\":\"79#_8、堆排序\",\"286\":\"79#_9、计数排序\",\"287\":\"79#_10、基数排序\",\"288\":\"79@0\",\"289\":\"79@1\",\"290\":\"80\",\"291\":\"80@0\",\"292\":\"81\",\"293\":\"81@0\",\"294\":\"81@1\",\"295\":\"82\",\"296\":\"82@0\",\"297\":\"82@1\",\"298\":\"83\",\"299\":\"83#参考\",\"300\":\"83@0\",\"301\":\"83@1\",\"302\":\"84\",\"303\":\"84@0\",\"304\":\"84@1\",\"305\":\"85\",\"306\":\"85@0\",\"307\":\"85@1\",\"308\":\"86\",\"309\":\"86@0\",\"310\":\"87\",\"311\":\"87#一、分层架构\",\"312\":\"87#二、事件驱动架构\",\"313\":\"87#三、微核架构\",\"314\":\"87#四、微服务架构\",\"315\":\"87@0\",\"316\":\"87@1\",\"317\":\"88\",\"318\":\"88@0\",\"319\":\"89\",\"320\":\"89#一、概览\",\"321\":\"89#collection\",\"322\":\"89#_1-set\",\"323\":\"89#_2-list\",\"324\":\"89#_3-queue\",\"325\":\"89#map\",\"326\":\"89#二、容器中的设计模式\",\"327\":\"89#迭代器模式\",\"328\":\"89#适配器模式\",\"329\":\"89#三、源码分析\",\"330\":\"89#arraylist\",\"331\":\"89#_1-概览\",\"332\":\"89#_2-扩容\",\"333\":\"89#_3-删除元素\",\"334\":\"89#_4-序列化\",\"335\":\"89#_5-fail-fast\",\"336\":\"89#vector\",\"337\":\"89#_1-同步\",\"338\":\"89#_2-扩容-1\",\"339\":\"89#_3-与-arraylist-的比较\",\"340\":\"89#_4-替代方案\",\"341\":\"89#copyonwritearraylist\",\"342\":\"89#_1-读写分离\",\"343\":\"89#_2-适用场景\",\"344\":\"89#linkedlist\",\"345\":\"89#_1-概览-1\",\"346\":\"89#_2-与-arraylist-的比较\",\"347\":\"89#hashmap\",\"348\":\"89#_1-存储结构\",\"349\":\"89#_2-拉链法的工作原理\",\"350\":\"89#_3-put-操作\",\"351\":\"89#_4-确定桶下标\",\"352\":\"89#_5-扩容-基本原理\",\"353\":\"89#_6-扩容-重新计算桶下标\",\"354\":\"89#_7-计算数组容量\",\"355\":\"89#_8-链表转红黑树\",\"356\":\"89#_9-与-hashtable-的比较\",\"357\":\"89#concurrenthashmap\",\"358\":\"89#_1-存储结构-1\",\"359\":\"89#_2-size-操作\",\"360\":\"89#_3-jdk-1-8-的改动\",\"361\":\"89#linkedhashmap\",\"362\":\"89#存储结构\",\"363\":\"89#afternodeaccess\",\"364\":\"89#afternodeinsertion\",\"365\":\"89#lru-缓存\",\"366\":\"89#weakhashmap\",\"367\":\"89#存储结构-1\",\"368\":\"89#concurrentcache\",\"369\":\"89#参考资料\",\"370\":\"89@0\",\"371\":\"89@1\",\"372\":\"90\",\"373\":\"90@0\",\"374\":\"90@1\",\"375\":\"91\",\"376\":\"91@0\",\"377\":\"91@1\",\"378\":\"92\",\"379\":\"92#一、threadlocal的概念\",\"380\":\"92#二、threadlocal解决了什么问题\",\"381\":\"92#三、threadlocal原理\",\"382\":\"92#_3、threadlocalmap底层结构\",\"383\":\"92#_4、threadlocal的实例以及其值存放在栈还是堆\",\"384\":\"92#_5、如果我想共享线程的threadlocal数据怎么办\",\"385\":\"92#四、内存泄漏问题\",\"386\":\"92@0\",\"387\":\"92@1\",\"388\":\"93\",\"389\":\"93#设计模式定义\",\"390\":\"93#设计模式按照类型划分\",\"391\":\"93#设计模式简单定义\",\"392\":\"93#文字版\",\"393\":\"93#创建型设计模式\",\"394\":\"93#结构型设计模式\",\"395\":\"93#行为型设计模式\",\"396\":\"93#参考\",\"397\":\"93@0\",\"398\":\"93@1\",\"399\":\"94\",\"400\":\"94@0\",\"401\":\"95\",\"402\":\"95#_1、定义\",\"403\":\"95#单例6种写法\",\"404\":\"95#_1、饿汉式\",\"405\":\"95#_2、懒汉\",\"406\":\"95#代码示例\",\"407\":\"95@0\",\"408\":\"95@1\",\"409\":\"96\",\"410\":\"96@0\",\"411\":\"96@1\",\"412\":\"97\",\"413\":\"97#_1、定义\",\"414\":\"97#_2、例子\",\"415\":\"97#_1、写法一\",\"416\":\"97#_2、方法二-用反射\",\"417\":\"97#_3、代码示例\",\"418\":\"97@0\",\"419\":\"97@1\",\"420\":\"98\",\"421\":\"98#_1、定义\",\"422\":\"98#写法\",\"423\":\"98#代码示例\",\"424\":\"98@0\",\"425\":\"98@1\",\"426\":\"99\",\"427\":\"99#_1、定义\",\"428\":\"99#代码\",\"429\":\"99#代码示例\",\"430\":\"99@0\",\"431\":\"99@1\",\"432\":\"100\",\"433\":\"100#_1、定义\",\"434\":\"100#uml类图\",\"435\":\"100#_2、例子\",\"436\":\"100#代码示例\",\"437\":\"100@0\",\"438\":\"100@1\",\"439\":\"101\",\"440\":\"101#_1、定义\",\"441\":\"101#写法\",\"442\":\"101#代码示例\",\"443\":\"101@0\",\"444\":\"101@1\",\"445\":\"102\",\"446\":\"102#_1、定义\",\"447\":\"102#写法\",\"448\":\"102#代码示例\",\"449\":\"102@0\",\"450\":\"102@1\",\"451\":\"103\",\"452\":\"103#_1、定义\",\"453\":\"103#写法\",\"454\":\"103#代码示例\",\"455\":\"103@0\",\"456\":\"103@1\",\"457\":\"104\",\"458\":\"104#_1、定义\",\"459\":\"104#写法\",\"460\":\"104#代码示例\",\"461\":\"104@0\",\"462\":\"104@1\",\"463\":\"105\",\"464\":\"105#_1、定义\",\"465\":\"105#写法\",\"466\":\"105#代码示例\",\"467\":\"105@0\",\"468\":\"105@1\",\"469\":\"106\",\"470\":\"106#_1、定义\",\"471\":\"106#写法\",\"472\":\"106#代码示例\",\"473\":\"106@0\",\"474\":\"106@1\",\"475\":\"107\",\"476\":\"107#_1、定义\",\"477\":\"107#_2、写法\",\"478\":\"107#代码示例\",\"479\":\"107@0\",\"480\":\"107@1\",\"481\":\"108\",\"482\":\"108#_1、定义\",\"483\":\"108#写法\",\"484\":\"108#代码示例\",\"485\":\"108@0\",\"486\":\"108@1\",\"487\":\"109\",\"488\":\"109#_1、定义\",\"489\":\"109#写法\",\"490\":\"109#代码示例\",\"491\":\"109@0\",\"492\":\"109@1\",\"493\":\"110\",\"494\":\"110#_1、定义\",\"495\":\"110#写法\",\"496\":\"110#代码示例\",\"497\":\"110@0\",\"498\":\"110@1\",\"499\":\"111\",\"500\":\"111#_1、定义\",\"501\":\"111#写法\",\"502\":\"111#代码示例\",\"503\":\"111@0\",\"504\":\"111@1\",\"505\":\"112\",\"506\":\"112#_1、定义\",\"507\":\"112#写法\",\"508\":\"112#代码示例\",\"509\":\"112@0\",\"510\":\"112@1\",\"511\":\"113\",\"512\":\"113#_1、定义\",\"513\":\"113#写法\",\"514\":\"113#代码示例\",\"515\":\"113@0\",\"516\":\"113@1\",\"517\":\"114\",\"518\":\"114#_1、定义\",\"519\":\"114#写法\",\"520\":\"114#代码示例\",\"521\":\"114@0\",\"522\":\"114@1\",\"523\":\"115\",\"524\":\"115#_1、定义\",\"525\":\"115#写法\",\"526\":\"115#代码示例\",\"527\":\"115@0\",\"528\":\"115@1\",\"529\":\"116\",\"530\":\"116#_1、定义\",\"531\":\"116#写法\",\"532\":\"116#代码示例\",\"533\":\"116@0\",\"534\":\"116@1\",\"535\":\"117\",\"536\":\"117#_1、定义\",\"537\":\"117#写法\",\"538\":\"117#代码示例\",\"539\":\"117@0\",\"540\":\"117@1\",\"541\":\"118\",\"542\":\"118#_1、定义\",\"543\":\"118#写法\",\"544\":\"118#代码示例\",\"545\":\"118@0\",\"546\":\"118@1\",\"547\":\"119\",\"548\":\"119@0\",\"549\":\"120\",\"550\":\"120@0\",\"551\":\"121\",\"552\":\"121@0\",\"553\":\"122\",\"554\":\"122@0\",\"555\":\"122@1\",\"556\":\"123\",\"557\":\"123@0\",\"558\":\"124\",\"559\":\"124#_2、简洁文档\",\"560\":\"124@0\",\"561\":\"124@1\",\"562\":\"125\",\"563\":\"125@0\",\"564\":\"126\",\"565\":\"126@0\",\"566\":\"127\",\"567\":\"127@0\",\"568\":\"128\",\"569\":\"128@0\",\"570\":\"129\",\"571\":\"129#指南\",\"572\":\"129#鸣谢\",\"573\":\"129#后记\",\"574\":\"129@0\",\"575\":\"129@1\",\"576\":\"130\",\"577\":\"130@0\",\"578\":\"131\",\"579\":\"131@0\",\"580\":\"132\",\"581\":\"132@0\",\"582\":\"132@1\",\"583\":\"133\",\"584\":\"133@0\",\"585\":\"133@1\",\"586\":\"134\",\"587\":\"134@0\",\"588\":\"134@1\",\"589\":\"135\",\"590\":\"135@0\",\"591\":\"135@1\",\"592\":\"136\",\"593\":\"136@0\",\"594\":\"136@1\",\"595\":\"137\",\"596\":\"137@0\",\"597\":\"137@1\",\"598\":\"138\",\"599\":\"138@0\",\"600\":\"138@1\",\"601\":\"139\",\"602\":\"140\",\"603\":\"140#背景\",\"604\":\"140#解决方案\",\"605\":\"140@0\",\"606\":\"140@1\",\"607\":\"141\",\"608\":\"141#maven上传\",\"609\":\"141@0\",\"610\":\"141@1\",\"611\":\"142\",\"612\":\"142#正常权限\",\"613\":\"142#授权\",\"614\":\"142#查看user表\",\"615\":\"142#user表结构和数据\",\"616\":\"142@0\",\"617\":\"142@1\",\"618\":\"143\",\"619\":\"143#强行提升权限\",\"620\":\"143#正常权限\",\"621\":\"143#更新user表\",\"622\":\"143#查看mysql-user表-判断需要修改字段\",\"623\":\"143@0\",\"624\":\"143@1\",\"625\":\"144\",\"626\":\"144#阿里安全组开启3306端口\",\"627\":\"144#mysql-支持远程连接配置\",\"628\":\"144#重启服务\",\"629\":\"144#配置mysql权限\",\"630\":\"144#查询生效的user表\",\"631\":\"144#mysql配置\",\"632\":\"144@0\",\"633\":\"144@1\",\"634\":\"145\",\"635\":\"145#本文未验证\",\"636\":\"145#_1、安装nginx\",\"637\":\"145#_2、启动nginx并设置开机自动运行\",\"638\":\"145#_3、配置nginx\",\"639\":\"145#_4、重启nginx-让配置生效\",\"640\":\"145#_5、配置vue项目\",\"641\":\"145@0\",\"642\":\"145@1\",\"643\":\"146\",\"644\":\"146#scp上传免密\",\"645\":\"146#统一上传\",\"646\":\"146@0\",\"647\":\"146@1\",\"648\":\"147\",\"649\":\"147#同源策略\",\"650\":\"147#服务端配置跨域cors\",\"651\":\"147#nginx-配置跨域\",\"652\":\"147#express服务\",\"653\":\"147@0\",\"654\":\"147@1\",\"655\":\"148\",\"656\":\"148#背景\",\"657\":\"148#解决方案\",\"658\":\"148@0\",\"659\":\"148@1\",\"660\":\"149\",\"661\":\"149#ubuntu-采用防火墙-ufw\",\"662\":\"149#开放端口\",\"663\":\"149@0\",\"664\":\"149@1\",\"665\":\"150\",\"666\":\"150#path匹配方法\",\"667\":\"150#vue根据views目录生成路由\",\"668\":\"150#人工注册\",\"669\":\"150@0\",\"670\":\"150@1\",\"671\":\"151\",\"672\":\"151#升级sringboot2-6\",\"673\":\"151@0\",\"674\":\"151@1\",\"675\":\"152\",\"676\":\"152#更新包索引\",\"677\":\"152#安装nginx\",\"678\":\"152#启动nginx服务\",\"679\":\"152#设置nginx开机自启\",\"680\":\"152#验证安装成功-打开浏览器并访问\",\"681\":\"152@0\",\"682\":\"152@1\",\"683\":\"153\",\"684\":\"153#tomcat8安装\",\"685\":\"153@0\",\"686\":\"153@1\",\"687\":\"154\",\"688\":\"154#安装jdk8\",\"689\":\"154@0\",\"690\":\"154@1\",\"691\":\"155\",\"692\":\"155#更新包管理器的索引\",\"693\":\"155#安装mysql\",\"694\":\"155#检查mysql服务的状态-确保它正在运行\",\"695\":\"155#设置密码-无密码直接回车\",\"696\":\"155#重启服务\",\"697\":\"155@0\",\"698\":\"155@1\",\"699\":\"156\",\"700\":\"156#安装node\",\"701\":\"156#默认安装\",\"702\":\"156#下载安装\",\"703\":\"156#查看版本\",\"704\":\"156@0\",\"705\":\"156@1\",\"706\":\"157\",\"707\":\"157#安装redis\",\"708\":\"157@0\",\"709\":\"157@1\",\"710\":\"158\",\"711\":\"158#scp上传免密\",\"712\":\"158@0\",\"713\":\"158@1\",\"714\":\"159\",\"715\":\"159#根据端口杀进程\",\"716\":\"159@0\",\"717\":\"159@1\",\"718\":\"160\",\"719\":\"160#安全组\",\"720\":\"160#开放端口\",\"721\":\"160#配合ufw防火墙-做两层控制\",\"722\":\"160#ufw防火墙\",\"723\":\"160#开放端口-1\",\"724\":\"160@0\",\"725\":\"160@1\",\"726\":\"161\",\"727\":\"161#定制若依\",\"728\":\"161#平台简介\",\"729\":\"161#友情链接-若依-ruoyi-cloud-ant-design版本。\",\"730\":\"161#spring-boot-特点\",\"731\":\"161#系统结构\",\"732\":\"161#架构图\",\"733\":\"161#内置功能\",\"734\":\"161#在线体验\",\"735\":\"162\",\"736\":\"162@0\",\"737\":\"162@1\",\"738\":\"163\",\"739\":\"163@0\",\"740\":\"163@1\",\"741\":\"164\",\"742\":\"164#设计模式背景\",\"743\":\"164#_4个要素\",\"744\":\"164#_1、模式名称\",\"745\":\"164#_2、问题\",\"746\":\"164#_3、解决方案\",\"747\":\"164#_4、效果\",\"748\":\"164@0\",\"749\":\"164@1\",\"750\":\"165\",\"751\":\"165#单一职责原则-srp\",\"752\":\"165#开闭原则-ocp\",\"753\":\"165#里氏替换原则-lsp\",\"754\":\"165#迪米特原则-lod\",\"755\":\"165@0\",\"756\":\"165@1\",\"757\":\"166\",\"758\":\"166@0\",\"759\":\"166@1\",\"760\":\"167\",\"761\":\"167@0\",\"762\":\"167@1\",\"763\":\"168\",\"764\":\"168@0\",\"765\":\"168@1\",\"766\":\"169\",\"767\":\"169@0\",\"768\":\"169@1\",\"769\":\"170\",\"770\":\"170@0\",\"771\":\"170@1\",\"772\":\"171\",\"773\":\"171@0\",\"774\":\"171@1\",\"775\":\"172\",\"776\":\"172@0\",\"777\":\"172@1\",\"778\":\"173\",\"779\":\"173@0\",\"780\":\"173@1\",\"781\":\"174\",\"782\":\"174@0\",\"783\":\"174@1\",\"784\":\"175\",\"785\":\"175@0\",\"786\":\"175@1\",\"787\":\"176\",\"788\":\"176@0\",\"789\":\"176@1\",\"790\":\"177\",\"791\":\"177@0\",\"792\":\"177@1\",\"793\":\"178\",\"794\":\"178@0\",\"795\":\"178@1\",\"796\":\"179\",\"797\":\"179@0\",\"798\":\"179@1\",\"799\":\"180\",\"800\":\"180@0\",\"801\":\"180@1\",\"802\":\"181\",\"803\":\"181@0\",\"804\":\"181@1\",\"805\":\"182\",\"806\":\"182@0\",\"807\":\"182@1\",\"808\":\"183\",\"809\":\"183@0\",\"810\":\"183@1\",\"811\":\"184\",\"812\":\"184@0\",\"813\":\"184@1\",\"814\":\"185\",\"815\":\"185@0\",\"816\":\"185@1\",\"817\":\"186\",\"818\":\"186#_1-上下文切换\",\"819\":\"186#多线程一定快吗\",\"820\":\"186#测量上下文切换和时长\",\"821\":\"186#如何减少上下文切换\",\"822\":\"186#实战案例\",\"823\":\"186#_2-死锁\",\"824\":\"186#_3-资源限制挑战\",\"825\":\"186#juc编程源码\",\"826\":\"186@0\",\"827\":\"186@1\",\"828\":\"187\",\"829\":\"187@0\",\"830\":\"187@1\",\"831\":\"188\",\"832\":\"188#场景\",\"833\":\"188#线上问题定位\",\"834\":\"188#性能测试\",\"835\":\"188#git地址\",\"836\":\"188@0\",\"837\":\"188@1\",\"838\":\"189\",\"839\":\"189#_1-并发三要素\",\"840\":\"189#_2-volatile原理\",\"841\":\"189#volatile\",\"842\":\"189#_3-synchronized原理\",\"843\":\"189#应用\",\"844\":\"189#java对象头\",\"845\":\"189#锁的升级与对比\",\"846\":\"189#偏向锁\",\"847\":\"189#轻量级锁\",\"848\":\"189#锁升级流程\",\"849\":\"189#锁的优缺点比较\",\"850\":\"189#_4-原子操作原理\",\"851\":\"189#处理器如何实现原子操作\",\"852\":\"189#java实现原子操作\",\"853\":\"189#cas实现原子操作的三大问题\",\"854\":\"189#_5-juc编程源码\",\"855\":\"189@0\",\"856\":\"189@1\",\"857\":\"190\",\"858\":\"190#java内存模型基础\",\"859\":\"190#重排序\",\"860\":\"190#java内存模型一致性\",\"861\":\"190#volatile内存语义\",\"862\":\"190#锁内存含义\",\"863\":\"190#final内存含义\",\"864\":\"190#double-check\",\"865\":\"190@0\",\"866\":\"190@1\",\"867\":\"191\",\"868\":\"191#daemon线程\",\"869\":\"191#优雅停止线程\",\"870\":\"191#线程间通信\",\"871\":\"191@0\",\"872\":\"191@1\",\"873\":\"192\",\"874\":\"192#锁可操作性\",\"875\":\"192#队列同步器-aqs\",\"876\":\"192#aqs模版\",\"877\":\"192#aqs原理\",\"878\":\"192#_1-fifo双向队列\",\"879\":\"192#_2、独占式同步状态获取与释放\",\"880\":\"192#_2、共享式同步状态获取与释放\",\"881\":\"192#重入锁-reentrantlock\",\"882\":\"192#重入锁\",\"883\":\"192#公平锁和非公平锁区别\",\"884\":\"192#对比\",\"885\":\"192#读写锁-reentrantreadwritelock\",\"886\":\"192#读写锁实现原理\",\"887\":\"192#锁降级\",\"888\":\"192#locksupport\",\"889\":\"192#condition接口\",\"890\":\"192#condition实现分析\",\"891\":\"192@0\",\"892\":\"192@1\",\"893\":\"193\",\"894\":\"193#concurrenthashmap\",\"895\":\"193#concurrentlinkedqueue\",\"896\":\"193#阻塞队列\",\"897\":\"193#form-join\",\"898\":\"193@0\",\"899\":\"193@1\",\"900\":\"194\",\"901\":\"194@0\",\"902\":\"194@1\",\"903\":\"195\",\"904\":\"195#countdownlatch-等待多线程完成\",\"905\":\"195#同步屏障cyclicbarrier\",\"906\":\"195#cyclicbarrier和countdownlatch的区别\",\"907\":\"195#控制并发线程数的semaphore\",\"908\":\"195#线程间交换数据的exchanger\",\"909\":\"195@0\",\"910\":\"195@1\",\"911\":\"196\",\"912\":\"196#用到知识点\",\"913\":\"196#线程池原理\",\"914\":\"196#线程池参数\",\"915\":\"196#关闭线程池\",\"916\":\"196#线程池监控\",\"917\":\"196#线程池自定义实现\",\"918\":\"196@0\",\"919\":\"196@1\",\"920\":\"197\",\"921\":\"197@0\",\"922\":\"197@1\",\"923\":\"198\",\"924\":\"198@0\",\"925\":\"198@1\",\"926\":\"199\",\"927\":\"199@0\",\"928\":\"199@1\",\"929\":\"200\",\"930\":\"200@0\",\"931\":\"200@1\",\"932\":\"201\",\"933\":\"201@0\",\"934\":\"201@1\",\"935\":\"202\",\"936\":\"202@0\",\"937\":\"202@1\",\"938\":\"203\",\"939\":\"203@0\",\"940\":\"203@1\",\"941\":\"204\",\"942\":\"204#_1、基础概念\",\"943\":\"204#_2、线程状态\",\"944\":\"204#_3、线程函数\",\"945\":\"204#join与yield区别\",\"946\":\"204#对象锁\",\"947\":\"204#经典范例\",\"948\":\"204#等待-通知-生产消费者\",\"949\":\"204#实战编程\",\"950\":\"204#实现线程池的三步\",\"951\":\"204@0\",\"952\":\"204@1\",\"953\":\"205\",\"954\":\"205#标准\",\"955\":\"205#总结\",\"956\":\"205@0\",\"957\":\"205@1\",\"958\":\"206\",\"959\":\"206@0\",\"960\":\"206@1\",\"961\":\"207\",\"962\":\"207@0\",\"963\":\"207@1\",\"964\":\"208\",\"965\":\"208@0\",\"966\":\"208@1\",\"967\":\"209\",\"968\":\"209@0\",\"969\":\"209@1\",\"970\":\"210\",\"971\":\"210@0\",\"972\":\"210@1\",\"973\":\"211\",\"974\":\"211@0\",\"975\":\"211@1\",\"976\":\"212\",\"977\":\"212#知识扩展\",\"978\":\"212#_1、定义classloader\",\"979\":\"212#_2、类加载过程\",\"980\":\"212#实战项目地址\",\"981\":\"212@0\",\"982\":\"212@1\",\"983\":\"213\",\"984\":\"213#关键指令编写\",\"985\":\"213#编写测试类\",\"986\":\"213#shell脚本\",\"987\":\"213#实战项目地址\",\"988\":\"213@0\",\"989\":\"213@1\",\"990\":\"214\",\"991\":\"214#知识扩展\",\"992\":\"214#关键流程\",\"993\":\"214#核心方法调用\",\"994\":\"214#编写解释器interpreter\",\"995\":\"214#测试demo\",\"996\":\"214#go-测试分支\",\"997\":\"214#shell脚本\",\"998\":\"214#实战项目地址\",\"999\":\"214@0\",\"1000\":\"214@1\",\"1001\":\"215\",\"1002\":\"215#类初始化触发情况\",\"1003\":\"215#初始化逻辑\",\"1004\":\"215#实战项目地址\",\"1005\":\"215@0\",\"1006\":\"215@1\",\"1007\":\"216\",\"1008\":\"216#知识扩展\",\"1009\":\"216#关键函数\",\"1010\":\"216#测试数组\",\"1011\":\"216#实战项目地址\",\"1012\":\"216@0\",\"1013\":\"216@1\",\"1014\":\"217\",\"1015\":\"217#采用hook方式生成字符串\",\"1016\":\"217#字符串测试\",\"1017\":\"217#shell脚本\",\"1018\":\"217#实战项目地址\",\"1019\":\"217@0\",\"1020\":\"217@1\",\"1021\":\"218\",\"1022\":\"218#本地方法注册与调用\",\"1023\":\"218#添加native类\",\"1024\":\"218#测试方法\",\"1025\":\"218#实战项目地址\",\"1026\":\"218@0\",\"1027\":\"218@1\",\"1028\":\"219\",\"1029\":\"219#classloader原理\",\"1030\":\"219#classloader原理-1\",\"1031\":\"219#实战项目地址\",\"1032\":\"219@0\",\"1033\":\"219@1\",\"1034\":\"220\",\"1035\":\"220#异常处理\",\"1036\":\"220#_1、注册native方法\",\"1037\":\"220#异常测试\",\"1038\":\"220#实战项目地址\",\"1039\":\"220@0\",\"1040\":\"220@1\",\"1041\":\"221\",\"1042\":\"221#_1、system类初始化\",\"1043\":\"221#_2、ending-小遗憾\",\"1044\":\"221#_3、jvm类封装\",\"1045\":\"221#实战项目地址\",\"1046\":\"221@0\",\"1047\":\"221@1\",\"1048\":\"222\",\"1049\":\"222#mac环境\",\"1050\":\"222#添加环境变量\",\"1051\":\"222#实战项目地址\",\"1052\":\"222@0\",\"1053\":\"222@1\",\"1054\":\"223\",\"1055\":\"223#执行文件-入参解析\",\"1056\":\"223#测试类\",\"1057\":\"223#实战项目地址\",\"1058\":\"223@0\",\"1059\":\"223@1\",\"1060\":\"224\",\"1061\":\"224#_1、知识扩展\",\"1062\":\"224#_2、cmd添加jre目录\",\"1063\":\"224#_3、类加载规则\",\"1064\":\"224#_4、类路径查找\",\"1065\":\"224#实战项目地址\",\"1066\":\"224@0\",\"1067\":\"224@1\",\"1068\":\"225\",\"1069\":\"225#原因\",\"1070\":\"225#测试参数\",\"1071\":\"225#实战项目地址\",\"1072\":\"225@0\",\"1073\":\"225@1\",\"1074\":\"226\",\"1075\":\"226#知识扩展\",\"1076\":\"226#classfile结构体\",\"1077\":\"226#魔数\",\"1078\":\"226#版本号\",\"1079\":\"226#字段和方法表\",\"1080\":\"226#解析classfile\",\"1081\":\"226#从byte数组树化classfile\",\"1082\":\"226#实战项目地址\",\"1083\":\"226@0\",\"1084\":\"226@1\",\"1085\":\"227\",\"1086\":\"227#知识扩展\",\"1087\":\"227#运行时数据\",\"1088\":\"227#实现运行时数据区\",\"1089\":\"227#实战项目地址\",\"1090\":\"227@0\",\"1091\":\"227@1\",\"1092\":\"228\",\"1093\":\"228#知识扩展\",\"1094\":\"228#指令集方法\",\"1095\":\"228#add指令\",\"1096\":\"228#goto指令\",\"1097\":\"228#实战项目地址\",\"1098\":\"228@0\",\"1099\":\"228@1\",\"1100\":\"229\",\"1101\":\"229#执行指令集的调用者\",\"1102\":\"229#调用解释器\",\"1103\":\"229#shell脚本\",\"1104\":\"229#实战项目地址\",\"1105\":\"229@0\",\"1106\":\"229@1\",\"1107\":\"230\",\"1108\":\"230#知识扩展\",\"1109\":\"230#_1、从classfile读取信息-拷贝到类中\",\"1110\":\"230#_2、把-classfile-中的常量池转化为运行时常量池\",\"1111\":\"230#实战项目地址\",\"1112\":\"230@0\",\"1113\":\"230@1\",\"1114\":\"231\",\"1115\":\"231#运行时数据区\",\"1116\":\"231#对象的创建\",\"1117\":\"231#对象内存布局\",\"1118\":\"231#对象访问定位\",\"1119\":\"231#内存溢出\",\"1120\":\"231@0\",\"1121\":\"231@1\",\"1122\":\"232\",\"1123\":\"232#_1标记算法\",\"1124\":\"232#_1-引用计数算法\",\"1125\":\"232#_2-可达性分析算法\",\"1126\":\"232#_3-四种引用\",\"1127\":\"232#_4-回收过程\",\"1128\":\"232#_5-回收方法区\",\"1129\":\"232#_2-收集算法\",\"1130\":\"232#_1-标记-清除算法\",\"1131\":\"232#_2-复制算法\",\"1132\":\"232#_3-标记-整理算法\",\"1133\":\"232#_4-分代收集算法\",\"1134\":\"232#_3-算法实现\",\"1135\":\"232#_1-枚举根节点\",\"1136\":\"232#_2-安全点\",\"1137\":\"232#_3-安全区域\",\"1138\":\"232#_4-垃圾收集器\",\"1139\":\"232#serial-收集器\",\"1140\":\"232#parnew-收集器\",\"1141\":\"232#parallel-scavenge-收集器\",\"1142\":\"232#serial-old-收集器\",\"1143\":\"232#parallel-old-收集器\",\"1144\":\"232#cms收集器\",\"1145\":\"232#g1收集器\",\"1146\":\"232#_5-内存分配和回收策略\",\"1147\":\"232@0\",\"1148\":\"232@1\",\"1149\":\"233\",\"1150\":\"233#jvm命令\",\"1151\":\"233#jps\",\"1152\":\"233#jstat\",\"1153\":\"233#jinfo\",\"1154\":\"233#jmap\",\"1155\":\"233#jhat\",\"1156\":\"233#jstack\",\"1157\":\"233#jconsole-可视化\",\"1158\":\"233#visualvm-可视化\",\"1159\":\"233#btrace-跟踪\",\"1160\":\"233@0\",\"1161\":\"233@1\",\"1162\":\"234\",\"1163\":\"234#_1-classfile\",\"1164\":\"234#_2-魔数opcode映射指令集\",\"1165\":\"234#_3-解释器是将指令以逻辑方式运行\",\"1166\":\"234@0\",\"1167\":\"234@1\",\"1168\":\"235\",\"1169\":\"235#类加载时机\",\"1170\":\"235#加载\",\"1171\":\"235#验证\",\"1172\":\"235#准备\",\"1173\":\"235#解析\",\"1174\":\"235#初始化\",\"1175\":\"235#双亲委派模型\",\"1176\":\"235#为什么使用双亲委托\",\"1177\":\"235#jvm在搜索类中-如何判定两个class相同\",\"1178\":\"235@0\",\"1179\":\"235@1\",\"1180\":\"236\",\"1181\":\"236#运行时栈帧结构\",\"1182\":\"236#局部变量表\",\"1183\":\"236#操作数栈\",\"1184\":\"236#动态链接\",\"1185\":\"236#方法返回地址\",\"1186\":\"236#方法调用\",\"1187\":\"236#解析\",\"1188\":\"236#分派\",\"1189\":\"236#字节码执行引擎\",\"1190\":\"236#文档说明\",\"1191\":\"236#_1-指令集\",\"1192\":\"236#_2-方法调用和返回\",\"1193\":\"236#_3-基于栈的解释器\",\"1194\":\"236@0\",\"1195\":\"236@1\",\"1196\":\"237\",\"1197\":\"237#早期-编译器-优化\",\"1198\":\"237#_1-解析与填充符号表\",\"1199\":\"237#_2-注解处理\",\"1200\":\"237#_3-语义分析与字节码生成\",\"1201\":\"237#java-语法糖\",\"1202\":\"237#_1-泛型与类型擦除\",\"1203\":\"237#_2-自动装箱与拆箱-遍历循环\",\"1204\":\"237#_3-条件编译\",\"1205\":\"237#实战\",\"1206\":\"237#晚期-运行期-优化\",\"1207\":\"237#分层编译策略\",\"1208\":\"237#编译对象与除法条件\",\"1209\":\"237#热点探测\",\"1210\":\"237#编译过程\",\"1211\":\"237#优化技术\",\"1212\":\"237#逃逸分析\",\"1213\":\"237#java与c-对比\",\"1214\":\"237@0\",\"1215\":\"237@1\",\"1216\":\"238\",\"1217\":\"238#java内存模型与线程\",\"1218\":\"238#硬件效率与一致性\",\"1219\":\"238#java内存模型\",\"1220\":\"238#内存间交互操作\",\"1221\":\"238#long-double类型特殊规则\",\"1222\":\"238#volatile特殊规则\",\"1223\":\"238#原则\",\"1224\":\"238#java与线程\",\"1225\":\"238#_1-使用内核线程实现\",\"1226\":\"238#_2-使用用户线程实现\",\"1227\":\"238#_3-使用用户线程加轻量级进程混合实现\",\"1228\":\"238#_4-java线程的实现\",\"1229\":\"238#java线程调度\",\"1230\":\"238#状态转换\",\"1231\":\"238#线程安全\",\"1232\":\"238#不可变\",\"1233\":\"238#绝对线程安全\",\"1234\":\"238#相对线程安全\",\"1235\":\"238#线程兼容\",\"1236\":\"238#线程对立\",\"1237\":\"238#线程安全的实现\",\"1238\":\"238#互斥同步\",\"1239\":\"238#非阻塞同步\",\"1240\":\"238#无同步方案\",\"1241\":\"238#锁优化\",\"1242\":\"238#自旋锁与自适应自旋锁\",\"1243\":\"238#锁消除\",\"1244\":\"238#锁粗化\",\"1245\":\"238#锁升级\",\"1246\":\"238#_0-对象头\",\"1247\":\"238#_1-偏向锁\",\"1248\":\"238#_2-轻量锁\",\"1249\":\"238#_3-重量锁\",\"1250\":\"238#锁升级流程\",\"1251\":\"238@0\",\"1252\":\"238@1\",\"1253\":\"239\",\"1254\":\"239@0\",\"1255\":\"239@1\",\"1256\":\"240\",\"1257\":\"240@0\",\"1258\":\"240@1\",\"1259\":\"241\",\"1260\":\"241@0\",\"1261\":\"241@1\",\"1262\":\"242\",\"1263\":\"242@0\",\"1264\":\"242@1\",\"1265\":\"243\",\"1266\":\"243@0\",\"1267\":\"243@1\",\"1268\":\"244\",\"1269\":\"244@0\",\"1270\":\"244@1\",\"1271\":\"245\",\"1272\":\"245@0\",\"1273\":\"245@1\",\"1274\":\"246\",\"1275\":\"246@0\",\"1276\":\"246@1\",\"1277\":\"247\",\"1278\":\"247@0\",\"1279\":\"247@1\",\"1280\":\"248\",\"1281\":\"248@0\",\"1282\":\"248@1\",\"1283\":\"249\",\"1284\":\"249@0\",\"1285\":\"249@1\",\"1286\":\"250\",\"1287\":\"250@0\",\"1288\":\"250@1\",\"1289\":\"251\",\"1290\":\"251@0\",\"1291\":\"251@1\",\"1292\":\"252\",\"1293\":\"252@0\",\"1294\":\"252@1\",\"1295\":\"253\",\"1296\":\"253@0\",\"1297\":\"253@1\",\"1298\":\"254\",\"1299\":\"254@0\",\"1300\":\"254@1\",\"1301\":\"255\",\"1302\":\"255#一、前言\",\"1303\":\"255#二、spanlite让你so-easy编写spanbuilder\",\"1304\":\"255#_1、引用依赖\",\"1305\":\"255#_2、构造spannablestringbuilder\",\"1306\":\"255#_3、链式拼装spanbuilder\",\"1307\":\"255#_4、实战演示\",\"1308\":\"255#三、编写框架方法\",\"1309\":\"255#_1、编写思考路径\",\"1310\":\"255#_2、收集所有相关主要的方法\",\"1311\":\"255#_3、抽象出span简单-工具类\",\"1312\":\"255#_4、用建造者模式对单一spanbuilder进行模型简化\",\"1313\":\"255#_5、spanlite链式调用拼装\",\"1314\":\"255#_6、github开源代码\",\"1315\":\"255@0\",\"1316\":\"255@1\",\"1317\":\"256\",\"1318\":\"256@0\",\"1319\":\"256@1\",\"1320\":\"257\",\"1321\":\"257@0\",\"1322\":\"257@1\",\"1323\":\"258\",\"1324\":\"258@0\",\"1325\":\"258@1\",\"1326\":\"259\",\"1327\":\"259@0\",\"1328\":\"259@1\",\"1329\":\"260\",\"1330\":\"260@0\",\"1331\":\"260@1\",\"1332\":\"261\",\"1333\":\"261@0\",\"1334\":\"261@1\",\"1335\":\"262\",\"1336\":\"262@0\",\"1337\":\"262@1\",\"1338\":\"263\",\"1339\":\"263@0\",\"1340\":\"263@1\",\"1341\":\"264\",\"1342\":\"264@0\",\"1343\":\"264@1\",\"1344\":\"265\",\"1345\":\"265#_1、自动添加约束-不推荐\",\"1346\":\"265#二、手工写约束\",\"1347\":\"265@0\",\"1348\":\"265@1\",\"1349\":\"266\",\"1350\":\"266@0\",\"1351\":\"266@1\",\"1352\":\"267\",\"1353\":\"267@0\",\"1354\":\"267@1\",\"1355\":\"268\",\"1356\":\"268@0\",\"1357\":\"268@1\",\"1358\":\"269\",\"1359\":\"269@0\",\"1360\":\"269@1\",\"1361\":\"270\",\"1362\":\"270@0\",\"1363\":\"270@1\",\"1364\":\"271\",\"1365\":\"271@0\",\"1366\":\"271@1\",\"1367\":\"272\",\"1368\":\"272#_2、如何制表\",\"1369\":\"272@0\",\"1370\":\"272@1\",\"1371\":\"273\",\"1372\":\"273@0\",\"1373\":\"273@1\",\"1374\":\"274\",\"1375\":\"274@0\",\"1376\":\"274@1\",\"1377\":\"275\",\"1378\":\"275@0\",\"1379\":\"275@1\",\"1380\":\"276\",\"1381\":\"276@0\",\"1382\":\"276@1\",\"1383\":\"277\",\"1384\":\"277@0\",\"1385\":\"277@1\",\"1386\":\"278\",\"1387\":\"278@0\",\"1388\":\"278@1\",\"1389\":\"279\",\"1390\":\"279@0\",\"1391\":\"279@1\",\"1392\":\"280\",\"1393\":\"280@0\",\"1394\":\"280@1\",\"1395\":\"281\",\"1396\":\"281@0\",\"1397\":\"281@1\",\"1398\":\"282\",\"1399\":\"282#_1、flutter学习思路\",\"1400\":\"282@0\",\"1401\":\"282@1\",\"1402\":\"283\",\"1403\":\"283@0\",\"1404\":\"283@1\",\"1405\":\"284\",\"1406\":\"284@0\",\"1407\":\"284@1\",\"1408\":\"285\",\"1409\":\"285#npm安装模块\",\"1410\":\"285#npm-删除模块\",\"1411\":\"285@0\",\"1412\":\"285@1\",\"1413\":\"286\",\"1414\":\"286@0\",\"1415\":\"286@1\",\"1416\":\"287\",\"1417\":\"287#_3、webviewuploadfilehelper-帮助类\",\"1418\":\"287@0\",\"1419\":\"287@1\",\"1420\":\"288\",\"1421\":\"288@0\",\"1422\":\"288@1\",\"1423\":\"289\",\"1424\":\"289@0\",\"1425\":\"289@1\",\"1426\":\"290\",\"1427\":\"290@0\",\"1428\":\"290@1\",\"1429\":\"291\",\"1430\":\"291@0\",\"1431\":\"291@1\",\"1432\":\"292\",\"1433\":\"292@0\",\"1434\":\"292@1\",\"1435\":\"293\",\"1436\":\"293@0\",\"1437\":\"293@1\",\"1438\":\"294\",\"1439\":\"294#_1-基本要求\",\"1440\":\"294#_1-1-验收要求\",\"1441\":\"294#_1-2-验收流程\",\"1442\":\"294#_2-ui交付物基本要求\",\"1443\":\"294#_2-1-切图要求\",\"1444\":\"294#_2-2-通用要求\",\"1445\":\"294#_2-3-标注要求\",\"1446\":\"294#_2-4-字体版权特别声明\",\"1447\":\"294#_2-5-动画效果\",\"1448\":\"294@0\",\"1449\":\"294@1\",\"1450\":\"295\",\"1451\":\"295@0\",\"1452\":\"295@1\",\"1453\":\"296\",\"1454\":\"296@0\",\"1455\":\"296@1\",\"1456\":\"297\",\"1457\":\"297@0\",\"1458\":\"297@1\",\"1459\":\"298\",\"1460\":\"298@0\",\"1461\":\"298@1\",\"1462\":\"299\",\"1463\":\"299@0\",\"1464\":\"299@1\",\"1465\":\"300\",\"1466\":\"300@0\",\"1467\":\"300@1\",\"1468\":\"301\",\"1469\":\"301@0\",\"1470\":\"301@1\",\"1471\":\"302\",\"1472\":\"302#_1、组件化思路\",\"1473\":\"302#_2、单独调试与集成发布需求拆解\",\"1474\":\"302#_3、核心逻辑\",\"1475\":\"302#_3-2单独调试\",\"1476\":\"302#_4、插件编写原则\",\"1477\":\"302@0\",\"1478\":\"302@1\",\"1479\":\"303\",\"1480\":\"303#_2、-android彻底组件化demo发布\",\"1481\":\"303#_3、wmrouter-美团外卖android开源路由框架\",\"1482\":\"303#_5、apache-dubbo\",\"1483\":\"303#_7、微信android模块化架构重构实践\",\"1484\":\"303@0\",\"1485\":\"303@1\",\"1486\":\"304\",\"1487\":\"304#_2、代码实现的核心逻辑\",\"1488\":\"304#_3、示例核心代码-gradle脚本编写\",\"1489\":\"304@0\",\"1490\":\"304@1\",\"1491\":\"305\",\"1492\":\"305@0\",\"1493\":\"305@1\",\"1494\":\"306\",\"1495\":\"306@0\",\"1496\":\"306@1\",\"1497\":\"307\",\"1498\":\"307@0\",\"1499\":\"307@1\",\"1500\":\"308\",\"1501\":\"308@0\",\"1502\":\"308@1\",\"1503\":\"309\",\"1504\":\"309@0\",\"1505\":\"309@1\",\"1506\":\"310\",\"1507\":\"310@0\",\"1508\":\"310@1\",\"1509\":\"311\",\"1510\":\"311@0\",\"1511\":\"311@1\",\"1512\":\"312\",\"1513\":\"312@0\",\"1514\":\"312@1\",\"1515\":\"313\",\"1516\":\"313@0\",\"1517\":\"313@1\",\"1518\":\"314\",\"1519\":\"314@0\",\"1520\":\"314@1\",\"1521\":\"315\",\"1522\":\"315@0\",\"1523\":\"315@1\",\"1524\":\"316\",\"1525\":\"316@0\",\"1526\":\"316@1\",\"1527\":\"317\",\"1528\":\"317@0\",\"1529\":\"317@1\",\"1530\":\"318\",\"1531\":\"318@0\",\"1532\":\"318@1\",\"1533\":\"319\",\"1534\":\"319#makefile前言\",\"1535\":\"319@0\",\"1536\":\"319@1\",\"1537\":\"320\",\"1538\":\"320@0\",\"1539\":\"320@1\",\"1540\":\"321\",\"1541\":\"321@0\",\"1542\":\"321@1\",\"1543\":\"322\",\"1544\":\"322@0\",\"1545\":\"322@1\",\"1546\":\"323\",\"1547\":\"323@0\",\"1548\":\"323@1\",\"1549\":\"324\",\"1550\":\"324@0\",\"1551\":\"324@1\",\"1552\":\"325\",\"1553\":\"325@0\",\"1554\":\"325@1\",\"1555\":\"326\",\"1556\":\"326@0\",\"1557\":\"326@1\",\"1558\":\"327\",\"1559\":\"327@0\",\"1560\":\"327@1\",\"1561\":\"328\",\"1562\":\"328@0\",\"1563\":\"328@1\",\"1564\":\"329\",\"1565\":\"329@0\",\"1566\":\"329@1\",\"1567\":\"330\",\"1568\":\"330#all\",\"1569\":\"330@0\",\"1570\":\"330@1\",\"1571\":\"331\",\"1572\":\"331@0\",\"1573\":\"331@1\",\"1574\":\"332\",\"1575\":\"332@0\",\"1576\":\"332@1\",\"1577\":\"333\",\"1578\":\"333@0\",\"1579\":\"333@1\",\"1580\":\"334\",\"1581\":\"334@0\",\"1582\":\"334@1\",\"1583\":\"335\",\"1584\":\"335@0\",\"1585\":\"335@1\",\"1586\":\"336\",\"1587\":\"336#_1、retrofit-mock框架编写背景需求\",\"1588\":\"336#_2、编写思路\",\"1589\":\"336#_3、retrofitmock-aop\",\"1590\":\"336@0\",\"1591\":\"336@1\",\"1592\":\"337\",\"1593\":\"337@0\",\"1594\":\"337@1\",\"1595\":\"338\",\"1596\":\"338@0\",\"1597\":\"338@1\",\"1598\":\"339\",\"1599\":\"339@0\",\"1600\":\"339@1\",\"1601\":\"340\",\"1602\":\"340@0\",\"1603\":\"340@1\",\"1604\":\"341\",\"1605\":\"341@0\",\"1606\":\"341@1\",\"1607\":\"342\",\"1608\":\"342@0\",\"1609\":\"342@1\",\"1610\":\"343\",\"1611\":\"343@0\",\"1612\":\"343@1\",\"1613\":\"344\",\"1614\":\"344@0\",\"1615\":\"344@1\",\"1616\":\"345\",\"1617\":\"345@0\",\"1618\":\"345@1\",\"1619\":\"346\",\"1620\":\"346#源码\",\"1621\":\"346#演示\",\"1622\":\"346#功能\",\"1623\":\"346#引入\",\"1624\":\"346#用法\",\"1625\":\"346#_1、增加注解配置\",\"1626\":\"346#_2、继承sharepreffacade-如下实现即可\",\"1627\":\"346#_3、application初始化\",\"1628\":\"346#_4、使用\",\"1629\":\"346#感谢\",\"1630\":\"346@0\",\"1631\":\"346@1\",\"1632\":\"347\",\"1633\":\"347@0\",\"1634\":\"347@1\",\"1635\":\"348\",\"1636\":\"348#一、重写rxbus原因\",\"1637\":\"348#二、重写思路\",\"1638\":\"348#三、eventbus源代码分析\",\"1639\":\"348#四、定制rxbus2源代码\",\"1640\":\"348#add-dependency\",\"1641\":\"348#step-1\",\"1642\":\"348#step-2\",\"1643\":\"348#usage\",\"1644\":\"348#step-1-register\",\"1645\":\"348#step-2-post-receive\",\"1646\":\"348#step-3-unregister\",\"1647\":\"348#特别感谢\",\"1648\":\"348#license\",\"1649\":\"348@0\",\"1650\":\"348@1\",\"1651\":\"349\",\"1652\":\"349@0\",\"1653\":\"349@1\",\"1654\":\"350\",\"1655\":\"350@0\",\"1656\":\"350@1\",\"1657\":\"351\",\"1658\":\"351@0\",\"1659\":\"351@1\",\"1660\":\"352\",\"1661\":\"352@0\",\"1662\":\"352@1\",\"1663\":\"353\",\"1664\":\"353@0\",\"1665\":\"353@1\",\"1666\":\"354\",\"1667\":\"354@0\",\"1668\":\"354@1\",\"1669\":\"355\",\"1670\":\"355@0\",\"1671\":\"355@1\",\"1672\":\"356\",\"1673\":\"356@0\",\"1674\":\"356@1\",\"1675\":\"357\",\"1676\":\"357@0\",\"1677\":\"357@1\",\"1678\":\"358\",\"1679\":\"358@0\",\"1680\":\"358@1\",\"1681\":\"359\",\"1682\":\"359#_1、flutter学习思路\",\"1683\":\"359@0\",\"1684\":\"359@1\",\"1685\":\"360\",\"1686\":\"360@0\",\"1687\":\"360@1\",\"1688\":\"361\",\"1689\":\"361#接入flutter-boost原因\",\"1690\":\"361#配置接入\",\"1691\":\"361@0\",\"1692\":\"361@1\",\"1693\":\"362\",\"1694\":\"362#前言\",\"1695\":\"362@0\",\"1696\":\"362@1\",\"1697\":\"363\",\"1698\":\"363@0\",\"1699\":\"364\",\"1700\":\"364@0\",\"1701\":\"365\",\"1702\":\"365#错题记录\",\"1703\":\"365@0\",\"1704\":\"366\",\"1705\":\"366@0\",\"1706\":\"367\",\"1707\":\"367#_1、判断题\",\"1708\":\"367#_2、选择题\",\"1709\":\"367#_3、多选题\",\"1710\":\"367#_4、低频题\",\"1711\":\"367#_1、判断题-1\",\"1712\":\"367#_2、单选题\",\"1713\":\"367#_3、多选题-1\",\"1714\":\"367@0\",\"1715\":\"368\",\"1716\":\"368#权限管理\",\"1717\":\"368#核心代码\",\"1718\":\"368#代码路径\",\"1719\":\"368@0\",\"1720\":\"368@1\",\"1721\":\"369\",\"1722\":\"369@0\",\"1723\":\"370\",\"1724\":\"370#native-binder\",\"1725\":\"370#服务注册\",\"1726\":\"370#客户端调用\",\"1727\":\"370#服务实现\",\"1728\":\"370#编译执行\",\"1729\":\"370#binder-framework\",\"1730\":\"370#服务端注册\",\"1731\":\"370#客户端调用-1\",\"1732\":\"370#服务实现-1\",\"1733\":\"370#执行\",\"1734\":\"370#应用层aidl\",\"1735\":\"370#aidl接口\",\"1736\":\"370#客户端调用-2\",\"1737\":\"370#服务端实现\",\"1738\":\"370#mydata自定义\",\"1739\":\"370#aidl模版\",\"1740\":\"370@0\",\"1741\":\"370@1\",\"1742\":\"371\",\"1743\":\"371#ipc原理\",\"1744\":\"371#binder原理\",\"1745\":\"371#cs模式\",\"1746\":\"371#源码目录\",\"1747\":\"371@0\",\"1748\":\"371@1\",\"1749\":\"372\",\"1750\":\"372#binder架构\",\"1751\":\"372#binder类图\",\"1752\":\"372#binder进程与线程\",\"1753\":\"372#binder传输过程\",\"1754\":\"372#binder路由\",\"1755\":\"372#通信过程-ams\",\"1756\":\"372#关键代码\",\"1757\":\"372#源码目录\",\"1758\":\"372@0\",\"1759\":\"372@1\",\"1760\":\"373\",\"1761\":\"373#binder死亡通知\",\"1762\":\"373#核心代码\",\"1763\":\"373#代码路径\",\"1764\":\"373@0\",\"1765\":\"373@1\",\"1766\":\"374\",\"1767\":\"374#驱动分层\",\"1768\":\"374#binder通信过程\",\"1769\":\"374#一次拷贝\",\"1770\":\"374#核心方法\",\"1771\":\"374#binder驱动底层方法\",\"1772\":\"374#核心代码\",\"1773\":\"374@0\",\"1774\":\"374@1\",\"1775\":\"375\",\"1776\":\"375#binder池总结\",\"1777\":\"375#binder线程创建\",\"1778\":\"375#核心代码\",\"1779\":\"375#binder池上限\",\"1780\":\"375#binder-thread-read\",\"1781\":\"375#代码路径\",\"1782\":\"375@0\",\"1783\":\"375@1\",\"1784\":\"376\",\"1785\":\"376#启动servicemanage\",\"1786\":\"376#启动流程\",\"1787\":\"376#启动命令\",\"1788\":\"376#启动流程核心代码\",\"1789\":\"376#loop循环和解析\",\"1790\":\"376#注册服务和查询服务\",\"1791\":\"376#代码路径\",\"1792\":\"376@0\",\"1793\":\"376@1\",\"1794\":\"377\",\"1795\":\"377#注册服务\",\"1796\":\"377#流程\",\"1797\":\"377#本质\",\"1798\":\"377#核心代码\",\"1799\":\"377#获取服务\",\"1800\":\"377#代码路径\",\"1801\":\"377@0\",\"1802\":\"377@1\",\"1803\":\"378\",\"1804\":\"378#获得servicemanage\",\"1805\":\"378#核心代码\",\"1806\":\"378#使用模版方法\",\"1807\":\"378#代码路径\",\"1808\":\"378@0\",\"1809\":\"378@1\",\"1810\":\"379\",\"1811\":\"379@0\",\"1812\":\"380\",\"1813\":\"380@0\",\"1814\":\"380@1\",\"1815\":\"381\",\"1816\":\"381@0\",\"1817\":\"382\",\"1818\":\"382@0\",\"1819\":\"382@1\",\"1820\":\"383\",\"1821\":\"383@0\",\"1822\":\"384\",\"1823\":\"384#handler整体架构\",\"1824\":\"384#消息队列\",\"1825\":\"384#native层关键方法\",\"1826\":\"384#发送消息sendmessage和唤醒\",\"1827\":\"384#nativewake-唤醒poll循环\",\"1828\":\"384#nativepollonce-取出消息和处理消息\",\"1829\":\"384#nativeinit-创建消息队列和looper\",\"1830\":\"384#nativedestroy-销毁\",\"1831\":\"384#常用结构体\",\"1832\":\"384#源码路径\",\"1833\":\"384@0\",\"1834\":\"384@1\",\"1835\":\"385\",\"1836\":\"385#handler整体架构\",\"1837\":\"385#handler模型\",\"1838\":\"385#handler类图\",\"1839\":\"385#典型案例\",\"1840\":\"385#handler构建\",\"1841\":\"385#消息入队-handler发送\",\"1842\":\"385#消息出队-handler处理\",\"1843\":\"385#消息循环\",\"1844\":\"385#messagequeue\",\"1845\":\"385#创建messagequeue\",\"1846\":\"385#next-取出消息\",\"1847\":\"385#enqueuemessage-添加消息\",\"1848\":\"385#同步屏障-异步消息\",\"1849\":\"385#场景\",\"1850\":\"385#消息池\",\"1851\":\"385#handler内存泄漏\",\"1852\":\"385#源码路径\",\"1853\":\"385@0\",\"1854\":\"385@1\",\"1855\":\"386\",\"1856\":\"386#android启动流程\",\"1857\":\"386#init进程\",\"1858\":\"386#init-rc配置\",\"1859\":\"386#zygote进程启动\",\"1860\":\"386#app-main-cpp\",\"1861\":\"386#androidruntime\",\"1862\":\"386#zygoteinit\",\"1863\":\"386#接收ams消息进行处理\",\"1864\":\"386#system-server进程启动\",\"1865\":\"386#前置流程\",\"1866\":\"386#启动system进程\",\"1867\":\"386#system-main\",\"1868\":\"386#服务启动\",\"1869\":\"386#app启动流程\",\"1870\":\"386#源码路径\",\"1871\":\"386@0\",\"1872\":\"386@1\",\"1873\":\"387\",\"1874\":\"387@0\",\"1875\":\"388\",\"1876\":\"388@0\",\"1877\":\"389\",\"1878\":\"389@0\",\"1879\":\"389@1\",\"1880\":\"390\",\"1881\":\"390@0\",\"1882\":\"391\",\"1883\":\"391@0\",\"1884\":\"391@1\",\"1885\":\"392\",\"1886\":\"392@0\",\"1887\":\"393\",\"1888\":\"393@0\",\"1889\":\"393@1\",\"1890\":\"394\",\"1891\":\"394@0\",\"1892\":\"395\",\"1893\":\"395@0\",\"1894\":\"395@1\",\"1895\":\"396\",\"1896\":\"396@0\",\"1897\":\"397\",\"1898\":\"397@0\",\"1899\":\"397@1\",\"1900\":\"398\",\"1901\":\"398@0\",\"1902\":\"399\",\"1903\":\"399@0\",\"1904\":\"399@1\",\"1905\":\"400\",\"1906\":\"400@0\",\"1907\":\"400@1\",\"1908\":\"401\",\"1909\":\"401@0\",\"1910\":\"401@1\",\"1911\":\"402\",\"1912\":\"402@0\",\"1913\":\"402@1\",\"1914\":\"403\",\"1915\":\"403@0\",\"1916\":\"403@1\",\"1917\":\"404\",\"1918\":\"404@0\",\"1919\":\"404@1\",\"1920\":\"405\",\"1921\":\"405#_1、生成ssh-key-以github为例\",\"1922\":\"405#_2、添加私钥\",\"1923\":\"405#_3、修改配置-ssh-config\",\"1924\":\"405#_4、为不同的项目设置单独的name和email\",\"1925\":\"405@0\",\"1926\":\"405@1\",\"1927\":\"406\",\"1928\":\"406#生成key\",\"1929\":\"406#导出公钥\",\"1930\":\"406#仓库镜像管理-gitee-github同步\",\"1931\":\"406@0\",\"1932\":\"406@1\",\"1933\":\"407\",\"1934\":\"407@0\",\"1935\":\"407@1\",\"1936\":\"408\",\"1937\":\"408#mac\",\"1938\":\"408#windows\",\"1939\":\"408@0\",\"1940\":\"408@1\",\"1941\":\"409\",\"1942\":\"409#设置全局信息\",\"1943\":\"409#生成私钥\",\"1944\":\"409#正常创建git项目流程\",\"1945\":\"409#将非git项目本地代码-提交到新的远程仓库\",\"1946\":\"409#克隆下载项目\",\"1947\":\"409#分支命令\",\"1948\":\"409#查看项目状态\",\"1949\":\"409#tag标签\",\"1950\":\"409#远程项目管理\",\"1951\":\"409#异常处理\",\"1952\":\"409#gitignore-配置文件\",\"1953\":\"409@0\",\"1954\":\"409@1\",\"1955\":\"410\",\"1956\":\"410@0\",\"1957\":\"410@1\",\"1958\":\"411\",\"1959\":\"411#_1、创建github仓库\",\"1960\":\"411#_2、hexo-建站\",\"1961\":\"411#_3、上传hexo源码至仓库\",\"1962\":\"411#添加gitalk评论\",\"1963\":\"411#备注-mac-按照端口杀进程\",\"1964\":\"411@0\",\"1965\":\"411@1\",\"1966\":\"412\",\"1967\":\"412@0\",\"1968\":\"412@1\",\"1969\":\"413\",\"1970\":\"413#博客评论\",\"1971\":\"413@0\",\"1972\":\"413@1\",\"1973\":\"414\",\"1974\":\"414#mac-node管理-n\",\"1975\":\"414@0\",\"1976\":\"414@1\",\"1977\":\"415\",\"1978\":\"415#feishu2md\",\"1979\":\"415@0\",\"1980\":\"415@1\",\"1981\":\"416\",\"1982\":\"417\",\"1983\":\"418\",\"1984\":\"419\",\"1985\":\"420\",\"1986\":\"421\",\"1987\":\"422\",\"1988\":\"423\",\"1989\":\"424\",\"1990\":\"425\",\"1991\":\"426\",\"1992\":\"427\",\"1993\":\"428\",\"1994\":\"429\",\"1995\":\"430\",\"1996\":\"431\",\"1997\":\"432\",\"1998\":\"433\",\"1999\":\"434\",\"2000\":\"435\",\"2001\":\"436\",\"2002\":\"437\",\"2003\":\"438\",\"2004\":\"439\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,12],\"1\":[1],\"2\":[null,null,1],\"3\":[1],\"4\":[null,null,1],\"5\":[1],\"6\":[1,2],\"7\":[1],\"8\":[1,18],\"9\":[1,27],\"10\":[3],\"11\":[3,12],\"12\":[1,491],\"13\":[1],\"14\":[1,57],\"15\":[1,11],\"16\":[3,50],\"17\":[null,null,1],\"18\":[null,null,1],\"19\":[2,21],\"20\":[null,null,1],\"21\":[null,null,1],\"22\":[3],\"23\":[2,8],\"24\":[2,3],\"25\":[2,38],\"26\":[null,null,1],\"27\":[null,null,1],\"28\":[11,22],\"29\":[null,null,1],\"30\":[null,null,1],\"31\":[6,11],\"32\":[null,null,1],\"33\":[null,null,1],\"34\":[6,14],\"35\":[null,null,1],\"36\":[null,null,1],\"37\":[11,9],\"38\":[null,null,1],\"39\":[null,null,1],\"40\":[8,20],\"41\":[null,null,1],\"42\":[null,null,1],\"43\":[10,8],\"44\":[null,null,1],\"45\":[null,null,1],\"46\":[7,8],\"47\":[null,null,1],\"48\":[null,null,1],\"49\":[7,3],\"50\":[null,null,1],\"51\":[null,null,1],\"52\":[9,44],\"53\":[null,null,1],\"54\":[null,null,1],\"55\":[5,25],\"56\":[null,null,1],\"57\":[null,null,1],\"58\":[2,31],\"59\":[null,null,1],\"60\":[null,null,1],\"61\":[7,19],\"62\":[null,null,1],\"63\":[null,null,1],\"64\":[11,13],\"65\":[null,null,1],\"66\":[null,null,1],\"67\":[12,85],\"68\":[null,null,1],\"69\":[null,null,1],\"70\":[7,55],\"71\":[null,null,1],\"72\":[null,null,1],\"73\":[7,77],\"74\":[null,null,1],\"75\":[null,null,1],\"76\":[12,15],\"77\":[null,null,1],\"78\":[null,null,1],\"79\":[1,33],\"80\":[null,null,1],\"81\":[null,null,1],\"82\":[11],\"83\":[null,null,1],\"84\":[null,null,1],\"85\":[6,23],\"86\":[null,null,1],\"87\":[null,null,1],\"88\":[6,12],\"89\":[null,null,1],\"90\":[null,null,1],\"91\":[9,5],\"92\":[null,null,1],\"93\":[null,null,1],\"94\":[4,122],\"95\":[null,null,1],\"96\":[null,null,1],\"97\":[8,4],\"98\":[null,null,1],\"99\":[null,null,1],\"100\":[9,16],\"101\":[null,null,1],\"102\":[null,null,1],\"103\":[1,227],\"104\":[null,null,1],\"105\":[null,null,1],\"106\":[3,35],\"107\":[null,null,1],\"108\":[null,null,1],\"109\":[4,29],\"110\":[null,null,1],\"111\":[null,null,1],\"112\":[3,6],\"113\":[null,null,1],\"114\":[null,null,1],\"115\":[2,30],\"116\":[null,null,1],\"117\":[null,null,1],\"118\":[3,22],\"119\":[null,null,1],\"120\":[null,null,1],\"121\":[1,11],\"122\":[null,null,1],\"123\":[null,null,1],\"124\":[1,11],\"125\":[null,null,1],\"126\":[null,null,1],\"127\":[1],\"128\":[null,null,1],\"129\":[1],\"130\":[null,null,1],\"131\":[null,null,1],\"132\":[1],\"133\":[null,null,1],\"134\":[null,null,1],\"135\":[1],\"136\":[null,null,1],\"137\":[null,null,1],\"138\":[1],\"139\":[null,null,1],\"140\":[null,null,1],\"141\":[1],\"142\":[null,null,1],\"143\":[null,null,1],\"144\":[1,26],\"145\":[1,58],\"146\":[null,null,1],\"147\":[null,null,1],\"148\":[1],\"149\":[null,null,1],\"150\":[null,null,1],\"151\":[1,29],\"152\":[null,null,1],\"153\":[null,null,1],\"154\":[1,79],\"155\":[null,null,1],\"156\":[null,null,1],\"157\":[3],\"158\":[4,15],\"159\":[2,9],\"160\":[2,15],\"161\":[null,null,1],\"162\":[null,null,1],\"163\":[3],\"164\":[null,null,1],\"165\":[null,null,1],\"166\":[1],\"167\":[2,18],\"168\":[2,6],\"169\":[4,38],\"170\":[null,null,1],\"171\":[null,null,1],\"172\":[2],\"173\":[null,null,1],\"174\":[null,null,1],\"175\":[1],\"176\":[null,null,1],\"177\":[null,null,1],\"178\":[2],\"179\":[null,null,1],\"180\":[null,null,1],\"181\":[1,33],\"182\":[null,null,1],\"183\":[null,null,1],\"184\":[1,19],\"185\":[null,null,1],\"186\":[null,null,1],\"187\":[1],\"188\":[null,null,1],\"189\":[null,null,1],\"190\":[1],\"191\":[null,null,1],\"192\":[null,null,1],\"193\":[1],\"194\":[2,35],\"195\":[2,9],\"196\":[3,4],\"197\":[2,37],\"198\":[null,null,1],\"199\":[null,null,1],\"200\":[1,46],\"201\":[null,null,1],\"202\":[null,null,1],\"203\":[1,1],\"204\":[6,11],\"205\":[6,13],\"206\":[2,19],\"207\":[2,112],\"208\":[2,1],\"209\":[null,null,1],\"210\":[null,null,1],\"211\":[1],\"212\":[4,17],\"213\":[2,8],\"214\":[2,9],\"215\":[2,14],\"216\":[2,6],\"217\":[2],\"218\":[null,null,1],\"219\":[null,null,1],\"220\":[1],\"221\":[null,null,1],\"222\":[null,null,1],\"223\":[1],\"224\":[null,null,1],\"225\":[null,null,1],\"226\":[1],\"227\":[2,59],\"228\":[2,32],\"229\":[2,8],\"230\":[2,43],\"231\":[null,null,1],\"232\":[null,null,1],\"233\":[1,1],\"234\":[null,null,1],\"235\":[null,null,1],\"236\":[1],\"237\":[1,29],\"238\":[null,null,1],\"239\":[null,null,1],\"240\":[1],\"241\":[null,null,1],\"242\":[null,null,1],\"243\":[1],\"244\":[null,null,1],\"245\":[null,null,1],\"246\":[1,48],\"247\":[1,35],\"248\":[1,14],\"249\":[1,6],\"250\":[null,null,1],\"251\":[null,null,1],\"252\":[1],\"253\":[null,null,1],\"254\":[null,null,1],\"255\":[1],\"256\":[3,32],\"257\":[2,81],\"258\":[2,4],\"259\":[2,118],\"260\":[5,9],\"261\":[3,12],\"262\":[2,6],\"263\":[2,5],\"264\":[4,10],\"265\":[2,21],\"266\":[null,null,1],\"267\":[null,null,1],\"268\":[1,23],\"269\":[null,null,1],\"270\":[null,null,1],\"271\":[1,78],\"272\":[null,null,1],\"273\":[null,null,1],\"274\":[1],\"275\":[2],\"276\":[2,1],\"277\":[2,1],\"278\":[2,45],\"279\":[2,57],\"280\":[2,48],\"281\":[2,44],\"282\":[2,28],\"283\":[2,79],\"284\":[2,60],\"285\":[2,81],\"286\":[2,14],\"287\":[2,18],\"288\":[null,null,1],\"289\":[null,null,1],\"290\":[1],\"291\":[null,null,1],\"292\":[1,5],\"293\":[null,null,1],\"294\":[null,null,1],\"295\":[1,5],\"296\":[null,null,1],\"297\":[null,null,1],\"298\":[1,228],\"299\":[1,6],\"300\":[null,null,1],\"301\":[null,null,1],\"302\":[1],\"303\":[null,null,1],\"304\":[null,null,1],\"305\":[2,123],\"306\":[null,null,1],\"307\":[null,null,1],\"308\":[1],\"309\":[null,null,1],\"310\":[1,16],\"311\":[2,58],\"312\":[2,34],\"313\":[2,37],\"314\":[2,145],\"315\":[null,null,1],\"316\":[null,null,1],\"317\":[1],\"318\":[null,null,1],\"319\":[1,21],\"320\":[2,11],\"321\":[1],\"322\":[2,24],\"323\":[2,15],\"324\":[2,6],\"325\":[1,24],\"326\":[2],\"327\":[1,34],\"328\":[1,27],\"329\":[2,16],\"330\":[1],\"331\":[2,27],\"332\":[2,81],\"333\":[2,39],\"334\":[2,101],\"335\":[3,16],\"336\":[1],\"337\":[2,30],\"338\":[2,51],\"339\":[4,18],\"340\":[2,18],\"341\":[1],\"342\":[2,43],\"343\":[2,15],\"344\":[1],\"345\":[2,19],\"346\":[4,12],\"347\":[1,7],\"348\":[2,64],\"349\":[2,46],\"350\":[3,75],\"351\":[2,97],\"352\":[3,117],\"353\":[3,35],\"354\":[2,43],\"355\":[2,8],\"356\":[4,17],\"357\":[1],\"358\":[2,62],\"359\":[3,151],\"360\":[5,20],\"361\":[1],\"362\":[1,48],\"363\":[2,38],\"364\":[2,46],\"365\":[2,68],\"366\":[1],\"367\":[1,23],\"368\":[1,61],\"369\":[1,2],\"370\":[null,null,1],\"371\":[null,null,1],\"372\":[1,1],\"373\":[null,null,1],\"374\":[null,null,1],\"375\":[1,1],\"376\":[null,null,1],\"377\":[null,null,1],\"378\":[1],\"379\":[2,13],\"380\":[3,6],\"381\":[2,139],\"382\":[2,25],\"383\":[3,16],\"384\":[3,8],\"385\":[2,47],\"386\":[null,null,1],\"387\":[null,null,1],\"388\":[1],\"389\":[1,8],\"390\":[1,7],\"391\":[1,1],\"392\":[1],\"393\":[1,16],\"394\":[1,19],\"395\":[1,34],\"396\":[1,4],\"397\":[null,null,1],\"398\":[null,null,1],\"399\":[1],\"400\":[null,null,1],\"401\":[3],\"402\":[2,4],\"403\":[1],\"404\":[2,15],\"405\":[2,63],\"406\":[1,7],\"407\":[null,null,1],\"408\":[null,null,1],\"409\":[3,47],\"410\":[null,null,1],\"411\":[null,null,1],\"412\":[3],\"413\":[2,3],\"414\":[2],\"415\":[2,30],\"416\":[3,44],\"417\":[2,7],\"418\":[null,null,1],\"419\":[null,null,1],\"420\":[3],\"421\":[2,4],\"422\":[1,47],\"423\":[1,7],\"424\":[null,null,1],\"425\":[null,null,1],\"426\":[3],\"427\":[2,4],\"428\":[1,38],\"429\":[1,7],\"430\":[null,null,1],\"431\":[null,null,1],\"432\":[3],\"433\":[2,3],\"434\":[1,1],\"435\":[2,46],\"436\":[1,7],\"437\":[null,null,1],\"438\":[null,null,1],\"439\":[3],\"440\":[2,2],\"441\":[1,75],\"442\":[1,7],\"443\":[null,null,1],\"444\":[null,null,1],\"445\":[3],\"446\":[2,3],\"447\":[1,89],\"448\":[1,7],\"449\":[null,null,1],\"450\":[null,null,1],\"451\":[3],\"452\":[2,4],\"453\":[1,41],\"454\":[1,7],\"455\":[null,null,1],\"456\":[null,null,1],\"457\":[3],\"458\":[2,4],\"459\":[1,47],\"460\":[1,7],\"461\":[null,null,1],\"462\":[null,null,1],\"463\":[3],\"464\":[2,6],\"465\":[1,69],\"466\":[1,7],\"467\":[null,null,1],\"468\":[null,null,1],\"469\":[3],\"470\":[2,3],\"471\":[1,41],\"472\":[1,7],\"473\":[null,null,1],\"474\":[null,null,1],\"475\":[3],\"476\":[2,3],\"477\":[2,35],\"478\":[1,7],\"479\":[null,null,1],\"480\":[null,null,1],\"481\":[3],\"482\":[2,2],\"483\":[1,64],\"484\":[1,7],\"485\":[null,null,1],\"486\":[null,null,1],\"487\":[3],\"488\":[2,3],\"489\":[1,55],\"490\":[1,7],\"491\":[null,null,1],\"492\":[null,null,1],\"493\":[3],\"494\":[2,4],\"495\":[1,29],\"496\":[1,7],\"497\":[null,null,1],\"498\":[null,null,1],\"499\":[3],\"500\":[2,4],\"501\":[1,59],\"502\":[1,7],\"503\":[null,null,1],\"504\":[null,null,1],\"505\":[3],\"506\":[2,3],\"507\":[1,43],\"508\":[1,7],\"509\":[null,null,1],\"510\":[null,null,1],\"511\":[3],\"512\":[2,5],\"513\":[1,40],\"514\":[1,7],\"515\":[null,null,1],\"516\":[null,null,1],\"517\":[3],\"518\":[2,4],\"519\":[1,49],\"520\":[1,7],\"521\":[null,null,1],\"522\":[null,null,1],\"523\":[3],\"524\":[2,5],\"525\":[1,72],\"526\":[1,7],\"527\":[null,null,1],\"528\":[null,null,1],\"529\":[3],\"530\":[2,3],\"531\":[1,93],\"532\":[1,7],\"533\":[null,null,1],\"534\":[null,null,1],\"535\":[3],\"536\":[2,3],\"537\":[1,78],\"538\":[1,7],\"539\":[null,null,1],\"540\":[null,null,1],\"541\":[3],\"542\":[2,3],\"543\":[1,94],\"544\":[1,7],\"545\":[null,null,1],\"546\":[null,null,1],\"547\":[1],\"548\":[null,null,1],\"549\":[1],\"550\":[null,null,1],\"551\":[1],\"552\":[null,null,1],\"553\":[1],\"554\":[null,null,1],\"555\":[null,null,1],\"556\":[1],\"557\":[null,null,1],\"558\":[2,17],\"559\":[2,21],\"560\":[null,null,1],\"561\":[null,null,1],\"562\":[1],\"563\":[null,null,1],\"564\":[1],\"565\":[null,null,1],\"566\":[1],\"567\":[null,null,1],\"568\":[1],\"569\":[null,null,1],\"570\":[1],\"571\":[1,21],\"572\":[1,6],\"573\":[1,20],\"574\":[null,null,1],\"575\":[null,null,1],\"576\":[1],\"577\":[null,null,1],\"578\":[1],\"579\":[null,null,1],\"580\":[2,10],\"581\":[null,null,1],\"582\":[null,null,1],\"583\":[1,19],\"584\":[null,null,1],\"585\":[null,null,1],\"586\":[1,38],\"587\":[null,null,1],\"588\":[null,null,1],\"589\":[1,21],\"590\":[null,null,1],\"591\":[null,null,1],\"592\":[1,8],\"593\":[null,null,1],\"594\":[null,null,1],\"595\":[2,100],\"596\":[null,null,1],\"597\":[null,null,1],\"598\":[1,80],\"599\":[null,null,1],\"600\":[null,null,1],\"601\":[1],\"602\":[6],\"603\":[1,21],\"604\":[1,32],\"605\":[null,null,1],\"606\":[null,null,1],\"607\":[1],\"608\":[1,29],\"609\":[null,null,1],\"610\":[null,null,1],\"611\":[1,10],\"612\":[1,7],\"613\":[1,34],\"614\":[1,90],\"615\":[1,161],\"616\":[null,null,1],\"617\":[null,null,1],\"618\":[1,8],\"619\":[1,37],\"620\":[1,7],\"621\":[1,14],\"622\":[3,82],\"623\":[null,null,1],\"624\":[null,null,1],\"625\":[1],\"626\":[1],\"627\":[2,16],\"628\":[1,5],\"629\":[1,19],\"630\":[1,92],\"631\":[1,289],\"632\":[null,null,1],\"633\":[null,null,1],\"634\":[1],\"635\":[1,8],\"636\":[2,5],\"637\":[2,6],\"638\":[2,93],\"639\":[3,5],\"640\":[2,29],\"641\":[null,null,1],\"642\":[null,null,1],\"643\":[1],\"644\":[1,37],\"645\":[1,13],\"646\":[null,null,1],\"647\":[null,null,1],\"648\":[1],\"649\":[1,49],\"650\":[1,84],\"651\":[2,52],\"652\":[1,37],\"653\":[null,null,1],\"654\":[null,null,1],\"655\":[2],\"656\":[1,15],\"657\":[1,43],\"658\":[null,null,1],\"659\":[null,null,1],\"660\":[1],\"661\":[3,9],\"662\":[1,26],\"663\":[null,null,1],\"664\":[null,null,1],\"665\":[1],\"666\":[1,11],\"667\":[1,38],\"668\":[1,69],\"669\":[null,null,1],\"670\":[null,null,1],\"671\":[2],\"672\":[2,61],\"673\":[null,null,1],\"674\":[null,null,1],\"675\":[1,5],\"676\":[2,4],\"677\":[2,5],\"678\":[2,5],\"679\":[2,5],\"680\":[3,7],\"681\":[null,null,1],\"682\":[null,null,1],\"683\":[1],\"684\":[1,15],\"685\":[null,null,1],\"686\":[null,null,1],\"687\":[1],\"688\":[1,9],\"689\":[null,null,1],\"690\":[null,null,1],\"691\":[2],\"692\":[1,4],\"693\":[1,8],\"694\":[3,65],\"695\":[2,20],\"696\":[1,5],\"697\":[null,null,1],\"698\":[null,null,1],\"699\":[1],\"700\":[1],\"701\":[1,14],\"702\":[1,21],\"703\":[1,4],\"704\":[null,null,1],\"705\":[null,null,1],\"706\":[1],\"707\":[1,22],\"708\":[null,null,1],\"709\":[null,null,1],\"710\":[1],\"711\":[1,144],\"712\":[null,null,1],\"713\":[null,null,1],\"714\":[1],\"715\":[1,32],\"716\":[null,null,1],\"717\":[null,null,1],\"718\":[1],\"719\":[1,1],\"720\":[1,1],\"721\":[2,4],\"722\":[1,9],\"723\":[1,26],\"724\":[null,null,1],\"725\":[null,null,1],\"726\":[1],\"727\":[1,18],\"728\":[1,27],\"729\":[3],\"730\":[3,12],\"731\":[1,491],\"732\":[1,1],\"733\":[1,57],\"734\":[1,11],\"735\":[7,86],\"736\":[null,null,1],\"737\":[null,null,1],\"738\":[1,104],\"739\":[null,null,1],\"740\":[null,null,1],\"741\":[1],\"742\":[1,3],\"743\":[1],\"744\":[2,4],\"745\":[2,3],\"746\":[2,3],\"747\":[2,3],\"748\":[null,null,1],\"749\":[null,null,1],\"750\":[3,50],\"751\":[3,14],\"752\":[3,15],\"753\":[3,50],\"754\":[3,25],\"755\":[null,null,1],\"756\":[null,null,1],\"757\":[1,42],\"758\":[null,null,1],\"759\":[null,null,1],\"760\":[2,29],\"761\":[null,null,1],\"762\":[null,null,1],\"763\":[2,21],\"764\":[null,null,1],\"765\":[null,null,1],\"766\":[2,9],\"767\":[null,null,1],\"768\":[null,null,1],\"769\":[2,15],\"770\":[null,null,1],\"771\":[null,null,1],\"772\":[2,18],\"773\":[null,null,1],\"774\":[null,null,1],\"775\":[2,10],\"776\":[null,null,1],\"777\":[null,null,1],\"778\":[2,20],\"779\":[null,null,1],\"780\":[null,null,1],\"781\":[2,6],\"782\":[null,null,1],\"783\":[null,null,1],\"784\":[2,14],\"785\":[null,null,1],\"786\":[null,null,1],\"787\":[2,44],\"788\":[null,null,1],\"789\":[null,null,1],\"790\":[2,4],\"791\":[null,null,1],\"792\":[null,null,1],\"793\":[2,89],\"794\":[null,null,1],\"795\":[null,null,1],\"796\":[2,62],\"797\":[null,null,1],\"798\":[null,null,1],\"799\":[2,44],\"800\":[null,null,1],\"801\":[null,null,1],\"802\":[2,57],\"803\":[null,null,1],\"804\":[null,null,1],\"805\":[2,81],\"806\":[null,null,1],\"807\":[null,null,1],\"808\":[2,49],\"809\":[null,null,1],\"810\":[null,null,1],\"811\":[2,8],\"812\":[null,null,1],\"813\":[null,null,1],\"814\":[1,19],\"815\":[null,null,1],\"816\":[null,null,1],\"817\":[2],\"818\":[2],\"819\":[2,4],\"820\":[1,47],\"821\":[1,12],\"822\":[1,83],\"823\":[2,48],\"824\":[2,14],\"825\":[1,9],\"826\":[null,null,1],\"827\":[null,null,1],\"828\":[3,45],\"829\":[null,null,1],\"830\":[null,null,1],\"831\":[2],\"832\":[1,4],\"833\":[1,40],\"834\":[1,41],\"835\":[1,5],\"836\":[null,null,1],\"837\":[null,null,1],\"838\":[2],\"839\":[2,7],\"840\":[2,7],\"841\":[1,20],\"842\":[2],\"843\":[1,31],\"844\":[1,4],\"845\":[1,13],\"846\":[1,15],\"847\":[1,21],\"848\":[1,2],\"849\":[1,1],\"850\":[2,5],\"851\":[1,3],\"852\":[1,30],\"853\":[1,42],\"854\":[2,5],\"855\":[null,null,1],\"856\":[null,null,1],\"857\":[2],\"858\":[1,15],\"859\":[1,19],\"860\":[1,6],\"861\":[1,9],\"862\":[1,22],\"863\":[1,25],\"864\":[2,31],\"865\":[null,null,1],\"866\":[null,null,1],\"867\":[2,80],\"868\":[1,39],\"869\":[1,30],\"870\":[1,101],\"871\":[null,null,1],\"872\":[null,null,1],\"873\":[2],\"874\":[1,26],\"875\":[2,3],\"876\":[1,94],\"877\":[1,7],\"878\":[2,37],\"879\":[2,84],\"880\":[2,103],\"881\":[2,14],\"882\":[1,44],\"883\":[1,37],\"884\":[1,73],\"885\":[2,40],\"886\":[1,83],\"887\":[1,31],\"888\":[1,7],\"889\":[1,26],\"890\":[1,3],\"891\":[null,null,1],\"892\":[null,null,1],\"893\":[2],\"894\":[1,26],\"895\":[1,77],\"896\":[1,83],\"897\":[2,78],\"898\":[null,null,1],\"899\":[null,null,1],\"900\":[2,102],\"901\":[null,null,1],\"902\":[null,null,1],\"903\":[2],\"904\":[2,33],\"905\":[1,49],\"906\":[1,3],\"907\":[1,54],\"908\":[1,45],\"909\":[null,null,1],\"910\":[null,null,1],\"911\":[2],\"912\":[1,3],\"913\":[1,12],\"914\":[1,37],\"915\":[1,2],\"916\":[1,15],\"917\":[1,119],\"918\":[null,null,1],\"919\":[null,null,1],\"920\":[1,18],\"921\":[null,null,1],\"922\":[null,null,1],\"923\":[1,60],\"924\":[null,null,1],\"925\":[null,null,1],\"926\":[1,49],\"927\":[null,null,1],\"928\":[null,null,1],\"929\":[1,25],\"930\":[null,null,1],\"931\":[null,null,1],\"932\":[3,33],\"933\":[null,null,1],\"934\":[null,null,1],\"935\":[3,42],\"936\":[null,null,1],\"937\":[null,null,1],\"938\":[3,59],\"939\":[null,null,1],\"940\":[null,null,1],\"941\":[1],\"942\":[2,24],\"943\":[2,30],\"944\":[2,17],\"945\":[1,60],\"946\":[1,19],\"947\":[1],\"948\":[4,22],\"949\":[1,31],\"950\":[1,141],\"951\":[null,null,1],\"952\":[null,null,1],\"953\":[1],\"954\":[1,19],\"955\":[1,5],\"956\":[null,null,1],\"957\":[null,null,1],\"958\":[2,104],\"959\":[null,null,1],\"960\":[null,null,1],\"961\":[1],\"962\":[null,null,1],\"963\":[null,null,1],\"964\":[1,1],\"965\":[null,null,1],\"966\":[null,null,1],\"967\":[1],\"968\":[null,null,1],\"969\":[null,null,1],\"970\":[1],\"971\":[null,null,1],\"972\":[null,null,1],\"973\":[1,1],\"974\":[null,null,1],\"975\":[null,null,1],\"976\":[2],\"977\":[1,7],\"978\":[2,32],\"979\":[2,88],\"980\":[1,6],\"981\":[null,null,1],\"982\":[null,null,1],\"983\":[3,40],\"984\":[1,139],\"985\":[1,39],\"986\":[1,15],\"987\":[1,6],\"988\":[null,null,1],\"989\":[null,null,1],\"990\":[2],\"991\":[1,23],\"992\":[1,21],\"993\":[1,136],\"994\":[1,61],\"995\":[1,29],\"996\":[2,41],\"997\":[1,19],\"998\":[1,9],\"999\":[null,null,1],\"1000\":[null,null,1],\"1001\":[2],\"1002\":[1,29],\"1003\":[1,46],\"1004\":[1,6],\"1005\":[null,null,1],\"1006\":[null,null,1],\"1007\":[2],\"1008\":[1,25],\"1009\":[1,154],\"1010\":[1,17],\"1011\":[1,6],\"1012\":[null,null,1],\"1013\":[null,null,1],\"1014\":[3],\"1015\":[1,99],\"1016\":[1,39],\"1017\":[1,22],\"1018\":[1,9],\"1019\":[null,null,1],\"1020\":[null,null,1],\"1021\":[2],\"1022\":[1,106],\"1023\":[1,58],\"1024\":[1,17],\"1025\":[1,9],\"1026\":[null,null,1],\"1027\":[null,null,1],\"1028\":[2],\"1029\":[1,20],\"1030\":[1,160],\"1031\":[1,9],\"1032\":[null,null,1],\"1033\":[null,null,1],\"1034\":[2],\"1035\":[1,20],\"1036\":[2,189],\"1037\":[1,17],\"1038\":[1,9],\"1039\":[null,null,1],\"1040\":[null,null,1],\"1041\":[2],\"1042\":[2,11],\"1043\":[3,5],\"1044\":[2,113],\"1045\":[1,9],\"1046\":[null,null,1],\"1047\":[null,null,1],\"1048\":[2],\"1049\":[1,11],\"1050\":[1,14],\"1051\":[1,6],\"1052\":[null,null,1],\"1053\":[null,null,1],\"1054\":[2],\"1055\":[2,54],\"1056\":[1,45],\"1057\":[1,9],\"1058\":[null,null,1],\"1059\":[null,null,1],\"1060\":[2],\"1061\":[2,30],\"1062\":[2,20],\"1063\":[2,79],\"1064\":[2,106],\"1065\":[1,7],\"1066\":[null,null,1],\"1067\":[null,null,1],\"1068\":[3],\"1069\":[1,8],\"1070\":[1,57],\"1071\":[1,6],\"1072\":[null,null,1],\"1073\":[null,null,1],\"1074\":[2],\"1075\":[1,12],\"1076\":[1,52],\"1077\":[1,24],\"1078\":[1,62],\"1079\":[1,20],\"1080\":[1,1],\"1081\":[1,38],\"1082\":[1,7],\"1083\":[null,null,1],\"1084\":[null,null,1],\"1085\":[2],\"1086\":[1,36],\"1087\":[1,24],\"1088\":[1,12],\"1089\":[1,6],\"1090\":[null,null,1],\"1091\":[null,null,1],\"1092\":[2],\"1093\":[1,19],\"1094\":[1,47],\"1095\":[1,22],\"1096\":[1,15],\"1097\":[1,6],\"1098\":[null,null,1],\"1099\":[null,null,1],\"1100\":[2],\"1101\":[1,90],\"1102\":[1,53],\"1103\":[1,14],\"1104\":[1,6],\"1105\":[null,null,1],\"1106\":[null,null,1],\"1107\":[2],\"1108\":[1,6],\"1109\":[3,133],\"1110\":[4,113],\"1111\":[1,6],\"1112\":[null,null,1],\"1113\":[null,null,1],\"1114\":[2],\"1115\":[1,26],\"1116\":[1,30],\"1117\":[1,29],\"1118\":[1,15],\"1119\":[1,30],\"1120\":[null,null,1],\"1121\":[null,null,1],\"1122\":[2],\"1123\":[1],\"1124\":[2,8],\"1125\":[2,14],\"1126\":[2,15],\"1127\":[2,13],\"1128\":[2,10],\"1129\":[2],\"1130\":[3,9],\"1131\":[2,17],\"1132\":[3,6],\"1133\":[2,11],\"1134\":[2],\"1135\":[2,11],\"1136\":[2,18],\"1137\":[2,3],\"1138\":[2,1],\"1139\":[2,7],\"1140\":[2,2],\"1141\":[3,2],\"1142\":[3,2],\"1143\":[3,3],\"1144\":[1,8],\"1145\":[1,11],\"1146\":[2,15],\"1147\":[null,null,1],\"1148\":[null,null,1],\"1149\":[2],\"1150\":[1],\"1151\":[1,9],\"1152\":[1,9],\"1153\":[1,1],\"1154\":[1,7],\"1155\":[1,4],\"1156\":[1,4],\"1157\":[2],\"1158\":[2],\"1159\":[2],\"1160\":[null,null,1],\"1161\":[null,null,1],\"1162\":[2],\"1163\":[2,1],\"1164\":[2],\"1165\":[2],\"1166\":[null,null,1],\"1167\":[null,null,1],\"1168\":[2],\"1169\":[1,21],\"1170\":[1,7],\"1171\":[1,3],\"1172\":[1,1],\"1173\":[1,5],\"1174\":[1,1],\"1175\":[1,58],\"1176\":[1,9],\"1177\":[2,4],\"1178\":[null,null,1],\"1179\":[null,null,1],\"1180\":[2],\"1181\":[1,1],\"1182\":[1,42],\"1183\":[1,4],\"1184\":[1,2],\"1185\":[1,7],\"1186\":[1],\"1187\":[1,16],\"1188\":[1,38],\"1189\":[1,2],\"1190\":[1],\"1191\":[2],\"1192\":[2],\"1193\":[2],\"1194\":[null,null,1],\"1195\":[null,null,1],\"1196\":[2],\"1197\":[3,51],\"1198\":[2,17],\"1199\":[2,11],\"1200\":[2,21],\"1201\":[2],\"1202\":[2,7],\"1203\":[3,105],\"1204\":[2,1],\"1205\":[1,5],\"1206\":[3,20],\"1207\":[1,13],\"1208\":[1,6],\"1209\":[1,41],\"1210\":[1,28],\"1211\":[1,6],\"1212\":[2,12],\"1213\":[1,8],\"1214\":[null,null,1],\"1215\":[null,null,1],\"1216\":[2],\"1217\":[1],\"1218\":[1,22],\"1219\":[1,1],\"1220\":[1,18],\"1221\":[2,3],\"1222\":[1,12],\"1223\":[1,12],\"1224\":[1,8],\"1225\":[2,17],\"1226\":[2,5],\"1227\":[2,3],\"1228\":[2,2],\"1229\":[1,4],\"1230\":[1,33],\"1231\":[1,6],\"1232\":[1,8],\"1233\":[1,5],\"1234\":[1,1],\"1235\":[1,2],\"1236\":[1,3],\"1237\":[1],\"1238\":[1,36],\"1239\":[1,28],\"1240\":[1,3],\"1241\":[1],\"1242\":[1,9],\"1243\":[1,1],\"1244\":[1,3],\"1245\":[1],\"1246\":[2,1],\"1247\":[2,16],\"1248\":[2,30],\"1249\":[2,1],\"1250\":[1,1],\"1251\":[null,null,1],\"1252\":[null,null,1],\"1253\":[4,123],\"1254\":[null,null,2],\"1255\":[null,null,1],\"1256\":[1,52],\"1257\":[null,null,2],\"1258\":[null,null,1],\"1259\":[1,33],\"1260\":[null,null,2],\"1261\":[null,null,1],\"1262\":[1,51],\"1263\":[null,null,2],\"1264\":[null,null,1],\"1265\":[1,27],\"1266\":[null,null,2],\"1267\":[null,null,1],\"1268\":[1,45],\"1269\":[null,null,2],\"1270\":[null,null,1],\"1271\":[3,61],\"1272\":[null,null,2],\"1273\":[null,null,1],\"1274\":[1,73],\"1275\":[null,null,2],\"1276\":[null,null,1],\"1277\":[1,56],\"1278\":[null,null,2],\"1279\":[null,null,1],\"1280\":[1,34],\"1281\":[null,null,2],\"1282\":[null,null,1],\"1283\":[1,77],\"1284\":[null,null,2],\"1285\":[null,null,1],\"1286\":[1,101],\"1287\":[null,null,2],\"1288\":[null,null,1],\"1289\":[1,48],\"1290\":[null,null,1],\"1291\":[null,null,1],\"1292\":[1,105],\"1293\":[null,null,1],\"1294\":[null,null,1],\"1295\":[2,37],\"1296\":[null,null,1],\"1297\":[null,null,1],\"1298\":[2,100],\"1299\":[null,null,1],\"1300\":[null,null,1],\"1301\":[5],\"1302\":[2,6],\"1303\":[3],\"1304\":[2,17],\"1305\":[2,104],\"1306\":[2,9],\"1307\":[2,40],\"1308\":[2],\"1309\":[2,3],\"1310\":[2,75],\"1311\":[3,18],\"1312\":[2,26],\"1313\":[2,48],\"1314\":[2,5],\"1315\":[null,null,1],\"1316\":[null,null,1],\"1317\":[3,84],\"1318\":[null,null,1],\"1319\":[null,null,1],\"1320\":[2,141],\"1321\":[null,null,1],\"1322\":[null,null,1],\"1323\":[1,99],\"1324\":[null,null,1],\"1325\":[null,null,1],\"1326\":[1,116],\"1327\":[null,null,1],\"1328\":[null,null,1],\"1329\":[1,72],\"1330\":[null,null,1],\"1331\":[null,null,1],\"1332\":[3,191],\"1333\":[null,null,1],\"1334\":[null,null,1],\"1335\":[2,125],\"1336\":[null,null,1],\"1337\":[null,null,1],\"1338\":[2,114],\"1339\":[null,null,1],\"1340\":[null,null,1],\"1341\":[3,34],\"1342\":[null,null,1],\"1343\":[null,null,1],\"1344\":[1],\"1345\":[4,6],\"1346\":[2,160],\"1347\":[null,null,1],\"1348\":[null,null,1],\"1349\":[1,57],\"1350\":[null,null,1],\"1351\":[null,null,1],\"1352\":[2,23],\"1353\":[null,null,1],\"1354\":[null,null,1],\"1355\":[2,2],\"1356\":[null,null,1],\"1357\":[null,null,1],\"1358\":[3,100],\"1359\":[null,null,1],\"1360\":[null,null,1],\"1361\":[1,39],\"1362\":[null,null,1],\"1363\":[null,null,1],\"1364\":[1,99],\"1365\":[null,null,1],\"1366\":[null,null,1],\"1367\":[4,170],\"1368\":[2,53],\"1369\":[null,null,1],\"1370\":[null,null,1],\"1371\":[2,37],\"1372\":[null,null,1],\"1373\":[null,null,1],\"1374\":[3,76],\"1375\":[null,null,1],\"1376\":[null,null,1],\"1377\":[1,41],\"1378\":[null,null,1],\"1379\":[null,null,1],\"1380\":[2,13],\"1381\":[null,null,1],\"1382\":[null,null,1],\"1383\":[4,236],\"1384\":[null,null,1],\"1385\":[null,null,1],\"1386\":[2,23],\"1387\":[null,null,1],\"1388\":[null,null,1],\"1389\":[2,29],\"1390\":[null,null,1],\"1391\":[null,null,1],\"1392\":[5,46],\"1393\":[null,null,1],\"1394\":[null,null,1],\"1395\":[1,10],\"1396\":[null,null,1],\"1397\":[null,null,1],\"1398\":[1,9],\"1399\":[2,132],\"1400\":[null,null,1],\"1401\":[null,null,1],\"1402\":[1,247],\"1403\":[null,null,1],\"1404\":[null,null,1],\"1405\":[10,29],\"1406\":[null,null,1],\"1407\":[null,null,1],\"1408\":[1],\"1409\":[1,17],\"1410\":[2,7],\"1411\":[null,null,1],\"1412\":[null,null,1],\"1413\":[2,64],\"1414\":[null,null,1],\"1415\":[null,null,1],\"1416\":[1,207],\"1417\":[3,156],\"1418\":[null,null,1],\"1419\":[null,null,1],\"1420\":[1,8],\"1421\":[null,null,1],\"1422\":[null,null,1],\"1423\":[1,4],\"1424\":[null,null,1],\"1425\":[null,null,1],\"1426\":[1,6],\"1427\":[null,null,1],\"1428\":[null,null,1],\"1429\":[1,3],\"1430\":[null,null,1],\"1431\":[null,null,1],\"1432\":[1,9],\"1433\":[null,null,1],\"1434\":[null,null,1],\"1435\":[1,172],\"1436\":[null,null,1],\"1437\":[null,null,1],\"1438\":[1],\"1439\":[2],\"1440\":[2,7],\"1441\":[3,18],\"1442\":[2],\"1443\":[3,16],\"1444\":[2,12],\"1445\":[3,26],\"1446\":[3,9],\"1447\":[3,2],\"1448\":[null,null,1],\"1449\":[null,null,1],\"1450\":[1,4],\"1451\":[null,null,1],\"1452\":[null,null,1],\"1453\":[1,23],\"1454\":[null,null,1],\"1455\":[null,null,1],\"1456\":[2,22],\"1457\":[null,null,1],\"1458\":[null,null,1],\"1459\":[1,92],\"1460\":[null,null,1],\"1461\":[null,null,1],\"1462\":[1,11],\"1463\":[null,null,1],\"1464\":[null,null,1],\"1465\":[1,14],\"1466\":[null,null,1],\"1467\":[null,null,1],\"1468\":[1,52],\"1469\":[null,null,1],\"1470\":[null,null,1],\"1471\":[2],\"1472\":[2,8],\"1473\":[2,19],\"1474\":[2,41],\"1475\":[2,55],\"1476\":[2,85],\"1477\":[null,null,1],\"1478\":[null,null,1],\"1479\":[2,31],\"1480\":[1,15],\"1481\":[1,67],\"1482\":[1,35],\"1483\":[1,52],\"1484\":[null,null,1],\"1485\":[null,null,1],\"1486\":[7,27],\"1487\":[2,19],\"1488\":[3,98],\"1489\":[null,null,1],\"1490\":[null,null,1],\"1491\":[5,130],\"1492\":[null,null,1],\"1493\":[null,null,1],\"1494\":[4,72],\"1495\":[null,null,1],\"1496\":[null,null,1],\"1497\":[2,1],\"1498\":[null,null,1],\"1499\":[null,null,1],\"1500\":[1,22],\"1501\":[null,null,1],\"1502\":[null,null,1],\"1503\":[1,84],\"1504\":[null,null,1],\"1505\":[null,null,1],\"1506\":[2,23],\"1507\":[null,null,1],\"1508\":[null,null,1],\"1509\":[1,25],\"1510\":[null,null,1],\"1511\":[null,null,1],\"1512\":[1,55],\"1513\":[null,null,1],\"1514\":[null,null,1],\"1515\":[1,22],\"1516\":[null,null,1],\"1517\":[null,null,1],\"1518\":[1,411],\"1519\":[null,null,1],\"1520\":[null,null,1],\"1521\":[1,209],\"1522\":[null,null,1],\"1523\":[null,null,1],\"1524\":[1,15],\"1525\":[null,null,1],\"1526\":[null,null,1],\"1527\":[2,183],\"1528\":[null,null,1],\"1529\":[null,null,1],\"1530\":[1,303],\"1531\":[null,null,1],\"1532\":[null,null,1],\"1533\":[1,6],\"1534\":[1,356],\"1535\":[null,null,1],\"1536\":[null,null,1],\"1537\":[1,7],\"1538\":[null,null,1],\"1539\":[null,null,1],\"1540\":[1,207],\"1541\":[null,null,1],\"1542\":[null,null,1],\"1543\":[1,10],\"1544\":[null,null,1],\"1545\":[null,null,1],\"1546\":[1,184],\"1547\":[null,null,1],\"1548\":[null,null,1],\"1549\":[2,46],\"1550\":[null,null,1],\"1551\":[null,null,1],\"1552\":[3,129],\"1553\":[null,null,1],\"1554\":[null,null,1],\"1555\":[3,228],\"1556\":[null,null,1],\"1557\":[null,null,1],\"1558\":[1,25],\"1559\":[null,null,1],\"1560\":[null,null,1],\"1561\":[3,53],\"1562\":[null,null,1],\"1563\":[null,null,1],\"1564\":[1,26],\"1565\":[null,null,1],\"1566\":[null,null,1],\"1567\":[2,37],\"1568\":[1,19],\"1569\":[null,null,1],\"1570\":[null,null,1],\"1571\":[1,5],\"1572\":[null,null,1],\"1573\":[null,null,1],\"1574\":[1,33],\"1575\":[null,null,1],\"1576\":[null,null,1],\"1577\":[1,34],\"1578\":[null,null,1],\"1579\":[null,null,1],\"1580\":[1,22],\"1581\":[null,null,1],\"1582\":[null,null,1],\"1583\":[1,70],\"1584\":[null,null,1],\"1585\":[null,null,1],\"1586\":[4,12],\"1587\":[3,32],\"1588\":[2,19],\"1589\":[3,79],\"1590\":[null,null,1],\"1591\":[null,null,1],\"1592\":[4,167],\"1593\":[null,null,1],\"1594\":[null,null,1],\"1595\":[3,133],\"1596\":[null,null,1],\"1597\":[null,null,1],\"1598\":[2,165],\"1599\":[null,null,1],\"1600\":[null,null,1],\"1601\":[2,154],\"1602\":[null,null,1],\"1603\":[null,null,1],\"1604\":[2,373],\"1605\":[null,null,1],\"1606\":[null,null,1],\"1607\":[2,54],\"1608\":[null,null,1],\"1609\":[null,null,1],\"1610\":[1,98],\"1611\":[null,null,1],\"1612\":[null,null,1],\"1613\":[1,122],\"1614\":[null,null,1],\"1615\":[null,null,1],\"1616\":[1,26],\"1617\":[null,null,1],\"1618\":[null,null,1],\"1619\":[1,3],\"1620\":[1,6],\"1621\":[1,2],\"1622\":[1,17],\"1623\":[1,16],\"1624\":[1],\"1625\":[2,31],\"1626\":[3,20],\"1627\":[2,5],\"1628\":[2,11],\"1629\":[1,6],\"1630\":[null,null,1],\"1631\":[null,null,1],\"1632\":[2,49],\"1633\":[null,null,1],\"1634\":[null,null,1],\"1635\":[2],\"1636\":[2,11],\"1637\":[2,7],\"1638\":[2,6],\"1639\":[2,5],\"1640\":[2],\"1641\":[3,19],\"1642\":[3,9],\"1643\":[1],\"1644\":[3,5],\"1645\":[4,21],\"1646\":[3,5],\"1647\":[1,44],\"1648\":[1,69],\"1649\":[null,null,1],\"1650\":[null,null,1],\"1651\":[1],\"1652\":[null,null,1],\"1653\":[null,null,1],\"1654\":[1],\"1655\":[null,null,1],\"1656\":[null,null,1],\"1657\":[1],\"1658\":[null,null,1],\"1659\":[null,null,1],\"1660\":[2,23],\"1661\":[null,null,1],\"1662\":[null,null,1],\"1663\":[2,2],\"1664\":[null,null,1],\"1665\":[null,null,1],\"1666\":[4,236],\"1667\":[null,null,1],\"1668\":[null,null,1],\"1669\":[2,23],\"1670\":[null,null,1],\"1671\":[null,null,1],\"1672\":[2,29],\"1673\":[null,null,1],\"1674\":[null,null,1],\"1675\":[5,46],\"1676\":[null,null,1],\"1677\":[null,null,1],\"1678\":[1,10],\"1679\":[null,null,1],\"1680\":[null,null,1],\"1681\":[1,9],\"1682\":[2,132],\"1683\":[null,null,1],\"1684\":[null,null,1],\"1685\":[1,247],\"1686\":[null,null,1],\"1687\":[null,null,1],\"1688\":[2],\"1689\":[2,16],\"1690\":[1,19],\"1691\":[null,null,1],\"1692\":[null,null,1],\"1693\":[1],\"1694\":[1,25],\"1695\":[null,null,1],\"1696\":[null,null,1],\"1697\":[1],\"1698\":[null,null,1],\"1699\":[3,9],\"1700\":[null,null,1],\"1701\":[1,20],\"1702\":[1,229],\"1703\":[null,null,1],\"1704\":[1],\"1705\":[null,null,1],\"1706\":[1,11],\"1707\":[2,146],\"1708\":[2,230],\"1709\":[2,210],\"1710\":[2],\"1711\":[2,121],\"1712\":[2,133],\"1713\":[2,158],\"1714\":[null,null,1],\"1715\":[1],\"1716\":[1,3],\"1717\":[1,98],\"1718\":[1,15],\"1719\":[null,null,1],\"1720\":[null,null,1],\"1721\":[1],\"1722\":[null,null,1],\"1723\":[1],\"1724\":[2,14],\"1725\":[1,36],\"1726\":[1,34],\"1727\":[1,87],\"1728\":[1,17],\"1729\":[2,17],\"1730\":[1,30],\"1731\":[1,65],\"1732\":[1,77],\"1733\":[1,14],\"1734\":[1,1],\"1735\":[1,9],\"1736\":[1,91],\"1737\":[1,62],\"1738\":[1,44],\"1739\":[1,96],\"1740\":[null,null,1],\"1741\":[null,null,1],\"1742\":[1],\"1743\":[1,7],\"1744\":[1,23],\"1745\":[1,11],\"1746\":[1,42],\"1747\":[null,null,1],\"1748\":[null,null,1],\"1749\":[1],\"1750\":[1,1],\"1751\":[1,30],\"1752\":[1,11],\"1753\":[1,5],\"1754\":[1,19],\"1755\":[2,57],\"1756\":[1,208],\"1757\":[1,23],\"1758\":[null,null,1],\"1759\":[null,null,1],\"1760\":[1],\"1761\":[1,74],\"1762\":[1,94],\"1763\":[1,15],\"1764\":[null,null,1],\"1765\":[null,null,1],\"1766\":[1],\"1767\":[1,12],\"1768\":[1,35],\"1769\":[1,1],\"1770\":[1,163],\"1771\":[1,10],\"1772\":[1,55],\"1773\":[null,null,1],\"1774\":[null,null,1],\"1775\":[1],\"1776\":[1,55],\"1777\":[1,20],\"1778\":[1,110],\"1779\":[1,30],\"1780\":[3,40],\"1781\":[1,19],\"1782\":[null,null,1],\"1783\":[null,null,1],\"1784\":[1],\"1785\":[1,7],\"1786\":[1,25],\"1787\":[1,21],\"1788\":[1,51],\"1789\":[1,96],\"1790\":[1,88],\"1791\":[1,14],\"1792\":[null,null,1],\"1793\":[null,null,1],\"1794\":[1],\"1795\":[1,3],\"1796\":[1,19],\"1797\":[2,9],\"1798\":[1,138],\"1799\":[1,95],\"1800\":[1,18],\"1801\":[null,null,1],\"1802\":[null,null,1],\"1803\":[1],\"1804\":[1,28],\"1805\":[1,57],\"1806\":[1,39],\"1807\":[1,13],\"1808\":[null,null,1],\"1809\":[null,null,1],\"1810\":[1],\"1811\":[null,null,1],\"1812\":[1],\"1813\":[null,null,1],\"1814\":[null,null,1],\"1815\":[1],\"1816\":[null,null,1],\"1817\":[1],\"1818\":[null,null,1],\"1819\":[null,null,1],\"1820\":[1],\"1821\":[null,null,1],\"1822\":[2],\"1823\":[1,1],\"1824\":[1,18],\"1825\":[1,18],\"1826\":[1,51],\"1827\":[2,37],\"1828\":[2,164],\"1829\":[2,115],\"1830\":[2,8],\"1831\":[1,55],\"1832\":[1,20],\"1833\":[null,null,1],\"1834\":[null,null,1],\"1835\":[2],\"1836\":[1,1],\"1837\":[1,22],\"1838\":[1,1],\"1839\":[1,26],\"1840\":[1,69],\"1841\":[3,35],\"1842\":[3,40],\"1843\":[1,71],\"1844\":[1],\"1845\":[1,10],\"1846\":[2,122],\"1847\":[2,72],\"1848\":[2,6],\"1849\":[1,52],\"1850\":[1,86],\"1851\":[1,44],\"1852\":[1,11],\"1853\":[null,null,1],\"1854\":[null,null,1],\"1855\":[1],\"1856\":[1,11],\"1857\":[1,71],\"1858\":[2,23],\"1859\":[1,1],\"1860\":[3,39],\"1861\":[1,37],\"1862\":[1,30],\"1863\":[1,63],\"1864\":[2],\"1865\":[1,78],\"1866\":[1,83],\"1867\":[2,115],\"1868\":[1,24],\"1869\":[1,71],\"1870\":[1,42],\"1871\":[null,null,1],\"1872\":[null,null,1],\"1873\":[1],\"1874\":[null,null,1],\"1875\":[1],\"1876\":[null,null,1],\"1877\":[1],\"1878\":[null,null,1],\"1879\":[null,null,1],\"1880\":[1],\"1881\":[null,null,1],\"1882\":[1],\"1883\":[null,null,1],\"1884\":[null,null,1],\"1885\":[1],\"1886\":[null,null,1],\"1887\":[1],\"1888\":[null,null,1],\"1889\":[null,null,1],\"1890\":[1],\"1891\":[null,null,1],\"1892\":[1],\"1893\":[null,null,1],\"1894\":[null,null,1],\"1895\":[1],\"1896\":[null,null,1],\"1897\":[1],\"1898\":[null,null,1],\"1899\":[null,null,1],\"1900\":[1],\"1901\":[null,null,1],\"1902\":[1],\"1903\":[null,null,1],\"1904\":[null,null,1],\"1905\":[2,108],\"1906\":[null,null,1],\"1907\":[null,null,1],\"1908\":[2,22],\"1909\":[null,null,1],\"1910\":[null,null,1],\"1911\":[2,59],\"1912\":[null,null,1],\"1913\":[null,null,1],\"1914\":[1,5],\"1915\":[null,null,1],\"1916\":[null,null,1],\"1917\":[6,4],\"1918\":[null,null,1],\"1919\":[null,null,1],\"1920\":[3,2],\"1921\":[4,16],\"1922\":[2,30],\"1923\":[6,14],\"1924\":[2,9],\"1925\":[null,null,1],\"1926\":[null,null,1],\"1927\":[2,4],\"1928\":[1,21],\"1929\":[1,6],\"1930\":[4],\"1931\":[null,null,1],\"1932\":[null,null,1],\"1933\":[2,17],\"1934\":[null,null,1],\"1935\":[null,null,1],\"1936\":[1,3],\"1937\":[1,14],\"1938\":[1,10],\"1939\":[null,null,1],\"1940\":[null,null,1],\"1941\":[7],\"1942\":[1,11],\"1943\":[1,19],\"1944\":[1,28],\"1945\":[2,24],\"1946\":[1,6],\"1947\":[1,20],\"1948\":[1,4],\"1949\":[1,27],\"1950\":[1,13],\"1951\":[1,17],\"1952\":[3,69],\"1953\":[null,null,1],\"1954\":[null,null,1],\"1955\":[1,10],\"1956\":[null,null,1],\"1957\":[null,null,1],\"1958\":[5,2],\"1959\":[2,18],\"1960\":[3,60],\"1961\":[2,32],\"1962\":[1,16],\"1963\":[3,29],\"1964\":[null,null,1],\"1965\":[null,null,1],\"1966\":[1,135],\"1967\":[null,null,1],\"1968\":[null,null,1],\"1969\":[1],\"1970\":[1,25],\"1971\":[null,null,1],\"1972\":[null,null,1],\"1973\":[2],\"1974\":[3,33],\"1975\":[null,null,1],\"1976\":[null,null,1],\"1977\":[1],\"1978\":[1,6],\"1979\":[null,null,1],\"1980\":[null,null,1],\"1981\":[1,3],\"1982\":[1],\"1983\":[1],\"1984\":[1],\"1985\":[1],\"1986\":[1],\"1987\":[1],\"1988\":[1],\"1989\":[1],\"1990\":[1],\"1991\":[1],\"1992\":[2],\"1993\":[1],\"1994\":[1],\"1995\":[1],\"1996\":[1],\"1997\":[1],\"1998\":[1],\"1999\":[1],\"2000\":[1],\"2001\":[1],\"2002\":[1],\"2003\":[1],\"2004\":[1]},\"averageFieldLength\":[1.9981820376206871,37.23151026636791,0.9568265608652965],\"storedFields\":{\"0\":{\"h\":\"首页\",\"t\":[\"这是项目主页的案例。你可以在这里放置你的主体内容。\",\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\",\"配置项的相关说明详见 项目主页配置。\"]},\"1\":{\"h\":\"基本功\"},\"2\":{\"c\":[\"基本功\"]},\"3\":{\"h\":\"大前端\"},\"4\":{\"c\":[\"基本功\"]},\"5\":{\"h\":\"商业探索\"},\"6\":{\"h\":\"产品运营\",\"t\":[\"打开新世界 开始产品运营探索\"]},\"7\":{\"h\":\"服务端\"},\"8\":{\"h\":\"定制若依\",\"t\":[\"https://gitee.com/yinlingchaoliu/ruo-yi-cloud-micro\",\"基于 Vue/Element UI 和 Spring Boot/Spring Cloud & Alibaba 前后端分离的分布式微服务架构\"]},\"9\":{\"h\":\"平台简介\",\"t\":[\"若依是一套全部开源的快速开发平台，毫无保留给个人及企业免费使用。\",\"采用前后端分离的模式，微服务版本前端(基于 RuoYi-Vue)。\",\"后端采用Spring Boot、Spring Cloud & Alibaba。\",\"注册中心、配置中心选型Nacos，权限认证使用Redis。\",\"流量控制框架选型Sentinel，分布式事务选型Seata。\",\"本文定制 https://gitee.com/yinlingchaoliu/ruo-yi-cloud-micro。\"]},\"10\":{\"h\":\"Ant Design版本。\"},\"11\":{\"h\":\"spring boot 特点\",\"t\":[\"会装载当前目录下所有的config component mapper domain\",\"项目产物由jar包和配置2部分组成\",\"微服务壳化 (微服务 = 简单业务 + 壳)\",\"支持单体服务与微服务快速切换\"]},\"12\":{\"h\":\"系统结构\",\"t\":[\"com.ruoyi ├── ruoyi-ui // 前端框架 [1024] ├── ruoyi-all-server // 服务 all in one [9000] │ └── ruoyi-nacos.yml // nacos配置 │ └── ruoyi-auth-server-deps // 用户认证能力 │ └── ruoyi-file-server-deps // 文件上传能力 │ └── ruoyi-gen-server-deps // 代码生成能力 │ └── ruoyi-job-server-deps // 定时任务能力 │ └── ruoyi-system-server-deps // 系统服务能力 ├── ruoyi-cloud // 微服务壳 │ └── ruoyi-cloud-bootstrap // 微服务壳 │ └── ruoyi-cloud-gateway // 网关壳 │ └── ruoyi-cloud-admin // 监控壳 ├── ruoyi-dependencies // bom 依赖管理 做依赖精简 │ └── ruoyi-dependencies-framework // 通用插件依赖 │ └── ruoyi-dependencies-thirdpart // 三方插件依赖 │ └── ruoyi-dependencies-domain // 领域能力依赖 │ └── ruoyi-dependencies-api // 业务api依赖 │ └── ruoyi-dependencies-biz // 业务能力依赖 ├── ruoyi-framework // 插件模块 独立且互不依赖 开发中... │ └── ruoyi-spring-boot-starter-nacos // 注册插件 │ └── ruoyi-spring-boot-starter-web // web插件 │ └── ruoyi-spring-boot-starter-mybatis // mybatis + 多数据源 │ └── ruoyi-spring-boot-starter-redis // 缓存服务 │ └── ruoyi-spring-boot-starter-dubbo // rpc插件 │ └── ruoyi-spring-boot-starter-feign // rpc插件 │ └── ruoyi-spring-boot-starter-xxljob // xxljob │ └── ruoyi-spring-boot-starter-seata // seata │ └── ruoyi-spring-boot-starter-security // security 开发中 ├── ruoyi-third // 第三方能力 独立且互不依赖 开发中... │ └── ruoyi-third-pay // 三方支付 │ └── ruoyi-third-weixin // 微信 │ └── ruoyi-third-excel // excel ├── ruoyi-domain // 通用业务领域模块 domain: 模型 domain-biz: 业务模型 随时可取代的 │ └── ruoyi-domain-resp // resp bean │ └── ruoyi-domain-user // 用户模型 │ └── ruoyi-domain-exception // 通用异常 │ └── ruoyi-domain-log // 通用日志 │ └── ruoyi-domain-biz-log // 日志定制实现 │ └── ruoyi-domain-biz-web // web业务封装+列表 │ └── ruoyi-domain-biz-tools // 常用工具 │ └── ruoyi-domain-biz-security // 用户权限 │ └── ruoyi-domain-biz-datascope // 数据权限 ├── ruoyi-visual // 图形化管理模块 │ └── ruoyi-visual-nacos // 注册中心 [8848] │ └── ruoyi-visual-monitor // 监控中心 [9100] │ └── ruoyi-visual-sentinel-dashboard // 稳流监控 [8718] │ └── ruoyi-visual-xxl-job-admin // 任务监控 [9900] │ └── ruoyi-visual-seata-server // 事务监控 [7091] ├── ruoyi-gateway // 网关模块 [8080] ├── ruoyi-modules // 公共模块 │ └── ruoyi-auth //认证中心 [9200] │ └── ruoyi-auth-server │ └── ruoyi-auth-web │ └── ruoyi-system // 系统模块 [9201] │ └── ruoyi-system-api │ └── ruoyi-system-server │ └── ruoyi-system-web │ └── ruoyi-file // 文件服务 [9205] │ └── ruoyi-file-api │ └── ruoyi-file-server │ └── ruoyi-file-web │ └── ruoyi-gen // 代码生成 [9202] │ └── ruoyi-gen-server │ └── ruoyi-gen-web │ └── ruoyi-job // 定时任务 [9203] │ └── ruoyi-job-server │ └── ruoyi-job-web │ └── ruoyi-xxl-job // 分布任务 [9204] │ └── ruoyi-xxl-job-server │ └── ruoyi-xxl-job-web ├── ruoyi-modules-member // 会员模块 按照业务划分 │ └── ruoyi-modules-member-bom // 会员依赖 │ └── ruoyi-modules-member-api // api接口 │ └── ruoyi-modules-member-domain // 日志打印 │ └── ruoyi-modules-member-domain-user // 用户模块 │ └── ruoyi-modules-member-domain-address // 会员地址 │ └── ruoyi-modules-member-domain-vip // 会员vip │ └── ruoyi-modules-member-domain-strategy // 会员策略 │ └── ruoyi-modules-member-server // 会员能力 │ └── ruoyi-modules-member-web // 会员服务 [9400] ├──pom.xml // 公共依赖 \",\"功能\",\"本框架\",\"组件化项目\",\"遵循Unix哲学 do one thing and do it well 每一种能力, 都是独立积木\",\"ruoyi-nacos\",\"采用springboot 方式 启动 nacos服务\",\"ruoyi-spring-boot-starter-nacos\",\"nacos client端依赖\",\"ruoyi-sentinel\",\"哨兵服务 采用服务方式启动 分布式限流熔断\",\"ruoyi-spring-boot-starter-sentinel\",\"哨兵客户端 引入支持限流能力 分布式限流熔断\",\"ruoyi-spring-boot-starter-web\",\"支持web能力 ,采用Undertow 基于 XNIO 的高性能容器\",\"ruoyi-spring-boot-starter-redis\",\"支持redis能力 redisson + lock4j 分布式锁\",\"ruoyi-spring-boot-starter-mybatis\",\"mybatis-plus 多数据源 数据连接池及监控 主从 雪花ID\",\"ruoyi-spring-boot-starter-feign\",\"快速http restful 调用 sidecar首选\",\"ruoyi-spring-boot-starter-dubbo\",\"dubbo3 api式rpc调用\",\"分布式配置中心\",\"采用 Alibaba Nacos 源码集成便于调试扩展与二次开发 框架还为其增加了各种监控\",\"服务网关\",\"采用 SpringCloud Gateway 框架扩展了多种功能例如:内网鉴权、请求体缓存、跨域配置、请求响应日志等\",\"负载均衡\",\"采用 SpringCloud Loadbalancer 扩展支持了开发团队路由 便于多团队开发调试\",\"RPC远程调用\",\"采用 全新 Apache Dubbo 3.X 历史悠远不用多说\",\"分布式限流熔断\",\"采用 Alibaba Sentinel 源码集成便于调试扩展与二次开发 框架还为其增加了各种监控\",\"分布式事务\",\"采用 Alibaba Seata 源码集成对接了Nacos与各种监控 简化了搭建部署流程\",\"Web容器\",\"采用 Undertow 基于 XNIO 的高性能容器\",\"权限认证\",\"采用 Sa-Token、Jwt 静态使用功能齐全 低耦合 高扩展\",\"权限注解\",\"采用 Sa-Token 支持注解 登录校验、角色校验、权限校验、二级认证校验、HttpBasic校验、忽略校验角色与权限校验支持多种条件 如 ANDOR 或 权限 OR 角色 等复杂表达式\",\"关系数据库支持\",\"原生支持 MySQL、Oracle、PostgreSQL、SQLServer可同时使用异构切换\",\"缓存数据库\",\"支持 Redis 5-7 支持大部分新功能特性 如 分布式限流、分布式队列\",\"Redis客户端\",\"采用 Redisson Redis官方推荐 基于Netty的客户端工具支持Redis 90%以上的命令 底层优化规避很多不正确的用法 例如: keys被转换为scan支持单机、哨兵、单主集群、多主集群等模式\",\"缓存注解\",\"采用 Spring-Cache 注解 对其扩展了实现支持了更多功能例如 过期时间 最大空闲时间 组最大长度等 只需一个注解即可完成数据自动缓存\",\"ORM框架\",\"采用 Mybatis-Plus 基于对象几乎不用写SQL全java操作 功能强大插件众多例如多租户插件 分页插件 乐观锁插件等等\",\"SQL监控\",\"采用 p6spy 可输出完整SQL与执行时间监控\",\"数据分页\",\"采用 Mybatis-Plus 分页插件框架对其进行了扩展 对象化分页对象 支持多种方式传参 支持前端多排序 复杂排序\",\"数据权限\",\"采用 Mybatis-Plus 插件 自行分析拼接SQL 无感式过滤只需为Mapper设置好注解条件 支持多种自定义 不限于部门角色\",\"数据脱敏\",\"采用 注解 + jackson 序列化期间脱敏 支持不同模块不同的脱敏条件支持多种策略 如身份证、手机号、地址、邮箱、银行卡等 可自行扩展\",\"数据加解密\",\"采用 注解 + mybatis 拦截器 对存取数据期间自动加解密支持多种策略 如BASE64、AES、RSA、SM2、SM4等\",\"数据翻译\",\"采用 注解 + jackson 序列化期间动态修改数据 数据进行翻译支持多种模式: 映射翻译直接翻译其他扩展条件翻译 接口化两步即可完成自定义扩展 内置多种翻译实现\",\"多数据源框架\",\"采用 dynamic-datasource 支持世面大部分数据库通过yml配置即可动态管理异构不同种类的数据库 也可通过前端页面添加数据源支持spel表达式从请求头参数等条件切换数据源\",\"多数据源事务\",\"采用 dynamic-datasource 支持多数据源不同种类的数据库事务回滚\",\"数据库连接池\",\"采用 HikariCP Spring官方内置连接池 配置简单 以性能与稳定性闻名天下\",\"数据库主键\",\"采用 雪花ID 基于时间戳的 有序增长 唯一ID 再也不用为分库分表 数据合并主键冲突重复而发愁\",\"WebSocket协议\",\"基于 Spring 封装的 WebSocket 协议 扩展了Token鉴权与分布式会话同步 不再只是基于单机的废物\",\"序列化\",\"采用 Jackson Spring官方内置序列化 靠谱!!!\",\"分布式幂等\",\"参考美团GTIS防重系统简化实现(细节可看文档)\",\"分布式任务调度\",\"采用 Xxl-Job 天生支持分布式 统一的管理中心\",\"分布式日志中心\",\"采用 ELK 业界成熟解决方案 实时收集所有服务的运行日志 快速发现定位问题\",\"分布式搜索引擎\",\"采用 ElasticSearch、Easy-Es 以 Mybatis-Plus 方式操作 ElasticSearch\",\"分布式消息队列\",\"采用 SpringCloud-Stream 支持 Kafka、RocketMQ、RabbitMQ\",\"文件存储\",\"采用 Minio 分布式文件存储 天生支持多机、多硬盘、多分片、多副本存储支持权限管理 安全可靠 文件可加密存储\",\"云存储\",\"采用 AWS S3 协议客户端 支持 七牛、阿里、腾讯 等一切支持S3协议的厂家\",\"短信\",\"支持 阿里、腾讯 只需在yml配置好厂家密钥即可使用 接口化支持扩展其他厂家\",\"邮件\",\"采用 mail-api 通用协议支持大部分邮件厂商\",\"接口文档\",\"采用 SpringDoc、javadoc 无注解零入侵基于java注释只需把注释写好 无需再写一大堆的文档注解了\",\"校验框架\",\"采用 Validation 支持注解与工具类校验 注解支持国际化\",\"Excel框架\",\"采用 Alibaba EasyExcel 基于插件化框架对其增加了很多功能 例如 自动合并相同内容 自动排列布局 字典翻译等\",\"工具类框架\",\"采用 Hutool、Lombok 上百种工具覆盖90%的使用需求 基于注解自动生成 get set 等简化框架大量代码\",\"服务监控框架\",\"采用 SpringBoot-Admin 基于SpringBoot官方 actuator 探针机制实时监控服务状态 框架还为其扩展了在线日志查看监控\",\"全方位监控报警\",\"采用 Prometheus、Grafana 多样化采集 多模板大屏展示 实时报警监控 提供详细的搭建文档\",\"链路追踪\",\"采用 Apache SkyWalking 还在为请求不知道去哪了 到哪出了问题而烦恼吗用了它即可实时查看请求经过的每一处每一个节点\",\"代码生成器\",\"只需设计好表结构 一键生成所有crud代码与页面降低80%的开发量 把精力都投入到业务设计上框架为其适配MP、SpringDoc规范化代码 同时支持动态多数据源代码生成\",\"部署方式\",\"支持 Docker 编排 一键搭建所有环境 让开发人员从此不再为搭建环境而烦恼\",\"项目路径修改\",\"提供详细的修改方案文档 并为其做了一些改动 非常简单即可修改成自己想要的\",\"国际化\",\"基于请求头动态返回不同语种的文本内容 开发难度低 有对应的工具类 支持大部分注解内容国际化\",\"代码单例测试\",\"提供单例测试 使用方式编写方法与maven多环境单测插件\",\"Demo案例\",\"提供框架功能的实际使用案例 单独一个模块提供了很多很全\",\"功能\",\"本框架特色\",\"common模块tools化\",\"common 按照工具类型拆分 上层业务不是必须依赖 而是可选项\",\"common-domain\",\"最简单通用resp响应(后续还要精简,减少不必要pom依赖)\",\"spring boot模块\",\"每次只做一件事 并做好\",\"积木化\",\"提供最小核心能力集合, 引用何种能力 由当前微服务决定\",\"监控能力微服务化\",\"nacos sentinel spring-boot-admin xxl-job 微服务一样启动\",\"api四大元素\",\"api 含 四类元素 rpc , service ,bean , constants\",\"api归属业务层模块\",\"api模块属于业务层，common, framework模块不容许引用\"]},\"13\":{\"h\":\"架构图\"},\"14\":{\"h\":\"内置功能\",\"t\":[\"用户管理：用户是系统操作者，该功能主要完成系统用户配置。\",\"部门管理：配置系统组织机构（公司、部门、小组），树结构展现支持数据权限。\",\"岗位管理：配置系统用户所属担任职务。\",\"菜单管理：配置系统菜单，操作权限，按钮权限标识等。\",\"角色管理：角色菜单权限分配、设置角色按机构进行数据范围权限划分。\",\"字典管理：对系统中经常使用的一些较为固定的数据进行维护。\",\"参数管理：对系统动态配置常用参数。\",\"通知公告：系统通知公告信息发布维护。\",\"操作日志：系统正常操作日志记录和查询；系统异常信息日志记录和查询。\",\"登录日志：系统登录日志记录查询包含登录异常。\",\"在线用户：当前系统中活跃用户状态监控。\",\"定时任务：在线（添加、修改、删除)任务调度包含执行结果日志。\",\"代码生成：前后端代码的生成（java、html、xml、sql）支持CRUD下载 。\",\"系统接口：根据业务代码自动生成相关的api接口文档。\",\"服务监控：监视当前系统CPU、内存、磁盘、堆栈等相关信息。\",\"在线构建器：拖动表单元素生成相应的HTML代码。\",\"连接池监视：监视当前系统数据库连接池状态，可进行分析SQL找出系统性能瓶颈。\"]},\"15\":{\"h\":\"在线体验\",\"t\":[\"admin/admin123\",\"陆陆续续收到一些打赏，为了更好的体验已用于演示服务器升级。谢谢各位小伙伴。\",\"演示地址：http://ruoyi.vip\\n文档地址：http://doc.ruoyi.vip\"]},\"16\":{\"h\":\"finalshell安装-及-mac远程桌面安装\",\"t\":[\"####finalshell官网 http://www.hostbuf.com\",\"Mac版安装路径 /Applications/finalshelldata\",\"Linux版安装路径 /usr/lib/finalshelldata\",\"####安装命令 Mac一键安装脚本 curl -o finalshell_install.sh www.hostbuf.com/downloads/finalshell_install.sh;chmod +x finalshell_install.sh;sudo ./finalshell_install.sh\",\"Linux一键安装脚本1(通用) rm -f finalshell_install.sh ;wget finalshell_install.sh www.hostbuf.com/downloads/finalshell_install.sh;chmod +x finalshell_install.sh;sudo ./finalshell_install.sh\",\"Linux一键安装脚本2(适合系统没有sudo或未加入sudoer,比如debian) rm -f finalshell_install.sh ;wget finalshell_install.sh www.hostbuf.com/downloads/finalshell_install.sh;chmod +x finalshell_install.sh;su -l --preserve-environment -c ./finalshell_install.sh\",\"mac远程桌面\\nMicrosoft Remote Desktop for Mac\\n下载地址：\\nhttps://www.newasp.net/soft/320727.html\\n实测可用\"]},\"17\":{\"c\":[\"常用工具\"]},\"18\":{\"c\":[\"archive\"]},\"19\":{\"h\":\"pycharm-ide安装\",\"t\":[\"https://www.jetbrains.com/zh/pycharm/specials/pycharm/pycharm.html\",\"2019年破解码 https://blog.csdn.net/weixin_43641304/article/details/87071864\",\"破解地址：\\nhttp://idea.lanyus.com\"]},\"20\":{\"c\":[\"常用工具\"]},\"21\":{\"c\":[\"archive\"]},\"22\":{\"h\":\"webstorm-2018-mac破解版\"},\"23\":{\"h\":\"1.到官网下载最新的webstorm\",\"t\":[\"网址是 https://www.jetbrains.com/webstorm/download/\"]},\"24\":{\"h\":\"2.安装\",\"t\":[\"双击下载的webstorm安装包，将webstorm拖入到application文件夹中，完成安装\"]},\"25\":{\"h\":\"3.破解\",\"t\":[\"在webstorm试用30天后就会过期，需要激活码，出现的界面中选择Activation code按钮\",\"现在直接黏贴注册码已经不能直接成功了，需要再绑定host 1.找到hosts文件：打开finder> Shift+Command+G组合键，输入hosts文件的路径：/etc/hosts 2.复制一份文件在桌面，打开在最后添加0.0.0.0 account.jetbrains.com，保存后替换/etc/hosts 3.进入网站 http://idea.lanyus.com/, 点击获取注册码, 复制注册码内容 4.将复制的注册码，拷贝到webstorm的Activation code注册框中\",\"原文链接：https://www.jianshu.com/p/2b22354a3f98\"]},\"26\":{\"c\":[\"破解IDE\"]},\"27\":{\"c\":[\"archive\"]},\"28\":{\"h\":\"AGPBI--{\\\"kind\\\"-\\\"error\\\",\\\"text\\\"-\\\"Cannot-fit-requested-classes-in-a-singl\",\"t\":[\"AGPBI: {\\\"kind\\\":\\\"error\\\",\\\"text\\\":\\\"Cannot fit requested classes in a single dex file (# methods: 73866 \\\\u003e 65536)\\\",\\\"sources\\\":[\",\"65536错误\",\"multiDexEnabled true \"]},\"29\":{\"c\":[\"日常问题锦集\"]},\"30\":{\"c\":[\"archive\"]},\"31\":{\"h\":\"Android-Studio-Mac-环境设置-code-style\",\"t\":[\"Android Studio Mac 环境设置 code style\\nhttps://segmentfault.com/q/1010000009719093\"]},\"32\":{\"c\":[\"日常问题锦集\"]},\"33\":{\"c\":[\"archive\"]},\"34\":{\"h\":\"Android-Studio-解决resolve-dependencies-'classpath'卡住\",\"t\":[\"一、代理问题\",\"gradle.properties设置两行\",\"systemProp.http.proxyHost=127.0.0.1 systemProp.http.proxyPort=2273\",\"systemProp.https.proxyHost=127.0.0.1 systemProp.https.proxyPort=2273\",\"二、编译器问题\\ngoogle官网换最新AndroidStudio\"]},\"35\":{\"c\":[\"日常问题锦集\"]},\"36\":{\"c\":[\"archive\"]},\"37\":{\"h\":\"AndroidStudio3-0+-混淆-Warning-`-keep-class--extends-java-lang-annotatio\",\"t\":[\"升级gradle\\nhttps://blog.csdn.net/u012982629/article/details/80857863\"]},\"38\":{\"c\":[\"日常问题锦集\"]},\"39\":{\"c\":[\"archive\"]},\"40\":{\"h\":\"Can't-connect-to-SOCKS-proxy-Connection-refused--connect\",\"t\":[\"Can't connect to SOCKS proxy:Connection refused: connect\",\"如上报错，原因是AS设置了代理，可找到项目相面的gradle.properties这个文件，恢复成新建项目内容一致即可\\n删除这个配置\\nsystemProp.http.proxyHost=127.0.0.1systemProp.http.proxyPort=1080\"]},\"41\":{\"c\":[\"日常问题锦集\"]},\"42\":{\"c\":[\"archive\"]},\"43\":{\"h\":\"D8--Default-interface-methods-are-only-supported-starting-with-Android\",\"t\":[\" compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } \"]},\"44\":{\"c\":[\"日常问题锦集\"]},\"45\":{\"c\":[\"archive\"]},\"46\":{\"h\":\"Error-while-generating-the-main-dex-list\",\"t\":[\"https://blog.csdn.net/stupid56862/article/details/81130589\"]},\"47\":{\"c\":[\"日常问题锦集\"]},\"48\":{\"c\":[\"archive\"]},\"49\":{\"h\":\"Failed-to-find-byte-code-for-xxx\",\"t\":[\"原因：\\n关掉Instant run\"]},\"50\":{\"c\":[\"日常问题锦集\"]},\"51\":{\"c\":[\"archive\"]},\"52\":{\"h\":\"Gradle-编译报错---Error-while-generating-the-main-dex-list\",\"t\":[\"问题：jar包冲突 查询：gradle assembleDebug --stacktrace 定位：Caused by: com.android.tools.r8.errors.CompilationError\",\" compile (\\\"com.facebook.react:react-native:0.55.4\\\") { exclude group: 'com.squareup.okhttp3' } \",\"到module下敲命令： gradle -q dependencies\",\"//整体移除v4 configurations { all*.exclude group: 'com.android.support', module: 'support-v4' }\",\"转载：\\nhttps://blog.csdn.net/stupid56862/article/details/81130589\"]},\"53\":{\"c\":[\"日常问题锦集\"]},\"54\":{\"c\":[\"archive\"]},\"55\":{\"h\":\"Landroid-support-design-widget-CoordinatorLayout\",\"t\":[\"将support库 强行设置\",\"configurations.all { resolutionStrategy { force 'com.android.support:support-v4:28.0.0' force 'com.android.support:design:28.0.0' } } \",\"参考\\nhttps://stackoverflow.com/questions/49043551/multiple-dex-files-define-landroid-support-design-widget-coordinatorlayout1\"]},\"56\":{\"c\":[\"日常问题锦集\"]},\"57\":{\"c\":[\"archive\"]},\"58\":{\"h\":\"Mac-根据端口杀进程\",\"t\":[\"根据端口查进程 lsof -i :4000\",\"yingzi:blog chentong$ lsof -i :4000 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME node 79748 chentong 40u IPv4 0xc0817c4a2f69df89 0t0 TCP *:terabase (LISTEN) \",\"杀掉指定进程\",\"kill -9 79748 \"]},\"59\":{\"c\":[\"日常问题锦集\"]},\"60\":{\"c\":[\"archive\"]},\"61\":{\"h\":\"No-such-property--project-for-class-PluginName\",\"t\":[\"No such property: project for class: 问题出在project 这个变量上，要不没命名，要么用的有问题\",\"例如bug No such property: isDebug for class: com.chaoliu.thor.api.WeiXinApiPlugin\",\"问题出在 isDebug上\"]},\"62\":{\"c\":[\"日常问题锦集\"]},\"63\":{\"c\":[\"archive\"]},\"64\":{\"h\":\"No-version-of-NDK-matched-the-requested-version-20-0-5594570--Versions\",\"t\":[\"android studio更新到3.6，构建NDK项目的时候NDK版本引起的同步报错\",\"android { ndkVersion \\\"major.minor.build\\\" } \",\"修改后配置\",\"android { ndkVersion '21.0.6113669' } \"]},\"65\":{\"c\":[\"日常问题锦集\"]},\"66\":{\"c\":[\"archive\"]},\"67\":{\"h\":\"One-of-the-two-will-be-used--Which-one-is-undefined-\",\"t\":[\"报错\",\"objc[56644]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/bin/java (0x10d52e4c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x10d5b24e0). One of the two will be used. Which one is undefined. \",\"1、配置环境变量\",\"JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home CLASSPAHT=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar PATH=$JAVA_HOME/bin:$PATH: export JAVA_HOME export CLASSPATH export PATH \",\"plan A 配置Intellij Idea 1.打开idea.properties文件 help->edit custom properties 添加一句：\",\"idea.no.launcher=true \",\"2、重启idea\",\"plan B 如果修改Idea配置不生效的话\",\"在Finder 的应用程序中找到IDEA的图标，右键，显式包内容，contents-》bin里面\",\"目录 /Applications/Android Studio.app/Contents/bin/idea.properties 添加 idea.no.launcher=true \",\"重启\"]},\"68\":{\"c\":[\"日常问题锦集\"]},\"69\":{\"c\":[\"archive\"]},\"70\":{\"h\":\"Only-fullscreen-opaque-activities-can-request-orientation\",\"t\":[\"####问题原因 安卓8.0版本时为了支持全面屏，增加了一个限制：如果是透明的Activity，则不能固定它的方向，因为它的方向其实是依赖其父Activity的（因为透明）。然而这个bug只有在8.0中有，8.1中已经修复\",\" if (getApplicationInfo().targetSdkVersion > O && mActivityInfo.isFixedOrientation()) { final TypedArray ta = obtainStyledAttributes(com.android.internal.R.styleable.Window); final boolean isTranslucentOrFloating = ActivityInfo.isTranslucentOrFloating(ta); ta.recycle(); if (isTranslucentOrFloating) { throw new IllegalStateException( \\\"Only fullscreen opaque activities can request orientation\\\"); } } \",\"解决方案 :\\n1、把方向省掉（建议这种方式）\\n2、改为不透明\\n3、反射方式不建议\\n4、改target版本\"]},\"71\":{\"c\":[\"日常问题锦集\"]},\"72\":{\"c\":[\"archive\"]},\"73\":{\"h\":\"androidstudio上运行weex-modle时，出现无法加载com-taobao-android-weexplugin-proces\",\"t\":[\"报错\",\"Execution failed for task ':app:javaPreCompileDebug'. Annotation processors must be explicitly declared now. The following dependencies on the compile classpath are found to contain annotation processor. Please add them to the annotationProcessor configuration. - weexplugin-processor-1.3.jar (com.taobao.android:weexplugin-processor:1.3) Alternatively, set android.defaultConfig.javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = true to continue with previous behavior. Note that this option is deprecated and will be removed in the future. See https://developer.android.com/r/tools/annotation-processor-error-message.html for more details.\",\"方案一: 错误阿里已不推荐\",\" javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } } \",\"方案二：正确可用\",\"annotationProcessor 'com.taobao.android:weexplugin-processor:1.3' \"]},\"74\":{\"c\":[\"日常问题锦集\"]},\"75\":{\"c\":[\"archive\"]},\"76\":{\"h\":\"error--failed-to-read-PNG-signature--file-does-not-start-with-PNG-sign\",\"t\":[\"错误：无法读取PNG签名：文件没有从PNG签名开始。\",\"一般都是图片格式有问题 可能是直接修改后缀名造成了图片的损伤，也可能是图片压缩时产生的问题。 可以重新处理图片再加载，建议使用PS或其他软件处理后另存为png格式。\",\"另外还要注意的是出问题的是哪一个路径下的文件，千万不要对着别的文件一通操作（扶额暴汗，我就是一直改别的，没有对病根进行处理。）\",\"重新换掉有问题的图片后可以生成apk包。\"]},\"77\":{\"c\":[\"日常问题锦集\"]},\"78\":{\"c\":[\"archive\"]},\"79\":{\"h\":\"homebrew换源\",\"t\":[\"####替换brew源\",\"#brew 备用地址-1 cd \\\"$(brew --repo)\\\" git remote set-url origin https://mirrors.ustc.edu.cn/brew.git #homebrew-core #替换homebrew-core.git cd \\\"$(brew --repo)/Library/Taps/homebrew/homebrew-core\\\" git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git brew update # 备用地址-2 cd \\\"$(brew --repo)\\\" git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/brew.git cd \\\"$(brew --repo)/Library/Taps/homebrew/homebrew-core\\\" git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew-core.git brew update \",\"####官方地址\",\"#重置brew.git cd \\\"$(brew --repo)\\\" git remote set-url origin https://github.com/Homebrew/brew.git #重置homebrew-core.git cd \\\"$(brew --repo)/Library/Taps/homebrew/homebrew-core\\\" git remote set-url origin https://github.com/Homebrew/homebrew-core.git \"]},\"80\":{\"c\":[\"日常问题锦集\"]},\"81\":{\"c\":[\"archive\"]},\"82\":{\"h\":\"java-lang-IllegalStateException--this-method-should-only-be-called-by-\"},\"83\":{\"c\":[\"日常问题锦集\"]},\"84\":{\"c\":[\"archive\"]},\"85\":{\"h\":\"nternal-modules-cjs-loader-js-584\",\"t\":[\"internal/modules/cjs/loader.js:584 throw err;\",\"解决方法：\",\"1.删除node_modules 文件夹、package-lock.json文件\",\"2.重新运行：npm install\",\"3.然后，运行：npm start\"]},\"86\":{\"c\":[\"日常问题锦集\"]},\"87\":{\"c\":[\"archive\"]},\"88\":{\"h\":\"python-ImportError--No-module-named-requests\",\"t\":[\"curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\\npython get-pip.py\\npip install requests\"]},\"89\":{\"c\":[\"日常问题锦集\"]},\"90\":{\"c\":[\"archive\"]},\"91\":{\"h\":\"warning--LF-will-be-replaced-by-CRLF-in-XX\",\"t\":[\"git config core.autocrlf false\"]},\"92\":{\"c\":[\"日常问题锦集\"]},\"93\":{\"c\":[\"archive\"]},\"94\":{\"h\":\"weex-卡在Copy-JS-source\",\"t\":[\"yingzi:GSYGithubAppWeex chentong$ weex run android [✔] Compile JSBundle done [✔] Use Nexus_5X (Simulator) [✔] Start hotreload server done [✔] Set native config done ⠋ Copy JS source - this may take a few secondsError: ENOENT: no such file or directory, lstat '/Users/chentong/Android/weex/GSYGithubAppWeex/dist' ⠹ Copy JS source - this may take a few secondsError: Command failed: npm run dev sh: webpack: command not found npm ERR! file sh npm ERR! code ELIFECYCLE npm ERR! errno ENOENT npm ERR! syscall spawn npm ERR! gsy-github-weex-app@1.0.0 dev: webpack --env.NODE_ENV=common --progress --watch npm ERR! spawn ENOENT npm ERR! npm ERR! Failed at the gsy-github-weex-app@1.0.0 dev script. npm ERR! This is probably not a problem with npm. There is likely additional logging output above. npm WARN Local package.json exists, but node_modules missing, did you mean to install? gsy-github-weex-app@1.0.0 dev /Users/chentong/Android/weex/GSYGithubAppWeex webpack --env.NODE_ENV=common --progress --watch at makeError (/Users/chentong/.wx/core/node_modules/_execa@0.10.0@execa/index.js:172:9) at Promise.all.then.arr (/Users/chentong/.wx/core/node_modules/_execa@0.10.0@execa/index.js:277:16) at process._tickCallback (internal/process/next_tick.js:68:7) ⠋ Copy JS source - this may take a few seconds\",\"解决方案\",\"首先 npm install \"]},\"95\":{\"c\":[\"日常问题锦集\"]},\"96\":{\"c\":[\"archive\"]},\"97\":{\"h\":\"【flutter-溢出BUG】-bottom-overflowed-by-xxx-PIXELS\",\"t\":[\"解决方案\\nSingleChildScrollView 包装一下，否则键盘弹出会报空间溢出\"]},\"98\":{\"c\":[\"日常问题锦集\"]},\"99\":{\"c\":[\"archive\"]},\"100\":{\"h\":\"使用maven-{-url-\\\"https---jitpack-io\\\"-}-时Failed-to-resolve-\",\"t\":[\"一定要放到allproject下,这点要特别注意 而不是buildscript\",\"allprojects { repositories { maven { url 'https://www.jitpack.io' } } } \",\"转载\\nhttps://www.jianshu.com/p/cdb36b91b205\"]},\"101\":{\"c\":[\"日常问题锦集\"]},\"102\":{\"c\":[\"archive\"]},\"103\":{\"h\":\"完整的360加固日志\",\"t\":[\"脚本的核心就是一句话，用gradle脚本方式写的\",\">java\\bin\\\\java -jar jiagu.jar -jiagu <inputAPKpath> <outputpath> -autosign - automulpkg \",\"先单独执行这句话，找打印日志的执行命令行\",\"执行命令行:java -jar jiagu.jar -jiagu /Users/chentong/Android/hexin/Android/XiaoFeiFenQi/app/build/outputs/apk/debug/app-debug.apk /Users/chentong/Android/hexin/Android/XiaoFeiFenQi/app/360jiagu -autosign -automulpkg \",\"注意点： 1、360加固登录账号密码要设置上，勾选自动登录 2、签名要在加固宝中配置好 3、加固时间长，需要联网，加固过程中需要1~2分钟等待\",\":app:packageDebug :app:packageDebug spend 2540ms :app:assembleDebug :app:assembleDebug spend 0ms :app:jiaguDebug 360加固--------begin--------- appFilePath=/Users/chentong/Android/hexin/Android/XiaoFeiFenQi/app/build/outputs/apk/debug/app-debug.apk jiaguPath=/Users/chentong/Android/hexin/Android/XiaoFeiFenQi/app/360jiagu 执行命令行:java -jar jiagu.jar -jiagu /Users/chentong/Android/hexin/Android/XiaoFeiFenQi/app/build/outputs/apk/debug/app-debug.apk /Users/chentong/Android/hexin/Android/XiaoFeiFenQi/app/360jiagu -autosign -automulpkg jiagu.dir=/Users/chentong/Android/360jiagubao_mac/jiagu ################################################ # # # ## # # ## ### ### ## ### # # # # # # # # # # # # # # # # ### # # ### # # # ## # # # # # ### ### # # # ### # # ### # # # # Obfuscation by Allatori Obfuscator v5.6 DEMO # # # # http://www.allatori.com # # # ################################################ /Users/chentong/Android/360jiagubao_mac/jiagu cache cookie invalid login success warning:没有配置多渠道信息，无法自动多渠道打包 begin jiagu task prepare to upload 上传进度0% 上传进度2% 上传进度4% 上传进度6% 上传进度8% 上传进度10% 上传进度10% 上传进度12% 上传进度14% 上传进度16% 上传进度18% 上传进度20% 上传进度22% 上传进度24% 上传进度26% 上传进度28% 上传进度30% 上传进度32% 上传进度34% 上传进度36% 上传进度38% 上传进度40% 上传进度42% 上传进度44% 上传进度46% 上传进度48% 上传进度50% 上传进度50% 上传进度52% 上传进度54% 上传进度56% 上传进度58% 上传进度60% 上传进度62% 上传进度64% 上传进度66% 上传进度68% 上传进度70% 上传进度72% 上传进度74% 上传进度76% 上传进度78% 上传进度80% 上传进度82% 上传进度84% 上传进度86% 上传进度88% 上传进度90% 上传进度92% 上传进度94% 上传进度96% 上传进度98% 上传进度100% 上传进度100% 上传成功 基础加固服务：DEX文件加密，防二次打包，APK大小优化，防DEX内存截取，盗版监测，DEX VMP保护 已选增强服务： 崩溃日志 X86架构 加固数据分析 加固中... 加固中... 加固中... 加固中... 加固中... 加固中... 加固中... 加固中... 部分加固服务不支持，已自动弃选： 消息推送 加固完成加固成功 下载开始 下载进度0% 下载进度11% 下载进度23% 下载进度32% 下载进度50% 下载进度63% 下载进度75% 下载进度82% 下载进度100% 下载成功 71FFCA54AE501119350017EF83DE8A60 开始签名 开始签名使用V2签名 delete v2 temp file 签名完成(1/1) 任务完成_已签名 0 360加固--------end--------- :app:jiaguDebug spend 70905ms BUILD SUCCESSFUL in 3m 28s 76 actionable tasks: 12 executed, 64 up-to-date Tasks spend time > 50ms: 01:10.90 :app:jiaguDebug 00:40.01 :app:preDebugBuild 00:22.20 :app:transformClassesAndResourcesWithProguardForDebug 00:13.29 :app:transformClassesWithDexBuilderForDebug 00:07.30 :app:javaPreCompileDebug 00:06.31 :app:transformClassesWithDesugarForDebug 00:03.14 :app:transformClassesWithMultidexlistForDebug 00:02.71 :app:transformDexArchiveWithDexMergerForDebug 00:02.54 :app:packageDebug 00:01.67 :app:transformClassesWithStackFramesFixerForDebug 00:01.58 :app:transformResourcesWithMergeJavaResForDebug 00:01.49 :app:transformClassesWithAjxForDebug 00:01.08 :app:transformNativeLibsWithMergeJniLibsForDebug 00:00.24 :app:mergeDebugResources 00:00.20 :app:compileDebugJavaWithJavac 00:00.19 :idcardlibrary:javaPreCompileDebug 00:00.07 :app:processDebugResources 00:00.05 :idcardlibrary:generateDebugRFile 09:53:29: Task execution finished 'jiaguDebug'. \"]},\"104\":{\"c\":[\"日常问题锦集\"]},\"105\":{\"c\":[\"archive\"]},\"106\":{\"h\":\"微信：签名不对，请检查签名是否与开发平台签名一致\",\"t\":[\"解决方案： 1、检查AppID、AppSecret和微信后台一致\",\"2、填写应用签名\",\"1）安装腾讯签名生成工具apk 输入app包名，获得签名串\",\"2）命令行执行命令：keytool -list -v -keystore xxx.keystore/xxx.jks（签名文件绝对路径） -storepass xxx（签名文件密码） MD5指纹 去掉冒号，大写字母转小写即可获得\",\"3、清除微信缓存，并用应用管理杀掉（必须） 手机->设置->应用管理->微信 1、存储->清空缓存 2、强行停止（如不强行停止，清空缓存无效） \",\"强行停止\"]},\"107\":{\"c\":[\"日常问题锦集\"]},\"108\":{\"c\":[\"archive\"]},\"109\":{\"h\":\"正版WebStorm破解-Mac(亲测可用)\",\"t\":[\"1、下载地址 https://www.jetbrains.com/webstorm/download/previous.html 选择2018年3月6日（2019年的不可以）\",\"2、修改host\",\"vi /etc/hosts ##添加 0.0.0.0 account.jetbrains.com 0.0.0.0 www.jetbrains.com \",\"3、获得注册码\\n点击 http://idea.lanyus.com/,\\n4、注册码拷贝到webstorm的Activation  code注册框\"]},\"110\":{\"c\":[\"日常问题锦集\"]},\"111\":{\"c\":[\"archive\"]},\"112\":{\"h\":\"用yarn-取代-npm\",\"t\":[\"yarn 的命令 和npm命令一样， yarn下载命令是并行下载，一份缓存\",\"官方文档\"]},\"113\":{\"c\":[\"日常问题锦集\"]},\"114\":{\"c\":[\"archive\"]},\"115\":{\"h\":\"编译android-p\",\"t\":[\"1、Program type already present: android.support.v4.app.INotificationSideChannel$Stub 解决方案 android.enableD8=true\",\"2、Program type already present: android.support.v4.os.ResultReceiver$1\",\"https://stackoverflow.com/questions/50387207/error-while-merging-dex-program-type-already-present-android-support-v4-os-resu\",\"https://www.jianshu.com/p/043cfed1cc07\"]},\"116\":{\"c\":[\"日常问题锦集\"]},\"117\":{\"c\":[\"archive\"]},\"118\":{\"h\":\"解决Mac-wifi-卡死问题\",\"t\":[\"点击命令行\",\"ps -ef | grep airportd \",\"显示进程号：57964\",\"0 57964 1 0 12:27下午 ?? 0:01.45 /usr/libexec/airportd \",\"杀死进程 57964\",\"sudo kill -9 57964(进程号) \"]},\"119\":{\"c\":[\"日常问题锦集\"]},\"120\":{\"c\":[\"archive\"]},\"121\":{\"h\":\"解决aar库问题\",\"t\":[\"https://www.cnblogs.com/liyiran/p/6670943.html\",\"http://www.cnblogs.com/AsionTang/p/5974254.html\"]},\"122\":{\"c\":[\"日常问题锦集\"]},\"123\":{\"c\":[\"archive\"]},\"124\":{\"h\":\"阿里云仓库\",\"t\":[\"避免不必要的翻墙\",\"maven{ url 'http://maven.aliyun.com/nexus/content/groups/public'} \"]},\"125\":{\"c\":[\"日常问题锦集\"]},\"126\":{\"c\":[\"archive\"]},\"127\":{\"h\":\"进阶知识\"},\"128\":{\"c\":[\"juc\"]},\"129\":{\"h\":\"arraylist扩容\"},\"130\":{\"c\":[\"知识进阶\"]},\"131\":{\"c\":[\"archive\"]},\"132\":{\"h\":\"binder机制\"},\"133\":{\"c\":[\"知识进阶\"]},\"134\":{\"c\":[\"archive\"]},\"135\":{\"h\":\"context原理\"},\"136\":{\"c\":[\"知识进阶\"]},\"137\":{\"c\":[\"archive\"]},\"138\":{\"h\":\"hashcode原理\"},\"139\":{\"c\":[\"知识进阶\"]},\"140\":{\"c\":[\"archive\"]},\"141\":{\"h\":\"https与http\"},\"142\":{\"c\":[\"知识进阶\"]},\"143\":{\"c\":[\"archive\"]},\"144\":{\"h\":\"java中对象生命周期\",\"t\":[\"在Java中，对象的生命周期包含下面几个阶段\",\"1. 创建阶段(Created) 2. 应用阶段(In Use) 3. 不可见阶段(Invisible) 4. 不可达阶段(Unreachable) 5. 收集阶段(Collected) 6. 终结阶段(Finalized) 7. 对象空间重分配阶段(De-allocated) \",\"生命周期\"]},\"145\":{\"h\":\"说明\",\"t\":[\"1.创建阶段(Created) 在创建阶段系统通过以下的几个步骤来完毕对象的创建过程\",\"l 为对象分配存储空间\",\"l 開始构造对象\",\"l 从超类到子类对static成员进行初始化\",\"l 超类成员变量按顺序初始化，递归调用超类的构造方法\",\"l 子类成员变量按顺序初始化，子类构造方法调用\",\"一旦对象被创建，并被分派给某些变量赋值，这个对象的状态就切换到了 应用阶段。\",\"2.应用阶段(In Use) 对象至少被一个强引用持有着。\",\"3.不可见阶段(Invisible) 当一个对象处于不可见阶段时，说明程序本身不再持有该对象的任何强引用，虽然该这些引用仍然是存在着的。 简单说就是程序的执行已经超出了该对象的作 用域了。\",\"3.不可见阶段(Invisible) 不再持有该对象的任何强引用 即程序的执行已经超出了该对象的作用域。\",\"4.不可达阶段(Unreachable) GCRoots不可达\",\"5.收集阶段(Collected) 当垃圾回收器发现该对象已经处于“不可达阶段”并且垃圾回收器已经对该对象 的内存空间重新分配做好准备时，则对象进入了“收集阶段”。如果该对象已经重写了 finalize()方法，则会去执行该方法的终端操作。\",\"6.终结阶段(Finalized) 当对象执行完 finalize()方法后仍然处于不可达状态时，则该对象进入终结阶段。在该阶段是等待垃圾回收器对该对象空间进行回收。\",\"7.对象空间重分配阶段(De-allocated)\\n垃圾回收器对该对象的所占用的内存空间进行回收或者再分配了，则该对象彻底消失了\"]},\"146\":{\"c\":[\"知识进阶\"]},\"147\":{\"c\":[\"archive\"]},\"148\":{\"h\":\"java内存模型\"},\"149\":{\"c\":[\"知识进阶\"]},\"150\":{\"c\":[\"archive\"]},\"151\":{\"h\":\"java内存模型JMM\",\"t\":[\"java内存模型\",\"Java 线程之间的通信总是隐式进行，并且采用的是共享内存模型。\\n这里提到的共享内存模型指的就是 Java 内存模型(简称 JMM)，JMM 决定一个线程对共享变量 的写入何时对另一个线程可见。\\n从抽象的角度来看，JMM 定义了线程和主内存之间的抽象关系:线程之间的共享变量存储在主内存(main memory)中，每 个线程都有一个私有的本地内存(local memory)，本地内存中存储了该线程以读/写共享变量的副本。\\n本地内存是 JMM 的一个抽象概念，并不真实存在。它涵 盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。\"]},\"152\":{\"c\":[\"知识进阶\"]},\"153\":{\"c\":[\"archive\"]},\"154\":{\"h\":\"java四种引用及使用场景\",\"t\":[\"强引用（Strong Reference）：只要强引用在，即使在内存不足，也不会被回收。常见：创建新对象\",\"软引用（SoftReference）:内存不足时会被回收。用于实现对内存敏感的高速缓存\",\"弱引用（WeakReference）:只能生存到下一次垃圾回收之前，gc回收器发现它，就会被回收，用于引用占用内存空间较大的对象\",\"虚引用（PhantomReference）:一个对象是否有虚引用存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得对象实例，设置虚引用唯一目的能在这个对象被回收时收到一个系统通知\",\"虚引用示例\",\" void testPhantomReference(){ String str = new String( \\\"test\\\" ); System.out.println(str.getClass() + \\\"@\\\" + str.hashCode()); final ReferenceQueue<String> referenceQueue = new ReferenceQueue<String>( ); Thread thread = new Thread( new Runnable() { @Override public void run() { while (!Thread.interrupted()){ Object obj = referenceQueue.poll(); if (obj!=null){ try { Field referent = Reference.class .getDeclaredField(\\\"referent\\\"); referent(true); Object result = referent(obj); System.out.println(\\\"gc will collect：\\\"+ result.getClass() + \\\"@\\\" + result.hashCode() + \\\" \\\" + (String) result); } catch (Exception e) { System.out.println(e.getMessage()); } } } } } ); thread.start(); PhantomReference<String> phantomReference = new PhantomReference<String>(str, referenceQueue); str = null; try { thread.join(3000); System.gc(); Thread.currentThread().join(3000); } catch (InterruptedException e) { e.printStackTrace(); } thread.interrupt(); } \"]},\"155\":{\"c\":[\"知识进阶\"]},\"156\":{\"c\":[\"archive\"]},\"157\":{\"h\":\"java基础知识(一)\"},\"158\":{\"h\":\"1、封装、继承、多态\",\"t\":[\"封装：把对象的属性与行为封装为一个独立整体，并尽可能隐藏对象内部细节\",\"继承：子类继承父类的特征和行为，实现重用\",\"多态：同一个行为具有多个不同表现形式或形态的能力 多态三个必要条件： 1、继承父类 2、重写父类方法 3、父类引用指向子类对象\"]},\"159\":{\"h\":\"2、重写和重载\",\"t\":[\"1、重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变 2、重载是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。\"]},\"160\":{\"h\":\"3、创建内部类和静态内部类\",\"t\":[\"public class Test { class A{ } static class B{ } public static void main(){ Test.A a = new Test().new A(); //只有创建外部类，才能继续创建内部类 Test.B b = new Test.B(); } } \"]},\"161\":{\"c\":[\"知识进阶\"]},\"162\":{\"c\":[\"archive\"]},\"163\":{\"h\":\"java基础知识(二)\"},\"164\":{\"c\":[\"知识进阶\"]},\"165\":{\"c\":[\"archive\"]},\"166\":{\"h\":\"java并发基础\"},\"167\":{\"h\":\"1、volatile和synchronized的区别\",\"t\":[\"volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。\",\"volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的 volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性\",\"volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。\",\"volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化\"]},\"168\":{\"h\":\"2、通过静态内部类实现单例好处\",\"t\":[\"1、不用synchronized，节省时间 2、懒加载，节省空间\"]},\"169\":{\"h\":\"3、synchronized三种用法(此知识点常考)\",\"t\":[\"对于普通同步方法，锁是当前实例对象 对于静态同步方法，锁是当前类Class对象 对于同步方法块，锁是synchrionized括号里配置对象\",\"//锁的三种用法 public class SyncDemo { private Object lock = new Object(); private static Object sLock = new Object(); public synchronized void methodInstance() { System.out.println( \\\"锁是当前实例对象\\\" ); } public synchronized static void methodClass() { System.out.println( \\\"锁是当前类Class对象\\\" ); } public static void methodConfig() { synchronized (SyncDemo.class) { System.out.println( \\\"锁是synchronized配置对象 - 当前类Class对象\\\" ); } } public static void methodConfig3() { synchronized (sLock) { System.out.println( \\\"锁是synchronized配置对象\\\" ); } } public void methodConfig1() { synchronized (lock) { System.out.println( \\\"锁是synchronized配置对象\\\" ); } } public void methodConfig2() { synchronized (this) { System.out.println( \\\"锁是synchronized配置对象 - 当前实例对象\\\" ); } } public static void main(String[] args) { SyncDemo demo = new SyncDemo(); //当前实例对象 demo.methodInstance(); demo.methodConfig2(); System.out.println(); //当前类Class对象 SyncDemo.methodClass(); SyncDemo.methodConfig(); System.out.println(); //配置对象 SyncDemo.methodConfig3(); demo.methodConfig1(); } } \"]},\"170\":{\"c\":[\"知识进阶\"]},\"171\":{\"c\":[\"archive\"]},\"172\":{\"h\":\"jvm-类加载生命周期\"},\"173\":{\"c\":[\"知识进阶\"]},\"174\":{\"c\":[\"archive\"]},\"175\":{\"h\":\"jvm内存清理算法\"},\"176\":{\"c\":[\"知识进阶\"]},\"177\":{\"c\":[\"archive\"]},\"178\":{\"h\":\"recycleview优化-和三级缓存\"},\"179\":{\"c\":[\"知识进阶\"]},\"180\":{\"c\":[\"archive\"]},\"181\":{\"h\":\"tcp和udp区别\",\"t\":[\"（1）TCP是面向连接的，udp是无连接的即发送数据前不需要先建立链接。\",\"（2）TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。 并且因为tcp可靠，面向连接，不会丢失数据因此适合大数据量的交换。\",\"（3）TCP是面向字节流，UDP面向报文，并且网络出现拥塞不会使得发送速率降低（因此会出现丢包，对实时的应用比如IP电话和视频会议等）。\",\"（4）TCP只能是1对1的，UDP支持1对1,1对多。\",\"（5）TCP的首部较大为20字节，而UDP只有8字节。\",\"（6）TCP是面向连接的可靠性传输，而UDP是不可靠的。\"]},\"182\":{\"c\":[\"知识进阶\"]},\"183\":{\"c\":[\"archive\"]},\"184\":{\"h\":\"内存分配和回收策略\",\"t\":[\"java自动内存管理：给对象分配内存以及回收分配给对象内存\",\"1、对象优先在Eden分配，当Eden区没有足够空间进行分配时，虚拟机发起一次MinorGC\",\"2、大对象直接进入老年代\",\"3、长期存活的对象将进入老年代，当对象在新生代经历一定次数（15）MinorGC，就会晋升到老年代\",\"4、动态对象年龄判定，如果青年代在Survivor中相同年龄所有对象大小大于Survivor空间的一半，则大于等于该年龄的对象直接进入老年代，无须等待要求指定MaxTenuringThreshold年龄\"]},\"185\":{\"c\":[\"知识进阶\"]},\"186\":{\"c\":[\"archive\"]},\"187\":{\"h\":\"内存抖动\"},\"188\":{\"c\":[\"知识进阶\"]},\"189\":{\"c\":[\"archive\"]},\"190\":{\"h\":\"内存泄漏\"},\"191\":{\"c\":[\"知识进阶\"]},\"192\":{\"c\":[\"archive\"]},\"193\":{\"h\":\"双亲委托模型\"},\"194\":{\"h\":\"1、双亲委托模型\",\"t\":[\"从java虚拟机角度讲，只存在两种类加载器 1、启动类加载器 BootstrapClassLoader，是C++语言实现 2、其他类加载器，java实现\",\"从开发人员角度讲，划分三类 1、启动类加载器（BootstrapClassLoader） 负责加载JAVA_HOME/lib目录下或被-Xbootclasspath指定路径\",\"2、扩展类加载器（ExtensionClassLoader） 负责加载<JAVA_HOME>\\\\lib\\\\ext\",\"3、应用类加载器（ApplicationClassLoader） 负责加载用户类路径上的指定类库\",\"双亲委托模型\",\"类加载器之间父子关系是以组合关系来复用父加载器代码\",\"双亲委托工作流程： 如果一个类加载器收到类加载请求，他首先不会自己尝试加载这个类，而是将这个请求委派给父类加载器完成，每一个层次加载器都是如此，直到委托到启动类加载器，只有父类反馈无法完成请求，子类才尝试加载\"]},\"195\":{\"h\":\"2、为什么使用双亲委托\",\"t\":[\"1、因为可以避免重复加载，当父类已经加载该类，就没有必要让子类再加载一次。 2、考虑安全因素，如果用自定义同名类来动态替换java核心api中定义类型，存在非常大隐患，除非自定义ClassLoader搜索算法\"]},\"196\":{\"h\":\"3、JVM在搜索类中，如何判定两个class相同\",\"t\":[\"1、判断两个类名是否相同 2、是否由同一个类加载器实例加载\"]},\"197\":{\"h\":\"4、代码实现\",\"t\":[\"protected Class<?> loadClass(String className, boolean resolve) throws ClassNotFoundException { //首先检查类是否加载过 Class<?> clazz = findLoadedClass(className); if (clazz == null) { try { //如果存在父节点，加载父加载器ClassLoader if(parent!=null){ //如果没有加载过，先调用父加载器的loadClass clazz = parent.loadClass(className, false); }else{//否则用启动类加载器 clazz= findBootstrapClassOrNull(className); } } catch (ClassNotFoundException e) { //抛出异常说明父类无法完成加载请求 if(clazz == null){ clazz = findClass(className); } } } //解析class if(resolve){ resolveClass(clazz) } return clazz; } \"]},\"198\":{\"c\":[\"知识进阶\"]},\"199\":{\"c\":[\"archive\"]},\"200\":{\"h\":\"可达性分析算法\",\"t\":[\"可达性分析算法通过一系列成为GCRoots的对象作为起始点，从这些节点上向下搜索，所走过的路径称为引用链，当一个对象没有任何引用链与GCRoots连接时就说明此对象不可用，也就是对象不可达\",\"GCRoots对象 1、虚拟机栈中引用对象（栈帧中本地变量表） 2、方法中类的静态属性引用对象 3、方法区中常量引用对象 4、native方法引用的对象\",\"可达性分析算法整个清理流程 1、第一次标记：对象经过可达性分析，没有GCRoots引用链,则进行第一次标记筛选，筛选条件是：该对象是否必要执行finalize()方法：没有覆盖finalize方法或该方法已经执行过。如果有必要执行，则该对象放在F-Queue队列，并稍后在由虚拟 机建立的低优先级 Finalizer 线程中触发该对象的 finalize()方法，但不保证一定等 待它执行结束。 2、第二次标记:GC 对 F-Queue 队列里的对象进行第二次标记，如果在第二次标记 时该对象又成功被引用，则会被移除即将回收的集合，否则会被回收\",\"注意：任何一个对象finalize方法只会被系统调用一次\"]},\"201\":{\"c\":[\"知识进阶\"]},\"202\":{\"c\":[\"archive\"]},\"203\":{\"h\":\"垃圾收集算法\",\"t\":[\"垃圾收集算法\"]},\"204\":{\"h\":\"1、标记-清除算法（mark-sweep）\",\"t\":[\"首先标记出所有需要回收的对象，在标记完成后统一进行回收所有被标记对象 存在问题： 1、效率问题，标记和清除两个过程效率不高 2、空间问题，标记清除后产生大量不连续内存碎片，空间碎片太多可能导致程序后续分配大对象时，提前触发gc\"]},\"205\":{\"h\":\"2、标记-整理算法（mark-compat）\",\"t\":[\"标记出所有需要回收的对象，标记完成后，让所有存活对象都向一端移动，直接清理掉端边界以外的内存。 标记-整理算法在标记-清除算法基础上，又进行对象移动，因此成本更高，但解决内存碎片问题。该垃圾回收算法适用于对象存活率搞得场景（老年代）\"]},\"206\":{\"h\":\"3、复制算法\",\"t\":[\"复制算法将可用内存容量划分为大小相等两块，每次只使用其中一块，当一块内存用完，就将存货的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。算法适用于对象存活率低的场景，比如新生代。 IBM公司研究，新生代中的对象98%朝生夕死，分配比例8：1 Eden:Survivor0:Survivor1= 8:1:1。意外情况需要依赖其他内存（老年代）进行分配担保\"]},\"207\":{\"h\":\"4、分代收集算法\",\"t\":[\"根据对象生存周期不同将内存进行划分。 新生代对象存活率低，采用复制算法 老年代存活率高，就采用标记-清除算法或标记-整理算法\",\"1、新生代 1.所有新生成的对象首先都是放在新生代的。新生代的目标就是尽可能快速的收 集掉那些生命周期短的对象。 2.新生代内存按照 8:1:1 的比例分为一个 eden 区和两个 survivor(survivor0,survivor1)区。大部分对象在 Eden 区中生成。回收时先将 eden 区存活对象复制到一个 survivor0 区，然后清空 eden 区，当这个 survivor0 区也 存放满了时，则将 eden 区和 survivor0 区存活对象复制到另一个 survivor1 区， 然后清空 eden 和这个 survivor0 区，此时 survivor0 区是空的，然后将 survivor0 区和 survivor1 区交换，即保持 survivor1 区为空， 如此往复。 3.当 survivor1 区不足以存放 eden 和 survivor0 的存活对象时，就将存活对象直 接存放到老年代。若是老年代也满了就会触发一次 Full GC，也就是新生代、老 年代都进行回收。 4.新生代发生的 GC 也叫做 Minor GC，MinorGC 发生频率比较高(不一定等 Eden 区满了才触发)。\",\"2、老年代 1.在老年代中经历了 N 次垃圾回收后仍然存活的对象，就会被放到老年代中。因 此，可以认为老年代中存放的都是一些生命周期较长的对象。 2.内存比新生代也大很多(大概比例是 1:2)，当老年代内存满时触发 Major GC， 即 Full GC。Full GC 发生频率比较低，老年代对象存活时间比较长。\",\"3、持久代 永久代主要存放静态文件，如java类，方法，永久代对垃圾回收没有显著影响\",\"4、垃圾回收有两种类型，Minor GC 和 Full GC。\",\"Minor GC：对新生代进行回收，不会影响到年老代。因为新生代的 Java 对象大多死亡频繁，所以 Minor GC 非常频繁，一般在这里使用速度快、效率高的算法，使垃圾回收能尽快完成。\",\"Full GC：也叫 Major GC，对整个堆进行回收，包括新生代和老年代。由于Full GC需要对整个堆进行回收，所以比Minor GC要慢，因此应该尽可能减少Full GC的次数，导致Full GC的原因包括：老年代被写满、永久代（Perm）被写满和System.gc()被显式调用等。\"]},\"208\":{\"h\":\"5、垃圾收集器\",\"t\":[\"垃圾收集器\"]},\"209\":{\"c\":[\"知识进阶\"]},\"210\":{\"c\":[\"archive\"]},\"211\":{\"h\":\"常见容器\"},\"212\":{\"h\":\"1、list ,set map特点\",\"t\":[\"list:有序，可重复，索引查询速度快。插入，删除，伴随数据移动慢 set:无序，不可重复 map:键值对，键唯一，值多个\",\"List, set，继承自CollectIon接口，map不是\"]},\"213\":{\"h\":\"2、线程安全集合类与非线程安全\",\"t\":[\"LinkedList，ArrayList,HashSet是非线程安全的，Vector是线程安全的 HashMap是线程安全的，HashTable是非线程安全的 StringBuilder是非线程安全的，StringBuffer是线程安全的\"]},\"214\":{\"h\":\"3、 ArrayList与LinkedList区别\",\"t\":[\"ArrayList是基于动态数组的数据结构实现，因为地址连续，查询效率比较高，但是插入和删除效率低\",\"LinkedList是基于链表的数据结构实现，地址是任意的，不需要连续的地址空间，对新增和删除效率高，但是查询效率低\"]},\"215\":{\"h\":\"4、 ArrayList与LinkedList扩容\",\"t\":[\"ArrayList初始化大小为10，扩容规则：扩容大小 =原始大小 + 原始大小/2 + 1(即 1.5倍+1) LinkedList是一个双向链表，没有初始化大小，也没有扩容规则，新增即可\"]},\"216\":{\"h\":\"5、HashSet和TreeSet区别\",\"t\":[\"TreeSet是基于红黑树实现的，是自动排好序的 HashSet是基于哈希表实现的，数据是无序的 HashSet要求放入对象实现hashCode()方法\"]},\"217\":{\"h\":\"6、set集合从原理上如何保证不重复\"},\"218\":{\"c\":[\"知识进阶\"]},\"219\":{\"c\":[\"archive\"]},\"220\":{\"h\":\"性能优化\"},\"221\":{\"c\":[\"知识进阶\"]},\"222\":{\"c\":[\"archive\"]},\"223\":{\"h\":\"抽象类与接口\"},\"224\":{\"c\":[\"知识进阶\"]},\"225\":{\"c\":[\"archive\"]},\"226\":{\"h\":\"知识进阶反思\"},\"227\":{\"h\":\"1、遇到问题\",\"t\":[\"面试2周，算是热身练手，也暴露很多问题 虽然我系统学习jvm虚拟机，java并发编程艺术，学习算法，对一些常见数据结构学习， 还是面试结果不理想，果然“面试造火箭，入职拧螺丝”诚不欺我。还是要在原理上深挖，知识点死角进行补遗\",\"面试中一些问题，需要概念定义清晰，回答完整，原理到位。很有孔乙己中茴香豆，茴字有四种写法。不仅要知道，还要写出“回、囘、囬、廻”。大环境就是这样，抱怨没有用，本篇文集目标定位在面试过程中，生难偏涩概念汇总和完整准确答案，以解决有此境遇下朋友的难题。\",\"自身问题: 1、概念混淆，概念定义忽略 2、常用知识点遗漏 3、算法给出解决方案是O(n2)，这个非常危险 4、常用数据结构原理缺失 5、网络相关知识缺失 6、源码常问rxjava,okhttp,retrofit,glide 7、考察基础概念回答一半，未达到满意(新加) 8、遇到遗漏概念，强行用一知半解知识解释，陷入死局(新加)\"]},\"228\":{\"h\":\"2、解决方案\",\"t\":[\"1、将面试考到问题汇总，找到正确答案 2、能用代码实现的，写在github上 3、算法要刷剑指offer + leetcode 100+ ,解决方案绝对不能是O(n2) 4、将常用数据结构的原理，查看并分析 5、及时研读源码 6、将网络部分的知识补上 7、知识点需要完整串联在一起，重点概念用一篇文章完全说明(新增) 8、回答问题，知识点要完整且准确 综上，所有面试过程遇到问题，解答均写在《知识进阶》文集上\"]},\"229\":{\"h\":\"3、知识进阶导图\",\"t\":[\"知识进阶\",\"[图片上传失败...(image-61980a-1626326127283)] 此图也会实时更新 所有知识点沿着这个路径，进行查漏补缺\"]},\"230\":{\"h\":\"4、反思的反思\",\"t\":[\"反思的反思，是冯友兰在中国哲学简史给出的定义 解决方案是从''术\\\"这个层面解决问题，并不能根治问题， 那么要从道这个层面解决问题。\",\"暴露自身三大问题： 1、技术方面深度需要提升 2、技术缺少全面性和规范性 3、要关注技术成果与产出量化\",\"人在解决问题时有两大问题 1、自我意识障碍 潜意识防卫机制，很难面对现实 2、思维盲点 导致不能实事求是解决当前所面临处境\",\"落地解决方法论 问题：面试中暴露问题，面试官反馈意见 诊断：准确诊断问题，找到问题根源 方案：迭代规划解决问题方案 践行：做一切必要事情践行方案 复盘：以上步骤进行复盘优化\",\"#####从修行的角度反思自己(唯心角度)\\n我过于执着外相了，从外界找到原因，再找解决方案。会让人追随境遇。\\n也执着要证明自己，需要外界一个履历说明自己可以。兜兜转转，也未实现目标\"]},\"231\":{\"c\":[\"知识进阶\"]},\"232\":{\"c\":[\"archive\"]},\"233\":{\"h\":\"类加载时机\",\"t\":[\"类加载时机\"]},\"234\":{\"c\":[\"知识进阶\"]},\"235\":{\"c\":[\"archive\"]},\"236\":{\"h\":\"类文件结构\"},\"237\":{\"h\":\"classFile结构体\",\"t\":[\"//jvm规范 ClassFile { u4 magic; u2 minor_version; u2 major_version; u2 constant_pool_count; cp_info constant_pool[constant_pool_count-1]; u2 access_flags; u2 this_class; u2 super_class; u2 interfaces_count; u2 interfaces[interfaces_count]; u2 fields_count; field_info fields[fields_count]; u2 methods_count; method_info methods[methods_count]; u2 attributes_count; attribute_info attributes[attributes_count]; } \",\"详见《手动编写jvm虚拟机》\"]},\"238\":{\"c\":[\"知识进阶\"]},\"239\":{\"c\":[\"archive\"]},\"240\":{\"h\":\"红黑树与hashmap\"},\"241\":{\"c\":[\"知识进阶\"]},\"242\":{\"c\":[\"archive\"]},\"243\":{\"h\":\"线程与进程\"},\"244\":{\"c\":[\"知识进阶\"]},\"245\":{\"c\":[\"archive\"]},\"246\":{\"h\":\"线程池核心参数\",\"t\":[\"线程池核心参数\",\" ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) \",\"1）corePoolSize（线程池基本大小）\",\"2）maximumPoolSize（线程池最大数量）\",\"3）keepAliveTime（空闲线程活动保持时间）：线程池工作线程空闲后，保持存活时间\",\"4）TimeUnit（时间单位）\",\"5）workQueue（任务队列）：用于保存等待执行任务的阻塞队列 1、ArrayBlockQueue 2、LinkedBlockQueue 3、SynchronousQueue(不存储元素阻塞队列) 4、PriorityBlockingQueue(优先级无限阻塞队列)\",\"6） threadFactory(线程工厂)\",\"7） handler（饱和策略） 1、AbortPolicy:直接抛出异常 2、CallerRunsPolicy:调用者所在线程来运行任务 3、DiscardOrderestPolicy:丢队列最近一个任务，并执行 4、DiscardPolicy:不处理，丢掉\"]},\"247\":{\"h\":\"四种线程池\",\"t\":[\"固定线程池 newFixedThreadPool 缓存线程池 newCachedThreadPool 单个线程 newSingleThreadExecutor 定时线程池 newScheduledThreadPool\",\" //固定线程池 public static ExecutorService newFixedThreadPool(int nThreads) { return new ThreadPoolExecutor( nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>() ); } //缓存线程池 public static ExecutorService newCachedThreadPool() { return new ThreadPoolExecutor( 0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>() ); } //单个线程池 public static ExecutorService newSingleThreadExecutor() { return new ThreadPoolExecutor( 1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>() ); } //定时线程池 public static ExecutorService newScheduledThreadPoolExecutor(int corePoolSize) { return new ThreadPoolExecutor( corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS, new ScheduledThreadPoolExecutor.DelayedWorkQueue() ); } \"]},\"248\":{\"h\":\"任务性质分类\",\"t\":[\"获得cpu个数\",\" int cpu = Runtime.getRuntime().availableProcessors(); \",\"CPU密集型：Ncpu+1 IO密集型：2* Ncpu 混合型：线程池分解\"]},\"249\":{\"h\":\"示例代码pool\",\"t\":[\"https://github.com/yinlingchaoliu/juc.git\"]},\"250\":{\"c\":[\"知识进阶\"]},\"251\":{\"c\":[\"archive\"]},\"252\":{\"h\":\"背包算法\"},\"253\":{\"c\":[\"知识进阶\"]},\"254\":{\"c\":[\"archive\"]},\"255\":{\"h\":\"设计模式的基本概念与区别\"},\"256\":{\"h\":\"1、设计模式有哪些？\",\"t\":[\"23种设计模式 总体分为三大类 创建型设计模式，共5种 简单工厂、工厂方法模式，抽象工厂模式，单例模式，建造者模式，原型模式\",\"结构型模式，共7种 适配器模式，装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式\",\"行为型模式，共11种 策略模式，模板方法，观察者模式，迭代模式，责任链模式，命令模式，备忘录模式，状态模式，访问者模式，中介者模式，解释器模式\"]},\"257\":{\"h\":\"2、设计模式定义\",\"t\":[\"1、 设计模式按照类型划分\",\"创建型设计模式：用来解耦对象的实例化过程。\",\"结构型设计模式：将类和对象按照一定规则组合成一个更加强大的结构体。\",\"行为型设计模式：定义类和对象的交互行为。\",\"2、 设计模式简单定义 \",\"3、文字版 1）创建型设计模式\",\"单例模式：确保一个类只有一个实例，提供一个全局访问点\",\"建造者模式：封装一个复杂对象过程，按照步骤构建对象\",\"原型模式：通过复制现有实例创建新实例\",\"简单工厂模式：一个工厂类根据传入参数决定创建哪一种产品实例\",\"工厂方法模式：定义一个用于创建对象的接口，让子类决定实例化那个类\",\"抽象工厂模式：创建相关依赖对象家族，而无须指定具体类\",\"2）结构型设计模式\",\"适配器模式：将一个类的方法或者接口转换成客户希望另一个接口\",\"组合模式：将对象组成成树形结构以表示“整体-部分”的层次结构\",\"装饰模式：动态的给对象添加新的功能\",\"外观模式：对外提供一个统一方法，用来访问子系统中一群接口\",\"桥接模式：将抽象部分与实现部分分离，使他们都可以独立进行变化\",\"享元模式：通过共享技术来有效支持大量细粒度的对象\",\"代理模式：为其他对象提供一种代理以控制对这个对象的访问\",\"3）行为型设计模式\",\"模板模式：定义一个算法结构，而将一些步骤延迟到子类实现\",\"解释器模式：定义一个语言，定义它的文法的一种表示，并定义一个解释器\",\"策略模式：定义一系列算法，把它们封装起来，并且使它们可以互相替换\",\"状态模式：允许一个对象在其内部状态改变时改变它的行为\",\"观察者模式：对象间一对多依赖关系，一个对象改变，依赖于它对象得到通知并更新\",\"备忘录模式：在不破坏封装前提下，保存对象内部状态\",\"中介者模式:用一个中介对象来封装一系列对象交互\",\"命令模式：将命令请求封装成一个对象，可以将不同请求来进行参数化\",\"访问者模式：在不改变数据结构的前提下，增加作用于一组元素对象新功能\",\"责任链模式：将请求的发送者和接受者解耦，使得多个对象都有处理这个请求的机会\",\"迭代器模式：一种遍历访问容器对象中各个元素的方法，不暴露该对象内部结构\"]},\"258\":{\"h\":\"3、动态代理和静态代理区别\",\"t\":[\"区别在于代理类生成时间不同，根据程序运行时代理类是否存在\",\"应用场景：retrofit使用动态代理提升扩展性\"]},\"259\":{\"h\":\"4、动态代理写法\",\"t\":[\"参考 https://github.com/yinlingchaoliu/23-design-pattern.git\",\"公共部分\",\"//接口 public interface ILawsuit { //提交申请 void submit(); //举证 void burden(); //辩护 void defend(); //诉讼完成 void finish(); } public class XiaoMin implements ILawsuit { @Override public void submit() { //小民申请仲裁 System.out.println( \\\"老板年底拖欠工资，特此申请仲裁！\\\" ); } @Override public void burden() { //小民提交证据 System.out.println( \\\"这是合同书和过去一年的银行工资流水！\\\" ); } @Override public void defend() { //铁证如山 System.out.println( \\\"证据确凿，不需要再说什么！\\\" ); } @Override public void finish() { //结果 System.out.println( \\\"诉讼成功，判决老板即日起七天内结算工资！\\\" ); } } \",\"静态代理\",\"/** * 代理类 */ public class Lawyer implements ILawsuit { private ILawsuit mLawsuit; public Lawyer(ILawsuit mLawsuit) { this.mLawsuit = mLawsuit; } @Override public void submit() { mLawsuit.submit(); } @Override public void burden() { mLawsuit.burden(); } @Override public void defend() { mLawsuit.defend(); } @Override public void finish() { mLawsuit.finish(); } } 测试类 public class TestMain { public static void main(String[] args) { ILawsuit xiaomin = new XiaoMin(); //静态代理 ILawsuit lawyer = new Lawyer( xiaomin ); lawyer.submit(); lawyer.burden(); lawyer.defend(); lawyer.finish(); } } \",\"动态代理 第一种写法\",\"/** * * 动态代理 * */ public class DynamicProxy implements InvocationHandler { private Object obj; public DynamicProxy(Object obj) { this.obj = obj; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { Object result = method.invoke( obj,args ); return result; } } public class TestMain { public static void main(String[] args) { ILawsuit xiaomin = new XiaoMin(); //动态代理 DynamicProxy proxy = new DynamicProxy( xiaomin ); //获取小民的classLoader ClassLoader loader = xiaomin.getClass().getClassLoader(); //动态代理一个代理律师 ILawsuit lawyer = (ILawsuit) Proxy.newProxyInstance( loader, new Class[]{ILawsuit.class}, proxy ); lawyer.submit(); lawyer.burden(); lawyer.defend(); lawyer.finish(); } } \",\"动态代理第二种通用式写法\",\" public class DynamicProxy { //需要特别指定泛型类 public static <T> T create(Class<T> serivce, final Object newInstance) { InvocationHandler proxy = new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { return method.invoke( newInstance, args ); } }; ClassLoader loader = serivce.getClassLoader(); return (T) Proxy.newProxyInstance( loader, new Class[]{serivce}, proxy ); } } /** * 需要那个接口 泛型指向那个 * T必须为接口类 * @param newInstance * @param <T> * @return */ public static <T> T create(final Object newInstance) { InvocationHandler proxy = new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { return method.invoke( newInstance, args ); } }; //获得接口列表 Class[] ifaces = newInstance.getClass().getInterfaces(); //获取实体类classLoader ClassLoader loader = newInstance.getClass().getClassLoader(); //获得动态代理实例 return (T) Proxy.newProxyInstance( loader, ifaces, proxy ); } //retrofit写法 /** * 没有真正实体类 * 可以用invoke方法反射 * @param service * @param <T> * @return */ public static <T> T create(Class<T> service) { ClassLoader loader = service.getClassLoader(); InvocationHandler proxy = new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { //这里填写回调，没有newInstance retrofit用法 return null; } }; return (T) Proxy.newProxyInstance( loader, new Class[]{service}, proxy ); } } \",\"测试类\",\" public static void main(String args[]){ //第一种方式:指定接口 ILawsuit lawsuit = DynamicProxy.create( ILawsuit.class, new XiaoMin() ); lawsuit.submit(); lawsuit.burden(); //第二种方式:采用接口转换 ILawsuit mlawsuit = DynamicProxy.create( new XiaoMin() ); mlawsuit.defend(); IArgue argue = DynamicProxy.create( new XiaoMin() ); argue.argue(); //转换时 必须用接口才行 ILawsuit judge = (ILawsuit)argue; judge.finish(); } \"]},\"260\":{\"h\":\"5、简单工厂、工厂方法、抽象工厂、建造者模式区别\",\"t\":[\"简单工厂：一个工厂方法创建不同类型对象 工厂方法：一个具体工厂类负责创建一个具体对象类型 抽象工厂：一个具体工厂类负责创建一系列相关对象 建造者模式：对象的构建与表现分离，更注重对象创建过程\"]},\"261\":{\"h\":\"6、装饰模式与代理模式区别、与桥接者模式相比\",\"t\":[\"1、装饰模式以客户端透明方式扩展对象的功能，是继承关系替代方案。 代理模式是给一个对象提供代理对象，并由代理对象来控制原有对象引用 2、装饰模式应该为所装饰对象增强功能，代理模式对所代理对象施加控制，但不对对象功能本身增加 3、桥接模式主要为应对某个类多个变化维度增加场景，通过桥接把多个变化隔离开\"]},\"262\":{\"h\":\"7、外观模式和中介模式区别\",\"t\":[\"外观模式重点对外封装统一高层接口，便于用户使用。 中介模式避免多个互相协作对象直接易用。他们之间通过一个中介对象进行，从而得到他们耦合松散，易于应对变化\"]},\"263\":{\"h\":\"8、策略模式和状态模式区别\",\"t\":[\"类型结构一致，本质不同，策略模式重在整个算法的替换，也就是策略替换，而状态模式则是通过状态来改变行为\"]},\"264\":{\"h\":\"9、适配器模式、装饰者模式、外观模式异同\",\"t\":[\"相同之处，在用户类与被调用类之间加了一个中间层 不同之处 代理对象表示一个单一对象 外观对象表示一个子系统 适配器和外观是对现存系统封装 外观定义新接口，简化接口 适配器则是复用原有接口，侧重于接口转换\"]},\"265\":{\"h\":\"10、重构之代码坏味道\",\"t\":[\"记住坏味道，在文集《重构 改善代码设计》-代码坏味道中\\n记住一个原则：事不过三，三则重构\\n常见坏味道要点：\\n1、代码重复\\n2、方法过长\\n3、类功能过多\\n4、过长参数列表\\n5、冗余类\\n6、需要过多注释\"]},\"266\":{\"c\":[\"知识进阶\"]},\"267\":{\"c\":[\"archive\"]},\"268\":{\"h\":\"跨进程通信\",\"t\":[\"binder连接池 https://github.com/yinlingchaoliu/android_ipc 多个aidl复用一个service\",\"ShareMemory 内存映射 + 文件锁 保证进程同步\",\"用contentprovider保证线程安全\",\"Settings.System.putInt( context.getContentResolver(), key, value ) Settings.System.getInt( context.getContentResolver(), key ) \"]},\"269\":{\"c\":[\"知识进阶\"]},\"270\":{\"c\":[\"archive\"]},\"271\":{\"h\":\"运行时数据\",\"t\":[\"####知识扩展 rtda 有数据存储和运算功能 存储来自共享数据+私有数据 运算功能来自线程jvm栈帧 用stack计算\",\"帧计算要重点看 jvm stack jvm frame 要写一篇文章专门阐述逻辑\",\"运行时数据区(run-time data area)\",\"运行时数据类型\",\"创建和销毁时机\",\"多线程共享数据\",\"虚拟机启动创建，退出销毁\",\"线程私有数据\",\"创建线程时创建，退出销毁\",\"多线程共享数据\",\"多线程共享数据类型\",\"位置\",\"包含\",\"类数据\",\"方法区Method Area(在Heap内)\",\"字段，方法信息，方法字节码，运行时常量池\",\"类实例（对象）\",\"堆Heap\",\"####此图非常重要 \",\"pc 寄存器 java虚拟机指令地址 jvm Frame 执行当前方法的帧\",\"数据类型 1、基本类型：变量存放数据本身 2、引用类型：变量存放对象引用，真正对象数据在堆里\",\"基本数据类型\",\"引用类型\",\"布尔类型\",\"类类型\",\"数字类型（整型和浮点）\",\"接口类型\",\"数组类型\",\"特殊null\",\"程序计算通过栈stack来实现\",\"####实现运行时数据区 tip ： 设计前，先定义好对应结构体，再实现功能\",\"go run main -test \\\"rtda\\\" #测试 运行时数据 \",\"####实战项目地址\\nhttps://gitee.com/yinlingchaoliu/jvmgo.git\"]},\"272\":{\"c\":[\"知识进阶\"]},\"273\":{\"c\":[\"archive\"]},\"274\":{\"h\":\"8种常见排序算法\"},\"275\":{\"h\":\"0、排序算法大纲\"},\"276\":{\"h\":\"1、排序算法\",\"t\":[\"排序算法\"]},\"277\":{\"h\":\"1、排序算法时间复杂度\",\"t\":[\"算法比较\"]},\"278\":{\"h\":\"1、冒泡算法\",\"t\":[\"比喻：相邻冒泡 思路：\",\"比较相邻的元素。如果第一个比第二个大，就交换它们两个；\",\"对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素就是最大的数；\",\"排除最大的数，接着下一轮继续相同的操作，确定第二大的数...\",\"重复步骤1-3，直到排序完成。\",\"//冒泡排序 void bubbleSort(int[] nums){ if(nums == null || nums.length < 2){ return; } int length = nums.length; for(int i = 0; i< length-1;i++){ for(int j = 0; j< length -i -1;j++){ //相邻元素 当前第一个比第二个大交换 if(nums[j]>nums[j+1]){ int tmp = num[j]; num[j] = num[j+1]; num[j+1] = tmp; } } } } \"]},\"279\":{\"h\":\"2、快速排序\",\"t\":[\"比喻：选基准，左右各一排 思路：\",\"从数组中取第一个数做为基准 pivot\",\"采用双指针(头尾两端)遍历，从左往右找到比基准值大的第一个数，从右往左找到比基准值小的第一个数，交换两数位置，直到头尾指针相等或头指针大于尾指针，最后把基准值与头指针的数交换\",\"对左右两边数组，重复上面1，2步骤。(左边的数就比基准值小，右边的数就比基准值大)\",\"左右两边数列递归结束后，排序完成。\",\"void sort(int[] nums){ if(nums == null || nums.length < 2) return; quickSort(nums, 0, nums.length-1); } //基准默认取第一个 void quickSort(int[] nums, int left , int right){ if(left > right) return; int i = left; int j = right; //基准 int pivot = nums[i]; while(i<j){ //从右边选取第一个比基准小的数 while(i<j && nums[j] > pivot){ j++; } //从左边选择第一个比基准大的数 while(i<j& nums[i] <= pivot){ //基准 不参与排序 i++; } //交换 if(i<j){ int tmp = nums[i]; nums[i] = nums[j]; nums[j] = tmp; } } //把基准值与头指针的数交换 nums[left] = nums[i]; nums[i] = pivot; quickSort(nums,left, i-1); quickSort(nums,i+1,right); } \"]},\"280\":{\"h\":\"3、插入排序\",\"t\":[\"比喻 :抓牌排序 思路：\",\"从第一个元素开始，假定该元素已被排序；\",\"取出下一个元素，在前面已排序的元素序列中，从后向前扫描；\",\"如果该元素（已排序）大于新元素，将该元素移到下一位置；\",\"重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；\",\"将新元素插入到该位置后；\",\"重复步骤2~5。\",\"void insertionSort(int[] nums){ if(nums == null || nums.length < 2) return; int length = nums.length; for(int i = 0; i < length -1 ;i++){ //上一个数的指针 int preIndex = i; //当前值 int curr = nums[i+1]; //比喻动作 抓新牌 排序 while(preIndex>=0 && curr < nums[preIndex]){ nums[preIndex+1] = nums[preIndex]; preIndex--; } //插入到这个数的后面 nums[preIndex + 1] = curr; } } \"]},\"281\":{\"h\":\"4、希尔排序\",\"t\":[\"比喻：插入排序 ， 步子 从n/2 逐渐 变为 1\",\"思路：\",\"把数组分割成若干h个小组, 然后对每一个小组分别进行插入排序。\",\"每一轮分割的数组的个数逐步缩小，h/2->h/4->h/8，并且进行排序，保证有序。\",\"当h=1时，则数组排序完成。\",\"void shellSort(int[] nums){ if(nums == null || nums.length < 2) return; int length = nums.length; int curr; int gap = length/2; while (gap > 0) { for (int i = gap; i < length; i++) { curr = nums[i]; int preIndex = i - gap; while (preIndex >= 0 && nums[preIndex] > curr) { nums[preIndex + gap] = nums[preIndex]; preIndex -= gap; } nums[preIndex + gap] = curr; } gap /= 2; } } \"]},\"282\":{\"h\":\"5、选择排序\",\"t\":[\"比喻：遍历剩余数组最小交换 思路：\",\"找到最小的元素，和数组第一个数交换位置。\",\"找到第二小的元素，和数组第二个数交换位置...\",\"直到最后一个元素，排序完成。\",\" void selectionSort(int[] nums) { for (int i = 0; i < nums.length; i++) { int minIndex = i; for (int j = i + 1; j < nums.length; j++) { if (nums[j] < nums[minIndex]) { minIndex = j; } } if (minIndex != i) { int temp = nums[i]; nums[minIndex] = temp; nums[i] = nums[minIndex]; } } } \"]},\"283\":{\"h\":\"6、堆排序\",\"t\":[\"大顶堆概念：每个节点的值都大于或者等于它的左右子节点的值，所以顶点的数就是最大值。\",\"思路：\",\"对原数组构建成大顶堆。\",\"交换头尾值，尾指针索引减一，固定最大值。\",\"重新构建大顶堆。\",\"重复步骤2~3，直到最后一个元素，排序完成。\",\"protected void sort(int[] nums) { if (nums == null || nums.length < 2) { return; } heapSort(nums); } private void heapSort(int[] nums) { if (nums == null || nums.length < 2) { return; } //构建大根堆 createTopHeap(nums); int size = nums.length; while (size > 1) { //大根堆的交换头尾值，固定最大值在末尾 swap(nums, 0, size - 1); //末尾的索引值往左减1 size--; //重新构建大根堆 updateHeap(nums, size); } } private void createTopHeap(int[] nums) { for (int i = 0; i < nums.length; i++) { //当前插入的索引 int currIndex = i; //父节点的索引 int parentIndex = (currIndex - 1) / 2; //如果当前遍历的值比父节点大的话，就交换值。然后继续往上层比较 while (nums[currIndex] > nums[parentIndex]) { //交换当前遍历的值与父节点的值 swap(nums, currIndex, parentIndex); //把父节点的索引指向当前遍历的索引 currIndex = parentIndex; //往上计算父节点索引 parentIndex = (currIndex - 1) / 2; } } } private void updateHeap(int[] nums, int size) { int index = 0; //左节点索引 int left = 2 * index + 1; //右节点索引 int right = 2 * index + 2; while (left < size) { //最大值的索引 int largestIndex; //如果右节点大于左节点，则最大值索引指向右子节点索引 if (right < size && nums[left] < nums[right]) { largestIndex = right; } else { largestIndex = left; } //如果父节点大于最大值，则把父节点索引指向最大值索引 if (nums[index] > nums[largestIndex]) { largestIndex = index; } //如果父节点索引指向最大值索引，证明已经是大根堆，退出循环 if (largestIndex == index) { break; } //如果不是大根堆，则交换父节点的值 swap(nums, largestIndex, index); //把最大值的索引变成父节点索引 index = largestIndex; //重新计算左节点索引 left = 2 * index + 1; //重新计算右节点索引 right = 2 * index + 2; } } private void swap(int[] nums, int i, int j) { int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; } \"]},\"284\":{\"h\":\"7、归并排序\",\"t\":[\"归并排序是采用分治法的典型应用，而且是一种稳定的排序方式，不过需要使用到额外的空间。 思路：\",\"把数组不断划分成子序列，划成长度只有2或者1的子序列。\",\"然后利用临时数组，对子序列进行排序，合并，再把临时数组的值复制回原数组。\",\"反复操作1~2步骤，直到排序完成。 归并排序的优点在于最好情况和最坏的情况的时间复杂度都是O(nlogn)，所以是比较稳定的排序方式。\",\" void sort(int[] nums) { if (nums == null || nums.length < 2) { return; } //归并排序 mergeSort(0, nums.length - 1, nums, new int[nums.length]); } private void mergeSort(int start, int end, int[] nums, int[] temp) { //递归终止条件 if (start >= end) { return; } int mid = start + (end - start) / 2; //左边进行归并排序 mergeSort(start, mid, nums, temp); //右边进行归并排序 mergeSort(mid + 1, end, nums, temp); //合并左右 merge(start, end, mid, nums, temp); } private void merge(int star, int end, int mid, int[] nums, int[] temp) { int index = 0; int i = star; int j = mid + 1; while (i <= mid && j <= end) { if (nums[i] > nums[j]) { temp[index++] = nums[j++]; } else { temp[index++] = nums[i++]; } } while (i <= mid) { temp[index++] = nums[i++]; } while (j <= end) { temp[index++] = nums[j++]; } //把临时数组中已排序的数复制到nums数组中 if (index >= 0) System.arraycopy(temp, 0, nums, star, index); } \"]},\"285\":{\"h\":\"8、堆排序\",\"t\":[\"思路：\",\"找出最大值，最小值。\",\"根据数组的长度，创建出若干个桶。\",\"遍历数组的元素，根据元素的值放入到对应的桶中。\",\"对每个桶的元素进行排序(可使用快排，插入排序等)。\",\"按顺序合并每个桶的元素，排序完成。 对于数组中的元素分布均匀的情况，排序效率较高。相反的，如果分布不均匀，则会导致大部分的数落入到同一个桶中，使效率降低。\",\" protected void sort(int[] nums) { if (nums == null || nums.length < 2) { return; } bucketSort(nums); } public void bucketSort(int[] nums) { if (nums == null || nums.length < 2) { return; } //找出最大值，最小值 int max = Integer.MIN_VALUE; int min = Integer.MAX_VALUE; for (int num : nums) { min = Math.min(min, num); max = Math.max(max, num); } int length = nums.length; //桶的数量 int bucketCount = (max - min) / length + 1; int[][] bucketArrays = new int[bucketCount][]; //遍历数组，放入桶内 for (int i = 0; i < length; i++) { //找到桶的下标 int index = (nums[i] - min) / length; //添加到指定下标的桶里，并且使用插入排序排序 bucketArrays[index] = insertSortArrays(bucketArrays[index], nums[i]); } int k = 0; //合并全部桶的 for (int[] bucketArray : bucketArrays) { if (bucketArray == null || bucketArray.length == 0) { continue; } for (int i : bucketArray) { //把值放回到nums数组中 nums[k++] = i; } } } //每个桶使用插入排序进行排序 private int[] insertSortArrays(int[] arr, int num) { if (arr == null || arr.length == 0) { return new int[]{num}; } //创建一个temp数组，长度是arr数组的长度+1 int[] temp = new int[arr.length + 1]; //把传进来的arr数组，复制到temp数组 for (int i = 0; i < arr.length; i++) { temp[i] = arr[i]; } //找到一个位置，插入，形成新的有序的数组 int i; for (i = temp.length - 2; i >= 0 && temp[i] > num; i--) { temp[i + 1] = temp[i]; } //插入需要添加的值 temp[i + 1] = num; //返回 return temp; } \"]},\"286\":{\"h\":\"9、计数排序\",\"t\":[\"描述\",\"找出待排序的数组中最大和最小的元素；\",\"统计数组中每个值为i的元素出现的次数，存入数组C的第i项；\",\"对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；\",\"反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。\",\"计数排序\"]},\"287\":{\"h\":\"10、基数排序\",\"t\":[\"基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。\",\"取得数组中的最大数，并取得位数；\",\"arr为原始数组，从最低位开始取每个位组成radix数组；\",\"对radix进行计数排序（利用计数排序适用于小范围数的特点）；\",\"基数排序\"]},\"288\":{\"c\":[\"算法\"]},\"289\":{\"c\":[\"算法\"]},\"290\":{\"h\":\"算法\"},\"291\":{\"c\":[\"算法\"]},\"292\":{\"h\":\"codetop\",\"t\":[\"https://github.com/afatcoder/LeetcodeTop\"]},\"293\":{\"c\":[\"算法\"]},\"294\":{\"c\":[\"算法\"]},\"295\":{\"h\":\"lru算法\",\"t\":[\"https://github.com/afatcoder/LeetcodeTop\"]},\"296\":{\"c\":[\"算法\"]},\"297\":{\"c\":[\"算法\"]},\"298\":{\"h\":\"剑指offer\",\"t\":[\"剑指 offer 大纲\",\"类型\",\"题目\",\"leetcode\",\"数组与矩阵\",\"3. 数组中重复的数字\",\"LCR 120. 寻找文件副本 - 力扣（LeetCode）\",\"4. 二维数组中的查找\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"5. 替换空格\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"41. 字符流中第一个不重复的字符\",\"387. 字符串中的第一个唯一字符 - 力扣（LeetCode）\",\"堆栈队列\",\"9. 用两个栈实现队列\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"30. 最小栈\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"31. 栈压入弹出\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"40. 最小 k 个数\",\"面试题 17.14. 最小 K 个数 - 力扣（LeetCode）\",\"41. 数据流中的中位数\",\"LCR 160. 数据流中的中位数 - 力扣（LeetCode）\",\"41. 字符流中第一个不重复的字符\",\"387. 字符串中的第一个唯一字符 - 力扣（LeetCode）\",\"59. 滑动窗口最大值\",\"239. 滑动窗口最大值 - 力扣（LeetCode）\",\"双指针\",\"57. 两数之和\",\"LCR 006. 两数之和 II - 输入有序数组 - 力扣（LeetCode）\",\"58. 字符串单词反转\",\"LCR 181. 字符串中的单词反转 - 力扣（LeetCode）\",\"链表\",\"6. 从尾到头打印链\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"18. 删除链表的节点\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"22. 链表中倒数第 K 个结点(快慢指针)\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"23. 链表中环的入口结点\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"24. 反转链表\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"25. 合并两个排序的链表\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"35. 复杂链表的复制\",\"LCR 154. 复杂链表的复制 - 力扣（LeetCode）\",\"52. 相交链表\",\"LCR 023. 相交链表 - 力扣（LeetCode）\",\"树\",\"7. 重建二叉树 \",\"LCR 124. 推理二叉树 - 力扣（LeetCode）\",\"8. 二叉树下一个节点\",\"26. 树的子结构\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"27. 反转二叉树\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"28. 对称二叉树\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"32. 从上往下打印二叉树\",\"LCR 151. 彩灯装饰记录 III - 力扣（LeetCode）\",\"33 二叉搜索树的后序遍历序列\",\"145. 二叉树的后序遍历 - 力扣（LeetCode）\",\"34. 二叉树中和为目标值的路径\",\"LCR 153. 二叉树中和为目标值的路径 - 力扣（LeetCode）\",\"36. 将二叉搜索树转化为排序的双向链表\",\"LCR 155. 将二叉搜索树转化为排序的双向链表 - 力扣（LeetCode）\",\"37. 序列化与反序列化二叉树\",\"LCR 156. 序列化与反序列化二叉树 - 力扣（LeetCode）\",\"54. 二叉查找树的第 K 个结点\",\"55. 二叉树深度\",\"104. 二叉树的最大深度 - 力扣（LeetCode）\",\"68. 树中两个节点的最低公共祖先\",\"235. 二叉搜索树的最近公共祖先 - 力扣（LeetCode）\",\"贪心思想\",\"14. 剪绳子\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"63. 股票最大利润\",\"121. 买卖股票的最佳时机 - 力扣（LeetCode）\",\"二分查找\",\"11. 旋转数组的最小数字\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"53. 数字在排序数组中出现的次数\",\"LCR 172. 统计目标成绩的出现次数 - 力扣（LeetCode）\",\"分治\",\"16. 数值的整数次方\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"搜索\",\"12. 矩阵中路径\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"13. 机器人的运动范围\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"38. 没有重复元素集合的全排列\",\"LCR 083. 全排列 - 力扣（LeetCode）\",\"38. 有重复数字的全排列。\",\"LCR 084. 全排列 II - 力扣（LeetCode）\",\"排序\",\"21. 调整数组顺序使奇数位于偶数前面\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"45. 把数组排成最小的数\",\"暂无\",\"51. 数组中的逆序对\",\"LCR 170. 交易逆序对的总数 - 力扣（LeetCode）\",\"动态规划动态规划本质是数学公式的推导展开\",\"10. 跳台阶\",\"LCR 127. 跳跃训练 - 力扣（LeetCode）\",\"42. 连续子数组的最大和\",\"53. 最大子数组和 - 力扣（LeetCode）\",\"47. 礼物的最大价值48. 最长不含重复字符的子字符串\",\"LCR 166. 珠宝的最高价值 - 力扣（LeetCode）LCR 016. 无重复字符的最长子串 - 力扣（LeetCode）\",\"49. 丑数\",\"263. 丑数 - 力扣（LeetCode）\",\"60. n 个骰子的点数\",\"66. 构建乘积数组\",\"数学\",\"39. 有序数组中出现次数超过 25% 的元素\",\"1287. 有序数组中出现次数超过 25% 的元素 - 力扣（LeetCode）\",\"43. 从 1 到 n 整数中 1 出现的次数\",\"233. 数字 1 的个数 - 力扣（LeetCode）\",\"62. 圆圈中最后剩下的数\",\"位运算\",\"15. 二进制中 1 的个数\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"56. 数组中只出现一次的数\",\"260. 只出现一次的数字 III - 力扣（LeetCode）\",\"其它\",\"17. 打印 1 到 n\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"19. 正则表达式匹配\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"20. 表示数值的字符串\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"29. 顺时针打印矩阵\",\"力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台\",\"44. 找到第 k 位数字\",\"LCR 163. 找到第 k 位数字 - 力扣（LeetCode）\",\"46. 把数字翻译成字符串\",\"61. 扑克牌的顺子\",\"64. 求 1+2+3+...+n\",\"65. 不用加减乘除做加法\",\"面试题 17.01. 不用加号的加法 - 力扣（LeetCode）\",\"67. 把字符串转换成整数\",\"8. 字符串转换整数 (atoi) - 力扣（LeetCode）\"]},\"299\":{\"h\":\"参考\",\"t\":[\"https://github.com/CyC2018/CS-Notes\"]},\"300\":{\"c\":[\"算法\"]},\"301\":{\"c\":[\"算法\"]},\"302\":{\"h\":\"热题大纲\"},\"303\":{\"c\":[\"算法\"]},\"304\":{\"c\":[\"算法\"]},\"305\":{\"h\":\"CMTC笔记总结-大前端\",\"t\":[\"####技术架构 业务组件配置化：1小时快速构建拥有基础能力的应用 基础模块化：groovy脚本，丰富基础库，统一接入，加速开发，定制化支持，构建高质量、健壮的APP 业务配置化：依赖倒置原则 组件+模板 通信路由：统一协议，调度中心，资源复用 serviceLoader\",\"serverless 前端研发模式升级 1、更多参与到业务交付中 2、跨技术栈提升研发效能 同时，不希望引入太多额外成本 前后端分离、康威定律、微服务、DevOps、应用治理、容器化、故障演练 BFF 业务开发的本质是交付服务和功能\",\"2、why serverless 通过引入serverless,让轻量化的业务服务端研发成为可能，降低前端参与业务交付的门槛，同时也让从云端一体的视角重新审视研发效率，性能优化成为可能\",\"业务开发变轻、变薄、聚焦业务逻辑 Faas + BaaS Focus on the goal 只关心自己业务交付\",\"快速建场\",\"架构\",\"大前端架构演进 组件化、动态化、中台化、工厂化\",\"架构：代码质量、快速迭代、多端公用、代码复用 快速上线、代码复用、可插拔\",\"H5优化\",\"框架图\",\"reactnative weex\",\"中台化核心做两件事：上云+公共服务\",\"image.png\",\"image.png\",\"image.png\",\"opengl\",\"h5视频化\",\"image.png\",\"工厂化： 底层服务：包含所有音视频服务 应用工具：服务自动化、脚手架、打包工具 服务多端：一套代码服务多端 应用框架：组件化、动态化、中台化 UI:UI组件、模板 前后端联通：前后端bridge联通\",\"跨平台多端赋能，新场景、新上课方式\",\"####超大型工程矩阵 项目组件化 规范通用库维护流程 自动化构建流程 基础功能自动化\",\"通用组件管理 二进制化：所有组件提供二进制化功能，可以提高编译速度，避免源文件暴露问题 组件升级：统一三位版版本号管理规则，避免版本升级混乱 组件订阅：通过关注组件，即时了解组件升级动态 静态分析：自定义规则分析组件质量 issue管理：用户通过平台入口，向关心组件提issue 历史维护：维护组件的历史升级版本，方便回溯与追查问题\",\"image.png\",\"native工具支撑 开发信息数据收集 文档管理\",\"自动化构建 \",\"效率以及稳定性提升\"]},\"306\":{\"c\":[\"架构相关\"]},\"307\":{\"c\":[\"archive\"]},\"308\":{\"h\":\"架构\"},\"309\":{\"c\":[\"使用指南\"]},\"310\":{\"h\":\"软件架构\",\"t\":[\"软件架构（software architecture）就是软件的基本结构。 O'Reilly 出版过一本免费的小册子《Software Architecture Patterns》（PDF）， 介绍了五种最常见的软件架构，是非常好的入门读物。我读后受益匪浅，下面就是我的笔记。 \"]},\"311\":{\"h\":\"一、分层架构\",\"t\":[\"分层架构（layered architecture）是最常见的软件架构，也是事实上的标准架构。如果你不知道要用什么架构，那就用它。\",\"这种架构将软件分成若干个水平层，每一层都有清晰的角色和分工，不需要知道其他层的细节。层与层之间通过接口通信。\",\"虽然没有明确约定，软件一定要分成多少层，但是四层的结构最常见。 \",\"表现层（presentation）：用户界面，负责视觉和用户互动\",\"业务层（business）：实现业务逻辑\",\"持久层（persistence）：提供数据，SQL 语句就放在这一层\",\"数据库（database） ：保存数据\",\"有的软件在逻辑层和持久层之间，加了一个服务层（service），提供不同业务逻辑需要的一些通用接口。\",\"用户的请求将依次通过这四层的处理，不能跳过其中任何一层。 优点\",\"结构简单，容易理解和开发\",\"不同技能的程序员可以分工，负责不同的层，天然适合大多数软件公司的组织架构\",\"每一层都可以独立测试，其他层的接口通过模拟解决\",\"缺点\",\"一旦环境变化，需要代码调整或增加功能时，通常比较麻烦和费时\",\"部署比较麻烦，即使只修改一个小地方，往往需要整个软件重新部署，不容易做持续发布\",\"软件升级时，可能需要整个服务暂停\",\"扩展性差。用户请求大量增加时，必须依次扩展每一层，由于每一层内部是耦合的，扩展会很困难\"]},\"312\":{\"h\":\"二、事件驱动架构\",\"t\":[\"事件（event）是状态发生变化时，软件发出的通知。\",\"事件驱动架构（event-driven architecture）就是通过事件进行通信的软件架构。它分成四个部分。 对于简单的项目，事件队列、分发器和事件通道，可以合为一体，整个软件就分成事件代理和事件处理器两部分。 优点\",\"分布式的异步架构，事件处理器之间高度解耦，软件的扩展性好\",\"适用性广，各种类型的项目都可以用\",\"性能较好，因为事件的异步本质，软件不易产生堵塞\",\"事件处理器可以独立地加载和卸载，容易部署\",\"缺点\",\"涉及异步编程（要考虑远程通信、失去响应等情况），开发相对复杂\",\"难以支持原子性操作，因为事件通过会涉及多个处理器，很难回滚\",\"分布式和异步特性导致这个架构较难测试\"]},\"313\":{\"h\":\"三、微核架构\",\"t\":[\"微核架构（microkernel architecture）又称为\\\"插件架构\\\"（plug-in architecture），指的是软件的内核相对较小，主要功能和业务逻辑都通过插件实现。\",\"内核（core）通常只包含系统运行的最小功能。插件则是互相独立的，插件之间的通信，应该减少到最低，避免出现互相依赖的问题。 优点\",\"良好的功能延伸性（extensibility），需要什么功能，开发一个插件即可\",\"功能之间是隔离的，插件可以独立的加载和卸载，使得它比较容易部署，\",\"可定制性高，适应不同的开发需要\",\"可以渐进式地开发，逐步增加功能\",\"缺点\",\"扩展性（scalability）差，内核通常是一个独立单元，不容易做成分布式\",\"开发难度相对较高，因为涉及到插件与内核的通信，以及内部的插件登记机制\"]},\"314\":{\"h\":\"四、微服务架构\",\"t\":[\"微服务架构（microservices architecture）是服务导向架构（service-oriented architecture，缩写 SOA）的升级。\",\"每一个服务就是一个独立的部署单元（separately deployed unit）。这些单元都是分布式的，互相解耦，通过远程通信协议（比如REST、SOAP）联系。 微服务架构分成三种实现模式。\",\"RESTful API 模式：服务通过 API 提供，云服务就属于这一类\",\"RESTful 应用模式：服务通过传统的网络协议或者应用协议提供，背后通常是一个多功能的应用程序，常见于企业内部\",\"集中消息模式：采用消息代理（message broker），可以实现消息队列、负载均衡、统一日志和异常处理，缺点是会出现单点失败，消息代理可能要做成集群\",\"优点\",\"扩展性好，各个服务之间低耦合\",\"容易部署，软件从单一可部署单元，被拆成了多个服务，每个服务都是可部署单元\",\"容易开发，每个组件都可以进行持续集成式的开发，可以做到实时部署，不间断地升级\",\"易于测试，可以单独测试每一个服务\",\"缺点\",\"由于强调互相独立和低耦合，服务可能会拆分得很细。这导致系统依赖大量的微服务，变得很凌乱和笨重，性能也会不佳。\",\"一旦服务之间需要通信（即一个服务要用到另一个服务），整个架构就会变得复杂。典型的例子就是一些通用的 Utility 类，一种解决方案是把它们拷贝到每一个服务中去，用冗余换取架构的简单性。\",\"分布式的本质使得这种架构很难实现原子性操作，交易回滚会比较困难。\",\"五、云架构 云结构（cloud architecture）主要解决扩展性和并发的问题，是最容易扩展的架构。\",\"它的高扩展性，主要原因是没使用中央数据库，而是把数据都复制到内存中，变成可复制的内存数据单元。然后，业务处理能力封装成一个个处理单元（prcessing unit）。访问量增加，就新建处理单元；访问量减少，就关闭处理单元。由于没有中央数据库，所以扩展性的最大瓶颈消失了。由于每个处理单元的数据都在内存里，最好要进行数据持久化。\",\"这个模式主要分成两部分：处理单元（processing unit）和虚拟中间件（virtualized middleware）。\",\"处理单元：实现业务逻辑\",\"虚拟中间件：负责通信、保持sessions、数据复制、分布式处理、处理单元的部署。 虚拟中间件又包含四个组件。\",\"消息中间件（Messaging Grid）：管理用户请求和session，当一个请求进来以后，决定分配给哪一个处理单元。\",\"数据中间件（Data Grid）：将数据复制到每一个处理单元，即数据同步。保证某个处理单元都得到同样的数据。\",\"处理中间件（Processing Grid）：可选，如果一个请求涉及不同类型的处理单元，该中间件负责协调处理单元\",\"部署中间件（Deployment Manager）：负责处理单元的启动和关闭，监控负载和响应时间，当负载增加，就新启动处理单元，负载减少，就关闭处理单元。\",\"优点\",\"高负载，高扩展性\",\"动态部署\",\"缺点\",\"实现复杂，成本较高\",\"主要适合网站类应用，不合适大量数据吞吐的大型数据库应用\",\"较难测试\",\"转自阮一峰\\nhttp://www.ruanyifeng.com/blog/2016/09/software-architecture.html\"]},\"315\":{\"c\":[\"架构相关\"]},\"316\":{\"c\":[\"archive\"]},\"317\":{\"h\":\"java基础\"},\"318\":{\"c\":[\"java\"]},\"319\":{\"h\":\"java容器\",\"t\":[\"Java 容器\",\"一、概览\",\"Collection\",\"Map\",\"二、容器中的设计模式\",\"迭代器模式\",\"适配器模式\",\"三、源码分析\",\"ArrayList\",\"Vector\",\"CopyOnWriteArrayList\",\"LinkedList\",\"HashMap\",\"ConcurrentHashMap\",\"LinkedHashMap\",\"WeakHashMap\",\"参考资料\"]},\"320\":{\"h\":\"一、概览\",\"t\":[\"容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表。\"]},\"321\":{\"h\":\"Collection\"},\"322\":{\"h\":\"1. Set\",\"t\":[\"TreeSet：基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。\",\"HashSet：基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。\",\"LinkedHashSet：具有 HashSet 的查找效率，并且内部使用双向链表维护元素的插入顺序。\"]},\"323\":{\"h\":\"2. List\",\"t\":[\"ArrayList：基于动态数组实现，支持随机访问。\",\"Vector：和 ArrayList 类似，但它是线程安全的。\",\"LinkedList：基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。\"]},\"324\":{\"h\":\"3. Queue\",\"t\":[\"LinkedList：可以用它来实现双向队列。\",\"PriorityQueue：基于堆结构实现，可以用它来实现优先队列。\"]},\"325\":{\"h\":\"Map\",\"t\":[\"TreeMap：基于红黑树实现。\",\"HashMap：基于哈希表实现。\",\"HashTable：和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程同时写入 HashTable 不会导致数据不一致。它是遗留类，不应该去使用它，而是使用 ConcurrentHashMap 来支持线程安全，ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。\",\"LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序。\"]},\"326\":{\"h\":\"二、容器中的设计模式\"},\"327\":{\"h\":\"迭代器模式\",\"t\":[\"Collection 继承了 Iterable 接口，其中的 iterator() 方法能够产生一个 Iterator 对象，通过这个对象就可以迭代遍历 Collection 中的元素。\",\"从 JDK 1.5 之后可以使用 foreach 方法来遍历实现了 Iterable 接口的聚合对象。\",\"List<String> list = new ArrayList<>(); list.add(\\\"a\\\"); list.add(\\\"b\\\"); for (String item : list) { System.out.println(item); } \"]},\"328\":{\"h\":\"适配器模式\",\"t\":[\"java.util.Arrays#asList() 可以把数组类型转换为 List 类型。\",\"@SafeVarargs public static <T> List<T> asList(T... a) \",\"应该注意的是 asList() 的参数为泛型的变长参数，不能使用基本类型数组作为参数，只能使用相应的包装类型数组。\",\"Integer[] arr = {1, 2, 3}; List list = Arrays.asList(arr); \",\"也可以使用以下方式调用 asList()：\",\"List list = Arrays.asList(1, 2, 3); \"]},\"329\":{\"h\":\"三、源码分析\",\"t\":[\"如果没有特别说明，以下源码分析基于 JDK 1.8。\",\"在 IDEA 中 double shift 调出 Search EveryWhere，查找源码文件，找到之后就可以阅读源码。\"]},\"330\":{\"h\":\"ArrayList\"},\"331\":{\"h\":\"1. 概览\",\"t\":[\"因为 ArrayList 是基于数组实现的，所以支持快速随机访问。RandomAccess 接口标识着该类支持快速随机访问。\",\"public class ArrayList<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, java.io.Serializable \",\"数组的默认大小为 10。\",\"private static final int DEFAULT_CAPACITY = 10; \"]},\"332\":{\"h\":\"2. 扩容\",\"t\":[\"添加元素时使用 ensureCapacityInternal() 方法来保证容量足够，如果不够时，需要使用 grow() 方法进行扩容，新容量的大小为 oldCapacity + (oldCapacity >> 1)，即 oldCapacity+oldCapacity/2。其中 oldCapacity >> 1 需要取整，所以新容量大约是旧容量的 1.5 倍左右。（oldCapacity 为偶数就是 1.5 倍，为奇数就是 1.5 倍-0.5）\",\"扩容操作需要调用 Arrays.copyOf() 把原数组整个复制到新数组中，这个操作代价很高，因此最好在创建 ArrayList 对象时就指定大概的容量大小，减少扩容操作的次数。\",\"public boolean add(E e) { ensureCapacityInternal(size + 1); // Increments modCount!! elementData[size++] = e; return true; } private void ensureCapacityInternal(int minCapacity) { if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity); } ensureExplicitCapacity(minCapacity); } private void ensureExplicitCapacity(int minCapacity) { modCount++; // overflow-conscious code if (minCapacity - elementData.length > 0) grow(minCapacity); } private void grow(int minCapacity) { // overflow-conscious code int oldCapacity = elementData.length; int newCapacity = oldCapacity + (oldCapacity >> 1); if (newCapacity - minCapacity < 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE > 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity); } \"]},\"333\":{\"h\":\"3. 删除元素\",\"t\":[\"需要调用 System.arraycopy() 将 index+1 后面的元素都复制到 index 位置上，该操作的时间复杂度为 O(N)，可以看到 ArrayList 删除元素的代价是非常高的。\",\"public E remove(int index) { rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved > 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // clear to let GC do its work return oldValue; } \"]},\"334\":{\"h\":\"4. 序列化\",\"t\":[\"ArrayList 基于数组实现，并且具有动态扩容特性，因此保存元素的数组不一定都会被使用，那么就没必要全部进行序列化。\",\"保存元素的数组 elementData 使用 transient 修饰，该关键字声明数组默认不会被序列化。\",\"transient Object[] elementData; // non-private to simplify nested class access \",\"ArrayList 实现了 writeObject() 和 readObject() 来控制只序列化数组中有元素填充那部分内容。\",\"private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException { elementData = EMPTY_ELEMENTDATA; // Read in size, and any hidden stuff s.defaultReadObject(); // Read in capacity s.readInt(); // ignored if (size > 0) { // be like clone(), allocate array based upon size not capacity ensureCapacityInternal(size); Object[] a = elementData; // Read in all elements in the proper order. for (int i=0; i<size; i++) { a[i] = s.readObject(); } } } \",\"private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException{ // Write out element count, and any hidden stuff int expectedModCount = modCount; s.defaultWriteObject(); // Write out size as capacity for behavioural compatibility with clone() s.writeInt(size); // Write out all elements in the proper order. for (int i=0; i<size; i++) { s.writeObject(elementData[i]); } if (modCount != expectedModCount) { throw new ConcurrentModificationException(); } } \",\"序列化时需要使用 ObjectOutputStream 的 writeObject() 将对象转换为字节流并输出。而 writeObject() 方法在传入的对象存在 writeObject() 的时候会去反射调用该对象的 writeObject() 来实现序列化。反序列化使用的是 ObjectInputStream 的 readObject() 方法，原理类似。\",\"ArrayList list = new ArrayList(); ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file)); oos.writeObject(list); \"]},\"335\":{\"h\":\"5. Fail-Fast\",\"t\":[\"modCount 用来记录 ArrayList 结构发生变化的次数。结构发生变化是指添加或者删除至少一个元素的所有操作，或者是调整内部数组的大小，仅仅只是设置元素的值不算结构发生变化。\",\"在进行序列化或者迭代等操作时，需要比较操作前后 modCount 是否改变，如果改变了需要抛出 ConcurrentModificationException。代码参考上节序列化中的 writeObject() 方法。\"]},\"336\":{\"h\":\"Vector\"},\"337\":{\"h\":\"1. 同步\",\"t\":[\"它的实现与 ArrayList 类似，但是使用了 synchronized 进行同步。\",\"public synchronized boolean add(E e) { modCount++; ensureCapacityHelper(elementCount + 1); elementData[elementCount++] = e; return true; } public synchronized E get(int index) { if (index >= elementCount) throw new ArrayIndexOutOfBoundsException(index); return elementData(index); } \"]},\"338\":{\"h\":\"2. 扩容\",\"t\":[\"Vector 的构造函数可以传入 capacityIncrement 参数，它的作用是在扩容时使容量 capacity 增长 capacityIncrement。如果这个参数的值小于等于 0，扩容时每次都令 capacity 为原来的两倍。\",\"public Vector(int initialCapacity, int capacityIncrement) { super(); if (initialCapacity < 0) throw new IllegalArgumentException(\\\"Illegal Capacity: \\\"+ initialCapacity); this.elementData = new Object[initialCapacity]; this.capacityIncrement = capacityIncrement; } \",\"private void grow(int minCapacity) { // overflow-conscious code int oldCapacity = elementData.length; int newCapacity = oldCapacity + ((capacityIncrement > 0) ? capacityIncrement : oldCapacity); if (newCapacity - minCapacity < 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE > 0) newCapacity = hugeCapacity(minCapacity); elementData = Arrays.copyOf(elementData, newCapacity); } \",\"调用没有 capacityIncrement 的构造函数时，capacityIncrement 值被设置为 0，也就是说默认情况下 Vector 每次扩容时容量都会翻倍。\",\"public Vector(int initialCapacity) { this(initialCapacity, 0); } public Vector() { this(10); } \"]},\"339\":{\"h\":\"3. 与 ArrayList 的比较\",\"t\":[\"Vector 是同步的，因此开销就比 ArrayList 要大，访问速度更慢。最好使用 ArrayList 而不是 Vector，因为同步操作完全可以由程序员自己来控制；\",\"Vector 每次扩容请求其大小的 2 倍（也可以通过构造函数设置增长的容量），而 ArrayList 是 1.5 倍。\"]},\"340\":{\"h\":\"4. 替代方案\",\"t\":[\"可以使用 Collections.synchronizedList(); 得到一个线程安全的 ArrayList。\",\"List<String> list = new ArrayList<>(); List<String> synList = Collections.synchronizedList(list); \",\"也可以使用 concurrent 并发包下的 CopyOnWriteArrayList 类。\",\"List<String> list = new CopyOnWriteArrayList<>(); \"]},\"341\":{\"h\":\"CopyOnWriteArrayList\"},\"342\":{\"h\":\"1. 读写分离\",\"t\":[\"写操作在一个复制的数组上进行，读操作还是在原始数组中进行，读写分离，互不影响。\",\"写操作需要加锁，防止并发写入时导致写入数据丢失。\",\"写操作结束之后需要把原始数组指向新的复制数组。\",\"public boolean add(E e) { final ReentrantLock lock = this.lock; lock.lock(); try { Object[] elements = getArray(); int len = elements.length; Object[] newElements = Arrays.copyOf(elements, len + 1); newElements[len] = e; setArray(newElements); return true; } finally { lock.unlock(); } } final void setArray(Object[] a) { array = a; } \",\"@SuppressWarnings(\\\"unchecked\\\") private E get(Object[] a, int index) { return (E) a[index]; } \"]},\"343\":{\"h\":\"2. 适用场景\",\"t\":[\"CopyOnWriteArrayList 在写操作的同时允许读操作，大大提高了读操作的性能，因此很适合读多写少的应用场景。\",\"但是 CopyOnWriteArrayList 有其缺陷：\",\"内存占用：在写操作时需要复制一个新的数组，使得内存占用为原来的两倍左右；\",\"数据不一致：读操作不能读取实时性的数据，因为部分写操作的数据还未同步到读数组中。\",\"所以 CopyOnWriteArrayList 不适合内存敏感以及对实时性要求很高的场景。\"]},\"344\":{\"h\":\"LinkedList\"},\"345\":{\"h\":\"1. 概览\",\"t\":[\"基于双向链表实现，使用 Node 存储链表节点信息。\",\"private static class Node<E> { E item; Node<E> next; Node<E> prev; } \",\"每个链表存储了 first 和 last 指针：\",\"transient Node<E> first; transient Node<E> last; \"]},\"346\":{\"h\":\"2. 与 ArrayList 的比较\",\"t\":[\"ArrayList 基于动态数组实现，LinkedList 基于双向链表实现。ArrayList 和 LinkedList 的区别可以归结为数组和链表的区别：\",\"数组支持随机访问，但插入删除的代价很高，需要移动大量元素；\",\"链表不支持随机访问，但插入删除只需要改变指针。\"]},\"347\":{\"h\":\"HashMap\",\"t\":[\"为了便于理解，以下源码分析以 JDK 1.7 为主。\"]},\"348\":{\"h\":\"1. 存储结构\",\"t\":[\"内部包含了一个 Entry 类型的数组 table。Entry 存储着键值对。它包含了四个字段，从 next 字段我们可以看出 Entry 是一个链表。即数组中的每个位置被当成一个桶，一个桶存放一个链表。HashMap 使用拉链法来解决冲突，同一个链表中存放哈希值和散列桶取模运算结果相同的 Entry。\",\"transient Entry[] table; \",\"static class Entry<K,V> implements Map.Entry<K,V> { final K key; V value; Entry<K,V> next; int hash; Entry(int h, K k, V v, Entry<K,V> n) { value = v; next = n; key = k; hash = h; } public final K getKey() { return key; } public final V getValue() { return value; } public final V setValue(V newValue) { V oldValue = value; value = newValue; return oldValue; } public final boolean equals(Object o) { if (!(o instanceof Map.Entry)) return false; Map.Entry e = (Map.Entry)o; Object k1 = getKey(); Object k2 = e.getKey(); if (k1 == k2 || (k1 != null && k1.equals(k2))) { Object v1 = getValue(); Object v2 = e.getValue(); if (v1 == v2 || (v1 != null && v1.equals(v2))) return true; } return false; } public final int hashCode() { return Objects.hashCode(getKey()) ^ Objects.hashCode(getValue()); } public final String toString() { return getKey() + \\\"=\\\" + getValue(); } } \"]},\"349\":{\"h\":\"2. 拉链法的工作原理\",\"t\":[\"HashMap<String, String> map = new HashMap<>(); map.put(\\\"K1\\\", \\\"V1\\\"); map.put(\\\"K2\\\", \\\"V2\\\"); map.put(\\\"K3\\\", \\\"V3\\\"); \",\"新建一个 HashMap，默认大小为 16；\",\"插入 <K1,V1> 键值对，先计算 K1 的 hashCode 为 115，使用除留余数法得到所在的桶下标 115%16=3。\",\"插入 <K2,V2> 键值对，先计算 K2 的 hashCode 为 118，使用除留余数法得到所在的桶下标 118%16=6。\",\"插入 <K3,V3> 键值对，先计算 K3 的 hashCode 为 118，使用除留余数法得到所在的桶下标 118%16=6，插在 <K2,V2> 前面。\",\"应该注意到链表的插入是以头插法方式进行的，例如上面的 <K3,V3> 不是插在 <K2,V2> 后面，而是插入在链表头部。\",\"查找需要分成两步进行：\",\"计算键值对所在的桶；\",\"在链表上顺序查找，时间复杂度显然和链表的长度成正比。\"]},\"350\":{\"h\":\"3. put 操作\",\"t\":[\"public V put(K key, V value) { if (table == EMPTY_TABLE) { inflateTable(threshold); } // 键为 null 单独处理 if (key == null) return putForNullKey(value); int hash = hash(key); // 确定桶下标 int i = indexFor(hash, table.length); // 先找出是否已经存在键为 key 的键值对，如果存在的话就更新这个键值对的值为 value for (Entry<K,V> e = table[i]; e != null; e = e.next) { Object k; if (e.hash == hash && ((k = e.key) == key || key.equals(k))) { V oldValue = e.value; e.value = value; e.recordAccess(this); return oldValue; } } modCount++; // 插入新键值对 addEntry(hash, key, value, i); return null; } \",\"HashMap 允许插入键为 null 的键值对。但是因为无法调用 null 的 hashCode() 方法，也就无法确定该键值对的桶下标，只能通过强制指定一个桶下标来存放。HashMap 使用第 0 个桶存放键为 null 的键值对。\",\"private V putForNullKey(V value) { for (Entry<K,V> e = table[0]; e != null; e = e.next) { if (e.key == null) { V oldValue = e.value; e.value = value; e.recordAccess(this); return oldValue; } } modCount++; addEntry(0, null, value, 0); return null; } \",\"使用链表的头插法，也就是新的键值对插在链表的头部，而不是链表的尾部。\",\"void addEntry(int hash, K key, V value, int bucketIndex) { if ((size >= threshold) && (null != table[bucketIndex])) { resize(2 * table.length); hash = (null != key) ? hash(key) : 0; bucketIndex = indexFor(hash, table.length); } createEntry(hash, key, value, bucketIndex); } void createEntry(int hash, K key, V value, int bucketIndex) { Entry<K,V> e = table[bucketIndex]; // 头插法，链表头部指向新的键值对 table[bucketIndex] = new Entry<>(hash, key, value, e); size++; } \",\"Entry(int h, K k, V v, Entry<K,V> n) { value = v; next = n; key = k; hash = h; } \"]},\"351\":{\"h\":\"4. 确定桶下标\",\"t\":[\"很多操作都需要先确定一个键值对所在的桶下标。\",\"int hash = hash(key); int i = indexFor(hash, table.length); \",\"4.1 计算 hash 值\",\"final int hash(Object k) { int h = hashSeed; if (0 != h && k instanceof String) { return sun.misc.Hashing.stringHash32((String) k); } h ^= k.hashCode(); // This function ensures that hashCodes that differ only by // constant multiples at each bit position have a bounded // number of collisions (approximately 8 at default load factor). h ^= (h >>> 20) ^ (h >>> 12); return h ^ (h >>> 7) ^ (h >>> 4); } \",\"public final int hashCode() { return Objects.hashCode(key) ^ Objects.hashCode(value); } \",\"4.2 取模\",\"令 x = 1<<4，即 x 为 2 的 4 次方，它具有以下性质：\",\"x : 00010000 x-1 : 00001111 \",\"令一个数 y 与 x-1 做与运算，可以去除 y 位级表示的第 4 位以上数：\",\"y : 10110010 x-1 : 00001111 y&(x-1) : 00000010 \",\"这个性质和 y 对 x 取模效果是一样的：\",\"y : 10110010 x : 00010000 y%x : 00000010 \",\"我们知道，位运算的代价比求模运算小的多，因此在进行这种计算时用位运算的话能带来更高的性能。\",\"确定桶下标的最后一步是将 key 的 hash 值对桶个数取模：hash%capacity，如果能保证 capacity 为 2 的 n 次方，那么就可以将这个操作转换为位运算。\",\"static int indexFor(int h, int length) { return h & (length-1); } \"]},\"352\":{\"h\":\"5. 扩容-基本原理\",\"t\":[\"设 HashMap 的 table 长度为 M，需要存储的键值对数量为 N，如果哈希函数满足均匀性的要求，那么每条链表的长度大约为 N/M，因此查找的复杂度为 O(N/M)。\",\"为了让查找的成本降低，应该使 N/M 尽可能小，因此需要保证 M 尽可能大，也就是说 table 要尽可能大。HashMap 采用动态扩容来根据当前的 N 值来调整 M 值，使得空间效率和时间效率都能得到保证。\",\"和扩容相关的参数主要有：capacity、size、threshold 和 load_factor。\",\"参数\",\"含义\",\"capacity\",\"table 的容量大小，默认为 16。需要注意的是 capacity 必须保证为 2 的 n 次方。\",\"size\",\"键值对数量。\",\"threshold\",\"size 的临界值，当 size 大于等于 threshold 就必须进行扩容操作。\",\"loadFactor\",\"装载因子，table 能够使用的比例，threshold = (int)(capacity* loadFactor)。\",\"static final int DEFAULT_INITIAL_CAPACITY = 16; static final int MAXIMUM_CAPACITY = 1 << 30; static final float DEFAULT_LOAD_FACTOR = 0.75f; transient Entry[] table; transient int size; int threshold; final float loadFactor; transient int modCount; \",\"从下面的添加元素代码中可以看出，当需要扩容时，令 capacity 为原来的两倍。\",\"void addEntry(int hash, K key, V value, int bucketIndex) { Entry<K,V> e = table[bucketIndex]; table[bucketIndex] = new Entry<>(hash, key, value, e); if (size++ >= threshold) resize(2 * table.length); } \",\"扩容使用 resize() 实现，需要注意的是，扩容操作同样需要把 oldTable 的所有键值对重新插入 newTable 中，因此这一步是很费时的。\",\"void resize(int newCapacity) { Entry[] oldTable = table; int oldCapacity = oldTable.length; if (oldCapacity == MAXIMUM_CAPACITY) { threshold = Integer.MAX_VALUE; return; } Entry[] newTable = new Entry[newCapacity]; transfer(newTable); table = newTable; threshold = (int)(newCapacity * loadFactor); } void transfer(Entry[] newTable) { Entry[] src = table; int newCapacity = newTable.length; for (int j = 0; j < src.length; j++) { Entry<K,V> e = src[j]; if (e != null) { src[j] = null; do { Entry<K,V> next = e.next; int i = indexFor(e.hash, newCapacity); e.next = newTable[i]; newTable[i] = e; e = next; } while (e != null); } } } \"]},\"353\":{\"h\":\"6. 扩容-重新计算桶下标\",\"t\":[\"在进行扩容时，需要把键值对重新计算桶下标，从而放到对应的桶上。在前面提到，HashMap 使用 hash%capacity 来确定桶下标。HashMap capacity 为 2 的 n 次方这一特点能够极大降低重新计算桶下标操作的复杂度。\",\"假设原数组长度 capacity 为 16，扩容之后 new capacity 为 32：\",\"capacity : 00010000 new capacity : 00100000 \",\"对于一个 Key，它的哈希值 hash 在第 5 位：\",\"为 0，那么 hash%00010000 = hash%00100000，桶位置和原来一致；\",\"为 1，hash%00010000 = hash%00100000 + 16，桶位置是原位置 + 16。\"]},\"354\":{\"h\":\"7. 计算数组容量\",\"t\":[\"HashMap 构造函数允许用户传入的容量不是 2 的 n 次方，因为它可以自动地将传入的容量转换为 2 的 n 次方。\",\"先考虑如何求一个数的掩码，对于 10010000，它的掩码为 11111111，可以使用以下方法得到：\",\"mask |= mask >> 1 11011000 mask |= mask >> 2 11111110 mask |= mask >> 4 11111111 \",\"mask+1 是大于原始数字的最小的 2 的 n 次方。\",\"num 10010000 mask+1 100000000 \",\"以下是 HashMap 中计算数组容量的代码：\",\"static final int tableSizeFor(int cap) { int n = cap - 1; n |= n >>> 1; n |= n >>> 2; n |= n >>> 4; n |= n >>> 8; n |= n >>> 16; return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1; } \"]},\"355\":{\"h\":\"8. 链表转红黑树\",\"t\":[\"从 JDK 1.8 开始，一个桶存储的链表长度大于等于 8 时会将链表转换为红黑树。\"]},\"356\":{\"h\":\"9. 与 Hashtable 的比较\",\"t\":[\"Hashtable 使用 synchronized 来进行同步。\",\"HashMap 可以插入键为 null 的 Entry。\",\"HashMap 的迭代器是 fail-fast 迭代器。\",\"HashMap 不能保证随着时间的推移 Map 中的元素次序是不变的。\"]},\"357\":{\"h\":\"ConcurrentHashMap\"},\"358\":{\"h\":\"1. 存储结构\",\"t\":[\"static final class HashEntry<K,V> { final int hash; final K key; volatile V value; volatile HashEntry<K,V> next; } \",\"ConcurrentHashMap 和 HashMap 实现上类似，最主要的差别是 ConcurrentHashMap 采用了分段锁（Segment），每个分段锁维护着几个桶（HashEntry），多个线程可以同时访问不同分段锁上的桶，从而使其并发度更高（并发度就是 Segment 的个数）。\",\"Segment 继承自 ReentrantLock。\",\"static final class Segment<K,V> extends ReentrantLock implements Serializable { private static final long serialVersionUID = 2249069246763182397L; static final int MAX_SCAN_RETRIES = Runtime.getRuntime().availableProcessors() > 1 ? 64 : 1; transient volatile HashEntry<K,V>[] table; transient int count; transient int modCount; transient int threshold; final float loadFactor; } \",\"final Segment<K,V>[] segments; \",\"默认的并发级别为 16，也就是说默认创建 16 个 Segment。\",\"static final int DEFAULT_CONCURRENCY_LEVEL = 16; \"]},\"359\":{\"h\":\"2. size 操作\",\"t\":[\"每个 Segment 维护了一个 count 变量来统计该 Segment 中的键值对个数。\",\"/** * The number of elements. Accessed only either within locks * or among other volatile reads that maintain visibility. */ transient int count; \",\"在执行 size 操作时，需要遍历所有 Segment 然后把 count 累计起来。\",\"ConcurrentHashMap 在执行 size 操作时先尝试不加锁，如果连续两次不加锁操作得到的结果一致，那么可以认为这个结果是正确的。\",\"尝试次数使用 RETRIES_BEFORE_LOCK 定义，该值为 2，retries 初始值为 -1，因此尝试次数为 3。\",\"如果尝试的次数超过 3 次，就需要对每个 Segment 加锁。\",\" /** * Number of unsynchronized retries in size and containsValue * methods before resorting to locking. This is used to avoid * unbounded retries if tables undergo continuous modification * which would make it impossible to obtain an accurate result. */ static final int RETRIES_BEFORE_LOCK = 2; public int size() { // Try a few times to get accurate count. On failure due to // continuous async changes in table, resort to locking. final Segment<K,V>[] segments = this.segments; int size; boolean overflow; // true if size overflows 32 bits long sum; // sum of modCounts long last = 0L; // previous sum int retries = -1; // first iteration isn't retry try { for (;;) { // 超过尝试次数，则对每个 Segment 加锁 if (retries++ == RETRIES_BEFORE_LOCK) { for (int j = 0; j < segments.length; ++j) ensureSegment(j).lock(); // force creation } sum = 0L; size = 0; overflow = false; for (int j = 0; j < segments.length; ++j) { Segment<K,V> seg = segmentAt(segments, j); if (seg != null) { sum += seg.modCount; int c = seg.count; if (c < 0 || (size += c) < 0) overflow = true; } } // 连续两次得到的结果一致，则认为这个结果是正确的 if (sum == last) break; last = sum; } } finally { if (retries > RETRIES_BEFORE_LOCK) { for (int j = 0; j < segments.length; ++j) segmentAt(segments, j).unlock(); } } return overflow ? Integer.MAX_VALUE : size; } \"]},\"360\":{\"h\":\"3. JDK 1.8 的改动\",\"t\":[\"JDK 1.7 使用分段锁机制来实现并发更新操作，核心类为 Segment，它继承自重入锁 ReentrantLock，并发度与 Segment 数量相等。\",\"JDK 1.8 使用了 CAS 操作来支持更高的并发度，在 CAS 操作失败时使用内置锁 synchronized。\",\"并且 JDK 1.8 的实现也在链表过长时会转换为红黑树。\"]},\"361\":{\"h\":\"LinkedHashMap\"},\"362\":{\"h\":\"存储结构\",\"t\":[\"继承自 HashMap，因此具有和 HashMap 一样的快速查找特性。\",\"public class LinkedHashMap<K,V> extends HashMap<K,V> implements Map<K,V> \",\"内部维护了一个双向链表，用来维护插入顺序或者 LRU 顺序。\",\"/** * The head (eldest) of the doubly linked list. */ transient LinkedHashMap.Entry<K,V> head; /** * The tail (youngest) of the doubly linked list. */ transient LinkedHashMap.Entry<K,V> tail; \",\"accessOrder 决定了顺序，默认为 false，此时维护的是插入顺序。\",\"final boolean accessOrder; \",\"LinkedHashMap 最重要的是以下用于维护顺序的函数，它们会在 put、get 等方法中调用。\",\"void afterNodeAccess(Node<K,V> p) { } void afterNodeInsertion(boolean evict) { } \"]},\"363\":{\"h\":\"afterNodeAccess()\",\"t\":[\"当一个节点被访问时，如果 accessOrder 为 true，则会将该节点移到链表尾部。也就是说指定为 LRU 顺序之后，在每次访问一个节点时，会将这个节点移到链表尾部，保证链表尾部是最近访问的节点，那么链表首部就是最近最久未使用的节点。\",\"void afterNodeAccess(Node<K,V> e) { // move node to last LinkedHashMap.Entry<K,V> last; if (accessOrder && (last = tail) != e) { LinkedHashMap.Entry<K,V> p = (LinkedHashMap.Entry<K,V>)e, b = p.before, a = p.after; p.after = null; if (b == null) head = a; else b.after = a; if (a != null) a.before = b; else last = b; if (last == null) head = p; else { p.before = last; last.after = p; } tail = p; ++modCount; } } \"]},\"364\":{\"h\":\"afterNodeInsertion()\",\"t\":[\"在 put 等操作之后执行，当 removeEldestEntry() 方法返回 true 时会移除最晚的节点，也就是链表首部节点 first。\",\"evict 只有在构建 Map 的时候才为 false，在这里为 true。\",\"void afterNodeInsertion(boolean evict) { // possibly remove eldest LinkedHashMap.Entry<K,V> first; if (evict && (first = head) != null && removeEldestEntry(first)) { K key = first.key; removeNode(hash(key), key, null, false, true); } } \",\"removeEldestEntry() 默认为 false，如果需要让它为 true，需要继承 LinkedHashMap 并且覆盖这个方法的实现，这在实现 LRU 的缓存中特别有用，通过移除最近最久未使用的节点，从而保证缓存空间足够，并且缓存的数据都是热点数据。\",\"protected boolean removeEldestEntry(Map.Entry<K,V> eldest) { return false; } \"]},\"365\":{\"h\":\"LRU 缓存\",\"t\":[\"以下是使用 LinkedHashMap 实现的一个 LRU 缓存：\",\"设定最大缓存空间 MAX_ENTRIES 为 3；\",\"使用 LinkedHashMap 的构造函数将 accessOrder 设置为 true，开启 LRU 顺序；\",\"覆盖 removeEldestEntry() 方法实现，在节点多于 MAX_ENTRIES 就会将最近最久未使用的数据移除。\",\"class LRUCache<K, V> extends LinkedHashMap<K, V> { private static final int MAX_ENTRIES = 3; protected boolean removeEldestEntry(Map.Entry eldest) { return size() > MAX_ENTRIES; } LRUCache() { super(MAX_ENTRIES, 0.75f, true); } } \",\"public static void main(String[] args) { LRUCache<Integer, String> cache = new LRUCache<>(); cache.put(1, \\\"a\\\"); cache.put(2, \\\"b\\\"); cache.put(3, \\\"c\\\"); cache.get(1); cache.put(4, \\\"d\\\"); System.out.println(cache.keySet()); } \",\"[3, 1, 4] \"]},\"366\":{\"h\":\"WeakHashMap\"},\"367\":{\"h\":\"存储结构\",\"t\":[\"WeakHashMap 的 Entry 继承自 WeakReference，被 WeakReference 关联的对象在下一次垃圾回收时会被回收。\",\"WeakHashMap 主要用来实现缓存，通过使用 WeakHashMap 来引用缓存对象，由 JVM 对这部分缓存进行回收。\",\"private static class Entry<K,V> extends WeakReference<Object> implements Map.Entry<K,V> \"]},\"368\":{\"h\":\"ConcurrentCache\",\"t\":[\"Tomcat 中的 ConcurrentCache 使用了 WeakHashMap 来实现缓存功能。\",\"ConcurrentCache 采取的是分代缓存：\",\"经常使用的对象放入 eden 中，eden 使用 ConcurrentHashMap 实现，不用担心会被回收（伊甸园）；\",\"不常用的对象放入 longterm，longterm 使用 WeakHashMap 实现，这些老对象会被垃圾收集器回收。\",\"当调用 get() 方法时，会先从 eden 区获取，如果没有找到的话再到 longterm 获取，当从 longterm 获取到就把对象放入 eden 中，从而保证经常被访问的节点不容易被回收。\",\"当调用 put() 方法时，如果 eden 的大小超过了 size，那么就将 eden 中的所有对象都放入 longterm 中，利用虚拟机回收掉一部分不经常使用的对象。\",\"public final class ConcurrentCache<K, V> { private final int size; private final Map<K, V> eden; private final Map<K, V> longterm; public ConcurrentCache(int size) { this.size = size; this.eden = new ConcurrentHashMap<>(size); this.longterm = new WeakHashMap<>(size); } public V get(K k) { V v = this.eden.get(k); if (v == null) { v = this.longterm.get(k); if (v != null) this.eden.put(k, v); } return v; } public void put(K k, V v) { if (this.eden.size() >= size) { this.longterm.putAll(this.eden); this.eden.clear(); } this.eden.put(k, v); } } \"]},\"369\":{\"h\":\"参考资料\",\"t\":[\"CyC2018/java容器\"]},\"370\":{\"c\":[\"面试题\"]},\"371\":{\"c\":[\"java\"]},\"372\":{\"h\":\"java容器总结\",\"t\":[\"java容器总结\"]},\"373\":{\"c\":[\"面试题\"]},\"374\":{\"c\":[\"java\"]},\"375\":{\"h\":\"java总结\",\"t\":[\"java总结\"]},\"376\":{\"c\":[\"面试题\"]},\"377\":{\"c\":[\"java\"]},\"378\":{\"h\":\"threadLocal\"},\"379\":{\"h\":\"一、ThreadLocal的概念\",\"t\":[\"ThreadLocal 主要是做数据隔离，它是线程的局部变量， 是每一个线程所单独持有的，其他线程不能对其进行访问，相对隔离的。 当使用ThreadLocal维护变量的时候为每一个使用该变量的线程提供一个独立的变量副本，即每个线程内部都会有一个该变量，这样同时多个线程访问该变量并不会彼此相互影响，因此他们使用的都是自己从内存中拷贝过来的变量的副本，这样就不存在线程安全问题，也不会影响程序的执行性能。\"]},\"380\":{\"h\":\"二、ThreadLocal解决了什么问题？\",\"t\":[\"解决多线程的并发访问。ThreadLocal会为每一个线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突。因为每一个线程都拥有自己的变量副本，从而也就没有必要对该变量进行同步了。\"]},\"381\":{\"h\":\"三、ThreadLocal原理\",\"t\":[\"每个Thread对象都有一个ThreadLocalMap，当创建一个ThreadLocal的时候，就会将该ThreadLocal对象添加到该Map中，其中键就是ThreadLocal，值可以是任意类型。\",\"1、比较重要的几个方法\",\"public T get()：从线程上下文环境中获取设置的值。\",\"public void set(T value)：将值存储到线程上下文环境中，供后续使用。\",\"public void remove()：清除线程本地上下文环境。\",\" public void set(T value) { // 获取当前线程 Thread t = Thread.currentThread(); // 通过当前线程获取线程中的ThreadLocal.ThreadLocalMap对象 ThreadLocalMap map = getMap(t); if (map != null) // map不为空，则直接赋值 map.set(this, value); else // map为空，则创建一个ThreadLocalMap对象 createMap(t, value); } // 根据提供的线程对象，和指定的值，创建一个ThreadLocalMap对象 void createMap(Thread t, T firstValue) { t.threadLocals = new ThreadLocalMap(this, firstValue); } // threadLocals是Thread类的一个属性 ThreadLocalMap getMap(Thread t) { return t.threadLocals; } /* Thread 类 182行 // ThreadLocal values pertaining to this thread. This map is maintained by the ThreadLocal class. 与该线程有关的ThreadLocal值。这个映射由ThreadLocal类维护 */ ThreadLocal.ThreadLocalMap threadLocals = null; \",\"// ThreadLocalMap中的内部类，存放key，value static class Entry extends WeakReference<ThreadLocal<?>> { // 与此ThreadLocal关联的值 Object value; // k：ThreadLocal的引用，被传递给WeakReference的构造方法 Entry(ThreadLocal<?> k, Object v) { super(k); value = v; } } public T get() { // 获取当前线程 Thread t = Thread.currentThread(); // 通过当前线程获取线程中的ThreadLocal.ThreadLocalMap对象 ThreadLocalMap map = getMap(t); if (map != null) { // map不为空，通过this(当前对象，即ThreadLocal对象)获取Entry对象 ThreadLocalMap.Entry e = map.getEntry(this); if (e != null) { @SuppressWarnings(\\\"unchecked\\\") T result = (T)e.value; // Entry不为空，则直接返回Entry中的value值 return result; } } // 如果map或Entry为空，则返回初始值-null return setInitialValue(); } // 设置初始值，初始化ThreadLocalMap对象，并设置value为 null private T setInitialValue() { // 初始化值，此方法返回 null T value = initialValue(); Thread t = Thread.currentThread(); ThreadLocalMap map = getMap(t); if (map != null) map.set(this, value); else createMap(t, value); return value; } \",\"public void remove() { // 通过当前线程获取线程中的ThreadLocal.ThreadLocalMap对象 ThreadLocalMap m = getMap(Thread.currentThread()); if (m != null) // 移除对象 m.remove(this); } // 根据key，删除对应的所有值 private void remove(ThreadLocal<?> key) { Entry[] tab = table; int len = tab.length; // 获取key对应的 Entry[] 下标 int i = key.threadLocalHashCode & (len-1); for (Entry e = tab[i]; e != null; // 获取下一个Entry对象 e = tab[i = nextIndex(i, len)]) { if (e.get() == key) { e.clear(); // 通过重新哈希位于staleSlot和下一个null插槽之间的任何可能冲突的条目，来清除陈旧的条目。这还会清除尾随null之前遇到的所有其他过时的条目，防止出现内存泄漏问题 expungeStaleEntry(i); return; } } } \",\"总结：\",\"每个Thread维护着一个ThreadLocalMap的引用\",\"ThreadLocalMap是ThreadLocal的内部类，用Entry来进行存储\",\"ThreadLocal创建的副本是存储在自己的threadLocals中的，也就是自己的ThreadLocalMap。\",\"ThreadLocalMap的键为ThreadLocal对象，而且可以有多个threadLocal变量，因此保存在map中\",\"在进行get之前，必须先set，否则会报空指针异常，当然也可以初始化一个，但是必须重写initialValue()方法。\",\"ThreadLocal本身并不存储值，它只是作为一个key来让线程从ThreadLocalMap获取value。\"]},\"382\":{\"h\":\"3、ThreadLocalMap底层结构\",\"t\":[\"ThreadLocalMap是一个定制化的Hashmap。但是没有链表。\",\"threadlocal\",\"在插⼊过程中，根据ThreadLocal对象的hash值，定位到table中的位置i。如果当前位置是空的，就初始化⼀个Entry对象放在位置i上；如果位置i不为空，如果这个Entry对象的key和要设置的key相等，那么就刷新Entry中的value；如果位置i的不为空，而且key不等于entry，那就找下⼀个空位置，直到为空为⽌。这样的话，在get的时候，也会根据ThreadLocal对象的hash值，定位到table中的位置，然后判断该位置Entry对象中的key是否和get的key⼀致，如果不⼀致，就判断下⼀个位置，在冲突严重的情况下，效率会比较低。\"]},\"383\":{\"h\":\"4、ThreadLocal的实例以及其值存放在栈还是堆？\",\"t\":[\"在Java中，栈内存归属于单个线程，每个线程都会有一个栈内存，其存储的变量只能在其所属线程中可见，即栈内存可以理解成线程的私有内存。而堆内存中的对象对所有线程可见。堆内存中的对象可以被所有线程访问。 所以，是存放在栈上咯？ 然而并不是，因为ThreadLocal实例实际上也是被其创建的类持有（更顶端应该是被线程持有），而ThreadLocal的值其实也是被线程实例持有，它们都是位于堆上，只是通过⼀些技巧将可⻅性修改成了线程可见。\"]},\"384\":{\"h\":\"5、如果我想共享线程的ThreadLocal数据怎么办？\",\"t\":[\"使⽤ InheritableThreadLocal 可以实现多个线程访问ThreadLocal的值，我们在主线程中创建⼀个 InheritableThreadLocal 的实例，然后在⼦线程中得到这个 InheritableThreadLocal 实例设置的值。\"]},\"385\":{\"h\":\"四、内存泄漏问题\",\"t\":[\"实际上 ThreadLocalMap 中使用的 key 为 ThreadLocal 的弱引用，弱引用的特点是，如果这个对象只存在弱引用，那么在下一次垃圾回收的时候必然会被清理掉。所以如果 ThreadLocal 没有被外部强引用的情况下，在垃圾回收的时候会被清理掉的，这样一来 ThreadLocalMap中使用这个 ThreadLocal 的 key 也会被清理掉。但是，value 是强引用，不会被清理，这样一来就会出现 key 为 null 的 value。\\n  ThreadLocalMap实现中已经考虑了这种情况，在调用 set()、get()、remove() 方法的时候，会清理掉 key 为 null 的记录。如果说会出现内存泄漏，那只有在出现了 key 为 null 的记录后，没有手动调用 remove() 方法，并且之后也不再调用 get()、set()、remove() 方法的情况下。\\n  建议回收自定义的ThreadLocal变量，尤其在线程池场景下，线程经常会被复用，如果不清理自定义的 ThreadLocal变量，可能会影响后续业务逻辑和造成内存泄露等问题。 尽量在代理中使用try-finally块进行回收。\"]},\"386\":{\"c\":[\"面试题\"]},\"387\":{\"c\":[\"java\"]},\"388\":{\"h\":\"23种设计模式简单定义\"},\"389\":{\"h\":\"设计模式定义\",\"t\":[\"设计模式在设计者是一种流行的思考设计问题的方法，是一套被反复使用，多数人知晓的，经过分类编目的，代码设计经验的总结。使用了设计模式，是为了使代码具有可重用性，让代码更容易被他人理解和保证代码的可靠性\"]},\"390\":{\"h\":\"设计模式按照类型划分\",\"t\":[\"创建型设计模式：用来解耦对象的实例化过程。\",\"结构型设计模式：将类和对象按照一定规则组合成一个更加强大的结构体。\",\"行为型设计模式：定义类和对象的交互行为。\"]},\"391\":{\"h\":\"设计模式简单定义\",\"t\":[\"23种设计模式简单定义\"]},\"392\":{\"h\":\"文字版\"},\"393\":{\"h\":\"创建型设计模式\",\"t\":[\"单例模式：确保一个类只有一个实例，提供一个全局访问点\",\"建造者模式：封装一个复杂对象过程，按照步骤构建对象\",\"原型模式：通过复制现有实例创建新实例\",\"简单工厂模式：一个工厂类根据传入参数决定创建哪一种产品实例\",\"工厂方法模式：定义一个用于创建对象的接口，让子类决定实例化那个类\",\"抽象工厂模式：创建相关依赖对象家族，而无须指定具体类\"]},\"394\":{\"h\":\"结构型设计模式\",\"t\":[\"适配器模式：将一个类的方法或者接口转换成客户希望另一个接口\",\"组合模式：将对象组成成树形结构以表示“整体-部分”的层次结构\",\"装饰模式：动态的给对象添加新的功能\",\"外观模式：对外提供一个统一方法，用来访问子系统中一群接口\",\"桥接模式：将抽象部分与实现部分分离，使他们都可以独立进行变化\",\"享元模式：通过共享技术来有效支持大量细粒度的对象\",\"代理模式：为其他对象提供一种代理以控制对这个对象的访问\"]},\"395\":{\"h\":\"行为型设计模式\",\"t\":[\"模板模式：定义一个算法结构，而将一些步骤延迟到子类实现\",\"解释器模式：定义一个语言，定义它的文法的一种表示，并定义一个解释器\",\"策略模式：定义一系列算法，把它们封装起来，并且使它们可以互相替换\",\"状态模式：允许一个对象在其内部状态改变时改变它的行为\",\"观察者模式：对象间一对多依赖关系，一个对象改变，依赖于它对象得到通知并更新\",\"备忘录模式：在不破坏封装前提下，保存对象内部状态\",\"中介者模式:用一个中介对象来封装一系列对象交互\",\"命令模式：将命令请求封装成一个对象，可以将不同请求来进行参数化\",\"访问者模式：在不改变数据结构的前提下，增加作用于一组元素对象新功能\",\"责任链模式：将请求的发送者和接受者解耦，使得多个对象都有处理这个请求的机会\",\"迭代器模式：一种遍历访问容器对象中各个元素的方法，不暴露该对象内部结构\"]},\"396\":{\"h\":\"参考\",\"t\":[\"郭孝星:Android系统设计原则与设计模式\",\"《Android源码设计模式解析与实战》\"]},\"397\":{\"c\":[\"设计模式\"]},\"398\":{\"c\":[\"archive\"]},\"399\":{\"h\":\"设计模式\"},\"400\":{\"c\":[\"design\"]},\"401\":{\"h\":\"设计模式-创建型-单例模式\"},\"402\":{\"h\":\"1、定义\",\"t\":[\"单例模式：确保一个类只有一个实例，提供一个全局访问点 \"]},\"403\":{\"h\":\"单例6种写法\"},\"404\":{\"h\":\"1、饿汉式\",\"t\":[\"/** * * 饿汉式单例 * @author chentong * 非线程安全 * */ public class HungrySingleton { private static HungrySingleton hungrySingleton = new HungrySingleton(); private HungrySingleton(){ } public HungrySingleton getInstance(){ return hungrySingleton; } } \"]},\"405\":{\"h\":\"2、懒汉\",\"t\":[\"/** * 懒汉式单例 * 线程安全 * @author chentong */ public class LazySingleton { private static LazySingleton lazySingleton; private LazySingleton(){ } public static synchronized LazySingleton getInstance(){ if(lazySingleton == null){ lazySingleton = new LazySingleton(); } return lazySingleton; } } \",\"3、内部静态类\",\"/** * 内部静态类 单例 * @author chentong * */ public class Singleton { private Singleton(){ } /** * 静态内部类 */ private static class SingletonHolder{ public static final Singleton INSTANCE = new Singleton(); } public static Singleton getInstance(){ return SingletonHolder.INSTANCE; } } \",\"4、Double Check\",\"public class DoubleCheckSingleton { private static volatile DoubleCheckSingleton doubleCheckSingleton; private DoubleCheckSingleton(){ } public static DoubleCheckSingleton getInstance(){ if(doubleCheckSingleton == null){ synchronized (DoubleCheckSingleton.class){ if (doubleCheckSingleton == null){ doubleCheckSingleton = new DoubleCheckSingleton(); } } } return doubleCheckSingleton; } } \",\"5、枚举单例\",\"/** * * 枚举法式单例 * @author chentong * 枚举默认线程安全 * 防止反序列化重新创建新的对象 * */ public enum EnumSingleton { INSTANCE; public void doSomething(){ } /** * 使用示例 */ public static class SingleDemo { public static void main(String[] args) { EnumSingleton singleton = EnumSingleton.INSTANCE; singleton.doSomething(); } } } \",\"6、容器单例\",\"public class MapSingleton { private static Map<String ,Object> objectMap = new HashMap<>( ); private MapSingleton(){ } public static void registerService(String key,Object object){ if (!objectMap.containsKey( key )){ objectMap.put( key,object ); } } public static Object getService(String key){ return objectMap.get( key ); } } \"]},\"406\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"407\":{\"c\":[\"设计模式\"]},\"408\":{\"c\":[\"archive\"]},\"409\":{\"h\":\"设计模式-创建型-原型模式\",\"t\":[\"####1、定义 原型模式：通过复制现有实例创建新实例 \",\"####写法\",\"/** * 原型模式 * 浅拷贝与深拷贝 * 浅拷贝其内容 * 深拷贝其对象 */ public class Book implements Cloneable{ private String title; //浅拷贝 private ArrayList<String> images; //深拷贝 public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public ArrayList<String> getImages() { return images; } public void setImages(ArrayList<String> images) { this.images = images; } @Override protected Object clone() throws CloneNotSupportedException { Book book = (Book) super.clone(); ArrayList imageList = (ArrayList)images.clone(); book.setImages( imageList ); return book; } } \",\"####代码示例\\nhttps://github.com/yinlingchaoliu/23-design-pattern\"]},\"410\":{\"c\":[\"设计模式\"]},\"411\":{\"c\":[\"archive\"]},\"412\":{\"h\":\"设计模式-创建型-工厂方法\"},\"413\":{\"h\":\"1、定义\",\"t\":[\"工厂方法：定义一个用于创建对象的接口，让子类决定实例化那个类\"]},\"414\":{\"h\":\"2、例子\"},\"415\":{\"h\":\"1、写法一\",\"t\":[\"产品\",\"public interface Product { void method(); } public class ProductA implements Product{ @Override public void method() { } } public class ProductB implements Product{ @Override public void method() { } } \",\"/** * 工厂 */ public interface Factory { Product createProduct(); } public class FactoryA implements Factory{ @Override public Product createProduct() { return new ProductA(); } } public class FactoryB implements Factory{ @Override public Product createProduct() { return new ProductB(); } } \",\"客户端调用\",\"/** * 让子类决定实例化那个类 * 工厂方法 */ public class TestMain { public static void main(String[] args) { Factory factory = new FactoryA(); Product product = factory.createProduct(); product.method(); } } \"]},\"416\":{\"h\":\"2、方法二 用反射\",\"t\":[\"public interface Product { void method(); } public class ProductA implements Product { @Override public void method() { } } /** * 工厂 */ public interface Factory { <T extends Product> T createProduct(Class<T> clazz); } public class ConcreteFactory implements Factory{ @Override public <T extends Product> T createProduct(Class<T> clazz) { Product product = null; try { product = (Product) Class.forName( clazz.getName() ).newInstance(); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (InstantiationException e) { e.printStackTrace(); } catch (ClassNotFoundException e) { e.printStackTrace(); } return (T)product; } } /** * 让子类决定实例化那个类 * 工厂方法 */ public class TestMain { public static void main(String[] args) { Factory factory = new ConcreteFactory(); Product product = factory.createProduct( ProductA.class ); product.method(); } } \"]},\"417\":{\"h\":\"3、代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"418\":{\"c\":[\"设计模式\"]},\"419\":{\"c\":[\"archive\"]},\"420\":{\"h\":\"设计模式-创建型-建造者模式\"},\"421\":{\"h\":\"1、定义\",\"t\":[\"建造者模式：封装一个复杂对象过程，按照步骤构建对象 \"]},\"422\":{\"h\":\"写法\",\"t\":[\"1、普通写法\",\"/** * 构件 */ public interface Builder { void buildPartA(); void buildPartB(); void buildPartC(); } /** * 构件实现 */ public class ConcreteBuilder implements Builder { @Override public void buildPartA() { } @Override public void buildPartB() { } @Override public void buildPartC() { } } /** * 建造者 */ public class Director { private Builder builder; public Director(Builder builder) { this.builder = builder; } /** * 策略 */ public void constructProduct(){ builder.buildPartA(); builder.buildPartB(); builder.buildPartC(); } } public class TestMain { public static void main(String[] args) { ConcreteBuilder builder = new ConcreteBuilder(); Director director = new Director( builder ); director.constructProduct(); } } \",\"2、惯用写法，省略构建者\",\"/** * 建造者 省略Driector * 优点 动态参数配置 */ public class Request { private String body; private String head; private String parm; public void setBody(String body) { this.body = body; } public void setHead(String head) { this.head = head; } public void setParm(String parm) { this.parm = parm; } /** * */ public static class Builder{ private String body; private String head; private String parm; public Builder setBody(String body) { this.body = body; return this; } public Builder setHead(String head) { this.head = head; return this; } public Builder setParm(String parm) { this.parm = parm; return this; } public Request create(){ Request request = new Request(); request.setHead( head ); request.setParm( parm ); request.setBody( body ); return request; } } } public class TestMain { public static void main(String[] args) { Request request = new Request.Builder() .setHead( \\\"head\\\" ) .setParm( \\\"parm\\\" ) .setBody( \\\"body\\\" ) .create(); } } \"]},\"423\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"424\":{\"c\":[\"设计模式\"]},\"425\":{\"c\":[\"archive\"]},\"426\":{\"h\":\"设计模式-创建型-抽象工厂\"},\"427\":{\"h\":\"1、定义\",\"t\":[\"抽象工厂：创建相关依赖对象家族，而无须指定具体类 \"]},\"428\":{\"h\":\"代码\",\"t\":[\"抽象工厂\",\"/** * 制动 */ public interface IBrake { void brake(); } /** * 发动机 */ public interface IEngine { void engine(); } //轮胎 public interface ITire { void tire(); } /** * 汽车工厂 */ public interface ICarFactory { IBrake createBrake(); IEngine createEngine(); ITire createTire(); } \",\"具体实现\",\"public class NormalBrake implements IBrake { @Override public void brake() { } } public class NormalEngine implements IEngine { @Override public void engine() { } } public class NormalTire implements ITire { @Override public void tire() { } } public class NormalFactory implements ICarFactory { @Override public IBrake createBrake() { return new NormalBrake(); } @Override public IEngine createEngine() { return new NormalEngine(); } @Override public ITire createTire() { return new NormalTire(); } } \",\"客户端调用\",\"/** * 一簇抽象接口 */ public class TestMain { public static void main(String[] args) { ICarFactory normalFactory = new NormalFactory(); normalFactory.createBrake().brake(); normalFactory.createEngine().engine(); normalFactory.createTire().tire(); } } \"]},\"429\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"430\":{\"c\":[\"设计模式\"]},\"431\":{\"c\":[\"archive\"]},\"432\":{\"h\":\"设计模式-创建型-简单工厂\"},\"433\":{\"h\":\"1、定义\",\"t\":[\"简单工厂模式：一个工厂类根据传入参数决定创建哪一种产品实例 \"]},\"434\":{\"h\":\"uml类图\",\"t\":[\"简单工厂\"]},\"435\":{\"h\":\"2、例子\",\"t\":[\"定义不同类型车\",\"//定义车 public interface ICar { void drive(); } //吉普车 public class JeepCar implements ICar { @Override public void drive() { System.out.println( \\\"吉普车\\\" ); } } //小轿车 public class SmallCar implements ICar { @Override public void drive() { System.out.println( \\\"小轿车\\\" ); } } public class SportCar implements ICar { @Override public void drive() { System.out.println( \\\"运动车\\\" ); } } \",\"简单工厂\",\"//定义车类型 public enum CarType { SPORT_CAR, JEEP_CAR, SMALL_CAR } //工厂 public class CarFactory { public static ICar createCar(CarType type){ switch (type){ case SMALL_CAR: return new SmallCar(); case JEEP_CAR: return new JeepCar(); case SPORT_CAR: return new SportCar(); default: return new SmallCar(); } } } /** * * 简单工厂 * */ public class TestMain { public static void main(String[] args){ ICar smallCar = CarFactory.createCar( CarType.SMALL_CAR ); smallCar.drive(); ICar jeepCar = CarFactory.createCar( CarType.JEEP_CAR ); jeepCar.drive(); ICar sportCar = CarFactory.createCar( CarType.SPORT_CAR ); sportCar.drive(); } } \"]},\"436\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"437\":{\"c\":[\"设计模式\"]},\"438\":{\"c\":[\"archive\"]},\"439\":{\"h\":\"设计模式-结构型-享元模式\"},\"440\":{\"h\":\"1、定义\",\"t\":[\"享元模式：通过共享技术来有效支持大量细粒度对象\"]},\"441\":{\"h\":\"写法\",\"t\":[\"public interface Ticket { void showTicketInfo(String bunk); } public class TrainTicket implements Ticket{ public String from; // 始发地 public String to; // 目的地 public String bunk; //铺位 public int price; //价格 public TrainTicket(String from, String to) { this.from = from; this.to = to; } @Override public void showTicketInfo(String bunk) { price = new Random().nextInt(300); System.out.println(\\\"购买 从 \\\" + from + \\\" 到 \\\" + to + \\\"的\\\" + bunk + \\\"火车票\\\" + \\\", 价格：\\\" + price); } } public class TicketFactory { private static Map<String,Ticket> sTicketMap = new ConcurrentHashMap<>( ); public static Ticket getTicket(String from ,String to){ String key = from + \\\"-\\\" + to; if(sTicketMap.containsKey(key)){ System.out.println(\\\"使用缓存 ==> \\\" + key); return sTicketMap.get(key); }else{ System.out.println(\\\"创建对象 ==> \\\" + key); Ticket ticket = new TrainTicket(from, to); sTicketMap.put(key, ticket); return ticket; } } } /** * * 享元模式 * eg: message , 线程池，连接池 * 共享池 * * 大大减少应用程序创建的对象，降低程序内存的占用，增强程序的性能 * */ public class TestMain { public static void main(String[] args){ Ticket ticket01 = TicketFactory.getTicket(\\\"北京\\\", \\\"青岛\\\"); ticket01.showTicketInfo(\\\"上铺\\\"); Ticket ticket02 = TicketFactory.getTicket(\\\"北京\\\", \\\"青岛\\\"); ticket02.showTicketInfo(\\\"下铺\\\"); Ticket ticket03 = TicketFactory.getTicket(\\\"北京\\\", \\\"西安\\\"); ticket03.showTicketInfo(\\\"坐票\\\"); } } \"]},\"442\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"443\":{\"c\":[\"设计模式\"]},\"444\":{\"c\":[\"archive\"]},\"445\":{\"h\":\"设计模式-结构型-代理模式\"},\"446\":{\"h\":\"1、定义\",\"t\":[\"代理模式：为其他对象提供一种代理以控制对这个对象访问 \"]},\"447\":{\"h\":\"写法\",\"t\":[\"公共部分\",\"public interface ILawsuit { //提交申请 void submit(); //举证 void burden(); //辩护 void defend(); //诉讼完成 void finish(); } public class XiaoMin implements ILawsuit { @Override public void submit() { //小民申请仲裁 System.out.println( \\\"老板年底拖欠工资，特此申请仲裁！\\\" ); } @Override public void burden() { //小民提交证据 System.out.println( \\\"这是合同书和过去一年的银行工资流水！\\\" ); } @Override public void defend() { //铁证如山 System.out.println( \\\"证据确凿，不需要再说什么！\\\" ); } @Override public void finish() { //结果 System.out.println( \\\"诉讼成功，判决老板即日起七天内结算工资！\\\" ); } } \",\"1、静态代理\",\"/** * 代理类 */ public class Lawyer implements ILawsuit { private ILawsuit mLawsuit; public Lawyer(ILawsuit mLawsuit) { this.mLawsuit = mLawsuit; } @Override public void submit() { } @Override public void burden() { } @Override public void defend() { } @Override public void finish() { } } public class TestMain { public static void main(String[] args) { ILawsuit xiaomin = new XiaoMin(); //静态代理 ILawsuit lawyer = new Lawyer( xiaomin ); lawyer.submit(); lawyer.burden(); lawyer.defend(); lawyer.finish(); } } \",\"2、动态代理 公共部分\",\"public class DynamicProxy implements InvocationHandler { private Object obj; public DynamicProxy(Object obj) { this.obj = obj; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { Object result = method.invoke( obj,args ); return result; } } \",\"例子1\",\"public class TestMain { public static void main(String[] args) { ILawsuit xiaomin = new XiaoMin(); //动态代理 DynamicProxy proxy = new DynamicProxy( xiaomin ); //获取小民的classLoader ClassLoader loader = xiaomin.getClass().getClassLoader(); //动态代理一个代理律师 ILawsuit lawyer = (ILawsuit) Proxy.newProxyInstance( loader, new Class[]{ILawsuit.class}, proxy ); lawyer.submit(); lawyer.burden(); lawyer.defend(); lawyer.finish(); } } \",\"2、优化封装\",\"public class SubjectProxy<T> { //获得动态实例 public T newInstance(Object obj) { DynamicProxy proxy = new DynamicProxy( obj ); ClassLoader loader = obj.getClass().getClassLoader(); Class superclazz = getSuperclass(); return (T) Proxy.newProxyInstance( loader, new Class[]{superclazz}, proxy ); } //Java 得到泛型中得到T.class private Class getSuperclass() { return (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0]; } } public class TestMain { //为其他对象提供一种代理以控制对这个对象的访问 public static void main(String[] args) { ILawsuit xiaomin = new XiaoMin(); SubjectProxy<ILawsuit> subjectProxy = new SubjectProxy<ILawsuit>(); ILawsuit lawyer = subjectProxy.newInstance( xiaomin ); lawyer.submit(); lawyer.burden(); lawyer.defend(); lawyer.finish(); } } \"]},\"448\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"449\":{\"c\":[\"设计模式\"]},\"450\":{\"c\":[\"archive\"]},\"451\":{\"h\":\"设计模式-结构型-外观模式\"},\"452\":{\"h\":\"1、定义\",\"t\":[\"外观模式：对外提供统一方法，用来访问子系统中一群接口 \"]},\"453\":{\"h\":\"写法\",\"t\":[\"public interface Camera { //打开相机 public void open(); //拍照 public void takePicture(); //关闭相机 public void close(); } public class CameraImpl implements Camera{ @Override public void open() { System.out.println(\\\"打开相机\\\"); } @Override public void takePicture() { System.out.println(\\\"拍照\\\"); } @Override public void close() { System.out.println(\\\"关闭相机\\\"); } } public interface Phone { //拨电话 void dail(); //挂断 void hangup(); } public class PhoneImpl implements Phone{ @Override public void dail() { System.out.println(\\\"打电话\\\"); } @Override public void hangup() { System.out.println(\\\"挂断\\\"); } } /** * * 外观模式 * 对客户程序隐藏子系统的细节，因而减少了客户对于子系统的耦合，能够拥抱变化。 */ public class TestMain { //系统对外的统一接口，系统内部系统地工作 public static void main(String[] args) { MobilePhone mobilePhone = new MobilePhone(); mobilePhone.takePicture(); mobilePhone.videoChat(); } } \"]},\"454\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"455\":{\"c\":[\"设计模式\"]},\"456\":{\"c\":[\"archive\"]},\"457\":{\"h\":\"设计模式-结构型-桥接模式\"},\"458\":{\"h\":\"1、定义\",\"t\":[\"桥接模式：将抽象部分与实现部分分离，使他们都可以独立进行变化 \"]},\"459\":{\"h\":\"写法\",\"t\":[\"/** * 添加物 */ public abstract class CoffeeAdditives { public abstract String addSomething(); } /** * 咖啡制造 */ public abstract class Coffee { protected CoffeeAdditives impl; public Coffee(CoffeeAdditives impl) { this.impl = impl; } public abstract void makeCoffee(); } public class LargeCoffee extends Coffee{ public LargeCoffee(CoffeeAdditives impl) { super( impl ); } @Override public void makeCoffee() { System.out.println(\\\"大杯的\\\" + impl.addSomething() + \\\"咖啡\\\"); } } public class SmallCoffee extends Coffee{ public SmallCoffee(CoffeeAdditives impl) { super( impl ); } @Override public void makeCoffee() { System.out.println(\\\"小杯的\\\" + impl.addSomething() + \\\"咖啡\\\"); } } public class Sugar extends CoffeeAdditives { @Override public String addSomething() { return \\\"加糖\\\"; } } public class Ordinary extends CoffeeAdditives { @Override public String addSomething() { return \\\"原味\\\"; } } public class TestMain { /** * * 桥接模式 */ public static void main(String[] args) { CoffeeAdditives sugar = new Sugar(); CoffeeAdditives ordinary = new Ordinary(); //大杯咖啡 原味 LargeCoffee largeCoffeeOrdinary = new LargeCoffee(ordinary); largeCoffeeOrdinary.makeCoffee(); //小杯咖啡 原味 SmallCoffee smallCoffeeOrdinary = new SmallCoffee(ordinary); smallCoffeeOrdinary.makeCoffee(); //大杯咖啡 加糖 LargeCoffee largeCoffeeSugar = new LargeCoffee(sugar); largeCoffeeSugar.makeCoffee(); //小杯咖啡 加糖 SmallCoffee smallCoffeeSugar = new SmallCoffee(sugar); smallCoffeeSugar.makeCoffee(); } } \"]},\"460\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"461\":{\"c\":[\"设计模式\"]},\"462\":{\"c\":[\"archive\"]},\"463\":{\"h\":\"设计模式-结构型-组合模式\"},\"464\":{\"h\":\"1、定义\",\"t\":[\"组合模式：将对象组成树形结构以表示“整体-部分”的层次结构 \"]},\"465\":{\"h\":\"写法\",\"t\":[\"//目录抽象类 public abstract class Dir { private String name; protected List<Dir> dirs = new ArrayList<>( ); public Dir(String name){ this.name = name; } public abstract void addDir(Dir dir); public abstract void rmDir(Dir dir); public abstract void clear(); public abstract void print(); public abstract List<Dir> getFiles(); public String getName(){ return name; } } public class File extends Dir{ public File(String name) { super(name); } @Override public void addDir(Dir dir) { throw new UnsupportedOperationException(\\\"文件对象不支持该操作！\\\"); } @Override public void rmDir(Dir dir) { throw new UnsupportedOperationException(\\\"文件对象不支持该操作！\\\"); } @Override public void clear() { throw new UnsupportedOperationException(\\\"文件对象不支持该操作！\\\"); } @Override public void print() { System.out.print(getName()); } @Override public List<Dir> getFiles() { throw new UnsupportedOperationException(\\\"文件对象不支持该操作！\\\"); } } public class Folder extends Dir{ public Folder(String name) { super( name ); } @Override public void addDir(Dir dir) { dirs.add( dir ); } @Override public void rmDir(Dir dir) { dirs.remove( dir ); } @Override public void clear() { dirs.clear(); } @Override public void print() { System.out.print(getName() + \\\"(\\\"); Iterator<Dir> iter = dirs.iterator(); while (iter.hasNext()) { Dir dir = iter.next(); dir.print(); if(iter.hasNext()){ System.out.print(\\\", \\\"); } } System.out.print(\\\")\\\"); } @Override public List<Dir> getFiles() { return dirs; } } public class TestMain { /** * 组合模式表示 : 整体-部分的关系 * @param args 树型结构 */ public static void main(String[] args) { //构造一个目录对象表示C盘根目录 Dir diskC = new Folder(\\\"C\\\"); //C盘根目录下有一个文件Log.txt diskC.addDir(new File(\\\"Log.txt\\\")); //C盘根目录下有三个目录Windows、PerfLogs、Program File Dir dirWin = new Folder(\\\"Windows\\\"); //Windows目录下有文件explorer.exe dirWin.addDir(new File(\\\"explorer.exe\\\")); diskC.addDir(dirWin); //打印出文件结构 diskC.print(); } } \"]},\"466\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"467\":{\"c\":[\"设计模式\"]},\"468\":{\"c\":[\"archive\"]},\"469\":{\"h\":\"设计模式-结构型-装饰模式\"},\"470\":{\"h\":\"1、定义\",\"t\":[\"装饰模式：动态给对象添加新功能 \"]},\"471\":{\"h\":\"写法\",\"t\":[\"public abstract class Person { public abstract void dressed(); } public class Girl extends Person { @Override public void dressed() { System.out.println(\\\"Girl穿了打底裤\\\"); } } public class PersonWrapper extends Person{ private Person mPerson; public PersonWrapper(Person mPerson) { this.mPerson = mPerson; } @Override public void dressed() { mPerson.dressed(); } } public class PersonClothSytle extends PersonWrapper{ public PersonClothSytle(Person mPerson) { super( mPerson ); } /** * 穿牛仔裤 */ private void dressJean(){ System.out.println(\\\"穿牛仔裤\\\"); } /** * 穿鞋子 */ private void dressShoes(){ System.out.println(\\\"穿鞋子 \\\"); } @Override public void dressed() { super.dressed(); dressJean(); dressShoes(); } } public class TestMain { /** * 装饰模式 * 层层给装饰方法添加新内容 * eg context contextwrapper * 装饰模式比继承更加灵活性 * @param args */ public static void main(String[] args) { Person girl = new Girl(); PersonWrapper wrapper = new PersonWrapper( girl ); wrapper.dressed(); PersonWrapper style = new PersonClothSytle( girl ); style.dressed(); } } \"]},\"472\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"473\":{\"c\":[\"设计模式\"]},\"474\":{\"c\":[\"archive\"]},\"475\":{\"h\":\"设计模式-结构型-适配器模式\"},\"476\":{\"h\":\"1、定义\",\"t\":[\"适配器模式：将一个类的方法护着接口转换成客户希望的另一个接口 \"]},\"477\":{\"h\":\"2、写法\",\"t\":[\"public interface FiveVolt { int getVolt5(); } public class Volt220 { public int getVolt220(){ return 220; } } public class VoltAdapter extends Volt220 implements FiveVolt{ @Override public int getVolt5() { return 5; } } public class TestMain { /** * Target Adapter Adaptee * @param args 树型结构 */ public static void main(String[] args) { VoltAdapter adapter = new VoltAdapter(); System.out.println(\\\"输出电压：\\\" + adapter.getVolt5()); } } \"]},\"478\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"479\":{\"c\":[\"设计模式\"]},\"480\":{\"c\":[\"archive\"]},\"481\":{\"h\":\"设计模式-行为型-中介模式\"},\"482\":{\"h\":\"1、定义\",\"t\":[\"中介者模式:用一个中介对象来封装一系列对象交互\"]},\"483\":{\"h\":\"写法\",\"t\":[\"/** * 中介 */ public interface Mediaor { void change(Colleague colleague); } public abstract class Colleague { protected Mediaor mediaor; public Colleague(Mediaor mediaor) { this.mediaor = mediaor; } public abstract void action(); } /** * Cd设备 */ public class CDDevice extends Colleague { private String cd; public CDDevice(Mediaor mediaor) { super( mediaor ); } @Override public void action() { mediaor.change( this ); } public void setCd(String cd) { this.cd = cd; } public void loadCD(){ System.out.println( \\\"load CD\\\" + cd ); } } /** * CPU */ public class CPU extends Colleague { private String branch; public CPU(Mediaor mediaor) { super( mediaor ); } @Override public void action() { mediaor.change( this ); } public void setBranch(String branch) { this.branch = branch; } public void loadCPU(){ System.out.println( \\\"CPU\\\" + branch ); } } /** * 声卡 */ public class SoundCard extends Colleague { private String sound; public SoundCard(Mediaor mediaor) { super( mediaor ); } @Override public void action() { mediaor.change( this ); } public void setSound(String sound) { this.sound = sound; } public void loadSoundCard(){ System.out.println( \\\"load sound\\\" + sound ); } } /** * 中介者模式 * 多对多转化为一对多 */ public class MainBoard implements Mediaor { private CDDevice cdDevice; //光驱设备 private CPU cpu; //CPU private SoundCard soundCard; //声卡设备 public void setCdDevice(CDDevice cdDevice) { this.cdDevice = cdDevice; } public void setCpu(CPU cpu) { this.cpu = cpu; } public void setSoundCard(SoundCard soundCard) { this.soundCard = soundCard; } @Override public void change(Colleague colleague) { if (colleague instanceof CDDevice) { ((CDDevice) colleague).loadCD(); } else if (colleague instanceof CPU) { ((CPU) colleague).loadCPU(); } else if (colleague instanceof SoundCard) { ((SoundCard) colleague).loadSoundCard(); } } } /** * 从多对多网状关系 * 变成一对多 * */ public class TestMain { public static void main(String[] args){ MainBoard mediator = new MainBoard(); CPU cpu = new CPU( mediator ); CDDevice cdDevice = new CDDevice( mediator ); SoundCard soundCard = new SoundCard( mediator ); mediator.setCdDevice( cdDevice ); mediator.setCpu( cpu ); mediator.setSoundCard( soundCard ); cdDevice.action(); } } \"]},\"484\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"485\":{\"c\":[\"设计模式\"]},\"486\":{\"c\":[\"archive\"]},\"487\":{\"h\":\"设计模式-行为型-命令模式\"},\"488\":{\"h\":\"1、定义\",\"t\":[\"命令模式：将命令请求封装成一个对象，可以将不同请求来进行参数化\"]},\"489\":{\"h\":\"写法\",\"t\":[\"public interface IReceive { void toLeft(); void toRight(); void toUp(); void toDown(); } /** * 真正引擎 */ public class Receive implements IReceive{ public void toLeft(){ System.out.println(\\\"向左\\\"); } public void toRight(){ System.out.println(\\\"向右\\\"); } public void toUp(){ System.out.println(\\\"向上\\\"); } public void toDown(){ System.out.println(\\\"向下\\\"); } } public interface ICommand { void execute(); } public class UpCommand implements ICommand { private Receive receive; public UpCommand(Receive receive){ this.receive = receive; } @Override public void execute() { receive.toUp(); } } public class DownCommand implements ICommand { private Receive receive; public DownCommand(Receive receive){ this.receive = receive; } @Override public void execute() { receive.toDown(); } } public class LeftCommand implements ICommand { private Receive receive; public LeftCommand(Receive receive){ this.receive = receive; } @Override public void execute() { receive.toLeft(); } } public class RightCommand implements ICommand { private Receive receive; public RightCommand(Receive receive){ this.receive = receive; } @Override public void execute() { receive.toRight(); } } public class Button implements IReceive{ private LeftCommand leftCommand; private RightCommand rightCommand; private UpCommand upCommand; private DownCommand downCommand; public void setLeftCommand(LeftCommand leftCommand) { this.leftCommand = leftCommand; } public void setRightCommand(RightCommand rightCommand) { this.rightCommand = rightCommand; } public void setUpCommand(UpCommand upCommand) { this.upCommand = upCommand; } public void setDownCommand(DownCommand downCommand) { this.downCommand = downCommand; } @Override public void toLeft() { leftCommand.execute(); } @Override public void toRight() { rightCommand.execute(); } @Override public void toUp() { upCommand.execute(); } @Override public void toDown() { downCommand.execute(); } } /** * 命令模式 * * 添加一层命令，便于记录 * * 多对一 * */ public class Player { public static void main(String[] args) { //接收者 Receive receive = new Receive(); //命令 LeftCommand leftCommand = new LeftCommand( receive ); RightCommand rightCommand = new RightCommand( receive ); UpCommand upCommand = new UpCommand( receive ); DownCommand downCommand = new DownCommand( receive ); //发送者 Button button = new Button(); button.setLeftCommand( leftCommand ); button.setRightCommand( rightCommand ); button.setDownCommand( downCommand ); button.setUpCommand( upCommand ); //调用 button.toLeft(); button.toRight(); button.toDown(); button.toUp(); } } \"]},\"490\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"491\":{\"c\":[\"设计模式\"]},\"492\":{\"c\":[\"archive\"]},\"493\":{\"h\":\"设计模式-行为型-备忘录模式\"},\"494\":{\"h\":\"1、定义\",\"t\":[\"备忘录模式：在不破坏封装前提下，保存对象内部状态 \"]},\"495\":{\"h\":\"写法\",\"t\":[\"public class Memoto { private String name; private String age; private String sex; public String getName() { return name; } public void setName(String name) { this.name = name; } public String getAge() { return age; } public void setAge(String age) { this.age = age; } public String getSex() { return sex; } public void setSex(String sex) { this.sex = sex; } } public interface IMemotoStore { void store(Memoto memoto); Memoto restore(); } /** * 备忘录模式 */ public class Caretaker implements IMemotoStore{ private Memoto memoto = new Memoto(); @Override public void store(Memoto memoto) { memoto.setAge( memoto.getAge()); memoto.setName( memoto.getName() ); memoto.setSex( memoto.getSex() ); } @Override public Memoto restore() { return memoto; } } \"]},\"496\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"497\":{\"c\":[\"设计模式\"]},\"498\":{\"c\":[\"archive\"]},\"499\":{\"h\":\"设计模式-行为型-模板模式\"},\"500\":{\"h\":\"1、定义\",\"t\":[\"模板模式：定义一个算法结构，而将一些步骤延迟到子类实现 \"]},\"501\":{\"h\":\"写法\",\"t\":[\"/** * 电脑核心流程 */ public interface IComputer { //开启电源 void powerOn(); //检查硬件 void checkHardware(); //载入操作系统 void loadOS(); //登录 void login(); //是否登录 boolean isLogin(); //启动完整流程 void startUp(); } /** * * 模板方法 * 封装不变部分，扩展可变部分。 * 提取公共部分代码，便于维护 * */ public abstract class AbstractComputer implements IComputer { //下面是模板方法，定义为final，子类不能覆盖此方法 //固定策略不能轻易改变 @Override public final void startUp() { System.out.println( \\\"--------开机 START--------\\\" ); powerOn(); checkHardware(); loadOS(); if (isLogin()) { login(); } System.out.println( \\\"-------- 开机 END --------\\\" ); } } /** * windows电脑 */ public class WindowsComputer extends AbstractComputer { @Override public void powerOn() { System.out.println(\\\"Windows电脑开启电源\\\"); } @Override public void checkHardware() { System.out.println(\\\"Windows电脑检查硬件\\\"); } @Override public void loadOS() { System.out.println(\\\"Windows电脑载入操作系统\\\"); } @Override public void login() { } @Override public boolean isLogin() { return false;//返回false，不需登录 } } public class TestMain { public static void main(String[] args){ AbstractComputer computer = new WindowsComputer(); computer.startUp(); } } \"]},\"502\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"503\":{\"c\":[\"设计模式\"]},\"504\":{\"c\":[\"archive\"]},\"505\":{\"h\":\"设计模式-行为型-状态模式\"},\"506\":{\"h\":\"1、定义\",\"t\":[\"状态模式：允许一个对象在其内部状态改变时改变它的行为 \"]},\"507\":{\"h\":\"写法\",\"t\":[\"public interface ITvStatus { public void nextChannel(); public void prevChannel(); public void turnUp(); public void turnDown(); } public interface IPowerController { void powerOn(); void powerOff(); } public class PowerOffState implements ITvStatus{ @Override public void nextChannel() { System.out.println(\\\"----------\\\"); } @Override public void prevChannel() { System.out.println(\\\"----------\\\"); } @Override public void turnUp() { System.out.println(\\\"----------\\\"); } @Override public void turnDown() { System.out.println(\\\"----------\\\"); } } public class PowerOnState implements ITvStatus { @Override public void nextChannel() { System.out.println(\\\"下一频道\\\"); } @Override public void prevChannel() { System.out.println(\\\"上一频道\\\"); } @Override public void turnUp() { System.out.println(\\\"调高音量\\\"); } @Override public void turnDown() { System.out.println(\\\"调低音量\\\"); } } public class TVController implements ITvStatus,IPowerController{ private ITvStatus mTvStatus = new PowerOffState(); public void setmTvStatus(ITvStatus mTvStatus) { this.mTvStatus = mTvStatus; } @Override public void powerOn() { setmTvStatus( new PowerOnState() ); System.out.println(\\\"开机\\\"); } @Override public void powerOff() { setmTvStatus( new PowerOffState() ); System.out.println(\\\"关机\\\"); } @Override public void nextChannel() { mTvStatus.nextChannel(); } @Override public void prevChannel() { mTvStatus.prevChannel(); } @Override public void turnUp() { mTvStatus.turnUp(); } @Override public void turnDown() { mTvStatus.turnDown(); } } /** * 状态模式 * 行为是平行关系，不可替换，自我状态改变 */ public class TestMain { public static void main(String[] args){ TVController tvController = new TVController(); tvController.nextChannel(); tvController.powerOff(); tvController.powerOn(); tvController.turnDown(); } } \"]},\"508\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"509\":{\"c\":[\"设计模式\"]},\"510\":{\"c\":[\"archive\"]},\"511\":{\"h\":\"设计模式-行为型-策略模式\"},\"512\":{\"h\":\"1、定义\",\"t\":[\"策略模式：定义一系列算法，把它们封装起来，并且使它们可以互相替换 \"]},\"513\":{\"h\":\"写法\",\"t\":[\"public interface IMemberStrategy { //打折 double discount(double price); } public class AdvancedMemberStrategy implements IMemberStrategy { @Override public double discount(double price) { return price * 0.8; } } public class IntermediateMemberStrategy implements IMemberStrategy { @Override public double discount(double price) { return price * 0.9; } } public class PrimaryMemberStrategy implements IMemberStrategy { @Override public double discount(double price) { return price * 1; } } public class Price { private IMemberStrategy strategy; public Price(IMemberStrategy strategy){ this.strategy = strategy; } public double quote(double booksPrice){ return strategy.discount(booksPrice); } } /** * 策略模式 * 关注点在于行为的选择 * 解决swich-case */ public class TestMain { public static void main(String[] args) { Price price = new Price( new PrimaryMemberStrategy() ); price.quote( 100 ); Price price1 = new Price( new IntermediateMemberStrategy() ); price.quote( 100 ); Price price2 = new Price( new AdvancedMemberStrategy() ); price.quote( 100 ); } } \"]},\"514\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"515\":{\"c\":[\"设计模式\"]},\"516\":{\"c\":[\"archive\"]},\"517\":{\"h\":\"设计模式-行为型-观察者模式\"},\"518\":{\"h\":\"1、定义\",\"t\":[\"观察者模式：对象间一对多依赖关系，一个对象改变，依赖于它对象得到通知并更新\"]},\"519\":{\"h\":\"写法\",\"t\":[\"/** * 被观察者 */ public interface IObservable { //注册 void register(IObserver observer); //通知 void notify(String msg); } /** * 观察者 */ public interface IObserver { //更新 void update(String msg); } public class Tv implements IObservable { List<IObserver> list = new ArrayList<>(); @Override public void register(IObserver observer) { list.add( observer ); } @Override public void notify(String msg) { for (IObserver observer : list) { observer.update( msg ); } } } /** * 观察者 */ public class User implements IObserver { private String name; public User(String name) { this.name = name; } @Override public void update(String msg) { System.out.println( name + \\\",\\\" + msg + \\\"更新了！\\\" ); } } public class TestMain { public static void main(String[] args){ User user1 = new User( \\\"小米\\\" ); User user2 = new User( \\\"小名\\\" ); User user3 = new User( \\\"小明\\\" ); Tv tv = new Tv(); tv.register( user1 ); tv.register( user2 ); tv.register( user3 ); tv.notify( \\\"甄嬛来了\\\" ); } } \"]},\"520\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"521\":{\"c\":[\"设计模式\"]},\"522\":{\"c\":[\"archive\"]},\"523\":{\"h\":\"设计模式-行为型-解释器模式\"},\"524\":{\"h\":\"1、定义\",\"t\":[\"解释器模式：定义一个语言，定义它的文法的一种表示，并定义一个解释器 \"]},\"525\":{\"h\":\"写法\",\"t\":[\"/** * 计算 */ public interface IArithemticExpression { //计算 int interpreter(); } /** * 数字 */ public class NumExpression implements IArithemticExpression{ private int num; public NumExpression(int num){ this.num = num; } @Override public int interpreter() { return num; } } /** * 加法 */ public class AdditionExpression implements IArithemticExpression{ private IArithemticExpression exp1,exp2; public AdditionExpression(IArithemticExpression exp1,IArithemticExpression exp2){ this.exp1 = exp1; this.exp2 = exp2; } @Override public int interpreter() { return exp1.interpreter() + exp2.interpreter(); } } /** * 减法 */ public class SubtractionExpression implements IArithemticExpression{ private IArithemticExpression exp1,exp2; public SubtractionExpression(IArithemticExpression exp1, IArithemticExpression exp2){ this.exp1 = exp1; this.exp2 = exp2; } @Override public int interpreter() { return exp1.interpreter() - exp2.interpreter(); } } public class Calculator implements IArithemticExpression{ private Stack<IArithemticExpression> mExpStack = new Stack<>(); public Calculator(String expression){ String[] elements = expression.split(\\\" \\\"); for(int i= 0 ;i < elements.length;i++){ switch (elements[i].charAt(0)){ case '+': IArithemticExpression exp1 = mExpStack.pop(); IArithemticExpression exp2 = new NumExpression(Integer.parseInt(elements[++i])); mExpStack.push( new AdditionExpression( exp1,exp2 ) ); break; case '-': IArithemticExpression exp3 = mExpStack.pop(); IArithemticExpression exp4 = new NumExpression(Integer.parseInt(elements[++i])); mExpStack.push( new SubtractionExpression( exp3,exp4 ) ); break; default: mExpStack.push(new NumExpression(Integer.valueOf(elements[i]))); break; } } } /** * 计算 * @return */ @Override public int interpreter() { int tmp = 0; for (IArithemticExpression exp : mExpStack){ tmp = tmp + exp.interpreter(); } return tmp; } } /** * * 解释器模式 * 计算器 文法分析 * 1、词法分析 * 2、计算策略 * 解释与执行分离 * */ public class TestMain { public static void main(String[] args) { //计算器 Calculator calculator = new Calculator( \\\"1 + 2 - 5 + 6 + 7\\\" ); calculator.interpreter(); } } \"]},\"526\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"527\":{\"c\":[\"设计模式\"]},\"528\":{\"c\":[\"archive\"]},\"529\":{\"h\":\"设计模式-行为型-访问者模式\"},\"530\":{\"h\":\"1、定义\",\"t\":[\"访问者模式：在不改变数据结构的前提下，增加作用于一组元素对象新功能\"]},\"531\":{\"h\":\"写法\",\"t\":[\"/** * 受访者 */ public interface IAccept { void accept(IVisitor visit); void showInfo(); } /** * 访问者 */ public interface IVisitor<ACCEPT extends IAccept> { void visit(ACCEPT accept); Kind kind(); //访问者类型 } /** * 访问者类型 */ public enum Kind { CEO, CTO, HR } /** * 访问者模板 */ public abstract class Visitor implements IVisitor{ @Override public void visit(IAccept accept) { accept.showInfo(); } } public class CEOVisitor extends Visitor{ @Override public Kind kind() { return Kind.CEO; } } public class CTOVisitor extends Visitor { @Override public Kind kind() { return Kind.CTO; } } /** * 访问者 */ public class HRVisitor extends Visitor{ @Override public Kind kind() { return Kind.HR; } } /** * 受访者--工程师 */ public class Engineer implements IAccept { private String name; private String kpi; private String line; private IVisitor visitor; public Engineer(String name, String kpi, String line) { this.name = name; this.kpi = kpi; this.line = line; } @Override public void accept(IVisitor visit) { visitor = visit; visit.visit( this ); } @Override public void showInfo() { if (visitor.kind() == Kind.CEO){ System.out.println( \\\"Engineer{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", kpi='\\\" + kpi + '\\\\'' + '}' ); }else if(visitor.kind() == Kind.CTO){ System.out.println( \\\"Engineer{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", line='\\\" + line + '\\\\'' + '}' ); }else if(visitor.kind() == Kind.HR){ System.out.println( \\\"Engineer{\\\" + \\\"name='\\\" + name + '\\\\'' + '}' ); } } } /** * 受访者--经理 * */ public class Manage implements IAccept{ private String name; private String kpi; private String product; private IVisitor visitor; public Manage(String name, String kpi, String product) { this.name = name; this.kpi = kpi; this.product = product; } @Override public void accept(IVisitor visit) { visitor = visit; visit.visit( this ); } @Override public void showInfo() { if (visitor.kind() == Kind.CEO){ System.out.println( \\\"Manage{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", kpi='\\\" + kpi + '\\\\'' + \\\", product='\\\" + product + '\\\\'' + '}' ); }else if(visitor.kind() == Kind.CTO){ System.out.println( \\\"Manage{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", product='\\\" + product + '\\\\'' + '}' ); }else if(visitor.kind() == Kind.HR){ System.out.println( \\\"Manage{\\\" + \\\"name='\\\" + name + '\\\\'' + '}' ); } } } public class Company { private List<IAccept> acceptList = new ArrayList<>( ); public Company(){ acceptList.add( new Engineer( \\\"小明\\\",\\\"14\\\",\\\"1000\\\" ) ); acceptList.add( new Engineer( \\\"小张\\\",\\\"10\\\",\\\"12300\\\" ) ); acceptList.add( new Engineer( \\\"小李\\\",\\\"19\\\",\\\"100450\\\" ) ); acceptList.add( new Engineer( \\\"小孙\\\",\\\"16\\\",\\\"101100\\\" ) ); acceptList.add( new Manage( \\\"张总\\\",\\\"20\\\",\\\"花钱项目\\\" ) ); acceptList.add( new Manage( \\\"马云\\\",\\\"10\\\",\\\"五福项目\\\" ) ); acceptList.add( new Manage( \\\"王总\\\",\\\"20\\\",\\\"卖大米项目\\\" ) ); acceptList.add( new Manage( \\\"陈总\\\",\\\"20\\\",\\\"到天亮项目\\\" ) ); } public void showReport(IVisitor visitor){ for (IAccept accept :acceptList){ accept.accept( visitor ); } } } /** * 访问者模式 * */ public class TestMain { public static void main(String[] args){ //公司 Company company = new Company(); //访问者查看对应报告 company.showReport( new CEOVisitor() ); company.showReport( new HRVisitor() ); company.showReport( new CTOVisitor() ); } } \"]},\"532\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"533\":{\"c\":[\"设计模式\"]},\"534\":{\"c\":[\"archive\"]},\"535\":{\"h\":\"设计模式-行为型-责任链模式\"},\"536\":{\"h\":\"1、定义\",\"t\":[\"责任链模式：将请求的发送者和接受者解耦，使得多个对象都有处理这个请求的机会\"]},\"537\":{\"h\":\"写法\",\"t\":[\"public interface InvokerHandler { //汇报工作 void requestPermission(InvokerHandler handler); //处理核心逻辑 void handleRequest(int limit); //当前权限 int hasLimit(); //当前职位 String hasJob(); } /** * 责任链 */ public abstract class Leader implements InvokerHandler{ private InvokerHandler nextHandler; @Override public void requestPermission(InvokerHandler handler) { this.nextHandler = handler; } @Override public void handleRequest(int limit) { if (limit <= hasLimit()){ System.out.println(hasJob()+\\\"拥有权限\\\" +limit+\\\"额度，审批\\\"); }else{ if(nextHandler == null){ System.out.println(\\\"没有上级汇报对象\\\"); }else { nextHandler.handleRequest( limit ); } } } } public class Boss extends Leader { @Override public int hasLimit() { return Integer.MAX_VALUE; } @Override public String hasJob() { return \\\"老板\\\"; } } public class Director extends Leader{ @Override public int hasLimit() { return 5000; } @Override public String hasJob() { return \\\"主管\\\"; } } public class Group extends Leader{ @Override public int hasLimit() { return 3000; } @Override public String hasJob() { return \\\"组员\\\"; } } //经理 public class Manager extends Leader { @Override public int hasLimit() { return 10000; } @Override public String hasJob() { return \\\"经理\\\"; } } /** * 责任链模式 */ public class TestMain { public static void main(String[] args){ Boss boss = new Boss(); Manager manager = new Manager(); Director director = new Director(); Group group = new Group(); //确定汇报关系 group.requestPermission( director ); director.requestPermission( manager ); manager.requestPermission( boss ); boss.requestPermission( null ); //组员汇报 group.handleRequest( 2000 ); //主管处理 director.handleRequest( 300 ); //经理处理 manager.handleRequest( 20000 ); //老板处理 boss.handleRequest( 100 ); boss.handleRequest( 1000 ); boss.handleRequest( 900000 ); } } \"]},\"538\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"539\":{\"c\":[\"设计模式\"]},\"540\":{\"c\":[\"archive\"]},\"541\":{\"h\":\"设计模式-行为型-迭代器模式\"},\"542\":{\"h\":\"1、定义\",\"t\":[\"迭代器模式：一种遍历访问容器对象中各个元素的方法，不暴露该对象内部结构\"]},\"543\":{\"h\":\"写法\",\"t\":[\"/** * 迭代器模式 */ public interface Iterator<T> { /** * 是否有下一个元素 * @return */ boolean hasNext(); /** * 返回当前元素，并将位置移至下一位 */ T next(); } public interface Collection<T> { Iterator<T> iterator(); } /** * list列表迭代 * @param <T> */ public class ListIterator<T> implements Iterator<T>{ private List<T> array; private int position; public ListIterator(List<T> list){ this.array = list; position = 0; } @Override public boolean hasNext() { return !(position > array.size() -1 || array.get( position ) == null); } @Override public T next() { T element = array.get( position ); position ++ ; return element; } } /** * 雇员 */ public class Employee { private String name;// 姓名 private int age;// 年龄 private String sex;// 性别 private String position;// 职位 public Employee(String name, int age, String sex, String position) { this.name = name; this.age = age; this.sex = sex; this.position = position; } @Override public String toString() { return \\\"Employee{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", sex='\\\" + sex + '\\\\'' + \\\", position='\\\" + position + '\\\\'' + '}'; } } /** * 公司 */ public class CompanyLi implements Collection<Employee>{ private Iterator<Employee> iterator; public CompanyLi(){ List<Employee> list = new ArrayList<>( ); list.add(new Employee(\\\"小民\\\", 26, \\\"男\\\", \\\"程序猿\\\")); list.add(new Employee(\\\"小芸\\\", 22, \\\"女\\\", \\\"测试\\\")); list.add(new Employee(\\\"小方\\\", 18, \\\"女\\\", \\\"测试\\\")); list.add(new Employee(\\\"可儿\\\", 21, \\\"女\\\", \\\"设计\\\")); iterator = new ListIterator<>( list ); } @Override public Iterator<Employee> iterator() { return iterator; } } /** * * 迭代器模式 * * 遍历又不暴露细节 * * 支持对容器对象的多种遍历。弱化了容器类与遍历算法之间的关系 * */ public class TestMain { public static void main(String[] args) { CompanyLi companyLi = new CompanyLi(); //迭代 Iterator iterator = companyLi.iterator(); while (iterator.hasNext()){ System.out.println(iterator.next().toString()); } } } \"]},\"544\":{\"h\":\"代码示例\",\"t\":[\"https://github.com/yinlingchaoliu/23-design-pattern\"]},\"545\":{\"c\":[\"设计模式\"]},\"546\":{\"c\":[\"archive\"]},\"547\":{\"h\":\"并发编程\"},\"548\":{\"c\":[\"juc\"]},\"549\":{\"h\":\"虚拟机\"},\"550\":{\"c\":[\"jvm\"]},\"551\":{\"h\":\"网络\"},\"552\":{\"c\":[\"网络\"]},\"553\":{\"h\":\"网络基础\"},\"554\":{\"c\":[\"网络\"]},\"555\":{\"c\":[\"网络\"]},\"556\":{\"h\":\"重构\"},\"557\":{\"c\":[\"refactor\"]},\"558\":{\"h\":\"ASM手册-语法简介\",\"t\":[\"####1、动机\",\"1、为了效率 asm操作字节码是最快的，javassist cglib 基于此开发的。so 为了更极致获得速度和效率\",\"2、插桩技术 插桩技术很大程度用到此项技术，\",\"3、追求极致 技术进阶，升级打怪必经之路\"]},\"559\":{\"h\":\"2、简洁文档\",\"t\":[\"目标：简洁易用\",\"#####包路径划分 org.objectweb.asm -->signature 基于事件 , 类分析和写入 -->util 开发调试 -->common 类转换器 -->tree.anysis 分析\",\"#####visit拜访者设计模式\\n优点：便于快速访问\\n缺点：不易理解设计模式之一\"]},\"560\":{\"c\":[\"gradle插件\"]},\"561\":{\"c\":[\"archive\"]},\"562\":{\"h\":\"Android\"},\"563\":{\"c\":[\"fe\"]},\"564\":{\"h\":\"前端基础\"},\"565\":{\"c\":[\"fe\"]},\"566\":{\"h\":\"跨端技术\"},\"567\":{\"c\":[\"fe\"]},\"568\":{\"h\":\"Android系统源码分析\"},\"569\":{\"c\":[\"framework\"]},\"570\":{\"h\":\"framework指南\"},\"571\":{\"h\":\"指南\",\"t\":[\"本文以”提纲挈领，统摄全局“作为中心思想，以原理、架构图、交互方式、关键细节来指导。\",\"原理作为指北针，实时指引方向\",\"架构图作为画面，作为图形呈现\",\"交互作为机理，阐明运作流程\",\"关键细节作为线索,便于定点查找\",\"行文力求简洁,要言不烦, 便于在头脑中搭建一个思考模型，指引方向。\"]},\"572\":{\"h\":\"鸣谢\",\"t\":[\"《Android系统源代码情景分析》 罗升阳\",\"袁辉辉博客\",\"感谢两位大佬分享，指明了安卓framework学习方向\"]},\"573\":{\"h\":\"后记\",\"t\":[\"为了抓到纲要，快速应用于实战，结合两位大佬罗升阳和袁辉辉文章和博客。\",\"从浩如烟海的大部头，把原理的关键路径突现出来。\",\"读完收获\",\"1）应付于面试，来自framework层刁难问题\",\"2）头脑中底层原理提纲，根据工作需要，研究对应源码\",\"3）framework 插件化 热修复 进一步深入理解\",\"4）APM性能监控\"]},\"574\":{\"c\":[\"framework\"]},\"575\":{\"c\":[\"framework\"]},\"576\":{\"h\":\"微前端\"},\"577\":{\"c\":[\"fe\"]},\"578\":{\"h\":\"工具\"},\"579\":{\"c\":[\"基本功\"]},\"580\":{\"h\":\"OKR落地-思维导图\",\"t\":[\"OKR落地.png\",\"陈桐原创\\n转载请注明地址:https://www.jianshu.com/u/bdcce32c05dd\"]},\"581\":{\"c\":[\"项目管理\"]},\"582\":{\"c\":[\"archive\"]},\"583\":{\"h\":\"SMART原则\",\"t\":[\"所谓SMART原则，即：\\n1、目标是具体的（Specific）\\n2、目标必须是可以衡量的（Measurable）\\n3、目标必须是可达到的（Attainable）\\n4、目标必须和其他目标具有相关性（Relevant）\\n5、目标必须就有明确的截止期限（Time-based）\"]},\"584\":{\"c\":[\"项目管理\"]},\"585\":{\"c\":[\"archive\"]},\"586\":{\"h\":\"如何向上报告\",\"t\":[\"总结报告是向上看的\",\"确认项目时间范围 项目目标 项目成果 是否达成\",\"时间、范围、结果\",\"领导不懂细节\",\"执行项目例会 周期性例会 临时例会 周期性会议，临时性会议\",\"项目关键里程碑 项目资源， 因为项目紧急。 加大资源投入\",\"996 9107 协调资源 开发，测试\",\"亮点，简单 报告不要平铺，有结构 报告写得好\",\"向上管理。 保持相对稳定和付出\",\"向上汇报\",\"进度 ，提前2周 协调资源\",\"进度，资源，质量(测试质量)\",\"如何做项目管理\\n项目例会机制 周期性例会\"]},\"587\":{\"c\":[\"项目管理\"]},\"588\":{\"c\":[\"archive\"]},\"589\":{\"h\":\"目标管理法\",\"t\":[\"目标管理法\",\"目标 沟通：结果，成长变化\",\"OKR较为重要的点 第一个是目标设定 另外一词语是沟通 第三个是协同 第四个词是思维方式\",\"OKR的使用是可以刺激我们团队的3个内在在动机：自主，胜任和关系\",\"OKR这5个特性 公开透明 敏捷开放 自下而上 和绩效理解不做强挂钩 强互动\",\"image.png\"]},\"590\":{\"c\":[\"项目管理\"]},\"591\":{\"c\":[\"archive\"]},\"592\":{\"h\":\"这就是OKR封面评论\",\"t\":[\"####关键词\\n好注意+卓越的执行\\n执行力\\n确定更高目标，快速行动并实现超越\\n设定目标和定义关键结果，从而使组织保持一致并激发高绩效\"]},\"593\":{\"c\":[\"项目管理\"]},\"594\":{\"c\":[\"archive\"]},\"595\":{\"h\":\"金服APP-民生项目总结\",\"t\":[\"关键指标达成：11月27日UAT民生审核通过，比原计划12月9日审核通过整体提前2周\",\"背景：民生银行上线流程复杂，上线前2周要申请RSA证书，上线前1周准备配置参数，上线前必须UAT，BBJ测试报告民生审核通过\",\"接入民生银行金服组重大事件回顾：\",\"11月6日产品评审通过，确定民生1期需求范围开户，签约，民生二类电子账户，充值，提现，资产查询，零资产更换银行卡。\",\"11月8日排期确定开发排期，预计11月30日开发提测，12月9日UAT民生审核通过\",\"11月8日运维梳理民生上线流程，民生上线不可控因素多，项目确立方向：开发全员996为测试留出充分时间，测试增加资源996为民生上线留出充足时间。\",\"11月8日ios提出第12次发版审核需求，考虑金融app苹果审核未来更加严格，ios周末加班开发，ios审核需求与民生项目并行\",\"11月12日 ios提交苹果应用市场，并审核成功，11月13日苹果应用市场正式发布\",\"11月11日 考虑项目并行风险，民生沟通协调问题，11月第二周，项目决定周二、周四早上10点开会同步进度民生银行和ios审核进度，抽调后端资源以996方式支持开发\",\"11月16日 移动端开户、签约、产品列表、民生详情开发提测\",\"11月18日 和信贷退出，集团其他部分存在裁员风波，为避免民生银行因为金融系统风险考虑，调整项目策略 1)金服项目按照\\\"9107\\\"节奏工作，每天早上10点早会，下午6点晚会同步项目进度及风险 2)后端抽调人员，开发同学元超和云飞带头加班，提前大幅度进度 3)前端同学抽调人员加班，将进度压缩 4）移动端按照“9107”节奏，保证进度提前 5）测试提前接入测试方式，为开发节省时间\",\"11月20日 后端与民生对接接口开发完毕并提测\",\"11月22日下午所有开发整体提测，与民生对接上线流程\",\"11月23日测试抽调资源，加班996方式，保障上线进度能提前\",\"11月25日bug整体第一轮修复\",\"11月27日第一轮测试bug修复完毕，提交UAT测试报告给民生银行，并下午审核通过。\",\"项目上与民生商定，第1期12月6日上线，余下功能：“销户”，“解约”，“非零资产换卡”放在第2期开发，约定预计12月20日2期上线\",\"综上，和信金服项目，产品需求明确，改动较少，后端开发积极与民生开发联调，整个前端全部996，测试提前进入协助，项目与运维主动和民生协调沟通，团队整体配合给力，上下一心，让民生项目开发和测试进度提前2周\"]},\"596\":{\"c\":[\"项目管理\"]},\"597\":{\"c\":[\"archive\"]},\"598\":{\"h\":\"项目风险监控\",\"t\":[\"#####一、近期思考 最近去医院听课，高级专家大夫定义高危产妇，凡是出现几种指标特征，存在可能，均为高危。延展这个思路，定义几个指标，来监控项目风险，起到治未病效果\",\"#####二、关键指标\",\"1、项目中组长，责任心不强，做事主动性不强，意味着在某一天在该环节出现风险\",\"2、组员提升为组长，表现问题，只管个人，不管组责任\",\"3、凡事讲流程的人，遇见突发情况也会出现风险\",\"4、做事顺序是按照前后顺序做的，前期顺利，后期有突发情况导致加班。\",\"5、做事经常是苦劳的，领导不认可的\",\"6、项目经理或组长平时管理不严格的\",\"7、产品评审环节，不重视的，事后返工的\",\"8、项目经理过于身先士卒，与组员沟通过多的，理解信息局部不全\",\"9、过多根据能力和态度判断一个人，应根据按时交付结果作为客观判断依据\",\"10、项目排期出现重大不协调的，各个组搭配不好的\",\"11、关键时间点，没有严格守卫住的\",\"12、项目负责人内心对目标不坚定的，内心经常动摇的\",\"13、人员组合搭配不当，过于关注某些缺点，并放大的。\",\"#####三、顺向逻辑\\n前置资源准备 eg:UI提前询问\\n预知风险，提前做好监测\\n流程：\\n1、需求评审\\n2、关键时间点\\n3、排期细化\\n4、资源冲突，顺序安排\\n5、排期评审\\n6、项目关键路径\\n7、定期会议同步进度，问题，风险\\n8、资源协调与沟通\\n9、项目运行中所处当前位置，在整体流程状态\"]},\"599\":{\"c\":[\"项目管理\"]},\"600\":{\"c\":[\"archive\"]},\"601\":{\"h\":\"环境搭建\"},\"602\":{\"h\":\"Uncaught SyntaxError Unexpected token  '/<' (at\"},\"603\":{\"h\":\"背景\",\"t\":[\"taro h5\",\" yarn dev:h5 # 测试h5 页面没有问题 本地调试没有问题 yarn build:h5 serve -s dist # 生产部署 dist文件时，报错 Uncaught SyntaxError: Unexpected token '/<' (at \"]},\"604\":{\"h\":\"解决方案\",\"t\":[\"问题: 在打包后引入的资源路径出错的问题\",\"publicPath 根据情况设置\",\"核心关注点 publicPath basename 属性\",\"dev.js\",\"module.exports = { env: { NODE_ENV: '\\\"development\\\"', }, defineConstants: {}, mini: {}, h5: { publicPath: \\\"/h5\\\", router: { basename: \\\"/h5\\\", mode: \\\"browser\\\", }, devServer: { port: 10086, overlay: false, host: \\\"localhost\\\", }, }, }; \",\"prod.js\",\"module.exports = { env: { NODE_ENV: '\\\"production\\\"', }, defineConstants: {}, mini: {}, h5: { publicPath: \\\"/\\\", router: { basename: \\\"\\\", mode: \\\"browser\\\", }, devServer: { port: 10086, overlay: false, host: \\\"localhost\\\", }, }, }; \"]},\"605\":{\"c\":[\"server\"]},\"606\":{\"c\":[\"env\"]},\"607\":{\"h\":\"maven上传\"},\"608\":{\"h\":\"maven上传\",\"t\":[\"私服\",\" <!-- aliyun 私服 上传仓库 --> <distributionManagement> <repository> <id>rdc-releases</id> <url>https://repo.rdc.aliyun.com/repository/2398024-release-VBrnHs/</url> </repository> <snapshotRepository> <id>rdc-snapshots</id> <url>https://repo.rdc.aliyun.com/repository/2398024-snapshot-ze8pIw/</url> </snapshotRepository> </distributionManagement> \",\"maven库上传 从common 开始\"]},\"609\":{\"c\":[\"server\"]},\"610\":{\"c\":[\"env\"]},\"611\":{\"h\":\"mysql没有权限\",\"t\":[\"java.sql.SQLException: Access denied for user 'root'@'localhost'\"]},\"612\":{\"h\":\"正常权限\",\"t\":[\"sudo mysql -u root -p #输入密码 \"]},\"613\":{\"h\":\"授权\",\"t\":[\" grant all privileges on *.* to root@'localhost' identified by '111111'; update mysql.user set plugin='mysql_native_password' where user = 'root'; FLUSH PRIVILEGES; exit # 启动服务 sudo systemctl start redis-server # 重启服务 sudo service mysql restart # 查看启动状态 sudo systemctl status mysql.service \"]},\"614\":{\"h\":\"查看user表\",\"t\":[\"mysql> select * from mysql.user| Host | User | Select_priv | Insert_priv | Update_priv | Delete_priv | Create_priv | Drop_priv | Reload_priv | Shutdown_priv | Process_priv | File_priv | Grant_priv | References_priv | Index_priv | Alter_priv | Show_db_priv | Super_priv | Create_tmp_table_priv | Lock_tables_priv | Execute_priv | Repl_slave_priv | Repl_client_priv | Create_view_priv | Show_view_priv | Create_routine_priv | Alter_routine_priv | Create_user_priv | Event_priv | Trigger_priv | Create_tablespace_priv | ssl_type | ssl_cipher | x509_issuer | x509_subject | max_questions | max_updates | max_connections | max_user_connections | plugin | authentication_string | password_expired | password_last_changed | password_lifetime | account_locked || localhost | root | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | | | | | 0 | 0 | 0 | 0 | mysql_native_password | *FD571203974BA9AFE270FE62151AE967ECA5E0AA | N | 2024-04-19 13:33:48 | NULL | N | | localhost | mysql.session | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | Y | N | N | N | N | N | N | N | N | N | N | N | N | N | | | | | 0 | 0 | 0 | 0 | mysql_native_password | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | N | 2024-04-19 13:33:48 | NULL | Y | | localhost | mysql.sys | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | | | | | 0 | 0 | 0 | 0 | mysql_native_password | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | N | 2024-04-19 13:33:48 | NULL | Y | | localhost | debian-sys-maint | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | | | | | 0 | 0 | 0 | 0 | mysql_native_password | *643B901503606E36CC7E4672BFA38821AA111C13 | N | 2024-04-19 13:33:48 | NULL | N | | % | root | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | N | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | | | | | 0 | 0 | 0 | 0 | mysql_native_password | *FD571203974BA9AFE270FE62151AE967ECA5E0AA | N | 2024-04-19 16:05:57 | NULL | N |rows in set (0.00 sec) \"]},\"615\":{\"h\":\"user表结构和数据\",\"t\":[\"/* Navicat Premium Data Transfer Source Server : 商城阿里云 Source Server Type : MySQL Source Server Version : 50742 Source Host : 101.201.33.54:3306 Source Schema : mysql Target Server Type : MySQL Target Server Version : 50742 File Encoding : 65001 Date: 25/04/2024 18:00:55 */ SET NAMES utf8mb4; SET FOREIGN_KEY_CHECKS = 0; -- ---------------------------- -- Table structure for user -- ---------------------------- DROP TABLE IF EXISTS `user`; CREATE TABLE `user` ( `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '', `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '', `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Reload_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Shutdown_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Process_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `File_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Show_db_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Super_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Repl_slave_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Repl_client_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Create_user_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `Create_tablespace_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf8 NOT NULL DEFAULT '', `ssl_cipher` blob NOT NULL, `x509_issuer` blob NOT NULL, `x509_subject` blob NOT NULL, `max_questions` int(11) unsigned NOT NULL DEFAULT '0', `max_updates` int(11) unsigned NOT NULL DEFAULT '0', `max_connections` int(11) unsigned NOT NULL DEFAULT '0', `max_user_connections` int(11) unsigned NOT NULL DEFAULT '0', `plugin` char(64) COLLATE utf8_bin NOT NULL DEFAULT 'mysql_native_password', `authentication_string` text COLLATE utf8_bin, `password_expired` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', `password_last_changed` timestamp NULL DEFAULT NULL, `password_lifetime` smallint(5) unsigned DEFAULT NULL, `account_locked` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N', PRIMARY KEY (`Host`,`User`) ) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges'; -- ---------------------------- -- Records of user -- ---------------------------- BEGIN; INSERT INTO `user` VALUES ('localhost', 'root', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', '', '', '', '', 0, 0, 0, 0, 'mysql_native_password', '*FD571203974BA9AFE270FE62151AE967ECA5E0AA', 'N', '2024-04-19 13:33:48', NULL, 'N'); INSERT INTO `user` VALUES ('localhost', 'mysql.session', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'Y', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', '', '', '', '', 0, 0, 0, 0, 'mysql_native_password', '*THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE', 'N', '2024-04-19 13:33:48', NULL, 'Y'); INSERT INTO `user` VALUES ('localhost', 'mysql.sys', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', '', '', '', '', 0, 0, 0, 0, 'mysql_native_password', '*THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE', 'N', '2024-04-19 13:33:48', NULL, 'Y'); INSERT INTO `user` VALUES ('localhost', 'debian-sys-maint', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', '', '', '', '', 0, 0, 0, 0, 'mysql_native_password', '*643B901503606E36CC7E4672BFA38821AA111C13', 'N', '2024-04-19 13:33:48', NULL, 'N'); INSERT INTO `user` VALUES ('%', 'root', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'N', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', '', '', '', '', 0, 0, 0, 0, 'mysql_native_password', '*FD571203974BA9AFE270FE62151AE967ECA5E0AA', 'N', '2024-04-19 16:05:57', NULL, 'N'); COMMIT; SET FOREIGN_KEY_CHECKS = 1; \"]},\"616\":{\"c\":[\"server\"]},\"617\":{\"c\":[\"env\"]},\"618\":{\"h\":\"mysql解决1045\",\"t\":[\"1045 - Access denied for user using password: YES\"]},\"619\":{\"h\":\"强行提升权限\",\"t\":[\"1、关闭 mysql服务 sudo /usr/local/MySQL/support-files/mysql.server stop 2、进入mysql目录 cd /usr/local/mysql/bin 3、提升权限 sudo su 4、重启服务授权(不要关闭该终端) ./mysqld_safe --skip-grant-tables & 5、新启动命令行窗口进入 #直接进入mysql模式 mysql #进入mysql数据库 mysql> use mysql # 授权 mysql> flush privileges; \"]},\"620\":{\"h\":\"正常权限\",\"t\":[\"sudo mysql -u root -p #输入密码 \"]},\"621\":{\"h\":\"更新user表\",\"t\":[\" update mysql.user set authentication_string=PASSWORD('111111') where user = 'root'; FLUSH PRIVILEGES; exit \"]},\"622\":{\"h\":\"查看mysql.user表 判断需要修改字段\",\"t\":[\"mysql> select * from mysql.user| Host | User | Select_priv | Insert_priv | Update_priv | Delete_priv | Create_priv | Drop_priv | Reload_priv | Shutdown_priv | Process_priv | File_priv | Grant_priv | References_priv | Index_priv | Alter_priv | Show_db_priv | Super_priv | Create_tmp_table_priv | Lock_tables_priv | Execute_priv | Repl_slave_priv | Repl_client_priv | Create_view_priv | Show_view_priv | Create_routine_priv | Alter_routine_priv | Create_user_priv | Event_priv | Trigger_priv | Create_tablespace_priv | ssl_type | ssl_cipher | x509_issuer | x509_subject | max_questions | max_updates | max_connections | max_user_connections | plugin | authentication_string | password_expired | password_last_changed | password_lifetime | account_locked || localhost | root | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | | | | | 0 | 0 | 0 | 0 | mysql_native_password | *25733098EE214D595C27E3CB8BEE05BAC78A7F4D | Y | 2023-04-04 21:27:17 | NULL | N | | localhost | mysql.sys | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | | | | | 0 | 0 | 0 | 0 | mysql_native_password | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | N | 2023-04-04 21:27:17 | NULL | Y |rows in set (0.00 sec) \"]},\"623\":{\"c\":[\"server\"]},\"624\":{\"c\":[\"env\"]},\"625\":{\"h\":\"mysql远程开放3306\"},\"626\":{\"h\":\"阿里安全组开启3306端口\"},\"627\":{\"h\":\"mysql 支持远程连接配置\",\"t\":[\"vi /etc/my.cnf [mysqld] bind-address = 0.0.0.0 vi /etc/mysql/mysql.conf.d/mysqld.cnf # 注释掉 bind-address # bind-address = 127.0.0.1 \"]},\"628\":{\"h\":\"重启服务\",\"t\":[\"sudo service mysql restart \"]},\"629\":{\"h\":\"配置mysql权限\",\"t\":[\"mysql -u root -p #授权账号远程连接 # ‘root’是错的 会导致数据库 有双引号 grant all privileges on *.* to root@'%' identified by '111111'; FLUSH PRIVILEGES; \"]},\"630\":{\"h\":\"查询生效的user表\",\"t\":[\"mysql> select * from mysql.user| Host | User | Select_priv | Insert_priv | Update_priv | Delete_priv | Create_priv | Drop_priv | Reload_priv | Shutdown_priv | Process_priv | File_priv | Grant_priv | References_priv | Index_priv | Alter_priv | Show_db_priv | Super_priv | Create_tmp_table_priv | Lock_tables_priv | Execute_priv | Repl_slave_priv | Repl_client_priv | Create_view_priv | Show_view_priv | Create_routine_priv | Alter_routine_priv | Create_user_priv | Event_priv | Trigger_priv | Create_tablespace_priv | ssl_type | ssl_cipher | x509_issuer | x509_subject | max_questions | max_updates | max_connections | max_user_connections | plugin | authentication_string | password_expired | password_last_changed | password_lifetime | account_locked | +-----------+------------------+-------------+-------------+-------------+-------------+-------------+-----------+-------------+---------------+--------------+-----------+------------+-----------------+------------+------------+--------------+------------+-----------------------+------------------+--------------+-----------------+------------------+------------------+----------------+---------------------+--------------------+------------------+------------+--------------+------------------------+----------+------------+-------------+--------------+---------------+-------------+-----------------+----------------------+-----------------------+-------------------------------------------+------------------+-----------------------+-------------------+----------------+ | localhost | root | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | | | | | 0 | 0 | 0 | 0 | auth_socket | *FD571203974BA9AFE270FE62151AE967ECA5E0AA | N | 2024-04-19 13:33:48 | NULL | N | | localhost | mysql.session | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | Y | N | N | N | N | N | N | N | N | N | N | N | N | N | | | | | 0 | 0 | 0 | 0 | mysql_native_password | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | N | 2024-04-19 13:33:48 | NULL | Y | | localhost | mysql.sys | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | | | | | 0 | 0 | 0 | 0 | mysql_native_password | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | N | 2024-04-19 13:33:48 | NULL | Y | | localhost | debian-sys-maint | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | | | | | 0 | 0 | 0 | 0 | mysql_native_password | *643B901503606E36CC7E4672BFA38821AA111C13 | N | 2024-04-19 13:33:48 | NULL | N | | % | root | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | N | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | | | | | 0 | 0 | 0 | 0 | mysql_native_password | *FD571203974BA9AFE270FE62151AE967ECA5E0AA | N | 2024-04-19 16:05:57 | NULL | N |rows in set (0.00 sec) \"]},\"631\":{\"h\":\"mysql配置\",\"t\":[\"this is incompatible with sql_mode=only_full_group_by解决方案\",\"修改2个文件\",\"vi /etc/my.cnf vi /etc/mysql/mysql.conf.d/mysqld.cnf \",\"核心内容\",\"[mysqld] sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION \",\"完整版\",\"# Example MySQL config file for small systems. # # This is for a system with little memory (<= 64M) where MySQL is only used # from time to time and it's important that the mysqld daemon # doesn't use much resources. # # MySQL programs look for option files in a set of # locations which depend on the deployment platform. # You can copy this option file to one of those # locations. For information about these locations, see: # http://dev.mysql.com/doc/mysql/en/option-files.html # # In this file, you can use all long options that a program supports. # If you want to know which options a program supports, run the program # with the \\\"--help\\\" option. # Here follows entries for some specific programs # support remote connect port 3306 # The MySQL server [mysqld] bind-address = 0.0.0.0 default-storage-engine=INNODB character-set-server=utf8 collation-server=utf8_general_ci port = 3306 socket = /tmp/mysql.sock skip-external-locking key_buffer_size = 16K max_allowed_packet = 1M table_open_cache = 4 sort_buffer_size = 64K read_buffer_size = 256K read_rnd_buffer_size = 256K net_buffer_length = 2K thread_stack = 128K # Don't listen on a TCP/IP port at all. This can be a security enhancement, # if all processes that need to connect to mysqld run on the same host. # All interaction with mysqld must be made via Unix sockets or named pipes. # Note that using this option without enabling named pipes on Windows # (using the \\\"enable-named-pipe\\\" option) will render mysqld useless! # #skip-networking server-id = 1 # Uncomment the following if you want to log updates #log-bin=mysql-bin # binary logging format - mixed recommended #binlog_format=mixed # Causes updates to non-transactional engines using statement format to be # written directly to binary log. Before using this option make sure that # there are no dependencies between transactional and non-transactional # tables such as in the statement INSERT INTO t_myisam SELECT * FROM # t_innodb; otherwise, slaves may diverge from the master. #binlog_direct_non_transactional_updates=TRUE # Uncomment the following if you are using InnoDB tables #innodb_data_home_dir = /usr/local/mysql/data #innodb_data_file_path = ibdata1:10M:autoextend #innodb_log_group_home_dir = /usr/local/mysql/data # You can set .._buffer_pool_size up to 50 - 80 % # of RAM but beware of setting memory usage too high #innodb_buffer_pool_size = 16M #innodb_additional_mem_pool_size = 2M # Set .._log_file_size to 25 % of buffer pool size #innodb_log_file_size = 5M #innodb_log_buffer_size = 8M #innodb_flush_log_at_trx_commit = 1 #innodb_lock_wait_timeout = 50 [mysqldump] quick max_allowed_packet = 16M [mysql] no-auto-rehash # Remove the next comment character if you are not familiar with SQL #safe-updates [myisamchk] key_buffer_size = 8M sort_buffer_size = 8M [mysqlhotcopy] interactive-timeout [mysqld] sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION \"]},\"632\":{\"c\":[\"server\"]},\"633\":{\"c\":[\"env\"]},\"634\":{\"h\":\"Nginx配置fe\"},\"635\":{\"h\":\"本文未验证\",\"t\":[\"Nginx配置fe\",\"本文为大家介绍了CentOS 7 64位 安装 nginx与跨域配置 的详细步骤\",\"Nginx官方提供了Yum源\"]},\"636\":{\"h\":\"1、安装nginx\",\"t\":[\"yum install -y nginx \"]},\"637\":{\"h\":\"2、启动Nginx并设置开机自动运行\",\"t\":[\"systemctl start nginx.service systemctl enable nginx.service \"]},\"638\":{\"h\":\"3、配置nginx\",\"t\":[\"vi /etc/nginx/nginx.conf \",\"使用上面的命令编辑nginx的配置文件，先把配置文件中的server注释掉，然后添加下面的语句\",\"#小程序接口的域名配置，小程序规定要https，填写对应域名，并把https证书上传至服务器 server { listen 443; server_name mall4j-api.gz-yami.com; ssl on; ssl_certificate /usr/share/nginx/cert/xxxxxxxxxxxxxxxx.pem; ssl_certificate_key /usr/share/nginx/cert/xxxxxxxxxxxxxxxx.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; location / { proxy_pass http://127.0.0.1:8112; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } #后台域名配置，后台vue页面代码上传至 /usr/share/nginx/admin server { listen 80; server_name mall4j-admin.gz-yami.com; root /usr/share/nginx/admin; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / { } # 跨域配置 location /apis { rewrite ^/apis/(.*)$ /$1 break; proxy_pass http://127.0.0.1:8111; } } \"]},\"639\":{\"h\":\"4、重启nginx，让配置生效\",\"t\":[\"systemctl restart nginx.service \"]},\"640\":{\"h\":\"5、配置vue项目\",\"t\":[\"server { listen 80; server_name cloud-platform.mall4j.com; location / { try_files $uri $uri/ /; root /usr/share/nginx/html/dist; } error_page 404 /404.html; location = /404-light.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } } \"]},\"641\":{\"c\":[\"server\"]},\"642\":{\"c\":[\"env\"]},\"643\":{\"h\":\"scp上传免密\"},\"644\":{\"h\":\"scp上传免密\",\"t\":[\"问题: 一个expect脚本 不支持多个上传交互 解决方案 拆分 expect脚本 for循环\",\"scp.sh\",\"#!/usr/bin/expect -f set timeout 30 # 传递第一个参数 set file [lindex $argv 0] # 上传文件 spawn scp $file root@101.168.1.1:/root/tomcat/bin # expect \\\"*yes/no*\\\" # send \\\"yes\\\\r\\\" expect \\\"*password:\\\" send \\\"xxxxxx\\\\r\\\" expect eof \"]},\"645\":{\"h\":\"统一上传\",\"t\":[\"upload.sh\",\"#!/bin/sh ./scp.sh ./ruoyi-admin/target/ruoyi-admin.jar sleep 2 ./scp.sh ry.sh sleep 2 ./scp.sh port.sh \"]},\"646\":{\"c\":[\"server\"]},\"647\":{\"c\":[\"env\"]},\"648\":{\"h\":\"服务端配置跨域CORS\"},\"649\":{\"h\":\"同源策略\",\"t\":[\"为了安全性浏览器有一个同源策略, 一个域名下的应用使用许多数据或者请求的获取, 被限制在同一域名, 协议, 端口, 不然浏览器不会允许请求这些资源, 直接请求就发不出去。\",\"同源的3种行为:\",\"（1） Cookie、LocalStorage 和 IndexDB 无法读取。\",\"（2） DOM 无法获得。\",\"（3） AJAX 请求不能发送。\",\"但是随着互联网的发展, 我们确实需要资源或者服务分布到不同的域当中, 比如前后端分离后, 前端应用和后端的API服务器可能就处于不同的域下。\",\"要跨域去获取数据有3中方法: JSONP, WebSocket, CORS。 这里主要讲CORS的使用与配置。\",\"CORS 使用简介:\",\"为了满足新时期的需求, W3C拟定了新的标准, \\\"跨域资源共享\\\"（Cross-origin resource sharing）来使得我们可以实现跨域访问。这里需要注意的是, 这个新的协议完全是由 浏览器 和 服务端 来决定的, 而对于前端开发者来说是完全隐藏了细节的, 前端开发者这里不需要增加任何额外的工作, 浏览器会自动的识别请求是否是跨域请求, 从而与服务端完成通信, 所以只需要后端开发者正确的设置后。\"]},\"650\":{\"h\":\"服务端配置跨域CORS\",\"t\":[\"SpringBoot2.4.0后 用[allowedOriginPatterns]代替[allowedOrigins]\",\"package com.ruoyi.framework.config; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.cors.CorsConfiguration; import org.springframework.web.cors.UrlBasedCorsConfigurationSource; import org.springframework.web.filter.CorsFilter; import org.springframework.web.servlet.config.annotation.CorsRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; import java.util.concurrent.TimeUnit; /** * 通用配置 * * @author ruoyi */ @Configuration public class ResourcesConfig implements WebMvcConfigurer { @Override public void addCorsMappings(CorsRegistry registry) { // 设置允许跨域的路径 registry.addMapping(\\\"/**\\\") // 设置允许跨域请求的域名 // .allowedOrigins(\\\"*\\\") .allowedOriginPatterns(\\\"*\\\") // 是否允许证书 .allowCredentials(true) // 设置允许的方法 .allowedMethods(\\\"POST\\\", \\\"GET\\\", \\\"PUT\\\", \\\"OPTIONS\\\", \\\"DELETE\\\") // 设置允许的header属性 .allowedHeaders(\\\"*\\\") // 跨域允许时间 .maxAge(3600); } @Bean public CorsFilter corsFilter() { CorsConfiguration config = new CorsConfiguration(); config.setAllowCredentials(true);//允许Cookie // config.addAllowedOrigin(\\\"*\\\");//允许任何域名 config.addAllowedOriginPattern(\\\"*\\\"); config.addAllowedHeader(\\\"*\\\");//允许任何头 config.addAllowedMethod(\\\"*\\\");//允许任何方法 config.setMaxAge(18000L);//设置预检请求保持时间，避免频繁发送预检请求 // 对接口配置跨域设置 UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(); source.registerCorsConfiguration(\\\"/**\\\", config); return new CorsFilter(source); } } \"]},\"651\":{\"h\":\"nginx 配置跨域\",\"t\":[\" server{ listen 2000; server_name api_server; root path_to_app; charset utf8; location / { add_header 'Access-Control-Allow-Origin' '*'; add_header 'Access-Control-Allow-Methods' 'POST, GET, PUT, DELETE, OPTIONS'; add_header 'Access-Control-Max-Age' 1728000; add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range'; add_header 'Access-Control-Expose-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range'; if ($request_method = 'OPTIONS') { return 204; } } } \"]},\"652\":{\"h\":\"express服务\",\"t\":[\"// fix cross-domain 跨域问题 app.all('*',function (req, res, next) { res.header('Access-Control-Allow-Origin', '*'); res.header('Access-Control-Allow-Headers', 'Content-Type, Content-Length, Authorization, Accept, X-Requested-With'); res.header('Access-Control-Allow-Methods', 'PUT, POST, GET, DELETE, OPTIONS'); if (req.method == 'OPTIONS') { res.send(200); } else { next(); } }); \"]},\"653\":{\"c\":[\"server\"]},\"654\":{\"c\":[\"env\"]},\"655\":{\"h\":\"taro 生产部署路由失效\"},\"656\":{\"h\":\"背景\",\"t\":[\"taro h5\",\" yarn dev:h5 # 测试h5 页面没有问题 本地调试没有问题 yarn build:h5 serve -s dist # 生产部署 dist文件时，路由失效 \",\"tab可切换 路由失效\"]},\"657\":{\"h\":\"解决方案\",\"t\":[\"dist部署 要求语法严格，否则无法路由跳转\",\"basename 为空字符串\",\"app.config.js 路由要全路径 eg: '/pages/index/index'\",\"prod.js\",\"module.exports = { env: { NODE_ENV: '\\\"production\\\"', }, defineConstants: {}, mini: {}, h5: { publicPath: \\\"/\\\", router: { basename: \\\"\\\", mode: \\\"browser\\\", }, devServer: { port: 10086, overlay: false, host: \\\"localhost\\\", }, }, }; \",\"错误 app.config.js\",\"应为 \\\"/pages/index/index\\\"\",\"export default { pages: [ \\\"pages/index/index\\\", \\\"pages/catalog/catalog\\\", \\\"pages/cart/cart\\\", \\\"pages/mine/index/index\\\", ] }; \",\"正确的 app.config.js\",\"export default { pages: [ \\\"/pages/index/index\\\", \\\"/pages/catalog/catalog\\\", \\\"/pages/cart/cart\\\", \\\"/pages/mine/index/index\\\", ] }; \",\"路由正常\"]},\"658\":{\"c\":[\"server\"]},\"659\":{\"c\":[\"env\"]},\"660\":{\"h\":\"ubuntu防火墙ufw\"},\"661\":{\"h\":\"ubuntu 采用防火墙 ufw\",\"t\":[\"sudo ufw enable # 开启防火墙 sudo ufw disable # 关闭防火墙 sudo ufw status # 查看端口状态 \"]},\"662\":{\"h\":\"开放端口\",\"t\":[\"# 允许外部访问3306端口（tcp/udp） sudo ufw allow 3306 # 允许此IP访问本机所有端口 sudo ufw allow from 192.168.1.100 # 指定IP段访问特定端口 sudo ufw proto tcp from 192.168.1.0/24 to any port 443 # 删除3306端口的访问权限（关闭端口的访问，外部无法访问该端口） sudo ufw delete allow 3306 \"]},\"663\":{\"c\":[\"server\"]},\"664\":{\"c\":[\"env\"]},\"665\":{\"h\":\"vue根据views目录生成路由\"},\"666\":{\"h\":\"path匹配方法\",\"t\":[\" { path: \\\"/redirect\\\", component: Layout, hidden: true, children: [ { path: \\\"/redirect/:path(.*)\\\", component: () => import(\\\"@/views/redirect\\\"), }, ], } \"]},\"667\":{\"h\":\"vue根据views目录生成路由\",\"t\":[\"读取目录方法\",\"function getRoutesByViews() { const compContext = require.context(\\\"../views\\\", true, /index\\\\.vue$/); const routes = compContext .keys() .map((key) => { var name = key.replace(\\\"/index.vue\\\", \\\"\\\").replace(\\\".\\\", \\\"\\\"); var compPath = key.replace(\\\"/index.vue\\\", \\\"\\\").replace(\\\"./\\\", \\\"@views/\\\"); //: compContext(key).default // component: () => import(compPath), console.log(name); console.log(compPath); return { name, path: name, component: () => import(compPath), hidden: true, redirect: \\\"noredirect\\\", }; }) .filter((item) => { return item.name !== \\\"\\\"; }); return routes; } const viewsRoutes = getRoutesByViews(); console.log(\\\"routesDir==========\\\"); console.log(viewsRoutes); \"]},\"668\":{\"h\":\"人工注册\",\"t\":[\"生产环境 需要人工注册路由 否则不能跳转 module not found\",\" const routes=[ { path: \\\"/pms\\\", component: Layout, hidden: true, redirect: \\\"noredirect\\\", children: [ { path: \\\"product\\\", component: () => import(\\\"@/views/pms/product/index\\\"), name: \\\"product\\\", meta: { title: \\\"商品列表\\\", icon: \\\"user\\\" }, }, { path: \\\"brand\\\", component: () => import(\\\"@/views/pms/brand/index\\\"), name: \\\"brand\\\", meta: { title: \\\"品牌列表\\\", icon: \\\"user\\\" }, }, { path: \\\"productCategory\\\", component: () => import(\\\"@/views/pms/productCategory/index\\\"), name: \\\"productCategory\\\", meta: { title: \\\"商品分类\\\", icon: \\\"user\\\" }, }, ], }, { path: \\\"/order\\\", component: Layout, hidden: true, redirect: \\\"noredirect\\\", children: [ { path: \\\"order\\\", component: () => import(\\\"@/views/oms/order/index\\\"), name: \\\"order\\\", meta: { title: \\\"订单列表\\\", icon: \\\"user\\\" }, }, { path: \\\"aftersale\\\", component: () => import(\\\"@/views/oms/aftersale/index\\\"), name: \\\"aftersale\\\", meta: { title: \\\"售后详情\\\", icon: \\\"user\\\" }, }, ], }, { path: \\\"/member\\\", component: Layout, hidden: true, redirect: \\\"noredirect\\\", children: [ { path: \\\"member\\\", component: () => import(\\\"@/views/ums/member/index\\\"), name: \\\"member\\\", meta: { title: \\\"会员列表\\\", icon: \\\"user\\\" }, }, { path: \\\"memberAddress\\\", component: () => import(\\\"@/views/ums/memberAddress/index\\\"), name: \\\"memberAddress\\\", meta: { title: \\\"会员收货地址\\\", icon: \\\"user\\\" }, }, { path: \\\"shoppingCart\\\", component: () => import(\\\"@/views/ums/memberCart/index\\\"), name: \\\"shoppingCart\\\", meta: { title: \\\"购物车列表\\\", icon: \\\"user\\\" }, }, ], }, { path: \\\"/system\\\", component: Layout, hidden: true, redirect: \\\"noredirect\\\", children: [ { path: \\\"user\\\", component: () => import(\\\"@/views/system/user/index\\\"), name: \\\"user\\\", meta: { title: \\\"用户管理\\\", icon: \\\"user\\\" }, }, { path: \\\"role\\\", component: () => import(\\\"@/views/system/role/index\\\"), name: \\\"role\\\", meta: { title: \\\"角色管理\\\", icon: \\\"user\\\" }, }, { path: \\\"menu\\\", component: () => import(\\\"@/views/system/menu/index\\\"), name: \\\"menu\\\", meta: { title: \\\"菜单管理\\\", icon: \\\"user\\\" }, }, { path: \\\"dept\\\", component: () => import(\\\"@/views/system/dept/index\\\"), name: \\\"dept\\\", meta: { title: \\\"部门管理\\\", icon: \\\"user\\\" }, }, { path: \\\"post\\\", component: () => import(\\\"@/views/system/post/index\\\"), name: \\\"post\\\", meta: { title: \\\"岗位管理\\\", icon: \\\"user\\\" }, }, { path: \\\"dict\\\", component: () => import(\\\"@/views/system/dict/index\\\"), name: \\\"dict\\\", meta: { title: \\\"字典管理\\\", icon: \\\"user\\\" }, }, { path: \\\"config\\\", component: () => import(\\\"@/views/system/config/index\\\"), name: \\\"config\\\", meta: { title: \\\"参数设置\\\", icon: \\\"user\\\" }, }, { path: \\\"notice\\\", component: () => import(\\\"@/views/system/notice/index\\\"), name: \\\"notice\\\", meta: { title: \\\"通知公告\\\", icon: \\\"user\\\" }, }, { path: \\\"/log/operlog\\\", component: () => import(\\\"@/views/monitor/operlog/index\\\"), name: \\\"operlog\\\", meta: { title: \\\"操作日志\\\", icon: \\\"user\\\" }, }, ], }, { path: \\\"/systemStatistics\\\", component: Layout, hidden: true, redirect: \\\"noredirect\\\", children: [ { path: \\\"\\\", component: () => import(\\\"@/views/aws/systemStatistics/index\\\"), name: \\\"systemStatistics\\\", meta: { title: \\\"数据统计\\\", icon: \\\"user\\\" }, }, ], } ] \"]},\"669\":{\"c\":[\"server\"]},\"670\":{\"c\":[\"env\"]},\"671\":{\"h\":\"升级sringboot2.6\"},\"672\":{\"h\":\"升级sringboot2.6\",\"t\":[\"升级springboot版本从2.2到2.6.6后，同时使用swagger3，启动后报错\",\"Failed to start bean ‘documentationPluginsBootstrapper’; nested exception is java.lang.NullPointerException\",\"spring.mvc.pathmatch.matching-strategy=ant_path_matcher \",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>2.6.6</version> <type>pom</type> <scope>import</scope> </dependency> <!-- Swagger3依赖 --> <dependency> <groupId>io.springfox</groupId> <artifactId>springfox-boot-starter</artifactId> <version>3.0.0</version> <exclusions> <exclusion> <groupId>io.swagger</groupId> <artifactId>swagger-models</artifactId> </exclusion> <exclusion> <groupId>org.mapstruct</groupId> <artifactId>mapstruct</artifactId> </exclusion> </exclusions> </dependency> \"]},\"673\":{\"c\":[\"server\"]},\"674\":{\"c\":[\"env\"]},\"675\":{\"h\":\"安装Nginx\",\"t\":[\"ubuntu Nginx 安装\",\"在Ubuntu系统上安装Nginx可以通过以下步骤进行：\"]},\"676\":{\"h\":\"更新包索引：\",\"t\":[\"sudo apt update \"]},\"677\":{\"h\":\"安装Nginx：\",\"t\":[\"sudo apt install nginx \"]},\"678\":{\"h\":\"启动Nginx服务：\",\"t\":[\"sudo systemctl start nginx \"]},\"679\":{\"h\":\"设置Nginx开机自启：\",\"t\":[\"sudo systemctl enable nginx \"]},\"680\":{\"h\":\"验证安装成功，打开浏览器并访问：\",\"t\":[\"http://your_server_ip \",\"如果安装成功，你应该看到Nginx的默认欢迎页面。\"]},\"681\":{\"c\":[\"server\"]},\"682\":{\"c\":[\"env\"]},\"683\":{\"h\":\"安装Tomcat8\"},\"684\":{\"h\":\"tomcat8安装\",\"t\":[\"# Tomcat 安装 sudo apt-get install tomcat8 tomcat8-docs tomcat8-admin # 启动 sudo systemctl start tomcat8 # 开机自启 sudo systemctl enable tomcat8 \"]},\"685\":{\"c\":[\"server\"]},\"686\":{\"c\":[\"env\"]},\"687\":{\"h\":\"安装jdk8\"},\"688\":{\"h\":\"安装jdk8\",\"t\":[\"sudo apt install openjdk-8-jdk java -version \"]},\"689\":{\"c\":[\"server\"]},\"690\":{\"c\":[\"env\"]},\"691\":{\"h\":\"安装mysql5.7\"},\"692\":{\"h\":\"更新包管理器的索引\",\"t\":[\"sudo apt update \"]},\"693\":{\"h\":\"安装MySQL\",\"t\":[\"sudo apt install mysql-server-5.7 \"]},\"694\":{\"h\":\"检查MySQL服务的状态，确保它正在运行：\",\"t\":[\"sudo systemctl status mysql.service ● mysql.service - MySQL Community Server Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled) Active: active (running) since Sun 2024-04-21 10:41:45 CST; 4s ago Process: 9630 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/run/mysqld/mysqld.pid (code=exited, status=0/SUCCESS) Process: 9621 ExecStartPre=/usr/share/mysql/mysql-systemd-start pre (code=exited, status=0/SUCCESS) Main PID: 9632 (mysqld) Tasks: 27 (limit: 4503) CGroup: /system.slice/mysql.service └─9632 /usr/sbin/mysqld --daemonize --pid-file=/run/mysqld/mysqld.pid Apr 21 10:41:45 iZ2ze6r3rvh2dc9nds2291Z systemd[1]: Starting MySQL Community Server... Apr 21 10:41:45 iZ2ze6r3rvh2dc9nds2291Z systemd[1]: Started MySQL Community Server. \"]},\"695\":{\"h\":\"设置密码 无密码直接回车\",\"t\":[\"sudo mysql -u root -p # root设置新密码 update mysql.user set authentication_string=PASSWORD('111111') where user = 'root'; # 刷新 FLUSH PRIVILEGES; # 退出 exit \"]},\"696\":{\"h\":\"重启服务\",\"t\":[\"sudo service mysql restart \"]},\"697\":{\"c\":[\"server\"]},\"698\":{\"c\":[\"env\"]},\"699\":{\"h\":\"安装node\"},\"700\":{\"h\":\"安装node\"},\"701\":{\"h\":\"默认安装\",\"t\":[\"# 默认安装 版本v8.10.0 sudo apt-get install -y nodejs npm # 卸载 sudo apt-get remove nodejs npm \"]},\"702\":{\"h\":\"下载安装\",\"t\":[\"# 使用curl下载NodeSource PPA安装脚本 curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash - sudo apt-get install -y nodejs \"]},\"703\":{\"h\":\"查看版本\",\"t\":[\"node --version npm --version \"]},\"704\":{\"c\":[\"server\"]},\"705\":{\"c\":[\"env\"]},\"706\":{\"h\":\"安装redis\"},\"707\":{\"h\":\"安装redis\",\"t\":[\"#安装redis sudo apt-get install redis-server #确认Redis已经安装并且服务正在运行 sudo systemctl status redis-server #如果你需要配置Redis，可以编辑配置文件 /etc/redis/redis.conf。 #启动Redis服务： sudo systemctl start redis-server #使Redis服务开机自启： sudo systemctl enable redis-server redis-cli ping PONG \"]},\"708\":{\"c\":[\"server\"]},\"709\":{\"c\":[\"env\"]},\"710\":{\"h\":\"服务启动脚本\"},\"711\":{\"h\":\"scp上传免密\",\"t\":[\"ry.sh\",\"#!/bin/sh # shellcheck disable=SC2006 # shellcheck disable=SC2126 # shellcheck disable=SC2046 # shellcheck disable=SC2107 # author chentong # date: 2024-04-25 # ./ry.sh start 启动 # ./ry.sh stop 停止 # ./ry.sh restart 重启 # ./ry.sh status 状态 AppName=ruoyi-admin.jar # JVM参数 JVM_OPTS=\\\"-Dname=$AppName -Duser.timezone=Asia/Shanghai -Xms512M -Xmx512M -XX:PermSize=256M -XX:MaxPermSize=512M -XX:+HeapDumpOnOutOfMemoryError -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:NewRatio=1 -XX:SurvivorRatio=30 -XX:+UseParallelGC -XX:+UseParallelOldGC\\\" # PORT DEFAULT 8080 PORT=8080 banner() { echo \\\"////////////////////////////////////////////////////////////////////\\\" echo \\\"// _ooOoo_ //\\\" echo \\\"// o8888888o //\\\" echo \\\"// 88\\\" . \\\"88 //\\\" echo \\\"// (| ^_^ |) //\\\" echo \\\"// O\\\\ = /O //\\\" echo \\\"// / \\\\\\\\||| : |||// \\\\ //\\\" echo \\\"// / _||||| -:- |||||- \\\\ //\\\" echo \\\"// | | \\\\\\\\\\\\ - /// | | //\\\" echo \\\"// | \\\\_| ''\\\\---/'' | | //\\\" echo \\\"// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ //\\\" echo \\\"// 佛祖保佑 永不宕机 永无BUG //\\\" echo \\\"////////////////////////////////////////////////////////////////////\\\" } # error log error() { echo \\\"\\\\033[0;31m$1\\\\033[0m\\\" } # info log info() { echo \\\"\\\\033[0;34m$1\\\\033[0m\\\" } if [ \\\"$1\\\" = \\\"\\\" ]; then echo $(error \\\" please input command: \\\") $(info \\\" {start|stop|restart|status|port|banner} \\\") exit 1 fi if [ \\\"$1\\\" = \\\"port\\\" -a $# = 2 ]; then PORT=$2 fi # get pid pid() { PID=$(ps -ef | grep java | grep $AppName | grep -v grep | awk '{print $2}') echo \\\"$PID\\\" } start() { banner PID=$(pid) if [ x\\\"$PID\\\" != x\\\"\\\" ]; then info \\\"START $AppName is running...\\\" else #$JVM_OPTS is not used nohup java -jar $AppName $JVM_OPTS >/dev/null 2>&1 & info \\\"START $AppName success...\\\" fi } stop() { error \\\"STOP $AppName\\\" PID=$(pid) if [ x\\\"$PID\\\" != x\\\"\\\" ]; then kill -TERM $PID error \\\"STOP $AppName (pid:$PID) exiting...\\\" while [ x\\\"$PID\\\" != x\\\"\\\" ]; do sleep 1 # repeat get pid PID=$(pid) done error \\\"STOP $AppName stopped\\\" else error \\\"STOP $AppName already stopped.\\\" fi } restart() { info \\\"RESTART $AppName begin\\\" stop sleep 2 start status info \\\"RESTART $AppName end\\\" } status() { PID=$(pid) if [ x\\\"$PID\\\" != x\\\"\\\" ]; then info \\\"STATUS $AppName is running...\\\" else error \\\"STATUS $AppName is not running...\\\" fi } # kill by port port() { lsof -i:$PORT | grep LISTEN | awk '{print $2}' | xargs kill -9 error \\\"PORT $PORT is killed\\\" status } # shell main method case $1 in start) start;; stop) stop;; restart) restart;; status) status;; port) port;; banner) banner;; *) ;; esac \"]},\"712\":{\"c\":[\"server\"]},\"713\":{\"c\":[\"env\"]},\"714\":{\"h\":\"根据端口杀进程\"},\"715\":{\"h\":\"根据端口杀进程\",\"t\":[\"port.sh\",\"#!/bin/sh error() { echo \\\"\\\\033[0;31m$1\\\\033[0m\\\" } port() { lsof -i:$1 | grep LISTEN | awk '{print $2}' | xargs kill -9 error \\\"PORT $1 is killed\\\" } # kill port for arg in \\\"$@\\\"; do port $arg done \"]},\"716\":{\"c\":[\"server\"]},\"717\":{\"c\":[\"env\"]},\"718\":{\"h\":\"阿里云开放安全组端口8080\"},\"719\":{\"h\":\"安全组\",\"t\":[\"安全组\"]},\"720\":{\"h\":\"开放端口\",\"t\":[\"开放端口\"]},\"721\":{\"h\":\"配合ufw防火墙 做两层控制\",\"t\":[\"安全组 控制外部访问\",\"防火墙做内部控制, 采用远程接口调用+ufw命令做动态控制\"]},\"722\":{\"h\":\"ufw防火墙\",\"t\":[\"sudo ufw enable # 开启防火墙 sudo ufw disable # 关闭防火墙 sudo ufw status # 查看端口状态 \"]},\"723\":{\"h\":\"开放端口\",\"t\":[\"# 允许外部访问3306端口（tcp/udp） sudo ufw allow 3306 # 允许此IP访问本机所有端口 sudo ufw allow from 192.168.1.100 # 指定IP段访问特定端口 sudo ufw proto tcp from 192.168.1.0/24 to any port 443 # 删除3306端口的访问权限（关闭端口的访问，外部无法访问该端口） sudo ufw delete allow 3306 \"]},\"724\":{\"c\":[\"server\"]},\"725\":{\"c\":[\"env\"]},\"726\":{\"h\":\"若依微服务\"},\"727\":{\"h\":\"定制若依\",\"t\":[\"https://gitee.com/yinlingchaoliu/ruo-yi-cloud-micro\",\"基于 Vue/Element UI 和 Spring Boot/Spring Cloud & Alibaba 前后端分离的分布式微服务架构\"]},\"728\":{\"h\":\"平台简介\",\"t\":[\"若依是一套全部开源的快速开发平台，毫无保留给个人及企业免费使用。\",\"采用前后端分离的模式，微服务版本前端(基于 RuoYi-Vue)。\",\"后端采用Spring Boot、Spring Cloud & Alibaba。\",\"注册中心、配置中心选型Nacos，权限认证使用Redis。\",\"流量控制框架选型Sentinel，分布式事务选型Seata。\",\"本文定制 https://gitee.com/yinlingchaoliu/ruo-yi-cloud-micro。\"]},\"729\":{\"h\":\"Ant Design版本。\"},\"730\":{\"h\":\"spring boot 特点\",\"t\":[\"会装载当前目录下所有的config component mapper domain\",\"项目产物由jar包和配置2部分组成\",\"微服务壳化 (微服务 = 简单业务 + 壳)\",\"支持单体服务与微服务快速切换\"]},\"731\":{\"h\":\"系统结构\",\"t\":[\"com.ruoyi ├── ruoyi-ui // 前端框架 [1024] ├── ruoyi-all-server // 服务 all in one [9000] │ └── ruoyi-nacos.yml // nacos配置 │ └── ruoyi-auth-server-deps // 用户认证能力 │ └── ruoyi-file-server-deps // 文件上传能力 │ └── ruoyi-gen-server-deps // 代码生成能力 │ └── ruoyi-job-server-deps // 定时任务能力 │ └── ruoyi-system-server-deps // 系统服务能力 ├── ruoyi-cloud // 微服务壳 │ └── ruoyi-cloud-bootstrap // 微服务壳 │ └── ruoyi-cloud-gateway // 网关壳 │ └── ruoyi-cloud-admin // 监控壳 ├── ruoyi-dependencies // bom 依赖管理 做依赖精简 │ └── ruoyi-dependencies-framework // 通用插件依赖 │ └── ruoyi-dependencies-thirdpart // 三方插件依赖 │ └── ruoyi-dependencies-domain // 领域能力依赖 │ └── ruoyi-dependencies-api // 业务api依赖 │ └── ruoyi-dependencies-biz // 业务能力依赖 ├── ruoyi-framework // 插件模块 独立且互不依赖 开发中... │ └── ruoyi-spring-boot-starter-nacos // 注册插件 │ └── ruoyi-spring-boot-starter-web // web插件 │ └── ruoyi-spring-boot-starter-mybatis // mybatis + 多数据源 │ └── ruoyi-spring-boot-starter-redis // 缓存服务 │ └── ruoyi-spring-boot-starter-dubbo // rpc插件 │ └── ruoyi-spring-boot-starter-feign // rpc插件 │ └── ruoyi-spring-boot-starter-xxljob // xxljob │ └── ruoyi-spring-boot-starter-seata // seata │ └── ruoyi-spring-boot-starter-security // security 开发中 ├── ruoyi-third // 第三方能力 独立且互不依赖 开发中... │ └── ruoyi-third-pay // 三方支付 │ └── ruoyi-third-weixin // 微信 │ └── ruoyi-third-excel // excel ├── ruoyi-domain // 通用业务领域模块 domain: 模型 domain-biz: 业务模型 随时可取代的 │ └── ruoyi-domain-resp // resp bean │ └── ruoyi-domain-user // 用户模型 │ └── ruoyi-domain-exception // 通用异常 │ └── ruoyi-domain-log // 通用日志 │ └── ruoyi-domain-biz-log // 日志定制实现 │ └── ruoyi-domain-biz-web // web业务封装+列表 │ └── ruoyi-domain-biz-tools // 常用工具 │ └── ruoyi-domain-biz-security // 用户权限 │ └── ruoyi-domain-biz-datascope // 数据权限 ├── ruoyi-visual // 图形化管理模块 │ └── ruoyi-visual-nacos // 注册中心 [8848] │ └── ruoyi-visual-monitor // 监控中心 [9100] │ └── ruoyi-visual-sentinel-dashboard // 稳流监控 [8718] │ └── ruoyi-visual-xxl-job-admin // 任务监控 [9900] │ └── ruoyi-visual-seata-server // 事务监控 [7091] ├── ruoyi-gateway // 网关模块 [8080] ├── ruoyi-modules // 公共模块 │ └── ruoyi-auth //认证中心 [9200] │ └── ruoyi-auth-server │ └── ruoyi-auth-web │ └── ruoyi-system // 系统模块 [9201] │ └── ruoyi-system-api │ └── ruoyi-system-server │ └── ruoyi-system-web │ └── ruoyi-file // 文件服务 [9205] │ └── ruoyi-file-api │ └── ruoyi-file-server │ └── ruoyi-file-web │ └── ruoyi-gen // 代码生成 [9202] │ └── ruoyi-gen-server │ └── ruoyi-gen-web │ └── ruoyi-job // 定时任务 [9203] │ └── ruoyi-job-server │ └── ruoyi-job-web │ └── ruoyi-xxl-job // 分布任务 [9204] │ └── ruoyi-xxl-job-server │ └── ruoyi-xxl-job-web ├── ruoyi-modules-member // 会员模块 按照业务划分 │ └── ruoyi-modules-member-bom // 会员依赖 │ └── ruoyi-modules-member-api // api接口 │ └── ruoyi-modules-member-domain // 日志打印 │ └── ruoyi-modules-member-domain-user // 用户模块 │ └── ruoyi-modules-member-domain-address // 会员地址 │ └── ruoyi-modules-member-domain-vip // 会员vip │ └── ruoyi-modules-member-domain-strategy // 会员策略 │ └── ruoyi-modules-member-server // 会员能力 │ └── ruoyi-modules-member-web // 会员服务 [9400] ├──pom.xml // 公共依赖 \",\"功能\",\"本框架\",\"组件化项目\",\"遵循Unix哲学 do one thing and do it well 每一种能力, 都是独立积木\",\"ruoyi-nacos\",\"采用springboot 方式 启动 nacos服务\",\"ruoyi-spring-boot-starter-nacos\",\"nacos client端依赖\",\"ruoyi-sentinel\",\"哨兵服务 采用服务方式启动 分布式限流熔断\",\"ruoyi-spring-boot-starter-sentinel\",\"哨兵客户端 引入支持限流能力 分布式限流熔断\",\"ruoyi-spring-boot-starter-web\",\"支持web能力 ,采用Undertow 基于 XNIO 的高性能容器\",\"ruoyi-spring-boot-starter-redis\",\"支持redis能力 redisson + lock4j 分布式锁\",\"ruoyi-spring-boot-starter-mybatis\",\"mybatis-plus 多数据源 数据连接池及监控 主从 雪花ID\",\"ruoyi-spring-boot-starter-feign\",\"快速http restful 调用 sidecar首选\",\"ruoyi-spring-boot-starter-dubbo\",\"dubbo3 api式rpc调用\",\"分布式配置中心\",\"采用 Alibaba Nacos 源码集成便于调试扩展与二次开发 框架还为其增加了各种监控\",\"服务网关\",\"采用 SpringCloud Gateway 框架扩展了多种功能例如:内网鉴权、请求体缓存、跨域配置、请求响应日志等\",\"负载均衡\",\"采用 SpringCloud Loadbalancer 扩展支持了开发团队路由 便于多团队开发调试\",\"RPC远程调用\",\"采用 全新 Apache Dubbo 3.X 历史悠远不用多说\",\"分布式限流熔断\",\"采用 Alibaba Sentinel 源码集成便于调试扩展与二次开发 框架还为其增加了各种监控\",\"分布式事务\",\"采用 Alibaba Seata 源码集成对接了Nacos与各种监控 简化了搭建部署流程\",\"Web容器\",\"采用 Undertow 基于 XNIO 的高性能容器\",\"权限认证\",\"采用 Sa-Token、Jwt 静态使用功能齐全 低耦合 高扩展\",\"权限注解\",\"采用 Sa-Token 支持注解 登录校验、角色校验、权限校验、二级认证校验、HttpBasic校验、忽略校验角色与权限校验支持多种条件 如 ANDOR 或 权限 OR 角色 等复杂表达式\",\"关系数据库支持\",\"原生支持 MySQL、Oracle、PostgreSQL、SQLServer可同时使用异构切换\",\"缓存数据库\",\"支持 Redis 5-7 支持大部分新功能特性 如 分布式限流、分布式队列\",\"Redis客户端\",\"采用 Redisson Redis官方推荐 基于Netty的客户端工具支持Redis 90%以上的命令 底层优化规避很多不正确的用法 例如: keys被转换为scan支持单机、哨兵、单主集群、多主集群等模式\",\"缓存注解\",\"采用 Spring-Cache 注解 对其扩展了实现支持了更多功能例如 过期时间 最大空闲时间 组最大长度等 只需一个注解即可完成数据自动缓存\",\"ORM框架\",\"采用 Mybatis-Plus 基于对象几乎不用写SQL全java操作 功能强大插件众多例如多租户插件 分页插件 乐观锁插件等等\",\"SQL监控\",\"采用 p6spy 可输出完整SQL与执行时间监控\",\"数据分页\",\"采用 Mybatis-Plus 分页插件框架对其进行了扩展 对象化分页对象 支持多种方式传参 支持前端多排序 复杂排序\",\"数据权限\",\"采用 Mybatis-Plus 插件 自行分析拼接SQL 无感式过滤只需为Mapper设置好注解条件 支持多种自定义 不限于部门角色\",\"数据脱敏\",\"采用 注解 + jackson 序列化期间脱敏 支持不同模块不同的脱敏条件支持多种策略 如身份证、手机号、地址、邮箱、银行卡等 可自行扩展\",\"数据加解密\",\"采用 注解 + mybatis 拦截器 对存取数据期间自动加解密支持多种策略 如BASE64、AES、RSA、SM2、SM4等\",\"数据翻译\",\"采用 注解 + jackson 序列化期间动态修改数据 数据进行翻译支持多种模式: 映射翻译直接翻译其他扩展条件翻译 接口化两步即可完成自定义扩展 内置多种翻译实现\",\"多数据源框架\",\"采用 dynamic-datasource 支持世面大部分数据库通过yml配置即可动态管理异构不同种类的数据库 也可通过前端页面添加数据源支持spel表达式从请求头参数等条件切换数据源\",\"多数据源事务\",\"采用 dynamic-datasource 支持多数据源不同种类的数据库事务回滚\",\"数据库连接池\",\"采用 HikariCP Spring官方内置连接池 配置简单 以性能与稳定性闻名天下\",\"数据库主键\",\"采用 雪花ID 基于时间戳的 有序增长 唯一ID 再也不用为分库分表 数据合并主键冲突重复而发愁\",\"WebSocket协议\",\"基于 Spring 封装的 WebSocket 协议 扩展了Token鉴权与分布式会话同步 不再只是基于单机的废物\",\"序列化\",\"采用 Jackson Spring官方内置序列化 靠谱!!!\",\"分布式幂等\",\"参考美团GTIS防重系统简化实现(细节可看文档)\",\"分布式任务调度\",\"采用 Xxl-Job 天生支持分布式 统一的管理中心\",\"分布式日志中心\",\"采用 ELK 业界成熟解决方案 实时收集所有服务的运行日志 快速发现定位问题\",\"分布式搜索引擎\",\"采用 ElasticSearch、Easy-Es 以 Mybatis-Plus 方式操作 ElasticSearch\",\"分布式消息队列\",\"采用 SpringCloud-Stream 支持 Kafka、RocketMQ、RabbitMQ\",\"文件存储\",\"采用 Minio 分布式文件存储 天生支持多机、多硬盘、多分片、多副本存储支持权限管理 安全可靠 文件可加密存储\",\"云存储\",\"采用 AWS S3 协议客户端 支持 七牛、阿里、腾讯 等一切支持S3协议的厂家\",\"短信\",\"支持 阿里、腾讯 只需在yml配置好厂家密钥即可使用 接口化支持扩展其他厂家\",\"邮件\",\"采用 mail-api 通用协议支持大部分邮件厂商\",\"接口文档\",\"采用 SpringDoc、javadoc 无注解零入侵基于java注释只需把注释写好 无需再写一大堆的文档注解了\",\"校验框架\",\"采用 Validation 支持注解与工具类校验 注解支持国际化\",\"Excel框架\",\"采用 Alibaba EasyExcel 基于插件化框架对其增加了很多功能 例如 自动合并相同内容 自动排列布局 字典翻译等\",\"工具类框架\",\"采用 Hutool、Lombok 上百种工具覆盖90%的使用需求 基于注解自动生成 get set 等简化框架大量代码\",\"服务监控框架\",\"采用 SpringBoot-Admin 基于SpringBoot官方 actuator 探针机制实时监控服务状态 框架还为其扩展了在线日志查看监控\",\"全方位监控报警\",\"采用 Prometheus、Grafana 多样化采集 多模板大屏展示 实时报警监控 提供详细的搭建文档\",\"链路追踪\",\"采用 Apache SkyWalking 还在为请求不知道去哪了 到哪出了问题而烦恼吗用了它即可实时查看请求经过的每一处每一个节点\",\"代码生成器\",\"只需设计好表结构 一键生成所有crud代码与页面降低80%的开发量 把精力都投入到业务设计上框架为其适配MP、SpringDoc规范化代码 同时支持动态多数据源代码生成\",\"部署方式\",\"支持 Docker 编排 一键搭建所有环境 让开发人员从此不再为搭建环境而烦恼\",\"项目路径修改\",\"提供详细的修改方案文档 并为其做了一些改动 非常简单即可修改成自己想要的\",\"国际化\",\"基于请求头动态返回不同语种的文本内容 开发难度低 有对应的工具类 支持大部分注解内容国际化\",\"代码单例测试\",\"提供单例测试 使用方式编写方法与maven多环境单测插件\",\"Demo案例\",\"提供框架功能的实际使用案例 单独一个模块提供了很多很全\",\"功能\",\"本框架特色\",\"common模块tools化\",\"common 按照工具类型拆分 上层业务不是必须依赖 而是可选项\",\"common-domain\",\"最简单通用resp响应(后续还要精简,减少不必要pom依赖)\",\"spring boot模块\",\"每次只做一件事 并做好\",\"积木化\",\"提供最小核心能力集合, 引用何种能力 由当前微服务决定\",\"监控能力微服务化\",\"nacos sentinel spring-boot-admin xxl-job 微服务一样启动\",\"api四大元素\",\"api 含 四类元素 rpc , service ,bean , constants\",\"api归属业务层模块\",\"api模块属于业务层，common, framework模块不容许引用\"]},\"732\":{\"h\":\"架构图\",\"t\":[\"架构图\"]},\"733\":{\"h\":\"内置功能\",\"t\":[\"用户管理：用户是系统操作者，该功能主要完成系统用户配置。\",\"部门管理：配置系统组织机构（公司、部门、小组），树结构展现支持数据权限。\",\"岗位管理：配置系统用户所属担任职务。\",\"菜单管理：配置系统菜单，操作权限，按钮权限标识等。\",\"角色管理：角色菜单权限分配、设置角色按机构进行数据范围权限划分。\",\"字典管理：对系统中经常使用的一些较为固定的数据进行维护。\",\"参数管理：对系统动态配置常用参数。\",\"通知公告：系统通知公告信息发布维护。\",\"操作日志：系统正常操作日志记录和查询；系统异常信息日志记录和查询。\",\"登录日志：系统登录日志记录查询包含登录异常。\",\"在线用户：当前系统中活跃用户状态监控。\",\"定时任务：在线（添加、修改、删除)任务调度包含执行结果日志。\",\"代码生成：前后端代码的生成（java、html、xml、sql）支持CRUD下载 。\",\"系统接口：根据业务代码自动生成相关的api接口文档。\",\"服务监控：监视当前系统CPU、内存、磁盘、堆栈等相关信息。\",\"在线构建器：拖动表单元素生成相应的HTML代码。\",\"连接池监视：监视当前系统数据库连接池状态，可进行分析SQL找出系统性能瓶颈。\"]},\"734\":{\"h\":\"在线体验\",\"t\":[\"admin/admin123\",\"陆陆续续收到一些打赏，为了更好的体验已用于演示服务器升级。谢谢各位小伙伴。\",\"演示地址：http://ruoyi.vip\\n文档地址：http://doc.ruoyi.vip\"]},\"735\":{\"h\":\"UML类图关系-泛化、实现、关联、聚合、组合、依赖\",\"t\":[\"在UML类图中，常见的有以下几种关系: 泛化（Generalization）, 实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)\",\"泛化（Generalization）\",\"【泛化关系】：是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。\",\"【箭头指向】：带三角箭头的实线，箭头指向父类\",\"实现（Realization）\",\"【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现.\",\"【箭头指向】：带三角箭头的虚线，箭头指向接口\",\"关联（Association)\",\"【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。\",\"【代码体现】：成员变量\",\"【箭头及指向】：带普通箭头的实心线，指向被拥有者\",\"上图中，老师与学生是双向关联，老师有多名学生，学生也可能有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。\",\"下图为自身关联：\",\"聚合（Aggregation）\",\"【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。\",\"聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。\",\"【代码体现】：成员变量\",\"【箭头及指向】：带空心菱形的实心线，菱形指向整体\",\"组合(Composition)\",\"【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。\",\"组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。\",\"【代码体现】：成员变量\",\"【箭头及指向】：带实心菱形的实线，菱形指向整体\",\"依赖(Dependency)\",\"【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.\",\"【代码表现】：局部变量、方法的参数或者对静态方法的调用\",\"【箭头及指向】：带箭头的虚线，指向被使用者\",\"各种关系的强弱顺序：\",\"泛化 = 实现 > 组合 > 聚合 > 关联 > 依赖\",\"下面这张UML图，比较形象地展示了各种类图关系：\",\"#####转载\\nUML类图关系\"]},\"736\":{\"c\":[\"设计模式\"]},\"737\":{\"c\":[\"archive\"]},\"738\":{\"h\":\"五分钟读懂UML类图\",\"t\":[\"简单🍳读懂UML类图\",\"#####一、类的表示方式 在UML类图中，类使用包含类名、属性(field) 和方法(method)，用带有分割线的矩形划分\",\"1、类的属性表示方式\",\"可见性 名称 ：类型 [ = 缺省值] 中括号中的内容表示是可选的 其中可见性的三种符号表示： 1、 + ：表示public 2、- ：表示private 3、#：表示protected（default）\",\"如上图所示：一个Employee类，它包含name,age和email这3个属性，以及modifyInfo()方法，其中3个属性是私有的，方法是公有的\",\"2、类的方法的表示方式\",\"可见性 名称(参数列表) [ ： 返回类型] 中括号中的内容表示是可选的\",\"如上图所示的Demo类中，定义了3个方法： 1、public方法method1接收一个类型为Object的参数，返回值类型为void 2、protected方法method2无参数，返回值类型为String 3、private方法method3接收类型分别为int、int[]的参数，返回值类型为int\",\"#####二、类与类之间关系的表示方式\",\"1、关联关系\",\"关联关系又可进一步分为单向关联、双向关联和自关联。\",\"（1）单向关联（带箭头的直线表示） 一方单向持有成员变量 \",\"上图表示每个顾客都有一个地址，这通过让Customer类持有一个类型为Address的成员变量类实现。\",\"（2）双向关联（不带箭头的直线表示） 双方各自持有对方类型的成员变量 \",\"上图中在Customer类中维护一个Product[]数组，表示一个顾客购买了那些产品；在Product类中维护一个Customer类型的成员变量表示这个产品被哪个顾客所购买。\",\"（3）自关联（带有箭头且指向自身的直线表示） 自己包含自己\",\"上图的意思就是Node类包含类型为Node的成员变量\",\"2、聚合关系（带空心菱形和箭头的直线） 聚合关系强调是“整体”包含“部分”，但是“部分”可以脱离“整体”而单独存在\",\"比如上图中汽车包含了发动机，而发动机脱离了汽车也能单独存在。\",\"3、组合关系（带实心菱形和箭头的直线表示） 组合关系与聚合关系见得最大不同在于：这里的“部分”脱离了“整体”便不复存在\",\"如上图，嘴是头的一部分且不能脱离了头而单独存在\",\"4、依赖关系（带有箭头的虚线）\",\"从上图所示，Driver的drive方法只有传入了一个Car对象才能发挥作用，因此我们说Driver类依赖于Car类。\",\"5、继承关系（带空心三角形的直线表示）\",\"如上图，Student类与Teacher类继承了Person类\",\"6、接口实现关系（带空心三角形的虚线表示）\",\"如上图，Car类与Ship类都实现了Vehicle接口\",\"#####三、参考资料\",\"五分钟读懂UML类图深入浅出UML类图\"]},\"739\":{\"c\":[\"设计模式\"]},\"740\":{\"c\":[\"archive\"]},\"741\":{\"h\":\"设计模式4个要素\"},\"742\":{\"h\":\"设计模式背景\",\"t\":[\"Erich Gamma1990年从建筑设计领域引入软件工程领域。描述在各种情况下通用解决方案\"]},\"743\":{\"h\":\"4个要素\"},\"744\":{\"h\":\"1、模式名称\",\"t\":[\"模式名称用一两个词来描述模式问题，解决方案和效果。在同行间，讨论头脑中有统一映射\"]},\"745\":{\"h\":\"2、问题\",\"t\":[\"描述应该在什么情况下使用设计模式。解释了设计问题和问题存在前因后果。\"]},\"746\":{\"h\":\"3、解决方案\",\"t\":[\"设计了设计模式组成成分，他们之间相互关系及各自职责和协助方式。通用模板\"]},\"747\":{\"h\":\"4、效果\",\"t\":[\"描述模式应用效果及使用模式应权衡问题\",\"####避免过度设计\\n简单直观\"]},\"748\":{\"c\":[\"设计模式\"]},\"749\":{\"c\":[\"archive\"]},\"750\":{\"h\":\"设计模式六大原则（原创）\",\"t\":[\"#####本文意义 六大原则是理解是透彻理解23种设计模式核心，要定义清晰才能理解精准、简单更能实战\",\"#####SOLID原则 Bob大叔（Robert C Martin）把 单一职责，开闭原则，里氏替换、接口隔离，及依赖倒置5个原则定义为SOLID原则\",\"一句话速记： S(Single==单身) O(Open 开放==开发)L(里氏==是)I(接口==借口)D(倒置==导致) SOD(最少知道)\",\"单身开发是借口导致,只与直接朋友通信 \",\"#####六大原则的目标\",\"高内聚，低耦合 \",\"#####六大原则理解关键词 关键词：\",\"抽象（面向接口），单一职责，最小化 \",\"理解： 1、 高层模块不应依赖底层模块，两者都应依赖抽象 2、 类的职责单一，通用性越强 3、 最小化说明接口尽量小，类间彼此知道尽量小\"]},\"751\":{\"h\":\"单一职责原则（SRP）\",\"t\":[\"定义：就一个类而言，应该仅有一个引起它变化的原因 一句话理解：一个类，只做一件事 判断方法：一个对象逻辑关系，是\\\"has-a\\\",还是“is-a”\"]},\"752\":{\"h\":\"开闭原则（OCP）\",\"t\":[\"定义：软件实体应该对扩展开放，对修改关闭 一句话理解：遵循开闭原则重要手段是通过抽象 使用方式： 1、抽象约束 2、参数配置控制行为模式 3、指定项目章程，约定优于配置 4、封装变化\"]},\"753\":{\"h\":\"里氏替换原则（LSP）\",\"t\":[\"定义：所有引用基类地方必须透明地使用子类对象 一句话理解：子类无影响替换父类，用父类对象定义，运行时用子类替换 说明：里氏替换依赖继承，多态两大特性，核心原理是抽象 抽象优点： 1、代码公共逻辑重用 2、子类继承基础上，还可以增加差异 3、提高代码的扩展性 缺点： 1、继承是侵入性的 2、子类灵活性降低 #####接口隔离原则（ISP） 定义：类间依赖关系应建立在最小接口上 一句话理解：接口的单一职责 使用方式： 1、接口尽量小 2、接口高内聚 3、定制服务 4、接口设计有限度的\",\"#####依赖倒置原则（DIP） 定义： 1、高层模块不应依赖底层模块，两者都应依赖抽象 2、抽象不应该依赖细节，细节应该依赖抽象\",\"说明：模块间依赖通过抽象发生，实现类之间不发生直接依赖关系，其依赖关系是通过接口或者抽象类产生\",\"一句话理解：面向接口编程 使用方式： 1、核心类尽量有接口和抽象类 2、变量数据类型建议是接口或抽象类 3、任何类都不应该从具体类派生\",\"依赖三种方式 1、构造函数传递依赖 2、setter方法传递 3、接口声明依赖对象 （接口注入）\"]},\"754\":{\"h\":\"迪米特原则（LOD）\",\"t\":[\"定义：一个对象应该对其他对象有最少了解 说明：只与直接朋友通信 一句话理解：访问对方，又要减少耦合\",\"实现方式： 1、访问权限控制，最少暴露外界接口实现 2、避免与非直接类通讯，用“中介”这种方式 3、多用组合，少用继承\",\"#####参考\\n《Android源码设计模式解析与实战》\\n《Android开发进阶从小工到专家》第10章\\n《设计模式之禅》第一部分\"]},\"755\":{\"c\":[\"设计模式\"]},\"756\":{\"c\":[\"archive\"]},\"757\":{\"h\":\"序言\",\"t\":[\"Api开发也需要方法论，来达成【一致性】 需要梳理大家需要遵守的规范\",\"API设计特殊所在 API一旦发布，便与我们永恒共存\",\"作者当时背景 1、作者是API开发，设计架构，随着项目扩张，成为项目瓶颈，需要更多人来写API 2、需要保持API编写的一致性 3、无法清晰表达给别人听\",\"解决方案：整理让大家遵守的规范\",\"学习编写API问题 经验和技巧获得是下意识积累而来，通过不断尝试，犯错形成的相关知识，实践过程是有用，但是技巧很分散，不易收集和管理， 技巧有局限性和特定场景下针对性。\",\"缺少系统方法论\",\"Mark:凭感觉判断做出来，而不是自底向上坚实基础。 没有严格的推理和分析，依靠潜意识来设计，将知识传授给他人，因为对方无类似经验，很难说服别人。\",\"阅读本书首要关注 1、为什么要创造API 2、API到时是什么东西\",\"备忘录式写书方式\\n1、问题当前项目阶段\\n2、解决方案\"]},\"758\":{\"c\":[\"软件框架设计艺术\"]},\"759\":{\"c\":[\"archive\"]},\"760\":{\"h\":\"第10章-与其他API协作\",\"t\":[\"复用、暴露、再导出 ####1、谨慎使用第三方API 封装第三方Api，不要将第三方api接口暴露出来 让第三方库对用户不可见 ####2、只暴露抽象内容 暴露内容越多，留给API使用或演进的余地越小\",\"####3、强化API的一致性 要约束一个方法行为，最好方法避免这个方法被覆盖 要约束一大堆方法，最好的方法编程final类\",\"####4、代理和组合 面向对象的核心概念是继承，所有内容围绕这个概念展开 多用组合，少用继承\",\"####5、避免API误用\\n凡是只要有可能，那么就一定有人会去做，要牢记API用户绝对是一个有创意的群体\"]},\"761\":{\"c\":[\"软件框架设计艺术\"]},\"762\":{\"c\":[\"archive\"]},\"763\":{\"h\":\"第11章-API具体运行时的一些内容\",\"t\":[\"####1、不要冒险 阿米巴变形虫模型，过度依赖\",\"一旦人们习惯了软件的某个版本，那么就宁愿忍受该版本而不愿冒险升级，因为升级可能会出现位置的问题，于是人们总说：“别去碰程序的那个部分”\",\"####2、可靠与无序 stable API\",\"####3、同步与死锁 1、描述API的线程模型\",\"####4、循环调用问题\\n####5、内存管理\"]},\"764\":{\"c\":[\"软件框架设计艺术\"]},\"765\":{\"c\":[\"archive\"]},\"766\":{\"h\":\"第12章-声明式编程\",\"t\":[\"声明式编程：对外暴露接口或协议， 注册和卸载交给框架来处理\",\"1、让对象不可变\\n2、不可变的行为\\n3、文档兼容\"]},\"767\":{\"c\":[\"软件框架设计艺术\"]},\"768\":{\"c\":[\"archive\"]},\"769\":{\"h\":\"第13章-极端的意见有害无益\",\"t\":[\"只有建议与当前问题所处环境相匹配时才值得采纳 1、API必须是漂亮的 2、API必须是正确的 3、API尽量简单的 4、API必须是高性能的 5、API必须是绝对兼容的 6、API必须是对称的\",\"第一性原理：简单且易用\"]},\"770\":{\"c\":[\"软件框架设计艺术\"]},\"771\":{\"c\":[\"archive\"]},\"772\":{\"h\":\"第14章-API设计中的矛盾之处\",\"t\":[\"####1、API设计中自相矛盾 自相矛盾的定义：同时相信两种互相矛盾的观点，而没有意识到这两者矛盾。 API的模式，开发API，发布和维护\",\"####2、背后隐藏的工作 优秀的API架构师应该预测失败的种种征兆，提前看出问题 先见之明\",\"####3、不要害怕发布一个稳定的API\",\"####4、降低维护费用\"]},\"773\":{\"c\":[\"软件框架设计艺术\"]},\"774\":{\"c\":[\"archive\"]},\"775\":{\"h\":\"第15章-改进API\",\"t\":[\"1、让问题库重新焕发活力 编写测试用例，用测试用例从外观上保持行为一致\",\"2、兼容性是一种约束\",\"3、相似API的桥接和共存\\n1、老的API依赖于新的API\\n2、桥接\"]},\"776\":{\"c\":[\"软件框架设计艺术\"]},\"777\":{\"c\":[\"archive\"]},\"778\":{\"h\":\"第16章-团队协作\",\"t\":[\"1、在提交代码时进行代码评审\",\"2、说服开发人员为他们的API提供文档 一份好的文档可以有效帮助用户，避免他们在使用API时去了解内部细节性内容，在不深入了解API的情况下就能将API用到自己开发当中 API是作者与用户之间主要的交流工具，任何成功的框架来说，优秀的文档是必备的条件\",\"3、尽职尽责的监控者\",\"4、接受API的补丁\\n接受的补丁不符合要求，让作者加以改进给我，他们要么改进后给我，要么就不给我，从侧面说明筛选提交人，为以后持续性的改进有良好的支持\"]},\"779\":{\"c\":[\"软件框架设计艺术\"]},\"780\":{\"c\":[\"archive\"]},\"781\":{\"h\":\"第17章-利用竞赛游戏提升API设计技巧\",\"t\":[\"正确的判断来自于经验，而经验来自于错误的判断 如果你犯了足够多的错误，那么你就能够学到很多东西，也就成为一个好的API设计者。\",\"做小游戏寓教于乐\"]},\"782\":{\"c\":[\"软件框架设计艺术\"]},\"783\":{\"c\":[\"archive\"]},\"784\":{\"h\":\"第19章-消亡的过程\",\"t\":[\"API譬如恒星，一经发现，永不消失\",\"1、明确版本的重要性\\n“兼容式移除”\\n2、依赖关系自动调整\\n与版本关联\\n3、移除部分API保留一段时间\\n4、分解庞大的API\\n提倡模块化设计和基于组件的架构\"]},\"785\":{\"c\":[\"软件框架设计艺术\"]},\"786\":{\"c\":[\"archive\"]},\"787\":{\"h\":\"第1章-软件开发的艺术\",\"t\":[\"####1、背景： 外部人员代码贡献者编写的代码，与NetBeans项目原负责API设想不一致\",\"####2、问题定位 API设计需要相应的理论支持，理论定义该学科方方面面，否则定义不清晰，轮廓模糊，学科不严谨，就像一门艺术。\",\"解决方案: 1、建立通用术语库，对探索内容一步步深入了解\",\"原因：没有共同的术语，容易导致鸡同鸭讲，理解不在一条线上\",\"稳定的API (stable API)\",\"理性主义：只需要通过思考就能理解和描述这个真实的世界，特点：重复可验证性 经验主义：人类对世界认识主要来源是经验 无绪：不关注它的原理，理所当然的用，关注结果\",\"软件的演变 最初面向过程，要处理机器语言 演变成面向对象，封装复杂，只关注于更重要的事情\",\"####API设计动力之源 利用API可以避免去了解第三方组件的细节\",\"【API第一受众是人】\",\"交流互通才是一切\\n兼容后续版本\"]},\"788\":{\"c\":[\"软件框架设计艺术\"]},\"789\":{\"c\":[\"archive\"]},\"790\":{\"h\":\"第20章-未来\",\"t\":[\"方法论 无绪即是起点，也是终点\",\"提倡模块化设计和基于组件的架构\"]},\"791\":{\"c\":[\"软件框架设计艺术\"]},\"792\":{\"c\":[\"archive\"]},\"793\":{\"h\":\"第3章-评价API好坏标准\",\"t\":[\"####1、方法和字段标识访问 一个API，就是一对类以及类中方法和字段的集合 严格限制除API以外，方法和字段标识访问。 用户采用反射调用隐藏的API,说明存在某种问题\",\"####2、执行程序读取写文件及其内容 配置文件,读取内容\",\"####3、环境变量和命令行选项 环境变量会影响平台移植性\",\"####4、文本信息也是API 程序输入输出文本也是api，eg:管道\",\"####5、协议 网络协议，socket http等\",\"####6、行为 api提供行为效果，不要改变api当前调用方式\",\"####7、国际化支持和信息国际化 api文档支持\",\"####8、API广泛定义 广泛的共识\",\"####9、检查API的质量 要求清单 1、可理解性：设计易于被对方程序员理解的api 2、一致性：API开发过程中最好保持一致风格（stable API） 3、可见性：良好的文档和示例demo\",\"原因：每个人世界观都会受限于自己的视野，离我们近事物，我们可以看清楚，但当事物处于视野临界就有些模糊，超出我们的视野，就会消失。\",\"对于一个优秀的API来说，它所涉及的概念必须处于用户视野范围内，否则他们就无法理解这些概念。API设计者需要理解其目标用户普遍具有的知识，并在此类知识的基础上设计API.\",\"写法风格要一种，定义好的接口不要轻易改变\",\"文档尽量要丰富，提供可运行的demo,减少用户查看源码来解决问题\",\"API用户更关心是如何完成他们工作，用户更愿意去看一些例子，从例子中查找与自己需求关联最紧密的内容,只要将源码复制过来既可以工作\",\"####9、简单的任务应有简单的解决方案 API要根据目标受众来分包api 解决方案：把一个API拆分成两个或多个组成部分 一部分针对调用功能的开发人员，另一部分放在独立包（或特有命名空间），用来方便他人扩展当前的模块功能 eg:JavaMail ,开发人员关注的发送邮件或从邮件服务器获得邮件列表，但是他必须花费大量时间来学习这些API，目标用户需求只想收发邮件，而不是扩展协议，优化方向错了\",\"####10、保护投资 API用户是最珍惜的宝贵财富，用户的工作也应该受到尊重\",\"提供新的版本更迭，保护api用户已写代码不要改变，原来用户写的代码，付出的努力不要化为乌有\"]},\"794\":{\"c\":[\"软件框架设计艺术\"]},\"795\":{\"c\":[\"archive\"]},\"796\":{\"h\":\"第4章-不断变化的目标\",\"t\":[\"判断一个API是否优秀，并不是简单根据第一个版本给出判断，而是看多年后，该API是否还能存在，是否仍旧保持不错\",\"清单\",\"1、第一个版本远非完美\",\"2、API向后兼容（stable API）\",\"源代码兼容 二进制兼容 功能兼容，api的副作用一致 \",\"3、面向用例的重要性 了解用户两种方式： 1、找一些用户，对其研究 2、基于用例，用例站在用户视角 3、结合使用场景 4、文档\",\"4、设计评审 解决方案：从团队成员中选择一些技术最好的人，指导他们来设计自己所需的API，这样会造成一致性问题。设计评审会达成一致性\",\"背景：过去人们一直认为设计工作不能由一个集体来完成，他需要一个架构师对所有设计进行决策，当然可以简化很多工作，但存在一个规模的限制。职责：设计，维护，传道（告诉别人如何使用）。唯一架构师的方式会受到规模限制。\",\"优秀API的规则\",\"1.用例驱动API设计 2.API设计的一致性 3.简单清晰的API 4.少即是多 5.支持改进 \",\"5、一个API的生命周期 开发API过程其实就是一个沟通交流的过程。沟通双方就是API用户和API设计者\",\"API是开发人员与用户的沟通方式\",\"6、逐步改善\",\"软件熵增加，采用推到重来这种方法，很难从根本上解决问题\",\"解决方案：改变工作方式（即下篇设计实战）\"]},\"797\":{\"c\":[\"软件框架设计艺术\"]},\"798\":{\"c\":[\"archive\"]},\"799\":{\"h\":\"第5章-只公开你要公开的内容\",\"t\":[\"###第一性原理：最少知道原则\",\"问题：向api增加一个方法容易，移除一个比较难 解决方案：要限制访问权限，最小访问原则\",\"设计的API会存在被他人误用可能，API中公开的方法都可能被误用 解决方案：设计API公开的内容最少\",\"建议 将不必要的内容从API中移走，每一个额外的辅助工具，都意味着你对该API用户未来的一个兼容承诺\",\"####1、方法优于字段 不要将类中字段对外公布，而是放置内部，让用户通过getter/setter方法来访问\",\"####2、工厂方法优于构造函数 隐藏构造细节 ####3、所有内容不可更改 不可以让类可以继承 final 类 ####4、避免滥用setter方法 setEnable() 减少\",\"####5、尽可能通过友元方式来公开功能 默认package访问方式\",\"####6、赋予对象创建者更多权利\\n建造者模式的API调用\\n####7、避免暴露深层次继承\\n用继承的方式用API，会为兼容存在潜在问题\"]},\"800\":{\"c\":[\"软件框架设计艺术\"]},\"801\":{\"c\":[\"archive\"]},\"802\":{\"h\":\"第6章-面向接口而非实现进行编程\",\"t\":[\"###第一性原理：依赖倒置原则\",\"通俗解释；将代码分成接口和实现两部分，在编写代码时，让系统的其他部分只依赖于接口\",\"面向接口编程\",\"####1、移除方法或字段 对外发布的接口，是不能移除\",\"####2、移除或添加一个类或者接口 移除不可以，添加容许\",\"####3、向现有继承体系中添加一个接口或者类 添加可以，向后兼容\",\"####4、添加方法或字段 添加可以，要小心\",\"####5、JAVA中接口和类的区别 java接口最突出特性是多继承，但真正大部分情况用不到。 选择真正的理由，对性能的最求。因为多继承可以减少对内存的占用。\",\"####6、接口弱点背后的优点 向现有接口中添加方法，总是不太容易，向后兼容不可能，与此对立优点：应用接口的效果是不可变 定义一个不可变的契约，那么就应该用接口\",\"####7、添加方法的另一种方案 采用final类\",\"####8、抽象类建议不要多用 使用抽象类，不符合面向接口编程原则，存在偷懒嫌疑 特殊点：抽象类一个优势，权限访问\",\"####9、要为增加参数做好准备 做好扩展性\",\"####10、接口VS类\\n面向接口编程，接口并非指java中interface，而是指抽象内容\"]},\"803\":{\"c\":[\"软件框架设计艺术\"]},\"804\":{\"c\":[\"archive\"]},\"805\":{\"h\":\"第7章-模块化架构\",\"t\":[\"背景：随着软件规模的增大以及功能复杂性的提高，越来越有必要将单个应用拆分为独立的块、组件、模块或者插件。每个这样的部件都是模块化架构邮寄组成单元，而且每个部件都应该是独立的，并提供定义良好的对外接口供外部调用\",\"模块化应用程序之于普通面向对象程序，相当于结构化编程之于意大利面条代码,都是为了避免GOTO效果\",\"通过检查模块间依赖，可以评估一个应用架构的好坏\",\"一个模块不依赖于另一个模块，显然该模块中类不会直接访问另一个模块中的类，这使得整个程序架构更加清晰，因为它有效避免无关代码部分之间类似GOTO的跳转\",\"解决方案：\",\"每个模块都应该对外提供公开的API 包之间避免不必要的交叉引用 \",\"只要代码开始访问其他无关模块中内容，那么技术架构退化就不可避免，从一开始就使用模块化思想进行设计，这才是王道\",\"####1、模块化设计的类型 1、界面有关的代码就不需要提供对外API 2、提供简单但又非常通用的功能类库模块 3、考虑其他第三方基于该模块进行二次开发可能性（PDF文档支持） 4、模块化架构将规范与集体实现分离，分别放置不同模块中 5、通常采用模块化类库\",\"####2、组件定位和交互 副标题：模块化架构中那些发现注入和依赖注入的模式\",\"模块化目的实现一个程序中各组成部分的松耦合\",\"依赖注入 （Spring）（Inversion of Control, IOC） 组件注入方案 1、配置 2、注解：通过注解标识JavaBean，将其注入，减少人工手写配置。（反射，编译性注解） 3、SerivceLoader 4、Lookup\",\"选用Lookup理由 1、兼容各个版本JDK 2、lookup考虑动态性，当模块卸载有监听 3、Lookup提供两类API，一个为客户端代码服务，查询已注册服务，另一类API为开发者服务，方便编写服务池\",\"####3、编写扩展点 配置Lookup 通过META-INF/serivces 注册实现类\",\"####4、循环依赖的讨论 不容许出现出现循环依赖\",\"####5、满城尽是Lookup 事件总线 Rxjava\",\"####6、Lookup滥用\\n建议用作框架设计，而不是各处都采用\"]},\"806\":{\"c\":[\"软件框架设计艺术\"]},\"807\":{\"c\":[\"archive\"]},\"808\":{\"h\":\"第8章-设计API时要区分其目标用户群\",\"t\":[\"提供给客户端代码的API与为开发商提供的API要有所不同 给用户开发者API ,为开发设计者提供注册插件扩展功能方式是SPI(Service Provider Interface)\",\"####1、C和Java语言中如何定义API和SPI C语言中函数指针 Java中的接口\",\"####2、API演进不同于SPI API中添加内容是容许的，移除是不容许的 SPI中添加内容是有损的，移除是可以的\",\"####3、java.io.writer 从jdk1.4到jdk1.5演进 反射解决兼容性 给客户使用的API，最好用final类，不容许继承 设计SPI时候，最好用接口，结合工厂模式，不容许代理\",\"####4、合理分解API API也要分类 原则\",\"把有关联的方法防止在同一个类中 对于无关的方法，不因一时找不到合适位置，随便放 把有关联的类防止在同一个包中 把一些只有特殊场景下才用到的类转移到其他地方 \",\"API集合有不同受众，要根据受众分类 api与spi间要划一条泾渭分明的界限\",\"netbeans项目把API划分四类\",\"核心类型API\",\"支持类型API\",\"核心类型SPI\",\"支持类型SPI\"]},\"809\":{\"c\":[\"软件框架设计艺术\"]},\"810\":{\"c\":[\"archive\"]},\"811\":{\"h\":\"第9章-牢记可测试性\",\"t\":[\"TDD:测试驱动开发\",\"好工具让API设计更简单\",\"兼容性测试套件TCK（Test Compatibility Kit）\"]},\"812\":{\"c\":[\"软件框架设计艺术\"]},\"813\":{\"c\":[\"archive\"]},\"814\":{\"h\":\"软件框架设计的艺术\",\"t\":[\"####置顶思考\",\"原文写的过于冗长，读书笔记做了简单摘要。 我是工程项目开发，立足于实用，更客观，实用。 借用李光耀一句话；“看看什么是行之有效的，然后去行动”\",\"所以根据原书，列一个核心清单原则\\n关注于“是什么”，并根据codeStyle来约束\\n之于“为什么”，在于项目中切身感受和重读此书\"]},\"815\":{\"c\":[\"软件框架设计艺术\"]},\"816\":{\"c\":[\"archive\"]},\"817\":{\"h\":\"1.并发编程挑战\"},\"818\":{\"h\":\"1.上下文切换\"},\"819\":{\"h\":\"多线程一定快吗？\",\"t\":[\"不一定 当并发操作执行操作循环累加不超百万次时，速度比串行执行慢。 原因是线程创建和上下切换的开销\"]},\"820\":{\"h\":\"测量上下文切换和时长\",\"t\":[\"Lmbench3 测量上下文切换的时长 vmstat 测量上下文切换次数\",\" $ vmstat 1 procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st 0 0 0 127876 398928 2297092 0 0 0 4 2 2 0 0 99 0 0 0 0 0 127868 398928 2297092 0 0 0 0 595 1171 0 1 99 0 0 #CS(Content Switch)表示上下文切换的次数，从上面的测试结果中我们可以看到，上下文 每1秒切换1000多次。 \"]},\"821\":{\"h\":\"如何减少上下文切换\",\"t\":[\"1、无锁并发编程 : 数据id按照hash算法分段取模，不同线程处理不同数据段 2、CAS算法: atomic包使用cas算法更新数据 3、使用最少线程 4、使用协程: 单线程多任务调度\"]},\"822\":{\"h\":\"实战案例\",\"t\":[\"# 用jstack命令dump线程信息，看看pid为3117的进程 sudo -u admin /opt/ifeve/java/bin/jstack 31177 > /home/tengfei.fangtf/dump17 # 统计所有线程分别处于什么状态 grep java.lang.Thread.State dump17 | awk '{print $2$3$4$5}' | sort | uniq -c 39 RUNNABLE 21 TIMED_WAITING(onobjectmonitor) 6 TIMED_WAITING(parking) 51 TIMED_WAITING(sleeping) 305 WAITING(onobjectmonitor) 3 WAITING(parking) # 打开dump文件 查看WAITING状态 \\\"http-0.0.0.0-7001-97\\\" daemon prio=10 tid=0x000000004f6a8000 nid=0x555e in Object.wait() [0x0000000052423000] java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on <0x00000007969b2280> (a org.apache.tomcat.util.net.AprEndpoint$Worker) at java.lang.Object.wait(Object.java:485) at org.apache.tomcat.util.net.AprEndpoint$Worker.await(AprEndpoint.java:1464) - locked <0x00000007969b2280> (a org.apache.tomcat.util.net.AprEndpoint$Worker) at org.apache.tomcat.util.net.AprEndpoint$Worker.run(AprEndpoint.java:1489) at java.lang.Thread.run(Thread.java:662) # 减少工作线程数 \",\"WAITING的线程少了，系统上下文切换的次数就会少， 因为每一次从 WAITTING到RUNNABLE都会进行一次上下文的切换\"]},\"823\":{\"h\":\"2.死锁\",\"t\":[\"避免死锁方法 1、避免一个线程获取多个锁 2、避免一个线程在所内同时占有多个资源，尽量保证每个锁只占用一个资源 3、尝试使用定时锁 lock.tryLock(timeout) 4、加锁解锁在一起\",\"//测试死锁 public class DeadLockDemo { private Object A = new Object(); private Object B = new Object(); private Runnable run1 = new Runnable() { @Override public void run() { synchronized (A){ try { Thread.sleep( 2000 ); }catch (InterruptedException e){ e.printStackTrace(); } synchronized (B){ System.out.println(\\\"1\\\"); } } } }; private Runnable run2 = new Runnable() { @Override public void run() { synchronized (B){ synchronized (A){ System.out.println(\\\"2\\\"); } } } }; public static void main(String[] args){ new DeadLockDemo().deadLock(); } private void deadLock(){ new Thread( run1 ).start(); new Thread( run2 ).start(); } } \"]},\"824\":{\"h\":\"3.资源限制挑战\",\"t\":[\"资源限制的挑战: 程序的执行速度受限于计算机硬件资源或软件资源\",\"引发问题: 代码并发执行，受限于资源，仍然串行执行，反而更慢，因为增加上线问调度和资源调度时间\",\"根据资源受限情况调整并发度(并发线程数)\",\"硬件资源：集群\",\"软件资源:资源池复用\"]},\"825\":{\"h\":\"juc编程源码\",\"t\":[\"https://github.com/yinlingchaoliu/juc\\ntag  \\\"dead lock\\\"\"]},\"826\":{\"c\":[\"java并发编程艺术\"]},\"827\":{\"c\":[\"juc\"]},\"828\":{\"h\":\"10.java Excutor框架\",\"t\":[\"固定线程池 newFixedThreadPool 缓存线程池 newCachedThreadPool 单个线程 newSingleThreadExecutor 定时线程池 newScheduledThreadPool\",\" //固定线程池 public static ExecutorService newFixedThreadPool(int nThreads) { return new ThreadPoolExecutor( nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>() ); } //缓存线程池 public static ExecutorService newCachedThreadPool() { return new ThreadPoolExecutor( 0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>() ); } //单个线程池 public static ExecutorService newSingleThreadExecutor() { return new ThreadPoolExecutor( 1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>() ); } //定时线程池 public static ExecutorService newScheduledThreadPoolExecutor(int corePoolSize) { return new ThreadPoolExecutor( corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS, new ScheduledThreadPoolExecutor.DelayedWorkQueue() ); } \",\" int cpu = Runtime.getRuntime().availableProcessors(); CPU密集型：Ncpu+1 IO密集型：2* Ncpu \"]},\"829\":{\"c\":[\"java并发编程艺术\"]},\"830\":{\"c\":[\"juc\"]},\"831\":{\"h\":\"11.java编程实践\"},\"832\":{\"h\":\"场景\",\"t\":[\"生产者和消费者 阻塞队列是给生产者和消费者解耦的\",\"多生产者和多消费者场景\",\"线程池与生产消费者模式\"]},\"833\":{\"h\":\"线上问题定位\",\"t\":[\"top 查看每个进程的情况\",\"top 1 查看每个CPU的性能数据。\",\"top -H 看每个线程的性能信息\",\"第一种情况，某个线程CPU利用率一直100%，则说明是这个线程有可能有死循环，那么 请记住这个PID。\",\"第二种情况，某个线程一直在TOP 10的位置，这说明这个线程可能有性能问题。\",\"第三种情况，CPU利用率高的几个线程在不停变化，说明并不是由某一个线程导致CPU 偏高。 如果是第一种情况，也有可能是GC造成，可以用jstat命令看一下GC情况\",\"sudo /opt/java/bin/jstat -gcutil 31177 1000 5\",\"sudo -u admin /opt/taobao/java/bin/jstack 31177 > /home/tengfei.fangtf/dump17\"]},\"834\":{\"h\":\"性能测试\",\"t\":[\"当前有多少台机器在压测服务器 netstat -nat | grep 12200 –c\",\"数据库连接 netstat -nat | grep 3306 –c\",\"ps命令查看下线程数 ps -eLf | grep java -c\",\"慢的SQL grep Y /home/admin/logs/xxx/monitor/dal-rw-monitor.log |awk -F',' '{print $7$5}' | sort -nr|head -20\",\"查看网络流量。 cat /proc/net/dev\",\"查看系统平均负载。 cat /proc/loadavg\",\"查看系统内存情况。 cat /proc/meminfo\",\"查看CPU的利用率。 cat /proc/stat\"]},\"835\":{\"h\":\"git地址\",\"t\":[\"https://github.com/yinlingchaoliu/juc\"]},\"836\":{\"c\":[\"java并发编程艺术\"]},\"837\":{\"c\":[\"juc\"]},\"838\":{\"h\":\"2.java并发底层实现原理\"},\"839\":{\"h\":\"1.并发三要素\",\"t\":[\"原子性：不可被中断的一个或一系列操作 可见性： 当一个线程修改一个共享变量时，另一个线程能读到修改的值 有序性：\"]},\"840\":{\"h\":\"2.volatile原理\",\"t\":[\"volatile 轻量级的synchronized，多处理器保证【可见性】 volatile使用恰当，不会引起线程上下文切换和调度 禁止指令重排\"]},\"841\":{\"h\":\"volatile\",\"t\":[\"volatile Singleton instance = new Singleton() //汇编指令 0x01a3de1d: movb $0×0,0×1104800(%esi); 0x01a3de24: lock addl $0×0,(%esp); \",\"volatile原理 1、Lock前缀指令会引起处理器缓存回写到内存 2、一个处理器的缓存回写到内存会导致其他处理器的缓存无效\"]},\"842\":{\"h\":\"3.synchronized原理\"},\"843\":{\"h\":\"应用\",\"t\":[\"对于普通同步方法，锁是当前实例对象。\",\"对于静态同步方法，锁是当前类的Class对象\",\"对于同步方法块，锁是Synchonized括号里配置的对象。\",\"用法\",\"public class SyncDemo { Object A = new Object(); public synchronized void method() { System.out.println( \\\"锁是当前实例对象\\\" ); } public synchronized static void method1() { System.out.println( \\\"锁是当前类Class\\\" ); } public void method2() { synchronized (A) { System.out.println( \\\"锁是synchronized配置对象\\\" ); } } public static void main(String[] args){ SyncDemo demo = new SyncDemo(); demo.method(); demo.method2(); SyncDemo.method1(); } } \",\"synchronized原理 JVM基于进入和退出Monitor对象来实现方法同步和代码块同步\"]},\"844\":{\"h\":\"java对象头\",\"t\":[\"synchronized用的锁是存在Java对象头里的\",\"java对象存储结构\",\"Mark Word的状态变化\"]},\"845\":{\"h\":\"锁的升级与对比\",\"t\":[\"1.锁的级别：无锁状态 < 偏向锁状态 < 轻量级锁状态 < 重量级锁状态\",\"2.锁可以升级，但不能降级 这种策略，目的是为了提高 获得锁和释放锁的效率\"]},\"846\":{\"h\":\"偏向锁\",\"t\":[\"场景: 锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁\",\"偏向锁加锁 当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID， 以后该线程在进入和退出 同步块时不需要进行CAS操作来加锁和解锁\",\"偏向锁撤销\",\"偏向锁使用了一种等到竞争出现才释放锁的机制\",\"当其他线程尝试竞争偏向锁时， 持有偏向锁的线程才会释放锁。偏向锁的撤销，需要等待全局安全点\"]},\"847\":{\"h\":\"轻量级锁\",\"t\":[\"Displaced Mark Word ： JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中\",\"轻量级锁加锁\",\"1、Displaced Mark Word\",\"2、线程尝试使用 CAS将对象头中的Mark Word替换为指向锁记录的指针\",\"轻量级锁解锁\",\"轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头 成功，表示没有竞争发生, 失败，表示当前锁存在竞争，锁就会膨胀成重量级锁\"]},\"848\":{\"h\":\"锁升级流程\",\"t\":[\"偏向锁升级\",\"轻量锁升级\"]},\"849\":{\"h\":\"锁的优缺点比较\",\"t\":[\"锁的优缺点比较\"]},\"850\":{\"h\":\"4.原子操作原理\",\"t\":[\"CAS(Compare And Swap)\"]},\"851\":{\"h\":\"处理器如何实现原子操作\",\"t\":[\"使用总线锁保证原子性 cpu操作互斥\",\"使用缓存锁保证原子性\"]},\"852\":{\"h\":\"java实现原子操作\",\"t\":[\"使用循环CAS实现原子操作\",\"juc包 atomic类\",\"使用锁机制实现原子操作\",\"jvm 中CAS操作利用CMPXCHG指令实现\",\" private AtomicInteger atomicI = new AtomicInteger( 0 ); //循环CAS public void safeCount() { for (; ; ) { int i = atomicI.get(); //cas 期望值 更新值 boolean suc = atomicI.compareAndSet( i, ++i ); if (suc) break; } } \"]},\"853\":{\"h\":\"CAS实现原子操作的三大问题\",\"t\":[\"ABA问题 :使用版本号\",\"循环时间长开销大\",\"只能保证一个共享变量的原子操作\",\"AtomicStampedReference A->B->A => 1A->2B->3A ABA解决方案\",\" private AtomicStampedReference<Integer> atomicStampedRef = new AtomicStampedReference<Integer>( 0,0 ); public void safeABACount() { for (;;){ //当前值 int ref = atomicStampedRef.getReference(); //版本 int stamp = atomicStampedRef.getStamp(); boolean suc = atomicStampedRef.compareAndSet( ref, ++ref, stamp, stamp + 1 ); System.out.println( suc + \\\" ref = \\\" + ref + \\\" stamp = \\\" + stamp ); if (suc) break; } } \"]},\"854\":{\"h\":\"5.juc编程源码\",\"t\":[\"https://github.com/yinlingchaoliu/juc\"]},\"855\":{\"c\":[\"java并发编程艺术\"]},\"856\":{\"c\":[\"juc\"]},\"857\":{\"h\":\"3.java内存模型\"},\"858\":{\"h\":\"java内存模型基础\",\"t\":[\"并发编程，两个关键问题：线程通信和线程同步\",\"java并发采用共享内存模型，通信是隐式调用的.\",\"java内存模型\",\"1）线程A把本地内存A更新过的共享变量刷新到主内存中去\",\"2）线程B到主内存中去读取线程A之前已更新过共享变量\",\"这两个步骤实质上是线程A在向线程B发送消息，而且这个通信过程必须要经过主内存。JMM通过控制主内存与每个线程的本地内存之间的交互，来为Java程序员提供 内存可见性保证\"]},\"859\":{\"h\":\"重排序\",\"t\":[\"执行程序时，为了提高性能，编译器和处理器常常会对指令做重排\",\"编译器优化的重排序\",\"指令级并行的重排序\",\"内存系统的重排序\",\"最终执行的指令序列\",\"内存屏障避免特定指令重排\",\"happens-before (线程内操作按序执行)，实际情况未必，保证结果可见\",\"as-if-serial语义：重排序不能改变执行结果\",\"不改变程序执行结果的前提下，尽可能提高并行度\"]},\"860\":{\"h\":\"java内存模型一致性\",\"t\":[\"1、一个线程中所有操作必须按照程序的顺序来执行 2、所有线程都只能看到一个单一操作执行顺序。在顺序一致性内存模型中，每个操作都必须原子执行且立刻对所有线程可见\"]},\"861\":{\"h\":\"volatile内存语义\",\"t\":[\"当一个volatile变量时，JMM会把本地内存中共享变量值刷新到主内存\",\"防止指令重排\",\"volatile 可见性\",\"volatile 变量原子性 volatile++这种复合操作不 具有原子性。\"]},\"862\":{\"h\":\"锁内存含义\",\"t\":[\"临界区互斥执行，还可以让释放锁的线程向获取同一个锁的线程发生消息\",\"当线程释放锁时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存中\",\"当线程获取锁时，JMM会把该线程对应的本地内存置为无效。从而使得被监视器保护的 临界区代码必须从主内存中读取共享变量\",\"总结\",\"线程A释放一个锁，实质上是线程A向接下来将要获取这个锁的某个线程发出了(线程A 对共享变量所做修改的)消息。\",\"线程B获取一个锁，实质上是线程B接收了之前某个线程发出的(在释放这个锁之前对共 享变量所做修改的)消息。\",\"线程A释放锁，随后线程B获取这个锁，这个过程实质上是线程A通过主内存向线程B发送消息。\"]},\"863\":{\"h\":\"final内存含义\",\"t\":[\"1、final修饰，在构造方法中，不能指令重排\",\"2、初次读包含final域对象，与初次读对象中final域，不能指令重排\",\"3、只要对象正确构造(没有内存溢出)，final修饰线程安全\",\" public class InstanceFactory { private static class InstanceHolder { public static Instance instance = new Instance(); } public static Instance getInstance() { return InstanceHolder.instance ; // 这里将导致InstanceHolder类被初始化 } } \"]},\"864\":{\"h\":\"Double Check\",\"t\":[\"volatile作用：防止指令重排\",\"memory = allocate() //1、分配对象内存空间 ctorInstance(memory) //2、初始化对象 instance = menory //3、设置instance为memory \",\"2、3重排 ，导致instance未正确初始化\",\" public class SafeDoubleCheckedLocking { private volatile static Instance instance; public static Instance getInstance() { if (instance == null) { synchronized (SafeDoubleCheckedLocking.class) { if (instance == null) instance = new Instance(); } } return instance; } } \"]},\"865\":{\"c\":[\"java并发编程艺术\"]},\"866\":{\"c\":[\"juc\"]},\"867\":{\"h\":\"4.java并发编程基础\",\"t\":[\"java线程状态 \",\"状态变化\",\"查看线程状态\",\" public class ThreadState { public static void main(String[] args) { new Thread(new TimeWaiting(), \\\"TimeWaitingThread\\\").start(); new Thread(new Waiting(), \\\"WaitingThread\\\").start(); // 使用两个Blocked线程，一个获取锁成功，另一个被阻塞 new Thread(new Blocked(), \\\"BlockedThread-1\\\").start(); new Thread(new Blocked(), \\\"BlockedThread-2\\\").start(); } // 该线程不断地进行睡眠 static class TimeWaiting implements Runnable { @Override public void run() { while (true) { sleep(100); } } } // 该线程在Waiting.class实例上等待 static class Waiting implements Runnable { @Override public void run() { while (true) { synchronized (Waiting.class) { try { Waiting.class.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } } } } // 该线程在Blocked.class实例上加锁后，不会释放该锁 static class Blocked implements Runnable { public void run() { synchronized (Blocked.class) { while (true) { sleep(100); } } } } public static void sleep(long seconds) { try { TimeUnit.SECONDS.sleep(seconds); } catch (InterruptedException e) { } } } \",\"线程优先级不能正确执行 Daemon线程 finally 块代码不能清理做清理或关闭逻辑 中断 interrupt:是一个线程的标识位\",\"优雅的终止线程\",\" class Runner implements Runnable { private volatile boolean on = true; @Override public void run() { //中断退出 while (on && !Thread.currentThread().isInterrupted()){ //循环判断 // todo working } } //关闭线程 public void cancel(){ on = false; } } \",\"$ jps 935 Jps 929 ThreadState $ jstack 929 \"]},\"868\":{\"h\":\"Daemon线程\",\"t\":[\"Daemon线程是一种支持型线程，因为它主要被用作程序中后台调度以及支持性工作\",\"Daemon线程被用作完成支持性工作，但是在Java虚拟机退出时Daemon线程中的finally块并不一定会执行\",\"public class Daemon { public static void main(String[] args){ Thread thread = new Thread( new DaemonRunner(),\\\"DaemonRunner\\\" ); thread.setDaemon( true ); thread.start(); } static class DaemonRunner implements Runnable{ @Override public void run() { try { Thread.sleep( 10_000L ); }catch (Exception e){ }finally { //finally 不一定执行 System.out.println(\\\"DaemonRunner is finish\\\"); } } } } \"]},\"869\":{\"h\":\"优雅停止线程\",\"t\":[\"中断和标识位\",\"/** * 优雅退出线程 */ public class Shutdown { static class Runner implements Runnable { private volatile boolean on = true; @Override public void run() { //中断退出 while (on && !Thread.currentThread().isInterrupted()){ //循环判断 // todo working } } //关闭线程 public void cancel(){ on = false; } } } \"]},\"870\":{\"h\":\"线程间通信\",\"t\":[\"volatile和synchronized关键字\",\"等待/通知机制\",\"管道输入/输出流\",\"Thread.join() 等待返回\",\"ThreadLocal\",\"生产者-消费者\",\"public class ProduceAndConsume { private Object lock = new Object(); private volatile boolean flag = true; private volatile int i = 0; //生产者 public void produce() { synchronized (lock) { //todo 代码执行逻辑 i = i + 1; System.out.println( \\\"produce: + 1 \\\" + i ); flag = false; lock.notifyAll(); } } //消费者 public void consume() { synchronized (lock) { while (flag) { try { //线程进入waitting状态, 会释放对象锁 lock.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } flag = true; //todo 执行逻辑 i = i - 1; System.out.println( \\\"consume: -1 \\\" + i ); } } public void consumeWait(long mills) { synchronized (lock) { long future = System.currentTimeMillis() + mills; long remaining = mills; while (remaining > 0) { try { lock.wait( remaining ); } catch (InterruptedException e) { e.printStackTrace(); return; } remaining = future - System.currentTimeMillis(); } //todo 执行代码 } } } \",\"管道读写\",\"public class Piped { private PipedWriter out; private PipedReader in; public Piped() { out = new PipedWriter(); in = new PipedReader(); //输入流于输出进行连接 否则在使用时会抛出IOException try { out.connect( in ); } catch (IOException e) { e.printStackTrace(); } } public void write() throws IOException { int receive = 0; //读取 系统输入流 while ((receive = System.in.read()) != -1) { out.write( receive ); } } public void read() throws IOException { int receive = 0; while ((receive = in.read()) != -1) { System.out.print( (char) receive ); } } public void close(){ try { out.close(); } catch (IOException e) { e.printStackTrace(); } } } public void testPipe() { final Piped piped = new Piped(); Thread thread1 = new Thread( new Runnable() { @Override public void run() { try { piped.write(); } catch (IOException e) { e.printStackTrace(); } } } ); Thread thread2 = new Thread( new Runnable() { @Override public void run() { try { piped.read(); } catch (IOException e) { e.printStackTrace(); } } } ); thread1.start(); thread2.start(); try { thread1.join(); thread2.join(); } catch (InterruptedException e) { e.printStackTrace(); } finally { piped.close(); } } \",\"join实现\",\"public final synchronized void join() throws InterruptedException { // 条件不满足，继续等待 while (isAlive()) { wait(0); } } \",\"ThreadLocal\",\"public class Profiler { private static final ThreadLocal<Long> TIME_THREAD_LOCAL = new ThreadLocal<Long>(); public static void begin(){ TIME_THREAD_LOCAL.set( System.currentTimeMillis() ); } public static long end(){ return System.currentTimeMillis() - TIME_THREAD_LOCAL.get(); } } \"]},\"871\":{\"c\":[\"java并发编程艺术\"]},\"872\":{\"c\":[\"juc\"]},\"873\":{\"h\":\"5.java锁\"},\"874\":{\"h\":\"锁可操作性\",\"t\":[\"锁获取与释放的可操作性、可中断的获取锁以 及超时获取锁\",\"public class LockUseCase { private Lock lock = new ReentrantLock(); //1. 尝试非阻塞地获取锁 //2. 能被中断地获取锁 //3. 超时获取锁 public void testLock() { lock.lock(); try { // todo work } finally { lock.unlock(); } } } \"]},\"875\":{\"h\":\"队列同步器 AQS\",\"t\":[\"队列同步器是用来构建锁或者其他同步组件的基础框架，它使用了一个int成员变量表示同步状态，通过内置的FIFO队列来完成资源获取线程的排队工作\"]},\"876\":{\"h\":\"AQS模版\",\"t\":[\"同步器是实现锁的关键，设计模式模版方法\",\"核心方法\",\"getState() 取当前同步状态。\",\"setState(int newState) 设置当前同步状态\",\"compareAndSetState(int expect,int update) 使用CAS设置当前状态，该方法能够保证状态 设置的原子性。\",\"同步器提供的模板方法\",\"独占式获取与释放同步状态 : 同一时刻只能有一个线程获取到锁，而其他获取锁的线程只能处于同步队列中等待\",\"共享式获取与释放 同步状态\",\"查询同步队列中的等待线程情况\",\"AQS方法1\",\"AQS方法2\",\"独占锁\",\" import java.util.concurrent.TimeUnit; import java.util.concurrent.locks.AbstractQueuedSynchronizer; import java.util.concurrent.locks.Condition; import java.util.concurrent.locks.Lock; class Mutex implements Lock { // 静态内部类，自定义同步器 private static class Sync extends AbstractQueuedSynchronizer { // 是否处于占用状态 protected boolean isHeldExclusively() { return getState() == 1; } // 当状态为0的时候获取锁 @Override protected boolean tryAcquire(int arg) { if (compareAndSetState(0, 1)) { setExclusiveOwnerThread(Thread.currentThread()); return true; } return false; } // 释放锁，将状态设置为0 protected boolean tryRelease(int releases) { if (getState() == 0) { throw new IllegalMonitorStateException(); } setExclusiveOwnerThread(null); setState(0); return true; } // 返回一个Condition，每个condition都包含了一个condition队列 Condition newCondition() { return new ConditionObject(); } } // 仅需要将操作代理到Sync上即可 private final Sync sync = new Sync(); @Override public void lock() { sync.acquire(1); } @Override public void unlock() { sync.release(1); } @Override public boolean tryLock() { return sync.tryAcquire(1); } @Override public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException { return sync.tryAcquireNanos(1, unit.toNanos(timeout)); } @Override public void lockInterruptibly() throws InterruptedException { sync.acquireInterruptibly(1); } @Override public Condition newCondition() { return sync.newCondition(); } } \"]},\"877\":{\"h\":\"AQS原理\",\"t\":[\"AQS主要包括:同步队列、独占式同 步状态获取与释放、共享式同步状态获取与释放以及超时获取同步状态等同步器的核心数据 结构与模板方法。\"]},\"878\":{\"h\":\"1 FIFO双向队列\",\"t\":[\"当前线程获取 同步状态失败时，同步器会将当前线程以及等待状态等信息构造成为一个节点(Node)并将其 加入同步队列，同时会阻塞当前线程，当同步状态释放时，会把首节点中的线程唤醒，使其再 次尝试获取同步状态。\",\" static final class Node { /** * CANCELLED 中断 * SIGNAL 等待 * CONDITION 条件 * PROPAGATE 共享 * INITIAL 初始状态 */ volatile int waitStatus; //前驱节点 volatile Node prev; //后继节点 volatile Node next; //线程状态 volatile Thread thread; //等待队列后继节点 Node nextWaiter; } \",\"FIFO同步队列\"]},\"879\":{\"h\":\"2、独占式同步状态获取与释放\",\"t\":[\"原理:\",\"获得锁\",\"获取同步状态\",\"失败则构造同步节点，插入队尾\",\"自旋检查同步状态，当有同步状态时，退出自旋\",\"释放锁 设置同步状态,重新引起竞争\",\"本质: 多线程并发时，一个线程获得锁进入业务逻辑，其他线程锁自旋\",\" //上锁 public final void acquire(int arg) { //获取同步状态 if (!tryAcquire(arg) && acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) selfInterrupt(); } private Node addWaiter(Node mode) { Node node = new Node(Thread.currentThread(), mode); // Try the fast path of enq; backup to full enq on failure Node pred = tail; if (pred != null) { node.prev = pred; if (compareAndSetTail(pred, node)) { pred.next = node; return node; } } enq(node); return node; } final boolean acquireQueued(final Node node, int arg) { boolean failed = true; try { boolean interrupted = false; for (;;) { final Node p = node.predecessor(); if (p == head && tryAcquire(arg)) { setHead(node); p.next = null; // help GC failed = false; return interrupted; } if (shouldParkAfterFailedAcquire(p, node) && parkAndCheckInterrupt()) interrupted = true; } } finally { if (failed) cancelAcquire(node); } } private Node enq(final Node node) { for (;;) { Node t = tail; if (t == null) { // Must initialize if (compareAndSetHead(new Node())) tail = head; } else { node.prev = t; if (compareAndSetTail(t, node)) { t.next = node; return t; } } } } public final boolean release(int arg) { if (tryRelease(arg)) { Node h = head; if (h != null && h.waitStatus != 0) unparkSuccessor(h); return true; } return false; } \"]},\"880\":{\"h\":\"2、共享式同步状态获取与释放\",\"t\":[\"读写锁\",\"获得同步状态\",\"添加共享节点\",\"退出自旋\",\"本质: 多线程进入读时，记录共享节点，退出自旋。 一个线程进入写的时候，其他线程进入共享节点进入自旋\",\" public final void acquireShared(int arg) { if (tryAcquireShared(arg) < 0) doAcquireShared(arg); } private void doAcquireShared(int arg) { final Node node = addWaiter(Node.SHARED); boolean failed = true; try { boolean interrupted = false; for (;;) { final Node p = node.predecessor(); if (p == head) { int r = tryAcquireShared(arg); if (r >= 0) { setHeadAndPropagate(node, r); p.next = null; // help GC if (interrupted) selfInterrupt(); failed = false; return; } } if (shouldParkAfterFailedAcquire(p, node) && parkAndCheckInterrupt()) interrupted = true; } } finally { if (failed) cancelAcquire(node); } } public final boolean releaseShared(int arg) { if (tryReleaseShared(arg)) { doReleaseShared(); return true; } return false; } \",\"两把共享锁\",\"public class TwinsLock implements Lock { private static final class Sync extends AbstractQueuedSynchronizer { Sync(int count) { if (count <= 0) { throw new IllegalArgumentException(\\\"count must large than zero.\\\"); } setState(count); } @Override protected int tryAcquireShared(int arg) { for (; ; ) { int current = getState(); int newCount = current - 1; if (newCount < 0 || compareAndSetState(current, newCount)) { return newCount; } } } @Override protected boolean tryReleaseShared(int arg) { for (; ; ) { int current = getState(); int newCount = current + 1; if (compareAndSetState(current, newCount)) { return true; } } } // 返回一个Condition，每个condition都包含了一个condition队列 Condition newCondition() { return new ConditionObject(); } } private final Sync sync = new Sync(2); @Override public void lock() { sync.acquireShared(1); } @Override public void unlock() { sync.releaseShared(1); } @Override public void lockInterruptibly() throws InterruptedException { sync.acquireSharedInterruptibly(1); } @Override public boolean tryLock() { return sync.tryAcquireShared(1) > 0; } @Override public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException { return sync.tryAcquireSharedNanos(1, unit.toNanos(timeout)); } @Override public Condition newCondition() { return sync.newCondition(); } } \"]},\"881\":{\"h\":\"重入锁 ReentrantLock\",\"t\":[\"重入锁 支持一个线程对资源重复加锁 支持获取锁 公平和非公平选择\",\"公平性选择：先对锁进行获取请求一定是先被满足的，这样是公平锁。反之非公平\",\"等待时间最长的线程先获得锁\",\"公平锁机制往往没有非公平锁效率高，并非任何场景都以tps作为指标 公平锁能减少“饥饿”发生的概率\"]},\"882\":{\"h\":\"重入锁\",\"t\":[\"线程再次获取锁\",\"锁最终释放\",\"核心: 根据当前线程进行计数器\",\" final boolean nonfairTryAcquire(int acquires) { final Thread current = Thread.currentThread(); int c = getState(); if (c == 0) { if (compareAndSetState(0, acquires)) { setExclusiveOwnerThread(current); return true; } } else if (current == getExclusiveOwnerThread()) { int nextc = c + acquires; if (nextc < 0) // overflow throw new Error(\\\"Maximum lock count exceeded\\\"); setState(nextc); return true; } return false; } protected final boolean tryRelease(int releases) { int c = getState() - releases; if (Thread.currentThread() != getExclusiveOwnerThread()) throw new IllegalMonitorStateException(); boolean free = false; if (c == 0) { free = true; setExclusiveOwnerThread(null); } setState(c); return free; } \"]},\"883\":{\"h\":\"公平锁和非公平锁区别\",\"t\":[\"区别：多了FIFO排队\",\"hasQueuedPredecessors\",\" protected final boolean tryAcquire(int acquires) { final Thread current = Thread.currentThread(); int c = getState(); if (c == 0) { if (!hasQueuedPredecessors() && compareAndSetState(0, acquires)) { setExclusiveOwnerThread(current); return true; } } else if (current == getExclusiveOwnerThread()) { int nextc = c + acquires; if (nextc < 0) throw new Error(\\\"Maximum lock count exceeded\\\"); setState(nextc); return true; } return false; } \"]},\"884\":{\"h\":\"对比\",\"t\":[\"public class FairAndUnfairTest { private static Lock fairLock = new FairAndUnfairLock(true); private static Lock unfairLock = new FairAndUnfairLock(false); @Test public void fair() { testLock(fairLock); } @Test public void unfair() { testLock(unfairLock); } /** * 测试锁 * @param lock */ private static void testLock(Lock lock) { for (int i = 0; i < 5; i++) { new Job(lock).start(); } } private static class Job extends Thread { private Lock lock; public Job(Lock lock) { this.lock = lock; } @Override public void run() { lock.lock(); try { System.out.print(\\\"Lock by [\\\"+getId()+\\\"]\\\"); System.out.print(\\\" Waiting by [\\\"); Collection<Thread> threads = ((FairAndUnfairLock)lock).getQueuedThreads(); for(Thread thread :threads){ System.out.print(thread.getId()+\\\",\\\"); } System.out.println(\\\"]\\\"); } catch (Exception e) { } finally { lock.unlock(); } } } private static class FairAndUnfairLock extends ReentrantLock { public FairAndUnfairLock(boolean fair) { super(fair); } public Collection<Thread> getQueuedThreads() { List<Thread> arrayList = new ArrayList<Thread>(super.getQueuedThreads()); Collections.reverse(arrayList); return arrayList; } } } \",\"输出结果\",\"公平锁 Lock by [11] Waiting by [] Lock by [12] Waiting by [13,] Lock by [13] Waiting by [14,15,] Lock by [14] Waiting by [15,] Lock by [15] Waiting by [] 非公平锁 Lock by [11] Waiting by [] Lock by [14] Waiting by [12,13,] Lock by [12] Waiting by [13,15,] Lock by [13] Waiting by [15,] Lock by [15] Waiting by [] \",\"公平锁保证锁获得按照FIFO原则，代价是大量线程切换\"]},\"885\":{\"h\":\"读写锁 ReentrantReadWriteLock\",\"t\":[\"公平性选择\",\"重进入\",\"锁降级 : 写锁降级为读锁\",\"public class ReadWriteLockDemo { private ReentrantReadWriteLock rwlock = new ReentrantReadWriteLock(); private Lock rlock = rwlock.readLock(); private Lock wlock = rwlock.writeLock(); static Map<String, Object> map = new HashMap<String, Object>(); // 获取一个key对应的value public Object get(String key) { rlock.lock(); try { return map.get(key); } finally { rlock.unlock(); } } // 设置key对应的value，并返回旧的value public Object put(String key, Object value) { wlock.lock(); try { return map.put(key, value); } finally { wlock.unlock(); } } // 清空所有的内容 public void clear() { wlock.lock(); try { map.clear(); } finally { wlock.unlock(); } } } \"]},\"886\":{\"h\":\"读写锁实现原理\",\"t\":[\"读写状态的设计\",\"写锁的获取与释放\",\"读锁的获取与释放\",\"锁降级\",\"整型变量上维护多种状态，就一定需要“按位切割使用”这个变量\",\"高16位表示读，低16位表示写\",\"写锁已经被获取，则当前线程进入等待状态 支持可重入\",\"无写锁被获取，读锁总会被成功地获取，而所做的也只是(线程安全的)增加读状态\",\" protected final boolean tryAcquire(int acquires) { Thread current = Thread.currentThread(); int c = getState(); int w = exclusiveCount(c); if (c != 0) { // 存在读锁或者当前获取线程不是已经获取写锁的线程 if (w == 0 || current != getExclusiveOwnerThread()) return false; if (w + exclusiveCount(acquires) > MAX_COUNT) throw new Error(\\\"Maximum lock count exceeded\\\"); // Reentrant acquire setState(c + acquires); return true; } if (writerShouldBlock() || !compareAndSetState(c, c + acquires)) return false; setExclusiveOwnerThread(current); return true; } protected final int tryAcquireShared(int unused) { Thread current = Thread.currentThread(); int c = getState(); if (exclusiveCount(c) != 0 && getExclusiveOwnerThread() != current) return -1; int r = sharedCount(c); if (!readerShouldBlock() && r < MAX_COUNT && compareAndSetState(c, c + SHARED_UNIT)) { if (r == 0) { firstReader = current; firstReaderHoldCount = 1; } else if (firstReader == current) { firstReaderHoldCount++; } else { HoldCounter rh = cachedHoldCounter; if (rh == null || rh.tid != getThreadId(current)) cachedHoldCounter = rh = readHolds.get(); else if (rh.count == 0) readHolds.set(rh); rh.count++; } return 1; } return fullTryAcquireShared(current); } \"]},\"887\":{\"h\":\"锁降级\",\"t\":[\"读写锁不支持升级\",\"降级指把持住当前写锁，再获取读锁，随后释放先前拥有的写锁\",\"public class DegradeLock { private ReentrantReadWriteLock lock = new ReentrantReadWriteLock(); private Lock readLock = lock.readLock(); private Lock writeLock = lock.writeLock(); private volatile boolean update = false; public void processData() { writeLock.lock(); try{ //业务xxx update = true; readLock.lock(); }finally { //先释放读锁 writeLock.unlock(); } // 锁降级完成，写锁降级为读锁 try { //todo 业务xxx }finally { readLock.unlock(); } } } \"]},\"888\":{\"h\":\"LockSupport\",\"t\":[\"park() 阻塞当前线程 parkNanos(long nanos) unpark() 唤起阻塞\"]},\"889\":{\"h\":\"Condition接口\",\"t\":[\"等待/通知\",\"public class ConditionUseCase { private Lock lock = new ReentrantLock(); private Condition condition = lock.newCondition(); public void produce(){ lock.lock(); try { //唤醒所有 condition.signalAll(); }finally { lock.unlock(); } } public void consume() throws InterruptedException { lock.lock(); try { condition.wait(); }finally { lock.unlock(); } } } \"]},\"890\":{\"h\":\"condition实现分析\",\"t\":[\"FIFO队列\",\"等待\",\"通知\"]},\"891\":{\"c\":[\"java并发编程艺术\"]},\"892\":{\"c\":[\"juc\"]},\"893\":{\"h\":\"6.java并发容器\"},\"894\":{\"h\":\"ConcurrentHashMap\",\"t\":[\"hashMap线程不安全\",\"HashMap在并发执行put操作时会引起死循环，是因为多线程会导致HashMap的Entry链表 形成环形数据结构，一旦形成环形数据结构，Entry的next节点永远不为空，就会产生死循环获取Entry，导致CPU 100%\",\"效率低下的HashTable\",\"HashTable容器使用synchronized来保证线程安全，非常低效\",\"ConcurrentHashMap的锁分段技术可有效提升并发访问率\",\"ConcurrentHashMap是由Segment数组结构和HashEntry数组结构组成\",\"concurrentHashMap\",\"concurrentHashMap\",\"初始化segments数组\",\"初始化segmentShift和segmentMask\",\"初始化每个segment\",\"定位Segment 散列算法定位到Segment\",\"get操作 整个get过程不需要加锁，除非读到的值是空才会加锁重读\",\"put操作 put方法首先定位到Segment，然后在Segment里进行插入操作\"]},\"895\":{\"h\":\"ConcurrentLinkedQueue\",\"t\":[\"线程安全队列 阻塞算法 入队和出队用同一把锁 非阻塞算法 循环CAS\",\"ConcurrentLinkedQueue1\",\"1 入队列 : 第一是定位出尾节点; 第二是使用CAS算法将入队节点设置成尾节点 不成功则重试\",\"2 出队列\",\" public boolean offer(E e) { checkNotNull(e); /// 入队前，创建一个入队节点 final Node<E> newNode = new Node<E>(e); // 死循环，入队不成功反复入队。 for (Node<E> t = tail, p = t;;) { Node<E> q = p.next; if (q == null) { // p is last node if (p.casNext(null, newNode)) { if (p != t) // hop two nodes at a time casTail(t, newNode); // Failure is OK. return true; } } else if (p == q) p = (t != (t = tail)) ? t : head; else // Check for tail updates after two hops. p = (p != t && t != (t = tail)) ? t : q; } } public E poll() { restartFromHead: for (;;) { for (Node<E> h = head, p = h, q;;) { E item = p.item; if (item != null && p.casItem(item, null)) { // Successful CAS is the linearization point // for item to be removed from this queue. if (p != h) // hop two nodes at a time updateHead(h, ((q = p.next) != null) ? q : p); return item; } else if ((q = p.next) == null) { updateHead(h, p); return null; } else if (p == q) continue restartFromHead; else p = q; } } } \"]},\"896\":{\"h\":\"阻塞队列\",\"t\":[\"队列满阻塞\",\"队列空移除阻塞\",\"ArrayBlockingQueue:一个由数组结构组成的有界阻塞队列。\",\"LinkedBlockingQueue:一个由链表结构组成的有界阻塞队列。\",\"PriorityBlockingQueue:一个支持优先级排序的无界阻塞队列\",\"DelayQueue:一个使用优先级队列实现的无界阻塞队列。\",\"SynchronousQueue:一个不存储元素的阻塞队列。\",\"LinkedTransferQueue:一个由链表结构组成的无界阻塞队列。\",\"LinkedBlockingDeque:一个由链表结构组成的双向阻塞队列。\",\"使用通知模式 条件 Condition\",\" public final void await() throws InterruptedException { if (Thread.interrupted()) throw new InterruptedException(); Node node = addConditionWaiter(); int savedState = fullyRelease(node); int interruptMode = 0; while (!isOnSyncQueue(node)) { LockSupport.park(this); if ((interruptMode = checkInterruptWhileWaiting(node)) != 0) break; } if (acquireQueued(node, savedState) && interruptMode != THROW_IE) interruptMode = REINTERRUPT; if (node.nextWaiter != null) // clean up if cancelled unlinkCancelledWaiters(); if (interruptMode != 0) reportInterruptAfterWait(interruptMode); } public static void park(Object blocker) { Thread t = Thread.currentThread(); setBlocker(t, blocker); UNSAFE.park(false, 0L); setBlocker(t, null); } public native void park(boolean var1, long var2); void os::PlatformEvent::park() { int status = pthread_mutex_lock(_mutex); //Linux 条件锁 status = pthread_cond_wait(_cond, _mutex); status = pthread_mutex_unlock(_mutex); } \"]},\"897\":{\"h\":\"Form/join\",\"t\":[\"并行执行任务的框架，是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架\",\"窃取算法\",\"分割任务\",\"执行任务并合并结果\",\" public class CountTask extends RecursiveTask<Integer> { private static final int THRESHOLD = 2; // 阈值 private int start; private int end; public CountTask(int start, int end) { this.start = start; this.end = end; } @Override protected Integer compute() { int sum = 0; // 如果任务足够小就计算任务 boolean canCompute = (end - start) <= THRESHOLD; if (canCompute) { for (int i = start; i <= end; i++) { sum += i; } } else { // 如果任务大于阈值，就分裂成两个子任务计算 int middle = (start + end) / 2; CountTask leftTask = new CountTask(start, middle); CountTask rightTask = new CountTask(middle + 1, end); // 执行子任务 leftTask.fork(); rightTask.fork(); // 等待子任务执行完，并得到其结果 int leftResult = leftTask.join(); int rightResult = rightTask.join(); // 合并子任务 sum = leftResult + rightResult; } return sum; } public static void main(String[] args) { ForkJoinPool forkJoinPool = new ForkJoinPool(); // 生成一个计算任务，负责计算1+2+3+4 CountTask task = new CountTask(1, 4); // 执行一个任务 Future<Integer> result = forkJoinPool.submit(task); try { System.out.println(result.get()); } catch (Exception e) { } } } \"]},\"898\":{\"c\":[\"java并发编程艺术\"]},\"899\":{\"c\":[\"juc\"]},\"900\":{\"h\":\"7.java原子操作\",\"t\":[\"AtomicBoolean:原子更新布尔类型。\",\"AtomicInteger:原子更新整型。\",\"AtomicLong:原子更新长整型。\",\"AtomicIntegerArray:原子更新整型数组里的元素。\",\"AtomicLongArray:原子更新长整型数组里的元素。\",\"AtomicReferenceArray:原子更新引用类型数组里的元素。\",\"AtomicReference:原子更新引用类型。\",\"AtomicReferenceFieldUpdater:原子更新引用类型里的字段。\",\"AtomicMarkableReference:原子更新带有标记位的引用类型\",\"AtomicIntegerFieldUpdater:原子更新整型的字段的更新器。\",\"AtomicLongFieldUpdater:原子更新长整型字段的更新器。\",\"AtomicStampedReference:原子更新带有版本号的引用类型\",\"底层实现\",\" public final int getAndIncrement() { for (; ; ) { int current = get(); int next = current + 1; if (compareAndSet(current, next)) return current; } } public final boolean compareAndSet(int expect, int update) { return unsafe.compareAndSwapInt(this, valueOffset, expect, update); } public final native boolean compareAndSwapInt(Object var1, long valueOffset, int expect, int update); \",\"基本类型\",\"public class AtomicIntegerTest { static AtomicInteger ai = new AtomicInteger(1); public static void main(String[] args) { System.out.println(ai.getAndIncrement()); System.out.println(ai.get()); } } \",\"数组\",\"public class AtomicIntegerArrayTest { static int[] value = new int[]{1, 2}; static AtomicIntegerArray ai = new AtomicIntegerArray(value); public static void main(String[] args) { ai.getAndSet(0, 3); System.out.println(ai.get(0)); System.out.println(value[0]); } } // 以下是输出的结果。 // 3 // 1 \",\"数组value通过构造方法传递进去，然后AtomicIntegerArray会将当前数组 复制一份，所以当AtomicIntegerArray对内部的数组元素进行修改时，不会影响传入的数组。\",\"引用对象\",\"public class AtomicReferenceTest { public static AtomicReference<User> atomicUserRef = new AtomicReference<User>(); public static void main(String[] args) { User user = new User(\\\"conan\\\", 15); atomicUserRef.set(user); User updateUser = new User(\\\"Shinichi\\\", 17); atomicUserRef.compareAndSet(user, updateUser); System.out.println(atomicUserRef.get().getName()); System.out.println(atomicUserRef.get().getOld()); } static class User { private String name; private int old; public User(String name, int old) { this.name = name; this.old = old; } public String getName() { return name; } public int getOld() { return old; } } } \",\"引用field\",\"public class AtomicIntegerFieldUpdaterTest { private static AtomicIntegerFieldUpdater<User> a = AtomicIntegerFieldUpdater.newUpdater(User.class, \\\"old\\\"); public static void main(String[] args) { User conan = new User(\\\"conan\\\", 15); // 柯南长了一岁，但是仍然会输出旧的年龄 System.out.println(a.getAndIncrement(conan)); // 输出柯南现在的年龄 System.out.println(a.get(conan)); } static class User { private String name; private int old; public User(String name, int old) { this.name = name; this.old = old; } public String getName() { return name; } public int getOld() { return old; } } } \"]},\"901\":{\"c\":[\"java并发编程艺术\"]},\"902\":{\"c\":[\"juc\"]},\"903\":{\"h\":\"8.java并发工具\"},\"904\":{\"h\":\"CountDownLatch 等待多线程完成\",\"t\":[\"等待其他线程完成\",\"倒数计数\",\"计数器只能使用1次 系统启动\",\" public class CountDownLatchTest { private static CountDownLatch latch = new CountDownLatch( 2 ); public static void main(String[] args) throws InterruptedException { new Thread( new Runnable() { @Override public void run() { latch.countDown(); System.out.println(\\\"1\\\"); } } ).start(); new Thread( new Runnable() { @Override public void run() { latch.countDown(); System.out.println(\\\"2\\\"); } } ).start(); latch.await(); System.out.println(\\\"3\\\"); } } \"]},\"905\":{\"h\":\"同步屏障CyclicBarrier\",\"t\":[\"循环使用(Cyclic)的屏障(Barrier)\",\"让一组线程到达一个屏障(也可以叫同步点)时被阻塞，直到最后一个线程到达屏障时，屏障才会 开门，所有被屏障拦截的线程才会继续运行。\",\"合并计算结果\",\"//循环计数 // reset重置次数 ，重复使用 public class CyclicBarrierTest { public static void main(String[] args) { testBarrierAction(); } static void testBarrierAction() { final CyclicBarrier barrier = new CyclicBarrier( 2, new BarrierAction() ); new Thread( new Runnable() { @Override public void run() { System.out.println( 1 ); try { barrier.await(); } catch (Exception e) { e.printStackTrace(); } } } ).start(); new Thread( new Runnable() { @Override public void run() { System.out.println( 2 ); try { barrier.await(); } catch (Exception e) { e.printStackTrace(); } } } ).start(); } static class BarrierAction implements Runnable { @Override public void run() { System.out.println( \\\"======BarrierAction=======\\\" ); } } } \"]},\"906\":{\"h\":\"CyclicBarrier和CountDownLatch的区别\",\"t\":[\"CountDownLatch的计数器只能使用一次，\",\"而CyclicBarrier的计数器可以使用reset()方法重置\"]},\"907\":{\"h\":\"控制并发线程数的Semaphore\",\"t\":[\"Semaphore(信号量)是用来控制同时访问特定资源的线程数量，它通过协调各个线程，以 保证合理的使用公共资源。\",\"流量控制\",\"//公用有限资源限制 //一次性只能有限资源并行执行 public class SemaphoreTest { private static final int THREAD_COUNT = 30; private static ExecutorService threadPool = Executors.newFixedThreadPool( THREAD_COUNT ); private static Semaphore semaphore = new Semaphore( 10 ); public static void main(String[] args){ for (int i = 0; i<THREAD_COUNT;i++){ threadPool.execute( new Runnable() { @Override public void run() { try { //资源许可 semaphore.acquire(); System.out.println(\\\"----work----\\\"); semaphore.release(); } catch (InterruptedException e) { e.printStackTrace(); } } } ); } threadPool.shutdown(); } } \"]},\"908\":{\"h\":\"线程间交换数据的Exchanger\",\"t\":[\"Exchanger也可以用于两人校对工作\",\"public class ExchangerTest { private static Exchanger<String> exchanger = new Exchanger<String>(); private static ExecutorService threadPool = Executors.newFixedThreadPool( 2 ); public static void main(String[] args){ threadPool.execute( new Runnable() { @Override public void run() { String strB = \\\"this is bank B\\\"; try { String strA = exchanger.exchange( strB); System.out.println(\\\"threadPool-1 equal \\\"+strA.equals( strB )); System.out.println(\\\"threadPool-1 A:\\\"+strA); System.out.println(\\\"threadPool-1 B:\\\"+strB); } catch (InterruptedException e) { e.printStackTrace(); } } } ); threadPool.execute( new Runnable() { @Override public void run() { String strA = \\\"this is bank A\\\"; try { String strB = exchanger.exchange( strA ); System.out.println(\\\"threadPool-2 equal \\\"+strA.equals( strB )); System.out.println(\\\"threadPool-2 A:\\\"+strA); System.out.println(\\\"threadPool-2 B:\\\"+strB); } catch (InterruptedException e) { e.printStackTrace(); } } } ); } } \"]},\"909\":{\"c\":[\"java并发编程艺术\"]},\"910\":{\"c\":[\"juc\"]},\"911\":{\"h\":\"9.java线程池\"},\"912\":{\"h\":\"用到知识点\",\"t\":[\"降低资源消耗\",\"提高响应速度\",\"提高线程的可管理性\"]},\"913\":{\"h\":\"线程池原理\",\"t\":[\"如果当前运行的线程少于corePoolSize，则创建新线程来执行任务\",\"如果运行的线程等于或多于corePoolSize，则将任务加入BlockingQueue\",\"如果无法将任务加入BlockingQueue(队列已满)，则创建新的线程来处理任务\",\"如果创建新线程将使当前运行的线程超出maximumPoolSize，任务将被拒绝，并调用RejectedExecutionHandler.rejectedExecution()方法\"]},\"914\":{\"h\":\"线程池参数\",\"t\":[\"corePoolSize(线程池的基本大小)\",\"maximumPoolSize(线程池最大数量)\",\"keepAliveTime（空闲线程活动保持时间）：线程池工作线程空闲后，保持存活时间\",\"TimeUnit（时间单位）\",\"workQueue（任务队列）：用于保存等待执行任务的阻塞队列 ArrayBlockQueue LinkedBlockQueue SynchronousQueue(不存储元素阻塞队列) PriorityBlockingQueue(优先级无限阻塞队列)\",\"threadFactory(线程工厂)\",\"RejectedExecutionHandler 饱和策略 1、AbortPolicy:直接抛出异常 2、CallerRunsPolicy:调用者所在线程来运行任务 3、DiscardOrderestPolicy:丢队列最近一个任务，并执行 4、DiscardPolicy:不处理，丢掉\"]},\"915\":{\"h\":\"关闭线程池\",\"t\":[\"shutdownNow shutdown\"]},\"916\":{\"h\":\"线程池监控\",\"t\":[\"taskCount:线程池需要执行的任务数量。\",\"completedTaskCount:线程池在运行过程中已完成的任务数量，小于或等于taskCount。\",\"largestPoolSize:线程池里曾经创建过的最大线程数量。\",\"getPoolSize:线程池的线程数量\",\"getActiveCount:获取活动的线程数。\",\"重写扩展方法\",\"beforeExecute\",\"afterExecute\",\"terminated\"]},\"917\":{\"h\":\"线程池自定义实现\",\"t\":[\"1、shutdown 优雅关闭线程 2、notify wait 实现生产者消费者\",\"/** * 线程池技术 * @author chentong */ public class DefaultThreadPool<Job extends Runnable> implements ThreadPool<Job> { private static final int MAX_WORKER_NUM = 10; private static final int DEFAULT_WORKER_NUM = 5; private static final int MIN_WORKER_NUM = 1; private final List<Worker> workers = Collections.synchronizedList( new ArrayList<Worker>() ); //lock同步 private final Object lock = new Object(); //原子变量操作 private volatile AtomicInteger workerNum = new AtomicInteger( 0 ); private final JobQueue<Job> queue = new JobQueue<>(); public DefaultThreadPool() { addWorkers( DEFAULT_WORKER_NUM ); } @Override public void execute(Job job) { if (job != null) { queue.enqueue( job ); } } @Override public void addWorkers(int num) { synchronized (lock) { if (num + this.workerNum.get() > MAX_WORKER_NUM) { num = MAX_WORKER_NUM - this.workerNum.get(); if (num <= 0) return; } for (int i = 0; i < num; i++) { Worker worker = new Worker( queue ); workers.add( worker ); Thread thread = new Thread( worker, \\\"ThreadPool-Worker-\\\" + workerNum.incrementAndGet() ); thread.start(); } } } @Override public void removeWorker(int num) { synchronized (lock) { //线程池最小线程数 if (num >= this.workerNum.get()) { num = this.workerNum.get() - MIN_WORKER_NUM; if (num <= 0) return; } int count = 0; while (count < num) { Worker worker = workers.get( count ); if (workers.remove( worker )) { worker.shutdown(); count++; } } //减少线程 workerNum.getAndAdd( -num ); } } @Override public void shutdown() { synchronized (lock){ for (Worker worker : workers) { worker.shutdown(); } workers.clear(); } } @Override public int getJobSize() { return queue.getJobSize(); } } //优雅关闭线程 class Worker implements Runnable { private volatile boolean running = true; private JobQueue queue; public Worker(JobQueue queue) { this.queue = queue; } @Override public void run() { while (running) { Runnable job = queue.dequeue(); if (job != null) { try { job.run(); } catch (Exception e) { } } } } public void shutdown() { running = false; } } //工作队列 //2、notify wait 实现生产者消费者 class JobQueue<Job extends Runnable> { private final LinkedList<Job> jobs = new LinkedList<>(); private final Object lock = new Object(); public void enqueue(Job job) { synchronized (lock) { lock.notifyAll(); jobs.addLast( job ); } } public Job dequeue() { synchronized (lock) { while (jobs.isEmpty()) { try { lock.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } Job job = jobs.removeFirst(); return job; } } public int getJobSize() { synchronized (lock) { return jobs.size(); } } } //线程池 interface ThreadPool<Job extends Runnable> { //执行job void execute(Job job); //关闭连接池 void shutdown(); //增加works void addWorkers(int num); //减少工作线程 void removeWorker(int num); int getJobSize(); } \"]},\"918\":{\"c\":[\"java并发编程艺术\"]},\"919\":{\"c\":[\"juc\"]},\"920\":{\"h\":\"Balking模式\",\"t\":[\"通过标志位，停止返回线程当前操作\",\"public class Balking{ private volatile boolean initFlag=false; public synchronized void init(){ if(initFlag){ return; } doSomething(); initFlag=true; } } \"]},\"921\":{\"c\":[\"java高并发编程\"]},\"922\":{\"c\":[\"juc\"]},\"923\":{\"h\":\"CountDownLatch和CyclicBarrier区别\",\"t\":[\"1、先并行再串行\",\"countDown()-->await() 先计数减少，最后在串行\",\"CountDownLatch main(){ int TASK= 10; ExecuteService service = Exectuors.newFixedThreadPool(5); CountDownLatch downLatch = new CountDownLatch(TASK); try{ for(int i=0; i < TASK; i++){ service.execute(new MyTask(downLatch, i)); } print(\\\"-------AWAIT-------\\\"); downLatch.await(); //此处之后串行操作 }catch(Exception e){ service.shutdown(); print(\\\"-------END-------\\\"); } } \",\"Mytask\",\"public class MyTask implement Runnable{ private final CountDownLatch latch; private final int count; public MyTask(CountDownLatch latch, int count){ this.latch = latch; this.count = latch; } public void run(){ sleep(1); print(\\\"count=\\\"+count); latch.countDown(); } } \",\"输出结果 -------AWAIT ------- ------- count=0------- ------- count=1------- ------- count=2------- ------- count=3------- ------- count=4------- ................... ------- count=9------- ------- END------- \",\"CyclicBarrier循环栏珊\"]},\"924\":{\"c\":[\"java高并发编程\"]},\"925\":{\"c\":[\"juc\"]},\"926\":{\"h\":\"Future模式\",\"t\":[\"提货单模式\",\"异步返回\",\"//接口 public interface Data{ String getContent(); } //FutureData提货单 public class FutureData implement Data{ private volatile ready = false; private Data realData ; public synchrionized void setRealData(Data data){ this.realData = data; this.ready = true; notifyAll(); } public String getContent(){ while(!ready){ wait(); } return realData.getContent(); } } //RealData 耗时交易 public class RealData implement Data{ private String content; public void execute(){ sleep(10); content = \\\"耗时交易10s\\\"; } public String getContent(){ return content; } } \",\"调用\",\"main(){ FutureData futureData = new FutureData(); new Thread(){ public void run(){ RealData realData = new RealData(); //耗时交易 realData.execute(); futureData.setRealData(realData); } } printf(\\\"打印\\\"+ futureData.getContent()); } \",\"juc\",\"Callable接口 Runable有返回值\",\"Future\\nFutureTask\"]},\"927\":{\"c\":[\"java高并发编程\"]},\"928\":{\"c\":[\"juc\"]},\"929\":{\"h\":\"Immutable模式\",\"t\":[\"不改变模式\",\"变量初始化后，不在改变\",\"技巧：在构造函数中，初始化final变量 示例\",\"public class Student{ private final String name; public Student(String name){ this.name = name; } public String getName(){ return name; } } \",\"JUC示例\",\"copy-on-wirte 读写分离，写时复制\\nCopyOnWirteArrayList\"]},\"930\":{\"c\":[\"java高并发编程\"]},\"931\":{\"c\":[\"juc\"]},\"932\":{\"h\":\"Read-Write-Lock模式\",\"t\":[\"读写锁\",\"public class Data{ private String buffer; private final ReadWriteLock lock = new ReadWriteLock(); public String read(){ lock.readLock(); try{ return doRead(); }finally{ lock.readUnlock(); } } public void write(String buffer){ lock.writeLock(); try{ return doWrite(); }finally{ lock.writeUnlock(); } } } \",\"ReentrantReadWriteLock 重入读写锁\",\"public class ReentrantData{ private String buffer; private final ReadWriteLock lock = new ReentrantReadWriteLock(); private final readLock = lock.readLock(); private final writeLock = lock.writeLock(); public String read(){ readLock.lock(); try{ return doRead(); }finally{ readLock.unLock(); } } public void write(String buffer){ writeLock.lock(); try{ return doWrite(); }finally{ writeLock.unLock(); } } } \",\"锁降级 降级为读锁\",\"获取写入锁\\n获取读取锁\\n释放写入锁\"]},\"933\":{\"c\":[\"java高并发编程\"]},\"934\":{\"c\":[\"juc\"]},\"935\":{\"h\":\"Single-Threaded-Exectution模式\",\"t\":[\"一次只有一个线程通过\",\"示例：\",\"public class Gate{ private volatile int count = 0; public synchionized void pass(){ //逻辑 count++; } } \",\"使用场景： 多线程访问非线程安全方法，解决方案：使用单线程执行模式。\",\"线程安全方法： synchronizedCollection方法 synchronizedList方法 synchronizedMap方法 synchronizedSet方法 synchronizedSortedMap方法 synchronizedSortedSet方法\",\"java.util.concurrent方法(JUC方法) ConcurrentHashMap分段锁存储key-value\",\"详细介绍 Java7/8 中的 HashMap 和 ConcurrentHashMap 全解析\",\"ConcurrentHashMap总结\"]},\"936\":{\"c\":[\"java高并发编程\"]},\"937\":{\"c\":[\"juc\"]},\"938\":{\"h\":\"Thread-Per-Message模式\",\"t\":[\"异步消息模式\",\"代码实现： client:委托人\",\"main(){ Host host = new Host(); host.request(); } \",\"Host宿主\",\"public class Host{ private final Helper helper = new Helper(); public void request(){ //可优化为线程池 new Thread(){ public void run(){ //耗时操作 helper.handle(); } }.start(); } } \",\"Helper助手\",\"public class Helper{ public handler(){ //耗时操作 } } \",\"提高吞吐量\",\"JUC\",\"ThreadFactory创建Thread Thread newThread(Runnable r) 隐藏线程创建过程 //Execuors获取ThreadFactory Executors.defaultThreadFactory() 快速创建Executor Executor接口 Executor executor = new Executor(); executor.execute(Runnable r); ExecutorService 接口 ExecutorService executorservice = Executors.newCachedThreadPool(); executorservice.execute(Runnable r); executorservice.shutdown();//关闭线程池 ScheduledExecutorService (调度服务) ScheduledExecutorService ses = Executors.newScheduledThreadPool(5); ses.schedule(Runnable r, long delay, TimeUnit unit) Executors 创建线程池实例工具类 \"]},\"939\":{\"c\":[\"java高并发编程\"]},\"940\":{\"c\":[\"juc\"]},\"941\":{\"h\":\"java线程深入讲解及线程池实现\"},\"942\":{\"h\":\"1、基础概念\",\"t\":[\"线程：程序执行流最小单元。 线程拥有各自计数器，堆栈，局部变量的属性，并且能够访问共享内存变量\",\"注意：线程可以访问共享内存变量，高并发是指多线程对共享资源的原子操作。\",\"线程优先级：1-10级，默认是5，高优先级分配时间片数量多于低优先级\",\"Thread.setPriority(5); \",\"注意：优先级不能作为程序正确性依赖，因操作系统差异\",\"精灵进程：后台调度及支持性工作的进程\",\"Thread.setDaemon(true); \"]},\"943\":{\"h\":\"2、线程状态\",\"t\":[\"java线程状态6种：\",\"线程状态\",\"描述\",\"初始状态(NEW)\",\"新创建了一个线程对象，但还没有调用start()方法\",\"运行状态(RUNNABLE)\",\"Java线程中将就绪（ready）和运行中（running）两种状态笼统的成为“运行”。\",\"阻塞状态(BLOCKED)\",\"表示线程阻塞于锁\",\"等待状态(WAITING)\",\"进入该状态的线程需要等待\",\"超时等待状态(TIME_WAITING)\",\"该状态不同于WAITING，它可以在指定的时间内自行返回\",\"终止状态(TERMINATED)\",\"表示该线程已经执行完毕\",\"线程状态图\"]},\"944\":{\"h\":\"3、线程函数\",\"t\":[\"函数名\",\"作用\",\"sleep\",\"休眠，对象锁不会释放，不可以被interrupt（）中断\",\"join\",\"等待目标程序完成后再继续执行\",\"yield\",\"线程礼让，运行状态转为就绪状态，让出执行权\",\"interrupt\",\"中断线程\",\"IsInterrupted\",\"判断线程是否被中断\"]},\"945\":{\"h\":\"join与yield区别\",\"t\":[\"join 线程之间顺序执行 yield 让出当前线程执行权\",\"启动线程之前，最好构建名字，便于定位\",\"中断理解：线程中断的标识位，由其他线程通知该线程，若当前线程sleep,则无法中断\",\"过期方法suspend、resume、stop不用。原因：陷入暂停、停止，线程不会释放占有资源，引发不确定性\",\"安全终止线程： 1）interrupt中断 2）用boolean变量控制\",\"实战示例\",\"//实现demo private class WorkRunner implements Runnable{ private volatile boolean switchFlag = true; // boolean变量线程安全且插入屏障 public void run(){ //两重判断，一个boolean，一个支持中断状态 while(switchFlag && !Thread.currentThread().isInterrupted()){ doSomething() } } public void cancel(){ switchFlag = false; } } //调用者 main(){ Thread thread = new Thread(new WorkRunner(), \\\"work\\\"); thread.start() //两种中断方法 thread.interrupt(); thread.cancel(); } \"]},\"946\":{\"h\":\"对象锁\",\"t\":[\"函数名\",\"作用\",\"wait\",\"当前线程调用对象的wait()方法，当前线程释放对象锁，进入等待队列。\",\"wait(long timeout)\",\"超时等待返回，单位毫秒\",\"wait(long,int)\",\"单位纳秒\",\"notify\",\"通知一个在对象上等待的线程，使其wait返回\",\"notifyAll\",\"通知所有等待线程在该对象的线程\",\"wait，notify等方法必须放在synchroized代码块中\"]},\"947\":{\"h\":\"经典范例\"},\"948\":{\"h\":\"等待-通知（生产消费者）\",\"t\":[\"消费者 1）获取对象的锁 2）条件不满足等待（wait），被通知后仍要检查条件 3）条件满足执行\",\"生产者 1）获得对象的锁 2）改变条件 3）通知所有等待对象上的线程\",\"伪代码\",\"synchrionized(对象){ while(条件不满足){ 对象.wait(); } 处理逻辑 } synchionized(对象){ 改变条件 对象.notifyAll() } \"]},\"949\":{\"h\":\"实战编程\",\"t\":[\"1、消费者 须增加超时设计\",\"public synchrionized void fetch(){ long future = System.currentTimeMills()+mills; long remaining = mills; while( 条件 && remaining > 0){ 对象.wait(remaining); remaining = future - System.currentTimeMills(); } 处理逻辑 } \",\"优点：避免方法执行时间过长，不会永久阻塞调用者\",\"2、阻塞队列BlockQueue 阻塞队列用来给生产者与消费者解耦\",\"3、线程池 本质一个线程安全工作队列连接工作者线程和客户端线程\"]},\"950\":{\"h\":\"实现线程池的三步\",\"t\":[\"1、实现线程安全的阻塞队列 (生产者-消费者范例)\",\"public interface BlockQueue<E>{ void add(E e); //添加元素 E take(); //取走元素 E take(int timeout); int size(); //队列size } public ArrayBlockQueue<E> implement BlockQueue<E>{ private List<E> blockList = new ArrayList(); private Object lock = new Object(); private volaitle int size = 0; //生产者 public void add(E e){ synchionized(lock){ blockList.add(e); lock.notifyAll(); } } //消费者 public E take(int timeout){ synchionized(lock){ if(timeout <= 0){ while(blockList.isEmpty()){ lock.wait(); } }else{ long future = System.currentTimeMills()+timeout; long remaining = timeout; while(blockList.isEmpty() && remain > 0){ lock.wait(remaining); remaining = future - System.currentTimeMills(); } } return blockList.get(0); } //消费者 public E take(){ return take(0); } //获得当前队列大小 public int size(){ synchionized(lock){ size = blockList.size(); } return size; } } \",\"2、编写执行者可安全终止的Worker\",\"public Worker<Job extend Runnable> implement Runnable{ private volatile boolean switchFlag = true; private BlockQueue<Job> blockQueue; public Worker(BlockQueue queue){ blockQueue = queue; } public void run(){ while(switchFlag && !Thread.currentThread().isInterrupted()){ Job job = blockQueue.take(); job.run(); } } public shutdown(){ switchFlag = false; } } \",\"3、线程池框架\",\"线程池接口规范 public interface ThreadPool<Job extends Runnable>{ //执行工作 void execute(Job job); //关闭线程池 void shutdown(); //增加线程 void addWorker(int num); //减少线程 void removeWork(int num); //当前任务job数 int getJobSize(); //当前线程数 int getThreadCount(); } public SimpleThreadPool<Job extends Runnable> implement ThreadPool<Job>{ //任务阻塞队列 private BlockQueue<Job> blockQueue = new ArrayBlockQueue()<Job>; //线程队列 private List<Worker> workerList = Collections.sysnchronizedList(new ArrayList<Worker>); //最大线程数 private static final int MAX_WORK_NUM = 10; //默认线程数 private static final int DEFAULT_WORK_NUM = 3; public SimpleThreadPool(){ addWorker(DEFAULT_WORK_NUM); } //执行任务 public void execute(Job job){ blockQueue.add(job); } //关闭线程池 public void synchrionized shutdown(){ for(Worker worker : workerList){ worker.shutdown(); } } //增加线程任务 public synchrionized void addWorker(int num){ //当前线程数 int threadNum = workerList.size(); //限制创建线程数不能超过最大限度 if(threadNum + num > MAX_WORK_NUM){ num = MAX_WORK_NUM - threadNum ; } for(int i = 0; i < num ; i++){ creatOneWorker(); } } public synchrionized void removeWorker(int num){ //当前线程数 int threadNum = workerList.size(); //最大删除数是当前线程数 if(num > threadNum){ num = threadNum; } //移除工作线程 for(int i = 0; i < num ;i++){ Worker worker = workerList.get(i); worker.shutdown(); workerList.remove(worker); } } //当前线程数 public synchrionized int getThreadCount(){ return workerList.size(); } //获得当前任务数 public int getJobSize(){ return blockQueue.size(); } //创建一个线程 private void creatOneWorker(){ //创建工作者 Worker worker = new Worker(blockQueue); workerList.add(worker); Thread thread = new Thread(worker); thread.start(); } } \",\"ThreadPoolExecutor线程池\",\"ThreadFactory定制线程\",\"Executors.newFixedThreadPool() 固定线程数\",\"Executors.newCachedThreadPool() 缓存线程池\",\"Executors.newScheduledThreadPool() 定时线程池\"]},\"951\":{\"c\":[\"java高并发编程\"]},\"952\":{\"c\":[\"juc\"]},\"953\":{\"h\":\"多线程程序评价标准\"},\"954\":{\"h\":\"标准\",\"t\":[\"安全性：不损坏对象\",\"生存性：必要处理能够被执行\",\"可复用性：类可重复利用\",\"性能：能快速、大批量地执行处理 1）吞吐量 2）响应性 3）容量 4）效率、可伸缩性、降级\"]},\"955\":{\"h\":\"总结\",\"t\":[\"安全性和生存性：必要条件（必须遵守标准）\",\"可复用性和性能：提高质量\"]},\"956\":{\"c\":[\"java高并发编程\"]},\"957\":{\"c\":[\"juc\"]},\"958\":{\"h\":\"生产-消费者模式\",\"t\":[\"生产消费模型\",\"示例\",\"public interface BlockQueue<E>{ void add(E e); //添加元素 E take(); //取走元素 E take(int timeout); int size(); //队列size } public ArrayBlockQueue<E> implement BlockQueue<E>{ private List<E> blockList = new ArrayList(); private Object lock = new Object(); private volaitle int size = 0; //生产者 public void add(E e){ synchionized(lock){ blockList.add(e); lock.notifyAll(); } } //消费者 public E take(int timeout){ synchionized(lock){ if(timeout <= 0){ while(blockList.isEmpty()){ lock.wait(); } }else{ long future = System.currentTimeMills()+timeout; long remaining = timeout; while(blockList.isEmpty() && remain > 0){ lock.wait(remaining); remaining = future - System.currentTimeMills(); } } return blockList.get(0); } //消费者 public E take(){ return take(0); } //获得当前队列大小 public int size(){ synchionized(lock){ size = blockList.size(); } return size; } } \",\"场景 生产者--消费者关系\",\"juc使用\",\"线程安全阻塞队列 put/take方法\",\"BlockingQueue 阻塞队列 ArrayBlockingQueue 基于数组BlockingQueue LinkedBlockingQueue 基于链表BlockingQueue 个数不限 PriorityBlockingQueue 带有优先级的BlockingQueue DelayQueue 一定时间才可以take的BlockingQueue ConcurrentLinkedQueue 元素个数没有限制的安全队列\",\"juc数据交换\",\"Exchanger交换缓冲区\",\"main(){ final Exchanger exchanger = new Exchanger(); new Thread( new Worker(exchanger, \\\"chen\\\")).start(); new Thread( new Worker(exchanger, \\\"tong\\\")).start(); } public Worker implement Runnable{ private String data; private Exchanger changer; public Worker(Exchanger changer, String data){ this. changer = changer; this.data = data; } public void run(){ System.out.println(Thread.currentThread().getName() + \\\"正在把数据 \\\" + data + \\\" 交换出去\\\"); String data2 = (String) exchanger.exchange(data); System.out.println(Thread.currentThread().getName() + \\\"交换数据 到 \\\" + data2); } } \",\"当线程A调用Exchange对象的exchange()方法后，他会陷入阻塞状态，直到线程B也调用了exchange()方法，然后以线程安全的方式交换数据，之后线程A和B继续运行。\"]},\"959\":{\"c\":[\"java高并发编程\"]},\"960\":{\"c\":[\"juc\"]},\"961\":{\"h\":\"juc总结\"},\"962\":{\"c\":[\"面试题\"]},\"963\":{\"c\":[\"juc\"]},\"964\":{\"h\":\"juc总结\",\"t\":[\"juc总结\"]},\"965\":{\"c\":[\"面试题\"]},\"966\":{\"c\":[\"juc\"]},\"967\":{\"h\":\"jvm总结\"},\"968\":{\"c\":[\"面试题\"]},\"969\":{\"c\":[\"jvm\"]},\"970\":{\"h\":\"jvm内存总结\"},\"971\":{\"c\":[\"面试题\"]},\"972\":{\"c\":[\"jvm\"]},\"973\":{\"h\":\"jvm总结\",\"t\":[\"jvm总结\"]},\"974\":{\"c\":[\"面试题\"]},\"975\":{\"c\":[\"jvm\"]},\"976\":{\"h\":\"10、类加载器\"},\"977\":{\"h\":\"知识扩展\",\"t\":[\"1、依赖classpath 读取class文件\",\"2、map存储class类\",\"3、动态加载class\"]},\"978\":{\"h\":\"1、定义classloader\",\"t\":[\"type ClassLoader struct { cp *classpath.Classpath // 用于搜索和读取 class 文件 classMap map[string]*Class // 已经加载的类数据，key=全限定类名 } // 创建一个类加载器 func NewClassLoader(cp *classpath.Classpath) *ClassLoader { return &ClassLoader{ cp: cp, classMap: make(map[string]*Class), } } // 把类数据加载到方法区 func (self *ClassLoader) LoadClass(name string) *Class { if class, ok := self.classMap[name]; ok { return class // 类已经加载 } return self.loadNonArrayClass(name) // 普通类的数据来自于class文件，数组类的数据是jvm在运行期间动态生成的 } \"]},\"979\":{\"h\":\"2、类加载过程\",\"t\":[\"// 类加载过程 func (self *ClassLoader) loadNonArrayClass(name string) *Class { data, entry := self.readClass(name) // 1. 找到class文件并读取为 byte[] class := self.defineClass(data) // 2. byte[] -> ClassFile -> Class，并放入方法区 link(class) // 3. 进行链接 fmt.Printf(\\\"[Loaded %s from %s] \\\", name, entry) return class } \",\"readClass 从classpath 读取 class []byte\",\"func (self *ClassLoader) readClass(name string) ([]byte, classpath.Entry) { data, entry, err := self.cp.ReadClass(name) if err != nil { panic(\\\"java.lang.ClassNotFoundException: \\\" + name) } return data, entry } \",\"defineClass 加载class\",\"func (self *ClassLoader) defineClass(data []byte) *Class { class := parseClass(data) class.loader = self resolveSuperClass(class) // 递归加载父类 resolveInterfaces(class) // 递归加载接口类 self.classMap[class.name] = class // 放入已加载列表 return class } // byte[] -> ClassFile -> Class func parseClass(data []byte) *Class { cf, err := classfile.Parse(data) if err != nil { panic(\\\"java.lang.ClassFormatError\\\") } return newClass(cf) } func resolveSuperClass(class *Class) { if class.name != \\\"java/lang/Object\\\" { class.superClass = class.loader.LoadClass(class.superClassName) // 递归加载父类 } } func resolveInterfaces(class *Class) { interfaceCount := len(class.interfaceNames) if interfaceCount > 0 { class.interfaces = make([]*Class, interfaceCount) for i, interfaceName := range class.interfaceNames { class.interfaces[i] = class.loader.LoadClass(interfaceName) } } } \",\"link 链接class 给class赋初始值\",\"func link(class *Class) { verify(class) // 验证 prepare(class) // 准备 } // 准备阶段：给类变量分配空间并给予初始值 func prepare(class *Class) { calcInstanceFieldSlotIds(class) // 计算实例变量的个数，并分别标号 calcStaticFieldSlotIds(class) // 计算类变量的个数，并分别标号 allocAndInitStaticVars(class) // 为类变量分配空间并初始化 } \"]},\"980\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\"]},\"981\":{\"c\":[\"手动编写jvm虚拟机\"]},\"982\":{\"c\":[\"jvmgo\"]},\"983\":{\"h\":\"11、对象实例化new-object\",\"t\":[\"创建对象需要关键指令\",\"指令\",\"作用\",\"idc\",\"常量池常量推到操作数栈顶\",\"new\",\"新建实例\",\"putfield/getfield\",\"存取实例变量\",\"putstatic/getstatic\",\"存取静态变量\",\"Instanceof/checkcast\",\"判断对象是否属于某类型\",\"public class MyObject { public static int staticVar; public int instanceVar; public static void main(String[] args) { int x = 32768; // ldc MyObject myObj = new MyObject(); // new MyObject.staticVar = x; // putstatic x = MyObject.staticVar; // getstatic myObj.instanceVar = x; // putfield x = myObj.instanceVar; // getfield Object obj = myObj; if (obj instanceof MyObject) { // instanceof myObj = (MyObject) obj; // checkcast System.out.println(myObj.instanceVar); } } } \"]},\"984\":{\"h\":\"关键指令编写\",\"t\":[\"new\",\"func (self *NEW) Execute(frame *rtda.Frame) { cp := frame.Method().Class().ConstantPool() // 1. 获取当前栈帧所在类的常量池 classRef := cp.GetConstant(self.Index).(*heap.ClassRef) // 2. 获取类符号引用 class := classRef.ResolvedClass() // 3. 根据类符号引用创建类 if !class.InitStarted() { frame.RevertNextPC() base.InitClass(frame.Thread(), class) return } if class.IsInterface() || class.IsAbstract() { panic(\\\"java.lang.InstantiationError\\\") } ref := class.NewObject() // 4. 创建对象 frame.OperandStack().PushRef(ref) // 5. 将引用对象push到栈顶 } \",\"getstatic\",\"func (self *GET_STATIC) Execute(frame *rtda.Frame) { cp := frame.Method().Class().ConstantPool() // 1. 获取字段符号引用 fieldRef := cp.GetConstant(self.Index).(*heap.FieldRef) // 2. 将字段符号引用解析为Field field := fieldRef.ResolvedField() class := field.Class() if !class.InitStarted() { frame.RevertNextPC() base.InitClass(frame.Thread(), class) return } // 不是静态变量 if !field.IsStatic() { panic(\\\"java.lang.IncompatibleClassChangeError\\\") } stack := frame.OperandStack() slots := class.StaticVars() // 3. 从Field的静态变量列表中获取值，push到操作数栈 switch field.Descriptor()[0] { case 'Z', 'B', 'C', 'S', 'I': stack.PushInt(slots.GetInt(field.SlotId())) case 'F': stack.PushFloat(slots.GetFloat(field.SlotId())) case 'J': stack.PushLong(slots.GetLong(field.SlotId())) case 'D': stack.PushDouble(slots.GetDouble(field.SlotId())) case 'L', '[': // 对象或数组 stack.PushRef(slots.GetRef(field.SlotId())) } } \",\"getfield\",\"func (self *GET_FIELD) Execute(frame *rtda.Frame) { cp := frame.Method().Class().ConstantPool() // 1. 获取字段符号引用 fieldRef := cp.GetConstant(self.Index).(*heap.FieldRef) // 2. 将字段符号引用解析为Field field := fieldRef.ResolvedField() if field.IsStatic() { panic(\\\"java.lang.IncompatibleClassChangeError\\\") } stack := frame.OperandStack() // 3. 获取对象引用 ref := stack.PopRef() if ref == nil { panic(\\\"java.lang.NullPointerException\\\") } slots := ref.Fields() // 4. 从对象引用的实例变量列表中获取值，push到操作数栈 switch field.Descriptor()[0] { case 'Z', 'B', 'C', 'S', 'I': stack.PushInt(slots.GetInt(field.SlotId())) case 'F': stack.PushFloat(slots.GetFloat(field.SlotId())) case 'J': stack.PushLong(slots.GetLong(field.SlotId())) case 'D': stack.PushDouble(slots.GetDouble(field.SlotId())) case 'L', '[': // 对象或数组 stack.PushRef(slots.GetRef(field.SlotId())) } } \",\"checkcast\",\"func (self *CHECK_CAST) Execute(frame *rtda.Frame) { // 1. 从操作数栈获取对象引用ref stack := frame.OperandStack() ref := stack.PopRef() stack.PushRef(ref) // (Integer)null -> null引用可以转换为任何类型 if ref == nil { return } cp := frame.Method().Class().ConstantPool() // 2. 获取当前栈帧所在类的常量池 classRef := cp.GetConstant(self.Index).(*heap.ClassRef) // 3. 获取类符号引用 class := classRef.ResolvedClass() // 4. 根据类符号引用创建类 if !ref.IsInstanceOf(class) { // 5. 判断 ref instanceof class panic(\\\"java.lang.ClassCastException\\\") // 6. 如果不是，抛异常 } } \",\"instanceof\",\"func (self *INSTANCE_OF) Execute(frame *rtda.Frame) { // 1. 从操作数栈获取对象引用ref stack := frame.OperandStack() ref := stack.PopRef() // null instanceof Xxx -> false if ref == nil { stack.PushInt(0) return } cp := frame.Method().Class().ConstantPool() // 2. 获取当前栈帧所在类的常量池 classRef := cp.GetConstant(self.Index).(*heap.ClassRef) // 3. 获取类符号引用 class := classRef.ResolvedClass() // 4. 根据类符号引用创建类 if ref.IsInstanceOf(class) { // 5. 判断 ref instanceof class stack.PushInt(1) // 6. 将结果压入栈 } else { stack.PushInt(0) } } \",\"idc指令\",\"func (self *LDC) Execute(frame *rtda.Frame) { _ldc(frame, self.Index) } func (self *LDC_W) Execute(frame *rtda.Frame) { _ldc(frame, self.Index) } func (self *LDC2_W) Execute(frame *rtda.Frame) { // 1. 从运行时常量池获取常量c stack := frame.OperandStack() cp := frame.Method().Class().ConstantPool() c := cp.GetConstant(self.Index) // 2. 将常量c压入操作数栈 switch c.(type) { case int64: stack.PushLong(c.(int64)) case float64: stack.PushDouble(c.(float64)) default: panic(\\\"java.lang.ClassFormatError\\\") } } func _ldc(frame *rtda.Frame, index uint) { // 1. 从运行时常量池获取常量c stack := frame.OperandStack() cp := frame.Method().Class().ConstantPool() c := cp.GetConstant(index) // 2. 将常量c压入操作数栈 switch c.(type) { case int32: stack.PushInt(c.(int32)) case float32: stack.PushFloat(c.(float32)) //case string: //case *heap.ClassRef: default: panic(\\\"todo:ldc!\\\") } } \"]},\"985\":{\"h\":\"编写测试类\",\"t\":[\" //测试classloader func parseClassLoader(cmd *Cmd) { cp := classpath.Parse(cmd.XjreOption, cmd.cpOption) //获得classLoader classLoader := heap.NewClassLoader(cp) //获得加载类名字 className := strings.Replace(cmd.class, \\\".\\\", \\\"/\\\", -1) mainClass := classLoader.LoadClass(className) //获得main方法 mainMethod := mainClass.GetMainMethod() if mainMethod != nil { interpret(mainMethod) }else{ fmt.Printf(\\\"Main method not found in class %s \\\",cmd.class) } } \"]},\"986\":{\"h\":\"shell脚本\",\"t\":[\"go run main -test \\\"classloader\\\" -cp test/lib/example.jar jvmgo.book.ch06.MyObject #测试classloader \"]},\"987\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\"]},\"988\":{\"c\":[\"手动编写jvm虚拟机\"]},\"989\":{\"c\":[\"jvmgo\"]},\"990\":{\"h\":\"12、方法调用和返回\"},\"991\":{\"h\":\"知识扩展\",\"t\":[\"静态方法和实例方法\",\"静态方法(类方法)\",\"实例方法\",\"通过类调用\",\"通过实例调用\",\"静态绑定\",\"动态绑定\",\"编译期确定\",\"运行期确定\",\"invokestatic 静态方法\",\"invokespecial 调用无须绑定的实例方法，例如：构造方法，私有方法，super\",\"invokeinterface 动态绑定- 调用接口\",\"invokevirtual 动态绑定 -其他\",\"invokedynamic 动态绑定 扩展\"]},\"992\":{\"h\":\"关键流程\",\"t\":[\"解析符号引用 找方法\",\"// 从当前类及其父类中查找方法 func lookupMethod(class *Class, name string, descriptor string) *Method { method := LookupMethodInClass(class, name, descriptor) if method == nil { method = lookupMethodInInterfaces(class.interfaces, name, descriptor) } return method } \"]},\"993\":{\"h\":\"核心方法调用\",\"t\":[\"方法调用\",\"// invokerFrame - 调用当前的方法的哪一个方法栈帧 // method - 当前方法，即被 invokerFrame 调用的方法 func InvokeMethod(invokerFrame *rtda.Frame, method *heap.Method) { // 1.使用同一个线程为当前方法创建栈帧并压入线程栈顶 thread := invokerFrame.Thread() newFrame := thread.NewFrame(method) thread.PushFrame(newFrame) // 2. 获取当前方法需要的参数个数，并从调用者 invokerFrame 的操作数栈中弹出制定个数个参数，放到当前方法的栈帧的本地变量中 argSlotCount := int(method.ArgSlotCount()) if argSlotCount > 0 { for i := argSlotCount - 1; i >= 0; i-- { slot := invokerFrame.OperandStack().PopSlot() newFrame.LocalVars().SetSlot(uint(i), slot) } } //hack if method.IsNative() { if method.Name() == \\\"registerNatives\\\" { thread.PopFrame() } else { panic(fmt.Sprintf(\\\"native method: %v.%v%v \\\", method.Class().Name(), method.Name(), method.Descriptor())) } } } \",\"返回指令\",\"// 将当前栈帧的返回值（操作数栈顶）移除并推入调用者栈帧的操作数栈顶 // 将当前栈帧从线程中移除 func (self *ARETURN) Execute(frame *rtda.Frame) { thread := frame.Thread() currentFrame := thread.PopFrame() // 当前方法的栈帧 invokerFrame := thread.TopFrame() // 调用当前方法的前一个方法的栈帧 retVal := currentFrame.OperandStack().PopRef() invokerFrame.OperandStack().PushRef(retVal) } func (self *IRETURN) Execute(frame *rtda.Frame) { thread := frame.Thread() currentFrame := thread.PopFrame() // 当前方法的栈帧 invokerFrame := thread.TopFrame() // 调用当前方法的前一个方法的栈帧 retVal := currentFrame.OperandStack().PopInt() invokerFrame.OperandStack().PushInt(retVal) } \",\"方法调用指令\",\"invokestatic 静态方法\",\"func (self *INVOKE_STATIC) Execute(frame *rtda.Frame) { cp := frame.Method().Class().ConstantPool() methodRef := cp.GetConstant(self.Index).(*heap.MethodRef) method := methodRef.ResolveMethod() // 根据方法符号引用：方法name、方法描述符descriptor、所包含的类指针 查找方法 if !method.IsStatic() { panic(\\\"java.lang.IncompatibleClassChangeError\\\") } class := methodRef.ResolvedClass() if !class.InitStarted() { frame.RevertNextPC() base.InitClass(frame.Thread(), class) return } base.InvokeMethod(frame, method) } \",\"invokespecial 构造方法\",\"func (self *INVOKE_SPECIAL) Execute(frame *rtda.Frame) { currentClass := frame.Method().Class() cp := currentClass.ConstantPool() methodRef := cp.GetConstant(self.Index).(*heap.MethodRef) resolvedClass := methodRef.ResolvedClass() resolveMethod := methodRef.ResolveMethod() //构造方法 if resolveMethod.Name() == \\\"<init>\\\" && resolveMethod.Class() != resolvedClass { panic(\\\"java.lang.NoSuchMethodError\\\") } if resolveMethod.IsStatic() { panic(\\\"java.lang.IncompatibleClassChangeError\\\") } //todo count -1避免数组越界 ref := frame.OperandStack().GetRefFromTop(resolveMethod.ArgSlotCount()-1) // 弹出 this 引用 if ref == nil { panic(\\\"java.lang.NullPointerException\\\") } base.InvokeMethod(frame, resolveMethod) } \",\"invokeinterface\",\"func (self *INVOKE_INTERFACE) Execute(frame *rtda.Frame) { cp := frame.Method().Class().ConstantPool() methodRef := cp.GetConstant(self.index).(*heap.InterfaceMethodRef) resolvedMethod := methodRef.ResolvedInterfaceMethod() if resolvedMethod.IsStatic() || resolvedMethod.IsPrivate() { panic(\\\"java.lang.IncompatibleClassChangeError\\\") } ref := frame.OperandStack().GetRefFromTop(resolvedMethod.ArgSlotCount() - 1) if ref == nil { panic(\\\"java.lang.NullPointerException\\\") // todo } if !ref.Class().IsImplements(methodRef.ResolvedClass()) { panic(\\\"java.lang.IncompatibleClassChangeError\\\") } methodToBeInvoked := heap.LookupMethodInClass(ref.Class(), methodRef.Name(), methodRef.Descriptor()) if methodToBeInvoked == nil || methodToBeInvoked.IsAbstract() { panic(\\\"java.lang.AbstractMethodError\\\") } if !methodToBeInvoked.IsPublic() { panic(\\\"java.lang.IllegalAccessError\\\") } base.InvokeMethod(frame, methodToBeInvoked) } \"]},\"994\":{\"h\":\"编写解释器interpreter\",\"t\":[\"func Interpret(method *heap.Method, logInst bool) { thread := rtda.NewTread() //创建线程 frame := thread.NewFrame(method) //创建栈帧 thread.PushFrame(frame) //将栈帧push线程stack中 defer catchErr(thread) loop(thread, logInst) } //执行指令 func loop(thread *rtda.Thread, logInst bool) { reader := &base.ByteCodeReader{} for { //获取当前栈 frame := thread.CurrentFrame() pc := frame.NextPC() thread.SetPC(pc) //decode reader.Reset(frame.Method().Code(), pc) //读取指令opcode opcode := reader.ReadUint8() // 读取操作码 opCode（指令类型） inst := instructions.NewInstruction(opcode) // 根据opCode创建相应的指令 inst.FetchOperands(reader) // 从字节码中读取操作数 frame.SetNextPC(reader.PC()) // 将当前读取到的字节码的位置设置到 frame 的 nextPc 中，用于执行下一条指令 if logInst { logInstruction(frame, inst) } //执行栈帧 inst.Execute(frame) //线程中栈帧执行完毕退出 if thread.IsStackEmpty() { break } } } \"]},\"995\":{\"h\":\"测试demo\",\"t\":[\"//函数调用与返回 public class InvokeDemo implements Runnable { public static void main(String[] args) { new InvokeDemo().test(); } public void test() { InvokeDemo.staticMethod(); // invokestatic InvokeDemo demo = new InvokeDemo(); // invokespecial demo.instanceMethod(); // invokespecial super.equals(null); // invokespecial this.run(); // invokevirtual ((Runnable) demo).run(); // invokeinterface } public static void staticMethod() {} private void instanceMethod() {} @Override public void run() {} } \"]},\"996\":{\"h\":\"go 测试分支\",\"t\":[\"//测试函数调用与返回 func parseReturn(cmd *Cmd) { cp := classpath.Parse(cmd.XjreOption, cmd.cpOption) //获得classLoader classLoader := heap.NewClassLoader(cp, cmd.verboseClassFlag) //获得加载类名字 className := strings.Replace(cmd.class, \\\".\\\", \\\"/\\\", -1) mainClass := classLoader.LoadClass(className) //获得main方法 mainMethod := mainClass.GetMainMethod() if mainMethod != nil { Interpret(mainMethod, cmd.verboseInstFlag) } else { fmt.Printf(\\\"Main method not found in class %s \\\", cmd.class) } } \"]},\"997\":{\"h\":\"shell脚本\",\"t\":[\"#测试函数调用返回 go run main -verbose:class -verbose:inst -test \\\"return\\\" -cp test/lib/example.jar jvmgo.book.ch07.InvokeDemo go run main -verbose:class -verbose:inst -test \\\"return\\\" -cp test/lib/example.jar jvmgo.book.ch07.FibonacciTest \"]},\"998\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\",\"提交代码标记 “return”\"]},\"999\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1000\":{\"c\":[\"jvmgo\"]},\"1001\":{\"h\":\"13、类初始化\"},\"1002\":{\"h\":\"类初始化触发情况\",\"t\":[\"1、执行new指令创建类实例\",\"2、执行putstatic、getstatic 指令存取类的静态变量\",\"3、执行invokestatic调用静态方法\",\"4、初始化一个类时，类的超类还没有初始化，要先初始化超类\",\"5、执行某些反射操作\",\"type Class struct{ //其他字段 initStarted bool } func (self *Class) InitStarted() bool { return self.initStarted } // setter func (self *Class) StartInit() { self.initStarted = true } \"]},\"1003\":{\"h\":\"初始化逻辑\",\"t\":[\"在指令 putstatic、getstatic、new、invokestatic 添加初始化逻辑\",\" if !class.InitStarted() { frame.RevertNextPC() base.InitClass(frame.Thread(), class) return } \",\"func (self *Frame) RevertNextPC() { self.nextPC = self.thread.pc } \",\"base逻辑\",\"func InitClass(thread *rtda.Thread, class *heap.Class) { class.StartInit() // 设置开始初始化标志 scheduleClinit(thread, class) // 准备执行类初始化方法，push到栈顶，下一次执行的时候就会执行<cinit> initSuperClass(thread, class) // 循环初始化父类 } func scheduleClinit(thread *rtda.Thread, class *heap.Class) { clinit := class.GetClinitMethod() if clinit != nil { // exec <clinit> newFrame := thread.NewFrame(clinit) thread.PushFrame(newFrame) } } func initSuperClass(thread *rtda.Thread, class *heap.Class) { if !class.IsInterface() { superClass := class.SuperClass() if superClass != nil && !superClass.InitStarted() { InitClass(thread, superClass) } } } \"]},\"1004\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\"]},\"1005\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1006\":{\"c\":[\"jvmgo\"]},\"1007\":{\"h\":\"14、jvm支持数组\"},\"1008\":{\"h\":\"知识扩展\",\"t\":[\"基本型数组 一维数组\",\"引用型数组 多维数组\",\"数组类\",\"普通类\",\"java虚拟机运行时生成\",\"class文件加载\",\"newarray/anewarray\",\"new创建\",\"存放aload/astore\",\"存放putfield/getfield\",\"arraylength读取长度\",\"([)+数组元素类型描述符 eg:\",\"int[] -> [I\",\"int[][] ->[[I\",\"Object -> [Ljava/lang/Object;\"]},\"1009\":{\"h\":\"关键函数\",\"t\":[\"type Object struct{ class *Class data interface{} //void * } // 新创建的实例对象需要赋初值，go默认赋了 func newObject(class *Class) *Object { return &Object{ class: class, data: newSlots(class.instanceSlotCount), } } \",\"以int数组为例\",\"array_object.go func (self *Object) Ints() []int32 { return self.data.([]int32) } //arraylength func (self *Object) ArrayLength() int32 { switch self.data.(type) { case []int32: return int32(len(self.data.([]int32))) default: panic(\\\"Not array!\\\") } } array_class.go func (self *Class) NewArray(count uint) *Object { if !self.IsArray() { panic(\\\"Not array class: \\\" + self.name) } switch self.Name() { case \\\"[I\\\": //int return &Object{self, make([]int32, count)} default: return &Object{self, make([]*Object, count)} } } \",\"类加载器支持数组\",\"class_loader.go // 把类数据加载到方法区 func (self *ClassLoader) LoadClass(name string) *Class { if class, ok := self.classMap[name]; ok { return class // 类已经加载 } //数组类型 if name[0] == '['{ return self.loadArrayClass(name) } //非数组类型 return self.loadNonArrayClass(name) // 普通类的数据来自于class文件，数组类的数据是jvm在运行期间动态生成的 } func (self *ClassLoader) loadArrayClass(name string) *Class { class := &Class{ accessFlags: ACC_PUBLIC, // todo name: name, loader: self, initStarted: true, superClass: self.LoadClass(\\\"java/lang/Object\\\"), interfaces: []*Class{ self.LoadClass(\\\"java/lang/Cloneable\\\"), self.LoadClass(\\\"java/io/Serializable\\\"), }, } self.classMap[name] = class return class } \",\"newarray指令\",\"func (self *NEW_ARRAY) Execute(frame *rtda.Frame) { stack := frame.OperandStack() count := stack.PopInt() if count < 0 { panic(\\\"java.lang.NegativeArraySizeException\\\") } classLoader := frame.Method().Class().Loader() arrClass := getPrimitiveArrayClass(classLoader, self.atype) arr := arrClass.NewArray(uint(count)) stack.PushRef(arr) } func getPrimitiveArrayClass(loader *heap.ClassLoader, atype uint8) *heap.Class { switch atype { case AT_BOOLEAN: return loader.LoadClass(\\\"[Z\\\") case AT_BYTE: return loader.LoadClass(\\\"[B\\\") case AT_CHAR: return loader.LoadClass(\\\"[C\\\") case AT_SHORT: return loader.LoadClass(\\\"[S\\\") case AT_INT: return loader.LoadClass(\\\"[I\\\") case AT_LONG: return loader.LoadClass(\\\"[J\\\") case AT_FLOAT: return loader.LoadClass(\\\"[F\\\") case AT_DOUBLE: return loader.LoadClass(\\\"[D\\\") default: panic(\\\"Invalid atype!\\\") } } \",\"符号表转换 class_name_helper.go\",\" var primitiveTypes = map[string]string{ \\\"void\\\": \\\"V\\\", \\\"boolean\\\": \\\"Z\\\", \\\"byte\\\": \\\"B\\\", \\\"short\\\": \\\"S\\\", \\\"int\\\": \\\"I\\\", \\\"long\\\": \\\"J\\\", \\\"char\\\": \\\"C\\\", \\\"float\\\": \\\"F\\\", \\\"double\\\": \\\"D\\\", } // [XXX -> [[XXX // int -> [I // XXX -> [LXXX; func getArrayClassName(className string) string { return \\\"[\\\" + toDescriptor(className) } // [[XXX -> [XXX // [LXXX; -> XXX // [I -> int func getComponentClassName(className string) string { if className[0] == '[' { componentTypeDescriptor := className[1:] return toClassName(componentTypeDescriptor) } panic(\\\"Not array: \\\" + className) } // [XXX => [XXX // int => I // XXX => LXXX; func toDescriptor(className string) string { if className[0] == '[' { // array return className } if d, ok := primitiveTypes[className]; ok { // primitive return d } // object return \\\"L\\\" + className + \\\";\\\" } // [XXX => [XXX // LXXX; => XXX // I => int func toClassName(descriptor string) string { if descriptor[0] == '[' { // array return descriptor } if descriptor[0] == 'L' { // object return descriptor[1 : len(descriptor)-1] } for className, d := range primitiveTypes { if d == descriptor { // primitive return className } } panic(\\\"Invalid descriptor: \\\" + descriptor) } \",\"aload/astore指令\",\"func (self *AALOAD) Execute(frame *rtda.Frame) { stack := frame.OperandStack() index := stack.PopInt() arrRef := stack.PopRef() checkNotNil(arrRef) refs := arrRef.Refs() checkIndex(len(refs), index) stack.PushRef(refs[index]) } func (self *AASTORE) Execute(frame *rtda.Frame) { stack := frame.OperandStack() ref := stack.PopRef() index := stack.PopInt() arrRef := stack.PopRef() checkNotNil(arrRef) refs := arrRef.Refs() checkIndex(len(refs), index) refs[index] = ref } \"]},\"1010\":{\"h\":\"测试数组\",\"t\":[\"go run main -verbose:class -verbose:inst -test \\\"array\\\" -cp test/lib/example.jar jvmgo.book.ch08.BubbleSortTest \"]},\"1011\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\"]},\"1012\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1013\":{\"c\":[\"jvmgo\"]},\"1014\":{\"h\":\"15、jvm支持字符串-数组扩展\"},\"1015\":{\"h\":\"采用hook方式生成字符串\",\"t\":[\"加载java/lang/String => jstr\",\"ClassLoader加载'[C' char数组\",\"将go 字符串utf-8 转换为 java utf-16格式\",\"反射修改string value字段\",\"// go string -> java.lang.String func JString(loader *ClassLoader, goStr string) *Object { if internedStr, ok := internedStrings[goStr]; ok { return internedStr } //go 字符串 utf-8 => java utf-16 chars := stringToUtf16(goStr) //加载 java类 char数组 jChars := &Object{loader.LoadClass(\\\"[C\\\"), chars} //加载java类 String jStr := loader.LoadClass(\\\"java/lang/String\\\").NewObject() //反射设置 jStr.SetRefVar(\\\"value\\\", \\\"[C\\\", jChars) internedStrings[goStr] = jStr return jStr } \",\"反射支持\",\"object.go func (self *Object) GetRefVar(name, descriptor string) *Object { field := self.class.getField(name, descriptor, false) slots := self.data.(Slots) return slots.GetRef(field.slotId) } func (self *Object) SetRefVar(name, descriptor string, ref *Object) { field := self.class.getField(name, descriptor, false) slots := self.data.(Slots) slots.SetRef(field.slotId, ref) } class.go func (self *Class) getField(name, descriptor string, isStatic bool) *Field { for c := self; c != nil; c = c.superClass { for _, field := range c.fields { if field.IsStatic() == isStatic && field.name == name && field.descriptor == descriptor { return field } } } return nil } // todo 支持反射 reflection func (self *Class) GetRefVar(fieldName, fieldDescriptor string) *Object { field := self.getField(fieldName, fieldDescriptor, true) return self.staticVars.GetRef(field.slotId) } func (self *Class) SetRefVar(fieldName, fieldDescriptor string, ref *Object) { field := self.getField(fieldName, fieldDescriptor, true) self.staticVars.SetRef(field.slotId, ref) } \",\"idc扩展\",\"//todo 特别支持 case string: //todo 支持字符串 压栈 internedStr := heap.JString(class.Loader(),c.(string)) stack.PushRef(internedStr) \",\"classloader扩展\",\"func initStaticFinalVar(){ case \\\"Ljava/lang/String;\\\": //todo 支持字符串 goStr := cp.GetConstant(cpIndex).(string) jStr := JString(class.Loader(),goStr) vars.SetRef(slotId,jStr) } } \"]},\"1016\":{\"h\":\"字符串测试\",\"t\":[\" func Interpret(){ //字符串参数 jArgs := createArgsArray(method.Class().Loader(),args) frame.LocalVars().SetRef(0,jArgs) } //创建args数组 func createArgsArray(loader *heap.ClassLoader, args []string) *heap.Object { //加载class类 stringClass := loader.LoadClass(\\\"java/lang/String\\\") argsArr := stringClass.ArrayClass().NewArray(uint(len(args))) jArgs := argsArr.Refs() for i, arg := range args { jArgs[i] = heap.JString(loader, arg) } return argsArr } \"]},\"1017\":{\"h\":\"shell脚本\",\"t\":[\"#测试字符串数组 go run main -test \\\"string\\\" -cp test/lib/example.jar jvmgo.book.ch01.HelloWorld #测试字符串参数 go run main -test \\\"string\\\" -cp test/lib/example.jar jvmgo.book.ch08.PrintArgs 'go jvm args' 'PrintArgs' 'Hello , World' \"]},\"1018\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\",\"提交标签 \\\"array\\\"\"]},\"1019\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1020\":{\"c\":[\"jvmgo\"]},\"1021\":{\"h\":\"16、本地方法调用\"},\"1022\":{\"h\":\"本地方法注册与调用\",\"t\":[\"注册\",\"//本地方法定义为函数 type NativeMethod func(frame *rtda.Frame) //定义函数数组 var registry = map[string]NativeMethod{} //空方法 func emptyNativeMethod(frame *rtda.Frame) { // do nothing } //注册本地方法 func Register(className, methodName, methodDescriptor string, method NativeMethod) { key := className + \\\"~\\\" + methodName + \\\"~\\\" + methodDescriptor registry[key] = method } //寻找注册方法 func FindNativeMethod(className, methodName, methodDescriptor string) NativeMethod { key := className + \\\"~\\\" + methodName + \\\"~\\\" + methodDescriptor if method, ok := registry[key]; ok { return method } //如果是 object中 registerNatives 返回空方法，且此方法不会注册到registry中 if methodDescriptor == \\\"()V\\\" && methodName == \\\"registerNatives\\\"{ return emptyNativeMethod } return nil } \",\"invoke_native指令\",\"func (self *INVOKE_NATIVE) Execute(frame *rtda.Frame) { method := frame.Method() className := method.Class().Name() methodName := method.Name() methodDescriptor := method.Descriptor() nativeMethod := native.FindNativeMethod(className, methodName, methodDescriptor) if nativeMethod == nil { methodInfo := className + \\\".\\\" + methodName + methodDescriptor panic(\\\"java.lang.UnsatisfiedLinkError: \\\" + methodInfo) } nativeMethod(frame) } \",\"调用本地方法\",\"method.go\",\"func newMethod(class *Class, cfMethod *classfile.MemberInfo) *Method { method := &Method{} method.class = class method.copyMemberInfo(cfMethod) method.copyAttributes(cfMethod) //method.calArgSlotCount() //参数 md := parseMethodDescriptor(method.descriptor) method.calcArgSlotCount(md.parameterTypes) if method.IsNative() { //方法字节码表插入Code method.injectCodeAttribute(md.returnType) } return method } //0xfe 对应助记符指令 invoke_native func (self *Method) injectCodeAttribute(returnType string) { self.maxStack = 4 // todo self.maxLocals = self.argSlotCount switch returnType[0] { case 'V': self.code = []byte{0xfe, 0xb1} // return case 'L', '[': self.code = []byte{0xfe, 0xb0} // areturn case 'D': self.code = []byte{0xfe, 0xaf} // dreturn case 'F': self.code = []byte{0xfe, 0xae} // freturn case 'J': self.code = []byte{0xfe, 0xad} // lreturn default: self.code = []byte{0xfe, 0xac} // ireturn } } \"]},\"1023\":{\"h\":\"添加native类\",\"t\":[\"native/java/lang/Object.go\",\"package lang import \\\"unsafe\\\" import \\\"main/native\\\" import \\\"main/rtda\\\" const jlObject = \\\"java/lang/Object\\\" func init() { native.Register(jlObject, \\\"getClass\\\", \\\"()Ljava/lang/Class;\\\", getClass) native.Register(jlObject, \\\"hashCode\\\", \\\"()I\\\", hashCode) native.Register(jlObject, \\\"clone\\\", \\\"()Ljava/lang/Object;\\\", clone) } // public final native Class<?> getClass(); // ()Ljava/lang/Class; func getClass(frame *rtda.Frame) { this := frame.LocalVars().GetThis() class := this.Class().JClass() frame.OperandStack().PushRef(class) } // public native int hashCode(); // ()I func hashCode(frame *rtda.Frame) { this := frame.LocalVars().GetThis() hash := int32(uintptr(unsafe.Pointer(this))) frame.OperandStack().PushInt(hash) } // protected native Object clone() throws CloneNotSupportedException; // ()Ljava/lang/Object; func clone(frame *rtda.Frame) { this := frame.LocalVars().GetThis() cloneable := this.Class().Loader().LoadClass(\\\"java/lang/Cloneable\\\") if !this.Class().IsImplements(cloneable) { panic(\\\"java.lang.CloneNotSupportedException\\\") } frame.OperandStack().PushRef(this.Clone()) } \",\"在invoke_native中注册\",\"//todo 非常重要 _ \\\"main/native/java/lang\\\" //@todo init 注册 \"]},\"1024\":{\"h\":\"测试方法\",\"t\":[\"#测试本地方法调用 go run main -cp test/lib/example.jar jvmgo.book.ch09.GetClassTest go run main -cp test/lib/example.jar jvmgo.book.ch09.StringTest go run main -cp test/lib/example.jar jvmgo.book.ch09.ObjectTest go run main -cp test/lib/example.jar jvmgo.book.ch09.CloneTest \"]},\"1025\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\",\"提交标签 \\\"native\\\"\"]},\"1026\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1027\":{\"c\":[\"jvmgo\"]},\"1028\":{\"h\":\"17、ClassLoader原理\"},\"1029\":{\"h\":\"ClassLoader原理\",\"t\":[\"class 与 object互相引用，可以让class找到实例，实例找到对应class\",\"type Class struct { jClass *Object // java.lang.Class实例 } // 表示实例 type Object struct { extra interface{} //todo native 记录额外信息 class } \"]},\"1030\":{\"h\":\"classLoader原理\",\"t\":[\"1 、先加载\\\"java/lang/Class\\\"\",\"2、加载基本数据类型\",\"// 创建一个类加载器 //todo bootstrp ClassLoader启动类加载器 func NewClassLoader(cp *classpath.Classpath, verboseFlag bool) *ClassLoader { loader := &ClassLoader{ cp: cp, verboseFlag: verboseFlag, //添加测试标志 classMap: make(map[string]*Class), } //先载入java.lang.Class loader.loadBasicClasses() //加载基本类型 loader.loadPrimitiveClasses() return loader } \",\"先加载class ，构建class与object关系\",\"func (self *ClassLoader) loadBasicClasses() { //bootstrap loader 先加载 java/lang/Class jlClass := self.LoadClass(\\\"java/lang/Class\\\") //互相引用 class与object ,便于互相查找 for _, class := range self.classMap { if class.jClass == nil { class.jClass = jlClass.NewObject() //新建object class.jClass.extra = class // object.extra 指向当前class } } } \",\"加载基本数据类型\",\"//加载基本类型 func (self *ClassLoader) loadPrimitiveClasses() { for primitiveType, _ := range primitiveTypes { self.loadPrimitiveClass(primitiveType) } } // void func (self *ClassLoader) loadPrimitiveClass(className string) { class := &Class{ accessFlags: ACC_PUBLIC, name: className, loader: self, initStarted: true, } class.jClass = self.classMap[\\\"java/lang/Class\\\"].NewObject() class.jClass.extra = class self.classMap[className] = class } \",\"LoadClass\",\"// 把类数据加载到方法区 func (self *ClassLoader) LoadClass(name string) *Class { if class, ok := self.classMap[name]; ok { return class // 类已经加载 } var class *Class //数组类型 if name[0] == '[' { class = self.loadArrayClass(name) } else { class = self.loadNonArrayClass(name) } //互相引用 class与object if jlClass, ok := self.classMap[\\\"java/lang/Class\\\"]; ok { class.jClass = jlClass.NewObject() class.jClass.extra = class } return class // 普通类的数据来自于class文件，数组类的数据是jvm在运行期间动态生成的 } \",\"native/java/lang/Class.go\",\"const jlClass = \\\"java/lang/Class\\\" func init() { native.Register(jlClass, \\\"getPrimitiveClass\\\", \\\"(Ljava/lang/String;)Ljava/lang/Class;\\\", getPrimitiveClass) native.Register(jlClass, \\\"getName0\\\", \\\"()Ljava/lang/String;\\\", getName0) native.Register(jlClass, \\\"desiredAssertionStatus0\\\", \\\"(Ljava/lang/Class;)Z\\\", desiredAssertionStatus0) native.Register(jlClass, \\\"isInterface\\\", \\\"()Z\\\", isInterface) native.Register(jlClass, \\\"isPrimitive\\\", \\\"()Z\\\", isPrimitive) } // static native Class<?> getPrimitiveClass(String name); // (Ljava/lang/String;)Ljava/lang/Class; func getPrimitiveClass(frame *rtda.Frame) { nameObj := frame.LocalVars().GetRef(0) name := heap.GoString(nameObj) loader := frame.Method().Class().Loader() class := loader.LoadClass(name).JClass() frame.OperandStack().PushRef(class) } // private native String getName0(); // ()Ljava/lang/String; func getName0(frame *rtda.Frame) { this := frame.LocalVars().GetThis() class := this.Extra().(*heap.Class) name := class.JavaName() nameObj := heap.JString(class.Loader(), name) frame.OperandStack().PushRef(nameObj) } // private static native boolean desiredAssertionStatus0(Class<?> clazz); // (Ljava/lang/Class;)Z func desiredAssertionStatus0(frame *rtda.Frame) { // todo frame.OperandStack().PushBoolean(false) } // public native boolean isInterface(); // ()Z func isInterface(frame *rtda.Frame) { vars := frame.LocalVars() this := vars.GetThis() class := this.Extra().(*heap.Class) stack := frame.OperandStack() stack.PushBoolean(class.IsInterface()) } // public native boolean isPrimitive(); // ()Z func isPrimitive(frame *rtda.Frame) { vars := frame.LocalVars() this := vars.GetThis() class := this.Extra().(*heap.Class) stack := frame.OperandStack() stack.PushBoolean(class.IsPrimitive()) } \",\"class文件加载顺序\",\"+ go run main -verbose:class -cp test/lib/example.jar jvmgo.book.ch09.TestLoadClass [loadNonArrayClass Loaded java/lang/Object from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar] [loadNonArrayClass Loaded java/io/Serializable from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar] [loadNonArrayClass Loaded java/lang/reflect/AnnotatedElement from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar] [loadNonArrayClass Loaded java/lang/reflect/GenericDeclaration from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar] [loadNonArrayClass Loaded java/lang/reflect/Type from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar] [loadNonArrayClass Loaded java/lang/Class from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar] [loadNonArrayClass Loaded jvmgo/book/ch09/TestLoadClass from /Users/chentong/github/jvmgo/go/test/lib/example.jar] [loadNonArrayClass Loaded java/lang/Comparable from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar] [loadNonArrayClass Loaded java/lang/CharSequence from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar] [loadNonArrayClass Loaded java/lang/String from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar] [loadNonArrayClass Loaded java/lang/Cloneable from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar] + echo OK OK \"]},\"1031\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\",\"提交标签 \\\"native\\\"\"]},\"1032\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1033\":{\"c\":[\"jvmgo\"]},\"1034\":{\"h\":\"18、异常处理\"},\"1035\":{\"h\":\"异常处理\",\"t\":[\"unchecked 异常 ： java.lang.RuntimeException、java.lang.Error\",\"checked异常:其他\",\"异常父类：java.lang.Throwable\",\"异常指令 athrow\",\"需要实现Throwable native方法\",\"private native Throwable fillInStackTrace(int dummy)\"]},\"1036\":{\"h\":\"1、注册native方法\",\"t\":[\"const jlThrowable = \\\"java/lang/Throwable\\\" type StackTraceElement struct { fileName string className string methodName string lineNumber int } func (self *StackTraceElement) String() string { return fmt.Sprintf(\\\"%s.%s(%s:%d)\\\", self.className, self.methodName, self.fileName, self.lineNumber) } func init() { native.Register(jlThrowable, \\\"fillInStackTrace\\\", \\\"(I)Ljava/lang/Throwable;\\\", fillInStackTrace) } // private native Throwable fillInStackTrace(int dummy); // (I)Ljava/lang/Throwable; func fillInStackTrace(frame *rtda.Frame) { this := frame.LocalVars().GetThis() frame.OperandStack().PushRef(this) stes := createStackTraceElements(this, frame.Thread()) this.SetExtra(stes) } \",\"java代码\",\"void catchOne(){ try{ tryItOut() }catch(TestExc e){ handleExc(e) } } \",\"异常处理表\",\"type ExceptionHandler struct { startPc int //try代码段 endPc int //try代码段 handlerPc int //处理句柄 catchType *ClassRef //异常类 } \",\"Method\",\"type Method struct { exceptionTable ExceptionTable //异常处理表 lineNumberTable * classfile.LineNumberTableAttribute } func (self *Method) copyAttributes(cfMethod *classfile.MemberInfo) { if codeAttr := cfMethod.CodeAttribute(); codeAttr != nil { self.maxStack = codeAttr.MaxStack() self.maxLocals = codeAttr.MaxLocals() self.code = codeAttr.Code() //todo exception 增加异常处理 self.exceptionTable = newExceptionTable(codeAttr.ExceptionTable(),self.class.constantPool) // todo 代码行号 self.lineNumberTable = codeAttr.LineNumberTableAttribute() } } func (self *Method) FindExceptionHandler(exClass *Class, pc int) int { handler := self.exceptionTable.findExceptionHandler(exClass, pc) if handler != nil { return handler.handlerPc } return -1 } func (self *Method) GetLineNumber(pc int) int { if self.IsNative() { return -2 } if self.lineNumberTable == nil { return -1 } return self.lineNumberTable.GetLineNumber(pc) } \",\"newExceptionTable\",\"//todo exception 异常处理 type ExceptionTable []*ExceptionHandler type ExceptionHandler struct { startPc int //try代码段 endPc int //try代码段 handlerPc int //处理句柄 catchType *ClassRef //异常类 } //从classfile生成异常处理 func newExceptionTable(entries []*classfile.ExceptionTableEntry, cp *ConstantPool) ExceptionTable { table := make([]*ExceptionHandler, len(entries)) for i, entry := range entries { table[i] = &ExceptionHandler{ startPc: int(entry.StartPc()), endPc: int(entry.EndPc()), handlerPc: int(entry.HandlerPc()), catchType: getCatchType(uint(entry.CatchType()), cp), } } return table } //获得异常类 func getCatchType(index uint, cp *ConstantPool) *ClassRef { if index == 0 { return nil // catch all } return cp.GetConstant(index).(*ClassRef) } func (self ExceptionTable) findExceptionHandler(exClass *Class, pc int) *ExceptionHandler { for _, handler := range self { // jvms: The start_pc is inclusive and end_pc is exclusive if pc >= handler.startPc && pc < handler.endPc { if handler.catchType == nil { return handler //catch-all } catchClass := handler.catchType.ResolvedClass() if catchClass == exClass || catchClass.IsSuperClassOf(exClass) { return handler } } } return nil } \",\"异常代码行数\",\"func (self *CodeAttribute) LineNumberTableAttribute() *LineNumberTableAttribute { for _, attrInfo := range self.attributes { switch attrInfo.(type) { case *LineNumberTableAttribute: return attrInfo.(*LineNumberTableAttribute) } } return nil } \",\"异常指令athrow\",\"func (self *ATHROW) Execute(frame *rtda.Frame) { ex := frame.OperandStack().PopRef() if ex == nil { panic(\\\"java.lang.NullPointerException\\\") } thread := frame.Thread() //未找异常处理方法 if !findAndGotoExceptionHandler(thread, ex) { //抛出uncaught异常 handleUncaughtException(thread, ex) } } func findAndGotoExceptionHandler(thread *rtda.Thread, ex *heap.Object) bool { for { frame := thread.CurrentFrame() pc := frame.NextPC() - 1 handlerPC := frame.Method().FindExceptionHandler(ex.Class(), pc) if handlerPC > 0 { stack := frame.OperandStack() stack.Clear() stack.PushRef(ex) frame.SetNextPC(handlerPC) return true } thread.PopFrame() if thread.IsStackEmpty() { break } } return false } // todo func handleUncaughtException(thread *rtda.Thread, ex *heap.Object) { thread.ClearStack() jMsg := ex.GetRefVar(\\\"detailMessage\\\", \\\"Ljava/lang/String;\\\") goMsg := heap.GoString(jMsg) println(ex.Class().JavaName() + \\\": \\\" + goMsg) stes := reflect.ValueOf(ex.Extra()) for i := 0; i < stes.Len(); i++ { ste := stes.Index(i).Interface().(interface { String() string }) println(\\\" at \\\" + ste.String()) } } \"]},\"1037\":{\"h\":\"异常测试\",\"t\":[\"#exception 异常处理 go run main -cp test/lib/example.jar jvmgo.book.ch10.ParseIntTest 123 go run main -cp test/lib/example.jar jvmgo.book.ch10.ParseIntTest abc go run main -cp test/lib/example.jar jvmgo.book.ch10.ParseIntTest \"]},\"1038\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\",\"提交标签 \\\"exception\\\"\"]},\"1039\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1040\":{\"c\":[\"jvmgo\"]},\"1041\":{\"h\":\"19、启动jvm\"},\"1042\":{\"h\":\"1、System类初始化\",\"t\":[\"1、System类初始化方法\",\"2、VM调用 System.initializeSystemClass()\",\"System{ static{ registerNatives() } } VM.initialize(){ System.initializeSystemClass() } \"]},\"1043\":{\"h\":\"2、Ending 小遗憾\",\"t\":[\"未能真实实现system类加载，依然用hack方式打印输出信息\",\"笔者水平有限，对虚拟机理解更深刻时，再完整实现\"]},\"1044\":{\"h\":\"3、JVM类封装\",\"t\":[\"//定义jvm type JVM struct { cmd *Cmd //命令行 classLoader *heap.ClassLoader //类加载器 mainThread *rtda.Thread //主线程 } //新建虚拟机 func newJVM(cmd *Cmd) *JVM { cp := classpath.Parse(cmd.XjreOption, cmd.cpOption) classLoader := heap.NewClassLoader(cp, cmd.verboseClassFlag) return &JVM{ cmd: cmd, classLoader: classLoader, mainThread: rtda.NewTread(), } } //启动虚拟机 func (self *JVM) start() { //暂时未能真正启动VM //self.initJVM() self.execMain() } //初始化虚拟机 func (self *JVM) initJVM() { vmClass := self.classLoader.LoadClass(\\\"sun/misc/VM\\\") base.InitClass(self.mainThread, vmClass) interpret(self.mainThread, self.cmd.verboseInstFlag) } //运行main主方法 func (self *JVM) execMain() { //获得加载类名字 className := strings.Replace(self.cmd.class, \\\".\\\", \\\"/\\\", -1) mainClass := self.classLoader.LoadClass(className) //获得main方法 mainMethod := mainClass.GetMainMethod() if mainMethod == nil { //增加命令行参数 fmt.Printf(\\\"Main method not found in class %s \\\", self.cmd.class) return } frame := self.mainThread.NewFrame(mainMethod) //创建栈帧 //字符串参数 jArgs := self.createArgsArray() frame.LocalVars().SetRef(0, jArgs) self.mainThread.PushFrame(frame) //将栈帧push线程stack中 interpret(self.mainThread,self.cmd.verboseInstFlag) } //创建args数组 func (self *JVM)createArgsArray() *heap.Object { //加载class类 stringClass := self.classLoader.LoadClass(\\\"java/lang/String\\\") argsArr := stringClass.ArrayClass().NewArray(uint(len(self.cmd.args))) jArgs := argsArr.Refs() for i, arg := range self.cmd.args { jArgs[i] = heap.JString(self.classLoader, arg) } return argsArr } \",\"启动jvm\",\"//启动jvm func startJvm(cmd *Cmd) { newJVM(cmd).start() } \",\"打印hello world\",\"go run main -cp test/lib/example.jar jvmgo.book.ch01.HelloWorld \"]},\"1045\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\",\"提交标签 \\\"jvm\\\"\"]},\"1046\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1047\":{\"c\":[\"jvmgo\"]},\"1048\":{\"h\":\"1、搭建go环境\"},\"1049\":{\"h\":\"Mac环境\",\"t\":[\"go的ide和安装包\",\"链接:https://pan.baidu.com/s/1DtHgS1M_kmpeiKHpRzYqag 密码:1vxn\"]},\"1050\":{\"h\":\"添加环境变量\",\"t\":[\"vi .bash_profile #go export GOROOT=/usr/local/go export PATH=$PATH:${GOROOT}/bin \",\"image.png\"]},\"1051\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\"]},\"1052\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1053\":{\"c\":[\"jvmgo\"]},\"1054\":{\"h\":\"2、cmd命令行参数解析\"},\"1055\":{\"h\":\"执行文件 入参解析\",\"t\":[\"cmd.go\",\"package main import \\\"flag\\\" import \\\"fmt\\\" import \\\"os\\\" // java [-options] class [args...] type Cmd struct { helpFlag bool //java -help versionFlag bool //java -version cpOption string class string // 执行主类 args []string // 附加参数 } //将flag参数转成cmd func parseCmd() *Cmd { cmd := &Cmd{} flag.Usage = printUsage flag.BoolVar(&cmd.helpFlag, \\\"help\\\", false, \\\"print help message\\\") flag.BoolVar(&cmd.helpFlag, \\\"?\\\", false, \\\"print help message\\\") flag.BoolVar(&cmd.versionFlag, \\\"version\\\", false, \\\"print version and exit\\\") flag.StringVar(&cmd.cpOption, \\\"classpath\\\", \\\"\\\", \\\"classpath\\\") flag.StringVar(&cmd.cpOption, \\\"cp\\\", \\\"\\\", \\\"classpath\\\") //parse失败 会执行 printUsage flag.Parse() //解析剩余参数 args := flag.Args() if len(args) > 0 { cmd.class = args[0] cmd.args = args[1:] } return cmd } //使用范例 func printUsage() { fmt.Printf(\\\"Usage: %s [-options] class [args...] \\\", os.Args[0]) } \"]},\"1056\":{\"h\":\"测试类\",\"t\":[\"main.go\",\"package main import \\\"fmt\\\" func main() { cmd := parseCmd() if cmd.versionFlag { fmt.Println(\\\"version 0.0.1\\\") } else if cmd.helpFlag || cmd.class == \\\"\\\" { printUsage() } else { startJVM(cmd) } } func startJVM(cmd *Cmd) { fmt.Printf(\\\"classpath:%s class:%s args:%v \\\", cmd.cpOption, cmd.class, cmd.args) } \",\"测试命令 run.sh\",\"#!/bin/sh set -ex export GOPATH=$PWD go run . -version | grep -q \\\"version 0.0.1\\\" \",\"go命令\",\"go install 编译 go run 运行 \"]},\"1057\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\",\"提交标签 \\\"cmd\\\"\"]},\"1058\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1059\":{\"c\":[\"jvmgo\"]},\"1060\":{\"h\":\"3、搜索class文件\"},\"1061\":{\"h\":\"1、知识扩展\",\"t\":[\"java jvm根据类路径(class path)来搜索类，加载到内存\",\"按照搜索先后顺序\",\"位置\",\"1、启动类路径(bootstrap classpath)\",\"Jre/lib\",\"2、扩展类路径(extension classpath)\",\"Jre/lib/ext\",\"3、用户类路径(user classpath)\",\"当前目录 .\",\"可以通过 -Xbootclasspath 修改启动类路径\",\"参数 -classpath /-cp\",\"go语言不需要显式实现接口\",\"defer 确保异常及时处理\"]},\"1062\":{\"h\":\"2、Cmd添加jre目录\",\"t\":[\"// java [-options] class [args...] type Cmd struct { XjreOption string // 指定jre启动类的目录 } func parseCmd() *Cmd { flag.StringVar(&cmd.XjreOption,\\\"Xjre\\\",\\\"\\\",\\\"path to jre\\\") } \"]},\"1063\":{\"h\":\"3、类加载规则\",\"t\":[\"package classpath import ( \\\"os\\\" \\\"path/filepath\\\" ) type Classpath struct { bootClasspath Entry //启动类搜索 extClasspath Entry //扩展类搜索 userClasspath Entry //用户类搜索 } //创建解析器 func Parse(jreOption, cpOption string) *Classpath { cp := &Classpath{} //解析启动类加载 cp.parseBootAndExtClasspath(jreOption) //解析用户类加载 cp.parseUserClasspath(cpOption) return cp } // 读取文件名称为className的class文件 func (self *Classpath) ReadClass(className string) ([]byte, Entry, error) { className = className + \\\".class\\\" // 1. 从启动类路径寻找读取 <className>.class 类 if data, entry, err := self.bootClasspath.readClass(className); err == nil { return data, entry, err } // 2. 从扩展类路径寻找读取 <className>.class 类 if data, entry, err := self.extClasspath.readClass(className); err == nil { return data, entry, err } // 3. 从用户类路径寻找读取 <className>.class 类 return self.userClasspath.readClass(className) } func (self *Classpath) String() string { return self.userClasspath.String() } func (self *Classpath) parseBootAndExtClasspath(jreOption string) { jreDir := getJreDir(jreOption) self.bootClasspath = newWildcardEntry(filepath.Join(jreDir, \\\"lib\\\", \\\"*\\\")) // jre/lib/* self.extClasspath = newWildcardEntry(filepath.Join(jreDir, \\\"lib\\\", \\\"ext\\\", \\\"*\\\")) // jre/lib/ext/* } func getJreDir(jreOption string) string { // 先读取命令行参数-Xjre，如果存在，直接返回（为了简化，不做错误输入的处理） if jreOption != \\\"\\\" { return jreOption } // 如果命令行没有传入-Xjre，使用JAVA_HOME/jre if javaHome := os.Getenv(\\\"JAVA_HOME\\\"); javaHome != \\\"\\\" { return filepath.Join(javaHome, \\\"jre\\\") } panic(\\\"Can't find jre folder\\\") } func (self *Classpath) parseUserClasspath(cpOption string) { if cpOption == \\\"\\\" { cpOption = \\\".\\\" } self.userClasspath = newEntry(cpOption) } \"]},\"1064\":{\"h\":\"4、类路径查找\",\"t\":[\"1、Entry搜索类路径\",\"2、DirEntry 搜索目录下类路径\",\"3、ZipEntry 搜索zip或jar文件形式类路径\",\"4、CompositeEntry 组合类路径\",\"5、WildcardEntry 所有通配符下类路径\",\"Entry 类路径查找\",\"package classpath import \\\"os\\\" import \\\"strings\\\" //分隔符 \\\":\\\" const pathListSeparator = string(os.PathListSeparator) //定义接口 type Entry interface { // 寻找和读取 class 文件 // 入参：className - class文件的相对路径，eg. 如果要读取 java.lang.Object 类，则className = java/lang/Object.class // 返回值： // 1. 读取到的class文件内容的[]byte // 2. 最终定位到包含className文件的Entry对象 // 3. 错误信息error readClass(className string) ([]byte, Entry, error) //获得className string() string } //根据参数类型创建不同搜索模式 func newEntry(path string) Entry { //读取多个className文件 java -cp path1/classes:path2/classes if strings.Contains(path, pathListSeparator) { return newCompositeEntry(path) } // 读取path下所有jar文件的className文件 java -cp path/* if strings.HasSuffix(path, \\\"*\\\") { return newWildcardEntry(path) } // 从path/lib1.jar下查找并读取className文件：java -cp path/lib1.jar 或者 java -cp path/lib1.zip //读取zip/jar下 className文件 :java -cp path/lib1.jar if strings.HasSuffix(path, \\\".jar\\\") || strings.HasSuffix(path, \\\".zip\\\") { return newZipEntry(path) } //遍历目录 return newDirEntry(path) } \",\"测试类\",\" //测试classpath func parseClasspath(cmd *Cmd) { cp := classpath.Parse(cmd.XjreOption, cmd.cpOption) fmt.Printf(\\\"classpath:%v class:%v args:%v \\\", cp, cmd.class, cmd.args) className := strings.Replace(cmd.class, \\\".\\\", \\\"/\\\", -1) classData, _, err := cp.ReadClass(className) if err != nil { fmt.Printf(\\\"Could not find or load main class %s \\\", cmd.class) return } fmt.Printf(\\\"class data:%v \\\", classData) } \"]},\"1065\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\",\"提交标签classpath\"]},\"1066\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1067\":{\"c\":[\"jvmgo\"]},\"1068\":{\"h\":\"4、添加testOption-便于单元测试\"},\"1069\":{\"h\":\"原因\",\"t\":[\"自己手动写java虚拟机源码，属于章回式讲课。\",\"实际项目，要减少冗余重复代码，让接手的人易于理解\",\"也要有单元测试类，便于项目重构\",\"因此添加testOption\"]},\"1070\":{\"h\":\"测试参数\",\"t\":[\"增加 -test\",\"type Cmd struct { testOption string // 指定测试方法 } func parseCmd() *Cmd { //增加测试方法 flag.StringVar(&cmd.testOption, \\\"test\\\", \\\"\\\", \\\"test\\\") } \",\"main函数调用\",\"根据cmd.testOption内容判断调用测试方法\",\"func main() { cmd := parseCmd() if cmd.versionFlag { fmt.Println(\\\"version 0.0.1\\\") } else if cmd.helpFlag || cmd.class == \\\"\\\" { printUsage() } else if cmd.testOption == \\\"cmd\\\" { parseCmdLine(cmd) } else if cmd.testOption == \\\"classpath\\\" { parseClasspath(cmd) } else { startJvm(cmd) } } \",\"测试shell脚本\",\"#!/bin/sh set -ex cd ./go export GOPATH=$PWD #main 编译目录 go run main -version //测试 命令行功能 go run main -test \\\"cmd\\\" 12 344 567 //测试类查找功能 go run main -test \\\"classpath\\\" java.lang.Object \"]},\"1071\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\"]},\"1072\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1073\":{\"c\":[\"jvmgo\"]},\"1074\":{\"h\":\"5、解析classfile文件\"},\"1075\":{\"h\":\"知识扩展\",\"t\":[\"class文件有严格规范，保障了“编写一次，四处运行”，但是加载class文件来源，给予足够自由\",\"javap工具 可以反编译class文件，对应图形化工具classpy\",\"go语言 函数名大写外部可以访问，小写不可以访问\"]},\"1076\":{\"h\":\"classFile结构体\",\"t\":[\"jvm规范\",\"/* ClassFile { u4 magic; u2 minor_version; u2 major_version; u2 constant_pool_count; cp_info constant_pool[constant_pool_count-1]; u2 access_flags; u2 this_class; u2 super_class; u2 interfaces_count; u2 interfaces[interfaces_count]; u2 fields_count; field_info fields[fields_count]; u2 methods_count; method_info methods[methods_count]; u2 attributes_count; attribute_info attributes[attributes_count]; } */ type ClassFile struct { magic uint32 // 魔数 minorVersion uint16 // 次版本号 majorVersion uint16 // 主版本号 constantPool ConstantPool // 常量池 accessFlags uint16 // 类访问标志 thisClass uint16 // 类常量池索引 superClass uint16 // 父类常量池索引（只有Object为0） interfaces []uint16 // 接口常量池索引表 fields []*MemberInfo // 字段表 methods []*MemberInfo // 方法表 attributes []AttributeInfo // 属性表 } \"]},\"1077\":{\"h\":\"魔数\",\"t\":[\"文件格式必须以某个固定字节开头\",\"class文件 0xCAFEBABE\",\"PDF文件 %PDF\",\"ZIP文件 PK\",\"func (self *ClassFile) readAndCheckMagic(reader *ClassReader) { magic := reader.readUint32() // 读取魔数 if magic != 0xCAFEBABE { // 检查魔数 panic(\\\"java.lang.ClassFormatError: magic!\\\") } } \"]},\"1078\":{\"h\":\"版本号\",\"t\":[\"java版本\",\"class版本号\",\"JDK1.0.2\",\"45.0~45.3\",\"JDK1.1\",\"45.0~45.65535\",\"J2SE1.2\",\"46.0\",\"J2SE1.3\",\"47.0\",\"J2SE1.4\",\"48.0\",\"JAVA SE 5.0\",\"49.0\",\"JAVA SE 6\",\"50.0\",\"JAVA SE 7\",\"51.0\",\"JAVA SE 8\",\"52.0\",\"说明1.2之前采用主次版本号，从1.2之后，次版本号为0 jdk8 支持检测\",\"// 读取并检查主次版本号 func (self *ClassFile) readAndCheckVersion(reader *ClassReader) { self.minorVersion = reader.readUint16() // 次版本号 self.majorVersion = reader.readUint16() // 主版本号 switch self.majorVersion { case 45: // jdk1.0 ~ jdk1.1，次版本号不为0 return case 46, 47, 48, 49, 50, 51, 52, 53, 54: // jdk1.2 ~ jdk10，此版本号都为0 if self.minorVersion == 0 { return } } panic(\\\"java.lang.UnsupportedClassVersionError!\\\") } \"]},\"1079\":{\"h\":\"字段和方法表\",\"t\":[\"type MemberInfo struct { accessFlags uint16 // 字段或方法的访问标志 nameIndex uint16 // 字段名或方法名的常量池索引 descriptorIndex uint16 // 字段或方法的描述符常量池索引 attributes []AttributeInfo cp ConstantPool } //属性 type AttributeInfo interface { readInfo(reader *ClassReader) } \"]},\"1080\":{\"h\":\"解析classfile\",\"t\":[\"classfile\"]},\"1081\":{\"h\":\"从byte数组树化ClassFile\",\"t\":[\"// 将 []byte 转换成 ClassFile func Parse(classData []byte) (cf *ClassFile, err error) { cr := &ClassReader{classData} cf = &ClassFile{} cf.read(cr) return } // 使用 ClassReader 从 ClassReader 中读取内容，赋值给 ClassFile 的各个属性 func (self *ClassFile) read(reader *ClassReader) { self.readAndCheckMagic(reader) self.readAndCheckVersion(reader) self.constantPool = readConstantPool(reader) self.accessFlags = reader.readUint16() self.thisClass = reader.readUint16() self.superClass = reader.readUint16() self.interfaces = reader.readUint16s() self.fields = readMembers(reader, self.constantPool) self.methods = readMembers(reader, self.constantPool) self.attributes = readAttributes(reader, self.constantPool) } \"]},\"1082\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\",\"提交标签classfile\"]},\"1083\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1084\":{\"c\":[\"jvmgo\"]},\"1085\":{\"h\":\"6、运行时数据区\"},\"1086\":{\"h\":\"知识扩展\",\"t\":[\"rtda 有数据存储和运算功能\",\"存储来自共享数据+私有数据\",\"运算功能来自线程jvm栈帧 用stack计算\",\"帧计算要重点看 jvm stack jvm frame\",\"要写一篇文章专门阐述逻辑\",\"运行时数据区(run-time data area)\",\"运行时数据类型\",\"创建和销毁时机\",\"多线程共享数据\",\"虚拟机启动创建，退出销毁\",\"线程私有数据\",\"创建线程时创建，退出销毁\",\"多线程共享数据\",\"多线程共享数据类型\",\"位置\",\"包含\",\"类数据\",\"方法区Method Area(在Heap内)\",\"字段，方法信息，方法字节码，运行时常量池\",\"类实例（对象）\",\"堆Heap\"]},\"1087\":{\"h\":\"运行时数据\",\"t\":[\"运行时数据\",\"pc 寄存器 java虚拟机指令地址\",\"jvm Frame 执行当前方法的帧\",\"数据类型\",\"1、基本类型：变量存放数据本身\",\"2、引用类型：变量存放对象引用，真正对象数据在堆里\",\"基本数据类型\",\"引用类型\",\"布尔类型\",\"类类型\",\"数字类型（整型和浮点）\",\"接口类型\",\"数组类型\",\"特殊null\",\"程序计算通过栈stack来实现\"]},\"1088\":{\"h\":\"实现运行时数据区\",\"t\":[\"tip ： 设计前，先定义好对应结构体，再实现功能\",\"go run main -test \\\"rtda\\\" #测试 运行时数据 \"]},\"1089\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\"]},\"1090\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1091\":{\"c\":[\"jvmgo\"]},\"1092\":{\"h\":\"7、指令集\"},\"1093\":{\"h\":\"知识扩展\",\"t\":[\"method_info[]\",\"找到属性为code代码，二进制进行解析\",\"魔法数是0x OPCODE\",\"java虚拟机指令 以opcode开头\",\"java虚拟机256条指令\",\"定义205条指令 0~202 (0x00~0xCA)、0xFE、0xFF\",\"定义助记符\",\"例如 0x00 助记符 nop\"]},\"1094\":{\"h\":\"指令集方法\",\"t\":[\"普通计算压栈出栈\",\"控制访问偏移量\",\"指令集做两件事\",\"1、读取操作码\",\"2、执行操作数栈\",\"type Instruction interface { FetchOperands(reader *BytecodeReader) //读取操作码 Execute(frame *rtda.Frame) //执行操作数栈 } // 1. 没有操作数的指令 type NoOperandsInstruction struct{} func (self *NoOperandsInstruction) FetchOperands(reader *ByteCodeReader) { // nothing to do } // 2. 跳转指令 ->用于跳转下一个方法 type BranchInstruction struct { Offset int // 跳转偏移量 } func (self *BranchInstruction) FetchOperands(reader *ByteCodeReader) { self.Offset = int(reader.ReadInt16()) // 从字节码中读取一个两字节的数，作为偏移量 } \",\"branch.go\",\"func Branch(frame *rtda.Frame, offset int) { pc := frame.Thread().PC() nextpc := pc + offset frame.SetNextPC(nextpc) } \"]},\"1095\":{\"h\":\"add指令\",\"t\":[\"压栈出栈做计算\",\"type IADD struct{ base.NoOperandsInstruction } func (self *IADD) Execute(frame *rtda.Frame) { stack := frame.OperandStack() v2 := stack.PopInt() v1 := stack.PopInt() result := v1 + v2 stack.PushInt(result) } \"]},\"1096\":{\"h\":\"goto指令\",\"t\":[\"偏移量offset做控制\",\"type GOTO struct { base.BranchInstruction } func (self *GOTO) Execute(frame *rtda.Frame) { base.Branch(frame, self.Offset) } \"]},\"1097\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\"]},\"1098\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1099\":{\"c\":[\"jvmgo\"]},\"1100\":{\"h\":\"8、解释器\"},\"1101\":{\"h\":\"执行指令集的调用者\",\"t\":[\"指令集包含两部分 读取指令和执行\",\"type Instruction interface { FetchOperands(reader *ByteCodeReader) // 从字节码流中取出操作数 输入变量 Execute(frame *rtda.Frame) // 执行指令逻辑 } \",\"解释器是将指令以逻辑方式运行\",\"//解释器 外部不能访问 私有方法 func interpret(methodInfo *classfile.MemberInfo){ //获得method类 code属性 codeAttr := methodInfo.CodeAttribute() maxLocals := codeAttr.MaxLocals() maxStack := codeAttr.MaxStack() bytecode := codeAttr.Code() thread := rtda.NewTread() frame := thread.NewTestFrame(maxLocals,maxStack) thread.PushFrame(frame) defer catchErr(frame) loop(thread, bytecode) } //异常处理 因没有实现return指令 catch异常 func catchErr(frame *rtda.Frame){ if r:=recover();r!=nil{ fmt.Printf(\\\"LocalVars:%v \\\",frame.LocalVars()) fmt.Printf(\\\"OperandStack:%v \\\",frame.OperandStack()) fmt.Printf(\\\"no return fun \\\") //panic(r) } } //loop执行循环所有方法 func loop(thread *rtda.Thread, bytecode []byte){ frame:=thread.PopFrame() reader:= &base.ByteCodeReader{} for{ //寻找下一个函数 计算pc pc:= frame.NextPC() thread.SetPC(pc) //设置初始值 解码指令 reader.Reset(bytecode,pc) //读取指令集 opcode:=reader.ReadUint8() //指令集转义 inst:=instructions.NewInstruction(opcode) //读取变量 inst.FetchOperands(reader) //获得下一个指令集便宜 frame.SetNextPC(reader.PC()) //excute 执行 fmt.Printf(\\\"pc:%2d inst:%T %v \\\", pc, inst, inst) inst.Execute(frame) } } \"]},\"1102\":{\"h\":\"调用解释器\",\"t\":[\"//测试解释器和指令集 func parseInterpret(cmd *Cmd) { cp := classpath.Parse(cmd.XjreOption, cmd.cpOption) className := strings.Replace(cmd.class, \\\".\\\", \\\"/\\\", -1) //获得classfile cf := loadClass(className, cp) //获得main函数 mainMethod:=getMainMethod(cf) if mainMethod != nil { //解释器执行 interpret(mainMethod) }else{ fmt.Printf(\\\"Main method not found in class %s \\\", cmd.class) } } //获得main函数 func getMainMethod(cf *classfile.ClassFile) *classfile.MemberInfo { for _, m := range cf.Methods() { if m.Name() == \\\"main\\\" && m.Descriptor() == \\\"([Ljava/lang/String;)V\\\" { return m } } return nil } \"]},\"1103\":{\"h\":\"shell脚本\",\"t\":[\"go run main -test \\\"interpret\\\" -cp test/lib/example.jar jvmgo.book.ch05.GaussTest \"]},\"1104\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\"]},\"1105\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1106\":{\"c\":[\"jvmgo\"]},\"1107\":{\"h\":\"9、创建Class\"},\"1108\":{\"h\":\"知识扩展\",\"t\":[\"方法区存储类信息\",\"创建Class 1、存储类信息 2、常量池转化为运行时常量池\"]},\"1109\":{\"h\":\"1、从classFile读取信息，拷贝到类中\",\"t\":[\"Class\",\"type Class struct { accessFlags uint16 // 类访问标志 name string // 类名（全限定） superClassName string // 父类名（全限定），eg. java/lang/Object interfaceNames []string // 接口名（全限定） constantPool *ConstantPool // 运行时常量池 fields []*Field // 字段表 methods []*Method // 方法表 loader *ClassLoader // 类加载器 superClass *Class // 父类指针 interfaces []*Class // 实现的接口指针 instanceSlotCount uint // 存放实例变量占据的空间大小（包含从父类继承来的实例变量）（其中long和double占两个slot） staticSlotCount uint // 存放类变量占据的空间大小（只包含当前类的类变量）（其中long和double占两个slot） staticVars Slots // 存放静态变量 initStarted bool } \",\"1、创建class实例总方法\",\"func newClass(cf *classfile.ClassFile) *Class { class := &Class{} class.accessFlags = cf.AccessFlags() class.name = cf.ClassName() class.superClassName = cf.SuperClassName() class.interfaceNames = cf.InterfaceNames() class.constantPool = newConstantPool(class, cf.ConstantPool()) class.fields = newFields(class, cf.Fields()) class.methods = newMethods(class, cf.Methods()) return class } \",\"公共字段信息 (访问标志，访问名字，描述符)\",\"// Field 与 Method 的父类，不是 Class 的父类 type ClassMember struct { accessFlags uint16 name string descriptor string class *Class // 所属的类 } // 从 classFile 中复制数据 func (self *ClassMember) copyMemberInfo(memberInfo *classfile.MemberInfo) { self.accessFlags = memberInfo.AccessFlags() self.name = memberInfo.Name() self.descriptor = memberInfo.Descriptor() } // d 是否可以访问 self(字段或方法) func (self *ClassMember) isAccessibleTo(d *Class) bool { // self 是 public if self.IsPublic() { return true } c := self.class // self 是 protected，则只有 d 是 self所在的class c的子类或者同一个包可以访问 // 注意 protected 不只是子类级别，同包也可访问 if self.IsProtected() { return d == c || d.isSubClassOf(c) || c.getPackageName() == d.getPackageName() } // self 是 default 级别 if !self.IsPrivate() { return c.getPackageName() == d.getPackageName() } return d == c } \",\"根据 classFile 创建 字段表\",\"type Field struct { ClassMember constantValueIndex uint slotId uint } // 根据 classFile 创建 字段表 func newFields(class *Class, cfFields []*classfile.MemberInfo) []*Field { fields := make([]*Field, len(cfFields)) for i, cfField := range cfFields { fields[i] = &Field{} fields[i].class = class fields[i].copyMemberInfo(cfField) fields[i].copyAttributes(cfField) } return fields } \",\"根据 classFile 创建 方法表\",\"type Method struct { ClassMember maxStack uint maxLocals uint code []byte // 方法字节码表 argSlotCount uint // 参数个数 } func newMethods(class *Class, cfMethods []*classfile.MemberInfo) []*Method { methods := make([]*Method, len(cfMethods)) for i, cfMethod := range cfMethods { methods[i] = &Method{} methods[i].class = class methods[i].copyMemberInfo(cfMethod) methods[i].copyAttributes(cfMethod) methods[i].calArgSlotCount() } return methods } \"]},\"1110\":{\"h\":\"2、把 classFile 中的常量池转化为运行时常量池\",\"t\":[\"将[]classfile.ConstantInfo 转化为[]heap.Constant\",\"取值通过常量池来获得\",\"// 常量项 type Constant interface{} // 运行时常量池 type ConstantPool struct { class *Class // 所属的类 consts []Constant } //创建运行时常量池 []consts func newConstantPool(class *Class, cfCp classfile.ConstantPool) *ConstantPool { cpCount := len(cfCp) consts := make([]Constant, cpCount) rtCp := &ConstantPool{class, consts} for i := 1; i < cpCount; i++ { cpInfo := cfCp[i] switch cpInfo.(type) { // 字面量：整数、浮点数、字符串 case *classfile.ConstantIntegerInfo: consts[i] = cpInfo.(*classfile.ConstantIntegerInfo).Value() case *classfile.ConstantFloatInfo: consts[i] = cpInfo.(*classfile.ConstantFloatInfo).Value() case *classfile.ConstantLongInfo: consts[i] = cpInfo.(*classfile.ConstantLongInfo).Value() i++ case *classfile.ConstantDoubleInfo: consts[i] = cpInfo.(*classfile.ConstantDoubleInfo).Value() i++ case *classfile.ConstantStringInfo: consts[i] = cpInfo.(*classfile.ConstantStringInfo).String() // 符号引用：类、字段、方法、接口方法 case *classfile.ConstantClassInfo: classInfo := cpInfo.(*classfile.ConstantClassInfo) consts[i] = newClassRef(rtCp, classInfo) case *classfile.ConstantFieldrefInfo: fieldrefInfo := cpInfo.(*classfile.ConstantFieldrefInfo) consts[i] = newFieldRef(rtCp, fieldrefInfo) case *classfile.ConstantMethodrefInfo: methodrefInfo := cpInfo.(*classfile.ConstantMethodrefInfo) consts[i] = newMethodRef(rtCp, methodrefInfo) case *classfile.ConstantInterfaceMethodrefInfo: interfaceMethodrefInfo := cpInfo.(*classfile.ConstantInterfaceMethodrefInfo) consts[i] = newInterfaceMethodRef(rtCp, interfaceMethodrefInfo) } } return rtCp } // 根据索引返回常量项 取值 func (self *ConstantPool) GetConstant(index uint) Constant { if c := self.consts[index]; c != nil { return c } panic(fmt.Sprintf(\\\"No Constant at index %d\\\", index)) } \",\"类、字段、方法、接口存引用\",\"字符串 存常量池索引\",\"引用类\",\"// 符号引用基类 type SymRef struct { cp *ConstantPool // 符号引用所在的常量池 className string // 类的全限定名 class *Class // 符号引用所属的类 } func (self *SymRef) ResolvedClass() *Class { if self.class == nil { self.resolveClassRef() } return self.class } func (self *SymRef) resolveClassRef() { d := self.cp.class c := d.loader.LoadClass(self.className) if !c.isAccessibleTo(d) { panic(\\\"java.lang.IllegalAccessError\\\") } self.class = c } // 类符号引用 type ClassRef struct { SymRef } // 将 classfile.ConstantClassInfo 转化为 ClassRef func newClassRef(cp *ConstantPool, classInfo *classfile.ConstantClassInfo) *ClassRef { ref := &ClassRef{} ref.cp = cp ref.className = classInfo.Name() return ref } \",\"type MemberRef struct { SymRef name string descriptor string } func (self *MemberRef) copyMemberRefInfo(refInfo *classfile.ConstantMemberrefInfo) { self.className = refInfo.ClassName() self.name, self.descriptor = refInfo.NameAndDescriptor() } // getter func (self *MemberRef) Name() string { return self.name } func (self *MemberRef) Descriptor() string { return self.descriptor } \"]},\"1111\":{\"h\":\"实战项目地址\",\"t\":[\"https://gitee.com/yinlingchaoliu/jvmgo.git\"]},\"1112\":{\"c\":[\"手动编写jvm虚拟机\"]},\"1113\":{\"c\":[\"jvmgo\"]},\"1114\":{\"h\":\"1、java运行时数据区\"},\"1115\":{\"h\":\"运行时数据区\",\"t\":[\"运行时数据区\",\"程序计数器 所执行字节码的当前执行号指示器，通过改变计数器值来指定下一条要执行的字节码指令\",\"java虚拟机栈 存放虚拟机栈帧 stack frame 用于存放方法参数，局部变量，操作数栈，方法返回地址等\",\"本地方法栈 存放本地方法栈帧 ,执行native方法\",\"堆 存放对象实例\",\"方法区 用于存储被虚拟机加载的类信息，常量池，静态变量，方法信息等\",\"运行时常量池 存放常量信息 (属于方法区一部分)\"]},\"1116\":{\"h\":\"对象的创建\",\"t\":[\"new 指令创建对象\",\"检查指令参数是否在常量池中定位到一个类的符号引用，如果没有，执行类加载过程\",\"为新生对象分配内存,初始化为0值\",\"对象头设置状态(类元数据信息，hashCode,对象分代年龄,锁信息)\",\"执行<init>方法\",\"内存分配空间策略\",\"指针碰撞：Bump the Pointer 挪到指针 内存规整且连续\",\"空闲列表：Free List 记录那块内存可用 场景 已使用内存和空间交错\",\"解决内存分配并发问题\",\"CAS加上重试\",\"TLAB 每个线程一个独立分配空间\"]},\"1117\":{\"h\":\"对象内存布局\",\"t\":[\"对象内存布局\",\"对象内存区域分为3块区域：对象头、实例数据、对齐填充\",\"对象头： \",\"Mark Word: 存储对象自身运行时数据，如hashcode,分代年龄,锁状态标志,线程持有的锁，偏向线程ID,偏向时间戳 示例 32bit 25bit hashcode 4bit 分代年龄 2bit锁标志位 1bit 0\",\"类型指针，指向类元数据class的指针，根据这个来确定那个对象实例的\",\"数组length:数组对象特有\",\"实例数据：\",\"对齐填充：补位效果\",\" 根据标志位来设置对象头信息\"]},\"1118\":{\"h\":\"对象访问定位\",\"t\":[\"通过栈上reference访问对象，来操作堆上具体对象\",\"方位方式2种\",\"使用句柄：Java堆分配句柄池，reference中存储的是对象的句柄\",\"直接指针：reference中存储的是对象的地址,java对象布局考虑访问类型数据相关信息\",\"句柄优点：只改变句柄实例的指针，不改变句柄，即reference不会改变\",\"直接指针：优点是快，节省指针定位开销\"]},\"1119\":{\"h\":\"内存溢出\",\"t\":[\"堆溢出：java.lang.OutOfMemoryError: Java heap space 解决方案 如无内存泄漏，则 -Xms=100m -Xmx=100m 调参\",\"虚拟机栈和本地方法栈溢出：java.lang.StackOverflowError 超出虚拟机最大栈深度，创建线程过多导致内存溢出\",\"方法区溢出：java.lang.OutOfMemoryError: Permanent generation space\",\"本地直接内存溢出：java.lang.OutOfMemoryError: Direct buffer memory\",\"通过减少最大堆和减少栈容量来换取更多线程\",\"因为系统分配每个进程内存是有限制的,优先分配方法区和堆，剩下是线程私有空间，栈和堆越大，线程的可分配数量越小\"]},\"1120\":{\"c\":[\"深入理解java虚拟机\"]},\"1121\":{\"c\":[\"jvm\"]},\"1122\":{\"h\":\"2、垃圾回收机制\"},\"1123\":{\"h\":\"1标记算法\"},\"1124\":{\"h\":\"1.引用计数算法\",\"t\":[\"每个对象都有一个引用计数器，当对象被引用+1 ，引用失效时就-1 ，当计数器为0时，则该对象设置为可回收的垃圾对象 循环引用，引用计数器失效\"]},\"1125\":{\"h\":\"2.可达性分析算法\",\"t\":[\"GC Roots对象作为起始点，从GC Roots开始向下搜索，搜索走过的路径叫引用链，当一个对象没有引用链，则该对象不可达，可回收\",\"可达性分析\",\"gcRoot对象\",\"虚拟机栈中引用对象\",\"本地方法栈中引用对象\",\"方法区中类静态属性引用对象\",\"方法区中常量引用对象\"]},\"1126\":{\"h\":\"3.四种引用\",\"t\":[\"强引用: 只要强引用存在，垃圾回收器就不会回收该对象 strongReference\",\"软引用: 当内存不足时，垃圾回收器会回收该对象 SoftReference\",\"弱引用: 被弱引用关联对象只能生存到下一次垃圾收集发生之前 WeakReference\",\"虚引用：最弱引用，对象被收集器回收时收到一个系统通知 PhantomReference\"]},\"1127\":{\"h\":\"4.回收过程\",\"t\":[\"对象不可达\",\"第一次标记筛选，检测对象不可达，有必要执行finalize方法，放入F-Queue队列\",\"第二次标记筛选，检测对象不可达，从F-Queue队列中取出，执行finalize方法\",\"finalize方法回收垃圾不建议，建议try-finally\"]},\"1128\":{\"h\":\"5. 回收方法区\",\"t\":[\"在永久代回收，性价比不高 回收内容：废弃常量和无用的类\",\"无用类判断标准，满足仅代表可以回收，但不一定\",\"该类所有实例已被回收\",\"加载该类classloader被回收\",\"该类对应的对象没有被任何地方被引用\"]},\"1129\":{\"h\":\"2.收集算法\"},\"1130\":{\"h\":\"1.标记-清除算法\",\"t\":[\"首先标记所有需要回收的对象，然后统一回收所有标记对象\",\"标记-清除算法\",\"缺点：\",\"效率问题：标记和清除两个过程效率不高\",\"空间问题：产生大量不连续内存碎片\"]},\"1131\":{\"h\":\"2.复制算法\",\"t\":[\"先把内存一分为二，每次只使用其中一个区域，垃圾回收时，将存活的对象全部拷贝到另外一个区域，然后对之前的区域进行全部回收\",\"复制算法\",\"商业场景中 Eden:Sur0:Sur1 = 8:1:1\",\"优点是高效 缺点是有一部分空间未利用，当存活对象变多时，效率会降低\"]},\"1132\":{\"h\":\"3.标记-整理算法\",\"t\":[\"让存活的对象都向一端移动，清理掉端边界外的内存\",\"标记-整理算法\",\"缺点:耗时\"]},\"1133\":{\"h\":\"4.分代收集算法\",\"t\":[\"根据对象存活周期划分：新生代、老年代、持久代\",\"年轻代：复制算法 老年代，标记-整理算法 或 标记-清除算法\",\"分代收集算法\"]},\"1134\":{\"h\":\"3.算法实现\"},\"1135\":{\"h\":\"1.枚举根节点\",\"t\":[\"枚举根节点过程中，对象的引用关系不能发生变化，否则分析结果不能保证，这点导致GC进行时必须停顿所有java线程(Stop The World) STW 采用准确式gc,不需要遍历所有，采用OopMap数据结构达成目标\"]},\"1136\":{\"h\":\"2.安全点\",\"t\":[\"程序只有到达安全点，才能gc。 在方法调用，循环跳转、异常跳转等，才会产生安全点，考虑是让程序长时间执行\",\"如何让线程跑到安全点，在进入gc问题\",\"抢占式中断：先把所有线程全部中断，发现不在安全点线程，恢复运行到安全点再中断\",\"主动式中断：不直接操作线程，直接设置中断标志，线程自己运行到标志，自己中断挂起\"]},\"1137\":{\"h\":\"3.安全区域\",\"t\":[\"解决未分配CPU时间，走到安全点挂起。 扩大了安全范围\"]},\"1138\":{\"h\":\"4.垃圾收集器\",\"t\":[\"垃圾收集器\"]},\"1139\":{\"h\":\"Serial 收集器\",\"t\":[\"进行垃圾收集时，必须暂停其他工作线程，直到它收集结束(STW)\",\"简单高效，应用场景客户端桌面 单CPU场景下\"]},\"1140\":{\"h\":\"ParNew 收集器\",\"t\":[\"Serial收集器多线程版本\",\"多CPU场景下较好\"]},\"1141\":{\"h\":\"Parallel Scavenge 收集器\",\"t\":[\"ParNew收集器多线程版本，关注点在吞吐量优先\"]},\"1142\":{\"h\":\"serial Old 收集器\",\"t\":[\"Serial的老年代版本，单线程收集器\"]},\"1143\":{\"h\":\"Parallel Old 收集器\",\"t\":[\"Parallel Scavenge收集器老年版本，吞吐量优先\"]},\"1144\":{\"h\":\"CMS收集器\",\"t\":[\"最短时间停顿收集器，关注点在响应时间优先 并发收集，低停顿\",\"标记-清除算法，会造成大量内存碎片，空间效率低\"]},\"1145\":{\"h\":\"G1收集器\",\"t\":[\"1、并发并行 2、分代收集 3、空间整合：整体是标记-整理，局部是复制算法 4、可预测的停顿\"]},\"1146\":{\"h\":\"5.内存分配和回收策略\",\"t\":[\"对象优先分配在Eden区\",\"大对象直接进入老年代 (朝生夕死大对象应该避免)\",\"长期存活的对象进入老年代 (15岁，安卓8.0后，永久代被移除6岁) MinorGC\",\"动态年龄判断，相同年龄对象大小之和>survivor空间大小，则进入老年代\",\"空间分配担保 MinorGC 查看老年代最大连续空间>新生代对象之和，否则触发FullGC\"]},\"1147\":{\"c\":[\"深入理解java虚拟机\"]},\"1148\":{\"c\":[\"jvm\"]},\"1149\":{\"h\":\"3、性能监控调优\"},\"1150\":{\"h\":\"jvm命令\"},\"1151\":{\"h\":\"jps\",\"t\":[\"查看虚拟机进程\",\"-q 省略主类名称\",\"-m 传参\",\"-l 显示全名\",\"-v 输出jvm参数\"]},\"1152\":{\"h\":\"jstat\",\"t\":[\"查看jvm运行状态\",\"-gc 垃圾回收信息\",\"-gcutil 所占空间百分比\",\"-class 类加载信息\",\"-compiler 编译耗时\"]},\"1153\":{\"h\":\"jinfo\",\"t\":[\"查看jvm配置信息\"]},\"1154\":{\"h\":\"jmap\",\"t\":[\"查看内存映像工具\",\"jmap -dump:format=b,file=dump.hprof 1234\"]},\"1155\":{\"h\":\"jhat\",\"t\":[\"分析工具\",\"jhat dump.hprof\"]},\"1156\":{\"h\":\"jstack\",\"t\":[\"java堆跟踪工具 jstack -l 1234\"]},\"1157\":{\"h\":\"jConsole 可视化\"},\"1158\":{\"h\":\"VisualVm 可视化\"},\"1159\":{\"h\":\"Btrace 跟踪\"},\"1160\":{\"c\":[\"深入理解java虚拟机\"]},\"1161\":{\"c\":[\"jvm\"]},\"1162\":{\"h\":\"4、类文件结构\"},\"1163\":{\"h\":\"1.ClassFile\",\"t\":[\"一次编译四处运行的基础\"]},\"1164\":{\"h\":\"2.魔数opcode映射指令集\"},\"1165\":{\"h\":\"3. 解释器是将指令以逻辑方式运行\"},\"1166\":{\"c\":[\"深入理解java虚拟机\"]},\"1167\":{\"c\":[\"jvm\"]},\"1168\":{\"h\":\"5、虚拟机类加载机制\"},\"1169\":{\"h\":\"类加载时机\",\"t\":[\"类加载的时机\",\"加载、验证、准备、初始化 顺序是固定的\",\"必须初始化5种情况\",\"遇到 new getstatic、invokestatic putstatic、4条指令\",\"Reflect包进行反射时\",\"初始化一个类，父类未初始化时\",\"Main类\",\"动态支持，解析结果REF_getstatic、REF_putstatic、REF_invokeStatic方法句柄\"]},\"1170\":{\"h\":\"加载\",\"t\":[\"读取二进制字节流.class\",\"解析方法区运行时数据结构 .classfile\",\"内存生成java.lang.Class对象\"]},\"1171\":{\"h\":\"验证\",\"t\":[\"验证文件格式\",\"元数据验证\",\"字节码验证\"]},\"1172\":{\"h\":\"准备\",\"t\":[\"给类变量分配内存并设置初始值\"]},\"1173\":{\"h\":\"解析\",\"t\":[\"常量池内的符号替换成直接引用过程\",\"类或接口的解析\",\"字段的解析\",\"类方法的解析\",\"接口方法的解析\"]},\"1174\":{\"h\":\"初始化\",\"t\":[\"init\"]},\"1175\":{\"h\":\"双亲委派模型\",\"t\":[\"启动类加载器 Bootstrap ClassLoader C++ 虚拟机一部分\",\"扩展类加载器 Extension ClassLoader java独立于虚拟机外部\",\"应用类加载器 App ClassLoader\",\"自定义类加载器\",\"类加载器的层次关系，称之为双亲委派模型\",\"双亲委派模型工作过程\",\"如果一个类加载器收到加载请求, 首先不会自己尝试加载这个类，而是委派到它的父类加载器去尝试加载，每层都如此，直到顶层的启动类加载器，直到父加载器反馈无法完成，子加载器才会尝试自己加载\",\"protected Class<?> loadClass(String className, boolean resolve) throws ClassNotFoundException { //首先检查类是否加载过 Class<?> clazz = findLoadedClass(className); if (clazz == null) { try { //如果存在父节点，加载父加载器ClassLoader if(parent!=null){ //如果没有加载过，先调用父加载器的loadClass clazz = parent.loadClass(className, false); }else{//否则用启动类加载器 clazz= findBootstrapClassOrNull(className); } } catch (ClassNotFoundException e) { //抛出异常说明父类无法完成加载请求 if(clazz == null){ clazz = findClass(className); } } } //解析class if(resolve){ resolveClass(clazz) } return clazz; } \"]},\"1176\":{\"h\":\"为什么使用双亲委托\",\"t\":[\"1、因为可以避免重复加载，当父类已经加载该类，就没有必要让子类再加载一次。\",\"2、考虑安全因素，如果用自定义同名类来动态替换java核心api中定义类型，存在非常大隐患，除非自定义ClassLoader搜索算法\"]},\"1177\":{\"h\":\"JVM在搜索类中，如何判定两个class相同\",\"t\":[\"1、判断两个类名是否相同\",\"2、是否由同一个类加载器实例加载\"]},\"1178\":{\"c\":[\"深入理解java虚拟机\"]},\"1179\":{\"c\":[\"jvm\"]},\"1180\":{\"h\":\"6、字节码执行引擎\"},\"1181\":{\"h\":\"运行时栈帧结构\",\"t\":[\"运行时栈帧结构\"]},\"1182\":{\"h\":\"局部变量表\",\"t\":[\"局部变量表式一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量\",\"变量槽slot为最小单位，每个solt存放一个boolean,char,short,int,float,reference,returnAddress类型的值.\",\"64位机器，连续2个slot空间为long,double类型分配\",\"虚拟机使用索引定位方式使用slot, n 代表第n个slot, long，double采用 n和n+1两个slot\",\"为了尽可能节省栈帧空间，局部变量表中Slot是可以重用的。 出现问题，当PC计数器超过作用域，slot交给其他变量复用。会影响到gc回收\",\"不使用的对象应手动赋值为null 尤其指分配的大对象 \",\"//空闲空间未被回收 public class Main(String[] args) { { byte[] placeHolder = new byte[1024 * 1024 * 100]; } system.gc(); } \"]},\"1183\":{\"h\":\"操作数栈\",\"t\":[\"操作栈 后入先出 执行指令，是压栈出栈的过程\"]},\"1184\":{\"h\":\"动态链接\",\"t\":[\"栈帧中指向运行时常量池的引用，持有这个引用为了支持方法调用过程中动态连接\"]},\"1185\":{\"h\":\"方法返回地址\",\"t\":[\"当一个方法执行后，退出方法\",\"方法返回字节指令码 返回值给调用者\",\"方法执行遇到异常 athrow指令码 异常给调用者\"]},\"1186\":{\"h\":\"方法调用\"},\"1187\":{\"h\":\"解析\",\"t\":[\"所有方法调用中目标方法在class文件里面都是常量池中符号引用\",\"类加载解析过程中，会将其中一部分符号引用转化为直接引用\",\"invokestatic指令码，调用静态方法\",\"invokespecial指令码，调用构造<init>方法，\",\"invokevirtual指令码，调用虚方法\",\"invokeinterface指令码，调用接口方法\",\"invokedynamic指令码，调用动态方法\",\"final 修饰方法 是非虚方法\"]},\"1188\":{\"h\":\"分派\",\"t\":[\"多态实现原理\",\"静态分派 依赖静态类型来定位方法执行版本称之为静态分派\",\"public class Dispatch{ static class Human{} static class Man extends Human{} static class Woman extends Human{} public void sayHello(Human guy){ System.out.println(\\\"hello,guy!\\\"); } public void sayHello(Man man){ System.out.println(\\\"hello,man!\\\"); } public void sayHello(Woman guy){ System.out.println(\\\"hello,woman!\\\"); } public static void main(String[] args){ Human man = new Man(); Human woman = new Woman(); Dispatch dispatch = new Dispatch(); dispatch.sayHello(man); dispatch.sayHello(woman); } } 输出结果 ======== hello,guy! hello,guy! \",\"编译结果\",\"dispatch.sayHello((Man)man); dispatch.sayHello((Woman)man); \",\"动态分派\",\"重写\",\"public class Dispatch{ static abstract class Human{ public abstract void sayHello(); } static class Man extends Human{ @Override public void sayHello(){ System.out.println(\\\"hello,man!\\\"); } } static class Woman extends Human{ @Override public void sayHello(){ system.out.println(\\\"hello,woman!\\\"); } } public static void main(String[] args){ Human man = new Man(); Human woman = new Woman(); man.sayHello(); woman.sayHello(); } } 输出结果 ======== hello,man! hello,woman! \",\"单分派和多分派\",\"虚拟分派 虚方法表存放方法实际地址 invokeinterface\"]},\"1189\":{\"h\":\"字节码执行引擎\",\"t\":[\"解释执行\",\"基于栈的解释器\"]},\"1190\":{\"h\":\"文档说明\"},\"1191\":{\"h\":\"1.指令集\"},\"1192\":{\"h\":\"2.方法调用和返回\"},\"1193\":{\"h\":\"3. 基于栈的解释器\"},\"1194\":{\"c\":[\"深入理解java虚拟机\"]},\"1195\":{\"c\":[\"jvm\"]},\"1196\":{\"h\":\"7、编译器优化\"},\"1197\":{\"h\":\"早期(编译器)优化\",\"t\":[\"编译过程\",\"com.sun.tools.javac.main.javaCompiler\",\"void compile(){ //准备过程: 初始化插入注解处理器 initProcessAnnotations(processors); delegateCompiler = processAnnotations( // 过程2 :执行注解处理 enterTrees(stopIfError(CompileStage.PARSE, //过程1:输入符号表 parseFile(sourceFileObjects))) // 过程1：解析: 词法分析和语法分析 ,classnames); //过程3: 分析及字节码生成 delegateCompiler.compile2(); } void compile2(){ switch(tag){ case BY_TODO: while(!todo.isEmpty()){ generate( desugar ( flow.attribute(todo.remove()))); // 生成字节码 | 解语法糖 | 数据流分析 | 符号标注 } } } \"]},\"1198\":{\"h\":\"1.解析与填充符号表\",\"t\":[\"parseFile()\",\"token -> ast -> flow -> symbol\",\"1、词法、语法分析 词法分析是将源代码的字符流转变为标记(Token)的集合\",\"语法分析是根据Token序列构造抽象语法树ast的过程\",\"2.填充符号表\",\"enterTrees()\",\"符号表示一组符号地址和符号信息构成的表格\"]},\"1199\":{\"h\":\"2.注解处理\",\"t\":[\"initProcessAnnotations()\",\"processAnnotations()\",\"doProcess()\",\"插入式编译器插件，可以读取、修改、添加抽象语法树任意元素\",\"插入式插件在处理注解期间对语法树进行修改，编译器将回到解析及填充符号表重新处理,直到所有注解处理器不在修改 ，每一次循环称之为Round\"]},\"1200\":{\"h\":\"3.语义分析与字节码生成\",\"t\":[\"语法树能保证结构正确，无法保证符合逻辑\",\"语义分析主要任务是对结构上源程序上下文有关性质审查\",\"token检查\",\"attribute() flow() 检查是否声明变量，变量和赋值之间数据能否匹配\",\"数据及控制流分析\",\"局部变量使用前是否赋值，方法的每条路径是否有返回值\",\"解语法糖\",\"语法糖对功能没有影响，方便开发人员使用，增强可读性，减少出错\",\"字节码生成\",\"将各步骤生成信息(抽象语法树，符号表)转化到字节码写到磁盘中\"]},\"1201\":{\"h\":\"java 语法糖\"},\"1202\":{\"h\":\"1. 泛型与类型擦除\",\"t\":[\"泛型编译后成为Object\",\"泛型遇到重载后不能编译\",\"泛型擦除，对方法code属性中字节码的擦除，实际元数据中，还保留泛型信息， 这是通过反射获得参数化类型的依据\"]},\"1203\":{\"h\":\"2. 自动装箱与拆箱，遍历循环\",\"t\":[\" public static void main(String[] args) { List<Integer> list = Arrays.asList(1,2,3); int sum = 0; for(Integer i : list){ sum += i; } } //自动装箱 拆箱 遍历循环后 public static void main(String[] args) { List<Integer> list = Arrays.asList(new Integer[]{ Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3)}); int sum = 0; for(Iterator it = list.iterator(); it.hasNext();){ int i = ((Integer)it.next()).intValue(); sum += i; } } \",\"拆箱问题\",\" public static void main(String[] args) { Integer a = 1; Integer b = 2; Integer c = 3; Integer d = 3; Integer e = 321; Integer f = 321; Long g = 3L; System.out.println(\\\"c == d :\\\" + (c == d)); System.out.println(\\\"e == f :\\\" + (e == f)); System.out.println(\\\"c == a + b :\\\" + (c == a + b)); System.out.println(\\\"c.equals(a+b) :\\\" + (c.equals(a + b))); System.out.println(\\\"g==(a+b) :\\\" + (g == (a + b))); System.out.println(\\\"g.equals(a+b) :\\\" + (g.equals(a + b))); } //输出结果 c == d :true e == f :false c == a + b :true c.equals(a+b) :true g==(a+b) :true g.equals(a+b) :false \",\"包装类自动装箱会缓存值为-128~127的Integer对象\",\"包装类”==“运算在没有遇到算术运算情况下不会拆箱\",\"equals比较会先判断类型，再判断内容\",\"== 比较的是地址\",\"Integer a =1; //字节码 0: iconst_1 1: invokestatic #16; //Method java/lang/Integer.valueOf:(I) Ljava/lang/Integer; 4: astore_1 // -128~127 有对象换存池 值相同，对象地址相同 public static Integer valueOf(int i) { final int offset = 128; if (i >= -128 && i <= 127) { // must cache return IntegerCache.cache[i + offset]; } return new Integer(i); } //Integer a = 1 自动装箱 Integer a = Integer.valueOf(1); \",\"c == d :true 自动装箱使用valueOf 对象池，地址相同\",\"e == f :false 值超过127 ，值相同，但是对象地址不相同\",\"c == a + b :true 自动装箱使用valueOf 对象池，地址相同\",\"c.equals(a+b) :true 对象类型相同integer ，值相同\",\"g==(a+b) :true 拆箱计算a+b时，将结果3转换成long类型，再跟g比较，所以结果true\",\"g.equals(a+b) :false a+b计算结果装箱为Integer 3的对象，g为Long对象，equals比较时，会使用instanceof判断类型，结果false\"]},\"1204\":{\"h\":\"3. 条件编译\",\"t\":[\"删除无用代码\"]},\"1205\":{\"h\":\"实战\",\"t\":[\"编写自定义注解处理器 AbstractProcessor\",\"javaopt + apt技术\"]},\"1206\":{\"h\":\"晚期(运行期)优化\",\"t\":[\"解释器与编译器交互\",\"Client Compiler 简称 C1编译器\",\"Server Compiler 简称 C2编译器\",\"# 强制启动c1 java -client -version # 强制启动c2 java -server -version # 强制启动解释器模式 java -Xint -version # 强制启动jit模式 java -Xcomp -version \",\"即时编译器优化成本地代码需要占用程序运行时间，要编译优化程度更高代码，解释器还要替编译器收集性能监控信息\"]},\"1207\":{\"h\":\"分层编译策略\",\"t\":[\"第0层，程序解释执行，不开启性能监控Profiling, 可触发第1层编译\",\"第1层，c1编译，将字节码编译成本地代码，简单可靠优化，如果有必要才加入性能监控\",\"第2层，c2编译，将字节码编译成本地代码，编译耗时优化，根据性能监控启动激进优化\"]},\"1208\":{\"h\":\"编译对象与除法条件\",\"t\":[\"热点代码\",\"被多次调用的方法\",\"被多次执行的循环体\",\"以整个方法作为编译对象，称为栈上替换 OSR编译\"]},\"1209\":{\"h\":\"热点探测\",\"t\":[\"基于采样: 周期性检查栈顶，发现方法经常出现，判定热点方法，优点:简单高效，容易获取调用关系(堆栈中)，缺点:很难精确，一旦阻塞扰乱热点探测\",\"基于计数器: 每个方法建立计数器，统计执行次数，当计数器达到阈值，判定热点方法，优点:精确，缺点:需要额外的计数器，需要额外的内存，需要额外的时间 不能直接获得方法调用关系\",\"jvm采用基于计数器(hotspot)\",\"方法计数器 c1 Client 1500次 Server 10000次\",\"统计次数是相对频率，当超过一定时间限度，调用次数不足提交即时编译器，计数器数量减半(热度衰减)，半衰周期\",\"回边计数器 c2\",\"client 13995次 server 10700次 没有计数衰减\"]},\"1210\":{\"h\":\"编译过程\",\"t\":[\"Client Compiler优化\",\"高级中间代码 HIR, 静态分配 方法内联 常量传播\",\"低级中间代码 LIR, 空值检查消除，范围检查消除\",\"线性扫描算法 在LIR寄存器做窥孔优化，产生机器代码\",\"Server Compiler优化\",\"优化级别 GUN C++ -o2 优化水平\",\"普通优化 无用代码消除、循环展开、常量传播、基本块重排序、检查消除、空值检查消除\",\"激进优化 守护内联、分支频率预测\"]},\"1211\":{\"h\":\"优化技术\",\"t\":[\"无用代码消除\",\"公共子表达式消除: 代数简化\",\"数组范围检查:\",\"方法内联: 目标方法复制到调用方法\"]},\"1212\":{\"h\":\"逃逸分析:\",\"t\":[\"动态分析对象动态作用域。被外部方法引用，叫方法逃逸。被线程访问到，叫线程逃逸\",\"如果对象不会逃逸，可以进行高效优化，逃逸对象可以通过内联方式处理\",\"栈上分配\",\"同步消除\",\"标量替换\",\"不能保证逃逸分析的性能高于它的消耗\"]},\"1213\":{\"h\":\"java与c++对比\",\"t\":[\"即时编译器运行占用用户程序运行时间\",\"java动态类型安全语言,做安全检查\",\"java方法接收多态选择频率大于c++\",\"java动态扩展语言\",\"java对象在堆上分配对象，局部变量在栈上分配，c++多种分配\"]},\"1214\":{\"c\":[\"深入理解java虚拟机\"]},\"1215\":{\"c\":[\"jvm\"]},\"1216\":{\"h\":\"8、java高效并发\"},\"1217\":{\"h\":\"java内存模型与线程\"},\"1218\":{\"h\":\"硬件效率与一致性\",\"t\":[\"缓存一致性\",\"高速缓存的存储交互解决了处理器与内存的速度矛盾，但是它还是存在一致性问题，即缓存一致性。\",\"多处理器有多个高速缓存(Cache)，他们共享同一主内存(Main Memory)\",\"为了解决一致性问题，各个处理器访问缓存遵循协议 MSI MESI MOSI\",\"本文”内存模型“，在特定操作协议下，对特定内存会高速缓存进行读写的过程抽象\",\"为了使处理器运算单元利用率高，处理器对输入代码进行乱序执行优化(类java指令重新排序)\"]},\"1219\":{\"h\":\"java内存模型\",\"t\":[\"jmm\"]},\"1220\":{\"h\":\"内存间交互操作\",\"t\":[\"lock 锁定 主内存\",\"unlock 解锁 主内存\",\"read 读取 主内存\",\"load 载入 工作内存\",\"use 使用 工作内存\",\"assign 赋值 工作内存\",\"store 存储 工作内存\",\"write 写入 主内存\",\"读取 read load 写入 store write\"]},\"1221\":{\"h\":\"long double类型特殊规则\",\"t\":[\"读写需要2条指令，非原子操作 根据虚拟机实现情况而定\"]},\"1222\":{\"h\":\"volatile特殊规则\",\"t\":[\"可见性 volatile修饰变量 缓存中存在不一致性，但是每次使用之前都会从主内存中重新读取\",\"禁止指令重新排序 指令 lock addl $0x0,(%esp) 内存屏障 禁止指令重排序\"]},\"1223\":{\"h\":\"原则\",\"t\":[\"原子性 原子性是指一个操作是不可分割的，要么全部执行，要么不执行\",\"可见性 可见性是指一个线程修改了某个共享变量，其他线程能够立即看到这个修改\",\"有序性 有序性是指线程按照代码的顺序执行\",\"先行发生原则 操作A先发生于B，操作B可以观察到A的副作用\"]},\"1224\":{\"h\":\"java与线程\",\"t\":[\"线程是比进程更轻量级调度执行单位，各个线程共享进程资源(内存地址,文件IO),又可以独立调度\",\"Thread 关键实现是native方法,平台实现有关\"]},\"1225\":{\"h\":\"1. 使用内核线程实现\",\"t\":[\"操作系统内核线程实现，这种线程由内核来完成线程切换(不直接使用)\",\"轻量级进程，就是通常所指的线程，每个轻量级线程都有一个内核进程支持，轻量级进程与内核进程1:1关系\",\"每一个轻量级进程都是一个独立调度单元\",\"缺点：1、轻量级线程操作，需要系统调用，需要用户态和内核态中来回切换 2、创建需要消耗内核资源，系统支持轻量级进程数量有限\"]},\"1226\":{\"h\":\"2. 使用用户线程实现\",\"t\":[\"一个线程只要不是内核线程，就可以任务用户进程\",\"完全建立在用户空间的线程库 进程与用户线程是1:N关系\"]},\"1227\":{\"h\":\"3.使用用户线程加轻量级进程混合实现\",\"t\":[\"用户线程和轻量级进程比例 n:m\"]},\"1228\":{\"h\":\"4. java线程的实现\",\"t\":[\"虚拟机决定，采用线程api\"]},\"1229\":{\"h\":\"java线程调度\",\"t\":[\"同步式线程调度: 线程执行时间自己决定\",\"抢占式线程调度:系统分配执行时间\"]},\"1230\":{\"h\":\"状态转换\",\"t\":[\"线程状态转换\",\"新建状态 new 线程刚创建，还没有启动\",\"运行状态 runnable 线程已经启动。Ready 就绪状态 Running 运行状态\",\"无限期等待 waitting 等待被显式唤起 object.wait() thread.join() LockSupport.park()\",\"限期等待 Timed waitting 超时自动唤起 sleep(time) wait(time) join(time) LockSupport.parkNanos(time)\",\"阻塞 blocked 线程阻塞了，等待一个锁资源\",\"结束状态 terminated 线程结束\"]},\"1231\":{\"h\":\"线程安全\",\"t\":[\"如果一个对象可以安全的被多个线程同时访问，那么这个对象就是线程安全的\",\"多个线程访问同一个对象时，不需要额外的同步，调用这个对象行为都可以获得正确结果，那么是线程安全的\"]},\"1232\":{\"h\":\"不可变\",\"t\":[\"不可变对象被构建出来(没有发生this引用逃逸问题),是安全的\",\"基本数据类型 使用final关键字修饰，保证它不可变，比如String Integer\"]},\"1233\":{\"h\":\"绝对线程安全\",\"t\":[\"任何情况下，无额外同步措施\",\"原子操作组合业务，是非原子操作的，需要同步方法\"]},\"1234\":{\"h\":\"相对线程安全\",\"t\":[\"只保证这个对象单独操作是线程安全\"]},\"1235\":{\"h\":\"线程兼容\",\"t\":[\"调用方正确使用同步手段，保证现场对象在并发环境安全\"]},\"1236\":{\"h\":\"线程对立\",\"t\":[\"尝试停止和恢复另外线程来实现同步 resume suspend\"]},\"1237\":{\"h\":\"线程安全的实现\"},\"1238\":{\"h\":\"互斥同步\",\"t\":[\"互斥同步是指多个线程并发访问共享数据时，保证同一时刻只有一个线程使用，实现同步访问。互斥是实现同步的一种手段\",\"synchronized关键字 ,关键字经过编译后，会在同步块生成monitorenter monitorexit指令,\",\"字节码需要reference类型参数来指明锁定和解锁对象\",\"执行moniter指令时，monitorenter 尝试获取对象锁，获得+1 没获得阻塞， monitorexit 释放对象锁，-1 计数器为0 释放\",\"synchronized 可重入的\",\"阻塞和唤醒一个线程，都需要操作系统从用户态切换到内核态，需要系统调用\",\"ReentrantLock 实现同步\",\"可重入\",\"等待可中断： 持有锁线程长时间不释放，等待线程可以选择放弃等待\",\"公平锁 按照申请锁顺序来依次获得锁 非公平锁 任何一个等待线程都可以获得锁\",\"锁绑定多个条件 可以绑定多个condition\"]},\"1239\":{\"h\":\"非阻塞同步\",\"t\":[\"先进行操作，如果没有其他线程操作，则操作成功，否则失败，失败则重新进行操作\",\"乐观锁\",\"操作和冲突检测是原子性操作\",\"测试并射中\",\"获取并增加\",\"交换\",\"比较并交换CAS\",\"加载/存储\",\"public int incrementAndGet() { for(;;){ int cur = get(); int next = cur + 1; if(compareAndSet(cur,next)){ return next; } } } \",\"存在ABA问题 大部分场景不会影响并发安全性\"]},\"1240\":{\"h\":\"无同步方案\",\"t\":[\"可重入代码\",\"线程本地存储 ThreadLocal\"]},\"1241\":{\"h\":\"锁优化\"},\"1242\":{\"h\":\"自旋锁与自适应自旋锁\",\"t\":[\"不放弃处理器执行时间，忙循环(自旋) 叫自旋锁 自适应自旋 , 自旋时间是由上一次状态决定\",\"优点:避免线程切换开销 缺点消耗处理器资源\"]},\"1243\":{\"h\":\"锁消除\",\"t\":[\"移除没有同步需求的锁\"]},\"1244\":{\"h\":\"锁粗化\",\"t\":[\"频繁对一个对象中片段内容加锁，可以合并成一个锁，加到对象上\"]},\"1245\":{\"h\":\"锁升级\"},\"1246\":{\"h\":\"0.对象头\",\"t\":[\"对象头\"]},\"1247\":{\"h\":\"1.偏向锁\",\"t\":[\"单线程尝试进入\",\"加锁\",\"当锁对象第一次被线程获取时，jvm将对象头标志位设为”01“,即偏向模式\",\"CAS操作 设置获得锁线程ID记录到对象头中，设置成功\",\"持有偏向锁线程每次进入，不在有任何同步操作\",\"释放\",\"当有另外线程尝试获取这个锁，偏向模式结束\",\"撤销偏向恢复未锁定，或升级轻量锁状态\"]},\"1248\":{\"h\":\"2.轻量锁\",\"t\":[\"另外线程尝试获得锁\",\"加锁\",\"线程创建锁记录(Lock Record)空间，用于存储锁对象\",\"CAS操作 将对象MarkWord更新为Lock Record指针 称之为 Displaced MarkWord\",\"更新锁状态为\\\"00\\\" 轻量锁 加锁成功\",\"膨胀\",\"加锁失败，如果markword指向当前线程执行栈帧 继续执行\",\"否则，锁对象被强占，两个线程强占同一个锁，轻量锁失效\",\"膨胀成重量锁，锁状态为\\\"10\\\"\",\"解锁\",\"将对象原来的MarkWord替换回来\"]},\"1249\":{\"h\":\"3.重量锁\",\"t\":[\"多线程竞争锁\"]},\"1250\":{\"h\":\"锁升级流程\",\"t\":[\"锁升级流程\"]},\"1251\":{\"c\":[\"深入理解java虚拟机\"]},\"1252\":{\"c\":[\"jvm\"]},\"1253\":{\"h\":\"《重构-改善既有代码设计》方法论\",\"t\":[\"####引言 1、程序可持续特点有四个特点： 1）代码清晰，容易阅读 2）所有逻辑都只在唯一地点指定，即无重复代码 3）新的改动不会危及现有行为，即开闭原则 4）尽可能简单表达条件逻辑\",\"2、如何重构让代码可持续化 重构实战\",\"####GOF点评 设计模式为重构提供目标，以重构方式改进软件质量\",\"####1、定义 不改变软件可观察行为的前提下，改善其内部结构 2种含义： 1、保持代码功能不变，既不多，也不少 2、重构不需要了解软件行为，调整软件内部结构\",\"####2、方法论 1）原则：无重复代码，单一职责，测试驱动 2）目标：设计模式为重构提供目标 3）时机：添加功能，修补错误，复审代码 4）切入点：”坏味道“代码与对应手法 5）记录：重构修改清单 6）弊端：重构会引入中间层 7）优化：找出真正问题，遵循二八原则\",\"方法论对应实战 重构实战\",\"####重构原则\",\"事不过三，三则重构 \",\"第一次做某件事时只管去做，第二次做类似事会产生反感，但无论如何还是可以去做，第三次做类似的事，你就应该重构。 一句话解释：无重复代码\",\"单一职责原则 \",\"就一个类而言，应该仅有一个引起它变化的原因 关键：一个类，只做一件事\",\"最少知道原则 \",\"一个对象应该对其他对象有最少了解 一句话理解：访问对象，又要减少耦合\",\"TDD --测试驱动开发 \",\"用单元测试保证观察行为一致\",\"二八原则 \",\"先分析真正问题，在根据实际情况，考虑重构。优化遵循二八原则\",\"####记录重构清单 1）命名，建造重构词汇表，统一名称规范 2）重构手法与情景映射，关联 3）重构原因：为什么（why） 4）重构和修改功能是两件事，一件事做完，再处理另一件事\",\"####何时停止是重构的压轴 摘自《重构 改善既有代码设计》\",\"这些技术如此精彩，可他们却仅仅是个开始，这是为什么？答案很简单：因为你还不知道何时应该使用它们。何时不该使用它们；何时开始，何时停止；何时前进、何时等待。使重构能够成功的，不是前面各自独立的技术，而是这种节奏。\",\"得道标志是：你可以自信停止重构。 \",\"在重构者的整场表演中，“停止”正式压轴大戏\\n在悬崖峭壁上的小径行走；只要有光，你就可以前进，虽然谨慎却仍然自信。但是，一旦太阳下山，你就应该停止前进；夜晚你就应该睡觉，并且相信明天早晨太阳仍然升起。\"]},\"1254\":{\"c\":[\"重构-改善代码设计\"]},\"1255\":{\"c\":[\"archive\"]},\"1256\":{\"h\":\"代码坏味道\",\"t\":[\"1、重复代码\\n2、过长函数\\n3、过大的类（class）\\n4、过长参数列表\\n5、一个类需多处修改\\n6、一个变化多个类修改\\n7、一个函数过多依赖其他类\\n8、一团功能相似变量\\n9、switch 代码段\\n10、平行继承\\n11、冗余类，删除\\n12、过度设计、值得才设计\\n13、临时字段多\\n14、函数链过长\\n15、委托（类）函数过度\\n16、两个类关系过于紧密，用代理解决\\n17、相同功能函数\\n18、类库复用即可，不必完美\\n19、采用EntityClass\\n20、被拒绝的遗赠\\n21、过多注释，代码是最好的注释！\"]},\"1257\":{\"c\":[\"重构-改善代码设计\"]},\"1258\":{\"c\":[\"archive\"]},\"1259\":{\"h\":\"在对象之间搬移特性\",\"t\":[\"原则：单一职责、最少知道原则\",\"1）搬移函数\\n要点：使用频次高，搬移\\n2）搬移字段\\n要点：使用频次\\n3）提炼类\\n要点：某个类做了应该由两个类做的事\\n4）将类内联化\\n要点：某个类没做太多事\\n5）隐藏 “委托关系”\\n要点：客户通过一个委托类来调用另一个对象\\n目的：为后续代码预留下集中处理\\n6）移除中间人\\n要点：某个类做个多过简单委托动作\\n7）引入外加函数\\n要点：提炼一个函数减少变化\\n8）引入本地扩展\\n要点：新建一个类做扩展，为了安全\"]},\"1260\":{\"c\":[\"重构-改善代码设计\"]},\"1261\":{\"c\":[\"archive\"]},\"1262\":{\"h\":\"处理继承关系\",\"t\":[\"原则：找相同代码，责任职能划分，减少相同代码\\n1）字段上移/下移\\n要点：部分与整体关系\\n2） 函数上移\\n要点：有些函数，在各个子类中产生完全相同效果\\n3）构造函数本体上移\\n要点：在超类新建一个构造函数，并在子类构造函数中调用它\\n4）函数下移\\n要点：超类中某个函数只与部分子类有关\\n5）提炼子类\\n要点：类中某些特性只被某些（而非全部）实例用到\\n方案：新建一个子类，将上面所说的那一部分特性转移到子类中\\n6）提炼超类\\n要点：两个类有类似特性\\n方案：为这两个类建立一个超类，将相同特性转移至超类\\n7）提炼接口\\n要点：将相同的子集提炼到一个独立接口中\\n8）折叠继承体系\\n要点：超类和子类之间无太大区别\\n方案：将他们合为一体\\n9）塑造模板函数\\n方案：你有一些子类，其中相应的某些函数以相同顺序执行类似操作，但各个操作的细节上有所不同。\\n10）以委托取代继承\\n要点：子类只使用超类接口中的一部分\\n11）以继承取代委托\\n要点：委托函数太多\"]},\"1263\":{\"c\":[\"重构-改善代码设计\"]},\"1264\":{\"c\":[\"archive\"]},\"1265\":{\"h\":\"大型重构\",\"t\":[\"####大型重构 原则：单一职责\",\"1）梳理并分解继承体系 坏味道：某个继承体系同时承担两项责任 手法：建立那个继承体系，并通过委托关系让其中一个可以调用另一个\",\"2）将过程化设计转化对象设计 坏味道：你手上一些传统过程化风格的代码 手法：将数据记录变成对象，将大块行为分成小块，并将行为移入相关对象中\",\"3)将逻辑与视图分离（MVC） 坏味道：视图包含业务逻辑\",\"4）提炼继承体系\\n坏味道：你有某个类做了太多工作，其中一部分工作是以大量条件表达式完成的\\n手法：建立继承体系，以一个子类表示一种特殊情况\"]},\"1266\":{\"c\":[\"重构-改善代码设计\"]},\"1267\":{\"c\":[\"archive\"]},\"1268\":{\"h\":\"影响项目重构现实因素及解决方案\",\"t\":[\"#####1、重构认知普及的瓶颈 1）技术发展超前于实践 2）常识性原因影响开发者 3）接受新思维有渐进过程\",\"#####2、开发人员不愿意重构的现实原因 1）开发人员不知道重构这项技术 2）重构是长远利益，成果易被其他人摘桃子 3）一份老板不付钱的额外工作 4）重构破坏现有程序，增加复杂度\",\"#####3、如何让重构真正在项目中落地 1）提高思维认识：新技术发展从本质上讲，提高生产力 2）解决眼前迫切问题，既要有短期利益，也要有长期利益 3）降低重构带来的开销 4）考虑程序安全稳定\",\"#####4、作者认为思维差异 “让软件开发者相信重构的实际价值”和“让博士论文评议委员会相信重构研究够得上博士水平”是完全不同的两码事，在写完毕业论文以后，我又花了相当长时间才对这种差异有了足够充分的认识。\",\"个人理解：研究与实践两种思维方式差异，研究注重长期科研价值，而实践注重于短期利益。如何推行看重短期利益的人完成看似无用长期价值的事，需要变换思维方式\",\"关键是技术领导与开发人员之间利益平衡\",\"#####5、总结\\n开发人员短视，重视短期利益，技术领导善于平衡长期利益与短期利益的关系，才能推行一件方向正确的事\"]},\"1269\":{\"c\":[\"重构-改善代码设计\"]},\"1270\":{\"c\":[\"archive\"]},\"1271\":{\"h\":\"总结（知止）\",\"t\":[\"#####引言 大学之道，在明明德，在亲民，在止于至善。 知止而后有定，定而后能静，静而后能安，安而后能虑，虑而后能得。 物有本末，事有始终，知所先后，则近道也。\",\"这些技术如此精彩，可他们却仅仅是个开始，这是为什么？答案很简单：因为你还不知道何时应该使用它们。何时不该使用它们；何时开始，何时停止；何时前进、何时等待。使重构能够成功的，不是前面各自独立的技术，而是这种节奏。 精熟、掌控、停止 得道标志是：你可以自信停止重构。在重构者的整场表演中，“停止”正式压轴大戏 在悬崖峭壁上的小径行走；只要有光，你就可以前进，虽然谨慎却仍然自信。但是，一旦太阳下山，你就应该停止前进；夜晚你就应该睡觉，并且相信明天早晨太阳仍然升起。\",\"#####方法： 1）随时挑一个目标 2）没把握就停下来 3）学习原路返回 4）两个人合伙做\",\"重构目标：保持代码功能不变，既不多，也不少。\\n1）列个修改清单\\n2）重构和修改功能是两件事，一件事做完，再处理另一件事\"]},\"1272\":{\"c\":[\"重构-改善代码设计\"]},\"1273\":{\"c\":[\"archive\"]},\"1274\":{\"h\":\"简化函数调用\",\"t\":[\"原则：接口简洁易用，只做一件事\\n1）函数改名\\n要点：函数的名称未能揭示函数的用途\\n2）添加参数\\n要点：某个函数需要从调用端得到更多信息\\n3）移除参数\\n要点：函数本体不再需要某个参数\\n4）将查询函数和修改函数分离\\n要点：某个函数既返回对象状态值，又修改对象状态\\n方案：建立两个不同函数，其中一个负责查询，另一个负责修改\\n规则：任何有返回值的函数，都不应该有看得到的副作用\\n5）令函数携带参数\\n要点：若干函数做了类似的工作，但在函数本体中却包含了不同的值\\n方案：建立单一函数，以参数表达那些不同的值（父类）\\n6）以明确函数取代参数\\n要点：针对该参数的每一个可能值，建立一个独立函数\\n方案：一个参数，一个函数，清晰明确\\n7）保持对象完整\\n要点：你从某个对象中取出若干值，将它们作为某一次函数调用的参数\\n方案：改为传递整个对象\\n8）以函数取代参数\\n要点：两行代码合并一行，语义更清晰\\n方案：让参数接受者取出该项参数，并直接调用前一个函数\\n9）引入参数对象\\n要点：某些参数总是很自然地同时出现\\n方案：以一个对象取代这些参数\\n10）移除设值函数\\n要点：类中某个字段应该在对象创建时被设值，然后就不在改变。\\n11）隐藏函数\\n要点：有一个函数，从来没有被其他任何类用到\\n12）以工厂函数取代构造函数\\n要点：不止是构建，还要创建对象\\n13）以异常取代错误码\\n要点：某个函数返回一个特定的代码，用来表示某种错误\\n14）以测试取代异常\\n要点：修改调用者，使它在调用函数之前先做检查\"]},\"1275\":{\"c\":[\"重构-改善代码设计\"]},\"1276\":{\"c\":[\"archive\"]},\"1277\":{\"h\":\"简化条件表达式\",\"t\":[\"原则：“分支逻辑” 和 “操作细节” 分离\",\"1）分解条件表达式\\n要点：你有一个复杂条件（if-then-else）语句\\n2）合并条件表达式\\n要点：你有一系列条件测试，都得到相同结果\\n3）合并重复的条件片段\\n要点：在条件表达式分支上都有着相同的一段代码\\n4）移除控制标志\\n要点：在一些列布尔表达式中，某个变量带有“控制标记”的作用\\n方案：以break语句或return语句取代控制标记\\n5）以卫语句（函数）取代嵌套条件表达式\\n要点：函数中条件逻辑使人难以看清正常的执行路径\\n方案：if .... return.... 条件罕见，难以触发\\n6）以多态取代条件表达式\\n要点：你手上有个条件表达式，它根据对象类型的不同而选择不同行为\\n方案：策略模式\\n多态好处：如果你需要根据对象的不同类型而采取不同行为，多态使你不必编写明显的条件表达式 （省略条件表达式 switch / if ...then...）\\n7）引入Null对象（空值校验，引入默认值）\\n要点：你需要再三检查某对象是否为null\\n方案：将null值替换为null对象\\n8）引入断言\\n要点：某一段代码需要对程序状态做出某种假设\\n方案：增强校验\"]},\"1278\":{\"c\":[\"重构-改善代码设计\"]},\"1279\":{\"c\":[\"archive\"]},\"1280\":{\"h\":\"重新组织函数\",\"t\":[\"1）提炼函数 要点：简洁 2）内联函数 要点：去除不必要间接层 3）内联临时变量 要点：去除不必要间接层 4）以查询取代临时变量 要点：简单公式要封装 5）引入解释性变量 要点：命名规范，见名知义 6）分解临时变量 要点：一个变量只存一个值 7）移除对参数赋值 要点：增加临时变量，为代码清晰 8）以函数对象取代函数 要点：数据实体类 entity 9）替换算法 要点：代码更简洁 ，for循环\",\"目标：函数更精简、更清晰\"]},\"1281\":{\"c\":[\"重构-改善代码设计\"]},\"1282\":{\"c\":[\"archive\"]},\"1283\":{\"h\":\"重新组织数据\",\"t\":[\"原则：数据清晰，含义明确\\n1）自封装字段\\n要点：get set 取数据\\n2）以对象取代数据值\\n要点：你有一个数据项，需要与其他数据和行为一起使用才有意义\\n3）将值对象改为引用对象 （单例）\\n要点：你从一个类衍生许多彼此相等的实例，希望将他们替换成同一个对象\\n4）以对象取代数据\\n要点：你有一个数组，其中各个元素各自代表不同的东西\\n5）复制“被监视数据”\\n要点：观察者同步数据 为了做分层 mvc模式\\n6）将单项关联改为双向关联（反向指针）\\n要点：两个类都需要使用对方特性，但其间有一个单项链接\\n7）将双向关联变为单项\\n要点：去掉不必要关联\\n8）以字面常亮取代魔法数（常量）\\n要点：你有一个字面数值，带有特别含义\\n9）封装字段\\n要点：你的类存在一个public字段\\n10）封装集合\\n要点：有个函数返回集合（set,map）\\n方案：增加操作集合的函数，不直接处理\\n11）以类取代类型码\\n要点：方便数据类型校验\\n12）以子类取代类型码\\n要点：子类集成 重写增加灵活性\\n13）以State/Strategy取代类型码\\n要点：你有一个类型码，它会影响类的行为，但你无法通过继承手法消除它\\n方案：策略模式，状态模式，以状态对象取代类型码\\n14）以字段取代子类\\n要点：你的各个子类的唯一差别只在“返回常量数据”的函数身上\\n方案：修改这些函数，使它们返回超类中的某个（新增）字段，然后销毁子类\"]},\"1284\":{\"c\":[\"重构-改善代码设计\"]},\"1285\":{\"c\":[\"archive\"]},\"1286\":{\"h\":\"重构实战\",\"t\":[\"#####重构实战： 1、本文把常用坏味道，重构手法列出，用于解决工作日常80%问题 2、降低重构带来的开销 影响项目重构现实因素及解决方案\",\"#####1、原则 1、无重复代码 2、单一职责 3、测试驱动\",\"#####2、重构的时机 1、添加功能， 2、修补错误(bug)， 3、复审代码\",\"#####3、\\\"坏味道\\\"的代码 1、重复代码 2、过长函数 3、过大的类（class） 4、过长参数列表 5、一个类需多处修改 6、一个变化多个类修改 7、一个函数过多依赖其他类 8、一团功能相似变量 9、switch 代码段 10、平行继承 11、冗余类，删除 12、过度设计、值得才设计 13、临时字段多 14、函数链过长 15、委托（类）函数过度 16、两个类关系过于紧密，用代理解决 17、相同功能函数 18、类库复用即可，不必完美 19、采用EntityClass 20、被拒绝的遗赠 21、过多注释，代码是最好的注释！\",\"#####4、常用重构手法 1、提取子函数 2、上移函数到父类 3、下移函数到子类 4、封装固定调用逻辑 5、使用泛型去除重复逻辑 6、使用对象避免过多参数 7、转移函数--单一职责 8、将类型码转为状态模式 9、NullObject模式 10、分解胖型类\",\"详见 1、重新组织函数 2、在对象之间搬移特性 3、重新组织数据 4、简化条件表达式 5、处理继承关系 6、大型重构\",\"#####5、重构修改清单\\n1）记录命名，建造重构词汇表，统一名称规范\\n2）记录重构手法与情景映射，关联\\n3）记录重构原因：为什么（why）\\n4）记录修改清单\\n5）重构和修改功能是两件事，一件事做完，再处理另一件事\"]},\"1287\":{\"c\":[\"重构-改善代码设计\"]},\"1288\":{\"c\":[\"archive\"]},\"1289\":{\"h\":\"AS集成TinyPngPlugin插件配置\",\"t\":[\"####配置\",\"apply plugin: 'com.waynell.tinypng' buildscript { repositories { jcenter() google() } dependencies { classpath 'com.waynell.tinypng:TinyPngPlugin:1.0.5' } } //命令：./gradlew tinyPng tinyInfo { resourceDir = [ // your res dir \\\"app/src/main/res\\\", \\\"lib/src/main/res\\\" ] resourcePattern = [ // your res pattern \\\"drawable[a-z-]*\\\", \\\"mipmap[a-z-]*\\\" ] whiteList = [ // your white list, support Regular Expressions ] apiKey = 'xxxxxx' } \",\"命令：gradle tinyPng\",\"https://github.com/yinlingchaoliu/TinyPngPlugin\"]},\"1290\":{\"c\":[\"Android相关\"]},\"1291\":{\"c\":[\"archive\"]},\"1292\":{\"h\":\"AndResGuard实战配置\",\"t\":[\"apply plugin: 'AndResGuard' buildscript { repositories { jcenter() google() } dependencies { classpath 'com.tencent.mm:AndResGuard-gradle-plugin:1.2.15' } } andResGuard { // mappingFile = file(\\\"./resource_mapping.txt\\\") mappingFile = null use7zip = true useSign = true // it will keep the origin path of your resources when it's true keepRoot = false whiteList = [ // your icon \\\"R.drawable.icon\\\", \\\"R.mipmap.ic_launcher\\\", // for fabric \\\"R.string.com.crashlytics.*\\\", // for google-services \\\"R.string.google_app_id\\\", \\\"R.string.gcm_defaultSenderId\\\", \\\"R.string.default_web_client_id\\\", \\\"R.string.ga_trackingId\\\", \\\"R.string.firebase_database_url\\\", \\\"R.string.google_api_key\\\", \\\"R.string.google_crash_reporting_api_key\\\", \\\"R.dimen.rc_*\\\", //国内第三方 // for umeng update \\\"R.string.umeng*\\\", \\\"R.string.UM*\\\", \\\"R.string.tb_*\\\", \\\"R.string.rc_*\\\", \\\"R.layout.umeng*\\\", \\\"R.layout.tb_*\\\", \\\"R.layout.rc_*\\\", \\\"R.drawable.umeng*\\\", \\\"R.drawable.tb_*\\\", \\\"R.drawable.rc_*\\\", \\\"R.drawable.u1*\\\", \\\"R.drawable.u2*\\\", \\\"R.anim.umeng*\\\", \\\"R.color.umeng*\\\", \\\"R.color.tb_*\\\", \\\"R.color.rc_*\\\", \\\"R.style.*UM*\\\", \\\"R.style.umeng*\\\", \\\"R.style.rc_*\\\", \\\"R.id.umeng*\\\", \\\"R.id.rc_*\\\", // umeng share for sina \\\"R.drawable.sina*\\\", ] compressFilePattern = [ \\\"*.png\\\", \\\"*.jpg\\\", \\\"*.jpeg\\\", \\\"*.gif\\\", \\\"resources.arsc\\\" ] sevenzip { artifact = 'com.tencent.mm:SevenZip:1.2.15' //path = \\\"/usr/local/bin/7za\\\" } } \",\"####git地址\",\"命令： gradle resguardDebug gradle resguardRelease gradle resguardUseApk\",\"选文件\\nhttps://github.com/shwenzhang/AndResGuard\"]},\"1293\":{\"c\":[\"Android相关\"]},\"1294\":{\"c\":[\"archive\"]},\"1295\":{\"h\":\"Android-APP不受系统设置字体大小影响\",\"t\":[\"activity回调\",\"public class ActivityResourceLifecycleCallback implements Application.ActivityLifecycleCallbacks { @Override public void onActivityCreated(Activity activity, Bundle savedInstanceState) { getResources( activity ); //注册fragment registerFragmentCallbacks(activity); } /** * 设置标准字体 */ public Resources getResources(Activity activity) { Resources res = activity.getResources(); Configuration newConfig = new Configuration(); newConfig.setToDefaults();//设置默认 res.updateConfiguration(newConfig, res.getDisplayMetrics()); return res; } @Override public void onActivityStarted(Activity activity) { } @Override public void onActivityResumed(Activity activity) { } @Override public void onActivityPaused(Activity activity) { } @Override public void onActivityStopped(Activity activity) { } @Override public void onActivitySaveInstanceState(Activity activity, Bundle outState) { } @Override public void onActivityDestroyed(Activity activity) { } } \"]},\"1296\":{\"c\":[\"Android相关\"]},\"1297\":{\"c\":[\"archive\"]},\"1298\":{\"h\":\"Android-Build系统信息\",\"t\":[\" String board = Build.BOARD;//主板 String brand = Build.BRAND;//系统定制商 String[] supportedAbis = Build.SUPPORTED_ABIS;//CPU指令集 String device = Build.DEVICE;//设备参数 String display = Build.DISPLAY;//显示屏参数 String fingerprint = Build.FINGERPRINT;//唯一编号 String serial = Build.SERIAL;//硬件序列号 String id = Build.ID;//修订版本列表 String manufacturer = Build.MANUFACTURER;//硬件制造商 String model = Build.MODEL;//版本 String hardware = Build.HARDWARE;//硬件名 String product = Build.PRODUCT;//手机产品名 String tags = Build.TAGS;//描述Build的标签 String type = Build.TYPE;//Builder类型 String codename = Build.VERSION.CODENAME;//当前开发代码 String incremental = Build.VERSION.INCREMENTAL;//源码控制版本号 String release = Build.VERSION.RELEASE;//版本字符串 int sdkInt = Build.VERSION.SDK_INT;//版本号 String host = Build.HOST;//Host值 String user = Build.USER;//User名 long time = Build.TIME;//编译时间 \",\"华为p30 pro信息抓取 示例\",\"board: VOG brand: HUAWEI supportedAbis:[arm64-v8a, armeabi-v7a, armeabi] device: HWVOG display: VOG-AL00 9.1.0.186(C00E180R2P1) fingerprint: HUAWEI/VOG-AL00/HWVOG:9/HUAWEIVOG-AL00/186C00:user/release-keys serial: unknown id: HUAWEIVOG-AL00 manufacturer: HUAWEI model: VOG-AL00 hardware: kirin980 product: VOG-AL00 tags: release-keys type: user codename: REL incremental: 186C00 release: 9 sdkInt: 28 host: sh33773886d1563280923609-155214966-p3j7f user: test time: 1563286764000 \"]},\"1299\":{\"c\":[\"Android相关\"]},\"1300\":{\"c\":[\"archive\"]},\"1301\":{\"h\":\"Android-SpanLite-让SpannableStringBuilder更简单-用法so-easy\"},\"1302\":{\"h\":\"一、前言\",\"t\":[\"SpannableStringBuilder三方库，github怎么看都不满意，用法不够简洁。 我这边用建造者方式重新写一个，来让写法简答起来。\"]},\"1303\":{\"h\":\"二、SpanLite让你so easy编写spanBuilder\"},\"1304\":{\"h\":\"1、引用依赖\",\"t\":[\"allprojects { repositories { maven { url 'https://www.jitpack.io' } } } dependencies { implementation 'com.github.yinlingchaoliu:spanLite:0.0.1' } \"]},\"1305\":{\"h\":\"2、构造SpannableStringBuilder\",\"t\":[\"SpanBuilder提供支持方法\",\"SpannableStringBuilder spanBuilder = SpanBuilder.Builder( \\\"spanBuilder方法\\\" ) //传入文字 .drawTextBackgroundColor( Color.YELLOW )//设置文字背景色 .drawTextBackgroundColor( \\\"#000000\\\" ) .drawTextColor( Color.RED )//设置文字颜色 .drawTextColor( \\\"#000000\\\" ) .drawTypeFaceBold()//设置粗体 .drawTypeFaceItalic()//设置斜体 .drawTypeFaceNormal()//设置正常 .drawTypeFaceBoldItalic()//设置粗体斜体 .drawStrikethrough()//设置删除线 .drawUnderline()//设置下划线 .drawScaleX( 2 )//设置x倍数 .drawBlurMaskFilter( 3, BlurMaskFilter.Blur.INNER )//设置模糊 .drawDynamicDrawable( new DynamicDrawableSpan() {//设置图片 @Override public Drawable getDrawable() { Drawable drawable = getResources().getDrawable( R.mipmap.ic_launcher ); drawable.setBounds( 0, 0, 50, 50 ); return drawable; } } ) .drawSubscript()//设置下标 .drawSuperscript()//设置上标 .drawTextSizeAbsolute( 30 )//设置绝对字体大小 .drawTextSizeRelative( 40 )//设置相对字体大小 .drawImage( this, R.mipmap.ic_launcher )//设置图片 .drawTextAppearance( this, R.style.AppTheme )//设置文字style .drawTypeface( \\\"serif\\\" )//设置字体 .drawURL( \\\"tel:18601986749\\\" )//设置url .setOnClick( new SpanBuilder.Listerner() {//设置监听点击事件 @Override //点击事件 public void onClick(View widget) { Toast.makeText( MainActivity.this, \\\"kakak\\\", Toast.LENGTH_SHORT ).show(); } @Override //设置更新属性 public void updateDrawState(TextPaint ds) { super.updateDrawState( ds ); } } ).build();//创建 \",\"示例demo\",\"SpanBuilder.Builder( \\\"你好小妹\\\" ).setOnClick( new SpanBuilder.Listerner() { @Override public void onClick(View widget) { Toast.makeText( MainActivity.this, \\\"张三丰也会下山\\\", Toast.LENGTH_SHORT ).show(); } } ).drawTypeFaceBold().build() \"]},\"1306\":{\"h\":\"3、链式拼装SpanBuilder\",\"t\":[\"SpanLite.with( spanTextView ) .append(spanBuilder1) .append(spanBuilder2) .append(spanBuilder3) .active() \"]},\"1307\":{\"h\":\"4、实战演示\",\"t\":[\"SpanLite.with( spanTv ) .append( SpanBuilder.Builder( \\\"你好小妹\\\" ).setOnClick( new SpanBuilder.Listerner() { @Override public void onClick(View widget) { Toast.makeText( MainActivity.this, \\\"张三丰也会下山\\\", Toast.LENGTH_SHORT ).show(); } } ).drawTypeFaceBold().build() ) .append( SpanBuilder.Builder( \\\"kakakakak\\\" ).setOnClick( new SpanBuilder.Listerner() { @Override public void onClick(View widget) { Toast.makeText( MainActivity.this, \\\"kakak\\\", Toast.LENGTH_SHORT ).show(); } } ).drawTypeFaceItalic().build() ) .append(SpanBuilder.Builder( \\\"《开户协议》\\\" ).setOnClick( new SpanBuilder.Listerner() { @Override public void onClick(View widget) { Toast.makeText( MainActivity.this, \\\"协议就要花钱\\\", Toast.LENGTH_SHORT ).show(); } } ).drawTextColor( Color.BLUE ).drawTextBackgroundColor( Color.YELLOW ).drawTypeFaceBold().drawTextSize( 60 ) .build() ) .active(); \"]},\"1308\":{\"h\":\"三、编写框架方法\"},\"1309\":{\"h\":\"1、编写思考路径\",\"t\":[\"单一职责：不要将两步封装融为一步，这样耦合在一起的编写不简洁\"]},\"1310\":{\"h\":\"2、收集所有相关主要的方法\",\"t\":[\"SpannableStringBuilder和SpannableString主要通过使用\",\"setSpan(Object what, int start, int end, int flags) 对应的参数：\",\"start： 指定Span的开始位置\",\"end： 指定Span的结束位置，并不包括这个位置。\",\"flags：取值有如下四个\",\"Spannable. SPAN_INCLUSIVE_EXCLUSIVE：前面包括，后面不包括，即在文本前插入新的文本会应用该样式，而在文本后插入新文本不会应用该样式\",\"Spannable. SPAN_INCLUSIVE_INCLUSIVE：前面包括，后面包括，即在文本前插入新的文本会应用该样式，而在文本后插入新文本也会应用该样式\",\"Spannable. SPAN_EXCLUSIVE_EXCLUSIVE：前面不包括，后面不包括\",\"Spannable. SPAN_EXCLUSIVE_INCLUSIVE：前面不包括，后面包括\",\"what： 对应的各种Span，不同的Span对应不同的样式。已知的可用类有：\",\"BackgroundColorSpan : 文本背景色\",\"ForegroundColorSpan : 文本颜色\",\"MaskFilterSpan : 修饰效果，如模糊(BlurMaskFilter)浮雕\",\"RasterizerSpan : 光栅效果\",\"StrikethroughSpan : 删除线\",\"SuggestionSpan : 相当于占位符\",\"UnderlineSpan : 下划线\",\"AbsoluteSizeSpan : 文本字体（绝对大小）\",\"DynamicDrawableSpan : 设置图片，基于文本基线或底部对齐。\",\"ImageSpan : 图片\",\"RelativeSizeSpan : 相对大小（文本字体）\",\"ScaleXSpan : 基于x轴缩放\",\"StyleSpan : 字体样式：粗体、斜体等\",\"SubscriptSpan : 下标（数学公式会用到）\",\"SuperscriptSpan : 上标（数学公式会用到）\",\"TextAppearanceSpan : 文本外貌（包括字体、大小、样式和颜色）\",\"TypefaceSpan : 文本字体\",\"URLSpan : 文本超链接\",\"ClickableSpan : 点击事件\"]},\"1311\":{\"h\":\"3、抽象出span简单 工具类\",\"t\":[\"目的：封装就是为了简写，减少不必要重复代码\",\"/** * span支持工具类 * @author chentong * @date:2020-1-2 */ final class Util { public static void setSpan(){ } } \"]},\"1312\":{\"h\":\"4、用建造者模式对单一spanBuilder进行模型简化\",\"t\":[\"目的：在工具类基础上简单组合方式\",\"/** * span建造者模式，职责建造一个子build,便于用户清晰 * @author chentong * @date:2020-1-2 * */ public class SpanBuilder { private SpannableStringBuilder spanBuilder; private String content; private SpanBuilder() { } private SpanBuilder(String content) { this.content = content; spanBuilder = new SpannableStringBuilder( content ); } public static SpanBuilder Builder(String content) { return new SpanBuilder( content ); } } \"]},\"1313\":{\"h\":\"5、spanLite链式调用拼装\",\"t\":[\"目的：在build基础上，整体拼装方式，为了开发者简单链式调用\",\"/** * 建造者模式,用于组装完整spanBuild 为textview使用 * @author chentong * @date:2020-1-2 */ public class SpanLite { private TextView spanTv; private SpannableStringBuilder spanBuilder; private SpanLite() { } private SpanLite(TextView textView) { this.spanTv = textView; spanBuilder = new SpannableStringBuilder(); } //加入环境 public static SpanLite with(TextView spanTv) { return new SpanLite( spanTv ); } //拼接 public SpanLite append(SpannableStringBuilder spanBuilder) { this.spanBuilder.append( spanBuilder ); return this; } //设置超级span，用来特殊处理 public SpanLite setSpan(Object what, int start, int end, int flags) { Util.setSpan( spanBuilder, what, start, end, flags ); return this; } //生效 public void active() { Util.setMovementMethod( spanTv ); spanTv.setText( spanBuilder ); Util.setHighlightColor( spanTv ); } } \"]},\"1314\":{\"h\":\"6、github开源代码\",\"t\":[\"https://github.com/yinlingchaoliu/spanLite\"]},\"1315\":{\"c\":[\"Android相关\"]},\"1316\":{\"c\":[\"archive\"]},\"1317\":{\"h\":\"Android-apk实战瘦身-立减6M\",\"t\":[\"####前言 减少apk体积，实用 根据二八法则，先说效果显著的\",\"#####1、包体积分析 打开build–>Analyze APK 对apk体积有一个概况了解\",\"#####2、压缩图片 显著减少体积2.5M 1、优化图片体积 tinypng 先申请tinypng账号,获得api_key\",\"2、点击AS集成TinyPngPlugin插件配置\",\"#####3、删除冗余so库 语言 减少1.8M\",\"defaultConfig { resConfigs \\\"zh\\\" ndk { //设置支持的SO库架构 abiFilters 'armeabi' } } \",\"#####4、lint删除冗余资源 500k Android Studio\",\" Analyze -> Run Inspection by Name 选择—>unusedResources 建议第一种 选择—>unused declaration 第二种存在测试量 \",\"#####5、减少体积标配 500K\",\"android { buildTypes { release { minifyEnabled true //开启minifyEnabled混淆代码 shrinkResources true //去除无用资源 } } } \",\"#####6、采用AndResGuard 1.3M\",\"点击AndResGuard实战配置\",\"腾讯方案介绍：安装包立减1M--微信Android资源混淆打包工具\",\"####未实战方案 ####1、so库按需下载 https://github.com/KeepSafe/ReLinker\",\"2、使用WebP文件格式 插件批量处理 https://github.com/meili/WebpConvert_Gradle_Plugin\",\"####参考\\nAndroid性能优化系列之apk瘦身\"]},\"1318\":{\"c\":[\"Android相关\"]},\"1319\":{\"c\":[\"archive\"]},\"1320\":{\"h\":\"Android-app冷启动\",\"t\":[\"####Android App启动流程：\",\"冷启动app：Application:attachBaseContext()------>Application:onCreate()----->Activity:onCreate() \",\"Application:attachBaseContext()\",\"MultiDex.install(); \",\"Application:onCreate() *第三方sdk初始化放在异步线程中 方案： 1、Thread 、AsyncTask、Handler 2、IntentService初始化\",\"/** * 第三方sdk启动 */ public class InitializeService extends IntentService { private static final String ACTION_INIT_WHEN_APP_CREATE = \\\"com.app.start\\\"; private static String TAG = InitializeService.class.getSimpleName(); public InitializeService() { super(TAG); } public InitializeService(String name) { super(name); } @Override protected void onHandleIntent(Intent intent) { if (intent != null) { final String action = intent.getAction(); if (ACTION_INIT_WHEN_APP_CREATE.equals(action)) { performInit(); } } } private void performInit() { //此处进行第三方sdk初始化 //融360 Context applicationContext = MyApplication.getInstance(); CrawlerManager.initSDK(applicationContext);//初始化SDK CrawlerManager.getInstance().setDebug(true); /** * webView 内核初始化 * 说明WebView 初处初始化耗时 250ms 左右。 */ // WebView mWebView=new WebView(new MutableContextWrapper(applicationContext)); } public static void start(Context context) { Intent intent = new Intent(context, InitializeService.class); intent.setAction(ACTION_INIT_WHEN_APP_CREATE); context.startService(intent); } } //xml <service android:name=\\\".app.service.InitializeService\\\" android:exported=\\\"false\\\"/> \",\"Activity:onCreate() 在onCreate之前设置透明主题或者闪屏页 给用户秒开的视觉效果\",\" <!-- 透明主题 --> <style name=\\\"No_Splash_Light\\\" parent=\\\"Theme.AppCompat.Light\\\"> <item name=\\\"android:windowBackground\\\">@android:color/transparent</item> <item name=\\\"android:windowIsTranslucent\\\">true</item> <item name=\\\"android:windowContentOverlay\\\">@null</item> </style> <!-- 闪屏页主题 --> <style name=\\\"SplashTheme\\\" parent=\\\"AppTheme\\\"> <item name=\\\"android:windowBackground\\\">@mipmap/flash_icon</item> <item name=\\\"android:windowIsTranslucent\\\">false</item> <item name=\\\"android:windowFullscreen\\\">true</item> </style> \",\"在Activiy.onCreate()方法中加载视图之前设置回原来主题\",\"setTheme( R.style.AppTheme ); \",\"####性能测试工具 项目地址：https://github.com/JakeWharton/hugo\",\"####参考\\nhttps://blog.csdn.net/u012811342/article/details/77568718\\nhttps://blog.csdn.net/u012124438/article/details/56340949\\nhttps://www.jianshu.com/p/f5514b1a826c\"]},\"1321\":{\"c\":[\"Android相关\"]},\"1322\":{\"c\":[\"archive\"]},\"1323\":{\"h\":\"Android上传蒲公英平台脚本\",\"t\":[\"####1、前言\",\"使用jenkins实现持续集成,需要编写上传蒲公英平台的脚本 本文目的提供一个比较通用且优雅的脚本，遇到这个问题的同学点个赞👍\",\"####脚本\",\"#!/usr/bin/env bash ##author chentong ##date 2019/2/12 ##json解析函数 function jsonParse() { # $1 $2 json lable JSON_CONTENT=$1 KEY='\\\"'$2'\\\":' echo ${JSON_CONTENT} | awk -F ${KEY} '{print $2}' | awk -F '\\\"' '{print $2}' } ##删除斜杠'\\\\' function trimSlash() { TEXT=$1 echo ${TEXT//'\\\\'/''} } ##解析返回报文 function showApkInfo() { CONTENT=$1 echo \\\"App的名称:\\\" $(jsonParse \\\"${CONTENT}\\\" \\\"appName\\\") echo \\\"AppId :\\\" $(jsonParse \\\"${CONTENT}\\\" \\\"appIdentifier\\\") echo \\\"App版本名:\\\" $(jsonParse \\\"${CONTENT}\\\" \\\"appVersion\\\") echo \\\"App版本号:\\\" $(jsonParse \\\"${CONTENT}\\\" \\\"appVersionNo\\\") echo \\\"AppBuild:\\\" $(jsonParse \\\"${CONTENT}\\\" \\\"appBuildVersion\\\") echo \\\"App包体积:\\\" $(jsonParse \\\"${CONTENT}\\\" \\\"appFileSize\\\") echo \\\"App短链接:\\\" \\\"https://www.pgyer.com/\\\"$(jsonParse \\\"${CONTENT}\\\" \\\"appShortcutUrl\\\") echo \\\"App下载页地址:\\\" \\\"https://www.pgyer.com/\\\"$(jsonParse \\\"${CONTENT}\\\" \\\"appKey\\\") echo \\\"App二维码地址:\\\" $(trimSlash $(jsonParse \\\"${CONTENT}\\\" \\\"appQRCodeURL\\\")) echo \\\"App上传时间:\\\" $(jsonParse \\\"${CONTENT}\\\" \\\"appCreated\\\") } ####上传蒲公英 API_KEY=\\\"acfdf25fdc001ebb2494b1ab8a566193\\\" USER_KEY=\\\"3466d4f5d349cc81e8b3f761d86e9856\\\" ##获得apk全路径 fileName=`basename ./app/build/outputs/apk/debug/*.apk` APK_PATH=\\\"./app/build/outputs/apk/debug/$fileName\\\" ##上传apk 获得返回报文 echo 'Uploading...' echo '✈ -------------------------------------------- ✈' RESPONSE=$(curl -F \\\"file=@${APK_PATH}\\\" \\\\ -F \\\"uKey=${USER_KEY}\\\" \\\\ -F \\\"_api_key=${API_KEY}\\\" \\\\ https://qiniu-storage.pgyer.com/apiv1/app/upload) ##显示apk信息 showApkInfo \\\"${RESPONSE}\\\" \"]},\"1324\":{\"c\":[\"Android相关\"]},\"1325\":{\"c\":[\"archive\"]},\"1326\":{\"h\":\"Android中通过外部程序启动App三种方式\",\"t\":[\"唤起三种方式：packagename , action, scheme ####1、通过包名唤醒\",\" String packageName=\\\"com.chaoliu.wakeapp\\\" Intent LaunchIntent = getPackageManager().getLaunchIntentForPackage(packageName); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); intent.setClassName(\\\"B应用包名\\\", \\\"B应用包名.Activity\\\"); startActivity(LaunchIntent); \",\"####2、通过自定义action\",\" String actionName=\\\"com.chaoliu.wakeapp.main\\\" Intent intent = new Intent(); intent.setAction(actionName); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(intent); < intent-filter> <action android:name=\\\"${actionName}\\\" /> <category android:name=\\\"android.intent.category.DEFAULT\\\"/> </intent-filter> \",\"####3、通过scheme\",\"Intent intent = new Intent(); intent.setData(Uri.parse(\\\"scheme://host/path?xx=xx\\\")); intent.setData(Uri.parse(\\\"scheme://ssp?xx=xx\\\")); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(intent); <intent-filter> <data android:scheme=\\\"${scheme}\\\" android:host=\\\"${host}\\\" android:path=\\\"${path}\\\" android:ssp=\\\"${ssp}\\\" /> <action android:name=\\\"android.intent.action.VIEW\\\" /> <category android:name=\\\"android.intent.category.DEFAULT\\\" /> <category android:name=\\\"android.intent.category.BROWSABLE\\\" /> </intent-filter> \",\"\\\"ssp\\\" 是 \\\"scheme-specific part\\\"的缩写，也就是说 URI 中除了 scheme 以外的所有剩下的内容。\",\"通过包名判断是否安装该app\",\" public static boolean isApkInstalled(Context context, String packageName) { if (TextUtils.isEmpty(packageName)) { return false; } try { ApplicationInfo info = context.getPackageManager().getApplicationInfo(packageName, PackageManager.GET_UNINSTALLED_PACKAGES); return true; } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); return false; } } \",\"跳转应用市场\",\" /** * 启动到应用商店app详情界面 * * @param appPkg 目标App的包名 * @param marketPkg 应用商店包名 */ public void launchAppDetail(String appPkg, String marketPkg) { try { if (TextUtils.isEmpty(appPkg)) return; Uri uri = Uri.parse(\\\"market://details?id=\\\" + appPkg); Intent intent = new Intent(Intent.ACTION_VIEW, uri); if (!TextUtils.isEmpty(marketPkg)) { intent.setPackage(marketPkg); } intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(intent); } catch (Exception e) { e.printStackTrace(); } } \",\"tip:切记：A应用拉起B应用的时候千万不要忘记添加：intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\"]},\"1327\":{\"c\":[\"Android相关\"]},\"1328\":{\"c\":[\"archive\"]},\"1329\":{\"h\":\"Android网络日志集成\",\"t\":[\"依赖\",\"//解决support库问题 android/support/design/widget/CoordinatorLayout configurations.all { resolutionStrategy { force 'com.android.support:support-v4:28.0.0' force 'com.android.support:design:28.0.0' } } dependencies { //网络日志打印 implementation \\\"com.squareup.okhttp3:logging-interceptor:3.10.0\\\" // https://github.com/jgilfelt/chuck debugImplementation (\\\"com.readystatesoftware.chuck:library:1.1.0\\\"){ exclude group: 'com.android.support' ,module: 'support-v4' } releaseImplementation \\\"com.readystatesoftware.chuck:library-no-op:1.1.0\\\" } \",\"使用\",\"//okhttp添加拦截器 //网络通知 okhttpBuilder.addInterceptor( new ChuckInterceptor( context1 ) ); //打印日志 okhttpBuilder.addInterceptor( getLogging() ); /** * 打印日志 * @return */ private HttpLoggingInterceptor getLogging(){ HttpLoggingInterceptor.Logger logger = message -> Platform.get().log(Platform.WARN, message, null); HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor( logger ); if(BuildConfig.LOG_DEBUG){ loggingInterceptor.setLevel( HttpLoggingInterceptor.Level.BODY ); }else { loggingInterceptor.setLevel( HttpLoggingInterceptor.Level.NONE ); } return loggingInterceptor; } \"]},\"1330\":{\"c\":[\"Android相关\"]},\"1331\":{\"c\":[\"archive\"]},\"1332\":{\"h\":\"Android设置公共请求头head-query-param\",\"t\":[\"原理：通过okhttp intercept\",\"/** * @author chentong * @date 2019-2-20 * 设置公共参数 * head params query */ public class HttpBaseParamsInterceptor implements Interceptor { private Map<String, String> queryParamsMap = new HashMap<>(); private Map<String, String> paramsMap = new HashMap<>(); private Map<String, String> headerParamsMap = new HashMap<>(); private List<String> headerLinesList = new ArrayList<>(); private static final String X_WWW_FORM_URLENCODED = \\\"x-www-form-urlencoded\\\"; private Builder builder; private UpdateHandler updateHandler; public HttpBaseParamsInterceptor() { } @Override public Response intercept(Chain chain) throws IOException { //每次获取公共数据 if (updateHandler != null) { builder = updateHandler.createNewBuilder(); reloadBuilder( builder ); } Request request = chain.request(); Request.Builder requestBuilder = request.newBuilder(); // 设置header Headers.Builder headerBuilder = request.headers().newBuilder(); if (headerParamsMap.size() > 0) { Iterator iterator = headerParamsMap.entrySet().iterator(); while (iterator.hasNext()) { Map.Entry entry = (Map.Entry) iterator.next(); headerBuilder.add( (String) entry.getKey(), (String) entry.getValue() ); } } if (headerLinesList.size() > 0) { for (String line : headerLinesList) { headerBuilder.add( line ); } } requestBuilder.headers( headerBuilder.build() ); // process queryParams inject whatever it's GET or POST if (queryParamsMap.size() > 0) { injectParamsIntoUrl( request, requestBuilder, queryParamsMap ); } // process header params end //设置param //请求体 可以为空 RequestBody requestBody = request.body(); boolean hasRequestBody = requestBody != null; String contentType = \\\"\\\"; if (hasRequestBody) { //contentType存在空 if (requestBody.contentType() != null) { contentType = requestBody.contentType().toString(); } } if (request.method().equals( \\\"POST\\\" ) && contentType.contains( X_WWW_FORM_URLENCODED )) { FormBody.Builder formBodyBuilder = new FormBody.Builder(); if (paramsMap.size() > 0) { Iterator iterator = paramsMap.entrySet().iterator(); while (iterator.hasNext()) { Map.Entry entry = (Map.Entry) iterator.next(); formBodyBuilder.add( (String) entry.getKey(), (String) entry.getValue() ); } } RequestBody formBody = formBodyBuilder.build(); String formBodyString = bodyToString( formBody ); String requestBodyString = bodyToString( requestBody ); String postBodyString = \\\"\\\"; if (!TextUtils.isEmpty( requestBodyString ) && !TextUtils.isEmpty( formBodyString )) { postBodyString = requestBodyString + \\\"&\\\" + formBodyString; } else if (!TextUtils.isEmpty( requestBodyString ) || TextUtils.isEmpty( formBodyString )) { postBodyString = requestBodyString; } else if (TextUtils.isEmpty( requestBodyString ) && !TextUtils.isEmpty( formBodyString )) { postBodyString = formBodyString; } else if (TextUtils.isEmpty( requestBodyString ) && TextUtils.isEmpty( formBodyString )) { postBodyString = \\\"\\\"; } requestBuilder.post( RequestBody.create( MediaType.parse( \\\"application/x-www-form-urlencoded;charset=UTF-8\\\" ), postBodyString ) ); } else { injectParamsIntoUrl( request, requestBuilder, paramsMap ); } request = requestBuilder.build(); return chain.proceed( request ); } // func to inject params into url private void injectParamsIntoUrl(Request request, Request.Builder requestBuilder, Map<String, String> paramsMap) { HttpUrl.Builder httpUrlBuilder = request.url().newBuilder(); if (paramsMap.size() > 0) { Iterator iterator = paramsMap.entrySet().iterator(); while (iterator.hasNext()) { Map.Entry entry = (Map.Entry) iterator.next(); httpUrlBuilder.addQueryParameter( (String) entry.getKey(), (String) entry.getValue() ); } } requestBuilder.url( httpUrlBuilder.build() ); } private String bodyToString(final RequestBody requestBody) { if (requestBody == null) return \\\"\\\"; try { Buffer buffer = new Buffer(); requestBody.writeTo( buffer ); return buffer.readUtf8(); } catch (Exception e) { return \\\"\\\"; } } /** * 设置刷新句柄 * @param updateHandler */ public void setUpdateHandler(UpdateHandler updateHandler) { this.updateHandler = updateHandler; } public interface UpdateHandler { Builder createNewBuilder(); } /** * 重新加载数据 * @param builder */ private void reloadBuilder(Builder builder) { queryParamsMap.clear(); paramsMap.clear(); headerParamsMap.clear(); headerLinesList.clear(); queryParamsMap.putAll( builder.queryParamsMap ); paramsMap.putAll( builder.paramsMap ); headerParamsMap.putAll( builder.headerParamsMap ); headerLinesList.addAll( builder.headerLinesList ); } /** * 数据要刷新 */ public static class Builder { private Map<String, String> queryParamsMap = new HashMap<>(); private Map<String, String> paramsMap = new HashMap<>(); private Map<String, String> headerParamsMap = new HashMap<>(); private List<String> headerLinesList = new ArrayList<>(); public Builder() { } public Builder addParam(String key, String value) { paramsMap.put( key, value ); return this; } public Builder addParamsMap(Map<String, String> paramsMap) { paramsMap.putAll( paramsMap ); return this; } public Builder addHeaderParam(String key, String value) { headerParamsMap.put( key, value ); return this; } public Builder addHeaderParamsMap(Map<String, String> headerParamsMap) { headerParamsMap.putAll( headerParamsMap ); return this; } public Builder addHeaderLine(String headerLine) { int index = headerLine.indexOf( \\\":\\\" ); if (index == -1) { throw new IllegalArgumentException( \\\"Unexpected header: \\\" + headerLine ); } headerLinesList.add( headerLine ); return this; } public Builder addHeaderLinesList(List<String> headerLinesList) { for (String headerLine : headerLinesList) { int index = headerLine.indexOf( \\\":\\\" ); if (index == -1) { throw new IllegalArgumentException( \\\"Unexpected header: \\\" + headerLine ); } headerLinesList.add( headerLine ); } return this; } public Builder addQueryParam(String key, String value) { queryParamsMap.put( key, value ); return this; } public Builder addQueryParamsMap(Map<String, String> queryParamsMap) { queryParamsMap.putAll( queryParamsMap ); return this; } public Builder build() { return this; } } } \",\"使用\",\" /** * 设置http公共参数 * head query param * @return */ private HttpBaseParamsInterceptor getBaseParams(){ HttpBaseParamsInterceptor interceptor = new HttpBaseParamsInterceptor(); interceptor.setUpdateHandler( () -> { //设置公共参数 String versionCode =AppUtlis.getVersionCode(MyApplication.getInstance() ).toString(); String userId = SharePreferenceUtill.getStringData(ContansUtils.USERID_KEY, \\\"\\\"); HttpBaseParamsInterceptor.Builder builder = new HttpBaseParamsInterceptor.Builder() .addParam( ContansUtils.USERID_KEY,userId ) .addParam(\\\"versionCode\\\",versionCode).build(); return builder; } ); return interceptor; } \"]},\"1333\":{\"c\":[\"Android相关\"]},\"1334\":{\"c\":[\"archive\"]},\"1335\":{\"h\":\"Apk上传fir-im平台\",\"t\":[\"#####亲测可用 脚本如下\",\"#!/bin/bash #author chentong 20190312 ##json解析函数 function jsonParse() { # $1 $2 json lable JSON_CONTENT=$1 KEY='\\\"'$2'\\\":' echo ${JSON_CONTENT} | awk -F ${KEY} '{print $2}' | awk -F '\\\"' '{print $2}' } ##replace函数 function TrimAnd(){ TEXT=$1 echo ${TEXT//'\\\\u0026'/'&'} } # Get API Token from http://fir.im/apps API_TOKEN=\\\"77ec123979f83f7caef71c4ca70abeeb\\\" fileName=`basename ./app/build/outputs/apk/debug/*.apk` apkPath=\\\"./app/build/outputs/apk/debug/$fileName\\\" # ios or android TYPE=\\\"android\\\" # App 的 bundleId BUNDLE_ID=\\\"你的AppId\\\" # Get upload_url credential=$(curl -X \\\"POST\\\" \\\"http://api.fir.im/apps\\\" \\\\ -H \\\"Content-Type: application/json\\\" \\\\ -d \\\"{\\\\\\\"type\\\\\\\":\\\\\\\"${TYPE}\\\\\\\", \\\\\\\"bundle_id\\\\\\\":\\\\\\\"${BUNDLE_ID}\\\\\\\", \\\\\\\"api_token\\\\\\\":\\\\\\\"${API_TOKEN}\\\\\\\"}\\\" \\\\ 2>/dev/null) SHORT_NAME=$(jsonParse \\\"${credential}\\\" \\\"short\\\") fir_id=$(jsonParse \\\"${credential}\\\" \\\"id\\\") binary_response=$(echo ${credential} | grep -o \\\"binary[^}]*\\\") KEY=$(jsonParse \\\"${binary_response}\\\" \\\"key\\\") TOKEN=$(jsonParse \\\"${binary_response}\\\" \\\"token\\\") UPLOAD_URL=$(jsonParse \\\"${binary_response}\\\" \\\"upload_url\\\") # Upload package echo 'Uploading...' echo '✈ -------------------------------------------- ✈' response=$(curl -F \\\"key=${KEY}\\\" \\\\ -F \\\"token=${TOKEN}\\\" \\\\ -F \\\"file=@${apkPath}\\\" \\\\ -F \\\"x:build=1\\\" \\\\ ${UPLOAD_URL} ) release_id=$(jsonParse \\\"${response}\\\" \\\"release_id\\\") download_url=$(jsonParse \\\"${response}\\\" \\\"download_url\\\") echo APP 名字: 你的APP echo APP 包名: \\\"${BUNDLE_ID}\\\" echo APP 类型: \\\"${TYPE}\\\" echo 应用 ID: \\\"${fir_id}\\\" echo 上传apk路径: \\\"${apkPath}\\\" echo 通用二维码地址: https://fir.im/\\\"${SHORT_NAME}\\\" echo APP二维码地址: https://fir.im/\\\"${SHORT_NAME}\\\"?release_id=\\\"${release_id}\\\" echo 下载地址如下: echo $(TrimAnd \\\"${download_url}\\\") \"]},\"1336\":{\"c\":[\"Android相关\"]},\"1337\":{\"c\":[\"archive\"]},\"1338\":{\"h\":\"App-logo尺寸及应用市场logo和截图\",\"t\":[\"####1、logo尺寸\",\"DEBSITY\",\"SIZE\",\"RATIO\",\"SCREEN\",\"MARGIN\",\"CONTENT\",\"Padding\",\"XXXHDPI\",\"192*192\",\"4\",\"640DPI\",\"12-16\",\"170*170\",\"16\",\"XXHDPI\",\"144*144\",\"3\",\"480DPI\",\"8-12\",\"128*128\",\"8\",\"XHDPI\",\"96*96\",\"2\",\"320DPI\",\"6-8\",\"88*88\",\"4\",\"HDPI\",\"72*72\",\"1.5\",\"240DPI\",\"4-6\",\"68*68\",\"2\",\"MDPI\",\"48*48\",\"1\",\"160DPI\",\"3-4\",\"46*46\",\"1\",\"LDPI\",\"36*36\",\"0.75\",\"120DPI\",\"2-3\",\"34*34\",\"1\",\"N/A\",\"512*512\",\"Google play\",\"NA\",\"NA\",\"As Required\",\"建议在设计过程中，在四周空出几个像素点使得设计的图标与其他图标在视觉上一致 eg:96 x 96 px 图标可以画图区域大小可以设为 88 x 88 px， 四周留出4个像素用于填充（无底色）。\",\"安卓建议： 提供MDPI~XXXHDPI, 图标有正常和圆角两种\",\"####2、应用市场截图尺寸\",\"应用市场logo\",\"应用市场\",\"图片尺寸\",\"体积\",\"格式\",\"特别建议\",\"应用宝\",\"16*16\",\"20k以内\",\"Png\",\"应用宝\",\"512*512\",\"200K以内\",\"Png\",\"直角图标\",\"华为\",\"216*216\",\"Png\",\"正方形图片 圆角32px\",\"VIVO\",\"512*512\",\"小于50K\",\"PNG\",\"正方形图片，直角图标\",\"阿里分发平台\",\"512*512\",\"Png\",\"背景透明带圆角\",\"小米\",\"216*216\",\"Png\",\"正方形图片\",\"应用市场截图\",\"市场\",\"截图要求\",\"特殊要求\",\"应用宝\",\"480*800 4张 1M PNG\",\"阿里分发平台\",\"480*800 4张 1M PNG\",\"不可上传ios截图\",\"百度\",\"480*800 4张 1M PNG\",\"通知栏不含有与app自身无关的应用图标\",\"华为\",\"450*800 4张 1M PNG\",\"小米\",\"720*1280 4张 1M PNG\",\"若截图含有手机外观，必须使用小米手机外观素材\",\"OPPO\",\"1080*1920 4张 1M PNG\",\"去除顶部通知栏，不得使用其他品牌手机作为边框或宣传图\",\"VIVO\",\"480*800 4张 1M PNG\",\"######应用截图要求\",\"体积 小于1M 4 张 PNG 尺寸 480*800 450*800 720*1280 1080*1920 特别要求： 1、无ios截图 2、无通知栏 3、无手机外观 \"]},\"1339\":{\"c\":[\"Android相关\"]},\"1340\":{\"c\":[\"archive\"]},\"1341\":{\"h\":\"Charles-抓包--安卓模拟器\",\"t\":[\"#####Charles 抓包 在控制台下，前往以下目录 ../Android/sdk/tools，输入以下命令：\",\"emulator -avd <your emulator name> -http-proxy http://<your_proxy>\",\"eg：\",\"emulator -avd Nexus_5X -http-proxy http://172.20.223.78:8888 \",\"tips: 1、当前网络wifi地址 172.29.223.78 2、Nexus_5X 模拟器名字 3、执行文件目录android/sdk/tools/\",\"如果觉得实用，给点赞👍👍👍\"]},\"1342\":{\"c\":[\"Android相关\"]},\"1343\":{\"c\":[\"archive\"]},\"1344\":{\"h\":\"ConstraintLayout实战\"},\"1345\":{\"h\":\"1、自动添加约束(不推荐)\",\"t\":[\"Autoconnect 针对单个控件 \",\"Inference 针对整个布局 \",\"点击一下即可，推荐Inference\"]},\"1346\":{\"h\":\"二、手工写约束\",\"t\":[\"1、相对位置 \",\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?> <android.support.constraint.ConstraintLayout xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\" xmlns:app=\\\"http://schemas.android.com/apk/res-auto\\\" android:layout_width=\\\"match_parent\\\" android:layout_height=\\\"match_parent\\\" android:orientation=\\\"vertical\\\"> <ImageView android:id=\\\"@+id/logoIv\\\" android:layout_width=\\\"140dp\\\" android:layout_height=\\\"86dp\\\" android:layout_marginStart=\\\"12dp\\\" android:layout_marginLeft=\\\"12dp\\\" android:layout_marginTop=\\\"12dp\\\" app:layout_constraintLeft_toLeftOf=\\\"parent\\\" app:layout_constraintTop_toTopOf=\\\"parent\\\" app:srcCompat=\\\"@color/colorAccent\\\" /> <TextView android:id=\\\"@+id/infoTv\\\" android:layout_width=\\\"0dp\\\" android:layout_height=\\\"wrap_content\\\" android:layout_marginLeft=\\\"8dp\\\" android:layout_marginTop=\\\"12dp\\\" android:layout_marginRight=\\\"12dp\\\" android:text=\\\"马云:一年交税170多亿马云:一年交税170多亿马云:一年交税170多亿\\\" android:textColor=\\\"#000000\\\" android:textSize=\\\"16dp\\\" app:layout_constraintLeft_toRightOf=\\\"@id/logoIv\\\" app:layout_constraintRight_toRightOf=\\\"parent\\\" app:layout_constraintTop_toTopOf=\\\"parent\\\" /> <TextView android:layout_width=\\\"wrap_content\\\" android:layout_height=\\\"wrap_content\\\" android:layout_marginStart=\\\"8dp\\\" android:layout_marginLeft=\\\"8dp\\\" android:text=\\\"8分钟前\\\" android:textColor=\\\"#333\\\" android:textSize=\\\"12dp\\\" app:layout_constraintBottom_toBottomOf=\\\"@id/logoIv\\\" app:layout_constraintLeft_toRightOf=\\\"@id/logoIv\\\" app:layout_constraintTop_toBottomOf=\\\"@id/infoTv\\\" /> </android.support.constraint.ConstraintLayout> \",\"手敲一遍，感受一下。 总结一句口诀 先写margin , 后写constraint, to是相对控件起始位置 eg:\",\" //左边距是8dp android:layout_marginLeft=\\\"8dp\\\" //左边距在logoIv右侧开始 app:layout_constraintLeft_toRightOf=\\\"@id/logoIv\\\" \",\"2 、match失效 用“0dp”代替 ConstraintLayout中0代表：MATCH_CONSTRAINT\",\" <android.support.constraint.ConstraintLayout android:layout_width=\\\"match_parent\\\" android:layout_height=\\\"wrap_content\\\" android:layout_marginTop=\\\"12dp\\\" android:background=\\\"@color/colorPrimary\\\"> <Button android:id=\\\"@+id/btn01\\\" android:layout_width=\\\"100dp\\\" android:layout_height=\\\"40dp\\\" /> <Button android:id=\\\"@+id/btn02\\\" android:layout_width=\\\"0dp\\\" android:layout_height=\\\"40dp\\\" android:layout_marginStart=\\\"12dp\\\" android:layout_marginLeft=\\\"12dp\\\" app:layout_constraintLeft_toRightOf=\\\"@id/btn01\\\" app:layout_constraintRight_toRightOf=\\\"parent\\\"/> </android.support.constraint.ConstraintLayout> \",\"3、设置宽高比 第一种写法\",\" <android.support.constraint.ConstraintLayout android:id=\\\"@+id/layout0\\\" android:layout_width=\\\"match_parent\\\" android:layout_height=\\\"wrap_content\\\"> <TextView android:layout_width=\\\"match_parent\\\" android:layout_height=\\\"0dp\\\" android:background=\\\"#765\\\" android:gravity=\\\"center\\\" android:text=\\\"Banner\\\" app:layout_constraintDimensionRatio=\\\"H,16:6\\\" /> </android.support.constraint.ConstraintLayout> \",\"第二种写法\",\" <android.support.constraint.ConstraintLayout android:layout_marginTop=\\\"12dp\\\" app:layout_constraintTop_toBottomOf=\\\"@id/layout2\\\" android:id=\\\"@+id/layout3\\\" android:layout_width=\\\"match_parent\\\" android:layout_height=\\\"wrap_content\\\"> <TextView android:layout_width=\\\"0dp\\\" android:layout_height=\\\"0dp\\\" android:background=\\\"#765\\\" android:gravity=\\\"center\\\" android:text=\\\"Banner\\\" app:layout_constraintTop_toTopOf=\\\"parent\\\" app:layout_constraintLeft_toLeftOf=\\\"parent\\\" app:layout_constraintRight_toRightOf=\\\"parent\\\" app:layout_constraintDimensionRatio=\\\"H,5:1\\\" /> </android.support.constraint.ConstraintLayout> \",\"//宽高比设置 app:layout_constraintDimensionRatio=\\\"W,16:6\\\" app:layout_constraintDimensionRatio=\\\"H,16:6\\\" \",\"4、设置权重 第一种写法\",\" <android.support.constraint.ConstraintLayout android:layout_width=\\\"match_parent\\\" android:layout_height=\\\"wrap_content\\\" app:layout_constraintBottom_toBottomOf=\\\"parent\\\" app:layout_constraintBottom_toTopOf=\\\"@id/layout3\\\"> <TextView android:id=\\\"@+id/tab01\\\" android:layout_width=\\\"0dp\\\" android:layout_height=\\\"30dp\\\" android:background=\\\"#f67\\\" android:gravity=\\\"center\\\" android:text=\\\"Tab1\\\" app:layout_constraintHorizontal_weight=\\\"2\\\" app:layout_constraintLeft_toLeftOf=\\\"parent\\\" app:layout_constraintRight_toLeftOf=\\\"@id/tab02\\\" /> <TextView android:id=\\\"@+id/tab02\\\" android:layout_width=\\\"0dp\\\" android:layout_height=\\\"30dp\\\" android:background=\\\"#A67\\\" android:gravity=\\\"center\\\" android:text=\\\"Tab2\\\" app:layout_constraintHorizontal_weight=\\\"1\\\" app:layout_constraintLeft_toRightOf=\\\"@id/tab01\\\" app:layout_constraintRight_toLeftOf=\\\"@id/tab03\\\" /> <TextView android:id=\\\"@+id/tab03\\\" android:layout_width=\\\"0dp\\\" android:layout_height=\\\"30dp\\\" android:background=\\\"#767\\\" android:gravity=\\\"center\\\" android:text=\\\"Tab3\\\" app:layout_constraintHorizontal_weight=\\\"1\\\" app:layout_constraintLeft_toRightOf=\\\"@id/tab02\\\" app:layout_constraintRight_toRightOf=\\\"parent\\\" /> </android.support.constraint.ConstraintLayout> \",\"第二种写法 \",\" <android.support.constraint.ConstraintLayout android:layout_width=\\\"match_parent\\\" android:layout_height=\\\"wrap_content\\\" app:layout_constraintBottom_toBottomOf=\\\"parent\\\"> <TextView android:id=\\\"@+id/tab1\\\" android:layout_width=\\\"0dp\\\" android:layout_height=\\\"30dp\\\" android:background=\\\"#f67\\\" android:gravity=\\\"center\\\" android:text=\\\"Tab1\\\" app:layout_constraintLeft_toLeftOf=\\\"parent\\\" app:layout_constraintRight_toLeftOf=\\\"@id/tab2\\\" /> <TextView android:id=\\\"@+id/tab2\\\" android:layout_width=\\\"0dp\\\" android:layout_height=\\\"30dp\\\" android:background=\\\"#A67\\\" android:gravity=\\\"center\\\" android:text=\\\"Tab2\\\" app:layout_constraintLeft_toRightOf=\\\"@id/tab1\\\" app:layout_constraintRight_toLeftOf=\\\"@id/tab3\\\" /> <TextView android:id=\\\"@+id/tab3\\\" android:layout_width=\\\"0dp\\\" android:layout_height=\\\"30dp\\\" android:gravity=\\\"center\\\" android:background=\\\"#767\\\" android:text=\\\"Tab3\\\" app:layout_constraintLeft_toRightOf=\\\"@id/tab2\\\" app:layout_constraintRight_toRightOf=\\\"parent\\\" /> </android.support.constraint.ConstraintLayout> \",\"app:layout_constraintHorizontal_weight app:layout_constraintVertical_weight \",\"app:layout_constraintHorizontal_chainStyle=\\\"spread\\\" //配合宽度非0dp \",\"5、浮动按钮\",\" <TextView android:layout_width=\\\"60dp\\\" android:layout_height=\\\"60dp\\\" android:background=\\\"#612\\\" app:layout_constraintHorizontal_bias=\\\"0.9\\\" app:layout_constraintVertical_bias=\\\"0.9\\\" app:layout_constraintBottom_toBottomOf=\\\"parent\\\" app:layout_constraintLeft_toLeftOf=\\\"parent\\\" app:layout_constraintRight_toRightOf=\\\"parent\\\" app:layout_constraintTop_toTopOf=\\\"parent\\\" /> \",\"//两侧间隙比例 layout_constraintHorizontal_bias layout_constraintVertical_bias \",\"Guideline\",\"####演示代码 https://github.com/yinlingchaoliu/ConstraintLayoutDemo\",\"demo效果\",\"####参考 http://blog.csdn.net/lmj623565791/article/details/78011599 本文出自张鸿洋的博客\",\"Android新特性介绍，ConstraintLayout完全解析\"]},\"1347\":{\"c\":[\"Android相关\"]},\"1348\":{\"c\":[\"archive\"]},\"1349\":{\"h\":\"EditText输入金额类型\",\"t\":[\"别废话，优雅解决\",\"public class EditTextUtils { /** * 设置edittext只能输入小数点后两位 */ public static void afterDotTwo(final EditText editText) { editText.addTextChangedListener(new TextWatcher() { @Override public void onTextChanged(CharSequence s, int start, int before, int count) { // 限制最多能输入9位整数 if (s.toString().contains(\\\".\\\")) { if (s.toString().indexOf(\\\".\\\") > 9) { s = s.toString().subSequence(0,9) + s.toString().substring(s.toString().indexOf(\\\".\\\")); editText.setText(s); editText.setSelection(9); } }else { if (s.toString().length() > 9){ s = s.toString().subSequence(0,9); editText.setText(s); editText.setSelection(9); } } // 判断小数点后只能输入两位 if (s.toString().contains(\\\".\\\")) { if (s.length() - 1 - s.toString().indexOf(\\\".\\\") > 2) { s = s.toString().subSequence(0, s.toString().indexOf(\\\".\\\") + 3); editText.setText(s); editText.setSelection(s.length()); } } //如果第一个数字为0，第二个不为点，就不允许输入 if (s.toString().startsWith(\\\"0\\\") && s.toString().trim().length() > 1) { if (!s.toString().substring(1, 2).equals(\\\".\\\")) { editText.setText(s.subSequence(0, 1)); editText.setSelection(1); return; } } } @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { } @Override public void afterTextChanged(Editable s) { if (editText.getText().toString().trim() != null && !editText.getText().toString().trim().equals(\\\"\\\")) { if (editText.getText().toString().trim().substring(0, 1).equals(\\\".\\\")) { editText.setText(\\\"0\\\" + editText.getText().toString().trim()); editText.setSelection(1); } } } }); } } \"]},\"1350\":{\"c\":[\"Android相关\"]},\"1351\":{\"c\":[\"archive\"]},\"1352\":{\"h\":\"Flutter-md5加密\",\"t\":[\"import 'dart:convert'; import 'package:convert/convert.dart'; import 'package:crypto/crypto.dart'; // md5 加密 String generateMd5(String data) { var content = new Utf8Encoder().convert(data); var digest = md5.convert(content); // 这里其实就是 digest.toString() return hex.encode(digest.bytes); } \"]},\"1353\":{\"c\":[\"Android相关\"]},\"1354\":{\"c\":[\"archive\"]},\"1355\":{\"h\":\"Flutter-沉侵式与ListView冲突\",\"t\":[\"ListView 默认会与沉侵式冲突\"]},\"1356\":{\"c\":[\"Android相关\"]},\"1357\":{\"c\":[\"archive\"]},\"1358\":{\"h\":\"H5接入支付宝支付，android适配url拦截alipays---platformapi\",\"t\":[\"####1、问题背景： 问题：商城H5接入支付宝支付，点击白屏 解决方案：需要移动端配合拦截指定url(alipays://platformapi)，并唤起支付宝\",\"####2、代码实现 webview拦截\",\" //覆盖WebView默认通过第三方或者是系统浏览器打开网页的行为，使得网页可以在WebView中打开 webview.setWebViewClient( new WebViewClient(){ @Override public boolean shouldOverrideUrlLoading(WebView webView, String url) { //调用 if (AlipayUtil.isAlipay( url )){ AlipayUtil.goAlipays( getActivity(), url ); return true; } return super.shouldOverrideUrlLoading( webView, url ); } }); \",\"封装工具\",\"@Keep public class AlipayUtil { //拦截特定支付标识 public static boolean isAlipay(String url) { if (StringUtils.startsWith( url, \\\"alipays:\\\" ) || StringUtils.startsWith( url, \\\"alipay\\\" )) { return true; } return false; } public static void goAlipays(Activity activity, String url) { //判断是否安装支付宝 if (checkAliPayInstalled( activity )){ goUrl( activity, url ); }else { //安装下载支付宝 updateAlipayDialog(activity); } } //直接隐式调用 private static void goUrl(Activity activity, String url){ Intent intent = new Intent( Intent.ACTION_VIEW, Uri.parse( url ) ); activity.startActivity( intent ); } //判断是否安装支付宝app private static boolean checkAliPayInstalled(Context context) { Uri uri = Uri.parse( \\\"alipays://platformapi/startApp\\\" ); Intent intent = new Intent( Intent.ACTION_VIEW, uri ); ComponentName componentName = intent.resolveActivity( context.getPackageManager() ); return componentName != null; } private static volatile CustomDialog updateDialog = null; //安装alipay支付宝 弹框和文案根据实际情况定制 private static synchronized void updateAlipayDialog(Context context) { updateDialog = new CustomDialog.Builder( context ).setMessage( \\\"未检测到支付宝客户端，请安装后重试\\\" ) .setNegativeButton( \\\"取消\\\", (dialogInterface, i) -> { updateDialog.dismiss(); updateDialog = null; } ).setPositiveButton( \\\"立即安装\\\", (dialogInterface, i) -> { Uri alipayUrl = Uri.parse(\\\"https://d.alipay.com\\\"); context.startActivity(new Intent(Intent.ACTION_VIEW, alipayUrl)); updateDialog.dismiss(); updateDialog = null; } ).build(); if (updateDialog != null) { updateDialog.show(); } } } \"]},\"1359\":{\"c\":[\"Android相关\"]},\"1360\":{\"c\":[\"archive\"]},\"1361\":{\"h\":\"Keep混淆\",\"t\":[\"keep注解 支持变量、方法、构造方法、类、注解\",\"@Retention(RetentionPolicy.CLASS) @Target({ElementType.PACKAGE, ElementType.TYPE, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.FIELD}) public @interface Keep { } \",\"混淆文件proguard-rules.pro\",\"# Understand the @Keep support annotation. -dontwarn android.support.** -keep class android.support.annotation.Keep -keep @android.support.annotation.Keep class * {*;} -keepclasseswithmembers class * { @android.support.annotation.Keep <methods>; } -keepclasseswithmembers class * { @android.support.annotation.Keep <fields>; } -keepclasseswithmembers class * { @android.support.annotation.Keep <init>(...); } \",\"android代码，哪些类不需要混淆，就@Keep即可\"]},\"1362\":{\"c\":[\"Android相关\"]},\"1363\":{\"c\":[\"archive\"]},\"1364\":{\"h\":\"RxTextWidget用法\",\"t\":[\"RxTextWidget用法\",\"一组控件数据\",\" textViewList.add( occupationTv ); textViewList.add( regionTv ); textViewList.add( workUnitEt ); textViewList.add( detailedAddressEt ); RxTextWidget.ObserveTv( textViewList, enable -> { nextBtn.setEnabled( enable ); } ); \",\"单个控件\",\" RxTextWidget.ObserveTv(smsCodeEt, enable -> { nextBtn.setEnabled(enable); }); \",\"实现代码\",\"/** * * 基于RxAndroid的库 * @author chentong * 监测多个edittextview * */ public class RxTextWidget { private static final BehaviorSubject<String> editTextOnTextChanged(final TextView editText) { final BehaviorSubject<String> subject = BehaviorSubject.create(); editText.addTextChangedListener(new TextWatcher() { @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { } @Override public void onTextChanged(CharSequence s, int start, int before, int count) { subject.onNext(s.toString()); } @Override public void afterTextChanged(Editable s) { } }); // 初始化数据 subject.onNext(editText.getText().toString()); return subject; } @SuppressLint(\\\"CheckResult\\\") private void Observon(BehaviorSubject<String> subject, Consumer<String> action) { subject.observeOn(AndroidSchedulers.mainThread()).subscribe(action); } private static List<BehaviorSubject<String>> getObsList(List<TextView> list) { List<BehaviorSubject<String>> obsList = new ArrayList<BehaviorSubject<String>>(); for (TextView et : list) { TextView edittext = (TextView) et; obsList.add(editTextOnTextChanged(edittext)); } return obsList; } @SuppressLint(\\\"CheckResult\\\") private static void Observe(List<BehaviorSubject<String>> obsList, Consumer<Boolean> action) { Observable.combineLatest(obsList, new Function<Object[],Boolean>() { @Override public Boolean apply(Object[] objects) throws Exception { for (Object obj : objects) { String s = (String) obj; if (TextUtils.isEmpty(s)) { return false; } } return true; } }).observeOn(AndroidSchedulers.mainThread()).subscribe(action); } /** * 监测edittext list * @param list * @param action */ public static void ObserveTv(List<TextView> list, Consumer<Boolean> action){ List<BehaviorSubject<String>> behaviorSubjectList = RxTextWidget.getObsList(list); RxTextWidget.Observe(behaviorSubjectList, action); } public static void ObserveTv(TextView textView, Consumer<Boolean> action){ List<TextView> editTextList = new ArrayList<>( ); editTextList.add( textView ); ObserveTv(editTextList , action); } } \"]},\"1365\":{\"c\":[\"Android相关\"]},\"1366\":{\"c\":[\"archive\"]},\"1367\":{\"h\":\"UI颜色透明度（不透明度）计算-+表格自动生成\",\"t\":[\"####1、不透明度\",\"不透明度\",\"16进制表示\",\"0%\",\"00\",\"1%\",\"03\",\"2%\",\"05\",\"3%\",\"08\",\"4%\",\"0A\",\"5%\",\"0D\",\"6%\",\"0F\",\"7%\",\"12\",\"8%\",\"14\",\"9%\",\"17\",\"10%\",\"1A\",\"11%\",\"1C\",\"12%\",\"1F\",\"13%\",\"21\",\"14%\",\"24\",\"15%\",\"26\",\"16%\",\"29\",\"17%\",\"2B\",\"18%\",\"2E\",\"19%\",\"30\",\"20%\",\"33\",\"21%\",\"36\",\"22%\",\"38\",\"23%\",\"3B\",\"24%\",\"3D\",\"25%\",\"40\",\"26%\",\"42\",\"27%\",\"45\",\"28%\",\"47\",\"29%\",\"4A\",\"30%\",\"4D\",\"31%\",\"4F\",\"32%\",\"52\",\"33%\",\"54\",\"34%\",\"57\",\"35%\",\"59\",\"36%\",\"5C\",\"37%\",\"5E\",\"38%\",\"61\",\"39%\",\"63\",\"40%\",\"66\",\"41%\",\"69\",\"42%\",\"6B\",\"43%\",\"6E\",\"44%\",\"70\",\"45%\",\"73\",\"46%\",\"75\",\"47%\",\"78\",\"48%\",\"7A\",\"49%\",\"7D\",\"50%\",\"80\",\"51%\",\"82\",\"52%\",\"85\",\"53%\",\"87\",\"54%\",\"8A\",\"55%\",\"8C\",\"56%\",\"8F\",\"57%\",\"91\",\"58%\",\"94\",\"59%\",\"96\",\"60%\",\"99\",\"61%\",\"9C\",\"62%\",\"9E\",\"63%\",\"A1\",\"64%\",\"A3\",\"65%\",\"A6\",\"66%\",\"A8\",\"67%\",\"AB\",\"68%\",\"AD\",\"69%\",\"B0\",\"70%\",\"B3\",\"71%\",\"B5\",\"72%\",\"B8\",\"73%\",\"BA\",\"74%\",\"BD\",\"75%\",\"BF\",\"76%\",\"C2\",\"77%\",\"C4\",\"78%\",\"C7\",\"79%\",\"C9\",\"80%\",\"CC\",\"81%\",\"CF\",\"82%\",\"D1\",\"83%\",\"D4\",\"84%\",\"D6\",\"85%\",\"D9\",\"86%\",\"DB\",\"87%\",\"DE\",\"88%\",\"E0\",\"89%\",\"E3\",\"90%\",\"E6\",\"91%\",\"E8\",\"92%\",\"EB\",\"93%\",\"ED\",\"94%\",\"F0\",\"95%\",\"F2\",\"96%\",\"F5\",\"97%\",\"F7\",\"98%\",\"FA\",\"99%\",\"FC\",\"100%\",\"FF\"]},\"1368\":{\"h\":\"2、如何制表\",\"t\":[\"######1、添加表头\",\"| 不透明度 | 16进制表示 | | --- | --- | \",\"######2、添加表内容\",\"打开java网页运行网站 http://www.dooccn.com/java/\",\"将自动生成代码拷贝指定位置并运行 \",\"自动生成代码\",\"public class file{ public static void main(String[] args) { for (int i = 0; i <= 100; i++) { float temp = 255 * i * 1.0f / 100f; int alpha = Math.round(temp); String hexStr = Integer.toHexString(alpha); if (hexStr.length() < 2){ hexStr = \\\"0\\\" + hexStr; } System.out.println(\\\"|\\\"+ i + \\\"% | \\\" + hexStr.toUpperCase() + \\\"|\\\"); } } } \",\"将输出结果和表头粘在一起 完成\\n\"]},\"1369\":{\"c\":[\"Android相关\"]},\"1370\":{\"c\":[\"archive\"]},\"1371\":{\"h\":\"aapt打印apk信息-配置安卓环境变量\",\"t\":[\"打印apk信息\",\"aapt dump badging app-debug.apk \",\"配置安卓环境变量\",\"export ANDROID_HOME=/Users/chentong/Android/sdk export ANDROID_NDK=$ANDROID_HOME/ndk-bundle export ANDROID_TOOLS=$ANDROID_HOME/tools export ANDROID_PLATFORM_TOOLS=$ANDROID_HOME/platform-tools export ANDROID_BUILD_TOOLS=$ANDROID_HOME/build-tools/26.0.2 export PATH=$PATH:$ANDROID_HOME:$ANDROID_TOOLS:$ANDROID_PLATFORM_TOOLS:$ANDROID_NDK:$ANDROID_BUILD_TOOLS \",\"环境变量生效\",\"source .bash_profile \"]},\"1372\":{\"c\":[\"Android相关\"]},\"1373\":{\"c\":[\"archive\"]},\"1374\":{\"h\":\"aop-singleClick-双击去重\",\"t\":[\"####使用方法 引用依赖\",\"apply plugin: 'android-aspectjx' aspectjx { enabled true } classpath 'com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.4' \",\"使用范例\",\"//从此就有去重功能 @ SingleClick void testClick(){ } \",\"####代码示例\",\"SingleClick注解\",\"/** * 防止View被连续点击 */ @Retention(RetentionPolicy.CLASS) @Target(ElementType.METHOD) public @interface SingleClick { } \",\"SingleClickAspect\",\"/** * 防止View被连续点击,间隔时间600ms * * @author chentong * @date 18/3/29 */ @Aspect public class SingleClickAspect { private static long lastClickTime; @Pointcut(\\\"execution(@com.xxx.app.aop.annotation.aspect.SingleClick * *(..))\\\") //方法切入点 public void methodAnnotated() { } @Around(\\\"methodAnnotated()\\\")//在连接点进行方法替换 public void aroundJoinPoint(ProceedingJoinPoint joinPoint) throws Throwable { if (!isFastDoubleClick()) { joinPoint.proceed();//执行原方法 } } public boolean isFastDoubleClick() { long time = System.currentTimeMillis(); long timeD = time - lastClickTime; if (0 < timeD && timeD < 600) { return true; } lastClickTime = time; return false; } } \"]},\"1375\":{\"c\":[\"Android相关\"]},\"1376\":{\"c\":[\"archive\"]},\"1377\":{\"h\":\"app请求公共参数\",\"t\":[\"平台标识 （权限控制）\",\"说明\",\"platform\",\"平台来源 (数据来源 某app)\",\"downloadChannel\",\"注册渠道（vivo appstore hawei,yingyongbao）\",\"versionName\",\"版本名（识别访问app，接口版本）\",\"token\",\"用户访问令牌\",\"设备信息（信息存储）\",\"jpushToken\",\"极光推送唯一标识\",\"deviceId\",\"手机唯一标识(不准确，非必传)\",\"deviceType\",\"设备类型 android/ios\",\"osVersion\",\"手机系统版本号\",\"osBranch\",\"iphone7 iphone8 华为，小米\",\"androidId\",\"安卓专属，ios传空字符串\"]},\"1378\":{\"c\":[\"Android相关\"]},\"1379\":{\"c\":[\"archive\"]},\"1380\":{\"h\":\"charels-https抓包\",\"t\":[\"charels Mac https://www.cnblogs.com/chenlogin/p/5849471.html\",\"fidder\\nhttps://www.cnblogs.com/aqxss/p/7480014.html\"]},\"1381\":{\"c\":[\"Android相关\"]},\"1382\":{\"c\":[\"archive\"]},\"1383\":{\"h\":\"flutter-SmartRefreshBloc页面快速开发模板，支持列表，支持stateful\",\"t\":[\"项目地址：https://github.com/yinlingchaoliu/SmartRefreshBloc\",\"#####编写项目的思路 flutter处处体现widget，我们开发过程中，核心放在的是业务层面逻辑，减少不必要的widget编写，减少不必要重复劳动，减少不必要代码层级，作为提高效率的切入点\",\"解决问题方式\",\"1、用View与Logic解耦方式，增加代码清晰度 2、用模板的方式，给提供统一开发规范方案（普通页面和列表页面） 3、用快捷键方式，一键式快速开发 \",\"#####1、先实现View与logic解耦\",\"import 'package:flutter/material.dart'; /// Created by chentong /// /// 相当于MVP /// class BlocProvider<T extends BlocBase> extends StatefulWidget { BlocProvider({ Key key, @required this.child, //View @required this.bloc, //logic }) : super(key: key); final T bloc; final Widget child; @override _BlocProviderState<T> createState() => _BlocProviderState<T>(); ///核心代码 static T of<T extends BlocBase>(BuildContext context) { final type = _typeOf<BlocProvider<T>>(); BlocProvider<T> provider = context.ancestorWidgetOfExactType(type); return provider.bloc; } static Type _typeOf<T>() => T; } class _BlocProviderState<T> extends State<BlocProvider<BlocBase>> { @override void initState() { super.initState(); widget.bloc.initState(); } @override Widget build(BuildContext context) { return widget.child; } @override void dispose() { widget.bloc.dispose(); super.dispose(); } } abstract class BlocBase { void initState(); void dispose(); } \",\"这个是核心模板，可以解耦当前flutter页面中Widget与业务逻辑混合在一起的问题。\",\"现在开发一个页面范例，将逻辑层迁移到DefaultBloc当中，而DefaultPage 专注于写widget，减少不必要的耦合。\",\"import 'package:flutter/cupertino.dart'; import 'package:flutter/material.dart'; import 'base_bloc.dart'; ///@author: chentong ///2019-4-9 ///视图层 class DefaultPage extends StatefulWidget { ///路由跳转 static void pushDefaultPage(BuildContext context) { Navigator.push( context, new CupertinoPageRoute<void>( builder: (ctx) => new BlocProvider<DefaultBloc>( child: new DefaultPage(), bloc: new DefaultBloc(), ))); } ///获得当前页面实例 static StatefulWidget newInstance() { return new BlocProvider<DefaultBloc>( child: new DefaultPage(), bloc: new DefaultBloc(), ); } @override _DefaultPageState createState() => new _DefaultPageState(); } /// /// 页面实现 /// class _DefaultPageState extends State<DefaultPage> { @override void initState() { super.initState(); } @override Widget build(BuildContext context) { final DefaultBloc bloc = BlocProvider.of<DefaultBloc>(context); return new Scaffold( appBar: new AppBar( title: new Text('demo'), centerTitle: true, ), ); } @override void dispose() { super.dispose(); } } /// ///逻辑层 ///todo:此处逻辑建议迁移出去 分离开解耦 /// class DefaultBloc extends BlocBase { @override void initState() {} @override void dispose() {} } \",\"####2、增加高频适配模板\",\"因为listview列表在APP中是高频使用的存在，基于pull_to_refresh编写列表页面，便于快速开发\",\"import 'package:flutter/cupertino.dart'; import 'package:flutter/material.dart'; import 'package:flutter/scheduler.dart'; import 'package:pull_to_refresh/pull_to_refresh.dart'; import 'base_bloc.dart'; /// ///list列表 ///author:chentong /// abstract class SmartRefreshBloc extends PullToRefreshBloc { RefreshController refreshController; ScrollController scrollController; ///初始化 void initState() { scrollController = new ScrollController(); refreshController = new RefreshController(); SchedulerBinding.instance.addPostFrameCallback((_) { refreshController.requestRefresh(true); }); } void scrollTop() { scrollController.animateTo(0.0, duration: new Duration(microseconds: 1000), curve: ElasticInCurve()); } void onRefreshCallBack(bool up) { if (up) { onRefresh(); } else { onLoadMore(); } } ///默认方法 void onOffsetCallback(bool isUp, double offset) { // if you want change some widgets state ,you should rewrite the callback if (isUp) { } else {} } ///请求 void refreshRequest({bool up = true}) { refreshController.requestRefresh(up); } ///完成 void refreshCompleted() { refreshController.sendBack(true, RefreshStatus.completed); } ///空闲 void refreshIdle() { refreshController.sendBack(false, RefreshStatus.idle); } ///失败 void refreshFailed() { refreshController.sendBack(false, RefreshStatus.failed); } ///自定义头部 Widget headerCreate(BuildContext context, RefreshStatus mode) { return new ClassicIndicator(mode: mode); } ///自定义脚部 Widget footerCreate(BuildContext context, RefreshStatus mode) { return new ClassicIndicator(mode: mode); } @override void dispose() {} } ///下拉刷新Bloc abstract class PullToRefreshBloc extends BlocBase { ///加载数据 Future getData({String labelId, int page}); ///刷新 Future onRefresh({String labelId}); ///更多 Future onLoadMore({String labelId, int page}); } \",\"####3、快捷键一键式开发 导入livesettings.jar 地址：https://github.com/yinlingchaoliu/SmartRefreshBloc/blob/master/livesettings.jar\",\"快捷命令 fstatefulmvp 快速构建stateful页面 flistviewmvp 快速构建listview列表页面\",\"快速实现一键化开发\",\"其中还有flutter其他快捷命令 均是f开头,可以快捷名利可以快速唤起 \",\"####项目中示例 核心模板代码在此路径 https://github.com/yinlingchaoliu/SmartRefreshBloc/tree/master/example/lib/base\",\"///核心模板两个文件 base_bloc.dart pulltofresh_bloc.dart ///一键化生成代码示例，帮助你快速开发 default_bloc.dart default_list_bloc.dart \",\"项目中重构实战示例在 https://github.com/yinlingchaoliu/SmartRefreshBloc/tree/master/example/lib/ui\",\"TestExample.dart TestExample1.dart TestExample2.dart \"]},\"1384\":{\"c\":[\"Android相关\"]},\"1385\":{\"c\":[\"archive\"]},\"1386\":{\"h\":\"flutter-redux\",\"t\":[\"最近学习flutter-redux 思想是flux action->dispatch-->store->view 数据是单向流动\",\"阮一峰 https://www.cnblogs.com/fliu/articles/5245923.html\",\"如果能使用简单可以省心不少 \",\"fish-redux 存在一个问题，类文件膨胀\",\"redux这个框架本意复用mvp中的p\\n尽量少些\"]},\"1387\":{\"c\":[\"Android相关\"]},\"1388\":{\"c\":[\"archive\"]},\"1389\":{\"h\":\"flutter-widget布局开发\",\"t\":[\"widget开发思路\",\"widget 相当于View 开发flutter布局，并不是那么直观 我们用constraintLayout 写法是一层， 对于使用者来言，更直观。 最好的方式就是一层。\",\"最好采用mvp 把逻辑和视图分离 或者类似android-flux效果 这些写起布局清爽，也不用考虑与布局无关的逻辑， 太多widget内私有方法，或者全局变量会导致程序不易读\",\"以往开发baseTemplete效果， 公共titlebar ,公共 theme 公共 frame 公共list列表 可以解决布局大部分需求\",\"理念就是用模板\",\"而不是重复的语法，重复写，项目四处都是\"]},\"1390\":{\"c\":[\"Android相关\"]},\"1391\":{\"c\":[\"archive\"]},\"1392\":{\"h\":\"flutter-提供View的-gone-visible-invisible\",\"t\":[\"安卓一般View有三种显示方式gone visible invisible fultter也要提供相应的支持，这个是验证可用的\",\"import 'package:flutter/widgets.dart'; import 'package:meta/meta.dart'; enum VisibilityFlag { visible, invisible, offscreen, gone, } class Visibility extends StatelessWidget { final VisibilityFlag visibility; final Widget child; final Widget removeChild; Visibility({ @required this.child, @required this.visibility, }) : this.removeChild = Container(); @override Widget build(BuildContext context) { if (visibility == VisibilityFlag.visible) { return child; } else if (visibility == VisibilityFlag.invisible) { return new IgnorePointer( ignoring: true, child: new Opacity(opacity: 0.0, child: child)); } else if (visibility == VisibilityFlag.offscreen) { return new Offstage(offstage: true, child: child); } else { return removeChild; } } } \"]},\"1393\":{\"c\":[\"Android相关\"]},\"1394\":{\"c\":[\"archive\"]},\"1395\":{\"h\":\"flutter业务层编写思路\",\"t\":[\"底层库，有网络，和sp可以简单应付大部分场景\",\"flutter上层UI编写，basetemplete\\n闪屏页，登录页，主页4个tab，加上list页面，基本覆盖APP大多数UI场景\"]},\"1396\":{\"c\":[\"Android相关\"]},\"1397\":{\"c\":[\"archive\"]},\"1398\":{\"h\":\"flutter实践学习\",\"t\":[\"#####导航 1、flutter学习思路 flutter简易启动框架 flutter开发工具 and so on...\"]},\"1399\":{\"h\":\"1、flutter学习思路\",\"t\":[\"学习一门新语言，很难通过一步一步学习，快速接入项目，原因是 1、商业项目一般是多个技术点的综合运用 2、学习到技术也符合28定律，真正运用到实践技术不多3、实际中项目学习，一般是先有，后优化关系 综上，我采取思路是，\",\"1、采用已开源代码成熟代码整合出一个新项目。关系就是先有鸡，后有蛋\",\"2、不考虑新语言音速，新开发一个APP，我需要什么？需要什么样子一个技术框图\",\"flutter学习思路\",\"站在我需要什么，而不是flutter有什么技术 站在使用者角度，不考虑原理，先出基本效果，再后续优化，That’s all.\",\"本文支持学习项目： https://github.com/yinlingchaoliu/flutter-easy.git\",\"//已写好工具 SpUtil 支持本地存储 HttpManager 基于dio支持网络请求任意灵活配置 Fluttertoast 第三方工具 \",\"基于GSYGithubAppFlutter项目重构\",\"json to dart https://javiercbk.github.io/json_to_dart/\",\"星期八的文章 https://www.cnblogs.com/hupo376787/default.html?page=2\",\"网络框架 https://github.com/flutterchina/dio\",\"json to dart https://javiercbk.github.io/json_to_dart/\",\"future http://www.ccc5.cc/2462.html\",\"开源项目 https://github.com/yinlingchaoliu/flutter-easy.git\",\"临时笔记 打包 flutter build apk\",\"参考资料\",\"官方教程 https://flutter.cn/\",\"flutter实战 https://book.flutterchina.club\",\"任玉刚 https://mp.weixin.qq.com/s/4G6hWW6GxnmV_j6d2rVBpA\",\"系统学习 https://github.com/AweiLoveAndroid/Flutter-learning\",\"优秀开源 https://github.com/alibaba/flutter-go\",\"flutter weex rn kotlin四种实现 https://github.com/CarGuo/GSYGithubAppFlutter\",\"native插件集成 https://github.com/alibaba/flutter_boost\",\"路由解决方案 https://github.com/alibaba-flutter/annotation_route\",\"框架方案 redux https://github.com/alibaba/fish-redux\",\"setting 模板 https://www.jianshu.com/p/4184745d6983\",\"感受布局的基本语法 https://www.jianshu.com/p/7511cb18a05e\",\"闲鱼开源 https://github.com/MissYoung/Flutter_shop\",\"技术点收集 https://github.com/Sky24n/flutter_wanandroid\",\"临时存储 https://www.jianshu.com/p/806219fd4d0b\",\"参考文章 dio网络 https://github.com/flutterchina/dio/blob/flutter/README-ZH.md#features-and-bugs\",\"异步\\nhttps://segmentfault.com/a/1190000014396421\"]},\"1400\":{\"c\":[\"Android相关\"]},\"1401\":{\"c\":[\"archive\"]},\"1402\":{\"h\":\"flutter解决布局嵌套问题\",\"t\":[\"思路：flutter的布局嵌套层次太多，改成链式调用会简单一些\",\"原来的例子\",\"import 'package:flutter/material.dart'; import 'package:flutter_easy/common/util/common.dart'; void main() { runApp( new MaterialApp( title: '', theme: new ThemeData( primarySwatch: Colors.blue, ), home: new TestPage(), ), ); } ///author:chentong ///date:4/10/19 class TestPage extends StatelessWidget { @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: new Text('demo'), ), body: new Align( alignment: FractionalOffset.centerRight, child: new Padding( padding: CommonUtil.padding(left: 10), child: new Text(\\\"我是测试党\\\"))), ); } } \",\"假如再加上click事件，那么简直是太TMD的了\",\"设计模式中有建造者模式，可以用链式调用，解决多层嵌套问题\",\"调用如下，我还特意加上click事件\",\"WidgetDecoration(new Text(\\\"我是测试党\\\")) .padding(left: 10) .align(alignment: FractionalOffset.centerRight) .onTap((){ Fluttertoast.showToast(msg: \\\"你看我还能点击呢!\\\") }).build(), \",\"这样写法你说优秀不优秀 不用担心括号一层一层的问题\",\"完整建造者代码，已应用于项目\",\"import 'package:flutter/material.dart'; ///widget装饰器 /// /// author:chentong /// 层级调用改为链式调用，方便查看 /// 4/11/19 /// class WidgetDecoration { Widget _widget; WidgetDecoration(Widget widget) { this._widget = widget; } Function _onTapFunc; Function _onDoubleTapFunc; Function _onLongPressFunc; ///add padding属性 WidgetDecoration padding( {Key key, double left = 0.0, double top = 0.0, double right = 0.0, double bottom = 0.0}) { var padding = EdgeInsets.only(left: left, top: top, right: right, bottom: bottom); _widget = new Padding(key: key, padding: padding, child: _widget); return this; } ///增加padingall WidgetDecoration paddAll({Key key, double all = 0.0}) { var padding = EdgeInsets.all(all); _widget = new Padding(key: key, padding: padding, child: _widget); return this; } ///增加align 当前布局相对位置 ///FractionalOffset.centerRight WidgetDecoration align({Key key, AlignmentGeometry alignment = Alignment.center}) { _widget = new Align(key: key, alignment: alignment, child: _widget); return this; } ///位置 WidgetDecoration positioned( {Key key, double left, double top, double right, double bottom, double width, double height}) { _widget = new Positioned( key: key, left: left, top: top, right: right, bottom: bottom, width: width, height: height, child: _widget); return this; } ///stack 相当于frameLayout布局 ///填充布局 WidgetDecoration expanded({Key key, int flex = 1}) { _widget = new Expanded(key: key, flex: flex, child: _widget); return this; } ///是否显示布局 true为不显示 false为显示 WidgetDecoration offstage({Key key, bool offstage = true}) { _widget = new Offstage(key: key, offstage: offstage, child: _widget); return this; } ///透明度 0 是完全透明 1 完全不透明 WidgetDecoration opacity({Key key, @required double opacity, alwaysIncludeSemantics = false}) { _widget = new Opacity( key: key, opacity: opacity, alwaysIncludeSemantics: alwaysIncludeSemantics, child: _widget); return this; } ///基准线布局 WidgetDecoration baseline({ Key key, @required double baseline, @required TextBaseline baselineType, }) { _widget = new Baseline(key: key, baseline: baseline, baselineType: baselineType, child: _widget); return this; } ///设置宽高比 WidgetDecoration aspectRatio({Key key, @required double aspectRatio}) { _widget = new AspectRatio(key: key, aspectRatio: aspectRatio, child: _widget); return this; } ///矩阵转换 WidgetDecoration transform({ Key key, @required Matrix4 transform, origin, alignment, transformHitTests = true, }) { _widget = new Transform( key: key, transform: transform, origin: origin, alignment: alignment, transformHitTests: transformHitTests, child: _widget); return this; } ///居中 todo: center WidgetDecoration center({Key key, double widthFactor, double heightFactor}) { _widget = new Center(key: key, widthFactor: widthFactor, heightFactor: heightFactor, child: _widget); return this; } ///布局容器 WidgetDecoration container({ Key key, alignment, padding, Color color, Decoration decoration, foregroundDecoration, double width, double height, BoxConstraints constraints, margin, transform, }) { _widget = new Container( key: key, alignment: alignment, padding: padding, color: color, decoration: decoration, foregroundDecoration: foregroundDecoration, width: width, height: height, constraints: constraints, margin: margin, transform: transform, child: _widget); return this; } ///设置具体尺寸 WidgetDecoration sizedBox({Key key, double width, double height}) { _widget = new SizedBox(key: key, width: width, height: height, child: _widget); return this; } ///设置最大最小宽高布局 WidgetDecoration constrainedBox({ Key key, minWidth = 0.0, maxWidth = double.infinity, minHeight = 0.0, maxHeight = double.infinity, }) { BoxConstraints constraints = new BoxConstraints( minWidth: minWidth, maxWidth: maxWidth, minHeight: minHeight, maxHeight: maxHeight); _widget = new ConstrainedBox(key: key, constraints: constraints, child: _widget); return this; } ///限定最大宽高布局 WidgetDecoration limitedBox({ Key key, maxWidth = double.infinity, maxHeight = double.infinity, }) { _widget = new LimitedBox(key: key, maxWidth: maxWidth, maxHeight: maxHeight, child: _widget); return this; } ///百分比布局 WidgetDecoration fractionallySizedBox( {Key key, alignment = Alignment.center, double widthFactor, double heightFactor}) { _widget = new FractionallySizedBox( key: key, alignment: alignment, widthFactor: widthFactor, heightFactor: heightFactor, child: _widget); return this; } ///缩放布局 WidgetDecoration fittedBox({Key key, fit = BoxFit.contain, alignment = Alignment.center}) { _widget = new FittedBox(key: key, fit: fit, alignment: alignment, child: _widget); return this; } ///旋转盒子 1次是90度 WidgetDecoration rotatedBox({ Key key, @required int quarterTurns, }) { _widget = new RotatedBox(key: key, quarterTurns: quarterTurns, child: _widget); return this; } ///装饰盒子 细节往外抛 decoration 编写放在外面 WidgetDecoration decoratedBox({ Key key, @required Decoration decoration, position = DecorationPosition.background, }) { _widget = new DecoratedBox(key: key, decoration: decoration, position: position, child: _widget); return this; } ///圆形剪裁 WidgetDecoration clipOval( {Key key, CustomClipper<Rect> clipper, Clip clipBehavior = Clip.antiAlias}) { _widget = new ClipOval(key: key, clipper: clipper, clipBehavior: clipBehavior, child: _widget); return this; } ///圆角矩形剪裁 WidgetDecoration clipRRect( {Key key, @required BorderRadius borderRadius, CustomClipper<RRect> clipper, Clip clipBehavior = Clip.antiAlias}) { _widget = new ClipRRect( key: key, borderRadius: borderRadius, clipper: clipper, clipBehavior: clipBehavior, child: _widget); return this; } ///矩形剪裁 todo: 需要自定义clipper 否则无效果 WidgetDecoration clipRect( {Key key, @required CustomClipper<Rect> clipper, Clip clipBehavior = Clip.hardEdge}) { _widget = new ClipRect(key: key, clipper: clipper, clipBehavior: clipBehavior, child: _widget); return this; } ///路径剪裁 todo: 需要自定义clipper 否则无效果 WidgetDecoration clipPath( {Key key, @required CustomClipper<Path> clipper, Clip clipBehavior = Clip.antiAlias}) { _widget = new ClipPath(key: key, clipper: clipper, clipBehavior: clipBehavior, child: _widget); return this; } ///animatedOpacity 淡入淡出 WidgetDecoration animatedOpacity({ Key key, @required double opacity, Curve curve = Curves.linear, @required Duration duration, }) { _widget = new AnimatedOpacity( key: key, opacity: opacity, curve: curve, duration: duration, child: _widget); return this; } ///页面简单切换效果 WidgetDecoration hero({Key key, @required Object tag}) { _widget = new Hero(key: key, tag: tag, child: _widget); return this; } ///点击事件 WidgetDecoration onClick({Key key, onTap, onDoubleTap, onLongPress}) { _widget = new GestureDetector( key: key, child: _widget, onTap: onTap ?? _onTapFunc, onDoubleTap: onDoubleTap ?? _onDoubleTapFunc, onLongPress: onLongPress ?? _onLongPressFunc, ); return this; } ///添加点击事件 WidgetDecoration onTap(Function func, {Key key}) { _onTapFunc = func; _widget = new GestureDetector( key: key, child: _widget, onTap: _onTapFunc, onDoubleTap: _onDoubleTapFunc, onLongPress: _onLongPressFunc, ); return this; } ///双击 WidgetDecoration onDoubleTap(Function func, {Key key}) { _onDoubleTapFunc = func; _widget = new GestureDetector( key: key, child: _widget, onTap: _onTapFunc, onDoubleTap: _onDoubleTapFunc, onLongPress: _onLongPressFunc, ); return this; } ///长按 WidgetDecoration onLongPress(Function func, {Key key}) { _onLongPressFunc = func; _widget = new GestureDetector( key: key, child: _widget, onTap: _onTapFunc, onDoubleTap: _onDoubleTapFunc, onLongPress: _onLongPressFunc, ); return this; } Widget build() { return _widget; } } \"]},\"1403\":{\"c\":[\"Android相关\"]},\"1404\":{\"c\":[\"archive\"]},\"1405\":{\"h\":\"java-io-IOException--Cleartext-HTTP-traffic-to-xxx-xxx-xxx-xxx-not-per\",\"t\":[\"Android9.0 默认是禁止所有的http请求的，\",\"需要在代码中设置如下代码才可以正常进行网络请求： android:usesCleartextTraffic=\\\"true\\\"\",\"<application android:usesCleartextTraffic=\\\"true\\\"> \",\"更高得编译版本中 ，需要添加配置文件（network_security_config.xml）如下：\",\"<application android:networkSecurityConfig=\\\"@xml/network_security_config\\\"> \",\"network_security_config文件\",\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?> <network-security-config> <base-config cleartextTrafficPermitted=\\\"true\\\"/> </network-security-config> \"]},\"1406\":{\"c\":[\"Android相关\"]},\"1407\":{\"c\":[\"archive\"]},\"1408\":{\"h\":\"npm安装卸载命令\"},\"1409\":{\"h\":\"npm安装模块\",\"t\":[\"【npm install xxx】利用 npm 安装xxx模块到当前命令行所在目录；\",\"【npm install -g xxx】利用npm安装全局模块xxx；\",\"【npm install xxx】安装但不写入package.json；\",\"【npm install xxx –save】 安装并写入package.json的”dependencies”中；\",\"【npm install xxx –save-dev】安装并写入package.json的”devDependencies”中。\"]},\"1410\":{\"h\":\"npm 删除模块\",\"t\":[\"【npm uninstall xxx】删除xxx模块；\",\"【npm uninstall -g xxx】删除全局模块xxx；\"]},\"1411\":{\"c\":[\"Android相关\"]},\"1412\":{\"c\":[\"archive\"]},\"1413\":{\"h\":\"react-native\",\"t\":[\"教程 https://reactnative.cn\",\"推荐开源项目 https://github.com/CarGuo/GSYGithubApp\",\"从上到下执行命令 brew install node brew install watchman //监视文件系统变更的工具\",\"官方不建议cnpm 注意：不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！\",\"npm config set registry https://registry.npm.taobao.org --global npm config set disturl https://npm.taobao.org/dist --global\",\"npm install -g yarn react-native-cli\",\"yarn config set registry https://registry.npm.taobao.org --global yarn config set disturl https://npm.taobao.org/dist --global\",\"npm install ==yarn npm install plugin ==yarn add plugin\",\"npm install\",\"npm audit fix\",\"创建项目 react-native init AwesomeProject\",\"warning 需要手动开启模拟器 不能有耗时操作，比如下载gradle.zip 下载第三方库\",\"react-native run-ios react-native run-android react-native run-android --variant=release\",\"目录分析 package.json 依赖 index.js 首个js app.json 应用名称\",\"App.js\"]},\"1414\":{\"c\":[\"Android相关\"]},\"1415\":{\"c\":[\"archive\"]},\"1416\":{\"h\":\"webview支持input标签\",\"t\":[\"####webview input说明 安卓webview禁用input，网上查看各种方案，都存在弊端。 经过实践，完整可用调研了支持拍照和图片选择上传。\",\"1、webview支持input标签2、安卓拍照支持适配7.0 takePhoto\",\"####1、webview 初始化和销毁\",\" //webview初始化 @SuppressLint(\\\"SetJavaScriptEnabled\\\") public static void initX5Web(WebView x5Webview) { Context context = x5Webview.getContext(); WebSettings webSetting = x5Webview.getSettings(); webSetting.setJavaScriptEnabled( true ); webSetting.setAllowFileAccess( true ); webSetting.setLayoutAlgorithm( WebSettings.LayoutAlgorithm.NARROW_COLUMNS ); webSetting.setSupportZoom( false ); webSetting.setBuiltInZoomControls( false ); webSetting.setDisplayZoomControls(false); //不显示webview缩放按钮 webSetting.setUseWideViewPort( true ); //多窗口问题 webSetting.setSupportMultipleWindows( false ); webSetting.setJavaScriptCanOpenWindowsAutomatically( true ); //h5数据存储 webSetting.setAppCacheEnabled( true ); webSetting.setDomStorageEnabled( true ); webSetting.setDatabaseEnabled(true); webSetting.setAppCachePath(context.getDir(\\\"appcache\\\", 0).getPath()); webSetting.setGeolocationEnabled( true ); webSetting.setAppCacheMaxSize( Long.MAX_VALUE ); webSetting.setDatabasePath(context.getDir(\\\"databases\\\", 0).getPath()); webSetting.setGeolocationDatabasePath(context.getDir(\\\"geolocation\\\", 0).getPath()); webSetting.setPluginState( WebSettings.PluginState.ON_DEMAND ); webSetting.setRenderPriority( WebSettings.RenderPriority.HIGH ); webSetting.setCacheMode( WebSettings.LOAD_NO_CACHE ); //sonic x5Webview.removeJavascriptInterface(\\\"searchBoxJavaBridge_\\\"); webSetting.setAllowContentAccess(true); webSetting.setSavePassword(false); webSetting.setSaveFormData(false); webSetting.setLoadWithOverviewMode(true); webSetting.setDefaultTextEncodingName(\\\"utf-8\\\"); webSetting.setLoadsImagesAutomatically(true); } //webview销毁方法 public static void onDestroy(WebView mWebView){ if (mWebView != null) { mWebView.clearHistory(); ((ViewGroup) mWebView.getParent()).removeView(mWebView); mWebView.loadUrl(\\\"about:blank\\\"); mWebView.stopLoading(); mWebView.setWebChromeClient(null); mWebView.setWebViewClient(null); mWebView.loadDataWithBaseURL(null, \\\"\\\", \\\"text/html\\\", \\\"utf-8\\\", null); mWebView.clearHistory(); mWebView.destroy(); } } \",\"####2、webchrome特别支持\",\"1、 initWebChrome\",\" //webview input 特别支持帮助类 private WebViewUploadFileHelper helper = new WebViewUploadFileHelper(this); private void initWebChrome() { webview.setWebChromeClient( new InputFileWebChromeClient() ); } public class InputFileWebChromeClient extends WebChromeClient { //设置 进度条 @Override public void onProgressChanged(WebView view, int newProgress) { super.onProgressChanged( view, newProgress ); } // For Android < 3.0 public void openFileChooser(ValueCallback<Uri> uploadMsg) { helper.setUploadMessage( uploadMsg ); permission( () -> { helper.openImageActivity(); } ); } // For Android 3.0+ public void openFileChooser(ValueCallback<Uri> uploadMsg, String acceptType) { helper.setUploadMessage( uploadMsg ); permission( () -> { helper.openImageActivity( acceptType ); } ); } // For Android > 4.1.1 public void openFileChooser(ValueCallback<Uri> uploadMsg, String acceptType, String capture) { helper.setUploadMessage( uploadMsg ); permission( () -> { helper.openImageActivity( acceptType, capture ); } ); } // For Android >= 5.0 public boolean onShowFileChooser(com.tencent.smtt.sdk.WebView webView, ValueCallback<Uri[]> filePathCallback, WebChromeClient.FileChooserParams fileChooserParams) { helper.setUploadMessageAboveL( filePathCallback ); permission( () -> { helper.openImageActivity( fileChooserParams.getAcceptTypes(), fileChooserParams.isCaptureEnabled() ); } ); return true; } //==多窗口的问题 @Override public boolean onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg) { WebView.WebViewTransport transport = (WebView.WebViewTransport) resultMsg.obj; transport.setWebView( view ); resultMsg.sendToTarget(); return true; } } \",\"2 、回调\",\" @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { //回调支持 super.onActivityResult(requestCode, resultCode, data); helper.onActivityResult(requestCode, resultCode, data); } \",\"3 、权限\",\" @SuppressLint(\\\"CheckResult\\\") public void permission(CallBack callBack){ // 权限支持 RxPermissions rxPermissions = new RxPermissions( this ); rxPermissions.request(Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE) .subscribe(grant -> { if (grant) { //全部通过 try { if (callBack!=null){ callBack.onSucess(); } } catch (Throwable throwable) { throwable.printStackTrace(); } } else { ToastUtils.show(\\\"请同意权限\\\"); } }); } public interface CallBack{ void onSucess(); } \"]},\"1417\":{\"h\":\"3、WebViewUploadFileHelper 帮助类\",\"t\":[\"将input相关方法封装在一个帮助类中，便于多处复用\",\" public class WebViewUploadFileHelper { private ValueCallback<Uri> uploadMessage; private ValueCallback<Uri[]> uploadMessageAboveL; private final static int FILE_CHOOSER_RESULT_CODE = 10011;//文件选择 private Uri imageUri; private Activity activity; private WebViewUploadFileHelper() { } public WebViewUploadFileHelper(Activity activity) { this.activity = activity; } public void setUploadMessage(ValueCallback<Uri> uploadMessage) { this.uploadMessage = uploadMessage; } public void setUploadMessageAboveL(ValueCallback<Uri[]> uploadMessageAboveL) { this.uploadMessageAboveL = uploadMessageAboveL; } public void onActivityResult(int requestCode, int resultCode, Intent data) { if (requestCode != FILE_CHOOSER_RESULT_CODE) return; // 经过上边(1)、(2)两个赋值操作，此处即可根据其值是否为空来决定采用哪种处理方法 if (uploadMessage != null) { chooseBelow( resultCode, data ); } else if (uploadMessageAboveL != null) { chooseAbove( resultCode, data ); } } public void openImageActivity() { chooseImage( \\\"image/*\\\" ); } public void openImageActivity(String acceptType) { chooseImage( acceptType ); } public void openImageActivity(String acceptType, String capture) { if (StringUtils.equals( capture, \\\"camera\\\" )) { takePhoto(); } else { chooseImage( acceptType ); } } public void openImageActivity(String[] acceptType, boolean isCaptureEnabled) { if (isCaptureEnabled) { takePhoto(); } else { chooseImage( acceptType ); } } private void chooseBelow(int resultCode, Intent data) { if (RESULT_OK == resultCode) { updatePhotos(); if (data != null) { // 这里是针对文件路径处理 Uri uri = data.getData(); if (uri != null) { uploadMessage.onReceiveValue( uri ); } else { uploadMessage.onReceiveValue( null ); } } else { // 以指定图像存储路径的方式调起相机，成功后返回data为空 uploadMessage.onReceiveValue( imageUri ); } } else { uploadMessage.onReceiveValue( null ); } uploadMessage = null; } private void chooseAbove(int resultCode, Intent data) { if (RESULT_OK == resultCode) { updatePhotos(); if (data != null) { // 这里是针对从文件中选图片的处理 Uri[] results; Uri uriData = data.getData(); if (uriData != null) { results = new Uri[]{uriData}; uploadMessageAboveL.onReceiveValue( results ); } else { uploadMessageAboveL.onReceiveValue( null ); } } else { uploadMessageAboveL.onReceiveValue( new Uri[]{imageUri} ); } } else { uploadMessageAboveL.onReceiveValue( null ); } uploadMessageAboveL = null; } private void updatePhotos() { // 该广播即使多发（即选取照片成功时也发送）也没有关系，只是唤醒系统刷新媒体文件 Intent intent = new Intent( Intent.ACTION_MEDIA_SCANNER_SCAN_FILE ); intent.setData( imageUri ); activity.sendBroadcast( intent ); } //调用相机 private void takePhoto() { String fileName = \\\"IMG_\\\" + DateFormat.format( \\\"yyyyMMdd_hhmmss\\\", Calendar.getInstance( Locale.CHINA ) ) + \\\".jpg\\\"; // 步骤一：创建存储照片的文件 String imagePath = activity.getFilesDir() + File.separator + \\\"images\\\" + File.separator + fileName; File file = new File( imagePath ); //创建文件夹 if (!file.getParentFile().exists()) file.getParentFile().mkdirs(); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) { //步骤二：Android 7.0及以上获取文件 Uri imageUri = FileProvider.getUriForFile( activity, activity.getPackageName() + \\\".fileprovider\\\", file ); } else { //步骤三：获取文件Uri imageUri = Uri.fromFile( file ); } Intent intent = new Intent(); intent.addFlags( Intent.FLAG_GRANT_READ_URI_PERMISSION ); intent.setAction( MediaStore.ACTION_IMAGE_CAPTURE );//设置Action为拍照 intent.putExtra( MediaStore.EXTRA_OUTPUT, imageUri );//将拍取的照片保存到指定URI activity.startActivityForResult( intent, FILE_CHOOSER_RESULT_CODE ); } //图片选择器 private void chooseImage(String[] acceptType) { Intent i = new Intent( Intent.ACTION_GET_CONTENT ); i.addCategory( Intent.CATEGORY_OPENABLE ); i.setType( \\\"*/*\\\" ); i.putExtra( Intent.EXTRA_MIME_TYPES, acceptType ); activity.startActivityForResult( i, FILE_CHOOSER_RESULT_CODE ); } //图片选择器 private void chooseImage(String acceptType) { Intent i = new Intent( Intent.ACTION_GET_CONTENT ); i.addCategory( Intent.CATEGORY_OPENABLE ); if (TextUtils.isEmpty( acceptType )) { i.setType( \\\"*/*\\\" ); } else { i.setType( acceptType ); } activity.startActivityForResult( Intent.createChooser( i, \\\"Image Chooser\\\" ), FILE_CHOOSER_RESULT_CODE ); } } \"]},\"1418\":{\"c\":[\"Android相关\"]},\"1419\":{\"c\":[\"archive\"]},\"1420\":{\"h\":\"优秀开源项目\",\"t\":[\"https://blog.csdn.net/u012982629/article/details/80650999\"]},\"1421\":{\"c\":[\"Android相关\"]},\"1422\":{\"c\":[\"archive\"]},\"1423\":{\"h\":\"前后端分离技术方案\",\"t\":[\"现有开发流程\",\"现有开发流程瓶颈\",\"前端界面开发瓶颈一直卡后端联调\",\"接口文档频繁改动\"]},\"1424\":{\"c\":[\"Android相关\"]},\"1425\":{\"c\":[\"archive\"]},\"1426\":{\"h\":\"插件化开发\",\"t\":[\"Android插件化完美实现代码资源加载及原理讲解\",\"框架选型\",\"Android全面插件化RePlugin\",\"Android插件化-RePlugin项目集成与使用\",\"android插件化之路简介\"]},\"1427\":{\"c\":[\"Android相关\"]},\"1428\":{\"c\":[\"archive\"]},\"1429\":{\"h\":\"模块化与组件化区分\",\"t\":[\"辨析Android 开发:由模块化到组件化\"]},\"1430\":{\"c\":[\"Android相关\"]},\"1431\":{\"c\":[\"archive\"]},\"1432\":{\"h\":\"热修复技术\",\"t\":[\"Android热修复技术总结\",\"深入理解Android Instant Run运行机制\",\"热修复——Tinker 的集成与使用\",\"热修复——Tinker 的集成与使用\",\"补充\\n热修复——深入浅出原理与实现\"]},\"1433\":{\"c\":[\"Android相关\"]},\"1434\":{\"c\":[\"archive\"]},\"1435\":{\"h\":\"移动端UI开发规范\",\"t\":[\"####1、目的 建立UI和开发人员规范认知的一致性，便于高效团队合作 ####2、ios规范 ######2.1 UI交付给开发者资料 2x切图（以640为宽度尺寸为基准切图）640*960 3x切图（以1280为宽度尺寸为基准切图）1280*1920若提供一张切图，ios必须是2x\",\"######2.2 ios logo系统标准要求（尺寸规定严格）且提供对应1x 2x 3x\",\"20*20 通知logo 29*29 设置 40*40 搜索icon 60*60 app icon 1024*1024 app store 76*76 ipad 83.5*83.5 ipad pro \",\"######2.3 闪屏业界标准\",\"640x960 iPhone 4S 640x1136 iPhone 5S 750x1334 iPhone 8 1242x2208 iPhone 8 Plus 1125x2436 iPhoneX 828 x 1792 iPhone XR 1242 x 2688 iPhone XS Max \",\"####3、android规范\",\"######3.1 UI交付给开发者资料\",\"图片类型\",\"屏幕\",\"mdpi\",\"320*480\",\"hdpi\",\"480*800\",\"xhdpi\",\"720*1280\",\"xxhdpi\",\"1080*1920\",\"xxxhdpi\",\"2160*3840\",\"######3.2 app logo 系统标准要求（尺寸规定严格）\",\"DEBSITY\",\"SIZE\",\"RATIO\",\"SCREEN\",\"MARGIN\",\"CONTENT\",\"Padding\",\"XXXHDPI\",\"192*192\",\"4\",\"640DPI\",\"12-16\",\"170*170\",\"16\",\"XXHDPI\",\"144*144\",\"3\",\"480DPI\",\"8-12\",\"128*128\",\"8\",\"XHDPI\",\"96*96\",\"2\",\"320DPI\",\"6-8\",\"88*88\",\"4\",\"HDPI\",\"72*72\",\"1.5\",\"240DPI\",\"4-6\",\"68*68\",\"2\",\"MDPI\",\"48*48\",\"1\",\"160DPI\",\"3-4\",\"46*46\",\"1\",\"N/A\",\"512*512\",\"Google play\",\"NA\",\"NA\",\"As Required\",\"安卓建议： 提供MDPI~XXXHDPI, 图标有正常和圆角两种 若圆角为android切，须UI产品确认最终样式\",\"######3.3 应用市场提交logo 应用市场logo\",\"应用市场\",\"图片尺寸\",\"体积\",\"格式\",\"特别建议\",\"应用宝\",\"16*16\",\"20k以内\",\"png\",\"应用宝\",\"512*512\",\"200K以内\",\"png\",\"直角图标\",\"华为\",\"216*216\",\"Png\",\"正方形图片 圆角32px\",\"VIVO\",\"512*512\",\"小于50K\",\"png\",\"正方形图片，直角图标\",\"阿里分发平台\",\"512*512\",\"Png\",\"背景透明带圆角\",\"小米\",\"216*216\",\"png\",\"正方形图片\",\"######3.4 应用市场提交截图\",\"市场\",\"截图要求\",\"特殊要求\",\"应用宝\",\"480*800 4张 1M PNG\",\"阿里分发平台\",\"480*800 4张 1M PNG\",\"不可上传ios截图\",\"百度\",\"480*800 4张 1M PNG\",\"通知栏不含有与app自身无关的应用图标\",\"华为\",\"450*800 4张 1M PNG\",\"小米\",\"720*1280 4张 1M PNG\",\"若截图含有手机外观，必须使用小米手机外观素材\",\"OPPO\",\"1080*1920 4张 1M PNG\",\"去除顶部通知栏，不得使用其他品牌手机作为边框或宣传图\",\"VIVO\",\"480*800 4张 1M PNG\",\"######3.5 应用截图要求\",\"体积 小于1M 4 张 png 尺寸 480*800 450*800 720*1280 1080*1920 特别要求： 1、无ios截图 2、无通知栏 3、无手机外观 \",\"######3.6 闪屏页图片要求 app冷启动\",\"一整张图片 1080*1920 jpg \"]},\"1436\":{\"c\":[\"Android相关\"]},\"1437\":{\"c\":[\"archive\"]},\"1438\":{\"h\":\"移动端UI验收规范\"},\"1439\":{\"h\":\"1. 基本要求\"},\"1440\":{\"h\":\"1.1 验收要求\",\"t\":[\"wiki放置一份sketch图，作为版本控制依据，便于开发和测试\",\"wiki放置当前最新切图，满足当前一期要求\",\"sketch图，要求标注\"]},\"1441\":{\"h\":\"1.2 验收流程\",\"t\":[\"UI人员，须在开发起始前一个工作日，提供sketch和切图。\",\"对应产品、开发、测试人员须在当天，发起验收行为，确保无误后，进行后续行为，否则打回\",\"验收通过后，切图，sketch放在wiki上，作为版本控制和开发测试依据\",\"UI设计不能在开发工期内较大变动，如有改动须添加批注提示，来版本控制。\"]},\"1442\":{\"h\":\"2. UI交付物基本要求\"},\"1443\":{\"h\":\"2.1 切图要求\",\"t\":[\"交付页面切图 分别满足安卓和ios规范\",\"特殊情况下，ios切图只能做一张，必须是2x图，其它必须是2x,3x\",\"非特殊情况下，图片中内容建议在正中间\",\"当前页面提供切图，至少满足80%要求，UI不确认可后续开发中提供\",\"切图建议和蓝湖或者sketch放在一起提供，不要分开，便于管理和测试\"]},\"1444\":{\"h\":\"2.2 通用要求\",\"t\":[\"导航栏、title、button等要有统一标准要求\",\"字体(标题、内容，提示)大小，色值，要有全局统一要求\",\"侧边距在app中，要有统一尺寸\"]},\"1445\":{\"h\":\"2.3 标注要求\",\"t\":[\"间距标注，间距分整体和局部两种关系，局部是指一个控件在局部内容中相对位置，整体关系是指局部内容，在当前页面，相对位置\",\"属性标注，要绘制的内容，点击可选，要提示色值，字体大小，padding,magin等属性，所有对应属性要全，来满足UI效果\",\"空间大小标注，字体大小或者内容与标注空间大小，要存在一致性，不要差异，产生异议\",\"内容修改，要有批注来进行提示，并加上版本号，来进行版本控制\",\"渐变效果，需要标注出来\"]},\"1446\":{\"h\":\"2.4 字体版权特别声明\",\"t\":[\"特殊字体要有版权，否则不要出现在设计中， 避免出现实现UI效果与设计存在偏差，不一致性体验\",\"tips:无版权字体被查，存在法律风险。 无版权字体，一律采用系统字体\"]},\"1447\":{\"h\":\"2.5 动画效果\",\"t\":[\"动画效果是根据项目优先级，实际情况来安排\"]},\"1448\":{\"c\":[\"Android相关\"]},\"1449\":{\"c\":[\"archive\"]},\"1450\":{\"h\":\"组件化开发\",\"t\":[\"Android彻底组件化demo发布\",\"Android组件化方案\",\"Android组件化框架设计与实践\",\"Android组件化开发实践\"]},\"1451\":{\"c\":[\"Android相关\"]},\"1452\":{\"c\":[\"archive\"]},\"1453\":{\"h\":\"组件化开发实践\",\"t\":[\"学习很多组件化方案，终归要coding，才有意义。 我将我认识到技术综合运用写出一篇 参考的是苍王的书《组件化开发》和guiying 的博客https://blog.csdn.net/guiying712/article/details/55213884 让组件化技术真正落地接地气\",\"这是我的项目，我在苍王和guiying肩膀上实操组件化\",\"https://github.com/yinlingchaoliu/AndroidModulePattern\"]},\"1454\":{\"c\":[\"Android相关\"]},\"1455\":{\"c\":[\"archive\"]},\"1456\":{\"h\":\"获得T-class\",\"t\":[\"获得T.class\",\"Class < T > entityClass = (Class < T > ) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[ 0 ]; \",\"获得return T.class\",\"private Type getReturnTye(Method method){ return ((ParameterizedType)(method.getGenericReturnType())).getActualTypeArguments()[0]; } \"]},\"1457\":{\"c\":[\"Android相关\"]},\"1458\":{\"c\":[\"archive\"]},\"1459\":{\"h\":\"蒲公英平台上传apk脚本\",\"t\":[\"经典上传蒲公英平台脚本\",\"#!/usr/bin/env bash ##author chentong ##date 2019/2/12 ##json解析函数 function jsonParse() { # $1 $2 json lable JSON_CONTENT=$1 KEY='\\\"'$2'\\\":' echo ${JSON_CONTENT} | awk -F ${KEY} '{print $2}' | awk -F '\\\"' '{print $2}' } ##删除斜杠'\\\\' function trimSlash() { TEXT=$1 echo ${TEXT//'\\\\'/''} } ##解析返回报文 function showApkInfo() { CONTENT=$1 echo \\\"App的名称:\\\" $(jsonParse \\\"${CONTENT}\\\" \\\"appName\\\") echo \\\"AppId :\\\" $(jsonParse \\\"${CONTENT}\\\" \\\"appIdentifier\\\") echo \\\"App版本名:\\\" $(jsonParse \\\"${CONTENT}\\\" \\\"appVersion\\\") echo \\\"App版本号:\\\" $(jsonParse \\\"${CONTENT}\\\" \\\"appVersionNo\\\") echo \\\"AppBuild:\\\" $(jsonParse \\\"${CONTENT}\\\" \\\"appBuildVersion\\\") echo \\\"App包体积:\\\" $(jsonParse \\\"${CONTENT}\\\" \\\"appFileSize\\\") echo \\\"App短链接:\\\" \\\"https://www.pgyer.com/\\\"$(jsonParse \\\"${CONTENT}\\\" \\\"appShortcutUrl\\\") echo \\\"App下载页地址:\\\" \\\"https://www.pgyer.com/\\\"$(jsonParse \\\"${CONTENT}\\\" \\\"appKey\\\") echo \\\"App二维码地址:\\\" $(trimSlash $(jsonParse \\\"${CONTENT}\\\" \\\"appQRCodeURL\\\")) echo \\\"App上传时间:\\\" $(jsonParse \\\"${CONTENT}\\\" \\\"appCreated\\\") } ####上传蒲公英 API_KEY=\\\"xxx\\\" USER_KEY=\\\"xxx\\\" ##获得apk全路径 fileName=`basename ./app/build/outputs/apk/debug/*.apk` APK_PATH=\\\"./app/build/outputs/apk/debug/$fileName\\\" ##上传apk 获得返回报文 echo 'Uploading...' echo '✈ -------------------------------------------- ✈' RESPONSE=$(curl -F \\\"file=@${APK_PATH}\\\" \\\\ -F \\\"uKey=${USER_KEY}\\\" \\\\ -F \\\"_api_key=${API_KEY}\\\" \\\\ https://qiniu-storage.pgyer.com/apiv1/app/upload) ##显示apk信息 showApkInfo \\\"${RESPONSE}\\\" \"]},\"1460\":{\"c\":[\"Android相关\"]},\"1461\":{\"c\":[\"archive\"]},\"1462\":{\"h\":\"阿里云仓库\",\"t\":[\"避免不必要的翻墙\",\"maven{ url 'http://maven.aliyun.com/nexus/content/groups/public'} \"]},\"1463\":{\"c\":[\"Android相关\"]},\"1464\":{\"c\":[\"archive\"]},\"1465\":{\"h\":\"页面切换过渡效果\",\"t\":[\"activity过渡 LOLLIPOP 先mark上，后续优化\",\"https://blog.csdn.net/ausboyue/article/details/80035452\",\"https://blog.csdn.net/cui130/article/details/86561547\"]},\"1466\":{\"c\":[\"动画效果\"]},\"1467\":{\"c\":[\"archive\"]},\"1468\":{\"h\":\"页面管理实现\",\"t\":[\"package com.hexin.wealth.app; import android.app.Activity; import android.app.Application; import android.os.Bundle; import com.hexin.wealth.utils.StringUtils; import static com.hexin.wealth.app.ActivityStackManager.SOURCE; import static com.hexin.wealth.app.ActivityStackManager.TARGET; public class ActivityManagerLifeCallBack implements Application.ActivityLifecycleCallbacks { //后期考虑用拦截器编写 @Override public void onActivityCreated(Activity activity, Bundle savedInstanceState) { String source = activity.getIntent().getStringExtra( SOURCE ); String target = activity.getIntent().getStringExtra( TARGET ); //计数栈开始 if (StringUtils.isNotEmpty( source )){ ActivityStackManager.getInstance().push(); ActivityStackManager.getInstance().setSourcePage( source ); } //跳转页面 if (StringUtils.isNotEmpty( target )){ ActivityStackManager.getInstance().setTargetPage( target ); } ActivityStackManager.getInstance().addActivity( activity ); } @Override public void onActivityStarted(Activity activity) { } @Override public void onActivityResumed(Activity activity) { } @Override public void onActivityPaused(Activity activity) { } @Override public void onActivityStopped(Activity activity) { } @Override public void onActivitySaveInstanceState(Activity activity, Bundle outState) { } @Override public void onActivityDestroyed(Activity activity) { ActivityStackManager.getInstance().removeActivity( activity ); } } \"]},\"1469\":{\"c\":[\"Android相关\"]},\"1470\":{\"c\":[\"archive\"]},\"1471\":{\"h\":\"第1章-组件单独调试与集成发布\"},\"1472\":{\"h\":\"1、组件化思路\",\"t\":[\"“聚合和解耦是项目架构的基础”，站在组件化项目角度，第一步期望子组件可以作为APP单独调试和壳APP集成发布。好处在于开发者在一个子项目中把子组件作为一个子app开发，而不影响别人。APP上线，发布者只需关心是否合并子组件功能。\"]},\"1473\":{\"h\":\"2、单独调试与集成发布需求拆解\",\"t\":[\"1、单独调试：指通过一个标志isRunAlone, 若isRunAlone==true,当前lib项目转化为app项目，反之为lib项目，移除调试代码\",\"2、集成发布：指壳工程，IDE编写代码时，不能引用子组件代码，做到编写隔离，而编译时，又要将子组件代码编译到主项目中，最好配置是在壳工程中gradle.propetties，建议也要支持扩展方法addComponent，以函数方式支持\"]},\"1474\":{\"h\":\"3、核心逻辑\",\"t\":[\"1、初始化当前项目\",\"2、获取当前任务类型\",\"3、若当前是壳工程，支持编译隔离\",\"4、若当前是子组件，支持单独调试和发布 #####3.1 示例代码\",\" void apply(Project project) { this.mProject = project //1、初始化当前项目 initAlone(project) //2、判断当前任务 只有assemble任务才添加依赖 assembleTask = getTaskInfo(project) //3、当前是壳工程 不许被引用 if (isMainApp(project)) { //运行壳工程配置 runMainApp(project) //添加配置依赖 compileComponents(assembleTask, project) //添加扩展方法 (选项) 参数 project.ext.addComponent = { dependencyName -> addComponent(dependencyName) } return } //4、支持单独调试和发布 runAlone(project) } \"]},\"1475\":{\"h\":\"3.2单独调试\",\"t\":[\" private static final String DEBUG_DIR = \\\"src/main/debug/\\\" /** * 支持单独调试和发布 */ private void runAlone(Project project) { //1.找当前module的状态 boolean isRunAlone = fetchAloneStatus(project) if (isRunAlone) { project.apply plugin: 'com.android.application' log(\\\"apply plugin is \\\" + 'com.android.application') project.android.sourceSets { main { //debug模式下，如果存在src/main/debug/AndroidManifest.xml，则自动使用其作为manifest文件 def debugManifest = \\\"${DEBUG_DIR}AndroidManifest.xml\\\" if (project.file(debugManifest).exists()) { manifest.srcFile debugManifest } java.srcDirs = ['src/main/java', \\\"${DEBUG_DIR}java\\\"] res.srcDirs = ['src/main/res', \\\"${DEBUG_DIR}res\\\"] assets.srcDirs = ['src/main/assets', \\\"${DEBUG_DIR}assets\\\"] jniLibs.srcDirs = ['src/main/jniLibs', \\\"${DEBUG_DIR}jniLibs\\\"] } } } else { project.apply plugin: 'com.android.library' log(\\\"apply plugin is \\\" + 'com.android.library') //main下删除所有debug目录下的文件 project.android.sourceSets.main { //默认这个位置，为代码清晰 manifest.srcFile 'src/main/AndroidManifest.xml' //删除所有debug目录下内容 java { exclude 'debug/**' } res { exclude 'debug/**' } assets { exclude 'debug/**' } jniLibs { exclude 'debug/**' } } } } \"]},\"1476\":{\"h\":\"4、插件编写原则\",\"t\":[\"1、单一职责：一个插件只做好一件事，不要与其他组件化插件功能耦合。 2、配置化：用户最小情况修改代码，可以带来稳定 3、易用性：以用户为中心，编写代码提供插件支持，减少生僻概念，支持用户惯性写法\",\"1、单一职责 单独调试和集成发布功能属于通用功能，即使不做插件化，在开发中也有好处。过于强大插件功能，易用性反而降低，进而限制了\",\"2、配置化 在根目录下gradle.propetties配置isRunAlone，就可以设置设置项目中组件lib与app形式切换 在空壳app下gradle.propetties配置,就可以动态引入子组件\",\"###是否为主APP isMainApp=true ###配置方式接入组件 debugComponent=':module_main',\\\\ ':module_girls',\\\\ ':module_news' releaseComponent=':module_main',\\\\ ':module_girls',\\\\ ':module_news' \",\"易用性 支持壳工程 addComponent(':module_main')函数,在gradle中引入子组件，配置还支持容错性trimAll不可见字符\",\"####5、使用示例 根目录配置gradle.propetties\",\"##集成与独立模式 isRunAlone=false \",\"1、壳工程 gradle配置\",\"apply plugin: 'thorAlone' 并且删除原来的app引用 //apply plugin: 'com.android.application' //或采用这种方式 dependencies{ //组件解耦采用这种方式 assemble 才会引入依赖 build并不引入达到组件间代码隔离 addComponent(':module_main') addComponent(deps.support.multidex) } \",\"gradle.propetties\",\"###是否为主APP isMainApp=true ###配置方式接入组件 debugComponent=':module_main',\\\\ ':module_girls',\\\\ ':module_news' releaseComponent=':module_main',\\\\ ':module_girls',\\\\ ':module_news' \",\"2、子组件配置 gradle配置,删除sourceSets\",\"apply plugin: 'thorAlone' 并且删除原来的lib引用 //apply plugin: 'com.android.library' //删除 sourceSets //sourceSets{ //main{} //} \",\"子组件代码配置 \",\"####6、项目代码 https://github.com/yinlingchaoliu/AndroidComponent\",\"插件位置 AndroidComponent/thor_alone_gradle_plugin\",\"//诸神黄昏 include ':component:thor_alone_gradle_plugin', \"]},\"1477\":{\"c\":[\"Android组件化\"]},\"1478\":{\"c\":[\"archive\"]},\"1479\":{\"h\":\"第2章-组件化选型\",\"t\":[\"####1、组件化选型结论 方案是Arouter+auto-register+自己造轮子补充 原因：arouter使用简单，可以做组件间解耦， auto-register 解决了arouter加载组件是反射效率低下问题。原理asm修改字节码\",\"####2、其他组件方案对比 ######1、美团猫眼电影android模块化实战 可以学习到的思想 1、无入侵式配置各种服务 采用serviceload 缺点： 最重要一点：无代码示例 1、serviceload (SPI)对于用户来讲不易使用 2、无论spi还是arouter，都不能解决配置下沉到base，不如使用arouter 3、最好解决方案还是\\\"腾讯.api方案\\\"\"]},\"1480\":{\"h\":\"\",\"t\":[\"可以学习到思想： 1、代码和资源隔离 2、组件单独运行和集成发布 ，提供gradle插件（采用） 3、借鉴采用javassit 缺点： 1、JIMI用户不多 2、API调用暴露了很多底层细节，开发者用户还需要反复看源代码，才能清晰明白 3、core代码写得不够洁癖\"]},\"1481\":{\"h\":\"\",\"t\":[\"美团的博客：WMRouter：美团外卖Android开源路由框架美团外卖开源路由框架 WMRouter 源码分析\",\"最初背景：产品希望通过后台下发URI控制客户端跳到指定页面，从而实现灵活的运营配置\",\"优点： 基于URI开发的框架，可灵活配置 自定义ServiceLoader,不错的扩展性，可以跨组件访问数据(采用)\",\"缺点： 1、灵活性强，反衬易用性不足 2、ServiceLoader，并不能真正意义解除依赖， 还需要将Interfaces下沉的base,或者引用该moudle\",\"总之，可以备选的，基于URI的优秀的路由框架\",\"######4、使用简单但功能强大的安卓组件化框架 CC 介绍网页：https://qibilly.com/CC-website/ 优点： 1、文档全面介绍详实(采用)2、组件间调用者(采用)3、cc-register 采用asm，可以配合arouter(采用)4、采用服务架构，将组件间关系扁平化\",\"缺点： 1、集成太复杂 2、调用方式，还不够亲民 3、代码编写，暴露给用户细节太多 4、gradle的配置，实在是难以让人接受 5、跨组件调用，用不到RPC（AIDL）技术 6、RPC建议专门一个库实现，例如饿了么Hermes 7、组件提供的功能太多，提供api越多，后期兼容性越差，关键核心类要采用final修饰，避免使用者有歧义\",\"总之：非常好的总线框架，学习成本高，需要经验\"]},\"1482\":{\"h\":\"\",\"t\":[\"软件架构\",\"分布式系统学习笔记 https://blog.csdn.net/lchpersonal521/article/details/84107272 优点 1、分布式服务，服务组件间隔离 2、服务降级，服务发现，服务注册 3、RPC+依赖注入+SPI+javassit 缺点： 这套思想应用安卓场景需要适配，参考CC\",\"核心思想：依赖注入+SPI+RPC+javassit\",\"######6、Arouter\",\"优点： 解除依赖，调用页面服务，只需要知道对应常量使用简单易懂，用户群体大，资料详细\",\"缺点： 常量需要下沉到基础库\",\"总之，采用Arouter方案\"]},\"1483\":{\"h\":\"\",\"t\":[\"优秀思想 ①重塑模块化，分解为三个目标 1、改变通信方式 ： spi+\\\".api化\\\" 采用 2、重新设计模块：重新设计代码分层，强化职责和设计 3、约束代码边界：隔离思想，采用pins工程 ②代码之外，架构之内 1、模块负责人制度 2、重构与开发者心态 3、模块划分经验之谈\",\"优点：指明思路和方向 缺点：代码需要自己实现\",\"评价：采用微信的组件化思想，代码逻辑需要因地制宜实现\",\"#####自己手动编写轮子Thor 组件化需要一套系统完整的方案，来综上所述的优点，也避免一些不易用的缺点，为了实现这个目标，最好的方案是Arouter+auto-register+自己造轮子补充 接下来一段时间，我要自己造轮子了，吼吼~~~\",\"#####Android架构思考(模块化、多进程)\\n也推荐这篇文章\\nhttp://blog.spinytech.com/2016/12/28/android_modularization/\"]},\"1484\":{\"c\":[\"Android组件化\"]},\"1485\":{\"c\":[\"archive\"]},\"1486\":{\"h\":\"第3章-仿微信\\\"-api\\\"化-实现原理（下）\",\"t\":[\"####导航 第3章 组件声明式编程 仿微信\\\".api\\\"化(上)第3章 仿微信\\\".api\\\"化 实现原理（下）\",\"#####1、思考路径 将原本下沉到base模块的通用性不高的代码，被重新申领到各个业务模块，运行时动态放入到base模块，在项目不断扩大时，避免了base在后期开发时急速膨胀，约束好代码边界\",\"反复参考微信Android模块化架构重构实践思想，忽然有一个灵感，“.api”文件是java JVM不识别的，可不可以在编译之前，将这些\\\".api\\\"文件变成系统可识别的。weixinapi，是这个插件由来的原因\"]},\"1487\":{\"h\":\"2、代码实现的核心逻辑\",\"t\":[\"1、将项目中所有module中\\\".api\\\"文件拷贝至指定ApiModule 2、因为java jvm不识别\\\".api\\\"文件，将ApiModule中“.api”文件后缀改为\\\".java\\\" 3、同理，将原来所有module中\\\".api\\\"文件编译时移除使用（exclude） 4、清理ApiModule中空文件夹，使该项目显得更加清晰\"]},\"1488\":{\"h\":\"3、示例核心代码 gradle脚本编写\",\"t\":[\"1、删除api_module中所有java代码 做项目初始化\",\"task cleanApiLib() { delete project.rootProject.project(':module_api').projectDir.path + \\\"/src/main/java\\\" } \",\"2、api文件拷贝指定api_module ,且文件后缀改为\\\".java\\\"\",\"task copyApiForCommLib(type: Copy) { group 'api' //遍历所有项目 将api文件 for (Project mProject : project.rootProject.getAllprojects()) { println(mProject.projectDir.path + \\\"/src/main/java\\\") from(mProject.projectDir.path + \\\"/src/main/java\\\") { include '**/**.api' } } println(project.rootProject.project(':module_api').projectDir.path + \\\"/src/main/java\\\") into file(project.rootProject.project(':module_api').projectDir.path + \\\"/src/main/java\\\") //将\\\".api\\\"改名为\\\".java\\\" rename { String filename -> int index = filename.indexOf(\\\".api\\\") String name = filename[0..index] + \\\"java\\\" return name } } \",\"3、api_module空文件夹清理\",\"task clearApiEmptyDir() { String filePath = project.rootProject.project(':module_api').projectDir.path + \\\"/src/main/java\\\" println(\\\"show all filePath:\\\" + filePath) clear(new File(filePath)) } public static void clear(File dir) { File[] dirs = dir.listFiles() for (File file : dirs) { if (file.isDirectory()) { clear(file) } } if (dir.isDirectory() && dir.delete()) println(dir.name + \\\"清理成功\\\") } \",\"4、项目编译时移除原有module中“.api”文件\",\" //删除api文件 sourceSets { main { java { exclude('**/**.api') } } } \",\"#####4、 采用groovy编写weixinApi插件 本插件采用groovy编写，难点在中间的一些语法差异，和细节优化，请大家给我一个star， 主要考虑三点：\",\"1、有利于开发者用户快速集成\",\"2、减少不必要gradle脚本，干扰到用户，重点在于业务\",\"3、增强weixinapi通用性\",\"groovy 编写其中有很多技术难点，想要学习的朋友，可以我写的插件源码component/weixinApi\",\"#####5、喜欢的朋友们记得给我的项目一个star\\nhttps://github.com/yinlingchaoliu/AndroidComponent\\n具体代码位置去\\\".api\\\"插件\\ncomponent/weixinApi\"]},\"1489\":{\"c\":[\"Android组件化\"]},\"1490\":{\"c\":[\"archive\"]},\"1491\":{\"h\":\"第3章-组件声明式编程-仿微信\\\"-api\\\"化\",\"t\":[\"今天终于方案研究出来了，双击666 ####导航 第3章 组件声明式编程 仿微信\\\".api\\\"化(上)第3章 仿微信\\\".api\\\"化 实现原理（下）\",\"#####1、背景 微信Android模块化架构重构实践，在腾讯文章中提到“.api”解决方案 原文介绍位置，建议读此文读者反复读这个位置\",\"--重塑模块化 --改变通信方式 --接口暴露 \",\"难点：技术难点卡在如何创造这两个函数上来支持这个功能\",\"include_with_api(project:\\\":plugin-messenger-foundation\\\")//初始化项目 dependencies{ compileApi(\\\":plugin-messenger-foundation\\\")//引入项目依赖 } \",\"“.api”化的功能，强大在于，在编译的时候，子组件将公用接口下沉到基础库，供其他module使用，而不会导致base module急剧增大，分工职责更加明确化 效果==>使用效果前 使用效果后==> 其中“.api”立下承担50%效果\",\"#####2、编写的思想 声明式编程：将模块中代码拆分为“声明+实现”，其他模块只需要引用声明即可。 微信的方案，只留了一个遐想空间“自动生成一个sdk工程，拷贝.api后缀文件到工程当中，后面其他工程依赖编译的只是这个生成工程，简单好用” 解决方案是那两个函数include_with_api，compileApi，此时感受到一万点暴击\",\"经过了一周的钻研已经攻克了，先从使用教程，再到原理分析\",\"#####3使用教程\",\"在根目录下build.gradle\",\"buildscript{ dependencies { //本插件代码已上传jcenter ，下载记得翻墙 classpath 'com.chaoliu:weixinApi:1.0.0' } repositories { jcenter() } } //gradle 脚本尾部 apply plugin: 'weixinApi' \",\"gradle.properties 声明\",\"##支持声明api式编程 ##引用的moudle ApiModule=':module_api' ##是否每次都执行 未配置此属性 默认为true isRunAlways=true \",\"支持weixinapi脚本自动触发，且有良心提示\",\"组名weixinapi，且有良心提示\",\"settings.gradle 正常写法\",\"//api testmodule 为lib库 include ':module_api' \",\"若有module采用\\\".api\\\"方式开发 引入公共ApiModule即可\",\"特别提供addComponent 函数，只有在assemble任务才引入依赖 开发中避免本moudle引入过多其他module声明\",\" //和正常开发无任何变化 implementation project(':module_api') // addComponent(':module_api') \",\"如果想编辑.api后缀的java文件，为了能让Android Studio继续高亮该怎么办？可以在File Type中把.api作为java文件类型。\",\"设置File Types\",\"#####4、喜欢的朋友们记得给我的项目一个star https://github.com/yinlingchaoliu/AndroidComponent 具体代码位置去\\\".api\\\"插件 component/weixinApi\",\"示例module module_main ,module_girls\",\"下一篇进行原理分析，如何进行操作，解决这个问题\"]},\"1492\":{\"c\":[\"Android组件化\"]},\"1493\":{\"c\":[\"archive\"]},\"1494\":{\"h\":\"第4章-ThorComponent组件化框架(基于CC)\",\"t\":[\"####1、编写框架涉及技术\",\"组件化涉及技术\",\"优点\",\"缺点\",\"是否选用\",\"理由\",\"serviceload\",\"调用是接口形式，比较直观\",\"模块间调用解耦不易\",\"否\",\"java的serviceload并不完备，实现多采用反射与效率背道而驰\",\"weixinapi技术\",\"解决部分公用代码动态下沉到base\",\"编写.api要注意分包摆放\",\"是\",\"项目稳定后，一般不会有下沉base代码，可以将base抽象成公共库，本作者实现\",\"组件单独运行和集成发布thorAlone\",\"编写组件减少他们之间的依赖\",\"专用sourceSet.main.debug目录，sourceSet项目中用法过于负责慎用\",\"是\",\"module间代码隔离,与壳工程隔离\",\"P工程\",\"细粒度的解耦，减少module内过度依赖\",\"一般中小项目中，粒度过于细了\",\"否\",\"一般项目多P工程解耦成本太高\",\"asm\",\"动态生成字节码效率高\",\"底层技术编写过于复杂\",\"是\",\"参照cc-register，为了效率\",\"总线模式\",\"将服务扁平化\",\"改造CC过于复杂\",\"是\",\"本框架采用改造CC，实现扁平化\",\"RPC\",\"多进程间通讯快\",\"涉及远程调用场景不多\",\"否\",\"组件化间场景并不多，建议用专门库来实现这个功能\",\"apt注解\",\"编译时注解，减少编写过多模板代码\",\"编写有些复杂，如果不是强烈需要，建议不要\",\"是\",\"组件化框架目的就是为了使用者减少不必要代码编写\",\"反射\",\"可以hack代码，也可以动态化加载\",\"运行时效率低下，用户体验差\",\"否\",\"尽量少采用反射\",\"线程池\",\"避免new Thread方式过于浪费内存资源，复用\",\"实现有技术成本且慎用\"]},\"1495\":{\"c\":[\"Android组件化\"]},\"1496\":{\"c\":[\"archive\"]},\"1497\":{\"h\":\"第一章：组件化基础\",\"t\":[\"我来洒洒水\"]},\"1498\":{\"c\":[\"Android组件化\"]},\"1499\":{\"c\":[\"archive\"]},\"1500\":{\"h\":\"组件化思路\",\"t\":[\"扁平化， 代码隔离 设置边界，合理通讯\",\"功能sdk化，业务组件化\",\"####1、当前需求\\n目前组件化文章很多，当前项目采用MVPArms，对于使用者来言，期望采用组件化方案是接入成本最小，无感知式的（不破坏原有结构），成为组件化项目。\\n最好的办法是采用公有开发规范，并用插件强行约束，\\n符合这个要求，就可以接入\\narouter页面路由，消息总线。让后续项目自然接入\"]},\"1501\":{\"c\":[\"Android组件化\"]},\"1502\":{\"c\":[\"archive\"]},\"1503\":{\"h\":\"组件化相关文章\",\"t\":[\"是时候总结一波组件化文章\",\"总结一波组件化的实现方案优缺点 https://juejin.im/entry/5aa1240b6fb9a028dc409a34\",\"美团猫眼电影android模块化实战 https://www.jianshu.com/p/d372cc6802e5\",\"Android彻底组件化demo发布 https://www.jianshu.com/p/59822a7b2fad https://github.com/mqzhangw/JIMU\",\"CC组件化 https://www.wanandroid.com/blog/show/2072 https://github.com/luckybilly/CC https://qibilly.com/CC-website/\",\"MVPArms https://www.jianshu.com/p/f671dd76868f\",\"Arouter\",\"美团WMRouter https://tech.meituan.com/2018/08/23/meituan-waimai-android-open-source-routing-framework.html https://github.com/meituan/WMRouter\",\"相关技术\",\"美团热修复Robust源码庖丁解牛 https://blog.csdn.net/xiatiandefeiyu/article/details/79020527\",\"Java ServiceLoader使用和解析 https://blog.csdn.net/shi2huang/article/details/80308531\",\"SPI https://www.jianshu.com/p/46b42f7f593c\",\"依赖注入（Spring）\",\"springcloud https://springcloud.cc\",\"Dubbo http://dubbo.apache.org/zh-cn/index.html https://blog.csdn.net/lchpersonal521/article/details/84107272\",\"http://gityuan.com\",\"https://github.com/north2016\",\"ModuleBus https://github.com/cangwang/ModuleBus\",\"T-MVP https://github.com/north2016/T-MVP https://www.jianshu.com/p/dca3e2c8608a?from=timeline https://blog.csdn.net/innost/article/details/49387395\",\"Moduler组件化demo\\nhttps://github.com/north2016/Moduler\"]},\"1504\":{\"c\":[\"Android组件化\"]},\"1505\":{\"c\":[\"archive\"]},\"1506\":{\"h\":\"kotlin-获得泛型类及泛型实例化\",\"t\":[\"kotlin 这个体验也太好了\",\"// 获得T.class inline fun <reified T> classOf() = T::class.java //获得 T object inline fun <reified T> instanceOf() = T::class.java.newInstance() fun main() { var clazz = classOf<String>() var str = instanceOf<String>() } \"]},\"1507\":{\"c\":[\"kotlin\"]},\"1508\":{\"c\":[\"archive\"]},\"1509\":{\"h\":\"kotlin中文文档\",\"t\":[\"####学习kotlin反思 快速阅读kotlin，语法大概掌握，但是细节地方，不能串联一起 解决方案：kotlin-docs.pdf手敲一遍，看书只是懂，不能直接性掌握\",\"自己练习题 https://github.com/yinlingchaoliu/KotlinExample example 章节例题 common 拆出通用性写法，便于后续复用\",\"已经将kotlin示例，可以愉快开发了\"]},\"1510\":{\"c\":[\"kotlin\"]},\"1511\":{\"c\":[\"archive\"]},\"1512\":{\"h\":\"kotlin定位\",\"t\":[\"####第一性原理 提高开发效率\",\"拆解需求： 1、语义简洁，代码清晰 2、开发速度快 3、可复用性 4、生产具有稳定性\",\"####引入kotlin语境 #####优缺点 ######1）优点： 1.简洁\",\"1. lambda表达式 2. android省略findviewbyid 3. 实体类创建简单pojo 4. 遍历操作比较简单 \",\"安全\",\"1. 空指针校验 2. 空类型保护操作 3. 自动数据类型转换 \",\"工具友好，JVM支持友好\",\"致命缺点\",\"过于追求语法简洁，特定语法不够清晰\",\"kotlin新出，高级特性，稳定性有待商榷\",\"现阶段实战解决处理方案 1）Android界面，采用kotlin，使用特有语法糖，提高效率 2）基础业务库采用java，保证核心基础库稳定 3）制定kotlin开发规范，精选一些含义清晰，代码简洁语法，保证开发效率\",\"语法糖清单(持续性增加)\",\"1. lambda表达式 2. android省略findviewbyid 3. 简单pojo 4. 遍历 5. 空指针校验 \",\"涉及语法糖重点使用，未涉及不采用kotlin\",\"####kotlin定位 Android UI界面（即MVP中View层）\"]},\"1513\":{\"c\":[\"kotlin\"]},\"1514\":{\"c\":[\"archive\"]},\"1515\":{\"h\":\"kotlin相关资料\",\"t\":[\"kotlin 实战 https://panxl6.gitbooks.io/kotlin-in-action-in-chinese/content/welcome.html\",\"kotlin中文网 https://www.kotlincn.net/docs\",\"介绍相关博客\\nhttps://juejin.im/post/5aba47ca5188255c56687783\"]},\"1516\":{\"c\":[\"kotlin\"]},\"1517\":{\"c\":[\"archive\"]},\"1518\":{\"h\":\"kotlin经典用法\",\"t\":[\"####kotlin模拟运行器 https://try.kotlinlang.org/\",\"####惯用语法\",\"函数定义\",\"//有返回值 fun sum(a: Int, b: Int): Int { return a + b } //无返回值 fun printSum(a: Int, b: Int) { println(\\\"sum of $a and $b is ${a + b}\\\") } \",\"定义变量\",\"//只读 val a: Int = 1 //变量 var x = 5 \",\"字符串模板 $\",\"var a = 1 val s1 = \\\"a is $a\\\" \",\"条件表达式统一写法\",\"if (a > b) { return a } else { return b } \",\"空值校验 null\",\"当某个变量的值可以为 null 的时候，必须在声明处的类型后添加 ? 来标识该引用可为空\",\"val str: String ?= null \",\"数据类型检测\",\"fun getStringLength(obj: Any): Int?{ if(obj is String){ return obj.length } return null } \",\"使用for循环\",\"1、类似java增强for循环\",\"//推荐这种写法 val items = listOf(\\\"apple\\\", \\\"banana\\\", \\\"kiwifruit\\\") for (item in items) { println(item) } \",\"或\",\"val items = listOf(\\\"apple\\\", \\\"banana\\\", \\\"kiwifruit\\\") for (index in items.indices) { println(\\\"item at $index is ${items[index]}\\\") } \",\"或\",\"for (i in array.indices) { println(array[i]) } for ((index, value) in array.withIndex()) { println(\\\"the element at $index is $value\\\") } \",\"while循环方法 优点：对index进行精确控制\",\"val items = listOf(\\\"apple\\\", \\\"banana\\\", \\\"kiwifruit\\\") var index = 0 while (index < items.size) { println(\\\"item at $index is ${items[index]}\\\") index++ } \",\"区间方法\",\"//升序 val n = 11 for (x in 1..n step 2) { print(x) } \",\"或\",\"//降序 for (x in 9 downTo 0 step 3) { print(x) } \",\"区间检测\",\"1、是否在某范围内\",\"val x = 10 val y = 9 if (x in 1..y+1) { println(\\\"fits in range\\\") } \",\"when 表达式 (取代switch)\",\"when (x) { 1 -> print(\\\"x == 1\\\") 2 -> print(\\\"x == 2\\\") else -> { // default print(\\\"x is neither 1 nor 2\\\") } } \",\"集合遍历\",\"//推荐用法 for (item in items) { println(item) } \",\"或\",\"//推荐用法 for ((key, value) in map) { println(\\\"$key -> $value\\\") } \",\"或 判断集合是否包含\",\"when { \\\"orange\\\" in items -> println(\\\"juicy\\\") \\\"apple\\\" in items -> println(\\\"apple is fine too\\\") } \",\"或 使用 lambda 表达式来过滤(filter)与映射(map)集合:\",\"val fruits = listOf(\\\"banana\\\", \\\"avocado\\\", \\\"apple\\\", \\\"kiwifruit\\\") fruits .filter{ it.startsWith(\\\"a\\\") } .sortedBy { it } .map { it.toUpperCase() } .forEach { println(it) } \",\"创建对象 不需要“new”关键字\",\" val rectangle = Rectangle(5.0, 2.0) \",\"####习惯用法\",\"创建实体类\",\"//推荐实体类要有默认参数 data class Customer(val name: String = \\\"\\\", var email: String = \\\"\\\") var customer: Customer = Customer(\\\"chentong\\\",\\\"7045xxx\\\") println(customer.toString()) var customer01: Customer = Customer(name=\\\"kk\\\") customer01.email = \\\"1986xxx\\\" println(customer01.toString()) //强烈推荐这种写法 语义清晰 var customer02: Customer = Customer(name=\\\"tong\\\",email=\\\"890xxx\\\") println(customer02.toString()) var customer03: Customer = Customer(\\\"03\\\") customer03.email = \\\"1986xxx\\\" println(customer03.toString()) var customer04: Customer = Customer() println(customer04.toString()) \",\"1）自带getter、setter、toString、hashcode方法 2）val(只读) 没有setter方法 3）如果生成的类需要含有一个无参的构造函数，则所有的属性必须指定默认值\",\"函数默认参数\",\"fun foo(a: Int = 0, b: String = \\\"\\\") { ...... } \",\"过滤 list(filter 内是判断条件)\",\"val listdata = listOf(1, 2, 3, -1) println(listdata.toString()) var newdata = listdata.filter{ it > 0 } println(newdata.toString()) \",\"map创建\",\"//打印map fun printMap(map: Map<String,Any?>){ for ((key, value) in map) { println(\\\"$key -> $value\\\") } } //强烈推荐第一种写法 语义清晰 var map = HashMap<String,Any?>() map.put(\\\"chen\\\",\\\"tong\\\") map.put(\\\"yang\\\",\\\"yue\\\") printMap(map) var map01 = mutableMapOf<String, Any?>() map01[\\\"chen01\\\"] = \\\"tong\\\" map01[\\\"yang01\\\"] = \\\"yue\\\" printMap(map01) var map02: HashMap<String,String> = HashMap() map02.put(\\\"chen02\\\",\\\"tong\\\") map02.put(\\\"yang02\\\",\\\"yue\\\") printMap(map02) var chen03 = \\\"tong\\\" var yang03 =\\\"yue\\\" var yuan03 = \\\"dong\\\" //左key,右value var map03 = mutableMapOf(\\\"chen03\\\" to chen03, \\\"yang03\\\" to yang03,\\\"yuan03\\\" to yuan03) printMap(map03) val map04: MutableMap<String, Any?> = mutableMapOf() map04.put(\\\"chen04\\\",\\\"tong\\\") map04.put(\\\"yang04\\\",\\\"yue\\\") map04[\\\"yuan04\\\"] = \\\"dong\\\" printMap(map04) \",\"强烈推荐第一种写法 原因： 1、简单少，语法清晰， 2、与java写法一致，上手成本低，易于理解 3、分辨map是到底哪种实现方式很重要\",\"list创建\",\"//list打印 fun printList(list: List<Any?>){ for (item in list) { println(\\\"$item\\\") } println(\\\"===end===\\\") } val lists = listOf(\\\"lists\\\", \\\"123\\\", \\\"456\\\") //没有add方法 printList(lists) //强烈推荐这种写法 var lists01 = ArrayList<String>() lists01.add(\\\"lists01\\\") lists01.add(\\\"banana\\\") printList(lists01) val lists02: MutableList<String> = mutableListOf(\\\"lists02\\\",\\\"02121\\\") lists02.add(\\\"testadd\\\") printList(lists02) //推荐这种写法 var lists03: MutableList<String> = mutableListOf() lists03.add(\\\"lists03\\\") lists03.add(\\\"676767\\\") printList(lists03) \",\"推荐第2、4种写法，清晰，简洁\",\"只读list map\",\"val list = listOf(\\\"a\\\", \\\"b\\\", \\\"c\\\") val map = mapOf(\\\"a\\\" to 1, \\\"b\\\" to 2, \\\"c\\\" to 3) \",\"访问map\",\"var map = HashMap<String,String>() map.put(\\\"chen\\\",\\\"tong\\\") map[\\\"zhang\\\"] = \\\"san\\\" println(map.get(\\\"zhang\\\")) println(map.get(\\\"chen\\\")) println(map[\\\"zhang\\\"]) println(map[\\\"chen\\\"]) \",\"快速访问推荐下面👇\",\"println(map[\\\"key\\\"]) map[\\\"key\\\"] = value \",\"延迟属性\",\"val p: String by lazy { // 计算该字符串 } \",\"创建单例\",\"object Resource { val name = \\\"Name\\\" } \",\"#####安全判断\",\"if not null缩写\",\"val lists = listOf(\\\"123\\\") println(lists?.size) \",\"if not null{} else{} 缩写\",\"val lists = listOf(\\\"123\\\") println(lists?.size ?: \\\"empty\\\") println(\\\"内容\\\" ?: \\\"empty\\\") println(null ?: \\\"empty\\\") \",\"if not null\",\"val lists = listOf(\\\"123\\\") lists?.let { // 代码会执行到此处, 假如data不为null println(lists.size) } \",\"返回 when 表达式\",\"fun transform(color: String): Int { return when (color) { \\\"Red\\\" -> 0 \\\"Green\\\" -> 1 \\\"Blue\\\" -> 2 else -> throw IllegalArgumentException(\\\"Invalid color param value\\\") } } println(transform(\\\"Red\\\")) println(transform(\\\"1\\\")) \",\"单表达式用法\",\"fun theAnswer() = 42 //等于 fun theAnswer(): Int { return 42 } \",\"一个对象调用多种方法\",\"class Turtle { fun penDown(){ println(\\\"penDown()\\\") } fun penUp(){ println(\\\"penUp()\\\") } fun turn(degrees: Double){ println(\\\"turn($degrees)\\\" ) } fun forward(pixels: Double){ println(\\\"forward($pixels)\\\") } } val myTurtle = Turtle() with(myTurtle) { // 画一个 100 像素的正方形 penDown() for(i in 1..4) { forward(100.0) turn(90.0) } penUp() } \",\"优先使用try 、if 与 when表达形式\",\"return if (x) foo() else bar() return when(x) { 0 -> \\\"zero\\\" else -> \\\"nonzero\\\" } \",\"下面代码不建议使用\",\"if (x) return foo() else return bar() when(x) { 0 -> return \\\"zero\\\" else -> return \\\"nonzero\\\" } \",\"if 适用两个条件 when 适用多个条件\",\"####基础知识 数字面值中间加下划线，易于读 val oneMillion = 1_000_000\",\"kotlin 不使用位运算\",\"数组Array\",\"if 表达式 会返回值，或代码块中值\",\"// 传统用法 var max = a if (a < b) max = b // 作为表达式 val max = if (a > b) a else b \",\"*for循环 补充\",\"for (i in array.indices) { println(array[i]) } for ((index, value) in array.withIndex()) { println(\\\"the element at $index is $value\\\") } \",\"标签 @ 即跳转地址 不建议采用 合理使用 return 、break、continue取代\",\"fun foo() { listOf(1, 2, 3, 4, 5).forEach lit@{ if (it == 3) return@lit // 局部返回到该 lambda 表达式的调用者，即 forEach 循环 print(it) } print(\\\" done with explicit label\\\") } \",\"####类与对象\",\"类的写法\",\"class Person{ var name: String = \\\"chentong\\\" //主构造函数 constructor() //主构造函数 初始化代码 init{ name = name + \\\" from Init\\\" } constructor(name: String){ this.name = name+\\\" from name\\\" } constructor(name: String, from: String){ this.name = name + \\\" from \\\" + from } } var person = Person() println(person.name) var person01 = Person(\\\"yan\\\") println(person01.name) var person02 = Person(\\\"kun\\\",\\\" China \\\") println(person02.name) \",\"类继承\",\"open class Base(p: Int) class Derived(p: Int) : Base(p) \",\"方法覆盖\",\"open class Base { open fun v() { ... } fun nv() { ... } } class Derived() : Base() { override fun v() { ... } } \",\"属性覆盖\",\"open class Foo { open val x: Int get() { ...... } } class Bar1 : Foo() { override val x: Int = ...... } \",\"子类不覆盖基类open成员\",\"#####抽象类\",\"open class Base { open fun f() {} } abstract class Derived : Base() { override abstract fun f() } \",\"#####接口\",\"接口不建议写方法体，也不建议写属性字段原则就是清晰，易懂无歧义\",\"interface MyInterface { fun bar() fun foo() {// 可选的方法体} } class Child : MyInterface { override fun bar() {// 方法体 } } \",\"#####可见性修饰 private :文件内可见 protected :只在本类与子类可见，外界引用不可见 internal:能⻅到类声明的本模块内的任何客戶端都可⻅其 internal 成员（相同模块） public ：默认是public\",\"#####扩展\",\"class C { fun foo(){println(\\\"member\\\") } } fun C.foo(i: Int) {println(\\\"extension\\\")} \",\"####泛型\",\" class Box<T>(t: T) { var value = t } val box = Box<Int>() \",\"形变 in/out 解决通配符问题\",\"类型擦除\",\"延时属性lazy 线程安全的\",\"val lazyValue: String by lazy { println(\\\"computed!\\\") \\\"Hello\\\" } fun main(args: Array<String>) { println(lazyValue) println(lazyValue) } \"]},\"1519\":{\"c\":[\"kotlin\"]},\"1520\":{\"c\":[\"archive\"]},\"1521\":{\"h\":\"kotlin重新复习\",\"t\":[\"####温故知新 将好的用法记录下来 流水账式记录\",\"kotlin哲学 实用、精简、安全\",\"原则：(DRY) Don`t Repeat Yourself\",\"表达主体\",\"fun max(a:Int, b:Int):Int = if(a>b) a else b \",\"var 变量 val 不变量\",\"类和属性\",\"class Person(val name:String) \",\"任意对象使用when，用when代替复杂if\",\"is 类型监测，智能类型转换\",\"ranges\",\"val oneToTen = 1..10 \",\"kotlin遍历几种写法\",\"in 检查范围\",\"异常处理 ：try作为表达式\",\"fun readNum(reader:BufferedReader){ var number = try{ Interger.parseInt(reader.readLine()) }catch(e:Exception){ return null } printlin(number) } \",\"list函数 last() max()\",\"类扩展 :顶层属性扩展\",\"package strings fun String.lastChar():Char = get(length-1) \",\"kotlin调用\",\"var c = \\\"abc\\\".lastChar() \",\"java调用扩展函数\",\"char c = StringUtilKt.lastChar(\\\"abc\\\") \",\"多态在kotlin中失效的\",\"可变参数 vararg\",\"元组 pairs\",\"split\",\"\\\"12.345-6.A\\\".spilt(\\\".\\\".toRegex()) \",\"kotlin接口： 带有默认实现方法\",\"open final abstract修饰符，默认final类型\",\"可见性 public默认 internal 模块内可见 protected 子类可见 private 类内部可见\",\"初始化类：主构造器和初始化器\",\"constructor init{\",\"}\",\"次构造器\",\"super(ctx)=>this(ctx) get() set(value:String)\",\"数据类\",\"data class Client(val name:String , val code :Int) \",\"copy 拷贝数据\",\"by类委托 减少大量不必要实现\",\" class DelegateCollection<T>( innerList:Conllection<T> = ArrayList<T>() ):Conllection<T> by innerList{} \",\"object 单例类 无构造函数\",\"伴生对象：访问静态函数，静态成员\",\"class A{ companion object{ fun bar(){ println(\\\"hello\\\") } } } A.bar \",\"匿名内部类 1、对象表达式 object : Clickable{\",\"}\",\"2、 lambda\",\"lambda 应用 1、集合\",\"var list =listOf(Person(\\\"a\\\",12), Person(\\\"b\\\",14)) list.maxBy{ it.age } \",\"2、语法表达式 \",\"成员引用 people::age\",\"filter 移除不想要函数 map 对合集每个元素应用给定函数\",\"var people = listOf(Person(\\\"Alice\\\",20),Person(\\\"Bob\\\",31)) people.filter{it.age > 30} output=>[Person(\\\"Bob\\\",31)] var list = listOf(1,2,3,4) list.map{ it * it } [1,4,9,16] \",\"对集合应用预言，条件判定 all 所有 any 任意 count 符合数量 find 返回符合第一个\",\"var people = listOf(Person(\\\"Alice\\\",20),Person(\\\"Bob\\\",31)) var canBe27 ={p:Person->p.age <=27} people.all(canBe27) people.any(canBe27) people.count(canBe27) people.find(canBe27) \",\"groupBy 一个将列表转化为多组映射\",\"var people = listOf(Person(\\\"Alice\\\",20),Person(\\\"Bob\\\",31), Person(\\\"Carol\\\",31)) //分组 people.groupBy{it.age} \",\"flatMap 数据变换重新排列 函数变换，多个列表合并一个集合\",\"val strings = listOf(\\\"abcc\\\",\\\"deffggrr\\\") println(strings.flatMap{it.toList()}) [a, b, c, c, d, e, f, f, g, g, r, r] \",\"//转换为序列，数据量大时，会更高效 sequence\",\"people.asSequence() //转换为序列 .map(Person::name) .filter{ it.startsWith(\\\"A\\\")} .toList() //序列转换成列表 \",\"优化，先用filter,后map\",\"with函数   建造者\\napply函数\"]},\"1522\":{\"c\":[\"kotlin\"]},\"1523\":{\"c\":[\"archive\"]},\"1524\":{\"h\":\"kotlin非空延时赋值\",\"t\":[\"1、避免空校验检查\",\"1）开始初始化的时给属性赋值个默认值 2）Delegates by notNull() 引用和属性 3）lateinit 引用\",\"序列\\nList数据量小\\nasSequence 数据量大\"]},\"1525\":{\"c\":[\"kotlin\"]},\"1526\":{\"c\":[\"archive\"]},\"1527\":{\"h\":\"Android-JNI实战用法\",\"t\":[\"####目录 cmake快速实战\",\"Android JNI基础知识讲解\",\"Android JNI实战\",\"####1、前言 对于程序员来讲，最简单方式给对方代码看 我这边项目循序渐进参考借鉴孤云，写了一套native方法，由易变难，当你用到那块方面时候，可以直接取用demo\",\"我承认是站在巨人肩膀上coding的，我只是力求更简单理解\",\"项目地址：https://github.com/yinlingchaoliu/HowToLearnNdk\",\"####2、jni基本操作 代码位置 jniapp模块下NativeLib\",\"/** * jni代码编写 通过env特定转化函数 * 建议jni调用用C封装好的函数，细节不要暴露在里面 * 标准示例 包含各种写法 */ public class NativeLib { static { System.loadLibrary( \\\"native-lib\\\" ); } //示例demo public static native int plus(int a, int b); //字符串操作 hello world public static native String getNativeString(String str); //返回字符串 public static native String getReturnString(String str); //打印字符串 public static native void printf(String str); //获得源字符串的指针 只获得指针 用于读取 中间不能有阻塞操作 public static native void printfCritical(String str); public static native int getLength(String str); public static native void printfRegion(String str); //操作数组 public static native int intArraySum(int[] intArray, int size); //返回数组 public static native int[] getIntArray(int num); //对象数组 public static native int[][] getTwoDimensionalArray(int size); //java c++ 互相调用 public static native void printAnimalsName(Animal[] animals); //访问类实例字段 set方法 public static native void setAnimalName(Animal animal,String name); //访问静态字段 public static native int getAnimalNum(Animal animal); //调用实例方法 public static native void callInstanceMethod(Animal animal); //调用静态方法 public static native String callStaticMethod(Animal animal); //构造方法 public String(char value[]) // Java String 类的其中一个构造方法 public static native String newStringInstance(); //构造方法 Animal(String name) public static native Animal invokeAnimalConstructor(String name); //构造方法 Animal(String name) 延迟初始化 AllocObject public static native Animal allocAnimalConstructor(String name); //调用父类方法 public static native void callSuperMethod(); //调用缓存字段 避免 FindClass GetFieldID ,GetMethodID重复调用 //使用时缓存 public static native void staticCacheField(Animal animal); //初始化缓存 static { initCacheMethodId(); } public static native void initCacheMethodId(); // 静态代码块中进行缓存 public static native void callCacheMethod(Animal animal); // FindClass 是局部引用，不能static缓存 //(*env)->DeleteLocalRef(env, jstr); //局部引用 public static native void localRef(); //全局引用 public static native void gloablRef(Animal animal); //弱引用 public static native void weakRef(Animal animal); //native 处理java异常 public static native void nativeInvokeJavaException(); //native 抛出java异常 public static native void nativeThrowException() throws IllegalArgumentException; } \",\"####3、jni bitmap处理\",\"public class NativeBitmap { static { System.loadLibrary( \\\"native-lib\\\" ); } // 顺时针旋转 90° 的操作 public native Bitmap rotateBitmap(Bitmap bitmap); public native Bitmap convertBitmap(Bitmap bitmap); public native Bitmap mirrorBitmap(Bitmap bitmap); } \",\"####4、posix线程操作\",\"线程是对上面的一个综合运用，为了以后方便使用，写了一个标准用法，传入java方法 要实现runnable\",\"/** * 编写一个通用库 用作示例 * 使用传入方法必须实现run方法 */ public class NativeThread { static { System.loadLibrary( \\\"native-lib\\\" ); nativeInit(); } //初始化资源 private static native void nativeInit(); //创建线程 用native执行java方法 public static native void createNativeThread(Runnable runObj); //创建多线程 public static native void posixThreads(Runnable runObj,int threadnum); //释放内存 private static native void nativeFree(); /** * Native 回到到 Java 的方法，打印当前线程名字 * * @param msg */ public static void printNativeMsg(String msg) { Log.d(\\\"NativeThread\\\", \\\"native msg is \\\" + msg); Log.d(\\\"NativeThread\\\",\\\"print native msg current thread name is \\\" + Thread.currentThread().getName()); } } \"]},\"1528\":{\"c\":[\"如何学习ndk\"]},\"1529\":{\"c\":[\"archive\"]},\"1530\":{\"h\":\"JNI基础知识讲解\",\"t\":[\"####目录\",\"cmake快速实战\",\"Android JNI基础知识讲解\",\"Android JNI实战\",\"####1、序言 学习ndk，就是为了更深入做图像识别，算法，人工智能领域 毕竟算法用C写保密性和效率比较好的，还是要将技术基本功再深入下去\",\"C特点，处理字符串非常有优势，运行快，要充分利用\",\"####2、开源demo https://github.com/yinlingchaoliu/HowToLearnNdk\",\"####3、JNI与NDK区别和学习思路\",\"JNI 全称是 Java Native Interface，即 Java 本地接口。它是用来使得 Java 语言和 C/C++ 语言相互调用的\",\"NDK 的全称是 Native Development Kit， 即C/C++开发工具包，它是用来做C/C++开发，提供了相关动态库\",\"学习顺序 1)学习JNI 2)根据业务需求学习技术\",\"####4、常用概念 #####1、JNIEnv 声明native方法 建议用static修饰\",\"public static native int plus(int a, int b); \",\"快捷键生成对应方法\",\"extern \\\"C\\\" JNIEXPORT jint JNICALL Java_com_glumes_myapplication_NativeClass_plus(JNIEnv *env, jobject instance, jint a, jint b) { jint sum = a + b; return sum; } \",\"JNIEnv 是 Java 虚拟机所运行的环境，通过它可以访问到 Java 虚拟机内部方法\",\"2、类型对比\",\"基本数据类型\",\"java类型\",\"native类型\",\"boolean\",\"jboolean\",\"byte\",\"jbyte\",\"char\",\"jchar\",\"short\",\"jshort\",\"int\",\"jnit\",\"long\",\"jlong\",\"float\",\"jfloat\",\"double\",\"jdouble\",\"对应源码\",\"typedef uint8_t jboolean; /* unsigned 8 bits */ typedef int8_t jbyte; /* signed 8 bits */ typedef uint16_t jchar; /* unsigned 16 bits */ typedef int16_t jshort; /* signed 16 bits */ typedef int32_t jint; /* signed 32 bits */ typedef int64_t jlong; /* signed 64 bits */ typedef float jfloat; /* 32-bit IEEE 754 */ typedef double jdouble; /* 64-bit IEEE 754 */ \",\"引用数据类型\",\"java类型\",\"native类型\",\"All objects\",\"jobject\",\"java.lang.Class\",\"jclass\",\"java.lang.String\",\"jstring\",\"Object[]\",\"jobjectArray\",\"boolean[]\",\"jbooleanArray\",\"byte[]\",\"jbyteArray\",\"java.lang.Throwable\",\"jthrowable\",\"char[]\",\"jcharArray\",\"short[]\",\"jshortArray\",\"int[]\",\"jintArray\",\"long[]\",\"jlongArray\",\"float[]\",\"jfloatArray\",\"double[]\",\"jdoubleArray\",\"jni操作，建议用基本数据类型和jstring\",\"####String 字符串操作\",\"java默认使用Unicode 编码\",\"C/C++默认使用UTF编码\",\"GetStringUTFChars(jstring string, jboolean* isCopy) 转换为UTF编码\",\"GetStringChars(jstring string, jboolean* isCopy) 转换为Unicode编码\",\"env结构体 有对应函数引用 方法说明不介绍 \",\"#####数组操作\",\"转换函数 intArray = env->GetIntArrayElements(intArray_, NULL); env->ReleaseIntArrayElements(intArray_, intArray, 0); GetTypeArrayRegion / SetTypeArrayRegion GetArrayLength GetPrimitiveArrayCritical / ReleasePrimitiveArrayCritical \",\"JAVA与JNI签名转换\",\"1、Java类中“.”换成“/” 2、“[”表示数组，“[”表示一维数组，“[[”表示二维数组 3、引用类型，大写字母“L”开头，“;”结尾 4、方法类型转换，先方法内，后返回参数 5 、中间无空格\",\"示例\",\"Ljava/lang/String;\",\"字符串\",\"I\",\"Int\",\"[I\",\"一维数组\",\"[[I\",\"二维数组\",\"java基础类型\",\"java基础类型\",\"JNI对应描述\",\"boolean\",\"Z\",\"byte\",\"B\",\"char\",\"C\",\"short\",\"S\",\"int\",\"I\",\"long\",\"J\",\"float\",\"F\",\"double\",\"D\",\"void\",\"V\",\"引用类型转换\",\"java引用类型\",\"JNI对应描述转换\",\"String\",\"Ljava/lang/String;\",\"Class\",\"Ljava/lang/Class;\",\"Throwable\",\"Ljava/lang/Throwable\",\"int[]\",\"[I\",\"Object[]\",\"[Ljava/lang/Object;\",\"方法签名转换\",\"java类型\",\"JNI对应描述转换\",\"String f();\",\"()Ljava/lang/String;\",\"long f(int i, Class c);\",\"(ILjava/lang/Class;)J\",\"String(byte[] bytes);\",\"([B)V\",\"####JNI引用管理 #####1、局部引用 局部引用会阻止 GC 回收所引用的对象，同时，它不能在本地函数中跨函数传递，不能跨线程使用。\",\"局部引用不能用static缓存 否则函数退出，局部引用被释放，static变量会成为一个野指针\",\"申请内存函数 NewObject FindClass NewObjectArray ,new开头函数 采用DeleteLocalRef 手动回收\",\"回收建议：不用要第一时间释放\",\"局部引用函数\",\"EnsureLocalCapacity\",\"native方法 最少创建16个局部引用，复杂情况用EnsureLocalCapacity申请额外开销\",\"int len = 20; if (env->EnsureLocalCapacity(len) < 0) { // 创建失败，out of memory } for (int i = 0; i < len; ++i) { jstring jstr = env->GetObjectArrayElement(arr,i); } \",\"PushLocalFrame & PopLocalFrame配对使用 创建一个指定数量内嵌空间，在函数对之间局部引用都会在这个空间，释放后，这段空间内所有被释放掉 类似压栈出栈\",\"int len = 10; if (env->PushLocalFrame(len)) { // 创建指定数据的局部引用空间 //out ot memory } //中间各种局部引用代码 //todo jstring jstr = env->GetObjectArrayElement(arr,i); //中间各种局部引用代码 //中间各种局部引用代码 //弹出所有局部引用 env->PopLocalFrame(NULL); \",\"#####2、全局引用 全局引用和局部引用一样，也会阻止它所引用的对象被回收。但是它不会在方法返回时被自动释放，必须要通过手动释放才行，而且，全局引用可以跨方法、跨线程使用。\",\"全局引用可以用static保存 NewGlobalRef DeleteGlobalRef\",\"#####3、弱引用 弱全局引用有点类似于 Java 中的弱引用，它所引用的对象可以被 GC 回收，并且它也可以跨方法、跨线程使用。\",\"isSameObject //监测 NewWeakGlobalRef //新建 DeleteWeakGlobalRef //删除\",\"isSameObject其他用途\",\"env->IsSameObject(obj1, obj2) // 比较局部引用 和 全局引用是否相同 env->IsSameObject(obj, NULL) // 比较局部引用或者全局引用是否为 NULL env->IsSameObject(wobj, NULL) // 比较弱全局引用所引用对象是否被 GC 回收 \",\"总结：局部引用最好用PushLocalFrame & PopLocalFrame配对使用\\nNewLocalRef 可以保证返回一个局部引用\"]},\"1531\":{\"c\":[\"如何学习ndk\"]},\"1532\":{\"c\":[\"archive\"]},\"1533\":{\"h\":\"cmake快速实战\",\"t\":[\"####目录 cmake快速实战\",\"Android JNI基础知识讲解\",\"Android JNI实战\"]},\"1534\":{\"h\":\"makefile前言\",\"t\":[\"我写过makefile，编写过简单makefile框架, 但是cmake比较简单一些。 原理简单 编写输入：环境变量，cpp, c，h文件 编写输出：lib, so, bin (即静态库，动态库，二进制执行文件)\",\"cmake官网\",\"https://cmake.org/cmake/help/latest/guide/tutorial/index.html \",\"####常用方法\",\"set 设置变量\",\"include_directories 将头文件添加到搜索路径中\",\"aux_source_directory 当前目录所有源文件保存到指定变量\",\"add_subdirectory 添加子目录\",\"add_library 指定要编译的库\",\"add_executable 生成执行文件\",\"target_link_libraries 将库链接\",\"add_test 测试工具\",\"####模板式编写cmake #####1、创建CMakeLists.txt\",\"1、生成执行程序\",\"# 指定 CMake 使用版本 cmake_minimum_required(VERSION 3.6) # 工程名 project(hello) #设置变量 set(SRC_LIST hello.cpp) # 编译可执行文件 add_executable(helloBin ${SRC_LIST} ) \",\"2、生成静态库\",\"project(hello) set(LIB_SRC hello.cpp) add_library(libhello STATIC ${LIB_SRC}) \",\"标准模板写法\",\"# 查找当前目录下的所有源文件 # 并将名称保存到 DIR_LIB_SRCS 变量 aux_source_directory(. DIR_LIB_SRCS) #当前文件夹名称 便于生成模板代码 STRING( REGEX REPLACE \\\".*/(.*)\\\" \\\"\\\\1\\\" CURRENT_FOLDER ${CMAKE_CURRENT_SOURCE_DIR} ) set(TARGET ${CURRENT_FOLDER}) # 指定生成 TARGET 静态库 add_library (${TARGET} ${DIR_LIB_SRCS}) \",\"3、生成动态库\",\"project(HELLO) set(LIB_SRC hello.c) add_library(dllhello SHARED ${LIB_SRC}） \",\"#####2、引入cmake环境变量及编译 环境变量\",\"#引入环境变量 cmake vi .bash_profile #cmake export PATH=$PATH:/Users/chentong/Android/sdk/cmake/3.6.4111459/bin wq保存 source .bash_profile //环境变量生效 \",\"编译 示例在demo1中\",\"cmake CMakeLists.txt //编译cmake文件 make //编译 \",\"输出\",\"yingzi:demo1 chentong$ cmake CMakeLists.txt -- The C compiler identification is AppleClang 11.0.0.11000033 -- The CXX compiler identification is AppleClang 11.0.0.11000033 -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Detecting C compile features -- Detecting C compile features - done -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works -- Detecting CXX compiler ABI info -- Detecting CXX compiler ABI info - done -- Detecting CXX compile features -- Detecting CXX compile features - done -- Configuring done -- Generating done -- Build files have been written to: /Users/chentong/Android/taixin/HowToLearnNdk/demo1 yingzi:demo1 chentong$ make Scanning dependencies of target helloBin [ 50%] Building CXX object CMakeFiles/helloBin.dir/hello.cpp.o [100%] Linking CXX executable helloBin [100%] Built target helloBin \",\"cmake 打印\",\"message(\\\"hello\\\") message(\\\"${PROJECT_SOURCE_DIR}\\\") \",\"cmake option选项开关 cmake -DUSE_HELLO=OFF CMakeLists.txt 用命令来调节\",\"# 是否使用自己的 hello 库 --option开关选项 option (USE_HELLO \\\"Use provided hello implementation\\\" ON) # 是否加入 hello 库 if (USE_HELLO) include_directories (\\\"${PROJECT_SOURCE_DIR}/hello\\\") add_subdirectory (hello) set (HELLO_LIBS hello) endif (USE_HELLO) \",\"获取当前文件夹名 作为当前项目TARGET，便于生成模板代码\",\"//当前目录完整路径 message(${CMAKE_CURRENT_SOURCE_DIR}) STRING( REGEX REPLACE \\\".*/(.*)\\\" \\\"\\\\1\\\" CURRENT_FOLDER ${CMAKE_CURRENT_SOURCE_DIR} ) //当前文件 message(${CURRENT_FOLDER}) set(TARGET ${CURRENT_FOLDER}) \",\"安装 默认安装到 /usr/local/下面 命令 make install\",\"install (TARGETS ${TARGET} DESTINATION lib) install (FILES cmath.h DESTINATION include) install (TARGETS ${MAIN_BIN} DESTINATION bin) install (FILES \\\"${PROJECT_BINARY_DIR}/config.h\\\" DESTINATION include) \",\"测试 推荐定义一个宏，用来简化测试工作\",\"#定义二进制文件变量 set (MAIN_BIN mainBin) # 启用测试 enable_testing() # 测试程序是否成功运行 #语法 add_test(flag , bin ,arg1,arg2...) eg 1: add_test (test_demo ${MAIN_BIN} 5 2) # 测试帮助信息是否可以正常提示 add_test (test_usage ${MAIN_BIN}) set_tests_properties (test_usage PROPERTIES PASS_REGULAR_EXPRESSION \\\"Usage: .* base exponent\\\") # 测试 5 的平方 为 25 add_test (test_5_2 ${MAIN_BIN} 5 2) set_tests_properties (test_5_2 PROPERTIES PASS_REGULAR_EXPRESSION \\\"is 25\\\") # 定义一个宏，用来简化测试工作 测试函数 抽象工作 macro (do_test arg1 arg2 result) add_test (do_test_${arg1}_${arg2} ${MAIN_BIN} ${arg1} ${arg2}) set_tests_properties (do_test_${arg1}_${arg2} PROPERTIES PASS_REGULAR_EXPRESSION ${result}) endmacro (do_test) # 利用 do_test 宏，测试一系列数据,起到简化效果 do_test (2 10 \\\"is 1024\\\") do_test (3 3 \\\"is 27\\\") do_test (8 2 \\\"is 64\\\") \",\"文件改动，测试前，必须先make编译 ,再ctest 输出结果\",\"yingzi:demo5 chentong$ make test Running tests... Test project /Users/chentong/Android/taixin/HowToLearnNdk/cmake-demo/demo5 Start 1: test_demo 1/6 Test #1: test_demo ........................ Passed 0.00 sec Start 2: test_usage 2/6 Test #2: test_usage ....................... Passed 0.00 sec Start 3: test_5_2 3/6 Test #3: test_5_2 ......................... Passed 0.00 sec Start 4: do_test_2_10 4/6 Test #4: do_test_2_10 ..................... Passed 0.00 sec Start 5: do_test_3_3 5/6 Test #5: do_test_3_3 ...................... Passed 0.00 sec Start 6: do_test_8_2 6/6 Test #6: do_test_8_2 ...................... Passed 0.00 sec 100% tests passed, 0 tests failed out of 6 Total Test time (real) = 0.02 sec \",\"支持gdb\",\"set(CMAKE_BUILD_TYPE \\\"Debug\\\") set(CMAKE_CXX_FLAGS_DEBUG \\\"$ENV{CXXFLAGS} -O0 -Wall -g -ggdb\\\") set(CMAKE_CXX_FLAGS_RELEASE \\\"$ENV{CXXFLAGS} -O3 -Wall\\\") \",\"检查系统是否有指定函数\",\"# 检查系统是否支持 pow 函数 include (${CMAKE_ROOT}/Modules/CheckFunctionExists.cmake) check_function_exists (pow HAVE_POW) \",\"添加版本号\",\"set (Demo_VERSION_MAJOR 1) set (Demo_VERSION_MINOR 0) # 加入一个配置头文件，用于处理 CMake 对源码的设置 configure_file ( \\\"${PROJECT_SOURCE_DIR}/config.h.in\\\" \\\"${PROJECT_BINARY_DIR}/config.h\\\" ) \",\"config.h.in\",\"#define Demo_VERSION_MAJOR @Demo_VERSION_MAJOR@ #define Demo_VERSION_MINOR @Demo_VERSION_MINOR@ \",\"main.cpp\",\"int main(int argc, char *argv[]) { printf(\\\"%s Version %d.%d \\\", argv[0], Demo_VERSION_MAJOR, Demo_VERSION_MINOR); return 0; } \",\"cpack 打包\",\"# 构建一个 CPack 安装包 include (InstallRequiredSystemLibraries) # License授权 set (CPACK_RESOURCE_FILE_LICENSE \\\"${CMAKE_CURRENT_SOURCE_DIR}/License.txt\\\") set (CPACK_PACKAGE_VERSION_MAJOR \\\"${Demo_VERSION_MAJOR}\\\") set (CPACK_PACKAGE_VERSION_MINOR \\\"${Demo_VERSION_MINOR}\\\") include (CPack) \",\"cpack命令\",\"#生成二进制安装包： cpack -C CPackConfig.cmake #生成源码安装包 cpack -C CPackSourceConfig.cmake \",\"开源代码示例 https://github.com/yinlingchaoliu/HowToLearnNdk\",\"####参考范例\\nCMake 入门实战\\nhttp://www.hahack.com/codes/cmake/\\n源代码\\nhttps://github.com/wzpan/cmake-demo\"]},\"1535\":{\"c\":[\"如何学习ndk\"]},\"1536\":{\"c\":[\"archive\"]},\"1537\":{\"h\":\"opengl图像学习方法论\",\"t\":[\"####前言\\n学习要高效快速，如果不是，就存在优化空间\\n因突然原因，我要快速去学算法- -!\"]},\"1538\":{\"c\":[\"如何学习ndk\"]},\"1539\":{\"c\":[\"archive\"]},\"1540\":{\"h\":\"opengl快速学习\",\"t\":[\"####前言 https://juejin.im/post/5e00bc2051882512454b44f3\",\"opengl学习方法\",\"1）原理 原理便于系统理解opengl\",\"2）通用封装方法 封装是基于整体性理解，用面向对象思想封装，增加复用性同时，也增加易用性\",\"3）实战范例 实战范例目的是新手在项目基础上修改，通过直观效果，更容易理解opengl 案例：https://github.com/yinlingchaoliu/HowToLearnNdk 模块：opengl\",\"####opengl原理及思考\",\"#####1、 opengl的安卓支持\",\"1、Android为opengl提供特定视图GLSurfaceView，可以单独运行在一个单独线程中，提供渲染方法setRenderer来设置渲染器\",\"实现特定渲染器，可以让图像效果多样化 GLSurfaceView. Renderer\",\"渲染器\",\" public interface Renderer { //视图创建时调用 初始化工作 void onSurfaceCreated(GL10 gl, EGLConfig config); //视图改变时调用 主流程绘制工作 void onSurfaceChanged(GL10 gl, int width, int height); //视图绘制时调用 实时监测工作 void onDrawFrame(GL10 gl); } \",\"2、opengl坐标 OpenGL 都会把手机屏幕映射到 [-1，1] 的范围内。也就是说：屏幕的左边对应 X 轴的 -1 ，屏幕的右边对应 +1，屏幕的底边会对应 Y 轴的 -1，而屏幕的顶边就对应 +1,屏幕中心[0,0]\",\"3、基本图元 点、线、三角形 其他所有图形都是基于三种图元完成，矩形视为两个三角形拼成\",\"#####2、基本思考 编写代码时刻要考虑，视图与逻辑分离作为第一原则 1、图像基本组成要素是一样的，要抽象出来增加复用性 2、图像修改，要通过回调来操作，避免业务代码写到图像代码中，增加可读性 3、每种图形GLSurfaceView，Renderer代码中，避免过多全局变量，如果渲染器或图形视图过于复杂，要分开写\",\"#####opengl 整体渲染流程\",\"######1、渲染管线及流程\",\"1）渲染管线也称为渲染流水线或像素流水线或像素管线，是显示芯片内部（GPU）处理图形信号相互独立的并行处理单元。现阶段显卡分为顶点渲染和像素渲染\",\"opengl渲染管线处理流程\",\"顶点着色器 ：根据顶点坐标，建立图形模型。 片段着色器：图形填上颜色。\",\"目前手机上opengl使用渲染管线，围绕形状绘制和着色展开工作\",\"1、读取顶点数据-内存拷贝 将顶点坐标通过内存拷贝传递给渲染管线 Java层传递\",\" // 声明一个字节缓冲区 FloatBuffer private FloatBuffer floatBuffer; // 定义顶点数据 float[] vertexData = new float[16]; // FloatBuffer 初始化工作并放入顶点数据 floatBuffer = ByteBuffer .allocateDirect(vertexData.length * Constant.BYTES_PRE_FLOAT) .order(ByteOrder.nativeOrder()) .asFloatBuffer() .put(vertexData); \",\"2、执行顶点着色器和组装图元 用GLSL语言定义着色\",\"attribute vec4 a_Position; void main() { gl_Position = a_Position; //接收顶点坐标 gl_PointSize = 30.0; //点大小 } \",\"顶点坐标 a_Position 特殊全局变量 gl_Position 和 gl_PointSize 实战：要提供通用ShapeUtil工具类，便于快速着色\",\"3、光栅化图元 OpenGL 就是通过 光栅化 技术的过程把每个点、直线及三角形分解成大量的小片段，它们可以映射到移动设备显示屏的像素上，从而生成一幅图像\",\"4、执行片段着色器 片段着色器的主要目的就是告诉 GPU 每个片段的最终颜色应该是什么\",\"precision mediump float; //精度 uniform vec4 u_Color; //颜色 void main() { gl_FragColor = u_Color; } \",\"颜色的全局变量 ：gl_FragColor java层颜色赋值：u_Color 精度：mediump 片段着色之后，自动写入缓存，显示在屏幕上\",\"#####2、opengl代码编写完整流程\",\"1、编译OpenGL程序 四步流程 1、编译着色器 2、创建opengl程序和着色器链接 3、验证OpenGL程序 4、使用opengl程序\",\"public class ShaderHelper { //编译着色器 public static int compileShader(int type, String shaderCode); //创建 OpenGL 程序和着色器链接 public static int linkProgram(int vertexShaderId, int fragmentShaderId) ; //验证OpenGL程序 public static boolean validateProgram(int programObjectId) ; //使用open程序 public static void glUseProgram(int program)； } \",\"2、绘制Renderer渲染器\",\"3、GLSurfaceView与 特别注意\",\"创建opengl必须在onSurfaceCreated()方法中，才能生效 \"]},\"1541\":{\"c\":[\"如何学习ndk\"]},\"1542\":{\"c\":[\"archive\"]},\"1543\":{\"h\":\"如何学习ndk\",\"t\":[\"####前言\\n最近学习孤云大神的ndk项目，通过视频链接。\\n看视频是个很寂寞的事情，不如代码来的直接，\\n我就把观看视频写得实战demo，用代码来说话。\\n写一个可移植性的程序，别人只需要看源码和注释就可以上手了\"]},\"1544\":{\"c\":[\"如何学习ndk\"]},\"1545\":{\"c\":[\"archive\"]},\"1546\":{\"h\":\"EventBus源码分析\",\"t\":[\"###EventBus源码分析 ####1、源码分析要点 EventBus是观察者模式，是一对多，一般源码分析的重点在register方法上，分析的核心应在在消息队列上PendingPostQueue\",\"1、消息队列\",\"PendingPostQueue{ void enqueue(PendingPost pendingPost)//加入消息 PendingPost poll()//取出消息 } \",\"2、处理消息核心 五种策略\",\"interface Poster { void enqueue(Subscription subscription, Object event);//加入消息 } \",\"####1、Poster消息队列存取\",\"class XXXPoster implements Runnable, Poster { public void enqueue(Subscription subscription, Object event) { //插入消息 PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event); queue.enqueue(pendingPost); //运行 eventBus.getExecutorService().execute(this); } @Override public void run() { //取出消息 PendingPost pendingPost = queue.poll(); //处理消息 eventBus.invokeSubscriber(pendingPost); } } \",\"####2、register消费者注册列表\",\"public void register(Object subscriber) { Class<?> subscriberClass = subscriber.getClass(); //获得该类注解信息列表 List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass); synchronized (this) { for (SubscriberMethod subscriberMethod : subscriberMethods) { subscribe(subscriber, subscriberMethod); } } } \",\"private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) { Class<?> eventType = subscriberMethod.eventType; Subscription newSubscription = new Subscription(subscriber, subscriberMethod); //注册事件列表 CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType); if (subscriptions == null) { subscriptions = new CopyOnWriteArrayList<>(); subscriptionsByEventType.put(eventType, subscriptions); } //注册该类 List<Class<?>> subscribedEvents = typesBySubscriber.get(subscriber); if (subscribedEvents == null) { subscribedEvents = new ArrayList<>(); typesBySubscriber.put(subscriber, subscribedEvents); } subscribedEvents.add(eventType); } \",\"找该类所有注解方法\",\" List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) { List<SubscriberMethod> subscriberMethods = METHOD_CACHE.get(subscriberClass); subscriberMethods = findUsingReflection(subscriberClass); return subscriberMethods; } \",\"//寻找注解实现\",\"private void findUsingReflectionInSingleClass(FindState findState) { Method[] methods; try { // This is faster than getMethods, especially when subscribers are fat classes like Activities methods = findState.clazz.getDeclaredMethods(); } catch (Throwable th) { methods = findState.clazz.getMethods(); findState.skipSuperClasses = true; } for (Method method : methods) { int modifiers = method.getModifiers(); if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) { Class<?>[] parameterTypes = method.getParameterTypes(); if (parameterTypes.length == 1) { Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class); if (subscribeAnnotation != null) { Class<?> eventType = parameterTypes[0]; if (findState.checkAdd(method, eventType)) { ThreadMode threadMode = subscribeAnnotation.threadMode(); findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode, subscribeAnnotation.priority(), subscribeAnnotation.sticky())); } } } } } \",\"####3、post放入消息流程\",\"post(event)-->postSingleEvent()-->postSingleEventForEventType()-->postToSubscription()-->XXXPoster.enqueue(subscription, event) \",\"1、通过event寻找注册类\",\"private void postSingleEvent(Object event, PostingThreadState postingState) throws Error { Class<?> eventClass = event.getClass(); boolean subscriptionFound = false; List<Class<?>> eventTypes = lookupAllEventTypes(eventClass); int countTypes = eventTypes.size(); for (int h = 0; h < countTypes; h++) { Class<?> clazz = eventTypes.get(h); subscriptionFound |= postSingleEventForEventType(event, postingState, clazz); } } \",\"通过event寻找该注册类函数清单，发送\",\"private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class<?> eventClass) { CopyOnWriteArrayList<Subscription> subscriptions; synchronized (this) { //通过发送事件类型寻找注册表 subscriptions = subscriptionsByEventType.get(eventClass); } //遍历整个列表发送消息 for (Subscription subscription : subscriptions) { postingState.event = event; postingState.subscription = subscription; //处理消息 postToSubscription(subscription, event, postingState.isMainThread); } return true; } return false; } \",\"####4、普通post与postSticky区别 1、postSticky 缓存最新的一个事件 2、register后，postSticky 自动触发一遍该类的缓存的事件\",\"public void postSticky(Object event) { synchronized (stickyEvents) { stickyEvents.put(event.getClass(), event); } post(event); } \",\"private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) { if (subscriberMethod.sticky) { Object stickyEvent = stickyEvents.get(eventType); checkPostStickyEventToSubscription(newSubscription, stickyEvent); } } \",\"####定制化RxBus\\n#####设计rxbus重点\\n1、调用方式与EventBus一致，降低使用成本\\n2、rxjava是观察者模式，可以替换Eventbus消息队列和处理消息的策略模式\\n3、支持线程安全\\n4、支持黏性事件\"]},\"1547\":{\"c\":[\"框架编写分析\"]},\"1548\":{\"c\":[\"archive\"]},\"1549\":{\"h\":\"MVPArmsHelper-网络代码自动生成插件\",\"t\":[\"####导航 MVPArmsHelper 网络代码自动生成插件MVPArmsHelper插件编写环境配置（一）MVPArmsHelper插件编写代码编写（二）\",\"使用教程 1、导入插件ArmMVPHelper.zip\",\"2、选中URL（完整的一行） \",\"3、Generate -->ArmMVP Network Helper\",\"4、弹出alert框 \",\"注： 1、此外Api.java 文件ArmMVPHelper自动拼写@Field @FieldMap @Query @QueryMap @Body 不需要手动添加 2、bean目录自动生成没有的Bean实体类\",\"5、生成效果如下 点击ok ArmMVPHelper自动生成代码 如下 \",\"插件下载地址 https://github.com/yinlingchaoliu/MVPArmsNetworkHelper/blob/master/MVPArmsNetworkHelper.zip\",\"github 代码\\nhttps://github.com/yinlingchaoliu/MVPArmsNetworkHelper\"]},\"1550\":{\"c\":[\"框架编写分析\"]},\"1551\":{\"c\":[\"archive\"]},\"1552\":{\"h\":\"MVPArmsHelper插件编写代码编写（二）\",\"t\":[\"####导航 MVPArmsHelper 网络代码自动生成插件MVPArmsHelper插件编写环境配置（一）MVPArmsHelper插件编写代码编写（二）\",\"####一、插件编写流程 1、触发Action事件，获得复制内容（见上一） 2、弹框补充信息 3、生成对应模板信息 4、动态插入文件\",\"####一、弹框补充对应信息 新建--》GUI Form 生成文件继承JFrame 如安卓代码一般编写 拖拽的时候自动生成控件ID\",\"####二、生成对应模板信息类 详见ArmsConstant.java\",\"三、动态插入文件 核心是PSI 程序结构接口，通俗讲java像xml一样解析 http://www.jetbrains.org/intellij/sdk/docs/basics/architectural_overview/psi.html?search=Psi\",\"修改project文件 常见三个点 1、寻找文件 2、java文件加载、解析、 3、新文件写入内容(非java)\",\"1、寻找文件\",\"//api FilenameIndex.getFilesByName(project, name, scope); //真实封装 public static PsiFile getFileByName(PsiFile psiFile, String fileName) { Project project = psiFile.getProject(); PsiFile[] psiFiles = FilenameIndex.getFilesByName(project, fileName, new EverythingGlobalScope(psiFile.getProject())); if (psiFiles.length != 0) { return psiFiles[0]; } return null; } \",\"2、java文件加载、解析、\",\"//psiFile转psiClass public static PsiClass getPsiClass(PsiFile psiFile) { String fullName = psiFile.getName(); String className = fullName.split(\\\"\\\\.\\\")[0]; PsiClass[] psiClasses = PsiShortNamesCache.getInstance(psiFile.getProject()).getClassesByName(className, new EverythingGlobalScope(psiFile.getProject())); return psiClasses[0]; } \",\"//插入文件 PsiElementFactory factory = PsiFileUtils.getFactory(psiFile); String content = ArmConstant.getPageContractView(entity); psiClass.add(factory.createMethodFromText(content,psiClass)); \",\"//新建文件写入\",\"directory.createFile(entity.getClearResponseBean()+\\\".java\\\"); PsiFile file = directory.findFile(entity.getClearResponseBean()+\\\".java\\\"); VirtualFile vf= file.getVirtualFile(); String content = ArmConstant.getBeanStr(entity); ToastUtil.show(content); try { vf.setBinaryContent(content.getBytes()); } catch (IOException e) { e.printStackTrace(); } \",\"####部署 编译后可以生成插件\",\"####github 代码\\nhttps://github.com/yinlingchaoliu/MVPArmsNetworkHelper\"]},\"1553\":{\"c\":[\"框架编写分析\"]},\"1554\":{\"c\":[\"archive\"]},\"1555\":{\"h\":\"MVPArmsHelper插件编写环境配置（一）\",\"t\":[\"####导航 MVPArmsHelper 网络代码自动生成插件MVPArmsHelper插件编写环境配置（一）MVPArmsHelper插件编写代码编写（二）\",\"#####一、环境配置 1、IntelliJ IDE开发 https://www.jetbrains.com/idea/download/ 建议下载 Community 免费版 2、groovy下载 https://groovy.apache.org/download.html 配置 .bash_profile文件添加\",\"export PATH=$PATH:/Users/chentong/Android/groovy-2.5.6/bin $ source .bash_profile \",\"新建插件项目 选择IntelliJ Platform Plugin\",\"配置jdk\",\"运行项目报错 One of the two will be used. Which one is undefined. 解决方案：https://www.jianshu.com/p/26cefcc04fec\",\"#####二、目录结构 \",\".idea: idea的一些配置信息。\",\"out: 编译生成文件，\",\"resources/META-INF/plugin.xml: 插件的一些描述信息\",\"src: 这里就是我们要写代码的地方啦。\",\".iml: 项目的一些自动配置信息\",\"####配置插件信息\",\"<idea-plugin> <id>com.network.helper.mvparmshelper</id> <name>ArmMVPHelper</name> <version>1.0</version> <vendor email=\\\"704514698@qq.com\\\" url=\\\"https://www.jianshu.com/u/bdcce32c05dd\\\">陈桐</vendor> <description>ArmMVP框架 网络代码自动生成工具</description> <change-notes>第一版</change-notes> <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description --> <idea-version since-build=\\\"173.0\\\"/> <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html on how to target different products --> <!-- uncomment to enable plugin in all products <depends>com.intellij.modules.lang</depends> --> <extensions defaultExtensionNs=\\\"com.intellij\\\"> <!-- Add your extensions here --> </extensions> <!-- 类似android manifiest --> <actions> <!-- Add your actions here --> <!--<action class=\\\"com.network.helper.armmvp\\\"/>--> <action id=\\\"armnetwork\\\" class=\\\"com.network.helper.NetworkHelper\\\" text=\\\"ArmMVP Network Helper\\\" description=\\\"Arm MVP 网络代码自动生成工具\\\"> <add-to-group group-id=\\\"GenerateGroup\\\" anchor=\\\"last\\\"/> </action> </actions> </idea-plugin> \",\"id： 插件唯一的id。\",\"name： 插件显示的名字。\",\"version： 插件版本\",\"vendor： 里面分别是你的邮箱，公司网站或个人网站，公司名。\",\"description： 插件的描述。\",\"change-notes： 更新文档。\",\"extensions defaultExtensionNs： 默认依赖的库。\",\"actions： 注册动作Action类。\",\"####配置Action 新建Action \",\"public class NetworkHelper extends AnAction { @Override public void actionPerformed(AnActionEvent anActionEvent) { } } \",\"提供两个方法 1、获得光标下单词\",\"public static PsiElement getPsiElement(Editor editor, PsiFile psiFile) { if (editor == null || psiFile == null) { return null; } CaretModel caret = editor.getCaretModel(); PsiElement psiElement = psiFile.findElementAt(caret.getOffset()); return psiElement; } psiElement.getText(); \",\"2、获得当前复制内容\",\"public static String getSelectedText(Editor editor) { if (editor == null) { return null; } return editor.getSelectionModel().getSelectedText(); } \",\"####github 代码\\nhttps://github.com/yinlingchaoliu/MVPArmsNetworkHelper\"]},\"1556\":{\"c\":[\"框架编写分析\"]},\"1557\":{\"c\":[\"archive\"]},\"1558\":{\"h\":\"RESTMock\",\"t\":[\" testImplementation 'com.github.andrzejchm.RESTMock:android:0.3.1' allprojects { repositories { maven { url \\\"https://jitpack.io\\\" } } } \",\"####use\",\"RESTMockServer.whenGET(pathContains(\\\"users/andrzejchm\\\")) .thenReturnFile(200, \\\"users/andrzejchm.json\\\"); \",\"url\\nhttps://github.com/andrzejchm/RESTMock\"]},\"1559\":{\"c\":[\"框架编写分析\"]},\"1560\":{\"c\":[\"archive\"]},\"1561\":{\"h\":\"Transform-AOP---Transform-API介绍\",\"t\":[\"####起因 最初使用沪江的aspectjx，做click去重出现问题。经过2天仔细排查找到原因，翻阅aspectjx源码,主要采用 transform + aspectj /asm ，发现此类技术解决方案，在应用非常广泛（权限判断，无痕埋点，性能监控，事件防抖，热修复，优化代码），非常有研究价值，网上关于aop研究不够深入，只是简单接入，为了深入学习，项目基于hujiang项目进行改造，来贯穿各个知识点，改造出适应当前项目的aop\",\"####感慨 碎片化知识可以应付项目一时之急，但是不利于长期发展\",\"参考 https://github.com/Qihoo360/ArgusAPM https://github.com/didi/booster https://booster.johnsonlee.io https://github.com/bytedance/ByteX\",\"####app打包过程\",\"####transform介绍\",\"Transform应用场景 1、对编译class文件做自定义处理 2、读取编译class文件信息\",\"Transform API\",\" \",\"####实战项目地址\\nhttps://github.com/yinlingchaoliu/TransformAOP\"]},\"1562\":{\"c\":[\"框架编写分析\"]},\"1563\":{\"c\":[\"archive\"]},\"1564\":{\"h\":\"android单元测试\",\"t\":[\"https://github.com/simplezhli/AndroidUT\\nAndroid开发中必要的一环---单元测试（Unit Test）\\n鸿阳\\nhttps://mp.weixin.qq.com/s/mMMcuuEHgbY67_UoyNq8gQ\\n美团单元测试\\nhttps://tech.meituan.com/2015/12/24/android-unit-test.html\"]},\"1565\":{\"c\":[\"框架编写分析\"]},\"1566\":{\"c\":[\"archive\"]},\"1567\":{\"h\":\"assertj-android\",\"t\":[\"//常用top 5 testImplementation 'com.squareup.assertj:assertj-android:1.2.0' testImplementation 'com.squareup.assertj:assertj-android-support-v4:1.2.0' testImplementation 'com.squareup.assertj:assertj-android-appcompat-v7:1.2.0' testImplementation 'com.squareup.assertj:assertj-android-design:1.2.0' testImplementation 'com.squareup.assertj:assertj-android-recyclerview-v7:1.2.0' //不常用的 testImplementation 'com.squareup.assertj:assertj-android-play-services:1.2.0' testImplementation 'com.squareup.assertj:assertj-android-mediarouter-v7:1.2.0' testImplementation 'com.squareup.assertj:assertj-android-gridlayout-v7:1.2.0' testImplementation 'com.squareup.assertj:assertj-android-cardview-v7:1.2.0' testImplementation 'com.squareup.assertj:assertj-android-palette-v7:1.2.0' \",\"####Example\",\"AssertJ Android:\",\"assertThat(view).isGone(); \",\"Regular JUnit:\",\"assertEquals(View.GONE, view.getVisibility()); \",\"Regular AssertJ:\",\"assertThat(view.getVisibility()).isEqualTo(View.GONE); \"]},\"1568\":{\"h\":\"ALL\",\"t\":[\"AssertJ Android:\",\"assertThat(layout).isVisible() .isVertical() .hasChildCount(4) .hasShowDividers(SHOW_DIVIDERS_MIDDLE); \",\"url\\nhttps://github.com/square/assertj-android\"]},\"1569\":{\"c\":[\"框架编写分析\"]},\"1570\":{\"c\":[\"archive\"]},\"1571\":{\"h\":\"dragger2用法详见demo\",\"t\":[\"https://github.com/yinlingchaoliu/DraggerDemo\"]},\"1572\":{\"c\":[\"框架编写分析\"]},\"1573\":{\"c\":[\"archive\"]},\"1574\":{\"h\":\"gradle插件编写\",\"t\":[\"经典gradle插件编写 https://blog.csdn.net/jeasonlzy/article/details/74273953\",\"任玉刚三连击 Gradle从入门到实战 - Groovy基础 https://blog.csdn.net/singwhatiwanna/article/details/76084580 全面理解Gradle - 定义Task https://blog.csdn.net/singwhatiwanna/article/details/78898113 全面理解Gradle - 执行时序 https://blog.csdn.net/singwhatiwanna/article/details/78797506\",\"gradle 插件 参考手册 https://docs.gradle.org/current/userguide/userguide.html\",\"参考\\nhttps://www.jianshu.com/p/e7a40a592f15\"]},\"1575\":{\"c\":[\"框架编写分析\"]},\"1576\":{\"c\":[\"archive\"]},\"1577\":{\"h\":\"javapoet语法\",\"t\":[\"#####导航 一、代码的演进 二、butterKnife反射调用 三、javapoet自动生成模板代码 四、apt与注解 五、注解支持多层继承 六、apt调试 七、javapoet语法\",\"#####javapoet语法 @see https://github.com/square/javapoet 一张图 #####转载博客 https://blog.csdn.net/l540675759/article/details/82931785\",\"#####从无到有手写butterKnife框架\\nhttps://github.com/yinlingchaoliu/JavaPoetDemo\"]},\"1578\":{\"c\":[\"框架编写分析\"]},\"1579\":{\"c\":[\"archive\"]},\"1580\":{\"h\":\"mockwebserver\",\"t\":[\"//mockwebserver testImplementation 'com.squareup.okhttp3:mockwebserver:3.9.1' \",\"详见\\nhttps://blog.csdn.net/guijiaoba/article/details/52005261\\nhttps://www.jianshu.com/p/9a1f37ba526b\"]},\"1581\":{\"c\":[\"框架编写分析\"]},\"1582\":{\"c\":[\"archive\"]},\"1583\":{\"h\":\"monkey压力测试\",\"t\":[\"####脚本命令\",\"#!/usr/bin/env bash # 生成随机文件 LOGFILE=\\\"monkey\\\"$[RANDOM]\\\".txt\\\" #echo $RANDOM 生成随机数 echo $LOGFILE adb shell monkey -p PACKNAME --throttle 300 -s 1000 -v -v -v 100 \\\\ --ignore-crashes --ignore-timeouts --ignore-security-exceptions \\\\ --monitor-native-crashes > $LOGFILE #注释 -p apk包名 --throttle 时间间隔 -v -v -v 最详细日志 -s 随机事件 100 次数\\\\ # 忽略崩溃 忽略ANR 忽略安全许可错误 \\\\ # 报告崩溃本地代码 \",\"####参考文章\\nhttps://github.com/zilianliuxue/AndroidStudy/blob/master/Android%E6%80%A7%E8%83%BD/Android%20Monkey%20%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95.md\"]},\"1584\":{\"c\":[\"框架编写分析\"]},\"1585\":{\"c\":[\"archive\"]},\"1586\":{\"h\":\"retrofit-mock-无入侵式mock框架-1\",\"t\":[\"####导航 1、retrofit-mock用法2、retrofit-mock编写思路(aop)3 、retrofit-mock的动态代理及注解 4、aspect 原理讲解与注解语法\"]},\"1587\":{\"h\":\"1、retrofit-mock框架编写背景需求\",\"t\":[\"项目采用的是MVPArms框架，用的dragger方式注入，retrofiit已经封装在底层了，就是给上层提供服务的。没有显著的点，来插入代码。例如\",\"var api = createMocker(service, retrofit) \",\"同样，项目早期，我们很难专门预留出位置，做这样的扩展，如果接手项目或项目中期，可能需要修改网络代码，引入mock，为线上很容易引入潜在问题， 此时，我们核心诉求：\",\"1、尽量不修改旧的网路代码。 2、通过反射等手段来hook，但不影响正式包效率 3、mock测试代码与生产代码一致，不需要动业务代码 \"]},\"1588\":{\"h\":\"2、编写思路\",\"t\":[\"最初考虑是反射来hook，但是需要有hook点，插入代码 mvparms很难找出这样的点，而且修改create()函数，需要改动代码点很多。所以有没有一种方式在create()函数拦截的方法 我们可以采用新的思路 采用AspectJ插件来进行AOP拦截。 经过实践，aspect 不能拦截接口方法 我们可以拦截 create(service) 方法，在拦截方法注入代码进行我们需要的操作\"]},\"1589\":{\"h\":\"3、RetrofitMock aop\",\"t\":[\"@Aspect public class RetrofitMock { private String TAG = \\\"RetrofitMock\\\"; /** retrofit mock开关*/ private static volatile boolean enabled = true; private static boolean isEnabled() { return enabled; } public static void setEnabled(boolean enabled) { RetrofitMock.enabled = enabled; } @Around(\\\"execution(* retrofit2.Retrofit.create(..))\\\") public Object aroundJoinPoint(ProceedingJoinPoint joinPoint) throws Throwable { // Log.e( TAG, \\\"我终于hook了retrofit\\\" ); if (!isEnabled()) { return joinPoint.proceed();//执行原方法 } Object[] parameterValues = joinPoint.getArgs(); Retrofit retrofit = (Retrofit) joinPoint.getThis(); Class service = (Class) parameterValues[0]; Object api = joinPoint.proceed(); return Proxy.newProxyInstance( service.getClassLoader(), new Class<?>[]{service}, new MockerHandler( retrofit, api ) ); } } \",\"切点是（retrofit2.Retrofit.create()）在切点方法里注入代码，就可以实现不修改原有的网络代码实现效果。\",\"如果使Aop失效，可以用RetrofitMock的空方法替换，又不损失效率，如下\",\"public class RetrofitMock { /** retrofit mock开关*/ private static volatile boolean enabled = true; private static boolean isEnabled() { return enabled; } public static void setEnabled(boolean enabled) { RetrofitMock.enabled = enabled; } } \",\"如用法示例\",\"debugImplementation 'com.github.yinlingchaoliu:retrofit-mock:1.0.1' releaseImplementation 'com.github.yinlingchaoliu:retrofit-mock-no-op:1.0.1' \",\"release版有注解的空实现，生产版本，引入会导致aop失效，又不损失效率\",\"#####4、特别感谢 首先特别感谢javalong,给retrofit-mock提供了好的思路\",\"本文代码\\nhttps://github.com/yinlingchaoliu/retrofitMock\"]},\"1590\":{\"c\":[\"框架编写分析\"]},\"1591\":{\"c\":[\"archive\"]},\"1592\":{\"h\":\"retrofit-mock-无入侵式mock框架-2\",\"t\":[\"####导航 1、retrofit-mock用法2、retrofit-mock编写思路(aop)3 、retrofit-mock的动态代理及注解 4、aspect 原理讲解与注解语法\",\"#####1、retrofit-mock编写思路（动态代理基础上，再动态代理） retrofit核心代码 精简省略不必要代码\",\"public <T> T create(final Class<T> service) { return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service }, new InvocationHandler() { private final Object[] emptyArgs = new Object[0]; @Override public @Nullable Object invoke(Object proxy, Method method, @Nullable Object[] args) throws Throwable { return loadServiceMethod(method).invoke(args != null ? args : emptyArgs); } }); } \",\"retrofit 核心是采用反向代理生成 T 的实体类\",\"同样我们可以在这个生成实体类的基础上，再次动态代理，hook 调用函数\",\"//获得值 T api = retrofit.create(Api.class); //根据api实例，用反向代理， Proxy.newProxyInstance( service.getClassLoader(), new Class<?>[]{service}, new MockerHandler( retrofit, api ) ); \",\"在实例api的基础上，再次动态代理\",\"public class MockerHandler<T> implements InvocationHandler { private Retrofit retrofit; private T api; public MockerHandler(Retrofit retrofit, T api) { this.retrofit = retrofit; this.api = api; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { //method 方法就是对应的Api接口方法, //可以在此处一通骚操作，处理retrofit return method.invoke( api, args ); } \",\"#####2、运行时注解，避免不必要手写代码，配置化操作\",\"@Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD}) public @interface MOCK { String value() default \\\"\\\"; boolean enable() default true; } \",\"对retrofit对应Api.class 接口方法一通操作\",\" @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { boolean isMockExist = method.isAnnotationPresent( MOCK.class ); //如果注解不存在 正常走流程 if (!isMockExist) { return invoke( method, args ); } MOCK mock = method.getAnnotation( MOCK.class ); //如果mock 设置为false 正常返回 if (!mock.enable()) { return invoke( method, args ); } String value = mock.value().trim(); //如果http开头 替换成url 正常请求 if (value.startsWith( \\\"http\\\" )) { //网络请求数据 preLoadServiceMethod( method, value ); return invoke( method, args ); } else if (value.endsWith( \\\".json\\\" )) { //本地数据 String mockResponseJson = readAssets( value ); Object responseObj = retrofit.nextResponseBodyConverter( null, getReturnTye( method ), method.getDeclaredAnnotations() ).convert( ResponseBody.create( MediaType.parse( \\\"application/json\\\" ), mockResponseJson ) ); return (retrofit.nextCallAdapter( null, method.getGenericReturnType(), method.getAnnotations() )).adapt( new MockerCall( responseObj ) ); } else { //其他情况正常请求 return invoke( method, args ); } } private Object invoke(Method method, Object[] args) throws InvocationTargetException, IllegalAccessException { if (args == null) { return method.invoke( api ); } else { return method.invoke( api, args ); } } \",\"#####3、修改网络请求地址\",\"//修改url地址 private void preLoadServiceMethod(Method method, String relativeUrl) { try { Method loadServiceMethod = retrofit.getClass().getDeclaredMethod( \\\"loadServiceMethod\\\", Method.class ); loadServiceMethod.setAccessible( true ); //获得serviceMethod的值 Object serviceMethod = loadServiceMethod.invoke( retrofit, method ); //反射修改实体类中的值 fixRetrofit240( serviceMethod, relativeUrl ); fixRetrofit250( serviceMethod, relativeUrl ); } catch (Exception e) { } } //eg : serviceMethod.relativeUrl = relativeUrl //针对retrofit 2.4.0版本做适配 private void fixRetrofit240(Object serviceMethod, String relativeUrl) { try { Field relativeUrlField = serviceMethod.getClass().getDeclaredField( \\\"relativeUrl\\\" ); relativeUrlField.setAccessible( true ); relativeUrlField.set( serviceMethod, relativeUrl ); } catch (Exception e) { } } //eg: serviceMethod.requestFactory.relativeUrl = relativeUrl //针对retrofit 2.5.0版本做适配 private void fixRetrofit250(Object serviceMethod, String relativeUrl) { try { Field requestFactoryField = serviceMethod.getClass().getDeclaredField( \\\"requestFactory\\\" ); requestFactoryField.setAccessible( true ); Object requestFactory = requestFactoryField.get( serviceMethod ); Field relativeUrlField = requestFactory.getClass().getDeclaredField( \\\"relativeUrl\\\" ); relativeUrlField.setAccessible( true ); relativeUrlField.set( requestFactory, relativeUrl ); } catch (Exception e) { } } \",\"#####4、特别感谢 首先特别感谢javalong,给retrofit-mock提供了好的思路\",\"本文代码\\nhttps://github.com/yinlingchaoliu/retrofitMock\"]},\"1593\":{\"c\":[\"框架编写分析\"]},\"1594\":{\"c\":[\"archive\"]},\"1595\":{\"h\":\"retrofit-mock-无入侵式mock框架\",\"t\":[\"####导航 1、retrofit-mock用法2、retrofit-mock编写思路(aop)3 、retrofit-mock的动态代理及注解 4、aspect 原理讲解与注解语法\",\"#####1、前言 retrofit作为网络核心框架，作为基础库。 针对retrofit有很多封装，并不会有很多机会，稳定项目进行二次封装，添加mock代码，这样会造成程序的整体不稳定，增加测试难度，通常如下：\",\"var api = createMocker(service, retrofit) \",\"所以需要开发一款无入侵式mock工具，随时挂载mock和卸载mock的框架\",\"目前retrofit-mock框架功能\",\"1、mock框架无入侵式注入，不需要修改原有网络代码 2、mock框架正式生产包，不会有效率影响 3、支持注解配置，不需要额外代码，生产代码与测试代码一致 4、支持http，本地json，同时兼容适配retrofit2.5.0版本 \",\"######问题反馈解答：\",\"1、mock库在debug包生效，release包失效，想使用mock效果，请用debug包\",\"2、写mock库目的：生产包和测试包用同一份代码，不需要额外修改\",\"3、mock在debug生效，release包失效原理：retrofit-mock库是mock真正实现代码，retrofit-mock-no-op库是空实现。如果你希望release包生效，请引用retrofit-mock库\",\"#####2、retrofit-mock用法\",\"1、用法\",\"/** * MOCK 有两种写法 * mock http地址 * mock 本地json数据 */ public interface Api { @MOCK(value = \\\"appversion/update.json\\\",enable = true) @GET(Urls.UPDATE_INTERFACENAME) Observable<BaseDataBean<IsUpdateBean>> getUpdateInfo(); @MOCK(value = \\\"https://www.baidu.com\\\", enable = false) @GET(Urls.UPDATE_INTERFACENAME) Observable<BaseDataBean<IsUpdateBean>> getUpdateInfo2(); } \",\"如上两种用法\",\"enable 是当前接口是否mock的开关\",\"为了便于易用\",\"//RetrofitMock 是mock的所有接口的总开关 RetrofitMock.setEnabled( true ); //针对于debugRelease \",\"2、retrofit-mock的依赖\",\"dependencies{ debugImplementation 'com.github.yinlingchaoliu:retrofit-mock:1.0.1' releaseImplementation 'com.github.yinlingchaoliu:retrofit-mock-no-op:1.0.1' } //aop开启 aspectjx { enabled true } \",\"allprojects { repositories { maven { url 'https://www.jitpack.io' } } } \",\"引用aop插件\",\"//引入插件 buildscript { dependencies { classpath 'com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.4' } } 添加对应依赖 apply plugin: 'android-aspectjx' \",\"增加混淆\",\"####retrofit-mock -keep class retrofit2.** {*;} -keep class com.chaoliu.mock.** {*;} \",\"#####4、特别感谢 首先特别感谢javalong,给retrofit-mock提供了好的思路\",\"本文代码\\nhttps://github.com/yinlingchaoliu/retrofitMock\"]},\"1596\":{\"c\":[\"框架编写分析\"]},\"1597\":{\"c\":[\"archive\"]},\"1598\":{\"h\":\"从无到有手写ButterKnife框架-1\",\"t\":[\"#####导航 一、代码的演进 二、butterKnife反射调用 三、javapoet自动生成模板代码 四、apt与注解 五、注解支持多层继承 六、apt调试 七、javapoet语法\",\"#####1、前言 反射解决了调用相同模板，调用方式统一的问题\",\"如下代码:\",\" unbinder = new FirstActivity_ViewBinding(FirstActivity.this, getWindow().getDecorView()); unbinder = new Demo1Activity_ViewBinding( Demo1Activity.this,getWindow().getDecorView() ); \",\"如果代码命名非常规范的话，初始化控件的代码调用，项目中会频繁出现,如果不想这样重复的写来写去。可以考虑用到反射\",\"butterknife解决方案通用写法\",\"全部这样搞定 ButterKnife.bind( this ); ButterKnife.bind( this ,view); ButterKnife.unbind(unbind); \",\"一般写法\",\"1、现写约束接口\",\"2、反射调用初始化 由于初始化控件，构造方法就足够了。 约束接口，只关心释放即可\",\"//约束接口 public interface Unbinder { @UiThread void unbind(); //空方法 Unbinder EMPTY = new Unbinder() { @Override public void unbind() { } }; } \",\"#####2、震撼butterKnife核心代码不足100行\",\"/** * 精简的butterknife框架 * @author chentong */ public class ButterKnife { //缓存模板类，键值对（模板类、对应构造方法） private static final Map<Class<?>, Constructor<? extends Unbinder>> BINDINGS = new LinkedHashMap<>(); //对象不能new private ButterKnife() { throw new AssertionError( \\\"No instances.\\\" ); } //绑定方法 @NonNull @UiThread public static Unbinder bind(@NonNull Activity target) { View sourceView = target.getWindow().getDecorView(); return createBinding( target, sourceView ); } @NonNull @UiThread public static Unbinder bind(@NonNull Object target, @NonNull View source) { return createBinding( target, source ); } private static Unbinder createBinding(Object target, View source) { Class<?> targetClass = target.getClass(); //寻找模板类的构造方法 Constructor<? extends Unbinder> constructor = findBindingConstructorForClass( targetClass ); if (constructor == null) { return Unbinder.EMPTY; } //实例化 try { //实例化，就可以给控件赋值 return constructor.newInstance( target, source); }catch (Exception e){ throw new RuntimeException(\\\"Unable to invoke \\\" + constructor, e); } } private static Constructor<? extends Unbinder> findBindingConstructorForClass(Class<?> targetClass) { //查缓存 避免频繁用到反射 Constructor<? extends Unbinder> binderConstructor = BINDINGS.get( targetClass ); if (binderConstructor != null) { return binderConstructor; } String clazzName = targetClass.getName(); if (clazzName.startsWith( \\\"android.\\\" ) || clazzName.startsWith( \\\"java.\\\" )) { //系统方法错误 return null; } try { //反射类加载 加载模板 Class<?> bindingClass = targetClass.getClassLoader().loadClass( clazzName + \\\"_ViewBinding\\\" ); binderConstructor = (Constructor<? extends Unbinder>) bindingClass.getConstructor( targetClass, View.class ); }catch (ClassNotFoundException e){ binderConstructor = findBindingConstructorForClass(targetClass.getSuperclass()); }catch (Exception e){ return null; } if (binderConstructor!=null){ BINDINGS.put( targetClass, binderConstructor ); } return binderConstructor; } //释放函数 @NonNull @UiThread public static void unbind(Unbinder target) { if (target != null && target != Unbinder.EMPTY) { target.unbind(); } } } \",\"统一都可以写成这样\",\" TextView helloTv; private Unbinder unbinder; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate( savedInstanceState ); setContentView( R.layout.activity_main ); unbinder = ButterKnife.bind( this ); helloTv.setOnClickListener( v->{ Toast.makeText( this,\\\"hello butterknife\\\",Toast.LENGTH_SHORT ).show(); } ); } @Override protected void onDestroy() { super.onDestroy(); ButterKnife.unbind( unbinder ); } \",\"#####从无到有手写butterKnife框架\\nhttps://github.com/yinlingchaoliu/JavaPoetDemo\"]},\"1599\":{\"c\":[\"框架编写分析\"]},\"1600\":{\"c\":[\"archive\"]},\"1601\":{\"h\":\"从无到有手写ButterKnife框架-2\",\"t\":[\"#####导航 一、代码的演进 二、butterKnife反射调用 三、javapoet自动生成模板代码 四、apt与注解 五、注解支持多层继承 六、apt调试 七、javapoet语法\",\"#####1、前言 javapoet解决重复模板代码编写问题 模板代码都类似，这样重复写来写去很烦 javapoet会是一阵强心剂\",\"语法主要 @see https://github.com/square/javapoet 编写模板代码切记从上往下写，符合人的习惯，并且不会遗漏，\",\"现写类，再写变量，再写方法，最后文件输出\",\"#####javapoet模板代码编写 模板如下:\",\"/** * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY CHENTONG. */ public class FirstActivity_ViewBinding implements Unbinder { private FirstActivity target; @UiThread public FirstActivity_ViewBinding(FirstActivity target, View source) { this.target = target; target.helloTv = source.findViewById( R.id.helloTv ); } @Override public void unbind() { target.helloTv = null; } } \",\"1、模板要抽出变与不变的地方 不变的放在常量类中，变的用poet写 javapoet代码如下: //引入两个类 或者可以采用Class.forName()\",\"public interface Unbinder { void unbind(); //空方法 Unbinder EMPTY = new Unbinder() { @Override public void unbind() { } }; } public class View { } \",\"//自动输出代码\",\"public final class JavaPoet { private static final String SUFFIX = \\\"_ViewBinding\\\"; private static final String JAVA_DOC = \\\"DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY CHENTONG. \\\"; public static void main(String[] args) { try { gennerateCode(JavaPoet.class); } catch (ClassNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } private static void gennerateCode(Class target) throws ClassNotFoundException, IOException { //类全路径 String qualifiedName = target.getName().toString(); //包名 String packageName = qualifiedName.substring( 0, qualifiedName.lastIndexOf( \\\".\\\" ) ); //类文件 String fileName = target.getSimpleName() + SUFFIX; //eg：public class FirstActivity_ViewBinding implements Unbinder //构造类 TypeSpec.Builder typeBuilder = TypeSpec.classBuilder( fileName ) .addJavadoc( JAVA_DOC ) .addModifiers( Modifier.PUBLIC ) .addSuperinterface( Unbinder.class ); //eg:private FirstActivity target; FieldSpec fieldSpec = FieldSpec.builder( target,\\\"target\\\",Modifier.PRIVATE ).build(); //field添加当前类中 typeBuilder.addField( fieldSpec ); //eg:@UiThread // public FirstActivity_ViewBinding(FirstActivity target, View source) { // this.target = target; // target.helloTv = source.findViewById( R.id.helloTv ); // } //构造方法 MethodSpec.Builder constructorBuilder = MethodSpec.constructorBuilder() // .addAnnotation( UiThread.class ) .addModifiers( Modifier.PUBLIC ) .addParameter( target,\\\"target\\\" ) .addParameter( View.class,\\\"source\\\" ); constructorBuilder.addStatement( \\\"this.target = target\\\" ); constructorBuilder.addStatement( \\\"target.helloTv = source.findViewById( R.id.helloTv )\\\" ); //构造方法添加到类中 typeBuilder.addMethod( constructorBuilder.build() ); //eg:@Override // public void unbind() { // target.helloTv = null; // } //解绑方法 MethodSpec.Builder unbindBuilder = MethodSpec.methodBuilder( \\\"unbind\\\" ) .addAnnotation( Override.class ) .addModifiers( Modifier.PUBLIC ) .returns( void.class ); unbindBuilder.addStatement( \\\"target.helloTv = null\\\" ); //解绑方法添加类中 typeBuilder.addMethod( unbindBuilder.build() ); //创建文件 并且输出打印到到System.out JavaFile.builder( packageName, typeBuilder.build()).build().writeTo( System.out ); } } \",\"以上代码，亲测可用\",\"#####从无到有手写butterKnife框架\\nhttps://github.com/yinlingchaoliu/JavaPoetDemo\"]},\"1602\":{\"c\":[\"框架编写分析\"]},\"1603\":{\"c\":[\"archive\"]},\"1604\":{\"h\":\"从无到有手写ButterKnife框架-3\",\"t\":[\"#####导航 一、代码的演进 二、butterKnife反射调用 三、javapoet自动生成模板代码 四、apt与注解 五、注解支持多层继承 六、apt调试 七、javapoet语法\",\"#####1、前言 Annotation Processing Tool (apt)是编译期处理注解的工具\",\"注解有三种【SOURCE，RUNTIME, CLASS】源码，运行时，编译，其中编译期效率最高的。\",\"解决问题：通过注解，动态生成模板代码\",\"#####apt与javapoet联动\",\"1、抽象模板关键参数（只关注参数） 2、定义注解传入关键参数 3、引入apt \",\"1、抽象模板参数\",\"/** * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY CHENTONG. */ public class FirstActivity_ViewBinding implements Unbinder { private FirstActivity target; @UiThread public FirstActivity_ViewBinding(FirstActivity target, View source) { this.target = target; target.helloTv = source.findViewById( R.id.helloTv ); } @Override public void unbind() { target.helloTv = null; } } \",\"这个类中核心的一句话 target.helloTv = source.findViewById( R.id.helloTv ); 因为获得注解的同时，就会获得当前元素(Type,Field,Method),所以helloTv,这个field不用关注 关键参数就是元素ResId。\",\"2 定义注解\",\"eg： @ViewId(R.id.helloTv) \",\"1、新建module 选择选择java library ，工程名poet-annotation 2、新建注解 ViewId\",\"@Retention(CLASS) @Target(FIELD) public @interface ViewId { /** View ID to which the field will be bound. */ @IdRes int value(); } \",\"3、apt 新建module 命名为poet-compiler 其中编写的时候，要注意包 javax.annotation.processing javax.lang.model 方法用法\",\"base类 方便后续开发\",\"public abstract class BaseProcessor extends AbstractProcessor { protected Filer mFiler; //输出位置 protected Logger logger; protected Types types; protected Elements elementUtils; // Module name, maybe its 'app' or others protected String moduleName = null; protected Map<String, String> options = null; @Override public synchronized void init(ProcessingEnvironment processingEnv) { super.init( processingEnv ); mFiler = processingEnv.getFiler(); types = processingEnv.getTypeUtils(); elementUtils = processingEnv.getElementUtils(); logger = new Logger( processingEnv.getMessager() ); options = processingEnv.getOptions(); if (MapUtils.isNotEmpty( options )) { moduleName = options.get( KEY_MODULE_NAME ); } if (StringUtils.isNotEmpty( moduleName )) { logger.info( \\\"The user has configuration the module name, it was [\\\" + moduleName + \\\"]\\\" ); } else { logger.error( NO_MODULE_NAME_TIPS ); } } //判断当前是不是activity类 public boolean isActivity(TypeElement typeElement){ TypeMirror activityTm = elementUtils.getTypeElement(Consts.ACTIVITY).asType(); if (types.isSubtype(typeElement.asType(),activityTm )) return true; return false; } //判断当前类是fragment public boolean isFragment(TypeElement typeElement){ TypeMirror fragmentTm = elementUtils.getTypeElement(Consts.FRAGMENT).asType(); TypeMirror fragmentTmV4 = elementUtils.getTypeElement(Consts.FRAGMENT_V4).asType(); if (types.isSubtype(typeElement.asType(),fragmentTm ) || types.isSubtype(typeElement.asType(),fragmentTmV4 )){ return true; } return false; } @Override public Set<String> getSupportedOptions() { return new HashSet<String>() {{ this.add( KEY_MODULE_NAME ); }}; } @Override public SourceVersion getSupportedSourceVersion() { return SourceVersion.latestSupported(); } } \",\"注解生成代码类\",\"@AutoService(Processor.class) public class ViewIdProcessor extends BaseProcessor { private Map<TypeElement, List<Element>> parentAndChild = new HashMap<>(); //包含父类的注解 @Override public synchronized void init(ProcessingEnvironment processingEnv) { super.init( processingEnv ); logger.info(\\\">>> ViewIdProcessor init. <<<\\\"); } @Override public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) { if (CollectionUtils.isNotEmpty( annotations )){ Set<? extends Element> viewIdElements = roundEnv.getElementsAnnotatedWith(ViewId.class); try { categories( viewIdElements ); //支持多层注解 field字段去重 不需要注释掉即可 supportSuperAnnotation(); gennerateHelper(); } catch (Exception e) { logger.error( e ); } return true; } return false; } //自动生成代码 private void gennerateHelper() throws IOException { //根据类路径获得类型 TypeElement type_unbinder = elementUtils.getTypeElement(Consts.UNBINDER); //用于判断当前类类型 TypeMirror viewTm = elementUtils.getTypeElement( Consts.VIEW ).asType(); TypeElement uiThreadType = elementUtils.getTypeElement( Consts.UI_THREAD ); if (MapUtils.isNotEmpty( parentAndChild )){ for (Map.Entry<TypeElement, List<Element>> entry : parentAndChild.entrySet()){ TypeElement typeElement = entry.getKey(); List<Element> elementList = entry.getValue(); //类全路径 String qualifiedName = typeElement.getQualifiedName().toString(); //包名 String packageName = qualifiedName.substring(0, qualifiedName.lastIndexOf(\\\".\\\")); //类文件 String fileName = typeElement.getSimpleName() + SUFFIX; //新建类Target_ViewBinding TypeSpec.Builder targetClassType = TypeSpec.classBuilder( fileName ) .addModifiers( Modifier.PUBLIC) .addJavadoc( WARNING_TIPS ) .addSuperinterface( ClassName.get(type_unbinder.asType()) ); //实现接口 //新建field target字段 FieldSpec targetField = FieldSpec.builder(TypeName.get( typeElement.asType() ),\\\"target\\\",Modifier.PRIVATE) .build(); //target类增加一行field targetClassType.addField( targetField ); //新建构造方法Target_ViewBinding(Target target,View source) MethodSpec.Builder constructorBuilder = MethodSpec.constructorBuilder() .addAnnotation( ClassName.get( uiThreadType ) ) .addModifiers( Modifier.PUBLIC ) .addParameter( TypeName.get( typeElement.asType() ),\\\"target\\\" ) .addParameter( TypeName.get( viewTm ),\\\"source\\\" ) .addStatement( \\\"this.target = target\\\" ); for (Element element :elementList){ //获取控件ID ViewId viewIdAnnotation = element.getAnnotation( ViewId.class ); int viewId = viewIdAnnotation.value(); //获取当前field字段 String fieldName = element.getSimpleName().toString(); constructorBuilder.addStatement( \\\"target.\\\"+fieldName + \\\" = source.findViewById( $L )\\\" ,viewId); } //创建构造方法 MethodSpec constructor = constructorBuilder.build(); //target类增加构造方法 targetClassType.addMethod( constructor ); //新建方法 unbind MethodSpec.Builder unbindBuilder = MethodSpec.methodBuilder(\\\"unbind\\\") .addAnnotation( Override.class ) .addModifiers( Modifier.PUBLIC ) .returns( void.class ); for (Element element :elementList){ String fieldName = element.getSimpleName().toString(); unbindBuilder.addStatement( \\\"target.\\\"+fieldName+\\\" = null\\\" ); } //创建释放方法 MethodSpec unbinder = unbindBuilder.build(); //target类增加释放方法 targetClassType.addMethod( unbinder ); //创建target类 TypeSpec targetType = targetClassType.build(); //写类 JavaFile.builder(packageName, targetType).build().writeTo(mFiler); //打印 JavaFile.builder(packageName, targetType).build().writeTo(System.out); } } } /** * * @param elements * @throws IllegalAccessException * 当前类type元素和当前类元素的列表 */ private void categories(Set<? extends Element> elements) throws IllegalAccessException { if (CollectionUtils.isNotEmpty(elements)) { for (Element element : elements) { //获得当前元素的TypeElement TypeElement enclosingElement = (TypeElement) element.getEnclosingElement(); if (element.getModifiers().contains(Modifier.PRIVATE)) { throw new IllegalAccessException(\\\"The inject fields CAN NOT BE 'private'!!! please check field [\\\" + element.getSimpleName() + \\\"] in class [\\\" + enclosingElement.getQualifiedName() + \\\"]\\\"); } if (parentAndChild.containsKey(enclosingElement)) { // Has categries parentAndChild.get(enclosingElement).add(element); } else { List<Element> childs = new ArrayList<>(); childs.add(element); parentAndChild.put(enclosingElement, childs); } } logger.info(\\\"categories finished.\\\"); } } /** * Field元素 注解支持多层继承 * 未做算法优化，仅做测试 */ private void supportSuperAnnotation(){ TreeUtils tree = new TreeUtils( ); parentAndChild = tree.supportSuperAnnotation( parentAndChild ); } //建议这种写法,减少改字符串 @Override public Set<String> getSupportedAnnotationTypes() { return new HashSet<String>() {{ this.add( ViewId.class.getName() ); }}; } } \",\"#####从无到有手写butterKnife框架 https://github.com/yinlingchaoliu/JavaPoetDemo\",\"具体参考\\nhttps://cloud.tencent.com/developer/article/1006210\"]},\"1605\":{\"c\":[\"框架编写分析\"]},\"1606\":{\"c\":[\"archive\"]},\"1607\":{\"h\":\"从无到有手写ButterKnife框架-5\",\"t\":[\"#####导航 一、代码的演进 二、butterKnife反射调用 三、javapoet自动生成模板代码 四、apt与注解 五、注解支持多层继承 六、apt调试 七、javapoet语法\",\"#####1、apt Debug调试\",\"1、在项目的根目录下的gradle.properties文件中，新增如下配置：\",\"org.gradle.jvmargs=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 \",\"2、新建remote debugger 命名为AnnotationProcessor \",\"3、设置断点执行命令 先clean 后compileDebugSources \",\"4、debug操作 从左往右 【下一行】【进入方法内】【强行进入】【退出方法内】【略过...】【下一个断点】\",\"#####从无到有手写butterKnife框架\\nhttps://github.com/yinlingchaoliu/JavaPoetDemo\"]},\"1608\":{\"c\":[\"框架编写分析\"]},\"1609\":{\"c\":[\"archive\"]},\"1610\":{\"h\":\"从无到有手写ButterKnife框架\",\"t\":[\"#####导航 一、代码的演进 二、butterKnife反射调用 三、javapoet自动生成模板代码 四、apt与注解 五、注解支持多层继承 六、apt调试 七、javapoet语法\",\"#####1、前言 butterknife归根结底：不用手写findviewbyId，用模板自动生成代码，减少不必要重复工作。 与其上手直接写代码，不如阐述渐进的思路，理解会透彻一些。\",\"####2、代码演进 1、最初代码\",\" TextView helloTv; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate( savedInstanceState ); setContentView( R.layout.activity_main ); helloTv = findViewById( R.id.helloTv ); } \",\"当代码变多后 2、简单封装后代码\",\" TextView helloTv; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate( savedInstanceState ); setContentView( R.layout.activity_main ); initView(); } private void initView(){ this.helloTv = findViewById( R.id.helloTv ); } \",\"3、可以更进一步封装\",\" TextView helloTv; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate( savedInstanceState ); setContentView( R.layout.activity_main ); initView(FirstActivity.this, getWindow().getDecorView()); } private void initView(FirstActivity activity, View view ){ activity.helloTv = view.findViewById( R.id.helloTv ); } \",\"4、可以将初始化控件代码专门抽出一个类\",\"/** * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY CHENTONG. */ public class FirstActivity_ViewBinding implements Unbinder { private FirstActivity target; @UiThread public FirstActivity_ViewBinding(FirstActivity target, View source) { this.target = target; target.helloTv = source.findViewById( R.id.helloTv ); } @Override public void unbind() { target.helloTv = null; } } \",\"看此时代码更像一个模板。\",\"调用方式也比较固定死板\",\" TextView helloTv; Unbinder unbinder; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate( savedInstanceState ); setContentView( R.layout.activity_main ); unbinder = new FirstActivity_ViewBinding(FirstActivity.this, getWindow().getDecorView()); } @Override protected void onDestroy() { super.onDestroy(); unbinder.unbind(); unbinder=null; } \",\"从一次一次演化，findViewById代码编写，一次比一次趋近于模板化，很套路毫无新鲜感。\",\"日常手头重复的工作，很像模板，是时候开始改变了\",\"#####从无到有手写butterKnife框架\\nhttps://github.com/yinlingchaoliu/JavaPoetDemo\"]},\"1611\":{\"c\":[\"框架编写分析\"]},\"1612\":{\"c\":[\"archive\"]},\"1613\":{\"h\":\"支持360自动加固task\",\"t\":[\"支持360自动加固task\",\"执行命令 \",\"引用\",\"apply from: \\\"jiagu.gradle\\\" \",\"配置\",\"def executeCmd(cmd){ def jiaGuPluginPath = getJiaGuProperty() println \\\"执行命令行:\\\" + cmd println \\\"jiagu.dir=\\\" + getJiaGuProperty() def p = cmd.execute(null, new File(jiaGuPluginPath)) println p.text p.waitFor() // 用以等待外部进程调用结束 println p.exitValue() } def getJiaGuProperty(){ File file = rootProject.file('local.properties') if(file.exists()){ //加载资源 InputStream inputStream = rootProject.file('local.properties').newDataInputStream() Properties properties = new Properties() properties.load(inputStream) if (properties.containsKey(\\\"jiagu.dir\\\")){ return properties.getProperty(\\\"jiagu.dir\\\") }else { println \\\"请在local.properties 添加jiagu.dir 例子如下\\\" println \\\"jiagu.dir=/Users/chentong/Android/360jiagubao_mac/jiagu\\\" return \\\"\\\" } } } task jiaguDebug(dependsOn: 'assembleDebug') { group \\\"jiaguapk\\\" doLast { jiagu(\\\"debug\\\") } } task jiaguRelease(dependsOn: 'assembleRelease') { group \\\"jiaguapk\\\" doLast { jiagu(\\\"release\\\") } } def jiagu(buildType){ println \\\"360加固--------begin---------\\\" //获得apk路径 def appFilePath = getAppFilePath(buildType) if (!new File(appFilePath).exists()) { println \\\"apk not exist\\\" return } def cmdBase = 'java -jar jiagu.jar' //获得加固宝输出路径 def outPath = getJiaGuPath() File outFile = new File(outPath) if (!outFile.exists()){ outFile.mkdirs() } def cmdJiaGu = cmdBase + ' -jiagu ' + appFilePath + ' ' + outPath + ' -autosign' + ' -automulpkg' executeCmd(cmdJiaGu) println \\\"360加固--------end---------\\\" } def getAppFilePath(buildType){ // 生成的apk的路径 def appFilePath = getRootDir().getAbsolutePath() + File.separator + \\\"app\\\" + File.separator + \\\"build\\\" + File.separator + \\\"outputs\\\" + File.separator + \\\"apk\\\" +File.separator + buildType + File.separator + \\\"app-\\\" + buildType + \\\".apk\\\" println \\\"appFilePath=\\\" + appFilePath return appFilePath } def getJiaGuPath(){ def outPath = getRootDir().getAbsolutePath() + File.separator + \\\"app\\\" + File.separator + \\\"360jiagu\\\" println \\\"jiaguPath=\\\" + outPath return outPath } //清理加固文件 tasks.whenTaskAdded { theTask -> if (theTask.name == \\\"assembleRelease\\\" | theTask.name == \\\"assembleDebug\\\") { theTask.dependsOn \\\"cleanJiaguDir\\\" } } task cleanJiaguDir { def jiaguPath = getJiaGuPath() new File(jiaguPath).deleteDir() } \",\"感谢月亮的后羿提出的问题 我的task命令的打印日志：可以看一下 https://www.jianshu.com/p/fb538da65d28\",\"后续优化方向\\nhttps://www.githang.com/2019/01/23/jenkins-enhanced/\"]},\"1614\":{\"c\":[\"框架编写分析\"]},\"1615\":{\"c\":[\"archive\"]},\"1616\":{\"h\":\"日志框架\",\"t\":[\"美团日志框架 https://tech.meituan.com/Logan.html https://github.com/Meituan-Dianping/Logan\",\"####后台接入 elasticsearch和kibana，腾讯云 bugly日志上传 https://cloud.tencent.com/document/product/436/12159\",\"腾讯日志框架\\nhttps://github.com/yinlingchaoliu/mars\\ndemo\\nhttps://github.com/AndyAls/XlogDemo\"]},\"1617\":{\"c\":[\"框架编写分析\"]},\"1618\":{\"c\":[\"archive\"]},\"1619\":{\"h\":\"简单易用sharepref存储工具\",\"t\":[\"简单sharepref存储工具，支持多sharepref表使用，支持参数化配置\"]},\"1620\":{\"h\":\"源码\",\"t\":[\"https://github.com/yinlingchaoliu/sharepref.git\"]},\"1621\":{\"h\":\"演示\",\"t\":[\" 源码中有完整使用示例\"]},\"1622\":{\"h\":\"功能\",\"t\":[\"支持参数可配置化\",\"支持多种数据类型任意实体类， list， map\",\"支持原有sp数据存储 getObj putObj\",\"支持数据迁移\",\"可扩展性强，后续可支持加密\",\"支持数据异步提交用apply并且兼容\",\"支持多sharepref文件\",\"支持项目可拆分多部分 动态配置, 基本库(sp+注解)\"]},\"1623\":{\"h\":\"引入\",\"t\":[\"1.引仓库\",\"maven { url 'https://jitpack.io' } \",\"2.加依赖\",\"implementation 'com.github.yinlingchaoliu:sharepref:1.0.0' \"]},\"1624\":{\"h\":\"用法\"},\"1625\":{\"h\":\"1、增加注解配置\",\"t\":[\"/** * 初始化spname * 一个spname 映射 一个table */ @SPNAME(\\\"sharepref_table\\\") //sharepref文件名 public interface ISharedPref { @KEY(\\\"username\\\") //存储的key值 @DEFAULT(\\\"\\\") //默认值 Call<String> username(); //支持数据类型 String @KEY(\\\"isOk\\\") @DEFAULT(\\\"false\\\") Call<Boolean> isOk();//支持数据类型 boolean @KEY(\\\"age\\\") @DEFAULT(\\\"0\\\") Call<Integer> age();//支持数据类型 Integer @KEY(\\\"waitTime\\\") @DEFAULT(\\\"0\\\") Call<Long> waitTime();//支持数据类型 Long } \"]},\"1626\":{\"h\":\"2、继承SharePrefFacade，如下实现即可\",\"t\":[\"public class SharePrefManager extends SharePrefFacade { private ISharedPref mISharedPrefDelegate; @Override public void create() { mISharedPrefDelegate = create(ISharedPref.class); } public static ISharedPref ISharedPref() { return getIns().mISharedPrefDelegate; } private SharePrefManager() { } private static class SingleHolder { private static final SharePrefManager sharePrefManager = new SharePrefManager(); } public static SharePrefManager getIns() { return SingleHolder.sharePrefManager; } } \"]},\"1627\":{\"h\":\"3、application初始化\",\"t\":[\"SharePrefManager.getIns().init(this); \"]},\"1628\":{\"h\":\"4、使用\",\"t\":[\"存储\",\"SharePrefManager.ISharedPref().username().put(name); \",\"取值\",\"String name = SharePrefManager.ISharedPref().username().get(); \"]},\"1629\":{\"h\":\"感谢\",\"t\":[\"参考：\\nhttps://github.com/orhanobut/hawk\"]},\"1630\":{\"c\":[\"开源工具\"]},\"1631\":{\"c\":[\"archive\"]},\"1632\":{\"h\":\"编写aspectj插件-重写Hugo\",\"t\":[\"1、前言 Hugo 是JakeWharton写的性能检测框架 原理是利用aspectj Aop切片编程，拦截注解方法，在Around中对方法进行操作\",\"由于aspectj 引入gradle配置比较麻烦，jakeWharton将注解及对应AspectJ方法实现，和对应插件放在一起。\",\"我这边是把aspectJ插件专门抽出来，后续再有aop的任务，扩展会比较简单。\",\"引入aspectj插件方法\",\"主build.gradle apply plugin: 'com.chaoliu.aspectj' aspectj { enabled true //注解是否生效 isCompile true //aspectj是否complie引入 } buildscript { dependencies { classpath fileTree(dir: 'plugins', include: ['*.jar']) classpath 'org.aspectj:aspectjtools:1.8.6' } } \",\"aspectj便引入完毕了。\",\"DebugLog 没有任何改变，用法不变\",\"详细见代码\\nhttps://github.com/yinlingchaoliu/aspectjx\"]},\"1633\":{\"c\":[\"框架编写分析\"]},\"1634\":{\"c\":[\"archive\"]},\"1635\":{\"h\":\"这个RxBus完美抄袭EventBus，效果杠杠无后遗症\"},\"1636\":{\"h\":\"一、重写RxBus原因\",\"t\":[\"市面上开源的RxBus并没有完全满足三点 1、EventBus式使用方法，无学习成本 2、功能不全：支持黏性事件，线程安全 3、完美替换EventBus \"]},\"1637\":{\"h\":\"二、重写思路\",\"t\":[\"1、EventBus式使用方法，无学习成本 2、rxjava是观察者模式，可以替换Eventbus消息队列和处理消息的策略模式 \"]},\"1638\":{\"h\":\"三、EventBus源代码分析\",\"t\":[\"https://www.jianshu.com/p/7dc9a097090d\"]},\"1639\":{\"h\":\"四、定制RxBus2源代码\",\"t\":[\"https://github.com/yinlingchaoliu/RxBus\"]},\"1640\":{\"h\":\"Add dependency\"},\"1641\":{\"h\":\"step 1:\",\"t\":[\"Add it in your root build.gradle at the end of repositories:\",\"allprojects { repositories { maven { url 'https://jitpack.io' } } } \"]},\"1642\":{\"h\":\"step 2:\",\"t\":[\"dependencies { implementation 'com.github.yinlingchaoliu:RxBus:1.0.0' } \"]},\"1643\":{\"h\":\"Usage\"},\"1644\":{\"h\":\"step 1: register\",\"t\":[\"RxBus.getDefault().register(this); \"]},\"1645\":{\"h\":\"step 2: post & receive\",\"t\":[\"//post RxBus.getDefault().post(new EventMain()); //receive @Subscribe public void receiveEventMain(EventMain event) { ((TextView) findViewById(R.id.tv_main_eventMsg)).setText(event.getMsg()); } \"]},\"1646\":{\"h\":\"step 3: unregister\",\"t\":[\" RxBus.getDefault().unregister(this); RxBus.getDefault().unregister(this); \"]},\"1647\":{\"h\":\"特别感谢\",\"t\":[\"1、重点参考优点：EventBus使用方式，缺点：功能不够完善，非线程安全！！！ [写框架】基于RxJava2，高仿EventBus打造RxBus2](https://www.jianshu.com/p/1fb3bfa7c427) [RxBus2源码](https://github.com/KingJA/RxBus2) 2、优点：稳定，性能好。缺点:使用rxjava系列框架，建议改用rxbus [EventBus源代码](https://github.com/greenrobot/EventBus) 3、优点：功能全面，代码少 缺点：还需要编写特定业务Manange类 [这个 RxBus 稳如老狗](https://blankj.com/2018/05/09/awesome-rxbus/) [RxBus源代码](https://github.com/Blankj/RxBus) \"]},\"1648\":{\"h\":\"License\",\"t\":[\"Copyright 2018 Caliburn\\n\\nLicensed under the Apache License, Version 2.0 (the \\\"License\\\");\\nyou may not use this file except in compliance with the License.\\nYou may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\nUnless required by applicable law or agreed to in writing, software\\ndistributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\nSee the License for the specific language governing permissions and\\nlimitations under the License.\\n\"]},\"1649\":{\"c\":[\"框架编写分析\"]},\"1650\":{\"c\":[\"archive\"]},\"1651\":{\"h\":\"react文档\"},\"1652\":{\"c\":[\"android\"]},\"1653\":{\"c\":[\"android\"]},\"1654\":{\"h\":\"ts文档\"},\"1655\":{\"c\":[\"android\"]},\"1656\":{\"c\":[\"android\"]},\"1657\":{\"h\":\"vue文档\"},\"1658\":{\"c\":[\"android\"]},\"1659\":{\"c\":[\"android\"]},\"1660\":{\"h\":\"Flutter-md5加密\",\"t\":[\"import 'dart:convert'; import 'package:convert/convert.dart'; import 'package:crypto/crypto.dart'; // md5 加密 String generateMd5(String data) { var content = new Utf8Encoder().convert(data); var digest = md5.convert(content); // 这里其实就是 digest.toString() return hex.encode(digest.bytes); } \"]},\"1661\":{\"c\":[\"flutter学习\"]},\"1662\":{\"c\":[\"archive\"]},\"1663\":{\"h\":\"Flutter-沉侵式与ListView冲突\",\"t\":[\"ListView 默认会与沉侵式冲突\"]},\"1664\":{\"c\":[\"flutter学习\"]},\"1665\":{\"c\":[\"archive\"]},\"1666\":{\"h\":\"flutter-SmartRefreshBloc页面快速开发模板，支持列表，支持stateful\",\"t\":[\"项目地址：https://github.com/yinlingchaoliu/SmartRefreshBloc\",\"#####编写项目的思路 flutter处处体现widget，我们开发过程中，核心放在的是业务层面逻辑，减少不必要的widget编写，减少不必要重复劳动，减少不必要代码层级，作为提高效率的切入点\",\"解决问题方式\",\"1、用View与Logic解耦方式，增加代码清晰度 2、用模板的方式，给提供统一开发规范方案（普通页面和列表页面） 3、用快捷键方式，一键式快速开发 \",\"#####1、先实现View与logic解耦\",\"import 'package:flutter/material.dart'; /// Created by chentong /// /// 相当于MVP /// class BlocProvider<T extends BlocBase> extends StatefulWidget { BlocProvider({ Key key, @required this.child, //View @required this.bloc, //logic }) : super(key: key); final T bloc; final Widget child; @override _BlocProviderState<T> createState() => _BlocProviderState<T>(); ///核心代码 static T of<T extends BlocBase>(BuildContext context) { final type = _typeOf<BlocProvider<T>>(); BlocProvider<T> provider = context.ancestorWidgetOfExactType(type); return provider.bloc; } static Type _typeOf<T>() => T; } class _BlocProviderState<T> extends State<BlocProvider<BlocBase>> { @override void initState() { super.initState(); widget.bloc.initState(); } @override Widget build(BuildContext context) { return widget.child; } @override void dispose() { widget.bloc.dispose(); super.dispose(); } } abstract class BlocBase { void initState(); void dispose(); } \",\"这个是核心模板，可以解耦当前flutter页面中Widget与业务逻辑混合在一起的问题。\",\"现在开发一个页面范例，将逻辑层迁移到DefaultBloc当中，而DefaultPage 专注于写widget，减少不必要的耦合。\",\"import 'package:flutter/cupertino.dart'; import 'package:flutter/material.dart'; import 'base_bloc.dart'; ///@author: chentong ///2019-4-9 ///视图层 class DefaultPage extends StatefulWidget { ///路由跳转 static void pushDefaultPage(BuildContext context) { Navigator.push( context, new CupertinoPageRoute<void>( builder: (ctx) => new BlocProvider<DefaultBloc>( child: new DefaultPage(), bloc: new DefaultBloc(), ))); } ///获得当前页面实例 static StatefulWidget newInstance() { return new BlocProvider<DefaultBloc>( child: new DefaultPage(), bloc: new DefaultBloc(), ); } @override _DefaultPageState createState() => new _DefaultPageState(); } /// /// 页面实现 /// class _DefaultPageState extends State<DefaultPage> { @override void initState() { super.initState(); } @override Widget build(BuildContext context) { final DefaultBloc bloc = BlocProvider.of<DefaultBloc>(context); return new Scaffold( appBar: new AppBar( title: new Text('demo'), centerTitle: true, ), ); } @override void dispose() { super.dispose(); } } /// ///逻辑层 ///todo:此处逻辑建议迁移出去 分离开解耦 /// class DefaultBloc extends BlocBase { @override void initState() {} @override void dispose() {} } \",\"####2、增加高频适配模板\",\"因为listview列表在APP中是高频使用的存在，基于pull_to_refresh编写列表页面，便于快速开发\",\"import 'package:flutter/cupertino.dart'; import 'package:flutter/material.dart'; import 'package:flutter/scheduler.dart'; import 'package:pull_to_refresh/pull_to_refresh.dart'; import 'base_bloc.dart'; /// ///list列表 ///author:chentong /// abstract class SmartRefreshBloc extends PullToRefreshBloc { RefreshController refreshController; ScrollController scrollController; ///初始化 void initState() { scrollController = new ScrollController(); refreshController = new RefreshController(); SchedulerBinding.instance.addPostFrameCallback((_) { refreshController.requestRefresh(true); }); } void scrollTop() { scrollController.animateTo(0.0, duration: new Duration(microseconds: 1000), curve: ElasticInCurve()); } void onRefreshCallBack(bool up) { if (up) { onRefresh(); } else { onLoadMore(); } } ///默认方法 void onOffsetCallback(bool isUp, double offset) { // if you want change some widgets state ,you should rewrite the callback if (isUp) { } else {} } ///请求 void refreshRequest({bool up = true}) { refreshController.requestRefresh(up); } ///完成 void refreshCompleted() { refreshController.sendBack(true, RefreshStatus.completed); } ///空闲 void refreshIdle() { refreshController.sendBack(false, RefreshStatus.idle); } ///失败 void refreshFailed() { refreshController.sendBack(false, RefreshStatus.failed); } ///自定义头部 Widget headerCreate(BuildContext context, RefreshStatus mode) { return new ClassicIndicator(mode: mode); } ///自定义脚部 Widget footerCreate(BuildContext context, RefreshStatus mode) { return new ClassicIndicator(mode: mode); } @override void dispose() {} } ///下拉刷新Bloc abstract class PullToRefreshBloc extends BlocBase { ///加载数据 Future getData({String labelId, int page}); ///刷新 Future onRefresh({String labelId}); ///更多 Future onLoadMore({String labelId, int page}); } \",\"####3、快捷键一键式开发 导入livesettings.jar 地址：https://github.com/yinlingchaoliu/SmartRefreshBloc/blob/master/livesettings.jar\",\"快捷命令 fstatefulmvp 快速构建stateful页面 flistviewmvp 快速构建listview列表页面\",\"快速实现一键化开发\",\"其中还有flutter其他快捷命令 均是f开头,可以快捷名利可以快速唤起 \",\"####项目中示例 核心模板代码在此路径 https://github.com/yinlingchaoliu/SmartRefreshBloc/tree/master/example/lib/base\",\"///核心模板两个文件 base_bloc.dart pulltofresh_bloc.dart ///一键化生成代码示例，帮助你快速开发 default_bloc.dart default_list_bloc.dart \",\"项目中重构实战示例在 https://github.com/yinlingchaoliu/SmartRefreshBloc/tree/master/example/lib/ui\",\"TestExample.dart TestExample1.dart TestExample2.dart \"]},\"1667\":{\"c\":[\"flutter学习\"]},\"1668\":{\"c\":[\"archive\"]},\"1669\":{\"h\":\"flutter-redux\",\"t\":[\"最近学习flutter-redux 思想是flux action->dispatch-->store->view 数据是单向流动\",\"阮一峰 https://www.cnblogs.com/fliu/articles/5245923.html\",\"如果能使用简单可以省心不少 \",\"fish-redux 存在一个问题，类文件膨胀\",\"redux这个框架本意复用mvp中的p\\n尽量少些\"]},\"1670\":{\"c\":[\"flutter学习\"]},\"1671\":{\"c\":[\"archive\"]},\"1672\":{\"h\":\"flutter-widget布局开发\",\"t\":[\"widget开发思路\",\"widget 相当于View 开发flutter布局，并不是那么直观 我们用constraintLayout 写法是一层， 对于使用者来言，更直观。 最好的方式就是一层。\",\"最好采用mvp 把逻辑和视图分离 或者类似android-flux效果 这些写起布局清爽，也不用考虑与布局无关的逻辑， 太多widget内私有方法，或者全局变量会导致程序不易读\",\"以往开发baseTemplete效果， 公共titlebar ,公共 theme 公共 frame 公共list列表 可以解决布局大部分需求\",\"理念就是用模板\",\"而不是重复的语法，重复写，项目四处都是\"]},\"1673\":{\"c\":[\"flutter学习\"]},\"1674\":{\"c\":[\"archive\"]},\"1675\":{\"h\":\"flutter-提供View的-gone-visible-invisible\",\"t\":[\"安卓一般View有三种显示方式gone visible invisible fultter也要提供相应的支持，这个是验证可用的\",\"import 'package:flutter/widgets.dart'; import 'package:meta/meta.dart'; enum VisibilityFlag { visible, invisible, offscreen, gone, } class Visibility extends StatelessWidget { final VisibilityFlag visibility; final Widget child; final Widget removeChild; Visibility({ @required this.child, @required this.visibility, }) : this.removeChild = Container(); @override Widget build(BuildContext context) { if (visibility == VisibilityFlag.visible) { return child; } else if (visibility == VisibilityFlag.invisible) { return new IgnorePointer( ignoring: true, child: new Opacity(opacity: 0.0, child: child)); } else if (visibility == VisibilityFlag.offscreen) { return new Offstage(offstage: true, child: child); } else { return removeChild; } } } \"]},\"1676\":{\"c\":[\"flutter学习\"]},\"1677\":{\"c\":[\"archive\"]},\"1678\":{\"h\":\"flutter业务层编写思路\",\"t\":[\"底层库，有网络，和sp可以简单应付大部分场景\",\"flutter上层UI编写，basetemplete\\n闪屏页，登录页，主页4个tab，加上list页面，基本覆盖APP大多数UI场景\"]},\"1679\":{\"c\":[\"flutter学习\"]},\"1680\":{\"c\":[\"archive\"]},\"1681\":{\"h\":\"flutter实践学习\",\"t\":[\"#####导航 1、flutter学习思路 flutter简易启动框架 flutter开发工具 and so on...\"]},\"1682\":{\"h\":\"1、flutter学习思路\",\"t\":[\"学习一门新语言，很难通过一步一步学习，快速接入项目，原因是 1、商业项目一般是多个技术点的综合运用 2、学习到技术也符合28定律，真正运用到实践技术不多3、实际中项目学习，一般是先有，后优化关系 综上，我采取思路是，\",\"1、采用已开源代码成熟代码整合出一个新项目。关系就是先有鸡，后有蛋\",\"2、不考虑新语言音速，新开发一个APP，我需要什么？需要什么样子一个技术框图\",\"flutter学习思路\",\"站在我需要什么，而不是flutter有什么技术 站在使用者角度，不考虑原理，先出基本效果，再后续优化，That’s all.\",\"本文支持学习项目： https://github.com/yinlingchaoliu/flutter-easy.git\",\"//已写好工具 SpUtil 支持本地存储 HttpManager 基于dio支持网络请求任意灵活配置 Fluttertoast 第三方工具 \",\"基于GSYGithubAppFlutter项目重构\",\"json to dart https://javiercbk.github.io/json_to_dart/\",\"星期八的文章 https://www.cnblogs.com/hupo376787/default.html?page=2\",\"网络框架 https://github.com/flutterchina/dio\",\"json to dart https://javiercbk.github.io/json_to_dart/\",\"future http://www.ccc5.cc/2462.html\",\"开源项目 https://github.com/yinlingchaoliu/flutter-easy.git\",\"临时笔记 打包 flutter build apk\",\"参考资料\",\"官方教程 https://flutter.cn/\",\"flutter实战 https://book.flutterchina.club\",\"任玉刚 https://mp.weixin.qq.com/s/4G6hWW6GxnmV_j6d2rVBpA\",\"系统学习 https://github.com/AweiLoveAndroid/Flutter-learning\",\"优秀开源 https://github.com/alibaba/flutter-go\",\"flutter weex rn kotlin四种实现 https://github.com/CarGuo/GSYGithubAppFlutter\",\"native插件集成 https://github.com/alibaba/flutter_boost\",\"路由解决方案 https://github.com/alibaba-flutter/annotation_route\",\"框架方案 redux https://github.com/alibaba/fish-redux\",\"setting 模板 https://www.jianshu.com/p/4184745d6983\",\"感受布局的基本语法 https://www.jianshu.com/p/7511cb18a05e\",\"闲鱼开源 https://github.com/MissYoung/Flutter_shop\",\"技术点收集 https://github.com/Sky24n/flutter_wanandroid\",\"临时存储 https://www.jianshu.com/p/806219fd4d0b\",\"参考文章 dio网络 https://github.com/flutterchina/dio/blob/flutter/README-ZH.md#features-and-bugs\",\"异步\\nhttps://segmentfault.com/a/1190000014396421\"]},\"1683\":{\"c\":[\"flutter学习\"]},\"1684\":{\"c\":[\"archive\"]},\"1685\":{\"h\":\"flutter解决布局嵌套问题\",\"t\":[\"思路：flutter的布局嵌套层次太多，改成链式调用会简单一些\",\"原来的例子\",\"import 'package:flutter/material.dart'; import 'package:flutter_easy/common/util/common.dart'; void main() { runApp( new MaterialApp( title: '', theme: new ThemeData( primarySwatch: Colors.blue, ), home: new TestPage(), ), ); } ///author:chentong ///date:4/10/19 class TestPage extends StatelessWidget { @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: new Text('demo'), ), body: new Align( alignment: FractionalOffset.centerRight, child: new Padding( padding: CommonUtil.padding(left: 10), child: new Text(\\\"我是测试党\\\"))), ); } } \",\"假如再加上click事件，那么简直是太TMD的了\",\"设计模式中有建造者模式，可以用链式调用，解决多层嵌套问题\",\"调用如下，我还特意加上click事件\",\"WidgetDecoration(new Text(\\\"我是测试党\\\")) .padding(left: 10) .align(alignment: FractionalOffset.centerRight) .onTap((){ Fluttertoast.showToast(msg: \\\"你看我还能点击呢!\\\") }).build(), \",\"这样写法你说优秀不优秀 不用担心括号一层一层的问题\",\"完整建造者代码，已应用于项目\",\"import 'package:flutter/material.dart'; ///widget装饰器 /// /// author:chentong /// 层级调用改为链式调用，方便查看 /// 4/11/19 /// class WidgetDecoration { Widget _widget; WidgetDecoration(Widget widget) { this._widget = widget; } Function _onTapFunc; Function _onDoubleTapFunc; Function _onLongPressFunc; ///add padding属性 WidgetDecoration padding( {Key key, double left = 0.0, double top = 0.0, double right = 0.0, double bottom = 0.0}) { var padding = EdgeInsets.only(left: left, top: top, right: right, bottom: bottom); _widget = new Padding(key: key, padding: padding, child: _widget); return this; } ///增加padingall WidgetDecoration paddAll({Key key, double all = 0.0}) { var padding = EdgeInsets.all(all); _widget = new Padding(key: key, padding: padding, child: _widget); return this; } ///增加align 当前布局相对位置 ///FractionalOffset.centerRight WidgetDecoration align({Key key, AlignmentGeometry alignment = Alignment.center}) { _widget = new Align(key: key, alignment: alignment, child: _widget); return this; } ///位置 WidgetDecoration positioned( {Key key, double left, double top, double right, double bottom, double width, double height}) { _widget = new Positioned( key: key, left: left, top: top, right: right, bottom: bottom, width: width, height: height, child: _widget); return this; } ///stack 相当于frameLayout布局 ///填充布局 WidgetDecoration expanded({Key key, int flex = 1}) { _widget = new Expanded(key: key, flex: flex, child: _widget); return this; } ///是否显示布局 true为不显示 false为显示 WidgetDecoration offstage({Key key, bool offstage = true}) { _widget = new Offstage(key: key, offstage: offstage, child: _widget); return this; } ///透明度 0 是完全透明 1 完全不透明 WidgetDecoration opacity({Key key, @required double opacity, alwaysIncludeSemantics = false}) { _widget = new Opacity( key: key, opacity: opacity, alwaysIncludeSemantics: alwaysIncludeSemantics, child: _widget); return this; } ///基准线布局 WidgetDecoration baseline({ Key key, @required double baseline, @required TextBaseline baselineType, }) { _widget = new Baseline(key: key, baseline: baseline, baselineType: baselineType, child: _widget); return this; } ///设置宽高比 WidgetDecoration aspectRatio({Key key, @required double aspectRatio}) { _widget = new AspectRatio(key: key, aspectRatio: aspectRatio, child: _widget); return this; } ///矩阵转换 WidgetDecoration transform({ Key key, @required Matrix4 transform, origin, alignment, transformHitTests = true, }) { _widget = new Transform( key: key, transform: transform, origin: origin, alignment: alignment, transformHitTests: transformHitTests, child: _widget); return this; } ///居中 todo: center WidgetDecoration center({Key key, double widthFactor, double heightFactor}) { _widget = new Center(key: key, widthFactor: widthFactor, heightFactor: heightFactor, child: _widget); return this; } ///布局容器 WidgetDecoration container({ Key key, alignment, padding, Color color, Decoration decoration, foregroundDecoration, double width, double height, BoxConstraints constraints, margin, transform, }) { _widget = new Container( key: key, alignment: alignment, padding: padding, color: color, decoration: decoration, foregroundDecoration: foregroundDecoration, width: width, height: height, constraints: constraints, margin: margin, transform: transform, child: _widget); return this; } ///设置具体尺寸 WidgetDecoration sizedBox({Key key, double width, double height}) { _widget = new SizedBox(key: key, width: width, height: height, child: _widget); return this; } ///设置最大最小宽高布局 WidgetDecoration constrainedBox({ Key key, minWidth = 0.0, maxWidth = double.infinity, minHeight = 0.0, maxHeight = double.infinity, }) { BoxConstraints constraints = new BoxConstraints( minWidth: minWidth, maxWidth: maxWidth, minHeight: minHeight, maxHeight: maxHeight); _widget = new ConstrainedBox(key: key, constraints: constraints, child: _widget); return this; } ///限定最大宽高布局 WidgetDecoration limitedBox({ Key key, maxWidth = double.infinity, maxHeight = double.infinity, }) { _widget = new LimitedBox(key: key, maxWidth: maxWidth, maxHeight: maxHeight, child: _widget); return this; } ///百分比布局 WidgetDecoration fractionallySizedBox( {Key key, alignment = Alignment.center, double widthFactor, double heightFactor}) { _widget = new FractionallySizedBox( key: key, alignment: alignment, widthFactor: widthFactor, heightFactor: heightFactor, child: _widget); return this; } ///缩放布局 WidgetDecoration fittedBox({Key key, fit = BoxFit.contain, alignment = Alignment.center}) { _widget = new FittedBox(key: key, fit: fit, alignment: alignment, child: _widget); return this; } ///旋转盒子 1次是90度 WidgetDecoration rotatedBox({ Key key, @required int quarterTurns, }) { _widget = new RotatedBox(key: key, quarterTurns: quarterTurns, child: _widget); return this; } ///装饰盒子 细节往外抛 decoration 编写放在外面 WidgetDecoration decoratedBox({ Key key, @required Decoration decoration, position = DecorationPosition.background, }) { _widget = new DecoratedBox(key: key, decoration: decoration, position: position, child: _widget); return this; } ///圆形剪裁 WidgetDecoration clipOval( {Key key, CustomClipper<Rect> clipper, Clip clipBehavior = Clip.antiAlias}) { _widget = new ClipOval(key: key, clipper: clipper, clipBehavior: clipBehavior, child: _widget); return this; } ///圆角矩形剪裁 WidgetDecoration clipRRect( {Key key, @required BorderRadius borderRadius, CustomClipper<RRect> clipper, Clip clipBehavior = Clip.antiAlias}) { _widget = new ClipRRect( key: key, borderRadius: borderRadius, clipper: clipper, clipBehavior: clipBehavior, child: _widget); return this; } ///矩形剪裁 todo: 需要自定义clipper 否则无效果 WidgetDecoration clipRect( {Key key, @required CustomClipper<Rect> clipper, Clip clipBehavior = Clip.hardEdge}) { _widget = new ClipRect(key: key, clipper: clipper, clipBehavior: clipBehavior, child: _widget); return this; } ///路径剪裁 todo: 需要自定义clipper 否则无效果 WidgetDecoration clipPath( {Key key, @required CustomClipper<Path> clipper, Clip clipBehavior = Clip.antiAlias}) { _widget = new ClipPath(key: key, clipper: clipper, clipBehavior: clipBehavior, child: _widget); return this; } ///animatedOpacity 淡入淡出 WidgetDecoration animatedOpacity({ Key key, @required double opacity, Curve curve = Curves.linear, @required Duration duration, }) { _widget = new AnimatedOpacity( key: key, opacity: opacity, curve: curve, duration: duration, child: _widget); return this; } ///页面简单切换效果 WidgetDecoration hero({Key key, @required Object tag}) { _widget = new Hero(key: key, tag: tag, child: _widget); return this; } ///点击事件 WidgetDecoration onClick({Key key, onTap, onDoubleTap, onLongPress}) { _widget = new GestureDetector( key: key, child: _widget, onTap: onTap ?? _onTapFunc, onDoubleTap: onDoubleTap ?? _onDoubleTapFunc, onLongPress: onLongPress ?? _onLongPressFunc, ); return this; } ///添加点击事件 WidgetDecoration onTap(Function func, {Key key}) { _onTapFunc = func; _widget = new GestureDetector( key: key, child: _widget, onTap: _onTapFunc, onDoubleTap: _onDoubleTapFunc, onLongPress: _onLongPressFunc, ); return this; } ///双击 WidgetDecoration onDoubleTap(Function func, {Key key}) { _onDoubleTapFunc = func; _widget = new GestureDetector( key: key, child: _widget, onTap: _onTapFunc, onDoubleTap: _onDoubleTapFunc, onLongPress: _onLongPressFunc, ); return this; } ///长按 WidgetDecoration onLongPress(Function func, {Key key}) { _onLongPressFunc = func; _widget = new GestureDetector( key: key, child: _widget, onTap: _onTapFunc, onDoubleTap: _onDoubleTapFunc, onLongPress: _onLongPressFunc, ); return this; } Widget build() { return _widget; } } \"]},\"1686\":{\"c\":[\"flutter学习\"]},\"1687\":{\"c\":[\"archive\"]},\"1688\":{\"h\":\"flutter-boost接入\"},\"1689\":{\"h\":\"接入flutter boost原因\",\"t\":[\"flutter 没有像RN一样，可以划分为容器+dist形式。 项目需要联合编译。 flutter用dart编写，语法上类java, 选用dart的人，还是很Geek的人。 但是站在业务角度，尽可能不改动别人代码，复用别人业务。给重构找出平滑过渡时间。才是重要的。 所以选型接入flutter_boost。让flutter像webview一样引用\"]},\"1690\":{\"h\":\"配置接入\",\"t\":[\"yaml 配置\",\"flutter_boost: git: url: 'https://github.com/alibaba/flutter_boost.git' ref: '4.2.0' \",\"dart端集成\",\"flutter pub get \",\"github 128错误 多重试几次\"]},\"1691\":{\"c\":[\"跨端技术\"]},\"1692\":{\"c\":[\"archive\"]},\"1693\":{\"h\":\"跨端技术与独立集成\"},\"1694\":{\"h\":\"前言\",\"t\":[\"最近公司的技术有些百花齐放，跨端技术有用到uniapp，flutter。都部署给到客户了。 收到反馈，uniapp想要交给移动端负责，flutter采用dart语言，很小众，前端不想接手 突然有个感慨：跨端技术和独立集成是一个硬币两面。 独立集成解决已有技术，接入新技术平滑过渡，和业务代码复用问题 跨端技术解决一套代码，多端复用问题。\",\"两者都不能偏废啊，一个成熟的项目，不可能是一种技术栈。随着技术演变，必然是多技术栈混合的。eg:原生技术接入Flutter, RN,uniapp\"]},\"1695\":{\"c\":[\"跨端技术\"]},\"1696\":{\"c\":[\"archive\"]},\"1697\":{\"h\":\"鸿蒙开发\"},\"1698\":{\"c\":[\"鸿蒙开发\"]},\"1699\":{\"h\":\"鸿蒙 & arkUI & ArkTS\",\"t\":[\"万物互联\",\"arkUI\",\"自定义 View\",\"传递变量\",\"观察者\",\"页面跳转\",\"module\",\"存储\"]},\"1700\":{\"c\":[\"跨端技术\"]},\"1701\":{\"h\":\"鸿蒙开发认证\",\"t\":[\"1、快速刷一遍视频 3h\",\"https://developer.huawei.com/consumer/cn/training/course/introduction/C101664263955318144\",\"2、做模拟题、记录错题(3 遍，直到通过)\"]},\"1702\":{\"h\":\"错题记录\",\"t\":[\"在真机上运行 Release 类型的 HAP 包需要签名，运行 Debug 类型的 HAP 包则不需要签名。\",\"错误(False)\",\"跨端迁移是一种实现用户应用程序流转的技术方案，指多端上 FA/PA 同时运行、或者交替运行实现完整的业务。\",\"错误(False)\",\"HarmonyOS 应用在跨端迁移后，原设备上的应用需要自行退出。\",\"正确(True)\",\"HarmonyOS 服务卡片使用方可以通过通信适配层和卡片提供方直接交互。\",\"错误(False)\",\"在 HarmonyOS 中，当订阅动作是在无序公共事件发布之后进行，订阅者也能收到该无序公共事件。\",\"错误(False)\",\"在 HarmonyOS 有序公共事件中，高优先级订阅者可修改公共事件内容或处理结果，但不能终止公共事件处理。\",\"错误(False)\",\"HarmonyOS 跨端迁移和多端协同，是使用不同的 FA/PA，在不同设备间运行来实现完整的业务。\",\"错误(False)\",\"HarmonyOS Connect 继承了 HiLink 的碰一碰、快速连接的功能体验，而在连接技术上，HarmonyOS Connect 使用了 HarmonyOS 的分布式软总线连接能力。\",\"正确(True)\",\"声明式开发范式的属性动画需要在 css 样式文件中设置。\",\"错误(False)\",\"在 HarmonyOS 中发布带权限公共事件，发布者首先要在 config.json 中申请所需的权限。\",\"错误(False)\",\"类 Web 开发范式中的自定义组件引入到宿主页面时，必须使用属性指定自定义组件名称。\",\"错误(False)\",\"HarmonyOS 原子化布局包含自适应变化和自适应布局两类。\",\"正确(True)\",\"在 HarmonyOS 流转中，如果对端设备不支持流转任务管理服务，则不能进行跨端迁移。\",\"错误(False)\",\"以下哪个 HarmonyOS 的 AI 能力可以提供文档翻拍过程中的辅助增强功能？\",\"文档检测矫正\",\"视频来电时从手机迁移到智慧屏，视频聊天体验更佳，手机视频应用退出。该场景中使用了 HarmonyOS 的哪一项流转方案？\",\"跨端迁移\",\"以下哪种原子化布局能力是控制元素的尺寸？\",\"A. 缩放\",\"JS 服务卡片在以下哪个选项中进行加载渲染？\",\"B. 卡片使用方\",\"类 Web 开发范式中的自定义组件使用以下哪个标签引入到宿主页面？\",\"element\",\"通过以下哪个接口可以一次性查询到 HAP 包下所有 Ability 的信息？\",\"C. bundleManager.getBundleInfo\",\"以下哪一个工具可以提供兼容性测试报告，用于验证 HarmonyOS 应用在华为真机设备上运行的兼容性问题，包括首次安装、再次安装、启动、卸载等场景？\",\"B. 应用云测试\",\"在类 Web 开发范式自定义组件的生命周期回调方法中，以下哪一项生命周期可用于初始化显示相关数据，通常用于加载图片资源、开始执行动画等场景？\",\"C. onAttached\",\"以下哪个公共事件发布后，订阅者再发起订阅还能收到之前发布的公共事件？\",\"A. 粘性公共事件\",\"以下哪一个选项是类 Web 开发范式的绘图组件 svg 中绘制椭圆形状的子组件？\",\"C. ellipse\",\"某 HarmonyOS 开发者想要使用 https 请求，需要导入以下哪个模块？\",\"B. @ohos.net.http\",\"在类 Web 开发范式的自定义组件中，父组件通过设置属性向子组件传递参数，该开发者自定义的属性名称为 compProp，在父组件引用时需要将属性名称转换为下列哪一项？\",\"B. comp-prop\",\"以下哪种原子化布局能力属于自适应变化能力？\",\"C. 拉伸\",\"在声明式开发范式中，可以通过以下哪个参数，设置属性动画的播放次数？\",\"B. iterations\",\"HarmonyOS 设备 A 上的应用通过调用分布式任务调度的能力 startAbility，向设备 B 的应用发起多端协同，此过程属于多端协同的哪个过程？\",\"B. 流转进行\",\"在 HarmonyOS 流转架构中，以下哪个模块提供远程服务启动、远程服务连接、远程迁移等能力？\",\"分布式任务调度\",\"HarmonyOS 流转任务管理服务为开发者提供了以下哪几项功能？ ABCD\",\"A. 注册 B. 上报业务状态 C. 显示设备列表 D. 解注册\",\"HarmonyOS 提供的包管理能力包含以下哪些信息？ABCD\",\"A. 应用包信息 B. 应用程序信息 C. Ability 信息 D. HAP 包信息\",\"HarmonyOS 多窗口交互能力提供了以下哪几种交互方式？\",\"A. 悬浮窗 B. 分屏 D. 平行视界\",\"HarmonyOS 分布式数据服务通过以下哪几项，将不同应用的数据进行隔离？\",\"A. 数据库 C. 应用 D. 账号\",\"类 Web 开发范式中的自定义组件绑定子组件事件使用的是以下哪几种语法？\",\"C. on D. @\",\"HarmonyOS 通知内容包含以下哪几种类型？\",\"A. 普通文本 B. 图片 C. 长文本 D. 多行文本\",\"HarmonyOS 设计工具是一款 Sketch 插件，包含以下哪几种功能？\",\"A. 设计系统 B. 标注工具 C. 控件库 D. 原子化布局\",\"当 HarmonyOS 设备不支持流转任务管理服务时，开发者需要自行实现以下哪些功能？\",\"A. 流转状态管理 D. 设备选择\",\"在声明式开发范式中，页面间转场通过在全局 pageTransition 方法内配置以下哪几个组件来自定义页面转场动效？\",\"A. PageTransitionExit B. PageTransitionEntry\",\"HarmonyOS 分布式数据服务包含以下哪几项？ABCD\",\"A. 同步组件 B. 通信适配层 C. 存储服务 D. 分布式数据服务接口\",\"以下哪几项属于 HarmonyOS Connect 服务包提供的基础服务？\",\"A. 极简连接 B. 万能卡片 C. 极简交互\",\"HarmonyOS 的 NotificationSlot 包含以下哪几种类型？\",\"A. 服务提醒 B. 其他类型 C. 社交通信 D. 内容咨询\",\"HarmonyOS 服务卡片提供方包含以下哪几个模块？ABC\",\"A. 卡片提供方实例管理模块 B. 卡片服务 C. 通信适配层\",\"在声明式开发范式中，以下哪些装饰器装饰的自定义组件成员变量必须本地初始化？\",\"A. @State D. @Prop\",\"DevEco Studio 性能分析器能够对以下哪几方面资源进行使用率分析？\",\"A. CPU B. 电池 C. 内存 D. 网络\",\"HarmonyOS 应用可以直接读取日历信息，不需要单独配置权限。\",\"错误(False)\",\"在 HarmonyOS 中发布带权限公共事件，发布者首先要在 config.json 中申请所需的权限。\",\"错误(False)\",\"类 Web 开发范式中的自定义组件引入到宿主页面时，必须使用属性指定自定义组件名称。\",\"错误(False)\",\"i18n 是一种趋同的设计方式，通过一种方案去满足不同国家的需求。\",\"错误(False)\",\"HarmonyOS 的方舟开发框架包含基于 TS 扩展的类 Web 开发范式和基于 JS 扩展的声明式开发范式。\",\"错误(False)\",\"HarmonyOS 跨端迁移和多端协同，是使用不同的 FA/PA，在不同设备间运行来实现完整的业务。\",\"错误(False)\",\"在 HarmonyOS 中，当订阅动作是在无序公共事件发布之后进行，订阅者也能收到该无序公共事件。\",\"错误(False)\",\"HarmonyOS Connect 继承了 HiLink 的碰一碰、快速连接的功能体验，而在连接技术上，HarmonyOS Connect 使用了 HarmonyOS 的分布式软总线连接能力。\",\"正确(True)\",\"HarmonyOS 原子化布局包含自适应变化和自适应布局两类。\",\"正确(True)\",\"在 HarmonyOS 有序公共事件中，高优先级订阅者可修改公共事件内容或处理结果，但不能终止公共事件处理。\",\"错误(False)\",\"HarmonyOS 服务卡片使用方可以通过通信适配层和卡片提供方直接交互。\",\"错误(False)\",\"在 HarmonyOS 流转架构中，以下哪个模块提供远程服务启动、远程服务连接、远程迁移等能力？\",\"B. 分布式任务调度\",\"声明式开发范式的转场动画包含以下哪几种类型？\",\"A. 组件内转场 B. 页面间转场 C. 共享元素转场\",\"HarmonyOS 服务卡片提供方包含以下哪几个模块？\",\"A. 通信适配层 C. 卡片提供方实例管理模块 D. 卡片服务\",\"HarmonyOS 跨端迁移和多端协同，是使用不同的 FA/PA，在不同设备间运行来实现完整的业务。\",\"错误(False)\",\"在 HarmonyOS 中，当订阅动作是在无序公共事件发布之后进行，订阅者也能收到该无序公共事件。\",\"错误(False)\",\"在 HarmonyOS 流转中，如果对端设备不支持流转任务管理服务，则不能进行跨端迁移。\",\"错误(False)\",\"HarmonyOS Connect 继承了 HiLink 的碰一碰、快速连接的功能体验，而在连接技术上，HarmonyOS Connect 使用了 HarmonyOS 的分布式软总线连接能力。\",\"正确(True)\",\"在 HarmonyOS 有序公共事件中，高优先级订阅者可修改公共事件内容或处理结果，但不能终止公共事件处理。\",\"错误(False)\",\"HarmonyOS 应用可以直接读取日历信息，不需要单独配置权限。\",\"错误(False)\",\"HarmonyOS 应用在跨端迁移后，原设备上的应用需要自行退出。\",\"正确(True)\",\"类 Web 开发范式中的自定义组件引入到宿主页面时，必须使用属性指定自定义组件名称。\",\"错误(False)\"]},\"1703\":{\"c\":[\"跨端技术\"]},\"1704\":{\"h\":\"鸿蒙证书\"},\"1705\":{\"c\":[\"跨端技术\"]},\"1706\":{\"h\":\"鸿蒙高级认证\",\"t\":[\"https://developer.huawei.com/consumer/cn/training/dev-cert-detail/101684223987951077\"]},\"1707\":{\"h\":\"1、判断题\",\"t\":[\"HarmonyOS 应用可以兼容 OpenHarmony 生态\",\"对\",\"DevEco Studio 是开发 HarmonyOS 应用的一站式集成开发环境\",\"对\",\"main_pages.json 存放页面 page 路径配置信息\",\"对\",\"云函数打包完成后，需要到 AppGallery Connect 创建对应函数的触发器才可以在端侧中调用\",\"错\",\"Ability 是系统调度应用的最小单元，是能够完成一个独立功能的组件。一个应用可以包含一个或多个 Ability。\",\"正确(True)\",\"使用 http 模块发起网络请求时，必须要使用 on(‘headersReceive’）订阅请求头，请求才会成功。\",\"错误(False)\",\"Video 组件可以支持本地视频路径和网络路径播放。播放网络视频时，需要申请权限 ohos.permission.INTERNET。\",\"正确(True)\",\"Tabs 组件仅可包含子组件 TabsContent，每一个页签对应一个内容视图即 TabContet 组件。\",\"正确(True)\",\"每调用一次 router.pushUrl()方法，默认情况下，页面栈数量会加 1，页面栈支持的最大页面数量为 32。\",\"对\",\"@CustomDialog 装饰器用于装饰自定义弹窗组件，使得弹窗可以动态设置内容及样式。\",\"正确(True)\",\"Web 组件对于所有的网页都可以使用 zoom(factor: number)方法进行缩放。\",\"错误(False)\",\"每一个自定义组件都有自己的生命周期\",\"对\",\"首选项是非关系数据库，遵循 ACID 特性\",\"错\",\"使用端云一体化开发，无需自己搭建服务器，并进行运维了。\",\"对\",\"所有使用 @Component 修饰的自定义组件都支持 onPageShow，onBackPress 和 onPageHide 生命周期函数。\",\"错\",\"只要使用端云一体化的云端资源就需要支付费用\",\"错\",\"首选项 preferences 是以 Key-Value 形式存储数据，其中 Key 是可以重复。\",\"错\",\"基于端云一体化开发，开发者需要精通前端、后端不同的开发语言。\",\"错\",\"Worker 线程不支持 UI 操作\",\"对\",\"在 Column 和 Row 容器组件中，alignItems 用于设置子组件在主轴方向上的对齐格式，justifyContent 用于设置子组件在交叉轴方向上的对齐格式\",\"错 \",\"ArkUI 是声明式开发范式\",\"对\",\"循环渲染 ForEach 可以从数据源中迭代获取数据，并为每个数组项创建相应的组件\",\"对\",\"@Link 变量不能在组件内部进行初始化\",\"对\",\"一个应用只能有一个 UIAbility\",\"错\",\"创建的 Empty Ability 模板工程，初始会生成一个 UIAbility 文件\",\"对\",\"每调用一次 router.pushUrl()方法，页面路由栈数量均会加 1\",\"错\",\"在 Column 容器中的子组件默认是按照从上到下的垂直方向布局的，其主轴的方向是垂直方向，在 Row 容器中的组件默认是按照从左到右的水平方向布局的，其主轴的方向是水平方向。\",\"正确\",\"List 容器可以沿水平方向排列，也可以沿垂直方向排列\",\"（正确）\",\"当 Tabs 组件的参数 barPosition 为 BarPosition.End 时，页签位于页面底部。\",\"（错误）\",\"Resource 是资源引用类型，用于设置组件属性的值，可以定义组件的颜色、文本大小、组件大小等属性。（正确）\"]},\"1708\":{\"h\":\"2、选择题\",\"t\":[\"1.用哪一种装饰器修饰的 struct 表示该结构体具有组件化能力\",\"A. @Component\",\"用哪一种装饰器修饰的组件可作为页面入口组件？\",\"B. @Entry\",\"关于 UIAbility 的启动模式，下列说法错误的是：\",\"C. muliton 为多实例模式，每次 startAbility 都会启动一个新的实例，系统默认为 muliton 为模式。\",\"发起网络数据请求需要导入以下哪个模块？\",\"A. import http from ‘@ohos.net.http’\",\"在下面哪个文件中可以设置页面的路径配置信息？\",\"A. main_pages.json\",\"首选项 preferences 值的存储支持哪些数据类型？\",\"D. 数字型、字符型、布尔型以及这 3 种类型的数组类型。\",\"关于 Button 组件，下面哪个样式是胶囊型按钮：\",\"A. ButtonType.Capsule\",\"例如现在要实现一个广告弹窗，包含图片和文本等信息，使用下面那种弹窗可以实现\",\"B. @CustomDialog\",\"关于 Web 组件，下面描述错误的是：\",\"D. 使用 Web 组件访问在线和离线网页都需要添加 ohos.permission.INTERNET 权限。\",\"使用 Image 组件加载网络图片需要如下哪种权限？\",\"B. ohos.permission.INTERNET\",\"页面路由需要导入以下哪个模块？\",\"B. import router from ‘@ohos.router’\",\"首选项 key 的最大长度限制大小为（）字节？\",\"C. 80\",\"关于 Video 组件的回调事件，下列说法错误的是：\",\"A. onStart 视频播放时触发该事件，可以在这里获取视频时长。\",\"关于 Resource 是资源引用类型描述错误的是：\",\"C. Resource 支持所有的数据类型。\",\"下面哪个方法，可以跳转到一个新页面，并销毁当前页面。\",\"B. router.replaceUrl()\",\"API9 及以上，router.pushUrl()方法，默认的跳转页面使用的模式是哪一种？（A）\",\"A. standard\",\"API9 及以上，router.pushUrl()方法的 mode 参数可以配置为以下哪几种跳转页面使用的模式？（A B）\",\"A. Standard\",\"B. Single\",\"对于 Tabs 组件页签的位置设置，下面描述错误的是\",\"D. 当 barPosition 为 End ，vertical 属性为 true 时，页签位于容器底部。\",\"下面哪一个事件方法可以获取到 List 滑动的偏移量\",\"A. onScroll\",\"发布后的鸿蒙应用可以在哪里获取？\",\"华为应用市场\",\"关于 @State 状态数据特征，下列描述错误的是：\",\"@State 变量可以不用给定初始值。\",\"上传鸿蒙应用或元服务软件包时，软件包的格式是什么？\",\"B. app\",\"关于容器组件 Row 和 Column，下面说法错误的是：\",\"Row 的子组件在交叉轴方向上的对齐方式使用 alignItems 属性来设置，其参数类型为 HorizontalAlign。\",\"元服务包由一个或多个 HAP 包组成，每个 HAP 包不得超过（），以提供秒开体验\",\"10MB\",\"下面哪个组件不能包含子组件：\",\"LoadingProgress\",\"开放式测试版本发布后，受邀测试用户如何体验？\",\"点击邀请链接接收邀请，自动跳转到应用市场或者进入应用市场搜索待体验的元服务名称\",\"发布应用时要创建证书，证书类型选择什么类型？\",\"B. 发布证书\",\"关于 Video 组件的回调事件，下列说法错误的是：\",\"A. onStart 视频播放时触发该事件，可以在这里获取视频时长。\",\"（）模块提供了全双工通信协议\",\"B. WebSocket\",\"Worker 线程最大同时激活数\",\"8\",\"跨端迁移和协同是哪个鸿蒙特征的能力\",\"C.统一生态\",\"Webview 在 HarmonyOS 中的入口是通过什么组件体现的\",\"Web 组件\",\"HUKS 中文全称是什么\",\"通用密钥库系统\",\"端云一体化当前支持最低的鸿蒙 API 版本是\",\"9\",\"发布开放式测试版本后，还需要人工审核吗？\",\"B. 不需要\",\"发布开放式测试版本后，还可以再更新版本吗？\",\"A. 可以\",\"发布开放式测试版本后，怎么追加测试用户？\",\"需要重新发布新的测试版本追加用户\",\"发布开放式测试版本后，还可以再追加测试用户吗？\",\"B. 不可以\",\"引用 ohpm 三方库的包依赖是在哪个配置文件中\",\"oh-package.json5\",\"元服务创建测试用户时，用户列表存储位置需要选择\",\"B. 中国\",\"认证服务支持下列哪种帐号认证\",\"华为帐号\",\"下列哪种组合方式不能实现子组件从父子组件之间双向数据同步。\",\"D. @State 和 @Prop\",\"@State 修饰的状态数据被修改时会触发组件的（）方法进行 UI 界面更新\",\"A. build 方法\",\"关于 UIAbility 的启动模式，下列说法错误的是：\",\"C. muliton 为多实例模式，每次 startAbility 都会启动一个新的实例，系统默认为 muliton 为模式。\",\"自定义组件的 aboutToAppear()在什么时机执行\",\"B. build 函数之前\",\"元服务包名必须以哪个字段结尾?\",\".hmservice\",\"Row 组件中有两个 Text 组件，如果使用 justifyContent 对齐方式，下面哪个属性可以实现左右两端对齐：\",\"FiexAign.SpaceBetween\",\"HarmonyOS 提供的 Webview 能力是否支持与 H5 双向通信\",\"支持\",\"应用包名不能包含一些保留字段，以下哪个字段符合规范?\",\"A. .test.\",\"开发者在 DevEco Studio 中，可以通过什么方式使用端云一体化？\",\"工程模版\",\"认证服务支持下列哪种帐号认证\",\"C. 华为帐号\",\"发布应用时需要创建 Profile 时，类型选择什么类型？\",\"发布\",\"添加用户信息时，如果帐号使用手机号码，以下哪种输入格式正确？\",\"86-189****1234\",\"创建应用时，应用包名需要和 config.json/app.json5 文件中哪个字段保持一致？\",\"C. bundleName\",\"UIAbility 启动模式需要在 module.json5 文件中配置哪个字段？\",\"C. launchType\"]},\"1709\":{\"h\":\"3、多选题\",\"t\":[\"鸿蒙特征包含哪些场景化能力\",\"A. 一次开发、多端部署\",\"B. 可分可合、自由流转\",\"C. 统一生态、原生智能\",\"鸿蒙应用/元服务上架过程上传软件包常见的问题有哪些\",\"A. 软件包中的发布 Profile 文件和当前上传软件包的应用不匹配\",\"B. 软件包中的发布证书与发布 Profile 文件中的发布证书不匹配\",\"C. 软件包未签名导制提示非法软件包\",\"D. 软件包中使用证书已经失效过者过期\",\"entry 下的 module.json5 中包含以下哪些信息\",\"B. Ability 的配置信息\",\"C. 设备类型信息\",\"D. 应用权限申请列表\",\"module.json5 配置文件中，包含了以下哪些信息？\",\"A. ability 的相关配置信息\",\"B. 模块名\",\"D. 模块类型\",\"如何在 DevEco Studio 中创建新项目？\",\"B. 如果已打开项目，从 DevEco Studio 菜单选择’file>new>Create Project’\",\"C. 如果第一次打开 DevEco Studio，在欢迎页点击“Create new Project”\",\"下面哪些容器组件是可以滚动的\",\"A. Scroll\",\"B. List\",\"D. Grid\",\"下面哪些是 Ability 的生命周期回调函数？\",\"A. onCreate\",\"B. onDestroy\",\"E. onForeground\",\"F. onBackground\",\"下面哪些函数是自定义组件的生命周期函数\",\"A. aboutToAppear\",\"B. aboutToDisappear\",\"C. onPageShow\",\"D. onPageHide\",\"E. onBackPress\",\"下面哪些装饰器可以用于管理自定义组件中变量的状态？\",\"C. @State\",\"D. @Link\",\"下面哪些组件层次结构是正确的。\",\"A. Text>Span\",\"B. Button>Column>Image\",\"E. Column>Row>Button\",\"71、端云一体化已经集成以下哪些服务 SDK\",\"A. 云函数\",\"B. 云数据库\",\"C. 云存储\",\"UIAbility 的启动模式有哪些\",\"A. singleton\",\"B. specified\",\"C. multition\",\"公共事件服务为应用程序提供哪些能力\",\"B. 订阅公共事件\",\"C. 发布公共事件\",\"D. 取消订阅公共事件\",\"端云一体化工程目录结构分为哪些部分\",\"A. 端开发工程（Application）\",\"B. 云开发工程（CloudProgram）\",\"C. 端侧公共库（External Libraries）\",\"端云一体化中的云函数支持哪些操作\",\"A. 编写函数\",\"B. 测试函数\",\"C. 打包函数\",\"D. 部署函数\",\"关于 Tabs 组件和 TabContent 组件，下列描述正确的是\",\"A. TabContent 组件不支持设置通用宽度属性，其宽度等于 Tabs 组件的 barWidth 属性。\",\"B. TabContent 组件不支持设置通用高度属性，其高度由父组件 Tabs 高度与 TabBar 组件高度决定。\",\"C. TabsController 用于控制 Tabs 组件进行页签切换，不支持一个 TabsController 控制多个 Tabs 组件。\",\"D. TabContent 组件的 tabBar 属性支持使用 @Builder 构造器生成的组件。\",\"以下关于 ArkTS 声明式开发范式的基本组成说明正确的是\",\"A. 装饰器：用来装饰类、结构体、方法以及变量，赋予其特殊的含义，例如 @Entry 表示这是个入口组件。\",\"B. 自定义组件：可复用的 UI 单元，可组合其它组件。\",\"C. UI 描述：声明式的方法来描述 UI 的结构，例如 build()方法中的代码块。\",\"D. 内置组件：ArkTS 中默认内置的基本组件和布局组件，开发者可以直接调用，如 Column、Text、Divider、Button 等。\",\"E. 属性方法：用于组件属性的配置，统一通过属性方法进行设置，如 fontSize()、width()、height()、color() 等。\",\"F. 事件方法：用于添加组件对事件的响应逻辑，统一通过事件方法进行设置，如跟随在 Button 后面的 onClick()。\",\"针对包含文本元素的组件，例如 Text、Button、TextInput 等，可以使用下列哪些属性：\",\"A. fontColor\",\"B. fontSize\",\"C. fontStyle\",\"D. fontWeight\",\"E. fontFamily\",\"关于 ForEach(arr, itemGenerator, index)组件的描述正确的是：\",\"B. 第一个参数必须是数组，提供循环渲染的数据源。\",\"C. 第二个参数生成子组件的 lambda 函数，为数据源中的每个数组项生成子组件。\",\"D. 第三个参数为匿名函数，用于给定数组项生成唯一且稳定的键值。\",\"创建应用时，应用包名需要和 config.json 文件中哪个字段保持一致？（排除 B）\",\"A. package\",\"B. name\",\"C. bundleName\",\"一次开发多端部署的三个层次有哪些？\",\"A. 界面级一多\",\"B. 功能级一多\",\"C. 工程级一多\",\"UIAbility 的生命周期包括哪些函数？（ABCD）\",\"A. onCreate\",\"B. onForeground\",\"C. onBackground\",\"D. onDestroy\",\"自定义组件的组件化特点有哪些？（ABCD）\",\"A. 可组合\",\"B. 可重用\",\"C. 配置化生命周期\",\"D. 数据驱动更新\",\"端云一体化工程目录结构分为哪些部分\",\"A. 端开发工程（Application）\",\"B. 云开发工程（CloudProgram）\",\"C. 端侧公共库（External Libraries）\"]},\"1710\":{\"h\":\"4、低频题\"},\"1711\":{\"h\":\"1、判断题\",\"t\":[\"1.在 Column 容器中的子组件默认是按照从上到下的垂直方向布局的，其主轴的方向是垂直方向，在 Row 容器中的组件默认是按照从左到右的水平方向布局的，其主轴的方向是水平方向。（正确）\",\"2.List 容器可以沿水平方向排列，也可以沿垂直方向排列。（正确）\",\"3.当 Tabs 组件的参数 barPosition 为 BarPosition.End 时，页签位于页面底部。（错误）\",\"4.Resource 是资源引用类型，用于设置组件属性的值，可以定义组件的颜色、文本大小、组件大小等属性。（正确）\",\"1.@State 修饰的属性不允许在本地进行初始化。（错误）\",\"2.@CustomDialog 装饰器用于装饰自定义弹窗组件，使得弹窗可以自定义内容及样式。（正确）\",\"3.将 Video 组件的 controls 属性设置为 false 时，不会显示控制视频播放的控制栏。（正确）\",\"4.@Prop 修饰的属性值发生变化时，此状态变化不会传递到其父组件。（正确）\",\"1.属性动画中产生动画的属性可以在任意位置声明。（错误）\",\"2.属性动画中改变属性时需触发 UI 状态更新。（正确）\",\"1.在 http 模块中，多个请求可以使用同一个 httpRequest 对象，httpRequest 对象可以复用。（错误）\",\"2.使用 http 模块发起网络请求后，可以使用 destroy 方法中断网络请求。（正确）\",\"3.Web 组件 onConfirm(callback: (event?: { url: string; message: string; result: JsResult }) => boolean)事件，返回 false 时候触发网页默认弹窗。（正确）\",\"1.首选项是关系型数据库。（错误）\",\"2.应用中涉及到 Student 信息，如包含姓名，性别，年龄，身高等信息可以用首选项来存储。（错误）\",\"3.同一应用或进程中每个文件仅存在一个 Preferences 实例。（正确）\",\"1.构造进度条模板通知，name 字段当前需要固定配置为 downloadTemplate。（正确）\",\"2.给通知设置分发时间，需要设置 showDeliveryTime 为 false。（错误）\",\"3.OpenHarmony 提供后台代理提醒功能，在应用退居后台或退出后，计时和提醒通知功能被系统后台代理接管。（正确）\",\"1.元服务发布的国家与地区仅限于“中国大陆” （正确）\",\"2.编译打包的软件包存放在项目目录 build > outputs > default 下 （正确）\",\"1.三方组件是开发者在系统能力的基础上进行了一层具体功能的封装，对其能力进行拓展的工具 。（正确）\",\"2.可以通过 ohpm uninstall 指令下载指定的三方库（错误）\",\"3.lottie 使用 loadAnimation 方法加载动画。（正确）\",\"1.HarmonyOS 云开发可以在一个项目中同时实现端侧和云侧功能的开发。（正确）\",\"2.进行端云一体开发时，开发者需要精通前端、后端不同的开发语言。（错误）\"]},\"1712\":{\"h\":\"2、单选题\",\"t\":[\"1.使用 TextInput 完成一个密码输入框，推荐设置 type 属性为下面哪个值？（B）\",\"B. InputType.Password\",\"2.使用 Image 加载网络图片，需要以下那种权限？（B）\",\"B. ohos.permission.INTERNET\",\"3.下面哪个组件层次结构是错误的？（C）\",\"C. Grid>Row>GridItem\",\"1.使用 Video 组件播放网络视频时，需要以下哪种权限？（B）\",\"B. ohos.permission.INTERNET\",\"2.下列哪种组合方式可以实现子组件从父子组件单向状态同步。（C）\",\"C. @State 和 @Prop\",\"1.属性 animation 可以在哪些组件中使用？（C）\",\"C. 基础组件和容器组件\",\"2.属性动画中如何设置反向播放？（D）\",\"D. PlayMode.Reverse\",\"3.下面哪种情况不会回调 onFinish 函数？（C）\",\"C. iterations 设置为 -1\",\"4.属性动画中关于 animation 参数说法错误的是？（B）\",\"B. 参数 delay 不能大于 duration\",\"1.使用 http 发起网络请求，需要以下哪种权限？（B）\",\"B. ohos.permission.INTERNET\",\"2.向服务器提交表单数据，以下哪种请求方式比较合适？（B）\",\"B. RequestMethod.POST\",\"3.下列关于 Web 组件的属性，描述错误的是？（C）\",\"C. javaScriptAccess 设置是否允许执行 JavaScript 脚本，默认不允许执行。\",\"4.关于请求返回的响应码 ResponseCode，下列描述错误的是？（D）\",\"D. ResponseCode.GONE 的值为 404，表示客户端请求的资源已经不存在。\",\"1.使用首选项要导入的包是哪个？（B）\",\"B. @ohos.data.preferences\",\"2.首选项的数据持久化后是放在哪里？（C）\",\"C. 文件中\",\"3.下面哪个接口不是首选项提供的 API 接口？（B）\",\"B. update()\",\"1.将通道设置为下面哪个类型，可以显示横幅通知？（A）\",\"A. SlotType.SOCIAL_COMMUNICATION\",\"2.下列哪个是从 API 9 开始支持的后台代理提醒功能模块。（A）\",\"A. @ohos.reminderAgentManager\",\"1.创建应用时，应用包名需要和 app.json5 或者 config.json 文件中哪个字段保持一致？ （C）\",\"C. bundleName\",\"2.发布应用时需要创建证书，证书类型选择什么类型？（B）\",\"B. 发布证书\",\"3.发布应用时需要创建 Profile 时，类型选择什么类型？ （B）\",\"B. 发布\",\"4.上传发布软件包时，软件包的格式是什么？（B）\",\"B. .app\",\"5.发布后的应用可以在哪里获取？（A）\",\"A. 华为应用市场\",\"1.通过 ohpm 安装 lottie 后，在哪个文件中会生成相关的配置信息？（B）\",\"B. oh-package.json5\",\"2.lottie 订阅事件的 API 为？（C）\",\"C. animationItem.addEventListener()\",\"1.开发者在 DevEco Studio 中，可以通过什么形式进行 HarmonyOS 云开发？（B）\",\"B. 工程模板\",\"2.HarmonyOS 云开发当前支持最低 API 版本是多少？（D）\",\"D. API 9\"]},\"1713\":{\"h\":\"3、多选题\",\"t\":[\"1.Row 容器的主轴是水平方向，交叉轴是垂直方向，其参数类型为 VerticalAlign （垂直对齐），VerticalAlign 定义了以下几种类型？（A B E）\",\"A. Top\",\"B. Bottom\",\"E. Center\",\"2.下面哪些组件是容器组件？（B C）\",\"B. Row\",\"C. Column\",\"3.关于 Tabs 组件页签的位置设置，下面描述正确的是？（A B C D）\",\"A. 当 barPosition 为 Start（默认值），vertical 属性为 false 时（默认值），页签位于容器顶部。\",\"B. 当 barPosition 为 Start（默认值） ，vertical 属性为 true 时，页签位于容器左侧。\",\"C. 当 barPosition 为 End ，vertical 属性为 false（默认值）时，页签位于容器底部。\",\"D. 当 barPosition 为 End ，vertical 属性为 true 时，页签位于容器右侧。\",\"1.下列哪些状态装饰器修饰的属性必须在本地进行初始化。（A D）\",\"A. @State\",\"D. @Provide\",\"2.ArkUI 提供了下面哪些弹窗功能。（A B C D E）\",\"A. AlertDialog\",\"B. TextPickerDialog\",\"C. DatePickerDialog\",\"D. @CustomDialog\",\"E. TimePickerDialog\",\"1.属性动画支持哪些属性？（A B C D）\",\"A. width\",\"B. rotate\",\"C. opacity\",\"D. scale\",\"2.属性动画中 animation 的参数有哪些？（A B C D）\",\"A. playMode\",\"B. curve\",\"C. delay\",\"D. onFinish\",\"1.Web 组件支持下列哪些属性或事件？（A B D）\",\"A. fileAccess(fileAccess: boolean)\",\"B. javaScriptAccess(javaScriptAccess: boolean)\",\"D. onConfirm(callback: (event?: { url: string; message: string; result: JsResult }) => boolean)\",\"2.关于 http 模块描述正确的是？（A B C D）\",\"A. http 请求支持 get、post、put 等常用的请求方式。\",\"B. 可以使用 on(‘headersReceive’)订阅请求响应头。\",\"C. post 请求的参数可以在 extraData 中指定。\",\"D. 执行 createHttp 成功后，返回一个 httpRequest 对象，里面包括 request、destroy、on 和 off 方法。\",\"3.关于 Web 组件描述正确的是？（A B C D）\",\"A. Web 组件是提供具有网页显示能力的一种组件。\",\"B. Web 组件传入的地址可以是本地资源也可以是网络资源。\",\"C. WebController 可以控制 Web 组件的各种行为，例如网页的前进、后退等功能。\",\"D. 当访问在线网页时，需添加网络权限。\",\"1.HarmonyOS 提供的数据管理的方式都有哪些？（A B C D）\",\"A. 首选项\",\"B. 分布式数据服务\",\"C. 关系数据库\",\"D. 分布式数据对象\",\"2.下面说法正确的有？（B C D）\",\"B. 首选项以 Key-Value 形式存取数据\",\"C. 首选项存储数据数量建议不超过 1 万条\",\"D. 首选项的 key 为 String 类型\",\"1.下面哪些方法可以移除通知？（A B）\",\"A. cancel\",\"B. cancelAll\",\"2.后台代理提醒业务分为哪几种类型。（A B C）\",\"A. 倒计时类\",\"B. 日历类\",\"C. 闹钟类\",\"1.下列属于 lottie 提供的动画控制 API 的是？（A B C D）\",\"A. lottie.play()\",\"B. lottie.pause()\",\"C. lottie.stop()\",\"D. lottie.goToAndPlay()\",\"1.HarmonyOS 云开发工程结构分哪些部分？（A B C）\",\"A. 端开发工程（Application）\",\"B. 云开发工程（CloudProgram）\",\"C. 端侧公共库（External Libraries）\",\"2.HarmonyOS 云开发工程创建后，会自动开通哪些服务？（A B C D）\",\"A. 云函数\",\"B. 云数据库\",\"C. 云存储\",\"D. 认证服务\"]},\"1714\":{\"c\":[\"跨端技术\"]},\"1715\":{\"h\":\"IPC权限管理\"},\"1716\":{\"h\":\"权限管理\",\"t\":[\"本质: 外部访问通过内部代理，而不是直接访问\"]},\"1717\":{\"h\":\"核心代码\",\"t\":[\"远程调用\",\"status_t IPCThreadState::executeCommand(int32_t cmd) { BBinder* obj; RefBase::weakref_type* refs; status_t result = NO_ERROR; switch ((uint32_t)cmd) { case BR_TRANSACTION: { const pid_t origPid = mCallingPid; const uid_t origUid = mCallingUid; mCallingPid = tr.sender_pid; //设置调用者pid mCallingUid = tr.sender_euid;//设置调用者uid reinterpret_cast<BBinder*>(tr.cookie)->transact(tr.code, buffer, &reply, tr.flags); mCallingPid = origPid; //恢复原来的pid mCallingUid = origUid; //恢复原来的uid } } } \",\" //作用是清空远程调用端的uid和pid，用当前本地进程的uid和pid替代； public static final native long clearCallingIdentity(); //作用是恢复远程调用端的uid和pid信息，正好是`clearCallingIdentity`的反过程; public static final native void restoreCallingIdentity(long token); \",\"清空远程调用端的uid和pid\",\"static jlong android_os_Binder_clearCallingIdentity(JNIEnv* env, jobject clazz) { //调用IPCThreadState类的方法执行 return IPCThreadState::self()->clearCallingIdentity(); } int64_t IPCThreadState::clearCallingIdentity() { int64_t token = ((int64_t)mCallingUid<<32) | mCallingPid; clearCaller(); return token; } void IPCThreadState::clearCaller() { mCallingPid = getpid(); //当前进程pid赋值给mCallingPid mCallingUid = getuid(); //当前进程uid赋值给mCallingUid } \",\"static void android_os_Binder_restoreCallingIdentity(JNIEnv* env, jobject clazz, jlong token) { //token记录着uid信息，将其右移32位得到的是uid int uid = (int)(token>>32); if (uid > 0 && uid < 999) { //目前Android中不存在小于999的uid，当uid<999则抛出异常。 char buf[128]; jniThrowException(env, \\\"java/lang/IllegalStateException\\\", buf); return; } //调用IPCThreadState类的方法执行 IPCThreadState::self()->restoreCallingIdentity(token); } void IPCThreadState::restoreCallingIdentity(int64_t token) { mCallingUid = (int)(token>>32); mCallingPid = (int)token; } \"]},\"1718\":{\"h\":\"代码路径\",\"t\":[\"frameworks/base/core/java/android/os/Binder.java frameworks/base/core/jni/android_util_Binder.cpp frameworks/native/libs/binder/IPCThreadState.cpp \"]},\"1719\":{\"c\":[\"framework\"]},\"1720\":{\"c\":[\"binder\"]},\"1721\":{\"h\":\"binder\"},\"1722\":{\"c\":[\"framework\"]},\"1723\":{\"h\":\"binder实战使用\"},\"1724\":{\"h\":\"native binder\",\"t\":[\"native实践\",\"ClientDemo.cpp: 客户端程序 ServerDemo.cpp：服务端程序 IMyService.h：自定义的MyService服务的头文件 IMyService.cpp：自定义的MyService服务 Android.mk：源码build文件 \"]},\"1725\":{\"h\":\"服务注册\",\"t\":[\"将名为”service.myservice”的BnMyService服务添加到ServiceManager，并启动服务\",\"#include \\\"IMyService.h\\\" int main() { //获取service manager引用 sp < IServiceManager > sm = defaultServiceManager(); //注册名为\\\"service.myservice\\\"的服务到service manager sm->addService(String16(\\\"service.myservice\\\"), new BnMyService()); ProcessState::self()->startThreadPool(); //启动线程池 IPCThreadState::self()->joinThreadPool(); //把主线程加入线程池 return 0; } \"]},\"1726\":{\"h\":\"客户端调用\",\"t\":[\"通过接口引用调用服务端方法\",\"#include \\\"IMyService.h\\\" int main() { //获取service manager引用 sp < IServiceManager > sm = defaultServiceManager(); //获取名为\\\"service.myservice\\\"的binder接口 sp < IBinder > binder = sm->getService(String16(\\\"service.myservice\\\")); //将biner对象转换为强引用类型的IMyService sp<IMyService> cs = interface_cast < IMyService > (binder); //利用binder引用调用远程sayHello()方法 cs->sayHello(); return 0; } \"]},\"1727\":{\"h\":\"服务实现\",\"t\":[\"头文件\",\"申明IMyService\",\"申明BpMyService（Binder客户端）\",\"申明BnMyService（Binder的服务端）\",\"namespace android { class IMyService : public IInterface { public: DECLARE_META_INTERFACE(MyService); //使用宏，申明MyService virtual void sayHello()=0; //定义方法 }; //定义命令字段 enum { HELLO = 1, }; //申明客户端BpMyService class BpMyService: public BpInterface<IMyService> { public: BpMyService(const sp<IBinder>& impl); virtual void sayHello(); }; //申明服务端BnMyService class BnMyService: public BnInterface<IMyService> { public: virtual status_t onTransact(uint32_t code, const Parcel& data, Parcel* reply, uint32_t flags = 0); virtual void sayHello(); }; } \",\"服务实现\",\"#include \\\"IMyService.h\\\" namespace android { //使用宏，完成MyService定义 IMPLEMENT_META_INTERFACE(MyService, \\\"android.demo.IMyService\\\"); //客户端 BpMyService::BpMyService(const sp<IBinder>& impl) : BpInterface<IMyService>(impl) { } // 实现客户端sayHello方法 void BpMyService::sayHello() { printf(\\\"BpMyService::sayHello\\\\n\\\"); Parcel data, reply; data.writeInterfaceToken(IMyService::getInterfaceDescriptor()); remote()->transact(HELLO, data, &reply); printf(\\\"get num from BnMyService: %d\\\\n\\\", reply.readInt32()); } //服务端，接收远程消息，处理onTransact方法 status_t BnMyService::onTransact(uint_t code, const Parcel& data, Parcel* reply, uint32_t flags) { switch (code) { case HELLO: { //收到HELLO命令的处理流程 printf(\\\"BnMyService:: got the client hello\\\\n\\\"); CHECK_INTERFACE(IMyService, data, reply); sayHello(); reply->writeInt32(2015); return NO_ERROR; } break; default: break; } return NO_ERROR; } // 实现服务端sayHello方法 void BnMyService::sayHello() { printf(\\\"BnMyService::sayHello\\\\n\\\"); }; } \"]},\"1728\":{\"h\":\"编译执行\",\"t\":[\"利用Android.mk编译上述代码，在Android的源码中，通过mm编译后，可生成两个可执行文件ServerDemo，ClientDemo。\",\"执行测试\",\"# push adb remount # adb push ServerDemo ClientDemo adb push ServerDemo /system/bin adb push ClientDemo /system/bin # 启动server adb shell /system/bin/ServerDemo # 启动client adb shell /system/bin/ClientDemo \"]},\"1729\":{\"h\":\"binder framework\",\"t\":[\"framework实践\",\"native层\",\"服务名service.myservice\",\"Server端\",\"ServerDemo.java：可执行程序\",\"IMyService.java: 定义IMyService接口\",\"MyService.java：定义MyService\",\"Client端\",\"ClientDemo.java：可执行程序\",\"IMyService.java: 与Server端完全一致\",\"MyServiceProxy.java：定义MyServiceProxy\"]},\"1730\":{\"h\":\"服务端注册\",\"t\":[\"public class ServerDemo { public static void main(String[] args) { System.out.println(\\\"MyService Start\\\"); //准备Looper循环执行 Looper.prepareMainLooper(); //设置为前台优先级 android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_FOREGROUND); //注册服务 ServiceManager.addService(\\\"MyService\\\", new MyService()); Looper.loop(); } } \"]},\"1731\":{\"h\":\"客户端调用\",\"t\":[\"客户端调用\",\"public class ClientDemo { public static void main(String[] args) throws RemoteException { System.out.println(\\\"Client start\\\"); IBinder binder = ServiceManager.getService(\\\"MyService\\\"); //获取名为\\\"MyService\\\"的服务 IMyService myService = new MyServiceProxy(binder); //创建MyServiceProxy对象 myService.sayHello(\\\"binder\\\"); //通过MyServiceProxy对象调用接口的方法 System.out.println(\\\"Client end\\\"); } } \",\"服务代理\",\"public class MyServiceProxy implements IMyService { private android.os.IBinder mRemote; //代表BpBinder public MyServiceProxy(android.os.IBinder remote) { mRemote = remote; } public java.lang.String getInterfaceDescriptor() { return DESCRIPTOR; } /** 自定义的sayHello()方法 **/ @Override public void sayHello(String str) throws RemoteException { android.os.Parcel _data = android.os.Parcel.obtain(); android.os.Parcel _reply = android.os.Parcel.obtain(); try { _data.writeInterfaceToken(DESCRIPTOR); _data.writeString(str); mRemote.transact(TRANSACTION_say, _data, _reply, 0); _reply.readException(); } finally { _reply.recycle(); _data.recycle(); } } @Override public IBinder asBinder() { return mRemote; } } \"]},\"1732\":{\"h\":\"服务实现\",\"t\":[\"接口\",\"public interface IMyService extends IInterface { static final java.lang.String DESCRIPTOR = \\\"com.gityuan.frameworkBinder.MyServer\\\"; public void sayHello(String str) throws RemoteException ; static final int TRANSACTION_say = android.os.IBinder.FIRST_CALL_TRANSACTION; } \",\"实现\",\"public class MyService extends Binder implements IMyService{ public MyService() { this.attachInterface(this, DESCRIPTOR); } @Override public IBinder asBinder() { return this; } /** 将MyService转换为IMyService接口 **/ public static com.gityuan.frameworkBinder.IMyService asInterface( android.os.IBinder obj) { if ((obj == null)) { return null; } android.os.IInterface iInterface = obj.queryLocalInterface(DESCRIPTOR); if (((iInterface != null)&&(iInterface instanceof com.gityuan.frameworkBinder.IMyService))){ return ((com.gityuan.frameworkBinder.IMyService) iInterface); } return null; } /** 服务端，接收远程消息，处理onTransact方法 **/ @Override protected boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException { switch (code) { case INTERFACE_TRANSACTION: { reply.writeString(DESCRIPTOR); return true; } case TRANSACTION_say: { data.enforceInterface(DESCRIPTOR); String str = data.readString(); sayHello(str); reply.writeNoException(); return true; }} return super.onTransact(code, data, reply, flags); } /** 自定义sayHello()方法 **/ @Override public void sayHello(String str) { System.out.println(\\\"MyService:: Hello, \\\" + str); } } \"]},\"1733\":{\"h\":\"执行\",\"t\":[\"# push adb remount # adb push 执行层 adb push ServerDemo /system/bin adb push ClientDemo /system/bin # adb push framework adb push ServerDemo.jar /system/framework adb push ClientDemo.jar /system/framework \",\"启动服务端\",\"adb shell /system/bin/ServerDemo \",\"启动客户端\",\"adb shell /system/bin/ClientDemo \"]},\"1734\":{\"h\":\"应用层aidl\",\"t\":[\"应用层\"]},\"1735\":{\"h\":\"aidl接口\",\"t\":[\"interface IRemoteService { int getPid(); MyData getMyData(); } //实体类型 parcelable MyData; \"]},\"1736\":{\"h\":\"客户端调用\",\"t\":[\"public class ClientActivity extends AppCompatActivity { private static final String TAG = \\\"BinderSimple\\\"; private IRemoteService mRemoteService; private boolean mIsBound; public void clickHandler(View view){ switch (view.getId()){ case R.id.btn_bind: bindRemoteService(); break; case R.id.btn_unbind: unbindRemoteService(); break; case R.id.btn_kill: killRemoteService(); break; } } /** * 用语监控远程服务连接的状态 */ private ServiceConnection mConnection = new ServiceConnection() { @Override public void onServiceConnected(ComponentName name, IBinder service) { mRemoteService = IRemoteService.Stub.asInterface(service); String pidInfo = null; try { MyData myData = mRemoteService.getMyData(); pidInfo = \\\"pid=\\\"+ mRemoteService.getPid() + \\\", data1 = \\\"+ myData.getData1() + \\\", data2=\\\"+ myData.getData2(); } catch (RemoteException e) { e.printStackTrace(); } Log.i(TAG, \\\"[ClientActivity] onServiceConnected \\\"+pidInfo); } @Override public void onServiceDisconnected(ComponentName name) { Log.i(TAG, \\\"[ClientActivity] onServiceDisconnected\\\"); mRemoteService = null; } }; /** * 绑定远程服务 */ private void bindRemoteService(){ Log.i(TAG, \\\"[ClientActivity] bindRemoteService\\\"); Intent intent = new Intent(ClientActivity.this, RemoteService.class); intent.setAction(IRemoteService.class.getName()); bindService(intent, mConnection, Context.BIND_AUTO_CREATE); mIsBound = true; } /** * 解除绑定远程服务 */ private void unbindRemoteService(){ if(!mIsBound){ return; } Log.i(TAG, \\\"[ClientActivity] unbindRemoteService ==>\\\"); unbindService(mConnection); mIsBound = false; } /** * 杀死远程服务 */ private void killRemoteService(){ Log.i(TAG, \\\"[ClientActivity] killRemoteService\\\"); try { android.os.Process.killProcess(mRemoteService.getPid()); } catch (RemoteException e) { e.printStackTrace(); } } } \"]},\"1737\":{\"h\":\"服务端实现\",\"t\":[\"android:process=\\\":remote\\\"\",\"public class RemoteService extends Service { private static final String TAG = \\\"BinderSimple\\\"; MyData mMyData; @Override public void onCreate() { super.onCreate(); Log.i(TAG, \\\"[RemoteService] onCreate\\\"); initMyData(); } @Override public IBinder onBind(Intent intent) { Log.i(TAG,\\\"[RemoteService] onBind\\\"); return mBinder; } @Override public boolean onUnbind(Intent intent) { Log.i(TAG, \\\"[RemoteService] onUnbind\\\"); return super.onUnbind(intent); } @Override public void onDestroy() { Log.i(TAG, \\\"[RemoteService] onDestroy\\\"); super.onDestroy(); } /** * 实现IRemoteService.aidl中定义的方法 */ private final IRemoteService.Stub mBinder = new IRemoteService.Stub() { @Override public int getPid() throws RemoteException { Log.i(TAG,\\\"[RemoteService] getPid()=\\\"+android.os.Process.myPid()); return android.os.Process.myPid(); } @Override public MyData getMyData() throws RemoteException { Log.i(TAG,\\\"[RemoteService] getMyData() \\\"+ mMyData.toString()); return mMyData; } /**此处可用于权限拦截**/ @Override public boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException { return super.onTransact(code, data, reply, flags); } }; /** * 初始化MyData数据 **/ private void initMyData() { mMyData = new MyData(); mMyData.setData1(10); mMyData.setData2(20); } } \"]},\"1738\":{\"h\":\"MyData自定义\",\"t\":[\"public class MyData implements Parcelable { private int data1; private int data2; public MyData(){ } protected MyData(Parcel in) { readFromParcel(in); } public static final Creator<MyData> CREATOR = new Creator<MyData>() { @Override public MyData createFromParcel(Parcel in) { return new MyData(in); } @Override public MyData[] newArray(int size) { return new MyData[size]; } }; @Override public int describeContents() { return 0; } /** 将数据写入到Parcel **/ @Override public void writeToParcel(Parcel dest, int flags) { dest.writeInt(data1); dest.writeInt(data2); } /** 从Parcel中读取数据 **/ public void readFromParcel(Parcel in){ data1 = in.readInt(); data2 = in.readInt(); } public int getData2() { return data2; } public void setData2(int data2) { this.data2 = data2; } public int getData1() { return data1; } public void setData1(int data1) { this.data1 = data1; } @Override public String toString() { return \\\"data1 = \\\"+ data1 + \\\", data2=\\\"+ data2; } } \"]},\"1739\":{\"h\":\"AIDL模版\",\"t\":[\"自动生成 IRemoteService.java 模版代码\",\"package com.gityuan.appbinderdemo; public interface IRemoteService extends android.os.IInterface { public static abstract class Stub extends android.os.Binder implements com.gityuan.appbinderdemo.IRemoteService { private static final java.lang.String DESCRIPTOR = \\\"com.gityuan.appbinderdemo.IRemoteService\\\"; /** * Stub构造函数 */ public Stub() { this.attachInterface(this, DESCRIPTOR); } /** * 将IBinder 转换为IRemoteService interface */ public static com.gityuan.appbinderdemo.IRemoteService asInterface(android.os.IBinder obj) { if ((obj == null)) { return null; } android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR); if (((iin != null) && (iin instanceof com.gityuan.appbinderdemo.IRemoteService))) { return ((com.gityuan.appbinderdemo.IRemoteService) iin); } return new com.gityuan.appbinderdemo.IRemoteService.Stub.Proxy(obj); } @Override public android.os.IBinder asBinder() { return this; } @Override public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException { switch (code) { case INTERFACE_TRANSACTION: { reply.writeString(DESCRIPTOR); return true; } case TRANSACTION_getPid: { data.enforceInterface(DESCRIPTOR); int _result = this.getPid(); reply.writeNoException(); reply.writeInt(_result); return true; } case TRANSACTION_getMyData: { data.enforceInterface(DESCRIPTOR); com.gityuan.appbinderdemo.MyData _result = this.getMyData(); reply.writeNoException(); if ((_result != null)) { reply.writeInt(1); _result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE); } else { reply.writeInt(0); } return true; } } return super.onTransact(code, data, reply, flags); } private static class Proxy implements com.gityuan.appbinderdemo.IRemoteService { private android.os.IBinder mRemote; /** * Proxy构造函数 */ Proxy(android.os.IBinder remote) { mRemote = remote; } @Override public android.os.IBinder asBinder() { return mRemote; } public java.lang.String getInterfaceDescriptor() { return DESCRIPTOR; } @Override public int getPid() throws android.os.RemoteException { android.os.Parcel _data = android.os.Parcel.obtain(); android.os.Parcel _reply = android.os.Parcel.obtain(); int _result; try { _data.writeInterfaceToken(DESCRIPTOR); mRemote.transact(Stub.TRANSACTION_getPid, _data, _reply, 0); _reply.readException(); _result = _reply.readInt(); } finally { _reply.recycle(); _data.recycle(); } return _result; } @Override public com.gityuan.appbinderdemo.MyData getMyData() throws android.os.RemoteException { android.os.Parcel _data = android.os.Parcel.obtain(); android.os.Parcel _reply = android.os.Parcel.obtain(); com.gityuan.appbinderdemo.MyData _result; try { _data.writeInterfaceToken(DESCRIPTOR); mRemote.transact(Stub.TRANSACTION_getMyData, _data, _reply, 0); _reply.readException(); if ((0 != _reply.readInt())) { _result = com.gityuan.appbinderdemo.MyData.CREATOR.createFromParcel(_reply); } else { _result = null; } } finally { _reply.recycle(); _data.recycle(); } return _result; } } static final int TRANSACTION_getPid = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0); static final int TRANSACTION_getMyData = (android.os.IBinder.FIRST_CALL_TRANSACTION + 1); } public int getPid() throws android.os.RemoteException; public com.gityuan.appbinderdemo.MyData getMyData() throws android.os.RemoteException; } \"]},\"1740\":{\"c\":[\"framework\"]},\"1741\":{\"c\":[\"binder\"]},\"1742\":{\"h\":\"binder开篇\"},\"1743\":{\"h\":\"IPC原理\",\"t\":[\"ipc原理\",\"进程空间分为用户空间和内核空间，用户空间是彼此不共享的，内核空间是可共享的, Client进程向Server进程通信，就是通过内核空间共享内存来实现的。\"]},\"1744\":{\"h\":\"binder原理\",\"t\":[\"binder原理\",\"ServiceManager是整个Binder通信机制的大管家，是Android进程间通信机制Binder的守护进程\",\"启动serverManager\",\"获取serviceManager\",\"binder通信\",\"注册服务(addService)：Server进程要先注册Service到ServiceManager\",\"获取服务(getService)：Client进程使用某个Service前，须先向ServiceManager中获取相应的Service。\",\"使用服务：Client与Service交互\",\"binder驱动，位于内核空间 Client,Server,Service Manager位于用户空间 开发人员自定义client server可进行ipc通信\"]},\"1745\":{\"h\":\"CS模式\",\"t\":[\"C/S模式\",\"client端：BpBinder.transact()来发送事务请求；\",\"server端：BBinder.onTransact()会接收到相应事务。\"]},\"1746\":{\"h\":\"源码目录\",\"t\":[\"Binder架构所涉及的总共有以下5个目录:\",\"/framework/base/core/java/ (Java) /framework/base/core/jni/ (JNI) /framework/native/libs/binder (Native) /framework/native/cmds/servicemanager/ (Native) /kernel/drivers/staging/android (Driver) \",\"Java framework\",\"/framework/base/core/java/android/os/ - IInterface.java - IBinder.java - Parcel.java - IServiceManager.java - ServiceManager.java - ServiceManagerNative.java - Binder.java /framework/base/core/jni/ - android_os_Parcel.cpp - AndroidRuntime.cpp - android_util_Binder.cpp (核心类) \",\"Native framework\",\"/framework/native/libs/binder - IServiceManager.cpp - BpBinder.cpp - Binder.cpp - IPCThreadState.cpp (核心类) - ProcessState.cpp (核心类) /framework/native/include/binder/ - IServiceManager.h - IInterface.h /framework/native/cmds/servicemanager/ - service_manager.c - binder.c \",\"Kernel\",\"/kernel/drivers/staging/android/ - binder.c - uapi/binder.h \"]},\"1747\":{\"c\":[\"framework\"]},\"1748\":{\"c\":[\"binder\"]},\"1749\":{\"h\":\"binder架构\"},\"1750\":{\"h\":\"binder架构\",\"t\":[\"binder架构\"]},\"1751\":{\"h\":\"binder类图\",\"t\":[\"binder类图\",\"ServiceManager：通过getIServiceManager方法获取的是ServiceManagerProxy对象； ServiceManager的addService, getService实际工作都交由ServiceManagerProxy的相应方法来处理；\",\"ServiceManagerProxy：其成员变量mRemote指向BinderProxy对象，ServiceManagerProxy的addService, getService方法最终是交由mRemote来完成。\",\"ServiceManagerNative：其方法asInterface()返回的是ServiceManagerProxy对象，ServiceManager便是借助ServiceManagerNative类来找到ServiceManagerProxy；\",\"Binder：其成员变量mObject和方法execTransact()用于native方法\",\"BinderInternal：内部有一个GcWatcher类，用于处理和调试与Binder相关的垃圾回收。\",\"IBinder：接口中常量FLAG_ONEWAY：客户端利用binder跟服务端通信是阻塞式的，但如果设置了FLAG_ONEWAY，这成为非阻塞的调用方式，客户端能立即返回，服务端采用回调方式来通知客户端完成情况。另外IBinder接口有一个内部接口DeathDecipient(死亡通告)。\"]},\"1752\":{\"h\":\"Binder进程与线程\",\"t\":[\" Binder线程池：每个Server进程在启动时会创建一个binder线程池，并向其中注册一个Binder线程；之后Server进程也可以向binder线程池注册新的线程，或者Binder驱动在探测到没有空闲binder线程时会主动向Server进程注册新的的binder线程。对于一个Server进程有一个最大Binder线程数限制，默认为16个binder线程，例如Android的system_server进程就存在16个线程。对于所有Client端进程的binder请求都是交由Server端进程的binder线程来处理的。\"]},\"1753\":{\"h\":\"Binder传输过程\",\"t\":[\" 发送端把binder_transaction节点，插入到目标进程或其子线程的todo队列中，等目标进程或线程不断循环地从todo队列中取出数据并进行相应的操作\"]},\"1754\":{\"h\":\"Binder路由\",\"t\":[\"Binder路由\",\"binder的路由原理：BpBinder发送端，根据handler，在当前binder_proc中，找到相应的binder_ref，由binder_ref再找到目标binder_node实体，由目标binder_node再找到目标进程binder_proc。简单地方式是直接把binder_transaction节点插入到binder_proc的todo队列中，完成传输过程。\"]},\"1755\":{\"h\":\"通信过程 AMS\",\"t\":[\"ams\",\"通讯过程\",\"发起端线程向Binder Driver发起binder ioctl请求后, 便采用环不断talkWithDriver,此时该线程处于阻塞状态, 直到收到如下BR_XXX命令才会结束该过程.\",\"BR_TRANSACTION_COMPLETE: oneway模式下,收到该命令则退出\",\"BR_REPLY: 非oneway模式下,收到该命令才退出;\",\"BR_DEAD_REPLY: 目标进程/线程/binder实体为空, 以及释放正在等待reply的binder thread或者binder buffer;\",\"BR_FAILED_REPLY: 情况较多,比如非法handle, 错误事务栈, security, 内存不足, buffer不足, 数据拷贝失败, 节点创建失败, 各种不匹配等问题\",\"BR_ACQUIRE_RESULT: 目前未使用的协议;\",\"左图中waitForResponse收到BR_TRANSACTION_COMPLETE,则直接退出循环, 则没有机会执行executeCommand()方法, 故将其颜色画为灰色. 除以上5种BR_XXX命令, 当收到其他BR命令,则都会执行executeCommand过程.\",\"目标Binder线程创建后, 便进入joinThreadPool()方法, 采用循环不断地循环执行getAndExecuteCommand()方法, 当bwr的读写buffer都没有数据时,则阻塞在binder_thread_read的wait_event过程. 另外,正常情况下binder线程一旦创建则不会退出.\"]},\"1756\":{\"h\":\"关键代码\",\"t\":[\"public ComponentName startService(IApplicationThread caller, Intent service, String resolvedType, String callingPackage, int userId) throws RemoteException { //获取或创建Parcel对象【见小节2.2】 Parcel data = Parcel.obtain(); Parcel reply = Parcel.obtain(); data.writeInterfaceToken(IActivityManager.descriptor); data.writeStrongBinder(caller != null ? caller.asBinder() : null); service.writeToParcel(data, 0); //写入Parcel数据 【见小节2.3】 data.writeString(resolvedType); data.writeString(callingPackage); data.writeInt(userId); //通过Binder传递数据【见小节2.5】 mRemote.transact(START_SERVICE_TRANSACTION, data, reply, 0); //读取应答消息的异常情况 reply.readException(); //根据reply数据来创建ComponentName对象 ComponentName res = ComponentName.readFromParcel(reply); //【见小节2.2.3】 data.recycle(); reply.recycle(); return res; } \",\"AMN.getDefault\",\"static public IActivityManager getDefault() { // [见流程2.4.2] return gDefault.get(); } public abstract class Singleton<IActivityManager> { public final IActivityManager get() { synchronized (this) { if (mInstance == null) { //首次调用create()来获取AMP对象[见流程2.4.3] mInstance = create(); } return mInstance; } } } private static final Singleton<IActivityManager> gDefault = new Singleton<IActivityManager>() { protected IActivityManager create() { //获取名为\\\"activity\\\"的服务 IBinder b = ServiceManager.getService(\\\"activity\\\"); //创建AMP对象[见流程2.4.4] IActivityManager am = asInterface(b); return am; } }; public abstract class ActivityManagerNative extends Binder implements IActivityManager { static public IActivityManager asInterface(IBinder obj) { if (obj == null) { return null; } //此处obj = BinderProxy, descriptor = \\\"android.app.IActivityManager\\\"; [见流程2.4.5] IActivityManager in = (IActivityManager)obj.queryLocalInterface(descriptor); if (in != null) { //此处为null return in; } //[见流程2.4.6] return new ActivityManagerProxy(obj); } ... } public class Binder implements IBinder { //对于Binder对象的调用,则返回值不为空 public IInterface queryLocalInterface(String descriptor) { //mDescriptor的初始化在attachInterface()过程中赋值 if (mDescriptor.equals(descriptor)) { return mOwner; } return null; } } //由上一小节[2.4.4]调用的流程便是此处,返回Null final class BinderProxy implements IBinder { //BinderProxy对象的调用, 则返回值为空 public IInterface queryLocalInterface(String descriptor) { return null; } } class ActivityManagerProxy implements IActivityManager { public ActivityManagerProxy(IBinder remote) { mRemote = remote; } } final class BinderProxy implements IBinder { public boolean transact(int code, Parcel data, Parcel reply, int flags) throws RemoteException { //用于检测Parcel大小是否大于800k Binder.checkParcel(this, code, data, \\\"Unreasonably large binder buffer\\\"); //【见2.6】 return transactNative(code, data, reply, flags); } } \",\"原生方法\",\"static jboolean android_os_BinderProxy_transact(JNIEnv* env, jobject obj, jint code, jobject dataObj, jobject replyObj, jint flags) { ... //将java Parcel转为c++ Parcel Parcel* data = parcelForJavaObject(env, dataObj); Parcel* reply = parcelForJavaObject(env, replyObj); //gBinderProxyOffsets.mObject中保存的是new BpBinder(handle)对象 IBinder* target = (IBinder*) env->GetLongField(obj, gBinderProxyOffsets.mObject); ... //此处便是BpBinder::transact()【见小节2.7】 status_t err = target->transact(code, *data, reply, flags); ... //最后根据transact执行具体情况，抛出相应的Exception signalExceptionForError(env, obj, err, true , data->dataSize()); return JNI_FALSE; } status_t BpBinder::transact( uint32_t code, const Parcel& data, Parcel* reply, uint32_t flags) { if (mAlive) { // 【见小节2.8】 status_t status = IPCThreadState::self()->transact( mHandle, code, data, reply, flags); if (status == DEAD_OBJECT) mAlive = 0; return status; } return DEAD_OBJECT; } status_t IPCThreadState::transact(int32_t handle, uint32_t code, const Parcel& data, Parcel* reply, uint32_t flags) { status_t err = data.errorCheck(); //数据错误检查 flags |= TF_ACCEPT_FDS; .... if (err == NO_ERROR) { // 传输数据 【见小节2.9】 err = writeTransactionData(BC_TRANSACTION, flags, handle, code, data, NULL); } if (err != NO_ERROR) { if (reply) reply->setError(err); return (mLastError = err); } // 默认情况下,都是采用非oneway的方式, 也就是需要等待服务端的返回结果 if ((flags & TF_ONE_WAY) == 0) { if (reply) { //reply对象不为空 【见小节2.10】 err = waitForResponse(reply); }else { Parcel fakeReply; err = waitForResponse(&fakeReply); } } else { err = waitForResponse(NULL, NULL); } return err; } \",\"transact主要过程:\",\"先执行writeTransactionData()已向Parcel数据类型的mOut写入数据，此时mIn还没有数据； 然后执行waitForResponse()方法，循环执行，直到收到应答消息. 调用talkWithDriver()跟驱动交互，收到应答消息，便会写入mIn, 则根据收到的不同响应吗，执行相应的操作。 此处调用waitForResponse根据是否有设置TF_ONE_WAY的标记:\",\"当已设置oneway时, 则调用waitForResponse(NULL, NULL); 当未设置oneway时, 则调用waitForResponse(reply) 或 waitForResponse(&fakeReply)\"]},\"1757\":{\"h\":\"源码目录\",\"t\":[\"framework/base/core/java/android/os/ - IInterface.java - IServiceManager.java - ServiceManager.java - ServiceManagerNative.java(内含ServiceManagerProxy类) framework/base/core/java/android/os/ - IBinder.java - Binder.java(内含BinderProxy类) - Parcel.java framework/base/core/java/com/android/internal/os/ - BinderInternal.java framework/base/core/jni/ - AndroidRuntime.cpp - android_os_Parcel.cpp - android_util_Binder.cpp \"]},\"1758\":{\"c\":[\"framework\"]},\"1759\":{\"c\":[\"binder\"]},\"1760\":{\"h\":\"binder死亡通知\"},\"1761\":{\"h\":\"binder死亡通知\",\"t\":[\"本质: binder client端收尾工作\",\"binder死亡通知\",\"死亡通知是为了让Bp端(客户端进程)进能知晓Bn端(服务端进程)的生死情况，当Bn端进程死亡后能通知到Bp端。\",\"定义：AppDeathRecipient是继承IBinder::DeathRecipient类，主要需要实现其binderDied()来进行死亡通告。\",\"注册：binder->linkToDeath(AppDeathRecipient)是为了将AppDeathRecipient死亡通知注册到Binder上。\",\"Bp端只需要覆写binderDied()方法，实现一些后尾清除类的工作，则在Bn端死掉后，会回调binderDied()进行相应处理。\",\"linkToDeath过程\",\"requestDeathNotification过程向驱动传递的命令BC_REQUEST_DEATH_NOTIFICATION，参数有mHandle和BpBinder对象；\",\"binder_thread_write()过程，同一个BpBinder可以注册多个死亡回调，但Kernel只允许注册一次死亡通知。\",\"注册死亡回调的过程，实质就是向binder_ref结构体添加binder_ref_death指针， binder_ref_death的cookie记录BpBinder指针。\",\"unlinkToDeath过程\",\"unlinkToDeath只有当该BpBinder的所有mObituaries都被移除，才会向驱动层执行清除死亡通知的动作， 否则只是从native层移除某个recipient。\",\"clearDeathNotification过程向驱动传递BC_CLEAR_DEATH_NOTIFICATION，参数有mHandle和BpBinder对象；\",\"binder_thread_write()过程，将BINDER_WORK_CLEAR_DEATH_NOTIFICATION事务添加当前当前进程/线程的todo队列\",\"触发死亡回调\",\"服务实体进程：binder_release过程会执行binder_node_release()，loop该binder_node下所有的ref->death对象。 当存在，则将BINDER_WORK_DEAD_BINDER事务添加ref->proc->todo（即ref所在进程的todo队列)\",\"引用所在进程：执行binder_thread_read()过程，向用户空间写入BR_DEAD_BINDER，并触发死亡回调。\",\"发送死亡通知sendObituary\"]},\"1762\":{\"h\":\"核心代码\",\"t\":[\" public final class ActivityManagerService { /** * 收尾工作 */ private final boolean attachApplicationLocked(IApplicationThread thread, int pid) { //创建IBinder.DeathRecipient子类对象 AppDeathRecipient adr = new AppDeathRecipient(app, pid, thread); //建立binder死亡回调 thread.asBinder().linkToDeath(adr, 0); app.deathRecipient = adr; //取消binder死亡回调 app.unlinkDeathRecipient(); } private final class AppDeathRecipient implements IBinder.DeathRecipient { //触发回调方法 public void binderDied() { synchronized(ActivityManagerService.this) { appDiedLocked(mApp, mPid, mAppThread, true); } } } } \",\"接口实现\",\"public class Binder implements IBinder { public void linkToDeath(DeathRecipient recipient, int flags) { } public boolean unlinkToDeath(DeathRecipient recipient, int flags) { return true; } } final class BinderProxy implements IBinder { public native void linkToDeath(DeathRecipient recipient, int flags) throws RemoteException; public native boolean unlinkToDeath(DeathRecipient recipient, int flags); } \",\"static void android_os_BinderProxy_linkToDeath(JNIEnv* env, jobject obj, jobject recipient, jint flags) { if (recipient == NULL) { jniThrowNullPointerException(env, NULL); return; } //获取BinderProxy.mObject成员变量值, 即BpBinder对象 IBinder* target = (IBinder*)env->GetLongField(obj, gBinderProxyOffsets.mObject); ... //只有Binder代理对象才会进入该分支 if (!target->localBinder()) { DeathRecipientList* list = (DeathRecipientList*) env->GetLongField(obj, gBinderProxyOffsets.mOrgue); //创建JavaDeathRecipient对象[见小节2.1.1] sp<JavaDeathRecipient> jdr = new JavaDeathRecipient(env, recipient, list); //建立死亡通知[见小节2.2] status_t err = target->linkToDeath(jdr, NULL, flags); if (err != NO_ERROR) { //添加死亡通告失败, 则从list移除引用[见小节2.1.3] jdr->clearReference(); signalExceptionForError(env, obj, err, true /*canThrowRemoteException*/); } } } \"]},\"1763\":{\"h\":\"代码路径\",\"t\":[\"frameworks/base/core/java/android/os/Binder.java frameworks/base/core/jni/android_util_Binder.cpp frameworks/native/libs/binder/BpBinder.cpp \"]},\"1764\":{\"c\":[\"framework\"]},\"1765\":{\"c\":[\"binder\"]},\"1766\":{\"h\":\"binder驱动原理\"},\"1767\":{\"h\":\"驱动分层\",\"t\":[\"驱动协议分层\",\"业务层: demo()便是Client端和Server共同协商好的统一方法 IPC层: handle、RPC数据、代码、协议 内核层: Binder Driver\"]},\"1768\":{\"h\":\"Binder通信过程\",\"t\":[\"Binder通信协议\",\"Binder协议\",\"BINDER_COMMAND_PROTOCOL：binder请求码，以”BC_“开头，简称BC码，用于从IPC层传递到Binder Driver层；\",\"BINDER_RETURN_PROTOCOL ：binder响应码，以”BR_“开头，简称BR码，用于从Binder Driver层传递到IPC层；\",\"Binder IPC通信进程的交互：\",\"client进程执行binder_thread_write，根据BC_XXX命令，生成相应的binder_work；\",\"server进程执行binder_thread_read，根据binder_work.type类型，生成BR_XXX，发送到用户空间处理。\",\"通信过程\"]},\"1769\":{\"h\":\"一次拷贝\",\"t\":[\"一次拷贝\"]},\"1770\":{\"h\":\"核心方法\",\"t\":[\"binder_thread_write\",\"binder_thread_write(){ while (ptr < end && thread->return_error == BR_OK) { get_user(cmd, (uint32_t __user *)ptr)；//获取IPC数据中的Binder协议(BC码) switch (cmd) { case BC_INCREFS: ... case BC_ACQUIRE: ... case BC_RELEASE: ... case BC_DECREFS: ... case BC_INCREFS_DONE: ... case BC_ACQUIRE_DONE: ... case BC_FREE_BUFFER: ... break; case BC_TRANSACTION: case BC_REPLY: { struct binder_transaction_data tr; copy_from_user(&tr, ptr, sizeof(tr))； //拷贝用户空间tr到内核 //创建事务 binder_transaction(proc, thread, &tr, cmd == BC_REPLY); break; case BC_REGISTER_LOOPER: ... case BC_ENTER_LOOPER: ... case BC_EXIT_LOOPER: ... case BC_REQUEST_DEATH_NOTIFICATION: ... case BC_CLEAR_DEATH_NOTIFICATION: ... case BC_DEAD_BINDER_DONE: ... } } } } \",\"binder_transaction\",\"static void binder_transaction(struct binder_proc *proc, struct binder_thread *thread, struct binder_transaction_data *tr, int reply){ //根据各种判定，获取以下信息： struct binder_thread *target_thread； //目标线程 struct binder_proc *target_proc； //目标进程 struct binder_node *target_node； //目标binder节点 struct list_head *target_list； //目标TODO队列 wait_queue_head_t *target_wait； //目标等待队列 ... //分配两个结构体内存 struct binder_transaction *t = kzalloc(sizeof(*t), GFP_KERNEL); struct binder_work *tcomplete = kzalloc(sizeof(*tcomplete), GFP_KERNEL); //从target_proc分配一块buffer【见小节3.2】 t->buffer = binder_alloc_buf(target_proc, tr->data_size, for (; offp < off_end; offp++) { switch (fp->type) { case BINDER_TYPE_BINDER: ... case BINDER_TYPE_WEAK_BINDER: ... case BINDER_TYPE_HANDLE: ... case BINDER_TYPE_WEAK_HANDLE: ... case BINDER_TYPE_FD: ... } } //向目标进程的target_list添加BINDER_WORK_TRANSACTION事务 t->work.type = BINDER_WORK_TRANSACTION; list_add_tail(&t->work.entry, target_list); //向当前线程的todo队列添加BINDER_WORK_TRANSACTION_COMPLETE事务 tcomplete->type = BINDER_WORK_TRANSACTION_COMPLETE; list_add_tail(&tcomplete->entry, &thread->todo); if (target_wait) wake_up_interruptible(target_wait); return; } \",\"binder_thread_read\",\"binder_thread_read（）{ wait_for_proc_work = thread->transaction_stack == NULL && list_empty(&thread->todo); //根据wait_for_proc_work来决定wait在当前线程还是进程的等待队列 if (wait_for_proc_work) { ret = wait_event_freezable_exclusive(proc->wait, binder_has_proc_work(proc, thread)); ... } else { ret = wait_event_freezable(thread->wait, binder_has_thread_work(thread)); ... } while (1) { //当&thread->todo和&proc->todo都为空时，goto到retry标志处，否则往下执行： struct binder_transaction_data tr; struct binder_transaction *t = NULL; switch (w->type) { case BINDER_WORK_TRANSACTION: ... case BINDER_WORK_TRANSACTION_COMPLETE: ... case BINDER_WORK_NODE: ... case BINDER_WORK_DEAD_BINDER: ... case BINDER_WORK_DEAD_BINDER_AND_CLEAR: ... case BINDER_WORK_CLEAR_DEATH_NOTIFICATION: ... } ... } done: *consumed = ptr - buffer; //当满足请求线程加已准备线程数等于0，已启动线程数小于最大线程数(15)， //且looper状态为已注册或已进入时创建新的线程。 if (proc->requested_threads + proc->ready_threads == 0 && proc->requested_threads_started < proc->max_threads && (thread->looper & (BINDER_LOOPER_STATE_REGISTERED | BINDER_LOOPER_STATE_ENTERED))) { proc->requested_threads++; // 生成BR_SPAWN_LOOPER命令，用于创建新的线程 put_user(BR_SPAWN_LOOPER, (uint32_t __user *)buffer)； } return 0; } \"]},\"1771\":{\"h\":\"binder驱动底层方法\",\"t\":[\"驱动设备的初始化(binder_init)，打开 (binder_open)，映射(binder_mmap)，数据操作(binder_ioctl)。\",\"驱动基础方法\"]},\"1772\":{\"h\":\"核心代码\",\"t\":[\"binder_init\",\"static int __init binder_init(void) { int ret; //创建名为binder的工作队列 binder_deferred_workqueue = create_singlethread_workqueue(\\\"binder\\\"); binder_debugfs_dir_entry_root = debugfs_create_dir(\\\"binder\\\", NULL); if (binder_debugfs_dir_entry_root) binder_debugfs_dir_entry_proc = debugfs_create_dir(\\\"proc\\\", binder_debugfs_dir_entry_root); // 注册misc设备 ret = misc_register(&binder_miscdev); if (binder_debugfs_dir_entry_root) { //在debugfs文件系统中创建一系列的文件 } return ret; } \",\"结构体\",\"static struct miscdevice binder_miscdev = { .minor = MISC_DYNAMIC_MINOR, //次设备号 动态分配 .name = \\\"binder\\\", //设备名 .fops = &binder_fops //设备的文件操作结构，这是file_operations结构 }; static const struct file_operations binder_fops = { .owner = THIS_MODULE, .poll = binder_poll, .unlocked_ioctl = binder_ioctl, .compat_ioctl = binder_ioctl, .mmap = binder_mmap, .open = binder_open, .flush = binder_flush, .release = binder_release, }; \"]},\"1773\":{\"c\":[\"framework\"]},\"1774\":{\"c\":[\"binder\"]},\"1775\":{\"h\":\"启动binder线程池\"},\"1776\":{\"h\":\"binder池总结\",\"t\":[\"binder线程池\",\"每次由Zygote fork出新进程的过程中，伴随着创建binder线程池，调用spawnPooledThread来创建binder主线程。当线程执行binder_thread_read的过程中，发现当前没有空闲线程，没有请求创建线程，且没有达到上限，则创建新的binder线程。\",\"Binder的transaction有3种类型：\",\"call: 发起进程的线程不一定是在Binder线程， 大多數情況下，接收者只指向进程，并不确定会有哪个线程来处理，所以不指定线程；\",\"reply: 发起者一定是binder线程，并且接收者线程便是上次call时的发起线程(该线程不一定是binder线程，可以是任意线程)。\",\"async: 与call类型差不多，唯一不同的是async是oneway方式不需要回复，发起进程的线程不一定是在Binder线程， 接收者只指向进程，并不确定会有哪个线程来处理，所以不指定线程。\",\"Binder系统中可分为3类binder线程：\",\"Binder主线程：进程创建过程会调用startThreadPool()过程中再进入spawnPooledThread(true)，来创建Binder主线程。编号从1开始，也就是意味着binder主线程名为binder_1，并且主线程是不会退出的。\",\"Binder普通线程：是由Binder Driver来根据是否有空闲的binder线程来决定是否创建binder线程，回调spawnPooledThread(false) ，isMain=false，该线程名格式为binder_x。\",\"Binder其他线程：其他线程是指并没有调用spawnPooledThread方法，而是直接调用IPC.joinThreadPool()，将当前线程直接加入binder线程队列。例如： mediaserver和servicemanager的主线程都是binder线程，但system_server的主线程并非binder线程。\"]},\"1777\":{\"h\":\"Binder线程创建\",\"t\":[\"Process.start() 向zygote进程发起创建socket消息\",\"Zygote.forkAndSpecialize() fork新进程\",\"新进程调用RuntimeInit.nativeZygoteInit 方法\",\"jni映射调用c++方法 app_main.cpp中onZygoteInit\",\"打开/dev/binder驱动设备\",\"startThreadPool()是创建一个新的binder线程，不断进行talkWithDriver()\"]},\"1778\":{\"h\":\"核心代码\",\"t\":[\"virtual void onZygoteInit() { //获取ProcessState对象 sp<ProcessState> proc = ProcessState::self(); //启动新binder线程 proc->startThreadPool(); } \",\"对于isMain=true的情况下， command为BC_ENTER_LOOPER，代表的是Binder主线程，不会退出的线程；\",\"对于isMain=false的情况下，command为BC_REGISTER_LOOPER，表示是由binder驱动创建的线程。\",\" //主binder池 void ProcessState::startThreadPool() { AutoMutex _l(mLock); //多线程同步 if (!mThreadPoolStarted) { mThreadPoolStarted = true; spawnPooledThread(true); } } //普通binder线程 status_t IPCThreadState::executeCommand(int32_t cmd) { status_t result = NO_ERROR; switch ((uint32_t)cmd) { ... case BR_SPAWN_LOOPER: //创建新的binder线程 【见小节2.3】 mProcess->spawnPooledThread(false); break; ... } return result; } void ProcessState::spawnPooledThread(bool isMain) { if (mThreadPoolStarted) { //获取Binder线程名 String8 name = makeBinderThreadName(); //此处isMain=true sp<Thread> t = new PoolThread(isMain); t->run(name.string()); } } class PoolThread : public Thread { public: PoolThread(bool isMain) : mIsMain(isMain) { } protected: virtual bool threadLoop() { IPCThreadState::self()->joinThreadPool(mIsMain); //【见小节2.4】 return false; } const bool mIsMain; }; void IPCThreadState::joinThreadPool(bool isMain) { //创建Binder线程 mOut.writeInt32(isMain ? BC_ENTER_LOOPER : BC_REGISTER_LOOPER); set_sched_policy(mMyThreadId, SP_FOREGROUND); //设置前台调度策略 status_t result; do { processPendingDerefs(); //清除队列的引用[见小节2.5] result = getAndExecuteCommand(); //处理下一条指令[见小节2.6] if (result < NO_ERROR && result != TIMED_OUT && result != -ECONNREFUSED && result != -EBADF) { abort(); } if(result == TIMED_OUT && !isMain) { break; ////非主线程出现timeout则线程退出 } } while (result != -ECONNREFUSED && result != -EBADF); mOut.writeInt32(BC_EXIT_LOOPER); // 线程退出循环 talkWithDriver(false); //false代表bwr数据的read_buffer为空 } \",\"调用链 onZygoteInit->startThreadPool->spawnPooledThread->PoolThread->joinThreadPool->talkWithDriver\"]},\"1779\":{\"h\":\"binder池上限\",\"t\":[\"默认地，每个进程的binder线程池的线程个数上限为15，该上限不统计通过BC_ENTER_LOOPER命令创建的binder主线程， 只计算BC_REGISTER_LOOPER命令创建的线程。 对此，或者很多人不理解，例个栗子：某个进程的主线程执行如下方法，那么该进程可创建的binder线程个数上限是多少呢？\",\"ProcessState::self()->setThreadPoolMaxThreadCount(6); // 6个线程 ProcessState::self()->startThreadPool(); // 1个线程 IPCThread::self()->joinThreadPool(); // 1个线程 \",\"binder池 可使用 6个\",\"通过startThreadPool()创建的主线程不算在最大线程上限 1个\",\"当前线程成为binder线程 1个\",\"binder线程个数上限为8\"]},\"1780\":{\"h\":\"binder_thread_read\",\"t\":[\"当发生以下3种情况之一，便会进入done：\",\"当前线程的return_error发生error的情况；\",\"当Binder驱动向client端发送死亡通知的情况；\",\"当类型为BINDER_WORK_TRANSACTION(即收到命令是BC_TRANSACTION或BC_REPLY)的情况；\",\"任何一个Binder线程当同时满足以下条件，则会生成用于创建新线程的BR_SPAWN_LOOPER命令：\",\"当前进程中没有请求创建binder线程，即requested_threads = 0；\",\"当前进程没有空闲可用的binder线程，即ready_threads = 0；（线程进入休眠状态的个数就是空闲线程数）\",\"当前进程已启动线程个数小于最大上限(默认15)；\",\"当前线程已接收到BC_ENTER_LOOPER或者BC_REGISTER_LOOPER命令，即当前处于BINDER_LOOPER_STATE_REGISTERED或者BINDER_LOOPER_STATE_ENTERED状态。【小节2.6】已设置状态为BINDER_LOOPER_STATE_ENTERED，显然这条件是满足的\"]},\"1781\":{\"h\":\"代码路径\",\"t\":[\"frameworks/base/cmds/app_process/app_main.cpp frameworks/native/libs/binder/ProcessState.cpp framework/native/libs/binder/IPCThreadState.cpp kernel/drivers/staging/android/binder.c \"]},\"1782\":{\"c\":[\"framework\"]},\"1783\":{\"c\":[\"binder\"]},\"1784\":{\"h\":\"启动serviceManage\"},\"1785\":{\"h\":\"启动serviceManage\",\"t\":[\"ServiceManager最核心的两个功能为查询和注册服务：\",\"注册服务：记录服务名和handle信息，保存到svclist列表；\",\"查询服务：根据服务名查询相应的的handle信息。\"]},\"1786\":{\"h\":\"启动流程\",\"t\":[\"ServiceManager启动流程\",\"ServiceManager启动流程\",\"打开binder驱动：binder_open；\",\"注册成为binder服务的大管家(守护进程)：binder_become_context_manager；\",\"进入无限循环，处理client端发来的请求：binder_loop；\",\"注册服务的过程，根据服务名称，但同一个服务已注册，重新注册前会先移除之前的注册信息\",\"死亡通知: 当binder所在进程死亡后,会调用binder_release方法,然后调用binder_node_release.这个过程便会发出死亡通知的回调.\"]},\"1787\":{\"h\":\"启动命令\",\"t\":[\"init进程解析init.rc文件, 启动service_manager进程\",\"service servicemanager /system/bin/servicemanager class core user system group system critical onrestart restart healthd onrestart restart zygote onrestart restart media onrestart restart surfaceflinger onrestart restart drm \"]},\"1788\":{\"h\":\"启动流程核心代码\",\"t\":[\"int main(int argc, char **argv) { struct binder_state *bs; //打开binder驱动，申请128k字节大小的内存空间 【见小节2.2】 bs = binder_open(128*1024); ... //成为上下文管理者 【见小节2.3】 if (binder_become_context_manager(bs)) { return -1; } selinux_enabled = is_selinux_enabled(); //selinux权限是否使能 sehandle = selinux_android_service_context_handle(); selinux_status_open(true); if (selinux_enabled > 0) { if (sehandle == NULL) { abort(); //无法获取sehandle } if (getcon(&service_manager_context) != 0) { abort(); //无法获取service_manager上下文 } } ... //进入无限循环，处理client端发来的请求 【见小节2.4】 binder_loop(bs, svcmgr_handler); return 0; } \"]},\"1789\":{\"h\":\"loop循环和解析\",\"t\":[\"loop循环\",\"void binder_loop(struct binder_state *bs, binder_handler func) { int res; struct binder_write_read bwr; uint32_t readbuf[32]; bwr.write_size = 0; bwr.write_consumed = 0; bwr.write_buffer = 0; readbuf[0] = BC_ENTER_LOOPER; //将BC_ENTER_LOOPER命令发送给binder驱动，让Service Manager进入循环 binder_write(bs, readbuf, sizeof(uint32_t)); for (;;) { bwr.read_size = sizeof(readbuf); bwr.read_consumed = 0; bwr.read_buffer = (uintptr_t) readbuf; res = ioctl(bs->fd, BINDER_WRITE_READ, &bwr); //进入循环，不断地binder读写过程 if (res < 0) { break; } res = binder_parse(bs, 0, (uintptr_t) readbuf, bwr.read_consumed, func); if (res == 0) { break; } if (res < 0) { break; } } } \",\"解析处理\",\"int binder_parse(struct binder_state *bs, struct binder_io *bio, uintptr_t ptr, size_t size, binder_handler func) { int r = 1; uintptr_t end = ptr + (uintptr_t) size; while (ptr < end) { uint32_t cmd = *(uint32_t *) ptr; ptr += sizeof(uint32_t); switch(cmd) { case BR_NOOP: //无操作，退出循环 break; case BR_TRANSACTION_COMPLETE: break; case BR_INCREFS: case BR_ACQUIRE: case BR_RELEASE: case BR_DECREFS: ptr += sizeof(struct binder_ptr_cookie); break; case BR_TRANSACTION: { struct binder_transaction_data *txn = (struct binder_transaction_data *) ptr; ... binder_dump_txn(txn); if (func) { unsigned rdata[256/4]; struct binder_io msg; struct binder_io reply; int res; bio_init(&reply, rdata, sizeof(rdata), 4); bio_init_from_txn(&msg, txn); //从txn解析出binder_io信息 res = func(bs, txn, &msg, &reply); //回复 binder_send_reply(bs, &reply, txn->data.ptr.buffer, res); } ptr += sizeof(*txn); break; } case BR_REPLY: { struct binder_transaction_data *txn = (struct binder_transaction_data *) ptr; ... binder_dump_txn(txn); if (bio) { bio_init_from_txn(bio, txn); bio = 0; } ptr += sizeof(*txn); r = 0; break; } case BR_DEAD_BINDER: { struct binder_death *death = (struct binder_death *)(uintptr_t) *(binder_uintptr_t *)ptr; ptr += sizeof(binder_uintptr_t); // binder死亡消息 death->func(bs, death->ptr); break; } case BR_FAILED_REPLY: r = -1; break; case BR_DEAD_REPLY: r = -1; break; default: return -1; } } return r; } \"]},\"1790\":{\"h\":\"注册服务和查询服务\",\"t\":[\"查询服务\",\"uint32_t do_find_service(struct binder_state *bs, const uint16_t *s, size_t len, uid_t uid, pid_t spid) { //查询相应的服务 【见小节3.1.1】 struct svcinfo *si = find_svc(s, len); if (!si || !si->handle) { return 0; } if (!si->allow_isolated) { uid_t appid = uid % AID_USER; //检查该服务是否允许孤立于进程而单独存在 if (appid >= AID_ISOLATED_START && appid <= AID_ISOLATED_END) { return 0; } } //服务是否满足查询条件 if (!svc_can_find(s, len, spid)) { return 0; } return si->handle; } \",\"注册服务\",\"int do_add_service(struct binder_state *bs, const uint16_t *s, size_t len, uint32_t handle, uid_t uid, int allow_isolated, pid_t spid) { struct svcinfo *si; if (!handle || (len == 0) || (len > 127)) return -1; //权限检查【见小节3.2.1】 if (!svc_can_register(s, len, spid)) { return -1; } //服务检索【见小节3.1.1】 si = find_svc(s, len); if (si) { if (si->handle) { svcinfo_death(bs, si); //服务已注册时，释放相应的服务【见小节3.2.2】 } si->handle = handle; } else { si = malloc(sizeof(*si) + (len + 1) * sizeof(uint16_t)); if (!si) { //内存不足，无法分配足够内存 return -1; } si->handle = handle; si->len = len; memcpy(si->name, s, (len + 1) * sizeof(uint16_t)); //内存拷贝服务信息 si->name[len] = '\\\\0'; si->death.func = (void*) svcinfo_death; si->death.ptr = si; si->allow_isolated = allow_isolated; si->next = svclist; // svclist保存所有已注册的服务 svclist = si; } //以BC_ACQUIRE命令，handle为目标的信息，通过ioctl发送给binder驱动 binder_acquire(bs, handle); //以BC_REQUEST_DEATH_NOTIFICATION命令的信息，通过ioctl发送给binder驱动，主要用于清理内存等收尾工作。[见小节3.3] binder_link_to_death(bs, handle, &si->death); return 0; } \"]},\"1791\":{\"h\":\"代码路径\",\"t\":[\"framework/native/cmds/servicemanager/ - service_manager.c - binder.c kernel/drivers/ (不同Linux分支路径略有不同) - staging/android/binder.c - android/binder.c \"]},\"1792\":{\"c\":[\"framework\"]},\"1793\":{\"c\":[\"binder\"]},\"1794\":{\"h\":\"注册和获取服务\"},\"1795\":{\"h\":\"注册服务\",\"t\":[\"media类图\",\"注册时序图\",\"状态流转图\"]},\"1796\":{\"h\":\"流程\",\"t\":[\"MediaPlayerService进程调用ioctl()向Binder驱动发送IPC数据\",\"Binder驱动收到该Binder请求，生成BR_TRANSACTION命令\",\"Service Manager的线程收到请求，调用服务注册函数将服务”media.player”注册到服务目录中。当服务注册完成后，生成IPC应答数据(BC_REPLY)\",\"Binder驱动收到该Binder应答请求，生成BR_REPLY命令，在MediaPlayerService收到该命令后，知道服务注册完成便可以正常使用\"]},\"1797\":{\"h\":\"本质:\",\"t\":[\"client和serviceManager通过binder驱动通信,\",\"client在驱动写入指定数据，登记状态。\",\"serverManager在looper中发现数据，登记注册服务，生成应答数据通知client\",\"client收到应答数据，完成注册服务。\"]},\"1798\":{\"h\":\"核心代码\",\"t\":[\"int main(int argc __unused, char** argv) { InitializeIcuOrDie(); //获得ProcessState实例对象【见小节2.1】 sp<ProcessState> proc(ProcessState::self()); //获取BpServiceManager对象 sp<IServiceManager> sm = defaultServiceManager(); AudioFlinger::instantiate(); //注册多媒体服务 【见小节3.1】 MediaPlayerService::instantiate(); ResourceManagerService::instantiate(); CameraService::instantiate(); AudioPolicyService::instantiate(); SoundTriggerHwService::instantiate(); RadioService::instantiate(); registerExtensions(); //启动Binder线程池 ProcessState::self()->startThreadPool(); //当前线程加入到线程池 IPCThreadState::self()->joinThreadPool(); } void MediaPlayerService::instantiate() { //注册服务【见小节3.2】 defaultServiceManager()->addService(String16(\\\"media.player\\\"), new MediaPlayerService()); } virtual status_t addService(const String16& name, const sp<IBinder>& service, bool allowIsolated) { Parcel data, reply; //Parcel是数据通信包 //写入头信息\\\"android.os.IServiceManager\\\" data.writeInterfaceToken(IServiceManager::getInterfaceDescriptor()); data.writeString16(name); // name为 \\\"media.player\\\" data.writeStrongBinder(service); // MediaPlayerService对象【见小节3.2.1】 data.writeInt32(allowIsolated ? 1 : 0); // allowIsolated= false //remote()指向的是BpBinder对象【见小节3.3】 status_t err = remote()->transact(ADD_SERVICE_TRANSACTION, data, &reply); return err == NO_ERROR ? reply.readExceptionCode() : err; } \",\"等待与驱动通信\",\"IPC.waitForResponse talkWithDriver\",\"status_t IPCThreadState::waitForResponse(Parcel *reply, status_t *acquireResult) { int32_t cmd; int32_t err; while (1) { if ((err=talkWithDriver()) < NO_ERROR) break; // 【见流程2.8】 err = mIn.errorCheck(); if (err < NO_ERROR) break; if (mIn.dataAvail() == 0) continue; cmd = mIn.readInt32(); switch (cmd) { case BR_TRANSACTION_COMPLETE: ... case BR_DEAD_REPLY: ... case BR_FAILED_REPLY: ... case BR_ACQUIRE_RESULT: ... case BR_REPLY: { binder_transaction_data tr; err = mIn.read(&tr, sizeof(tr)); if (reply) { if ((tr.flags & TF_STATUS_CODE) == 0) { reply->ipcSetDataReference( reinterpret_cast<const uint8_t*>(tr.data.ptr.buffer), tr.data_size, reinterpret_cast<const binder_size_t*>(tr.data.ptr.offsets), tr.offsets_size/sizeof(binder_size_t), freeBuffer, this); } else { ... } } } goto finish; default: err = executeCommand(cmd); if (err != NO_ERROR) goto finish; break; } } ... return err; } \"]},\"1799\":{\"h\":\"获取服务\",\"t\":[\"请求服务(getService)过程，就是向servicemanager进程查询指定服务，\",\"当执行binder_transaction()时，会区分请求服务所属进程情况。\",\"当请求服务的进程与服务属于不同进程，则为请求服务所在进程创建binder_ref对象，指向服务进程中的binder_node; 最终readStrongBinder()，返回的是BpBinder对象；\",\"当请求服务的进程与服务属于同一进程，则不再创建新对象，只是引用计数加1，并且修改type为BINDER_TYPE_BINDER或BINDER_TYPE_WEAK_BINDER。 最终readStrongBinder()，返回的是BBinder对象的真实子类；\",\"sp<IMediaPlayerService>& IMediaDeathNotifier::getMediaPlayerService() { Mutex::Autolock _l(sServiceLock); if (sMediaPlayerService == 0) { sp<IServiceManager> sm = defaultServiceManager(); //获取ServiceManager sp<IBinder> binder; do { //获取名为\\\"media.player\\\"的服务 binder = sm->getService(String16(\\\"media.player\\\")); if (binder != 0) { break; } usleep(500000); // 0.5s } while (true); if (sDeathNotifier == NULL) { sDeathNotifier = new DeathNotifier(); //创建死亡通知对象 } //将死亡通知连接到binder 【见流程14】 binder->linkToDeath(sDeathNotifier); sMediaPlayerService = interface_cast<IMediaPlayerService>(binder); } return sMediaPlayerService; } virtual sp<IBinder> getService(const String16& name) const { unsigned n; for (n = 0; n < 5; n++){ sp<IBinder> svc = checkService(name); if (svc != NULL) return svc; sleep(1); } return NULL; } virtual sp<IBinder> checkService( const String16& name) const { Parcel data, reply; //写入RPC头 data.writeInterfaceToken(IServiceManager::getInterfaceDescriptor()); //写入服务名 data.writeString16(name); remote()->transact(CHECK_SERVICE_TRANSACTION, data, &reply); return reply.readStrongBinder(); } \"]},\"1800\":{\"h\":\"代码路径\",\"t\":[\"framework/native/libs/binder/ - Binder.cpp - BpBinder.cpp - IPCThreadState.cpp - ProcessState.cpp - IServiceManager.cpp - IInterface.cpp - Parcel.cpp frameworks/native/include/binder/ - IInterface.h (包括BnInterface, BpInterface) \"]},\"1801\":{\"c\":[\"framework\"]},\"1802\":{\"c\":[\"binder\"]},\"1803\":{\"h\":\"获得serviceManage\"},\"1804\":{\"h\":\"获得serviceManage\",\"t\":[\"defaultServiceManager 等价于 new BpServiceManager(new BpBinder(0));\",\"ProcessState::self()主要工作：\",\"调用open()，打开/dev/binder驱动设备；\",\"再利用mmap()，创建大小为1M-8K的内存地址空间； *设定当前进程最大的最大并发Binder线程个数为16。BpServiceManager巧妙将通信层与业务层逻辑合为一体，\",\"通过继承接口IServiceManager实现了接口中的业务逻辑函数；\",\"通过成员变量mRemote= new BpBinder(0)进行Binder通信工作。\",\"BpBinder通过handler来指向所对应BBinder, 在整个Binder系统中handle=0代表\",\"ServiceManager所对应的BBinder\",\"client端 server端相对于serverManage都是客户端, 所以是bpBinder\",\"获得服务\"]},\"1805\":{\"h\":\"核心代码\",\"t\":[\"sp<IServiceManager> defaultServiceManager() { if (gDefaultServiceManager != NULL) return gDefaultServiceManager; { AutoMutex _l(gDefaultServiceManagerLock); //加锁 while (gDefaultServiceManager == NULL) { //【见下文小节二,三,四】 gDefaultServiceManager = interface_cast<IServiceManager>( ProcessState::self()->getContextObject(NULL)); if (gDefaultServiceManager == NULL) sleep(1); } } return gDefaultServiceManager; } sp<ProcessState> ProcessState::self() { Mutex::Autolock _l(gProcessMutex); if (gProcess != NULL) { return gProcess; } //实例化ProcessState 【见小节2.2】 gProcess = new ProcessState; return gProcess; } template<typename INTERFACE> inline sp<INTERFACE> interface_cast(const sp<IBinder>& obj) { return INTERFACE::asInterface(obj); //【见小节4.2】 } //模版函数 //位于IServiceManager.h文件 【见小节4.3】 DECLARE_META_INTERFACE(ServiceManager) //位于IServiceManager.cpp文件 【见小节4.4】 IMPLEMENT_META_INTERFACE(ServiceManager,\\\"android.os.IServiceManager\\\") \"]},\"1806\":{\"h\":\"使用模版方法\",\"t\":[\"//用于申明asInterface(),getInterfaceDescriptor() #define DECLARE_META_INTERFACE(INTERFACE) #define IMPLEMENT_META_INTERFACE(INTERFACE, NAME) //用于实现上述两个方法 \",\"// 实现BPServiceManager对象 IMPLEMENT_META_INTERFACE(ServiceManager,\\\"android.os.IServiceManager\\\") ==> 转换为 const android::String16 IServiceManager::descriptor(“android.os.IServiceManager”); const android::String16& IServiceManager::getInterfaceDescriptor() const { return IServiceManager::descriptor; } android::sp<IServiceManager> IServiceManager::asInterface(const android::sp<android::IBinder>& obj) { android::sp<IServiceManager> intr; if(obj != NULL) { intr = static_cast<IServiceManager *>( obj->queryLocalInterface(IServiceManager::descriptor).get()); if (intr == NULL) { intr = new BpServiceManager(obj); } } return intr; } IServiceManager::IServiceManager () { } IServiceManager::~ IServiceManager() { } \"]},\"1807\":{\"h\":\"代码路径\",\"t\":[\"framework/native/libs/binder/ - ProcessState.cpp - BpBinder.cpp - Binder.cpp - IServiceManager.cpp framework/native/include/binder/ - IServiceManager.h - IInterface.h \"]},\"1808\":{\"c\":[\"framework\"]},\"1809\":{\"c\":[\"binder\"]},\"1810\":{\"h\":\"实战案例\"},\"1811\":{\"c\":[\"framework\"]},\"1812\":{\"h\":\"实战案例\"},\"1813\":{\"c\":[\"framework\"]},\"1814\":{\"c\":[\"framework\"]},\"1815\":{\"h\":\"四大组件\"},\"1816\":{\"c\":[\"framework\"]},\"1817\":{\"h\":\"四大组件\"},\"1818\":{\"c\":[\"framework\"]},\"1819\":{\"c\":[\"framework\"]},\"1820\":{\"h\":\"handler\"},\"1821\":{\"c\":[\"framework\"]},\"1822\":{\"h\":\"handler native层\"},\"1823\":{\"h\":\"handler整体架构\",\"t\":[\"handler架构\"]},\"1824\":{\"h\":\"消息队列\",\"t\":[\"消息队列\",\"框架图\",\"Java层和Native层的MessageQueue通过JNI建立关联，彼此之间能相互调用\",\"native层实现 Handler/Looper/Message 与java层没有真正关联，逻辑独立,单独实现\",\"消息处理流程是先处理Native Message，再处理Native Request，最后处理Java Message (上层消息少,响应时间长的原因)\"]},\"1825\":{\"h\":\"native层关键方法\",\"t\":[\"private native static long nativeInit(); private native static void nativeDestroy(long ptr); private native void nativePollOnce(long ptr, int timeoutMillis); private native static void nativeWake(long ptr); private native static boolean nativeIsPolling(long ptr); private native static void nativeSetFileDescriptorEvents(long ptr, int fd, int events); \",\"消息队列native方法\"]},\"1826\":{\"h\":\"发送消息sendMessage和唤醒\",\"t\":[\"Looper::sendMessage->Looper::sendMessageDelayed->sendMessageAtTime \",\"发送消息维护到 MessageEnvelope wake 管道\",\"void Looper::sendMessageAtTime(nsecs_t uptime, const sp<MessageHandler>& handler, const Message& message) { size_t i = 0; { //请求锁 AutoMutex _l(mLock); size_t messageCount = mMessageEnvelopes.size(); //找到message应该插入的位置i while (i < messageCount && uptime >= mMessageEnvelopes.itemAt(i).uptime) { i += 1; } //加入消息 维护在 mMessageEnvelopes MessageEnvelope messageEnvelope(uptime, handler, message); mMessageEnvelopes.insertAt(messageEnvelope, i, 1); //如果当前正在发送消息，那么不再调用wake()，直接返回。 if (mSendingMessage) { return; } } //释放锁 //当把消息加入到消息队列的头部时，需要唤醒poll循环。 if (i == 0) { wake(); } } \"]},\"1827\":{\"h\":\"nativeWake 唤醒poll循环\",\"t\":[\"MessageQueue.enqueueMessage->nativeWake->android_os_MessageQueue_nativeWake->NativeMessageQueue::wake->Looper::wake->write(1) \",\"void Looper::wake() { uint64_t inc = 1; // 向管道mWakeEventFd写入字符1 ssize_t nWrite = TEMP_FAILURE_RETRY(write(mWakeEventFd, &inc, sizeof(uint64_t))); if (nWrite != sizeof(uint64_t)) { if (errno != EAGAIN) { ALOGW(\\\"Could not write wake signal, errno=%d\\\", errno); } } } \",\"写入字符'1' ,用于需要唤醒poll循环\"]},\"1828\":{\"h\":\"nativePollOnce 取出消息和处理消息\",\"t\":[\"nativePollOnce用于提取消息队列中的消息，提取消息的调用链\",\"MessageQueue.next()->nativePollOnce()->android_os_MessageQueue_nativePollOnce->NativeMessageQueue::pollOnce->Looper::pollOnce()->Looper::pollInner->epoll_wait->awoken \",\"nativePollOnce 对java层阻塞及时作用，对native层队列进行读取消息和消息处理\",\"int Looper::pollInner(int timeoutMillis) { int result = POLL_WAKE; mResponses.clear(); mResponseIndex = 0; mPolling = true; //即将处于idle状态 struct epoll_event eventItems[EPOLL_MAX_EVENTS]; //fd最大个数为16 //等待事件发生或者超时，在nativeWake()方法，向管道写端写入字符，则该方法会返回； int eventCount = epoll_wait(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis); mPolling = false; //不再处于idle状态 mLock.lock(); //请求锁 if (mEpollRebuildRequired) { mEpollRebuildRequired = false; rebuildEpollLocked(); // epoll重建，直接跳转Done; goto Done; } if (eventCount < 0) { if (errno == EINTR) { goto Done; } result = POLL_ERROR; // epoll事件个数小于0，发生错误，直接跳转Done; goto Done; } if (eventCount == 0) { //epoll事件个数等于0，发生超时，直接跳转Done; result = POLL_TIMEOUT; goto Done; } //循环遍历，处理所有的事件 for (int i = 0; i < eventCount; i++) { int fd = eventItems[i].data.fd; uint32_t epollEvents = eventItems[i].events; if (fd == mWakeEventFd) { if (epollEvents & EPOLLIN) { awoken(); //已经唤醒了，则读取并清空管道数据 } } else { ssize_t requestIndex = mRequests.indexOfKey(fd); if (requestIndex >= 0) { int events = 0; if (epollEvents & EPOLLIN) events |= EVENT_INPUT; if (epollEvents & EPOLLOUT) events |= EVENT_OUTPUT; if (epollEvents & EPOLLERR) events |= EVENT_ERROR; if (epollEvents & EPOLLHUP) events |= EVENT_HANGUP; //处理request，生成对应的reponse对象，push到响应数组 pushResponse(events, mRequests.valueAt(requestIndex)); } } } Done: ; //再处理Native的Message，调用相应回调方法 mNextMessageUptime = LLONG_MAX; while (mMessageEnvelopes.size() != 0) { nsecs_t now = systemTime(SYSTEM_TIME_MONOTONIC); const MessageEnvelope& messageEnvelope = mMessageEnvelopes.itemAt(0); if (messageEnvelope.uptime <= now) { { sp<MessageHandler> handler = messageEnvelope.handler; Message message = messageEnvelope.message; mMessageEnvelopes.removeAt(0); mSendingMessage = true; mLock.unlock(); //释放锁 //todo 处理消息事件 handler->handleMessage(message); } mLock.lock(); //请求锁 mSendingMessage = false; result = POLL_CALLBACK; // 发生回调 } else { mNextMessageUptime = messageEnvelope.uptime; break; } } mLock.unlock(); //释放锁 //处理带有Callback()方法的Response事件，执行Reponse相应的回调方法 for (size_t i = 0; i < mResponses.size(); i++) { Response& response = mResponses.editItemAt(i); if (response.request.ident == POLL_CALLBACK) { int fd = response.request.fd; int events = response.events; void* data = response.request.data; // 处理请求的回调方法 int callbackResult = response.request.callback->handleEvent(fd, events, data); if (callbackResult == 0) { removeFd(fd, response.request.seq); //移除fd } response.request.callback.clear(); //清除reponse引用的回调方法 result = POLL_CALLBACK; // 发生回调 } } return result; } void Looper::awoken() { uint64_t counter; //不断读取管道数据，目的就是为了清空管道内容 TEMP_FAILURE_RETRY(read(mWakeEventFd, &counter, sizeof(uint64_t))); } \",\"native消息处理\"]},\"1829\":{\"h\":\"nativeInit 创建消息队列和Looper\",\"t\":[\"new MessageQueue()->nativeInit()->android_os_MessageQueue_nativeInit->new NativeMessageQueue->new Looper()->epoll_ctl \",\"MessageQueue(boolean quitAllowed) { mQuitAllowed = quitAllowed; //mPtr记录native消息队列的信息 mPtr = nativeInit(); } static jlong android_os_MessageQueue_nativeInit(JNIEnv* env, jclass clazz) { //初始化native消息队列 NativeMessageQueue* nativeMessageQueue = new NativeMessageQueue(); nativeMessageQueue->incStrong(env); //增加引用计数 return reinterpret_cast<jlong>(nativeMessageQueue); } NativeMessageQueue::NativeMessageQueue() : mPollEnv(NULL), mPollObj(NULL), mExceptionObj(NULL) { //类比于java层的Looper mLooper = Looper::getForThread(); //获取TLS中的Looper对象 if (mLooper == NULL) { mLooper = new Looper(false); //创建native层的Looper Looper::setForThread(mLooper); //保存native层的Looper到TLS } } Looper::Looper(bool allowNonCallbacks) : mAllowNonCallbacks(allowNonCallbacks), mSendingMessage(false), mPolling(false), mEpollFd(-1), mEpollRebuildRequired(false), mNextRequestSeq(0), mResponseIndex(0), mNextMessageUptime(LLONG_MAX) { mWakeEventFd = eventfd(0, EFD_NONBLOCK); //构造唤醒事件的fd AutoMutex _l(mLock); rebuildEpollLocked(); //重建Epoll事件 } void Looper::rebuildEpollLocked() { if (mEpollFd >= 0) { close(mEpollFd); //关闭旧的epoll实例 } mEpollFd = epoll_create(EPOLL_SIZE_HINT); //创建新的epoll实例，并注册wake管道 struct epoll_event eventItem; memset(& eventItem, 0, sizeof(epoll_event)); //把未使用的数据区域进行置0操作 eventItem.events = EPOLLIN; //可读事件 eventItem.data.fd = mWakeEventFd; //将唤醒事件(mWakeEventFd)添加到epoll实例(mEpollFd) int result = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, mWakeEventFd, & eventItem); for (size_t i = 0; i < mRequests.size(); i++) { const Request& request = mRequests.valueAt(i); struct epoll_event eventItem; request.initEventItem(&eventItem); //将request队列的事件，分别添加到epoll实例 int epollResult = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, request.fd, & eventItem); } } \",\"Looper对象中的mWakeEventFd添加到epoll监控，以及mRequests也添加到epoll的监控范围内。\"]},\"1830\":{\"h\":\"nativeDestroy 销毁\",\"t\":[\"dispose->nativeDestroy()->android_os_MessageQueue_nativeDestroy->decStrong \"]},\"1831\":{\"h\":\"常用结构体\",\"t\":[\"Message\",\"struct Message { Message() : what(0) { } Message(int what) : what(what) { } int what; // 消息类型 }; \",\"信息bean\",\"struct Request { //请求结构体 int fd; int ident; int events; int seq; sp<LooperCallback> callback; void* data; void initEventItem(struct epoll_event* eventItem) const; }; struct Response { //响应结构体 int events; Request request; }; struct MessageEnvelope { //信封结构体 MessageEnvelope() : uptime(0) { } MessageEnvelope(nsecs_t uptime, const sp<MessageHandler> handler, const Message& message) : uptime(uptime), handler(handler), message(message) { } nsecs_t uptime; sp<MessageHandler> handler; Message message; }; \",\"MessageEnvelope正如其名字，信封。MessageEnvelope里面记录着收信人(handler)，发信时间(uptime)，信件内容(message)\",\"采用mMessageEnvelopes 维护消息列表\",\"MessageHandler 消息处理\",\"class MessageHandler : public virtual RefBase { protected: virtual ~MessageHandler() { } public: virtual void handleMessage(const Message& message) = 0; }; \",\"LooperCallback\",\"class LooperCallback : public virtual RefBase { protected: virtual ~LooperCallback() { } public: //用于处理指定的文件描述符的poll事件 virtual int handleEvent(int fd, int events, void* data) = 0; }; \"]},\"1832\":{\"h\":\"源码路径\",\"t\":[\"framework/base/core/java/andorid/os/MessageQueue.java framework/base/core/jni/android_os_MessageQueue.cpp framework/base/core/java/andorid/os/Looper.java system/core/libutils/Looper.cpp system/core/include/utils/Looper.h system/core/libutils/RefBase.cpp framework/base/native/android/looper.cpp framework/native/include/android/looper.h \"]},\"1833\":{\"c\":[\"framework\"]},\"1834\":{\"c\":[\"handler\"]},\"1835\":{\"h\":\"handler 应用层\"},\"1836\":{\"h\":\"handler整体架构\",\"t\":[\"handler架构\"]},\"1837\":{\"h\":\"handler模型\",\"t\":[\"handler机制\",\"Message：消息分为硬件产生的消息(如按钮、触摸)和软件生成的消息；\",\"MessageQueue：消息队列的主要功能向消息池投递消息(MessageQueue.enqueueMessage)和取走消息池的消息(MessageQueue.next)；\",\"Handler：消息辅助类，主要功能向消息池发送各种消息事件(Handler.sendMessage)和处理相应消息事件(Handler.handleMessage)；\",\"Looper：不断循环执行(Looper.loop)，按分发机制将消息分发给目标处理者。\"]},\"1838\":{\"h\":\"handler类图\",\"t\":[\"handler类图\"]},\"1839\":{\"h\":\"典型案例\",\"t\":[\"class LooperThread extends Thread { public Handler mHandler; //发送消息 public void sendMessage(Message msg) { mHandler.sendMessage(msg); } @Override public void run() { //Looper初始化 Looper.prepare(); mHandler = new Handler() { //处理消息 public void handleMessage(Message msg) { //TODO 定义消息处理逻辑 } }; //Looper开始循环 Looper.loop(); } } \"]},\"1840\":{\"h\":\"handler构建\",\"t\":[\"默认构造\",\"public Handler() { this(null, false); } public Handler(Callback callback, boolean async) { //匿名类、内部类或本地类都必须申明为static，否则会警告可能出现内存泄露 if (FIND_POTENTIAL_LEAKS) { final Class<? extends Handler> klass = getClass(); if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) && (klass.getModifiers() & Modifier.STATIC) == 0) { Log.w(TAG, \\\"The following Handler class should be static or leaks might occur: \\\" + klass.getCanonicalName()); } } //必须先执行Looper.prepare()，才能获取Looper对象，否则为null. mLooper = Looper.myLooper(); //从当前线程的TLS中获取Looper对象 if (mLooper == null) { throw new RuntimeException(\\\"\\\"); } mQueue = mLooper.mQueue; //消息队列，来自Looper对象 mCallback = callback; //回调方法 mAsynchronous = async; //设置消息是否为异步处理方式 } \",\"有参数构造\",\"public Handler(Looper looper) { this(looper, null, false); } public Handler(Looper looper, Callback callback, boolean async) { mLooper = looper; mQueue = looper.mQueue; mCallback = callback; mAsynchronous = async; } \"]},\"1841\":{\"h\":\"消息入队(handler发送)\",\"t\":[\"sendMessage流程\",\"Handler.sendMessage->sendMessageDelayed->sendMessageAtTime->enqueueMessage->queue.enqueueMessage \",\"入队时，如果没有数据放在头，如果有则需要遍历队列数据(按照when从小到大插入)，进行插入操作\",\"post流程\",\"Handler.post->getPostMessage->sendMessageDelayed->sendMessageAtTime->enqueueMessage->queue.enqueueMessage \",\"入队时 设置msg.target = this, 是当前handler\",\"private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) { msg.target = this; if (mAsynchronous) { msg.setAsynchronous(true); } return queue.enqueueMessage(msg, uptimeMillis); } \"]},\"1842\":{\"h\":\"消息出队(handler处理)\",\"t\":[\"ActivityThread.main->Looper.loop()->mQueue.next()->msg.target.dispatchMessage->handler.handleMessage \",\"分发处理\",\"public void dispatchMessage(Message msg) { if (msg.callback != null) { //当Message存在回调方法，回调msg.callback.run()方法； handleCallback(msg); } else { if (mCallback != null) { //当Handler存在Callback成员变量时，回调方法handleMessage()； if (mCallback.handleMessage(msg)) { return; } } //Handler自身的回调方法handleMessage() handleMessage(msg); } } \",\"Message的回调方法：message.callback.run()，优先级最高；\",\"Handler的回调方法：Handler.mCallback.handleMessage(msg)，优先级仅次于1；\",\"Handler的默认方法：Handler.handleMessage(msg)，优先级最低。\"]},\"1843\":{\"h\":\"消息循环\",\"t\":[\"ActivityThread.main->Looper.prepareMainLooper()->prepare()->sThreadLocal.set(new Looper())->new MessageQueue()->loop() \",\"ThreadLocal 用于私有当前线程Looper对象\",\"loop循环遍历消息\",\"public static void loop() { final Looper me = myLooper(); //获取TLS存储的Looper对象 final MessageQueue queue = me.mQueue; //获取Looper对象中的消息队列 Binder.clearCallingIdentity(); //确保在权限检查时基于本地进程，而不是调用进程。 final long ident = Binder.clearCallingIdentity(); for (;;) { //进入loop的主循环方法 Message msg = queue.next(); //可能会阻塞 if (msg == null) { //没有消息，则退出循环 return; } //默认为null，可通过setMessageLogging()方法来指定输出，用于debug功能 Printer logging = me.mLogging; if (logging != null) { logging.println(\\\">>>>> Dispatching to \\\" + msg.target + \\\" \\\" + msg.callback + \\\": \\\" + msg.what); } msg.target.dispatchMessage(msg); //用于分发Message 【见3.2】 if (logging != null) { logging.println(\\\"<<<<< Finished to \\\" + msg.target + \\\" \\\" + msg.callback); } //恢复调用者信息 final long newIdent = Binder.clearCallingIdentity(); msg.recycleUnchecked(); //将Message放入消息池 } } \"]},\"1844\":{\"h\":\"MessageQueue\"},\"1845\":{\"h\":\"创建MessageQueue\",\"t\":[\"MessageQueue(boolean quitAllowed) { mQuitAllowed = quitAllowed; //通过native方法初始化消息队列，其中mPtr是供native代码使用 mPtr = nativeInit(); } \"]},\"1846\":{\"h\":\"next 取出消息\",\"t\":[\"Message next() { final long ptr = mPtr; if (ptr == 0) { //当消息循环已经退出，则直接返回 return null; } int pendingIdleHandlerCount = -1; // 循环迭代的首次为-1 int nextPollTimeoutMillis = 0; for (;;) { if (nextPollTimeoutMillis != 0) { Binder.flushPendingCommands(); } //阻塞操作，当等待nextPollTimeoutMillis时长，或者消息队列被唤醒，都会返回 nativePollOnce(ptr, nextPollTimeoutMillis); synchronized (this) { final long now = SystemClock.uptimeMillis(); Message prevMsg = null; Message msg = mMessages; //当消息的Handler为空时，则查询异步消息 if (msg != null && msg.target == null) { //当查询到异步消息，则立刻退出循环 do { prevMsg = msg; msg = msg.next; } while (msg != null && !msg.isAsynchronous()); } if (msg != null) { if (now < msg.when) { //当异步消息触发时间大于当前时间，则设置下一次轮询的超时时长 nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE); } else { // 获取一条消息，并返回 mBlocked = false; if (prevMsg != null) { prevMsg.next = msg.next; } else { mMessages = msg.next; } msg.next = null; //设置消息的使用状态，即flags |= FLAG_IN_USE msg.markInUse(); return msg; //成功地获取MessageQueue中的下一条即将要执行的消息 } } else { //没有消息 nextPollTimeoutMillis = -1; } //消息正在退出，返回null if (mQuitting) { dispose(); return null; } //当消息队列为空，或者是消息队列的第一个消息时 if (pendingIdleHandlerCount < 0 && (mMessages == null || now < mMessages.when)) { pendingIdleHandlerCount = mIdleHandlers.size(); } if (pendingIdleHandlerCount <= 0) { //没有idle handlers 需要运行，则循环并等待。 mBlocked = true; continue; } if (mPendingIdleHandlers == null) { mPendingIdleHandlers = new IdleHandler[Math.max(pendingIdleHandlerCount, 4)]; } mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers); } //只有第一次循环时，会运行idle handlers，执行完成后，重置pendingIdleHandlerCount为0. for (int i = 0; i < pendingIdleHandlerCount; i++) { final IdleHandler idler = mPendingIdleHandlers[i]; mPendingIdleHandlers[i] = null; //去掉handler的引用 boolean keep = false; try { keep = idler.queueIdle(); //idle时执行的方法 } catch (Throwable t) { Log.wtf(TAG, \\\"IdleHandler threw exception\\\", t); } if (!keep) { synchronized (this) { mIdleHandlers.remove(idler); } } } //重置idle handler个数为0，以保证不会再次重复运行 pendingIdleHandlerCount = 0; //当调用一个空闲handler时，一个新message能够被分发，因此无需等待可以直接查询pending message. nextPollTimeoutMillis = 0; } } \",\"nativePollOnce 阻塞操作 等待时长\",\"空闲时，会执行IdelHandler中方法\",\"发现异步消息优先执行，其次同步消息\"]},\"1847\":{\"h\":\"enqueueMessage 添加消息\",\"t\":[\"boolean enqueueMessage(Message msg, long when) { // 每一个普通Message必须有一个target if (msg.target == null) { throw new IllegalArgumentException(\\\"Message must have a target.\\\"); } if (msg.isInUse()) { throw new IllegalStateException(msg + \\\" This message is already in use.\\\"); } synchronized (this) { if (mQuitting) { //正在退出时，回收msg，加入到消息池 msg.recycle(); return false; } msg.markInUse(); msg.when = when; Message p = mMessages; boolean needWake; if (p == null || when == 0 || when < p.when) { //p为null(代表MessageQueue没有消息） 或者msg的触发时间是队列中最早的， 则进入该该分支 msg.next = p; mMessages = msg; needWake = mBlocked; //当阻塞时需要唤醒 } else { //将消息按时间顺序插入到MessageQueue。一般地，不需要唤醒事件队列，除非 //消息队头存在barrier，并且同时Message是队列中最早的异步消息。 needWake = mBlocked && p.target == null && msg.isAsynchronous(); Message prev; for (;;) { prev = p; p = p.next; if (p == null || when < p.when) { break; } if (needWake && p.isAsynchronous()) { needWake = false; } } msg.next = p; prev.next = msg; } //消息没有退出，我们认为此时mPtr != 0 if (needWake) { nativeWake(mPtr); } } return true; } \",\"按照when 排序插入到MessageQueue中\",\"普通消息不唤醒队列，同步屏障+异步消息nativeWake 唤醒\",\"普通消息必须有一个target\"]},\"1848\":{\"h\":\"同步屏障 & 异步消息\",\"t\":[\"让重要的消息尽可能早的得到执行\",\"msg.target = null 是屏障消息特点\"]},\"1849\":{\"h\":\"场景\",\"t\":[\"ViewRootImpl接收屏幕垂直同步信息事件用于驱动UI测绘\",\"ActivityThread接收AMS的事件驱动生命周期\",\"InputMethodMessage分发软键盘输入事件\",\"PhoneWindowManager分发电话页面各种事件\",\"public int postSyncBarrier() { return postSyncBarrier(SystemClock.uptimeMillis()); } //添加屏障 private int postSyncBarrier(long when) { synchronized (this) { final int token = mNextBarrierToken++; final Message msg = Message.obtain(); msg.markInUse(); msg.when = when; msg.arg1 = token; Message prev = null; Message p = mMessages; if (when != 0) { while (p != null && p.when <= when) { prev = p; p = p.next; } } if (prev != null) { msg.next = p; prev.next = msg; } else { msg.next = p; mMessages = msg; } return token; } } //移除屏障 public void removeSyncBarrier(int token) { synchronized (this) { Message prev = null; Message p = mMessages; //从消息队列找到 target为空,并且token相等的Message while (p != null && (p.target != null || p.arg1 != token)) { prev = p; p = p.next; } final boolean needWake; if (prev != null) { prev.next = p.next; needWake = false; } else { mMessages = p.next; needWake = mMessages == null || mMessages.target != null; } p.recycleUnchecked(); if (needWake && !mQuitting) { nativeWake(mPtr); } } } \"]},\"1850\":{\"h\":\"消息池\",\"t\":[\"每个消息用Message表示，Message主要包含以下内容：\",\"消息头\",\"静态变量sPool的数据类型为Message，通过next成员变量，维护一个消息池；\",\"静态变量MAX_POOL_SIZE代表消息池的可用大小；消息池的默认大小为50。\",\"//申请 public static Message obtain() { synchronized (sPoolSync) { if (sPool != null) { Message m = sPool; sPool = m.next; m.next = null; //从sPool中取出一个Message对象，并消息链表断开 m.flags = 0; // 清除in-use flag sPoolSize--; //消息池的可用大小进行减1操作 return m; } } return new Message(); // 当消息池为空时，直接创建Message对象 } //回收 public void recycle() { if (isInUse()) { //判断消息是否正在使用 if (gCheckRecycle) { //Android 5.0以后的版本默认为true,之前的版本默认为false. throw new IllegalStateException(\\\"This message cannot be recycled because it is still in use.\\\"); } return; } recycleUnchecked(); } //对于不再使用的消息，加入到消息池 void recycleUnchecked() { //将消息标示位置为IN_USE，并清空消息所有的参数。 flags = FLAG_IN_USE; what = 0; arg1 = 0; arg2 = 0; obj = null; replyTo = null; sendingUid = -1; when = 0; target = null; callback = null; data = null; synchronized (sPoolSync) { if (sPoolSize < MAX_POOL_SIZE) { //当消息池没有满时，将Message对象加入消息池 next = sPool; sPool = this; sPoolSize++; //消息池的可用大小进行加1操作 } } } \"]},\"1851\":{\"h\":\"handler内存泄漏\",\"t\":[\"static 静态内部类 ， context使用weakreference\",\" //其他线程中 退出looper循环 Looper.myLooper().quitSafely(); //移除handler所有空消息 handler.removeCallbacksAndMessages(null); //静态内部类 static class SafeHandler extends Handler { WeakReference<Context> contextWeakReference; public MyHandler(Context context) { contextWeakReference = new WeakReference<>(context); } @Override public void handleMessage(@NonNull Message msg) { // 上下文释放 避免回调 if (contextWeakReference.get() == null) { return; } super.handleMessage(msg); Log.d(TAG, (String) msg.obj); } } \"]},\"1852\":{\"h\":\"源码路径\",\"t\":[\"framework/base/core/java/andorid/os/ - Handler.java - Looper.java - Message.java - MessageQueue.java \"]},\"1853\":{\"c\":[\"framework\"]},\"1854\":{\"c\":[\"handler\"]},\"1855\":{\"h\":\"Android系统启动\"},\"1856\":{\"h\":\"Android启动流程\",\"t\":[\"Android启动核心模块\",\"linux内核启动创建Init进程(pid=1)\",\"init进程创建zygote进程(java孵化进程)和 servicemanager\",\"zygote通过fork生成system_server进程\",\"system_server通过zygote和servcemanager创建app进程\"]},\"1857\":{\"h\":\"init进程\",\"t\":[\"int main(int argc, char** argv) { signal_handler_init(); //初始化子进程退出的信号处理过程 init_parse_config_file(\\\"/init.rc\\\"); //解析init.rc文件 //执行rc文件中触发器为 on early-init的语句 action_for_each_trigger(\\\"early-init\\\", action_add_queue_tail); //执行rc文件中触发器为 on init的语句 action_for_each_trigger(\\\"init\\\", action_add_queue_tail); //执行rc文件中触发器为 on late-init的语句 action_for_each_trigger(\\\"late-init\\\", action_add_queue_tail); while (true) { if (!waiting_for_exec) { execute_one_command(); restart_processes(); } epoll_event ev; //循环 等待事件发生 int nr = TEMP_FAILURE_RETRY(epoll_wait(epoll_fd, &ev, 1, timeout)); if (nr == -1) { ERROR(\\\"epoll_wait failed: %s\\\\n\\\", strerror(errno)); } else if (nr == 1) { ((void (*)()) ev.data.ptr)(); } } return 0; } \",\"分析和运行init.rc文件\",\"创建zygote进程和system_server进程(通过rc文件创建)\",\"处理子进程的终止(signal方式)\"]},\"1858\":{\"h\":\"init.rc配置\",\"t\":[\"//启动zygote进程 后启动system_server进程 service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server //创建socket socket zygote stream 660 root system \",\"先创建zygote进程\",\"后创建system_server进程\",\"创建名为zygote socket\",\"init.rc初始化\"]},\"1859\":{\"h\":\"zygote进程启动\",\"t\":[\"zygote启动流程\"]},\"1860\":{\"h\":\"App_main.cpp\",\"t\":[\" int main(int argc, char* const argv[]) { AppRuntime runtime(argv[0], computeArgBlockSize(argc, argv)); //设置进程名 if (!niceName.isEmpty()) { runtime.setArgv0(niceName.string()); set_process_name(niceName.string()); } if (zygote) { // 启动AppRuntime runtime.start(\\\"com.android.internal.os.ZygoteInit\\\", args, zygote); } else if (className) { runtime.start(\\\"com.android.internal.os.RuntimeInit\\\", args, zygote); } } \",\"在app_process进程启动过程，有两个分支：\",\"当zygote为true时，则执行ZygoteInit.main()\",\"当zygote为false时，则执行RuntimeInit.main()\"]},\"1861\":{\"h\":\"AndroidRuntime\",\"t\":[\"void AndroidRuntime::start(const char* className, const Vector<String8>& options, bool zygote) { // 虚拟机创建 if (startVm(&mJavaVM, &env, zygote) != 0) { return; } onVmCreated(env); // JNI方法注册 if (startReg(env) < 0) { return; } //调用com.android.internal.os.ZygoteInit#main()方法 env->CallStaticVoidMethod(startClass, startMeth, strArray); } \",\"创建虚拟机\",\"注册JNI方法\",\"反射调用ZygoteInit#main方法\"]},\"1862\":{\"h\":\"ZygoteInit\",\"t\":[\"public static void main(String argv[]) { try { registerZygoteSocket(socketName); //为Zygote注册socket preload(); // 预加载类和资源 if (startSystemServer) { //启动system_server走这个流程 startSystemServer(abiList, socketName); } runSelectLoop(abiList); //进入循环模式 } catch (MethodAndArgsCaller caller) { caller.run(); //启动system_server中会讲到。 } } \",\"为zygote注册socket\",\"预加载类和资源(为fork创建做准备)\",\"循环等待消息(等待AMS消息)\",\"startSystemServer 启动进程\",\"预加载资源为了fork做准备\"]},\"1863\":{\"h\":\"接收AMS消息进行处理\",\"t\":[\"private static void runSelectLoop(String abiList) throws MethodAndArgsCaller { while (true) { //多路复用 轮询等待消息 runOnce(); } } //ZygoteConnection.java boolean runOnce() throws ZygoteInit.MethodAndArgsCaller { //读取socket客户端发送过来的参数列表 args = readArgumentList(); try { descriptors = mSocket.getAncillaryFileDescriptors(); } catch (IOException ex) { ... return true; } try { //将binder客户端传递过来的参数，解析成Arguments对象格式 parsedArgs = new Arguments(args); //创建App进程 pid = Zygote.forkAndSpecialize(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids, parsedArgs.debugFlags, rlimits, parsedArgs.mountExternal, parsedArgs.seInfo, parsedArgs.niceName, fdsToClose, parsedArgs.instructionSet, parsedArgs.appDataDir); } if (pid == 0) { //子进程执行 //进入子进程流程 handleChildProc(parsedArgs, descriptors, childPipeFd, newStderr); } else { //父进程执行 handleParentProc(pid, descriptors, serverPipeFd, parsedArgs); } } \",\"进入消息循环\",\"通过socket读取消息，创建App进程\"]},\"1864\":{\"h\":\"system_server进程启动\"},\"1865\":{\"h\":\"前置流程\",\"t\":[\"//前置流程 app_process#main -> AndroidRuntime#start() -> ZygoteInit#main() -> ZygoteInit.startSystemServer() \",\"启动参数 --start-system-server\",\"private static boolean startSystemServer(String abiList, String socketName) throws MethodAndArgsCaller, RuntimeException { String args[] = { \\\"--setuid=1000\\\", \\\"--setgid=1000\\\", \\\"--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1032,3001,3002,3003,3006,3007\\\", \\\"--capabilities=\\\" + capabilities + \\\",\\\" + capabilities, \\\"--nice-name=system_server\\\", \\\"--runtime-args\\\", \\\"com.android.server.SystemServer\\\", }; // fork子进程system_server pid = Zygote.forkSystemServer( parsedArgs.uid, parsedArgs.gid, parsedArgs.gids, parsedArgs.debugFlags, null, parsedArgs.permittedCapabilities, parsedArgs.effectiveCapabilities); if (pid == 0) { //子进程 if (hasSecondZygote(abiList)) { waitForSecondaryZygote(socketName); } //进入system_server进程 handleSystemServerProcess(parsedArgs); } return true; } \",\"通过zygote fork创建 system_server进程\"]},\"1866\":{\"h\":\"启动system进程\",\"t\":[\"private static void handleSystemServerProcess( ZygoteConnection.Arguments parsedArgs) throws ZygoteInit.MethodAndArgsCaller { ClassLoader cl = null; if (systemServerClasspath != null) { cl = new PathClassLoader(systemServerClasspath, ClassLoader.getSystemClassLoader()); Thread.currentThread().setContextClassLoader(cl); } //RuntimeInit RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion, parsedArgs.remainingArgs, cl); } \",\"创建PathClassLoader类加载器\",\"RuntimeInit启动\",\"//RuntimeInit.zygoteInit public static final void zygoteInit(int targetSdkVersion, String[] argv, ClassLoader classLoader) throws ZygoteInit.MethodAndArgsCaller { commonInit(); // 通用的一些初始化 nativeZygoteInit(); // zygote初始化 applicationInit(targetSdkVersion, argv, classLoader); // } \",\"commonInit 通用初始化\",\"nativeZygoteInit 启动Binder线程池\",\"applicationInit 调用SystemServer.main()\",\"protected static Runnable applicationInit(int targetSdkVersion, String[] argv, ClassLoader classLoader) { //com.android.server.SystemServer invokeStaticMain(args.startClass, args.startArgs, classLoader); } public static void main(String argv[]) { try { startSystemServer(abiList, socketName); //抛出MethodAndArgsCaller异常 } catch (MethodAndArgsCaller caller) { caller.run(); //此处通过反射,会调用SystemServer.main()方法 } } \",\"采用抛出异常的方式,用于栈帧清空,提供利用率, 以至于现在大家看到的每个Java进程的调用栈如下:\",\" at com.android.server.SystemServer.main(SystemServer.java:175) at java.lang.reflect.Method.invoke!(Native method) at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:738) at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:628) \"]},\"1867\":{\"h\":\"System.main\",\"t\":[\"public final class SystemServer { public static void main(String[] args) { //先初始化SystemServer对象，再调用对象的run()方法 new SystemServer().run(); } private void run() { Looper.prepareMainLooper();// 准备主线程looper //加载android_servers.so库，该库包含的源码在frameworks/base/services/目录下 System.loadLibrary(\\\"android_servers\\\"); createSystemContext(); //初始化系统上下文 //创建系统服务管理 mSystemServiceManager = new SystemServiceManager(mSystemContext); LocalServices.addService(SystemServiceManager.class, mSystemServiceManager); //启动各种系统服务 try { startBootstrapServices(); // 启动引导服务 startCoreServices(); // 启动核心服务 startOtherServices(); // 启动其他服务 } catch (Throwable ex) { throw ex; } //一直循环执行 Looper.loop(); throw new RuntimeException(\\\"Main thread loop unexpectedly exited\\\"); } //创建activityThread private void createSystemContext() { //创建system_server进程的上下文信息 ActivityThread activityThread = ActivityThread.systemMain(); mSystemContext = activityThread.getSystemContext(); //设置主题 mSystemContext.setTheme(android.R.style.Theme_DeviceDefault_Light_DarkActionBar); } private void startOtherServices() { //phase480 和phase500 mSystemServiceManager.startBootPhase(SystemService.PHASE_LOCK_SETTINGS_READY); mSystemServiceManager.startBootPhase(SystemService.PHASE_SYSTEM_SERVICES_READY); mActivityManagerService.systemReady(new Runnable() { @Override public void run() { //phase550 mSystemServiceManager.startBootPhase( SystemService.PHASE_ACTIVITY_MANAGER_READY); //phase600 mSystemServiceManager.startBootPhase( SystemService.PHASE_THIRD_PARTY_APPS_CAN_START); //启动home startHomeActivityLocked(mCurrentUserId, \\\"systemReady\\\"); //恢复栈顶的Activity mStackSupervisor.resumeTopActivitiesLocked(); } } } } \",\"创建Looper消息循环\",\"创建serviceManager\",\"创建引导服务 ActivityManagerService, PowerManagerService, LightsService, DisplayManagerService， PackageManagerService， UserManagerService， sensor服务\",\"创建核心服务 BatteryService，UsageStatsService，WebViewUpdateService\",\"创建其他服务\"]},\"1868\":{\"h\":\"服务启动\",\"t\":[\"服务启动\",\"启动启动过程有采用过两种不同的方式来注册系统服务：\",\"ServiceManager的addService()\",\"SystemServiceManager的startService()\",\"服务列表\",\"引导服务(7个)：ActivityManagerService、PowerManagerService、LightsService、DisplayManagerService、PackageManagerService、UserManagerService、SensorService；\",\"核心服务(3个)：BatteryService、UsageStatsService、WebViewUpdateService；\",\"其他服务(70个+)：AlarmManagerService、VibratorService等。\"]},\"1869\":{\"h\":\"App启动流程\",\"t\":[\"App启动\",\"App发起进程：当从桌面启动应用，则发起进程便是Launcher所在进程；当从某App内启动远程进程，则发送进程便是该App所在进程。发起进程先通过binder发送消息给system_server进程；\",\"system_server进程：调用Process.start()方法，通过socket向zygote进程发送创建新进程的请求；\",\"zygote进程：在执行ZygoteInit.main()后便进入runSelectLoop()循环体内，当有客户端连接时便会执行ZygoteConnection.runOnce()方法，再经过层层调用后fork出新的应用进程；\",\"新进程：执行handleChildProc方法，最后调用ActivityThread.main()方法。\",\"startActivity->AMS.startProceesLocked->Procees.start->Process.startViaZygote->ZygoteInit.runOnce->fork->handleChildProc->RuntimeInit.zygoteInit->ActivityThread.main() \",\"ActivityThread启动\",\"public static void main(String[] args) { Environment.initForCurrentUser(); Process.setArgV0(\\\"<pre-initialized>\\\"); //创建主线程looper Looper.prepareMainLooper(); ActivityThread thread = new ActivityThread(); //attach到系统进程 thread.attach(false); if (sMainThreadHandler == null) { sMainThreadHandler = thread.getHandler(); } //主线程进入循环状态 Looper.loop(); throw new RuntimeException(\\\"Main thread loop unexpectedly exited\\\"); } \"]},\"1870\":{\"h\":\"源码路径\",\"t\":[\"//启动init.main入口 /system/core/init/Init.cpp //init.rc配置 /system/core/rootdir/init.rc //zygote入口 /frameworks/base/cmds/app_process/App_main.cpp //启动类 /frameworks/base/core/jni/AndroidRuntime.cpp //初始化 /frameworks/base/core/java/com/android/internal/os/ - ZygoteInit.java - RuntimeInit.java - Zygote.java /frameworks/base/core/services/java/com/android/server/ - SystemServer.java /frameworks/base/core/jni/ - com_android_internal_os_Zygote.cpp frameworks/base/services/java/com/android/server/ - SystemServer.java frameworks/base/services/core/java/com/android/server/ - SystemServiceManager.java - ServiceThread.java - am/ActivityManagerService.java frameworks/base/core/java/android/app/ - ActivityThread.java - LoadedApk.java - ContextImpl.java /frameworks/base/core/java/android/os/Process.java \"]},\"1871\":{\"c\":[\"framework\"]},\"1872\":{\"c\":[\"framework\"]},\"1873\":{\"h\":\"系统启动\"},\"1874\":{\"c\":[\"framework\"]},\"1875\":{\"h\":\"系统内存\"},\"1876\":{\"c\":[\"framework\"]},\"1877\":{\"h\":\"内存\"},\"1878\":{\"c\":[\"framework\"]},\"1879\":{\"c\":[\"framework\"]},\"1880\":{\"h\":\"监控\"},\"1881\":{\"c\":[\"framework\"]},\"1882\":{\"h\":\"监控\"},\"1883\":{\"c\":[\"framework\"]},\"1884\":{\"c\":[\"framework\"]},\"1885\":{\"h\":\"进程\"},\"1886\":{\"c\":[\"framework\"]},\"1887\":{\"h\":\"进程\"},\"1888\":{\"c\":[\"framework\"]},\"1889\":{\"c\":[\"framework\"]},\"1890\":{\"h\":\"关键服务\"},\"1891\":{\"c\":[\"framework\"]},\"1892\":{\"h\":\"关键服务\"},\"1893\":{\"c\":[\"framework\"]},\"1894\":{\"c\":[\"framework\"]},\"1895\":{\"h\":\"常用工具\"},\"1896\":{\"c\":[\"framework\"]},\"1897\":{\"h\":\"工具\"},\"1898\":{\"c\":[\"framework\"]},\"1899\":{\"c\":[\"framework\"]},\"1900\":{\"h\":\"视图原理\"},\"1901\":{\"c\":[\"framework\"]},\"1902\":{\"h\":\"windows\"},\"1903\":{\"c\":[\"framework\"]},\"1904\":{\"c\":[\"framework\"]},\"1905\":{\"h\":\"Android-一键发布到jcenter\",\"t\":[\"######前言 本打算用groovy脚本写一个插件来实现， groovy 引用classpath 其他插件时临时遇到瓶颈 先按照网络上流行方法解决\",\"#####1、使用方式\",\"1、下载脚本，并放在根目录 https://raw.githubusercontent.com/yinlingchaoliu/android-library-publish-to-jcenter/master/upload.gradle\",\"2、在gradle.properties 引入公共配置\",\"####github地址 siteUrl=https://github.com/yinlingchaoliu/robolectric-plugin gitUrl=https://github.com/yinlingchaoliu/robolectric-plugin.git //开发者信息 developerId=yinlingchaoliu developerName=tong.chen developerEmail=704514698@qq.com \",\"3、在需要打aar库下引入特定配置\",\"ext { publishedGroupId='com.chaoliu.abcdef' artifact = 'plugin' publishedVersion = \\\"0.2.2\\\" libraryDescription = 'A Robolectric Plugin for android unit' } //引入 需要打aar的module下build.gradle apply from '../upload.gradle' \",\"根目录下 build.gradle\",\"buildscript { repositories { google() jcenter() } dependencies { // 增加classpath classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2' classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5' } } \",\"在local.properties 设置对应的参数即可\",\"bintray.user=xxx bintray.apikey=xxx bintray.gpg.password=xxx \",\"1、upload.gradle经过优化的，将公共的抽取出来。 不会导致每个脚本写的很乱。\",\"2、建议artifact和moudle名字是一样的，减少很多不必要的麻烦和配置\",\"3、上传代码需要vpn支持 执行命令 gradle :module:install gradle :module:bintray\",\"#####源代码地址 https://github.com/yinlingchaoliu/android-library-publish-to-jcenter\",\"参考 https://github.com/panpf/android-library-publish-to-jcenter\",\"注册bintray https://blog.csdn.net/wzgiceman/article/details/53707042\",\"脚本问题修复 参考\\nhttps://www.cnblogs.com/dream-sky/p/5640533.html\"]},\"1906\":{\"c\":[\"git相关\"]},\"1907\":{\"c\":[\"archive\"]},\"1908\":{\"h\":\"Android-快速发布开源项目到jcenter\",\"t\":[\"找段时间彻底总结一下\",\"Android Studio 上传aar(Library)到JCenter https://blog.csdn.net/zyw_java/article/details/60336189\",\"Android 快速发布开源项目到jcenter\\nhttp://blog.csdn.net/lmj623565791/article/details/51148825\\n本文出自:【张鸿洋的博客】\"]},\"1909\":{\"c\":[\"git相关\"]},\"1910\":{\"c\":[\"archive\"]},\"1911\":{\"h\":\"Android发布Library到JitPack-更新\",\"t\":[\"对应插件库 https://github.com/dcendents/android-maven-gradle-plugin\",\"上传lib库\",\"buildscript { repositories { jcenter() } dependencies { // add github maven plugin classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1' } } \",\"配置仓库\",\"//必须是allproject allprojects { repositories { jcenter() maven { url \\\"https://jitpack.io\\\" } // add this } } \",\"引用插件\",\"apply plugin: 'com.android.library' // add these apply plugin: 'com.github.dcendents.android-maven' \",\"script build.gradle 脚本设置参数\",\"group = 'com.example' version = '1.0' \",\"artifactId 在 settings.gradle设置\",\"rootProject.name = 'artifact' \",\"根目录执行脚本 ./gradlew install\",\"发布开源库 github 打release tag\",\"https://www.jitpack.io 引入自己的 eg: yinlingchaoliu/retrofit-mock-no-op\",\"生成即可\"]},\"1912\":{\"c\":[\"git相关\"]},\"1913\":{\"c\":[\"archive\"]},\"1914\":{\"h\":\"bintray账号\",\"t\":[\"bintray.user=chentong0209\\nbintray.apikey=d4db83f4036a8c5a4823696449354b94833e7fa4\\nbintray.gpg.password=heat1314\"]},\"1915\":{\"c\":[\"git相关\"]},\"1916\":{\"c\":[\"archive\"]},\"1917\":{\"h\":\"fatal--remote-origin-already-exists-\",\"t\":[\"git remote rm origin\"]},\"1918\":{\"c\":[\"git相关\"]},\"1919\":{\"c\":[\"archive\"]},\"1920\":{\"h\":\"git-配置多个SSH-Key\",\"t\":[\"一台机器配置多个项目托管仓库,需要配置多个key\"]},\"1921\":{\"h\":\"1、生成ssh-key 以github为例\",\"t\":[\"$ ssh-keygen -t rsa -C \\\"your_email@example.com” -f ~/.ssh/github_rsa\",\"此时，.ssh目录有两个文件：github_rsa ,github_rsa.pub\"]},\"1922\":{\"h\":\"2、添加私钥\",\"t\":[\"$ ssh-add ~/.ssh/github_rsa\",\"成功提示： Identity added:~/.ssh/github_rsa (~/.ssh/github_rsa)\",\"错误提示： Could not open a connection to your authentication agent 解决方案： 1、$ ssh-agent bash 2、然后再运行ssh-add命令。\",\"辅助命令： $ ssh-add -l 查看私钥列表 $ ssh-add -D 清空私钥列表\"]},\"1923\":{\"h\":\"3、修改配置（~/.ssh/config）\",\"t\":[\"如无创建 touch config\",\"添加以下内容 #github Host github.com HostName github.com PreferredAuthentications publickey IdentityFile ~/.ssh/github_rsa\"]},\"1924\":{\"h\":\"4、为不同的项目设置单独的name和email\",\"t\":[\"git config user.name yourname\\ngit config user.email your-email@address.com\"]},\"1925\":{\"c\":[\"git相关\"]},\"1926\":{\"c\":[\"archive\"]},\"1927\":{\"h\":\"github gpg生成秘钥\",\"t\":[\"github 采用gpg生成秘钥\",\"解决方法：\"]},\"1928\":{\"h\":\"生成key\",\"t\":[\"gpg --default-new-key-algo rsa4096 --gen-key pub rsa4096 2024-05-08 [SC] [有效至：2026-05-08] 0EF91DB916621AA8A658304ABAB65E6FAFFB5278 uid xxx <xxxxx@mail.com> \"]},\"1929\":{\"h\":\"导出公钥\",\"t\":[\"# 导出公钥 gpg --armor --export 0EF91DB916621AA8A658304ABAB65E6FAFFB5278 \"]},\"1930\":{\"h\":\"仓库镜像管理(gitee->github同步)\"},\"1931\":{\"c\":[\"git相关\"]},\"1932\":{\"c\":[\"git相关\"]},\"1933\":{\"h\":\"github生成远程依赖，用jitpack\",\"t\":[\"1、github网站，点击releases https://github.com \",\"2、打tag update release \",\"3、打开官网 https://jitpack.io 点击lookup \",\"3、如下引用即可\\n\"]},\"1934\":{\"c\":[\"git相关\"]},\"1935\":{\"c\":[\"archive\"]},\"1936\":{\"h\":\"git命令中文乱码\",\"t\":[\"Git命令中文乱码通常是因为Git配置的默认编码与系统或终端的编码不一致导致的。\",\"解决方法：\"]},\"1937\":{\"h\":\"mac\",\"t\":[\"git config --global core.quotepath false git config --global gui.encoding utf-8 git config --global i18n.commit.encoding utf-8 git config --global i18n.logoutputencoding utf-8 \"]},\"1938\":{\"h\":\"windows\",\"t\":[\"git config --global core.quotepath false set LESSCHARSET=utf-8 \"]},\"1939\":{\"c\":[\"git相关\"]},\"1940\":{\"c\":[\"git相关\"]},\"1941\":{\"h\":\"git常用命令(标签，分支，私钥，异常处理，gitignore配置)\"},\"1942\":{\"h\":\"设置全局信息\",\"t\":[\"git config --global user.name \\\"chentong\\\" git config --global user.email \\\"chentong01@gmail.com\\\"\"]},\"1943\":{\"h\":\"生成私钥\",\"t\":[\"ssh-keygen -t rsa -b 4096 -C \\\"chentong01@gmail.com\\\"\",\"查看公钥 cat ~/.ssh/id_rsa.pub 拷贝公钥至剪切板（mac） clip < ~/.ssh/id_rsa.pub\"]},\"1944\":{\"h\":\"正常创建git项目流程\",\"t\":[\"mkdir appdir //创建文件夹 cd appdir git init //git项目初始化 touch README.md //新建readme文档 git add README.md //git add 文件 git commit -m \\\"first commit\\\" //本地提交 git remote add origin git@github.com:yinlingchaoliu/githubAppWeex.git // 仓库增加远程链接 git push -u origin master //推送至远程仓库\"]},\"1945\":{\"h\":\"将非git项目本地代码 提交到新的远程仓库\",\"t\":[\"cd appdir git init //git项目初始化 git add * git commit -m \\\"first comit\\\" git remote rm origin //删除旧的远程链接 git remote add origin git@github.com:yinlingchaoliu/githubAppWeex.git //增加新的远程链接 git push --set-upstream origin master //推送至远程\"]},\"1946\":{\"h\":\"克隆下载项目\",\"t\":[\"git clone git@github.com:yinlingchaoliu/githubAppWeex.git\"]},\"1947\":{\"h\":\"分支命令\",\"t\":[\"查看分支 git branch 查看分支（远程+本地） git branch --all 创建特性分支（feature_name 分支名） git checkout -b feature_name 切换分支 git checkout feature_name 合并分支 git merge feature_name 删除分支 git branch -d feature_name 推送到指定分支 git push -u origin feature_name\"]},\"1948\":{\"h\":\"查看项目状态\",\"t\":[\"git status （任何情况随时要git status）\"]},\"1949\":{\"h\":\"tag标签\",\"t\":[\"显示所有tag git tag 打标签 git tag v1.0.0 git tag v1.0.0 -m \\\"1.0.0版本\\\" 增加附注 git tag v1.0.0 9fbc3d0 补打标签 查看标签信息 git show v1.0.0 推送标签 git push origin v1.0.0 上传标签 git push origin –tags 所有标签推送上去 删除标签 git push origin --delete v1.0.0 获取指定tag代码 git checkout tag 创建分支基于指定tag git checkout -b branch tag\"]},\"1950\":{\"h\":\"远程项目管理\",\"t\":[\"查看远程项目 git remote -v 删除项目远程地址 git remote rm origin 添加远程项目 git remote add origin git@github.com:yinlingchaoliu/githubAppWeex.git\"]},\"1951\":{\"h\":\"异常处理\",\"t\":[\"git reset --hard HEAD 表示所有都撤销都以前状态 git reset --soft HEAD 撤销commit git branch --set-upstream dev origin/dev 与远程分支建立链接 git branch --set-upstream-to=origin/dev git push --set-upstream origin master //推送至远程\"]},\"1952\":{\"h\":\".gitignore 配置文件\",\"t\":[\"*.[oa] 忽略.a .o 结尾 *~ 忽略~ 结尾 # '#' 开头是注释或者当前行配置失效 # 忽略所有 .a 结尾的文件 *.a #!在模式前加上惊叹号（!）取反 # lib.a 除外 !lib.a #匹配模式最后跟反斜杠（/）说明要忽略的是目录。 # 仅仅忽略项目根目录下的 TODO 文件，不包括subdir/TODO /TODO # 忽略 build/ 目录下的所有文件 build/ # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt doc/*.txt \",\"git配置\",\"$ cd ~ $ vi .gitconfig //配置文件内容 [user] name = 陈桐 email = chentong01@hexindai.com password = hexin@123 [branch] autosetuprebase = always [core] autocrlf = input excludesfile = /Users/chentong/.gitignore_global \",\"全局.gitignore配置，每个项目都生效\",\"cd ~ vi .gitignore_global *~ .DS_Store .externalNativeBuild local.properties .gradle/ .idea/ /captures build \"]},\"1953\":{\"c\":[\"git相关\"]},\"1954\":{\"c\":[\"archive\"]},\"1955\":{\"h\":\"git撤销与回滚\",\"t\":[\"撤销某次提交日志记录保留 git revert -n commit_id\",\"回滚，没有提交记录\\ngit  reset --hard  commit_id\"]},\"1956\":{\"c\":[\"git相关\"]},\"1957\":{\"c\":[\"archive\"]},\"1958\":{\"h\":\"搭建github个人博客(git-pages)+-hexo建站+gitalk评论\",\"t\":[\"如题，让博客666起来\"]},\"1959\":{\"h\":\"1、创建github仓库\",\"t\":[\"1、创建仓库 github.io https://yinlingchaoliu.github.io\",\"2、新建仓库 hexo git@github.com:yinlingchaoliu/hexo.git\",\"建站Hexo + 中文文档 https://hexo.io/zh-cn/docs/\"]},\"1960\":{\"h\":\"2、Hexo 建站\",\"t\":[\"npm install -g hexo-cli //下载hexo插件 hexo init hexo //创建博客目录是hexo cd hexo git clone https://github.com/theme-next/hexo-theme-next themes/next //下载next主题 //采用next指定模板 v5.1.3 git checkout v5.1.3 \",\"修改根目录下_config.yml文件 repo 是 github.io 仓库\",\"theme: next //配置Deployment deploy: type: git repo: git@github.com:yinlingchaoliu/yinlingchaoliu.github.io.git branch: master \",\"新建页面\",\"hexo new \\\"page title\\\" //新建页面 \",\"在指定md文件下一通狂写 \",\"本地部署\",\"hexo clean hexo g hexo server \",\"地址：http://localhost:4000\",\"远程部署 与gitpage关联\",\"//安装插件 sudo npm install --save hexo-deployer-git //远程部署 hexo clean hexo d g //部署并发布 \",\"代码自动部署github.io仓库\",\"此时可以查看远程地址 https://yinlingchaoliu.github.io/\"]},\"1961\":{\"h\":\"3、上传hexo源码至仓库\",\"t\":[\"cd hexo git init git add * //删除 theme/next git仓库文件 rm -rf theme/next/.git git add * git commit -m \\\"first commit\\\" //添加远程依赖 git remote add origin git@github.com:yinlingchaoliu/hexo.git git push --set-upstream origin master //推送至远程 \",\"说明：我们只是操作hexo.git 仓库，部署时候，生成页面会自动同步到github.io 仓库 hexo.git 仓库内容记得也要上传\"]},\"1962\":{\"h\":\"添加gitalk评论\",\"t\":[\"https://github.com/gitalk/gitalk\",\"1、申请Github Application，如果没有 点击这里申请 Authorization callback URL 填写你主页地址 eg: https://yinlingchaoliu.github.io\"]},\"1963\":{\"h\":\"备注 Mac 按照端口杀进程\",\"t\":[\"lsof -i :port kill -9 pid\",\"$ lsof -i :4000 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME node 79748 chentong 40u IPv4 0xc0817c4a2f69df89 0t0 TCP *:terabase (LISTEN) $ kill -9 79748 \"]},\"1964\":{\"c\":[\"git相关\"]},\"1965\":{\"c\":[\"archive\"]},\"1966\":{\"h\":\"解决aar包发布到maven问题\",\"t\":[\"####总结\",\" 1、本地编译编译aar 2、创建Maven 仓库 ,并生成可用aar 类库 3、若远程依赖失效，引用增加{{transitive=true}} \",\"读音： transitive 英 [ˈtrænsətɪv] 传递 archives 英['ɑ:kaɪvz] 存档\",\"####1、aar打包发布\",\"gradle clean build //本地打包 gradle uploadArchives //上传aar库 \",\"maven-push.gradle 文件 生成aar包含源码、注释\",\"apply plugin: 'maven' task androidJavadocs(type: Javadoc) { source = android.sourceSets.main.java.srcDirs classpath += project.files(android.getBootClasspath().join(File.pathSeparator)) } task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) { classifier = 'javadoc' from androidJavadocs.destinationDir } task androidSourcesJar(type: Jar) { classifier = 'sources' from android.sourceSets.main.java.srcDirs } artifacts { //aar包增加源码 archives androidSourcesJar //aar包增加注释 archives androidJavadocsJar } uploadArchives { repositories { mavenDeployer { repository(url: \\\"http://IP_Address:PORT/nexus/content/repositories/snapshots/\\\") { authentication(userName: \\\"账号\\\", password: \\\"密码\\\") } pom.project { groupId = \\\"com.android\\\" //包名 artifactId = \\\"utils\\\" //名称 version = \\\"0.0.1-SNAPSHOT\\\" //版本 licenses { license { name 'The Apache Software License, Version 2.0' url 'http://www.apache.org/licenses/LICENSE-2.0.txt' } } } } } } \",\"本地仓库 url: \\\"file://localhost/\\\" + System.getenv(\\\"ANDROID_HOME\\\") + \\\"/extras/android/m2repository/\\\") \",\"####2、aar引用\",\"问题：解决远程依赖传递失效问题\",\"增加{transitive=true} //可选项 \",\"1、本地引用\",\"api(name: 'aarlibrary', ext: 'aar'){transitive=true} \",\"2、远程依赖\",\"allprojects { repositories { maven { url 'http://IP:PORT/nexus/content/repositories/snapshots' } //支持arr包 flatDir { dirs 'libs' } } } \",\"compile('com.android:util:0.0.1'){transitive=true} \"]},\"1967\":{\"c\":[\"git相关\"]},\"1968\":{\"c\":[\"archive\"]},\"1969\":{\"h\":\"gitee博客评论\"},\"1970\":{\"h\":\"博客评论\",\"t\":[\"https://gitee.com/zhousiwei/giteement/\",\"https://blog.csdn.net/z564359805/article/details/108360866\",\"git config --global core.quotepath false\\ngit config --global gui.encoding utf-8\\ngit config --global i18n.commit.encoding utf-8\\ngit config --global i18n.logoutputencoding utf-8\"]},\"1971\":{\"c\":[\"工具\"]},\"1972\":{\"c\":[\"fe\"]},\"1973\":{\"h\":\"node管理 n\"},\"1974\":{\"h\":\"mac node管理 n\",\"t\":[\"安装n\",\"npm install -g n \",\"查看n 模块的版本\",\"n --version \",\"展示当前安装的所有版本\",\"n list n ls n lsr 10 会列出10开头的远程版本 \",\"安装指定版本\",\"n 14.17.4 \",\"删除版本\",\" n rm 14.17.4 \",\"切换指定node版本\",\"sudo n use 14.17.4 n use xx.xx.x test.js #指定版本运行脚本 \",\"安装最新版本\",\"n latest \",\"安装稳定版本\",\"n stable \"]},\"1975\":{\"c\":[\"工具\"]},\"1976\":{\"c\":[\"fe\"]},\"1977\":{\"h\":\"飞书文档转markdown\"},\"1978\":{\"h\":\"Feishu2Md\",\"t\":[\"https://zhuanlan.zhihu.com/p/650158515\"]},\"1979\":{\"c\":[\"工具\"]},\"1980\":{\"c\":[\"fe\"]},\"1981\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"1982\":{\"h\":\"常用工具\"},\"1983\":{\"h\":\"Archives\"},\"1984\":{\"h\":\"日常问题锦集\"},\"1985\":{\"h\":\"项目管理\"},\"1986\":{\"h\":\"设计原则\"},\"1987\":{\"h\":\"软件框架设计艺术\"},\"1988\":{\"h\":\"Java并发编程艺术\"},\"1989\":{\"h\":\"Java高并发编程\"},\"1990\":{\"h\":\"手动编写jvm虚拟机\"},\"1991\":{\"h\":\"深入理解java虚拟机\"},\"1992\":{\"h\":\"重构 改善代码设计\"},\"1993\":{\"h\":\"Android相关\"},\"1994\":{\"h\":\"Android组件化\"},\"1995\":{\"h\":\"Kotlin\"},\"1996\":{\"h\":\"如何学习ndk\"},\"1997\":{\"h\":\"框架编写\"},\"1998\":{\"h\":\"React\"},\"1999\":{\"h\":\"Ts\"},\"2000\":{\"h\":\"Vue\"},\"2001\":{\"h\":\"Flutter\"},\"2002\":{\"h\":\"跨端技术\"},\"2003\":{\"h\":\"Git相关\"},\"2004\":{\"h\":\"工具\"}},\"dirtCount\":0,\"index\":[[\"飞书文档转markdown\",{\"0\":{\"1977\":1}}],[\"展示当前安装的所有版本\",{\"1\":{\"1974\":1}}],[\"博客评论\",{\"0\":{\"1970\":1}}],[\"ɑ\",{\"1\":{\"1966\":1}}],[\"ˈtrænsətɪv\",{\"1\":{\"1966\":1}}],[\"英\",{\"1\":{\"1966\":2}}],[\"搭建github个人博客\",{\"0\":{\"1958\":1}}],[\"搭建go环境\",{\"0\":{\"1048\":1}}],[\"匹配模式最后跟反斜杠\",{\"1\":{\"1952\":1}}],[\"撤销某次提交日志记录保留\",{\"1\":{\"1955\":1}}],[\"撤销commit\",{\"1\":{\"1951\":1}}],[\"撤销偏向恢复未锁定\",{\"1\":{\"1247\":1}}],[\"克隆下载项目\",{\"0\":{\"1946\":1}}],[\"仓库内容记得也要上传\",{\"1\":{\"1961\":1}}],[\"仓库\",{\"1\":{\"1960\":1,\"1961\":2,\"1966\":1}}],[\"仓库增加远程链接\",{\"1\":{\"1944\":1}}],[\"仓库镜像管理\",{\"0\":{\"1930\":1}}],[\"辅助命令\",{\"1\":{\"1922\":1}}],[\"匿名类\",{\"1\":{\"1840\":1}}],[\"匿名内部类\",{\"1\":{\"1521\":1}}],[\"典型案例\",{\"0\":{\"1839\":1}}],[\"典型的例子就是一些通用的\",{\"1\":{\"314\":1}}],[\"触摸\",{\"1\":{\"1837\":1}}],[\"触发回调方法\",{\"1\":{\"1762\":1}}],[\"触发死亡回调\",{\"1\":{\"1761\":1}}],[\"触发action事件\",{\"1\":{\"1552\":1}}],[\"销毁\",{\"0\":{\"1830\":1}}],[\"销户\",{\"1\":{\"595\":1}}],[\"响应结构体\",{\"1\":{\"1831\":1}}],[\"响应时间长的原因\",{\"1\":{\"1824\":1}}],[\"响应性\",{\"1\":{\"954\":1}}],[\"彼此之间能相互调用\",{\"1\":{\"1824\":1}}],[\"登记注册服务\",{\"1\":{\"1797\":1}}],[\"登记状态\",{\"1\":{\"1797\":1}}],[\"登录页\",{\"1\":{\"1395\":1,\"1678\":1}}],[\"登录\",{\"1\":{\"501\":1}}],[\"登录日志\",{\"1\":{\"14\":1,\"733\":1}}],[\"登录校验\",{\"1\":{\"12\":1,\"731\":1}}],[\"守护进程\",{\"1\":{\"1786\":1}}],[\"守护内联\",{\"1\":{\"1210\":1}}],[\"驱动基础方法\",{\"1\":{\"1771\":1}}],[\"驱动设备的初始化\",{\"1\":{\"1771\":1}}],[\"驱动协议分层\",{\"1\":{\"1767\":1}}],[\"驱动分层\",{\"0\":{\"1767\":1}}],[\"跟驱动交互\",{\"1\":{\"1756\":1}}],[\"跟踪\",{\"0\":{\"1159\":1}}],[\"除外\",{\"1\":{\"1952\":1}}],[\"除以上5种br\",{\"1\":{\"1755\":1}}],[\"除非\",{\"1\":{\"1847\":1}}],[\"除非读到的值是空才会加锁重读\",{\"1\":{\"894\":1}}],[\"除非自定义classloader搜索算法\",{\"1\":{\"195\":1,\"1176\":1}}],[\"故将其颜色画为灰色\",{\"1\":{\"1755\":1}}],[\"故障演练\",{\"1\":{\"305\":1}}],[\"情况较多\",{\"1\":{\"1755\":1}}],[\"绑定远程服务\",{\"1\":{\"1736\":1}}],[\"绑定方法\",{\"1\":{\"1598\":1}}],[\"申请github\",{\"1\":{\"1962\":1}}],[\"申请\",{\"1\":{\"1850\":1}}],[\"申请128k字节大小的内存空间\",{\"1\":{\"1788\":1}}],[\"申请内存函数\",{\"1\":{\"1530\":1}}],[\"申明服务端bnmyservice\",{\"1\":{\"1727\":1}}],[\"申明客户端bpmyservice\",{\"1\":{\"1727\":1}}],[\"申明myservice\",{\"1\":{\"1727\":1}}],[\"申明bnmyservice\",{\"1\":{\"1727\":1}}],[\"申明bpmyservice\",{\"1\":{\"1727\":1}}],[\"申明imyservice\",{\"1\":{\"1727\":1}}],[\"闹钟类\",{\"1\":{\"1713\":1}}],[\"垂直对齐\",{\"1\":{\"1713\":1}}],[\"身高等信息可以用首选项来存储\",{\"1\":{\"1711\":1}}],[\"菜单选择\",{\"1\":{\"1709\":1}}],[\"菜单管理\",{\"1\":{\"14\":1,\"668\":1,\"733\":1}}],[\"界面级一多\",{\"1\":{\"1709\":1}}],[\"界面更新\",{\"1\":{\"1708\":1}}],[\"界面有关的代码就不需要提供对外api\",{\"1\":{\"805\":1}}],[\"认证服务\",{\"1\":{\"1713\":1}}],[\"认证服务支持下列哪种帐号认证\",{\"1\":{\"1708\":2}}],[\"认证中心\",{\"1\":{\"12\":1,\"731\":1}}],[\"怎么追加测试用户\",{\"1\":{\"1708\":1}}],[\"端侧公共库\",{\"1\":{\"1709\":2,\"1713\":1}}],[\"端开发工程\",{\"1\":{\"1709\":2,\"1713\":1}}],[\"端云一体化中的云函数支持哪些操作\",{\"1\":{\"1709\":1}}],[\"端云一体化工程目录结构分为哪些部分\",{\"1\":{\"1709\":2}}],[\"端云一体化已经集成以下哪些服务\",{\"1\":{\"1709\":1}}],[\"端云一体化当前支持最低的鸿蒙\",{\"1\":{\"1708\":1}}],[\"端口\",{\"1\":{\"649\":1}}],[\"滑动的偏移量\",{\"1\":{\"1708\":1}}],[\"滑动窗口最大值\",{\"1\":{\"298\":2}}],[\"种类型的数组类型\",{\"1\":{\"1708\":1}}],[\"页签位于容器右侧\",{\"1\":{\"1713\":1}}],[\"页签位于容器左侧\",{\"1\":{\"1713\":1}}],[\"页签位于容器顶部\",{\"1\":{\"1713\":1}}],[\"页签位于容器底部\",{\"1\":{\"1708\":1,\"1713\":1}}],[\"页签位于页面底部\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"页面路由需要导入以下哪个模块\",{\"1\":{\"1708\":1}}],[\"页面路由栈数量均会加\",{\"1\":{\"1707\":1}}],[\"页面栈支持的最大页面数量为\",{\"1\":{\"1707\":1}}],[\"页面栈数量会加\",{\"1\":{\"1707\":1}}],[\"页面间转场\",{\"1\":{\"1702\":1}}],[\"页面间转场通过在全局\",{\"1\":{\"1702\":1}}],[\"页面跳转\",{\"1\":{\"1699\":1}}],[\"页面管理实现\",{\"0\":{\"1468\":1}}],[\"页面切换过渡效果\",{\"0\":{\"1465\":1}}],[\"页面简单切换效果\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"页面实现\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"页面没有问题\",{\"1\":{\"603\":1,\"656\":1}}],[\"播放网络视频时\",{\"1\":{\"1707\":1}}],[\"电池\",{\"1\":{\"1702\":1}}],[\"电脑核心流程\",{\"1\":{\"501\":1}}],[\"社交通信\",{\"1\":{\"1702\":1}}],[\"万条\",{\"1\":{\"1713\":1}}],[\"万能卡片\",{\"1\":{\"1702\":1}}],[\"万物互联\",{\"1\":{\"1699\":1}}],[\"控件库\",{\"1\":{\"1702\":1}}],[\"控制多个\",{\"1\":{\"1709\":1}}],[\"控制标记\",{\"1\":{\"1277\":1}}],[\"控制访问偏移量\",{\"1\":{\"1094\":1}}],[\"控制并发线程数的semaphore\",{\"0\":{\"907\":1}}],[\"控制外部访问\",{\"1\":{\"721\":1}}],[\"账号\",{\"1\":{\"1702\":1,\"1966\":1}}],[\"悬浮窗\",{\"1\":{\"1702\":1}}],[\"远程依赖\",{\"1\":{\"1966\":1}}],[\"远程部署\",{\"1\":{\"1960\":2}}],[\"远程项目管理\",{\"0\":{\"1950\":1}}],[\"远程+本地\",{\"1\":{\"1947\":1}}],[\"远程调用\",{\"1\":{\"1717\":1}}],[\"远程迁移等能力\",{\"1\":{\"1702\":2}}],[\"远程服务连接\",{\"1\":{\"1702\":2}}],[\"拉伸\",{\"1\":{\"1702\":1}}],[\"拉链法的工作原理\",{\"0\":{\"349\":1}}],[\"粘性公共事件\",{\"1\":{\"1702\":1}}],[\"视频播放时触发该事件\",{\"1\":{\"1708\":2}}],[\"视频聊天体验更佳\",{\"1\":{\"1702\":1}}],[\"视频来电时从手机迁移到智慧屏\",{\"1\":{\"1702\":1}}],[\"视图原理\",{\"0\":{\"1900\":1}}],[\"视图与逻辑分离作为第一原则\",{\"1\":{\"1540\":1}}],[\"视图绘制时调用\",{\"1\":{\"1540\":1}}],[\"视图改变时调用\",{\"1\":{\"1540\":1}}],[\"视图创建时调用\",{\"1\":{\"1540\":1}}],[\"视图层\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"视图包含业务逻辑\",{\"1\":{\"1265\":1}}],[\"样式文件中设置\",{\"1\":{\"1702\":1}}],[\"样式和颜色\",{\"1\":{\"1310\":1}}],[\"订阅请求响应头\",{\"1\":{\"1713\":1}}],[\"订阅请求头\",{\"1\":{\"1707\":1}}],[\"订阅事件的\",{\"1\":{\"1712\":1}}],[\"订阅公共事件\",{\"1\":{\"1709\":1}}],[\"订阅者再发起订阅还能收到之前发布的公共事件\",{\"1\":{\"1702\":1}}],[\"订阅者也能收到该无序公共事件\",{\"1\":{\"1702\":3}}],[\"订单列表\",{\"1\":{\"668\":1}}],[\"错\",{\"1\":{\"1707\":9}}],[\"错题记录\",{\"0\":{\"1702\":1}}],[\"错误提示\",{\"1\":{\"1922\":1}}],[\"错误事务栈\",{\"1\":{\"1755\":1}}],[\"错误信息error\",{\"1\":{\"1064\":1}}],[\"错误\",{\"1\":{\"76\":1,\"657\":1,\"1702\":25,\"1707\":3,\"1711\":9}}],[\"错误阿里已不推荐\",{\"1\":{\"73\":1}}],[\"遍\",{\"1\":{\"1701\":1}}],[\"遍历整个列表发送消息\",{\"1\":{\"1546\":1}}],[\"遍历操作比较简单\",{\"1\":{\"1512\":1}}],[\"遍历所有项目\",{\"1\":{\"1488\":1}}],[\"遍历循环后\",{\"1\":{\"1203\":1}}],[\"遍历循环\",{\"0\":{\"1203\":1}}],[\"遍历目录\",{\"1\":{\"1064\":1}}],[\"遍历又不暴露细节\",{\"1\":{\"543\":1}}],[\"遍历数组\",{\"1\":{\"285\":1}}],[\"遍历数组的元素\",{\"1\":{\"285\":1}}],[\"遍历剩余数组最小交换\",{\"1\":{\"282\":1}}],[\"遍历\",{\"1\":{\"279\":1,\"322\":1,\"1512\":1}}],[\"鸿蒙应用\",{\"1\":{\"1709\":1}}],[\"鸿蒙特征包含哪些场景化能力\",{\"1\":{\"1709\":1}}],[\"鸿蒙高级认证\",{\"0\":{\"1706\":1}}],[\"鸿蒙证书\",{\"0\":{\"1704\":1}}],[\"鸿蒙\",{\"0\":{\"1699\":1}}],[\"鸿蒙开发认证\",{\"0\":{\"1701\":1}}],[\"鸿蒙开发\",{\"0\":{\"1697\":1},\"2\":{\"1698\":1}}],[\"鸿阳\",{\"1\":{\"1564\":1}}],[\"突然有个感慨\",{\"1\":{\"1694\":1}}],[\"收尾工作\",{\"1\":{\"1762\":1}}],[\"收到应答消息\",{\"1\":{\"1756\":1}}],[\"收到该命令才退出\",{\"1\":{\"1755\":1}}],[\"收到该命令则退出\",{\"1\":{\"1755\":1}}],[\"收到hello命令的处理流程\",{\"1\":{\"1727\":1}}],[\"收到反馈\",{\"1\":{\"1694\":1}}],[\"收集所有相关主要的方法\",{\"0\":{\"1310\":1}}],[\"收集器\",{\"0\":{\"1139\":1,\"1140\":1,\"1141\":1,\"1142\":1,\"1143\":1}}],[\"收集算法\",{\"0\":{\"1129\":1}}],[\"收集阶段\",{\"1\":{\"144\":1,\"145\":2}}],[\"市面上开源的rxbus并没有完全满足三点\",{\"1\":{\"1636\":1}}],[\"市场\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"映射\",{\"1\":{\"1625\":1,\"1771\":1}}],[\"映射翻译直接翻译其他扩展条件翻译\",{\"1\":{\"12\":1,\"731\":1}}],[\"略过\",{\"1\":{\"1607\":1}}],[\"震撼butterknife核心代码不足100行\",{\"1\":{\"1598\":1}}],[\"想使用mock效果\",{\"1\":{\"1595\":1}}],[\"想要学习的朋友\",{\"1\":{\"1488\":1}}],[\"想要使用此布局\",{\"1\":{\"0\":1}}],[\"七\",{\"1\":{\"1577\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1}}],[\"七牛\",{\"1\":{\"12\":1,\"731\":1}}],[\"六\",{\"1\":{\"1577\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1}}],[\"六大原则理解关键词\",{\"1\":{\"750\":1}}],[\"六大原则的目标\",{\"1\":{\"750\":1}}],[\"六大原则是理解是透彻理解23种设计模式核心\",{\"1\":{\"750\":1}}],[\"碎片化知识可以应付项目一时之急\",{\"1\":{\"1561\":1}}],[\"翻阅aspectjx源码\",{\"1\":{\"1561\":1}}],[\"起因\",{\"1\":{\"1561\":1}}],[\"起到简化效果\",{\"1\":{\"1534\":1}}],[\"起到治未病效果\",{\"1\":{\"598\":1}}],[\"里面包括\",{\"1\":{\"1713\":1}}],[\"里面分别是你的邮箱\",{\"1\":{\"1555\":1}}],[\"里氏==是\",{\"1\":{\"750\":1}}],[\"里氏替换依赖继承\",{\"1\":{\"753\":1}}],[\"里氏替换原则\",{\"0\":{\"753\":1}}],[\"里氏替换\",{\"1\":{\"750\":1}}],[\"免费版\",{\"1\":{\"1555\":1}}],[\"真实封装\",{\"1\":{\"1552\":1}}],[\"真正运用到实践技术不多3\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"真正引擎\",{\"1\":{\"489\":1}}],[\"真正对象数据在堆里\",{\"1\":{\"271\":1,\"1087\":1}}],[\"拖拽的时候自动生成控件id\",{\"1\":{\"1552\":1}}],[\"拖动表单元素生成相应的html代码\",{\"1\":{\"14\":1,\"733\":1}}],[\"见3\",{\"1\":{\"1843\":1}}],[\"见下文小节二\",{\"1\":{\"1805\":1}}],[\"见流程14\",{\"1\":{\"1799\":1}}],[\"见流程2\",{\"1\":{\"1756\":5,\"1798\":1}}],[\"见小节4\",{\"1\":{\"1805\":3}}],[\"见小节3\",{\"1\":{\"1770\":1,\"1790\":5,\"1798\":4}}],[\"见小节2\",{\"1\":{\"1756\":8,\"1762\":3,\"1778\":4,\"1788\":3,\"1798\":1,\"1805\":1}}],[\"见2\",{\"1\":{\"1756\":1}}],[\"见上一\",{\"1\":{\"1552\":1}}],[\"见名知义\",{\"1\":{\"1280\":1}}],[\"绘制renderer渲染器\",{\"1\":{\"1540\":1}}],[\"片段着色之后\",{\"1\":{\"1540\":1}}],[\"片段着色器的主要目的就是告诉\",{\"1\":{\"1540\":1}}],[\"片段着色器\",{\"1\":{\"1540\":1}}],[\"颜色的全局变量\",{\"1\":{\"1540\":1}}],[\"颜色\",{\"1\":{\"1540\":1}}],[\"围绕形状绘制和着色展开工作\",{\"1\":{\"1540\":1}}],[\"顶点坐标\",{\"1\":{\"1540\":1}}],[\"顶点着色器\",{\"1\":{\"1540\":1}}],[\"顶层属性扩展\",{\"1\":{\"1521\":1}}],[\"渲染管线也称为渲染流水线或像素流水线或像素管线\",{\"1\":{\"1540\":1}}],[\"渲染管线及流程\",{\"1\":{\"1540\":1}}],[\"渲染器\",{\"1\":{\"1540\":1}}],[\"点大小\",{\"1\":{\"1540\":1}}],[\"点\",{\"1\":{\"1540\":1}}],[\"点击这里申请\",{\"1\":{\"1962\":1}}],[\"点击lookup\",{\"1\":{\"1933\":1}}],[\"点击releases\",{\"1\":{\"1933\":1}}],[\"点击邀请链接接收邀请\",{\"1\":{\"1708\":1}}],[\"点击ok\",{\"1\":{\"1549\":1}}],[\"点击可选\",{\"1\":{\"1445\":1}}],[\"点击白屏\",{\"1\":{\"1358\":1}}],[\"点击一下即可\",{\"1\":{\"1345\":1}}],[\"点击andresguard实战配置\",{\"1\":{\"1317\":1}}],[\"点击as集成tinypngplugin插件配置\",{\"1\":{\"1317\":1}}],[\"点击事件\",{\"1\":{\"1305\":1,\"1310\":1,\"1402\":1,\"1685\":1}}],[\"点击命令行\",{\"1\":{\"118\":1}}],[\"点击\",{\"1\":{\"109\":1}}],[\"点击获取注册码\",{\"1\":{\"25\":1}}],[\"轴的\",{\"1\":{\"1540\":2}}],[\"案例\",{\"1\":{\"1540\":1}}],[\"宏\",{\"1\":{\"1534\":1}}],[\"启用测试\",{\"1\":{\"1534\":1}}],[\"启动init\",{\"1\":{\"1870\":1}}],[\"启动启动过程有采用过两种不同的方式来注册系统服务\",{\"1\":{\"1868\":1}}],[\"启动home\",{\"1\":{\"1867\":1}}],[\"启动其他服务\",{\"1\":{\"1867\":1}}],[\"启动核心服务\",{\"1\":{\"1867\":1}}],[\"启动引导服务\",{\"1\":{\"1867\":1}}],[\"启动各种系统服务\",{\"1\":{\"1867\":1}}],[\"启动参数\",{\"1\":{\"1865\":1}}],[\"启动进程\",{\"1\":{\"1862\":1}}],[\"启动system进程\",{\"0\":{\"1866\":1}}],[\"启动system\",{\"1\":{\"1862\":2}}],[\"启动service\",{\"1\":{\"1787\":1}}],[\"启动servicemanage\",{\"0\":{\"1784\":1,\"1785\":1}}],[\"启动servermanager\",{\"1\":{\"1744\":1}}],[\"启动server\",{\"1\":{\"1728\":1}}],[\"启动appruntime\",{\"1\":{\"1860\":1}}],[\"启动zygote进程\",{\"1\":{\"1858\":1}}],[\"启动命令\",{\"0\":{\"1787\":1}}],[\"启动流程核心代码\",{\"0\":{\"1788\":1}}],[\"启动流程\",{\"0\":{\"1786\":1}}],[\"启动新binder线程\",{\"1\":{\"1778\":1}}],[\"启动binder线程池\",{\"0\":{\"1775\":1},\"1\":{\"1798\":1,\"1866\":1}}],[\"启动客户端\",{\"1\":{\"1733\":1}}],[\"启动client\",{\"1\":{\"1728\":1}}],[\"启动线程池\",{\"1\":{\"1725\":1}}],[\"启动线程之前\",{\"1\":{\"945\":1}}],[\"启动模式需要在\",{\"1\":{\"1708\":1}}],[\"启动到应用商店app详情界面\",{\"1\":{\"1326\":1}}],[\"启动类\",{\"1\":{\"1870\":1}}],[\"启动类搜索\",{\"1\":{\"1063\":1}}],[\"启动类路径\",{\"1\":{\"1061\":1}}],[\"启动类加载器\",{\"1\":{\"194\":2,\"1175\":1}}],[\"启动虚拟机\",{\"1\":{\"1044\":1}}],[\"启动jvm\",{\"0\":{\"1041\":1},\"1\":{\"1044\":2}}],[\"启动redis服务\",{\"1\":{\"707\":1}}],[\"启动nginx服务\",{\"0\":{\"678\":1}}],[\"启动nginx并设置开机自动运行\",{\"0\":{\"637\":1}}],[\"启动后报错\",{\"1\":{\"672\":1}}],[\"启动服务端\",{\"1\":{\"1733\":1}}],[\"启动服务\",{\"1\":{\"613\":1}}],[\"启动完整流程\",{\"1\":{\"501\":1}}],[\"启动\",{\"1\":{\"12\":1,\"684\":1,\"711\":1,\"731\":1,\"1702\":1}}],[\"库\",{\"1\":{\"1534\":2}}],[\"换成\",{\"1\":{\"1530\":1}}],[\"毕竟算法用c写保密性和效率比较好的\",{\"1\":{\"1530\":1}}],[\"伴随着创建binder线程池\",{\"1\":{\"1776\":1}}],[\"伴随数据移动慢\",{\"1\":{\"212\":1}}],[\"伴生对象\",{\"1\":{\"1521\":1}}],[\"智能类型转换\",{\"1\":{\"1521\":1}}],[\"温故知新\",{\"1\":{\"1521\":1}}],[\"形式存取数据\",{\"1\":{\"1713\":1}}],[\"形式存储数据\",{\"1\":{\"1707\":1}}],[\"形变\",{\"1\":{\"1518\":1}}],[\"形成环形数据结构\",{\"1\":{\"894\":1}}],[\"形成新的有序的数组\",{\"1\":{\"285\":1}}],[\"像素的正方形\",{\"1\":{\"1518\":1}}],[\"画一个\",{\"1\":{\"1518\":1}}],[\"延迟初始化\",{\"1\":{\"1527\":1}}],[\"延迟属性\",{\"1\":{\"1518\":1}}],[\"延时属性lazy\",{\"1\":{\"1518\":1}}],[\"延展这个思路\",{\"1\":{\"598\":1}}],[\"习惯用法\",{\"1\":{\"1518\":1}}],[\"升序\",{\"1\":{\"1518\":1}}],[\"升级springboot版本从2\",{\"1\":{\"672\":1}}],[\"升级sringboot2\",{\"0\":{\"671\":1,\"672\":1}}],[\"升级打怪必经之路\",{\"1\":{\"558\":1}}],[\"升级gradle\",{\"1\":{\"37\":1}}],[\"惯用语法\",{\"1\":{\"1518\":1}}],[\"惯用写法\",{\"1\":{\"422\":1}}],[\"制定kotlin开发规范\",{\"1\":{\"1512\":1}}],[\"制动\",{\"1\":{\"428\":1}}],[\"致命缺点\",{\"1\":{\"1512\":1}}],[\"章节例题\",{\"1\":{\"1509\":1}}],[\"符合人的习惯\",{\"1\":{\"1601\":1}}],[\"符合数量\",{\"1\":{\"1521\":1}}],[\"符合这个要求\",{\"1\":{\"1500\":1}}],[\"符号表\",{\"1\":{\"1200\":1}}],[\"符号表示一组符号地址和符号信息构成的表格\",{\"1\":{\"1198\":1}}],[\"符号表转换\",{\"1\":{\"1009\":1}}],[\"符号标注\",{\"1\":{\"1197\":1}}],[\"符号引用所属的类\",{\"1\":{\"1110\":1}}],[\"符号引用所在的常量池\",{\"1\":{\"1110\":1}}],[\"符号引用基类\",{\"1\":{\"1110\":1}}],[\"符号引用\",{\"1\":{\"1110\":1}}],[\"期望采用组件化方案是接入成本最小\",{\"1\":{\"1500\":1}}],[\"期望值\",{\"1\":{\"852\":1}}],[\"扁平化\",{\"1\":{\"1500\":1}}],[\"涉及语法糖重点使用\",{\"1\":{\"1512\":1}}],[\"涉及远程调用场景不多\",{\"1\":{\"1494\":1}}],[\"涉及异步编程\",{\"1\":{\"312\":1}}],[\"粒度过于细了\",{\"1\":{\"1494\":1}}],[\"细粒度的解耦\",{\"1\":{\"1494\":1}}],[\"细节不要暴露在里面\",{\"1\":{\"1527\":1}}],[\"细节往外抛\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"细节应该依赖抽象\",{\"1\":{\"753\":1}}],[\"细节可看文档\",{\"1\":{\"12\":1,\"731\":1}}],[\"专用sourceset\",{\"1\":{\"1494\":1}}],[\"专注于写widget\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"否\",{\"1\":{\"1494\":4}}],[\"否则为null\",{\"1\":{\"1840\":1}}],[\"否则往下执行\",{\"1\":{\"1770\":1}}],[\"否则只是从native层移除某个recipient\",{\"1\":{\"1761\":1}}],[\"否则函数退出\",{\"1\":{\"1530\":1}}],[\"否则不要出现在设计中\",{\"1\":{\"1446\":1}}],[\"否则不能跳转\",{\"1\":{\"668\":1}}],[\"否则打回\",{\"1\":{\"1441\":1}}],[\"否则无效果\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"否则无法路由跳转\",{\"1\":{\"657\":1}}],[\"否则\",{\"1\":{\"1248\":1}}],[\"否则失败\",{\"1\":{\"1239\":1}}],[\"否则触发fullgc\",{\"1\":{\"1146\":1}}],[\"否则分析结果不能保证\",{\"1\":{\"1135\":1}}],[\"否则在使用时会抛出ioexception\",{\"1\":{\"870\":1}}],[\"否则他们就无法理解这些概念\",{\"1\":{\"793\":1}}],[\"否则定义不清晰\",{\"1\":{\"787\":1}}],[\"否则会警告可能出现内存泄露\",{\"1\":{\"1840\":1}}],[\"否则会报空指针异常\",{\"1\":{\"381\":1}}],[\"否则会被回收\",{\"1\":{\"200\":1}}],[\"否则用启动类加载器\",{\"1\":{\"197\":1,\"1175\":1}}],[\"否则键盘弹出会报空间溢出\",{\"1\":{\"97\":1}}],[\"拷贝公钥至剪切板\",{\"1\":{\"1943\":1}}],[\"拷贝用户空间tr到内核\",{\"1\":{\"1770\":1}}],[\"拷贝数据\",{\"1\":{\"1521\":1}}],[\"拷贝\",{\"1\":{\"1491\":1}}],[\"拷贝到类中\",{\"0\":{\"1109\":1}}],[\"拷贝到webstorm的activation\",{\"1\":{\"25\":1}}],[\"供其他module使用\",{\"1\":{\"1491\":1}}],[\"供后续使用\",{\"1\":{\"381\":1}}],[\"今天终于方案研究出来了\",{\"1\":{\"1491\":1}}],[\"喜欢的朋友们记得给我的项目一个star\",{\"1\":{\"1488\":1,\"1491\":1}}],[\"干扰到用户\",{\"1\":{\"1488\":1}}],[\"难点\",{\"1\":{\"1491\":1}}],[\"难点在中间的一些语法差异\",{\"1\":{\"1488\":1}}],[\"难以触发\",{\"1\":{\"1277\":1}}],[\"难以支持原子性操作\",{\"1\":{\"312\":1}}],[\"忽略所有\",{\"1\":{\"1952\":1}}],[\"忽略~\",{\"1\":{\"1952\":1}}],[\"忽略\",{\"1\":{\"1952\":2}}],[\"忽略安全许可错误\",{\"1\":{\"1583\":1}}],[\"忽略anr\",{\"1\":{\"1583\":1}}],[\"忽略崩溃\",{\"1\":{\"1583\":1}}],[\"忽略校验角色与权限校验支持多种条件\",{\"1\":{\"12\":1,\"731\":1}}],[\"忽然有一个灵感\",{\"1\":{\"1486\":1}}],[\"化的功能\",{\"1\":{\"1491\":1}}],[\"化\",{\"0\":{\"1486\":1,\"1491\":1},\"1\":{\"1486\":2,\"1491\":2}}],[\"仿微信\",{\"0\":{\"1486\":1,\"1491\":1},\"1\":{\"1486\":2,\"1491\":2}}],[\"吼吼~~~\",{\"1\":{\"1483\":1}}],[\"评价\",{\"1\":{\"1483\":1}}],[\"评价api好坏标准\",{\"0\":{\"793\":1}}],[\"②代码之外\",{\"1\":{\"1483\":1}}],[\"隔离思想\",{\"1\":{\"1483\":1}}],[\"约束接口\",{\"1\":{\"1598\":2}}],[\"约束好代码边界\",{\"1\":{\"1486\":1}}],[\"约束代码边界\",{\"1\":{\"1483\":1}}],[\"约定优于配置\",{\"1\":{\"752\":1}}],[\"约定预计12月20日2期上线\",{\"1\":{\"595\":1}}],[\"①重塑模块化\",{\"1\":{\"1483\":1}}],[\"介绍相关博客\",{\"1\":{\"1515\":1}}],[\"介绍网页\",{\"1\":{\"1481\":1}}],[\"介绍了五种最常见的软件架构\",{\"1\":{\"310\":1}}],[\"灵活性强\",{\"1\":{\"1481\":1}}],[\"美团日志框架\",{\"1\":{\"1616\":1}}],[\"美团单元测试\",{\"1\":{\"1564\":1}}],[\"美团热修复robust源码庖丁解牛\",{\"1\":{\"1503\":1}}],[\"美团wmrouter\",{\"1\":{\"1503\":1}}],[\"美团外卖android开源路由框架美团外卖开源路由框架\",{\"1\":{\"1481\":1}}],[\"美团的博客\",{\"1\":{\"1481\":1}}],[\"美团猫眼电影android模块化实战\",{\"1\":{\"1479\":1,\"1503\":1}}],[\"借鉴采用javassit\",{\"1\":{\"1480\":1}}],[\"借用李光耀一句话\",{\"1\":{\"814\":1}}],[\"诸神黄昏\",{\"1\":{\"1476\":1}}],[\"根目录执行脚本\",{\"1\":{\"1911\":1}}],[\"根目录下\",{\"1\":{\"1905\":1}}],[\"根目录配置gradle\",{\"1\":{\"1476\":1}}],[\"根据服务名称\",{\"1\":{\"1786\":1}}],[\"根据服务名查询相应的的handle信息\",{\"1\":{\"1785\":1}}],[\"根据wait\",{\"1\":{\"1770\":1}}],[\"根据各种判定\",{\"1\":{\"1770\":1}}],[\"根据binder\",{\"1\":{\"1768\":1}}],[\"根据bc\",{\"1\":{\"1768\":1}}],[\"根据reply数据来创建componentname对象\",{\"1\":{\"1756\":1}}],[\"根据handler\",{\"1\":{\"1754\":1}}],[\"根据类路径获得类型\",{\"1\":{\"1604\":1}}],[\"根据类符号引用创建类\",{\"1\":{\"984\":3}}],[\"根据api实例\",{\"1\":{\"1592\":1}}],[\"根据顶点坐标\",{\"1\":{\"1540\":1}}],[\"根据业务需求学习技术\",{\"1\":{\"1530\":1}}],[\"根据业务代码自动生成相关的api接口文档\",{\"1\":{\"14\":1,\"733\":1}}],[\"根据二八法则\",{\"1\":{\"1317\":1}}],[\"根据虚拟机实现情况而定\",{\"1\":{\"1221\":1}}],[\"根据性能监控启动激进优化\",{\"1\":{\"1207\":1}}],[\"根据对象存活周期划分\",{\"1\":{\"1133\":1}}],[\"根据对象生存周期不同将内存进行划分\",{\"1\":{\"207\":1}}],[\"根据标志位来设置对象头信息\",{\"1\":{\"1117\":1}}],[\"根据这个来确定那个对象实例的\",{\"1\":{\"1117\":1}}],[\"根据索引返回常量项\",{\"1\":{\"1110\":1}}],[\"根据\",{\"1\":{\"1109\":3}}],[\"根据cmd\",{\"1\":{\"1070\":1}}],[\"根据参数类型创建不同搜索模式\",{\"1\":{\"1064\":1}}],[\"根据opcode创建相应的指令\",{\"1\":{\"994\":1}}],[\"根据方法符号引用\",{\"1\":{\"993\":1}}],[\"根据当前线程进行计数器\",{\"1\":{\"882\":1}}],[\"根据资源受限情况调整并发度\",{\"1\":{\"824\":1}}],[\"根据情况设置\",{\"1\":{\"604\":1}}],[\"根据工作需要\",{\"1\":{\"573\":1}}],[\"根据threadlocal对象的hash值\",{\"1\":{\"382\":1}}],[\"根据key\",{\"1\":{\"381\":1}}],[\"根据提供的线程对象\",{\"1\":{\"381\":1}}],[\"根据元素的值放入到对应的桶中\",{\"1\":{\"285\":1}}],[\"根据数组的长度\",{\"1\":{\"285\":1}}],[\"根据程序运行时代理类是否存在\",{\"1\":{\"258\":1}}],[\"根据端口查进程\",{\"1\":{\"58\":1}}],[\"根据端口杀进程\",{\"0\":{\"58\":1,\"714\":1,\"715\":1}}],[\"易懂无歧义\",{\"1\":{\"1518\":1}}],[\"易用性反而降低\",{\"1\":{\"1476\":1}}],[\"易用性\",{\"1\":{\"1476\":2}}],[\"易于读\",{\"1\":{\"1518\":1}}],[\"易于理解\",{\"1\":{\"1518\":1}}],[\"易于测试\",{\"1\":{\"314\":1}}],[\"易于应对变化\",{\"1\":{\"262\":1}}],[\"蒲公英平台上传apk脚本\",{\"0\":{\"1459\":1}}],[\"渐变效果\",{\"1\":{\"1445\":1}}],[\"间距分整体和局部两种关系\",{\"1\":{\"1445\":1}}],[\"间距标注\",{\"1\":{\"1445\":1}}],[\"间隔时间600ms\",{\"1\":{\"1374\":1}}],[\"侧边距在app中\",{\"1\":{\"1444\":1}}],[\"侧重于接口转换\",{\"1\":{\"264\":1}}],[\"色值\",{\"1\":{\"1444\":1}}],[\"至少满足80\",{\"1\":{\"1443\":1}}],[\"验收通过后\",{\"1\":{\"1441\":1}}],[\"验收流程\",{\"0\":{\"1441\":1}}],[\"验收要求\",{\"0\":{\"1440\":1}}],[\"验证opengl程序\",{\"1\":{\"1540\":2}}],[\"验证文件格式\",{\"1\":{\"1171\":1}}],[\"验证\",{\"0\":{\"1171\":1},\"1\":{\"979\":1,\"1169\":1}}],[\"验证安装成功\",{\"0\":{\"680\":1}}],[\"须先向servicemanager中获取相应的service\",{\"1\":{\"1744\":1}}],[\"须在开发起始前一个工作日\",{\"1\":{\"1441\":1}}],[\"须ui产品确认最终样式\",{\"1\":{\"1435\":1}}],[\"须增加超时设计\",{\"1\":{\"949\":1}}],[\"屏幕中心\",{\"1\":{\"1540\":1}}],[\"屏幕的底边会对应\",{\"1\":{\"1540\":1}}],[\"屏幕的右边对应\",{\"1\":{\"1540\":1}}],[\"屏幕的左边对应\",{\"1\":{\"1540\":1}}],[\"屏幕\",{\"1\":{\"1435\":1}}],[\"屏障才会\",{\"1\":{\"905\":1}}],[\"闪屏业界标准\",{\"1\":{\"1435\":1}}],[\"闪屏页图片要求\",{\"1\":{\"1435\":1}}],[\"闪屏页\",{\"1\":{\"1395\":1,\"1678\":1}}],[\"闪屏页主题\",{\"1\":{\"1320\":1}}],[\"补打标签\",{\"1\":{\"1949\":1}}],[\"补充\",{\"1\":{\"1432\":1,\"1518\":1}}],[\"补位效果\",{\"1\":{\"1117\":1}}],[\"辨析android\",{\"1\":{\"1429\":1}}],[\"现写类\",{\"1\":{\"1601\":1}}],[\"现写约束接口\",{\"1\":{\"1598\":1}}],[\"现阶段显卡分为顶点渲染和像素渲染\",{\"1\":{\"1540\":1}}],[\"现阶段实战解决处理方案\",{\"1\":{\"1512\":1}}],[\"现有开发流程瓶颈\",{\"1\":{\"1423\":1}}],[\"现有开发流程\",{\"1\":{\"1423\":1}}],[\"现在开发一个页面范例\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"现在直接黏贴注册码已经不能直接成功了\",{\"1\":{\"25\":1}}],[\"帮助类\",{\"0\":{\"1417\":1}}],[\"帮助你快速开发\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"教程\",{\"1\":{\"1413\":1}}],[\"淡入淡出\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"路径配置信息\",{\"1\":{\"1707\":1}}],[\"路径剪裁\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"路由解决方案\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"路由跳转\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"路由正常\",{\"1\":{\"657\":1}}],[\"路由要全路径\",{\"1\":{\"657\":1}}],[\"路由失效\",{\"1\":{\"656\":2}}],[\"矩形视为两个三角形拼成\",{\"1\":{\"1540\":1}}],[\"矩形剪裁\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"矩阵转换\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"矩阵中路径\",{\"1\":{\"298\":1}}],[\"旋转盒子\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"旋转数组的最小数字\",{\"1\":{\"298\":1}}],[\"缩放\",{\"1\":{\"1702\":1}}],[\"缩放布局\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"缩写\",{\"1\":{\"314\":1,\"1518\":1}}],[\"百分比布局\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"百度\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"布尔型以及这\",{\"1\":{\"1708\":1}}],[\"布尔类型\",{\"1\":{\"271\":1,\"1087\":1}}],[\"布局容器\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"居中\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"透明度\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"透明主题\",{\"1\":{\"1320\":1}}],[\"闲鱼开源\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"星期八的文章\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"站在组件化项目角度\",{\"1\":{\"1472\":1}}],[\"站在使用者角度\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"站在我需要什么\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"太多widget内私有方法\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"阮一峰\",{\"1\":{\"1386\":1,\"1669\":1}}],[\"均是f开头\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"均为高危\",{\"1\":{\"598\":1}}],[\"导出公钥\",{\"0\":{\"1929\":1},\"1\":{\"1929\":1}}],[\"导入插件armmvphelper\",{\"1\":{\"1549\":1}}],[\"导入livesettings\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"导航栏\",{\"1\":{\"1444\":1}}],[\"导航\",{\"1\":{\"1398\":1,\"1486\":1,\"1491\":1,\"1549\":1,\"1552\":1,\"1555\":1,\"1577\":1,\"1586\":1,\"1592\":1,\"1595\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1,\"1681\":1}}],[\"导致cpu\",{\"1\":{\"894\":1}}],[\"导致instance未正确初始化\",{\"1\":{\"864\":1}}],[\"导致不能实事求是解决当前所面临处境\",{\"1\":{\"230\":1}}],[\"导致full\",{\"1\":{\"207\":1}}],[\"极简交互\",{\"1\":{\"1702\":1}}],[\"极简连接\",{\"1\":{\"1702\":1}}],[\"极光推送唯一标识\",{\"1\":{\"1377\":1}}],[\"极端的意见有害无益\",{\"0\":{\"769\":1}}],[\"信件内容\",{\"1\":{\"1831\":1}}],[\"信封\",{\"1\":{\"1831\":1}}],[\"信封结构体\",{\"1\":{\"1831\":1}}],[\"信息bean\",{\"1\":{\"1831\":1}}],[\"信息\",{\"1\":{\"1702\":1,\"1711\":1}}],[\"信息存储\",{\"1\":{\"1377\":1}}],[\"信号量\",{\"1\":{\"907\":1}}],[\"识别访问app\",{\"1\":{\"1377\":1}}],[\"哪些类不需要混淆\",{\"1\":{\"1361\":1}}],[\"弹框补充对应信息\",{\"1\":{\"1552\":1}}],[\"弹框补充信息\",{\"1\":{\"1552\":1}}],[\"弹框和文案根据实际情况定制\",{\"1\":{\"1358\":1}}],[\"弹出alert框\",{\"1\":{\"1549\":1}}],[\"弹出所有局部引用\",{\"1\":{\"1530\":1}}],[\"弹出\",{\"1\":{\"993\":1}}],[\"拦截注解方法\",{\"1\":{\"1632\":1}}],[\"拦截特定支付标识\",{\"1\":{\"1358\":1}}],[\"拦截器\",{\"1\":{\"12\":1,\"731\":1}}],[\"沉侵式与listview冲突\",{\"0\":{\"1355\":1,\"1663\":1}}],[\"别人只需要看源码和注释就可以上手了\",{\"1\":{\"1543\":1}}],[\"别废话\",{\"1\":{\"1349\":1}}],[\"别去碰程序的那个部分\",{\"1\":{\"763\":1}}],[\"宽高比设置\",{\"1\":{\"1346\":1}}],[\"感谢\",{\"0\":{\"1629\":1}}],[\"感谢月亮的后羿提出的问题\",{\"1\":{\"1613\":1}}],[\"感谢两位大佬分享\",{\"1\":{\"572\":1}}],[\"感慨\",{\"1\":{\"1561\":1}}],[\"感受布局的基本语法\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"感受一下\",{\"1\":{\"1346\":1}}],[\"推送标签\",{\"1\":{\"1949\":1}}],[\"推送到指定分支\",{\"1\":{\"1947\":1}}],[\"推送至远程\",{\"1\":{\"1945\":1,\"1951\":1,\"1961\":1}}],[\"推送至远程仓库\",{\"1\":{\"1944\":1}}],[\"推荐设置\",{\"1\":{\"1712\":1}}],[\"推荐定义一个宏\",{\"1\":{\"1534\":1}}],[\"推荐第2\",{\"1\":{\"1518\":1}}],[\"推荐实体类要有默认参数\",{\"1\":{\"1518\":1}}],[\"推荐用法\",{\"1\":{\"1518\":2}}],[\"推荐这种写法\",{\"1\":{\"1518\":2}}],[\"推荐开源项目\",{\"1\":{\"1413\":1}}],[\"推荐inference\",{\"1\":{\"1345\":1}}],[\"推理二叉树\",{\"1\":{\"298\":1}}],[\"针对包含文本元素的组件\",{\"1\":{\"1709\":1}}],[\"针对于debugrelease\",{\"1\":{\"1595\":1}}],[\"针对retrofit有很多封装\",{\"1\":{\"1595\":1}}],[\"针对retrofit\",{\"1\":{\"1592\":2}}],[\"针对整个布局\",{\"1\":{\"1345\":1}}],[\"针对单个控件\",{\"1\":{\"1345\":1}}],[\"针对该参数的每一个可能值\",{\"1\":{\"1274\":1}}],[\"尺寸规定严格\",{\"1\":{\"1435\":2}}],[\"尺寸\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"截图要求\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"圆角矩形剪裁\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"圆角32px\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"圆形剪裁\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"圆圈中最后剩下的数\",{\"1\":{\"298\":1}}],[\"华为帐号\",{\"1\":{\"1708\":2}}],[\"华为应用市场\",{\"1\":{\"1708\":1,\"1712\":1}}],[\"华为\",{\"1\":{\"1338\":2,\"1377\":1,\"1435\":2}}],[\"华为p30\",{\"1\":{\"1298\":1}}],[\"格式\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"体积\",{\"1\":{\"1338\":2,\"1435\":2}}],[\"名字\",{\"1\":{\"1335\":1}}],[\"名称\",{\"1\":{\"738\":2,\"1966\":1}}],[\"切换指定node版本\",{\"1\":{\"1974\":1}}],[\"切换分支\",{\"1\":{\"1947\":1}}],[\"切点是\",{\"1\":{\"1589\":1}}],[\"切图建议和蓝湖或者sketch放在一起提供\",{\"1\":{\"1443\":1}}],[\"切图要求\",{\"0\":{\"1443\":1}}],[\"切图\",{\"1\":{\"1441\":1}}],[\"切记\",{\"1\":{\"1326\":1}}],[\"切入点\",{\"1\":{\"1253\":1}}],[\"✈\",{\"1\":{\"1323\":2,\"1335\":2,\"1459\":2}}],[\"融360\",{\"1\":{\"1320\":1}}],[\"冷启动app\",{\"1\":{\"1320\":1}}],[\"压缩图片\",{\"1\":{\"1317\":1}}],[\"压栈出栈做计算\",{\"1\":{\"1095\":1}}],[\"压栈\",{\"1\":{\"1015\":1}}],[\"立下承担50\",{\"1\":{\"1491\":1}}],[\"立即安装\",{\"1\":{\"1358\":1}}],[\"立减6m\",{\"0\":{\"1317\":1}}],[\"立足于实用\",{\"1\":{\"814\":1}}],[\"拼接\",{\"1\":{\"1313\":1}}],[\"斜体等\",{\"1\":{\"1310\":1}}],[\"粗体\",{\"1\":{\"1310\":1}}],[\"绝对大小\",{\"1\":{\"1310\":1}}],[\"绝对线程安全\",{\"0\":{\"1233\":1}}],[\"光栅化\",{\"1\":{\"1540\":1}}],[\"光栅化图元\",{\"1\":{\"1540\":1}}],[\"光栅效果\",{\"1\":{\"1310\":1}}],[\"光驱设备\",{\"1\":{\"483\":1}}],[\"浮动按钮\",{\"1\":{\"1346\":1}}],[\"浮雕\",{\"1\":{\"1310\":1}}],[\"浮点数\",{\"1\":{\"1110\":1}}],[\"张鸿洋的博客\",{\"1\":{\"1908\":1}}],[\"张\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"张三丰也会下山\",{\"1\":{\"1305\":1,\"1307\":1}}],[\"张总\",{\"1\":{\"531\":1}}],[\"国内第三方\",{\"1\":{\"1292\":1}}],[\"国际化支持和信息国际化\",{\"1\":{\"793\":1}}],[\"国际化\",{\"1\":{\"12\":1,\"731\":1}}],[\"希望将他们替换成同一个对象\",{\"1\":{\"1283\":1}}],[\"希尔排序\",{\"0\":{\"281\":1}}],[\"去除顶部通知栏\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"去除无用资源\",{\"1\":{\"1317\":1}}],[\"去除不必要间接层\",{\"1\":{\"1280\":2}}],[\"去掉handler的引用\",{\"1\":{\"1846\":1}}],[\"去掉不必要关联\",{\"1\":{\"1283\":1}}],[\"去掉冒号\",{\"1\":{\"106\":1}}],[\"某\",{\"1\":{\"1702\":1}}],[\"某app\",{\"1\":{\"1377\":1}}],[\"某一段代码需要对程序状态做出某种假设\",{\"1\":{\"1277\":1}}],[\"某些参数总是很自然地同时出现\",{\"1\":{\"1274\":1}}],[\"某个进程的主线程执行如下方法\",{\"1\":{\"1779\":1}}],[\"某个变量带有\",{\"1\":{\"1277\":1}}],[\"某个函数返回一个特定的代码\",{\"1\":{\"1274\":1}}],[\"某个函数既返回对象状态值\",{\"1\":{\"1274\":1}}],[\"某个函数需要从调用端得到更多信息\",{\"1\":{\"1274\":1}}],[\"某个继承体系同时承担两项责任\",{\"1\":{\"1265\":1}}],[\"某个类做个多过简单委托动作\",{\"1\":{\"1259\":1}}],[\"某个类做了应该由两个类做的事\",{\"1\":{\"1259\":1}}],[\"某个类没做太多事\",{\"1\":{\"1259\":1}}],[\"某个线程一直在top\",{\"1\":{\"833\":1}}],[\"某个线程cpu利用率一直100\",{\"1\":{\"833\":1}}],[\"规则\",{\"1\":{\"1274\":1}}],[\"规范通用库维护流程\",{\"1\":{\"305\":1}}],[\"列个修改清单\",{\"1\":{\"1271\":1}}],[\"列一个核心清单原则\",{\"1\":{\"814\":1}}],[\"掌控\",{\"1\":{\"1271\":1}}],[\"物有本末\",{\"1\":{\"1271\":1}}],[\"虑而后能得\",{\"1\":{\"1271\":1}}],[\"静而后能安\",{\"1\":{\"1271\":1}}],[\"静态库\",{\"1\":{\"1534\":1}}],[\"静态代码块中进行缓存\",{\"1\":{\"1527\":1}}],[\"静态代理\",{\"1\":{\"259\":2,\"447\":2}}],[\"静态成员\",{\"1\":{\"1521\":1}}],[\"静态分配\",{\"1\":{\"1210\":1}}],[\"静态分派\",{\"1\":{\"1188\":1}}],[\"静态分析\",{\"1\":{\"305\":1}}],[\"静态变量max\",{\"1\":{\"1850\":1}}],[\"静态变量spool的数据类型为message\",{\"1\":{\"1850\":1}}],[\"静态变量\",{\"1\":{\"1115\":1}}],[\"静态绑定\",{\"1\":{\"991\":1}}],[\"静态方法\",{\"1\":{\"991\":2,\"993\":1}}],[\"静态方法和实例方法\",{\"1\":{\"991\":1}}],[\"静态内部类\",{\"1\":{\"405\":1,\"876\":1,\"1851\":2}}],[\"静态使用功能齐全\",{\"1\":{\"12\":1,\"731\":1}}],[\"知道服务注册完成便可以正常使用\",{\"1\":{\"1796\":1}}],[\"知所先后\",{\"1\":{\"1271\":1}}],[\"知止而后有定\",{\"1\":{\"1271\":1}}],[\"知止\",{\"0\":{\"1271\":1}}],[\"知识扩展\",{\"0\":{\"977\":1,\"991\":1,\"1008\":1,\"1061\":1,\"1075\":1,\"1086\":1,\"1093\":1,\"1108\":1},\"1\":{\"271\":1}}],[\"知识点要完整且准确\",{\"1\":{\"228\":1}}],[\"知识点需要完整串联在一起\",{\"1\":{\"228\":1}}],[\"知识点死角进行补遗\",{\"1\":{\"227\":1}}],[\"知识进阶导图\",{\"0\":{\"229\":1}}],[\"知识进阶反思\",{\"0\":{\"226\":1}}],[\"知识进阶\",{\"1\":{\"228\":1,\"229\":1},\"2\":{\"130\":1,\"133\":1,\"136\":1,\"139\":1,\"142\":1,\"146\":1,\"149\":1,\"152\":1,\"155\":1,\"161\":1,\"164\":1,\"170\":1,\"173\":1,\"176\":1,\"179\":1,\"182\":1,\"185\":1,\"188\":1,\"191\":1,\"198\":1,\"201\":1,\"209\":1,\"218\":1,\"221\":1,\"224\":1,\"231\":1,\"234\":1,\"238\":1,\"241\":1,\"244\":1,\"250\":1,\"253\":1,\"266\":1,\"269\":1,\"272\":1}}],[\"研究注重长期科研价值\",{\"1\":{\"1268\":1}}],[\"研究与实践两种思维方式差异\",{\"1\":{\"1268\":1}}],[\"研究对应源码\",{\"1\":{\"573\":1}}],[\"既要有短期利益\",{\"1\":{\"1268\":1}}],[\"既不多\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"影响项目重构现实因素及解决方案\",{\"0\":{\"1268\":1},\"1\":{\"1286\":1}}],[\"梳理并分解继承体系\",{\"1\":{\"1265\":1}}],[\"塑造模板函数\",{\"1\":{\"1262\":1}}],[\"折叠继承体系\",{\"1\":{\"1262\":1}}],[\"客户端进程\",{\"1\":{\"1761\":1}}],[\"客户端能立即返回\",{\"1\":{\"1751\":1}}],[\"客户端利用binder跟服务端通信是阻塞式的\",{\"1\":{\"1751\":1}}],[\"客户端\",{\"1\":{\"1727\":1}}],[\"客户端程序\",{\"1\":{\"1724\":1}}],[\"客户端调用\",{\"0\":{\"1726\":1,\"1731\":1,\"1736\":1},\"1\":{\"415\":1,\"428\":1,\"1731\":1}}],[\"客户通过一个委托类来调用另一个对象\",{\"1\":{\"1259\":1}}],[\"搬移字段\",{\"1\":{\"1259\":1}}],[\"搬移\",{\"1\":{\"1259\":1}}],[\"搬移函数\",{\"1\":{\"1259\":1}}],[\"委托函数太多\",{\"1\":{\"1262\":1}}],[\"委托关系\",{\"1\":{\"1259\":1}}],[\"委托\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"委托人\",{\"1\":{\"938\":1}}],[\"平行视界\",{\"1\":{\"1702\":1}}],[\"平行继承\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"平台来源\",{\"1\":{\"1377\":1}}],[\"平台标识\",{\"1\":{\"1377\":1}}],[\"平台实现有关\",{\"1\":{\"1224\":1}}],[\"平台简介\",{\"0\":{\"9\":1,\"728\":1}}],[\"夜晚你就应该睡觉\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"得道标志是\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"得到泛型中得到t\",{\"1\":{\"447\":1}}],[\"得到一个线程安全的\",{\"1\":{\"340\":1}}],[\"得到的结果是不确定的\",{\"1\":{\"322\":1}}],[\"何时等待\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"何时前进\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"何时停止\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"何时停止是重构的压轴\",{\"1\":{\"1253\":1}}],[\"何时开始\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"何时不该使用它们\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"答案很简单\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"摘自\",{\"1\":{\"1253\":1}}],[\"命名为annotationprocessor\",{\"1\":{\"1607\":1}}],[\"命名为poet\",{\"1\":{\"1604\":1}}],[\"命名规范\",{\"1\":{\"1280\":1}}],[\"命名\",{\"1\":{\"1253\":1}}],[\"命令行功能\",{\"1\":{\"1070\":1}}],[\"命令行\",{\"1\":{\"1044\":1}}],[\"命令行执行命令\",{\"1\":{\"106\":1}}],[\"命令\",{\"1\":{\"489\":1,\"1289\":2,\"1292\":1,\"1534\":1}}],[\"命令模式\",{\"0\":{\"487\":1},\"1\":{\"256\":1,\"257\":1,\"395\":1,\"488\":1,\"489\":1}}],[\"弊端\",{\"1\":{\"1253\":1}}],[\"坏味道\",{\"1\":{\"1253\":1,\"1265\":4,\"1286\":1}}],[\"膨胀成重量锁\",{\"1\":{\"1248\":1}}],[\"膨胀\",{\"1\":{\"1248\":1}}],[\"频繁对一个对象中片段内容加锁\",{\"1\":{\"1244\":1}}],[\"忙循环\",{\"1\":{\"1242\":1}}],[\"乐观锁\",{\"1\":{\"1239\":1}}],[\"乐观锁插件等等\",{\"1\":{\"12\":1,\"731\":1}}],[\"没把握就停下来\",{\"1\":{\"1271\":1}}],[\"没获得阻塞\",{\"1\":{\"1238\":1}}],[\"没有提交记录\",{\"1\":{\"1955\":1}}],[\"没有idle\",{\"1\":{\"1846\":1}}],[\"没有消息\",{\"1\":{\"1843\":1,\"1846\":1}}],[\"没有请求创建线程\",{\"1\":{\"1776\":1}}],[\"没有像rn一样\",{\"1\":{\"1689\":1}}],[\"没有任何改变\",{\"1\":{\"1632\":1}}],[\"没有显著的点\",{\"1\":{\"1587\":1}}],[\"没有add方法\",{\"1\":{\"1518\":1}}],[\"没有setter方法\",{\"1\":{\"1518\":1}}],[\"没有发生this引用逃逸问题\",{\"1\":{\"1232\":1}}],[\"没有计数衰减\",{\"1\":{\"1209\":1}}],[\"没有操作数的指令\",{\"1\":{\"1094\":1}}],[\"没有内存溢出\",{\"1\":{\"863\":1}}],[\"没有共同的术语\",{\"1\":{\"787\":1}}],[\"没有严格的推理和分析\",{\"1\":{\"757\":1}}],[\"没有严格守卫住的\",{\"1\":{\"598\":1}}],[\"没有公司就不存在部门\",{\"1\":{\"735\":1}}],[\"没有上级汇报对象\",{\"1\":{\"537\":1}}],[\"没有手动调用\",{\"1\":{\"385\":1}}],[\"没有被外部强引用的情况下\",{\"1\":{\"385\":1}}],[\"没有重复元素集合的全排列\",{\"1\":{\"298\":1}}],[\"没有newinstance\",{\"1\":{\"259\":1}}],[\"没有真正实体类\",{\"1\":{\"259\":1}}],[\"没有初始化大小\",{\"1\":{\"215\":1}}],[\"没有覆盖finalize方法或该方法已经执行过\",{\"1\":{\"200\":1}}],[\"没有gcroots引用链\",{\"1\":{\"200\":1}}],[\"没有配置多渠道信息\",{\"1\":{\"103\":1}}],[\"没有对病根进行处理\",{\"1\":{\"76\":1}}],[\"限定最大宽高布局\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"限制最多能输入9位整数\",{\"1\":{\"1349\":1}}],[\"限制创建线程数不能超过最大限度\",{\"1\":{\"950\":1}}],[\"限期等待\",{\"1\":{\"1230\":1}}],[\"抢占式线程调度\",{\"1\":{\"1229\":1}}],[\"抢占式中断\",{\"1\":{\"1136\":1}}],[\"禁止指令重新排序\",{\"1\":{\"1222\":1}}],[\"禁止指令重排序\",{\"1\":{\"1222\":1}}],[\"禁止指令重排\",{\"1\":{\"840\":1}}],[\"载入\",{\"1\":{\"1220\":1}}],[\"载入操作系统\",{\"1\":{\"501\":1}}],[\"硬件名\",{\"1\":{\"1298\":1}}],[\"硬件制造商\",{\"1\":{\"1298\":1}}],[\"硬件序列号\",{\"1\":{\"1298\":1}}],[\"硬件效率与一致性\",{\"0\":{\"1218\":1}}],[\"硬件资源\",{\"1\":{\"824\":1}}],[\"逃逸对象可以通过内联方式处理\",{\"1\":{\"1212\":1}}],[\"逃逸分析\",{\"0\":{\"1212\":1}}],[\"叫自旋锁\",{\"1\":{\"1242\":1}}],[\"叫线程逃逸\",{\"1\":{\"1212\":1}}],[\"叫方法逃逸\",{\"1\":{\"1212\":1}}],[\"激进优化\",{\"1\":{\"1210\":1}}],[\"半衰周期\",{\"1\":{\"1209\":1}}],[\"精度\",{\"1\":{\"1540\":2}}],[\"精简的butterknife框架\",{\"1\":{\"1598\":1}}],[\"精简省略不必要代码\",{\"1\":{\"1592\":1}}],[\"精简\",{\"1\":{\"1521\":1}}],[\"精选一些含义清晰\",{\"1\":{\"1512\":1}}],[\"精熟\",{\"1\":{\"1271\":1}}],[\"精确\",{\"1\":{\"1209\":1}}],[\"精灵进程\",{\"1\":{\"942\":1}}],[\"称之为\",{\"1\":{\"1248\":1}}],[\"称之为双亲委派模型\",{\"1\":{\"1175\":1}}],[\"称为栈上替换\",{\"1\":{\"1208\":1}}],[\"晚期\",{\"0\":{\"1206\":1}}],[\"拆解需求\",{\"1\":{\"1512\":1}}],[\"拆出通用性写法\",{\"1\":{\"1509\":1}}],[\"拆箱计算a+b时\",{\"1\":{\"1203\":1}}],[\"拆箱问题\",{\"1\":{\"1203\":1}}],[\"拆箱\",{\"1\":{\"1203\":1}}],[\"拆分\",{\"1\":{\"644\":1}}],[\"填充布局\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"填充符号表\",{\"1\":{\"1198\":1}}],[\"填写你主页地址\",{\"1\":{\"1962\":1}}],[\"填写对应域名\",{\"1\":{\"638\":1}}],[\"填写应用签名\",{\"1\":{\"106\":1}}],[\"词法\",{\"1\":{\"1198\":1}}],[\"词法分析是将源代码的字符流转变为标记\",{\"1\":{\"1198\":1}}],[\"词法分析和语法分析\",{\"1\":{\"1197\":1}}],[\"词法分析\",{\"1\":{\"525\":1}}],[\"早期\",{\"0\":{\"1197\":1}}],[\"尤其指分配的大对象\",{\"1\":{\"1182\":1}}],[\"尤其在线程池场景下\",{\"1\":{\"385\":1}}],[\"子进程\",{\"1\":{\"1865\":1}}],[\"子进程执行\",{\"1\":{\"1863\":1}}],[\"子组件将公用接口下沉到基础库\",{\"1\":{\"1491\":1}}],[\"子组件代码配置\",{\"1\":{\"1476\":1}}],[\"子组件配置\",{\"1\":{\"1476\":1}}],[\"子加载器才会尝试自己加载\",{\"1\":{\"1175\":1}}],[\"子类可见\",{\"1\":{\"1521\":1}}],[\"子类不覆盖基类open成员\",{\"1\":{\"1518\":1}}],[\"子类不能覆盖此方法\",{\"1\":{\"501\":1}}],[\"子类集成\",{\"1\":{\"1283\":1}}],[\"子类只使用超类接口中的一部分\",{\"1\":{\"1262\":1}}],[\"子类灵活性降低\",{\"1\":{\"753\":1}}],[\"子类继承基础上\",{\"1\":{\"753\":1}}],[\"子类继承父类的特征和行为\",{\"1\":{\"158\":1}}],[\"子类无影响替换父类\",{\"1\":{\"753\":1}}],[\"子类才尝试加载\",{\"1\":{\"194\":1}}],[\"子类构造方法调用\",{\"1\":{\"145\":1}}],[\"子类成员变量按顺序初始化\",{\"1\":{\"145\":1}}],[\"元服务发布的国家与地区仅限于\",{\"1\":{\"1711\":1}}],[\"元服务上架过程上传软件包常见的问题有哪些\",{\"1\":{\"1709\":1}}],[\"元服务包名必须以哪个字段结尾\",{\"1\":{\"1708\":1}}],[\"元服务包由一个或多个\",{\"1\":{\"1708\":1}}],[\"元服务创建测试用户时\",{\"1\":{\"1708\":1}}],[\"元组\",{\"1\":{\"1521\":1}}],[\"元数据验证\",{\"1\":{\"1171\":1}}],[\"元素个数没有限制的安全队列\",{\"1\":{\"958\":1}}],[\"局部引用最好用pushlocalframe\",{\"1\":{\"1530\":1}}],[\"局部引用函数\",{\"1\":{\"1530\":1}}],[\"局部引用被释放\",{\"1\":{\"1530\":1}}],[\"局部引用不能用static缓存\",{\"1\":{\"1530\":1}}],[\"局部引用会阻止\",{\"1\":{\"1530\":1}}],[\"局部引用\",{\"1\":{\"1527\":1,\"1530\":1}}],[\"局部返回到该\",{\"1\":{\"1518\":1}}],[\"局部是指一个控件在局部内容中相对位置\",{\"1\":{\"1445\":1}}],[\"局部是复制算法\",{\"1\":{\"1145\":1}}],[\"局部变量在栈上分配\",{\"1\":{\"1213\":1}}],[\"局部变量使用前是否赋值\",{\"1\":{\"1200\":1}}],[\"局部变量表中slot是可以重用的\",{\"1\":{\"1182\":1}}],[\"局部变量表式一组变量值存储空间\",{\"1\":{\"1182\":1}}],[\"局部变量表\",{\"0\":{\"1182\":1}}],[\"局部变量的属性\",{\"1\":{\"942\":1}}],[\"局部变量\",{\"1\":{\"735\":1,\"1115\":1}}],[\"走到安全点挂起\",{\"1\":{\"1137\":1}}],[\"恢复栈顶的activity\",{\"1\":{\"1867\":1}}],[\"恢复调用者信息\",{\"1\":{\"1843\":1}}],[\"恢复原来的uid\",{\"1\":{\"1717\":1}}],[\"恢复原来的pid\",{\"1\":{\"1717\":1}}],[\"恢复运行到安全点再中断\",{\"1\":{\"1136\":1}}],[\"恢复成新建项目内容一致即可\",{\"1\":{\"40\":1}}],[\"才是重要的\",{\"1\":{\"1689\":1}}],[\"才会向驱动层执行清除死亡通知的动作\",{\"1\":{\"1761\":1}}],[\"才会引入依赖\",{\"1\":{\"1476\":1}}],[\"才会产生安全点\",{\"1\":{\"1136\":1}}],[\"才有意义\",{\"1\":{\"1453\":1}}],[\"才能获取looper对象\",{\"1\":{\"1840\":1}}],[\"才能生效\",{\"1\":{\"1540\":1}}],[\"才能清晰明白\",{\"1\":{\"1480\":1}}],[\"才能推行一件方向正确的事\",{\"1\":{\"1268\":1}}],[\"才能gc\",{\"1\":{\"1136\":1}}],[\"才能继续创建内部类\",{\"1\":{\"160\":1}}],[\"产生异议\",{\"1\":{\"1445\":1}}],[\"产生机器代码\",{\"1\":{\"1210\":1}}],[\"产生大量不连续内存碎片\",{\"1\":{\"1130\":1}}],[\"产品希望通过后台下发uri控制客户端跳到指定页面\",{\"1\":{\"1481\":1}}],[\"产品评审环节\",{\"1\":{\"598\":1}}],[\"产品需求明确\",{\"1\":{\"595\":1}}],[\"产品列表\",{\"1\":{\"595\":1}}],[\"产品\",{\"1\":{\"415\":1}}],[\"产品运营\",{\"0\":{\"6\":1}}],[\"满足当前一期要求\",{\"1\":{\"1440\":1}}],[\"满足仅代表可以回收\",{\"1\":{\"1128\":1}}],[\"满城尽是lookup\",{\"1\":{\"805\":1}}],[\"废弃常量和无用的类\",{\"1\":{\"1128\":1}}],[\"检测对象不可达\",{\"1\":{\"1127\":2}}],[\"检查该服务是否允许孤立于进程而单独存在\",{\"1\":{\"1790\":1}}],[\"检查系统是否支持\",{\"1\":{\"1534\":1}}],[\"检查系统是否有指定函数\",{\"1\":{\"1534\":1}}],[\"检查范围\",{\"1\":{\"1521\":1}}],[\"检查消除\",{\"1\":{\"1210\":1}}],[\"检查是否声明变量\",{\"1\":{\"1200\":1}}],[\"检查指令参数是否在常量池中定位到一个类的符号引用\",{\"1\":{\"1116\":1}}],[\"检查魔数\",{\"1\":{\"1077\":1}}],[\"检查api的质量\",{\"1\":{\"793\":1}}],[\"检查appid\",{\"1\":{\"106\":1}}],[\"检查mysql服务的状态\",{\"0\":{\"694\":1}}],[\"检查硬件\",{\"1\":{\"501\":1}}],[\"深入浅出原理与实现\",{\"1\":{\"1432\":1}}],[\"深入理解android\",{\"1\":{\"1432\":1}}],[\"深入理解java虚拟机\",{\"0\":{\"1991\":1},\"2\":{\"1120\":1,\"1147\":1,\"1160\":1,\"1166\":1,\"1178\":1,\"1194\":1,\"1214\":1,\"1251\":1}}],[\"深拷贝\",{\"1\":{\"409\":1}}],[\"深拷贝其对象\",{\"1\":{\"409\":1}}],[\"剩下是线程私有空间\",{\"1\":{\"1119\":1}}],[\"句柄优点\",{\"1\":{\"1118\":1}}],[\"挪到指针\",{\"1\":{\"1116\":1}}],[\"级别\",{\"1\":{\"1109\":1}}],[\"助记符\",{\"1\":{\"1093\":1}}],[\"魔法数是0x\",{\"1\":{\"1093\":1}}],[\"魔数opcode映射指令集\",{\"0\":{\"1164\":1}}],[\"魔数\",{\"0\":{\"1077\":1},\"1\":{\"1076\":1}}],[\"赋予其特殊的含义\",{\"1\":{\"1709\":1}}],[\"赋予对象创建者更多权利\",{\"1\":{\"799\":1}}],[\"赋值\",{\"1\":{\"1220\":1}}],[\"赋值给\",{\"1\":{\"1081\":1}}],[\"属于方法区一部分\",{\"1\":{\"1115\":1}}],[\"属于章回式讲课\",{\"1\":{\"1069\":1}}],[\"属性动画支持哪些属性\",{\"1\":{\"1713\":1}}],[\"属性动画中\",{\"1\":{\"1713\":1}}],[\"属性动画中关于\",{\"1\":{\"1712\":1}}],[\"属性动画中如何设置反向播放\",{\"1\":{\"1712\":1}}],[\"属性动画中改变属性时需触发\",{\"1\":{\"1711\":1}}],[\"属性动画中产生动画的属性可以在任意位置声明\",{\"1\":{\"1711\":1}}],[\"属性设置为\",{\"1\":{\"1711\":1}}],[\"属性方法\",{\"1\":{\"1709\":1}}],[\"属性支持使用\",{\"1\":{\"1709\":1}}],[\"属性来设置\",{\"1\":{\"1708\":1}}],[\"属性为下面哪个值\",{\"1\":{\"1712\":1}}],[\"属性为\",{\"1\":{\"1708\":1,\"1713\":4}}],[\"属性覆盖\",{\"1\":{\"1518\":1}}],[\"属性标注\",{\"1\":{\"1445\":1}}],[\"属性表\",{\"1\":{\"1076\":1}}],[\"属性\",{\"1\":{\"604\":1,\"738\":1,\"1079\":1,\"1709\":1,\"1712\":1}}],[\"附加参数\",{\"1\":{\"1055\":1}}],[\"密码\",{\"1\":{\"1049\":1,\"1966\":1}}],[\"暂时未能真正启动vm\",{\"1\":{\"1044\":1}}],[\"暂无\",{\"1\":{\"298\":1}}],[\"笔者水平有限\",{\"1\":{\"1043\":1}}],[\"异常给调用者\",{\"1\":{\"1185\":1}}],[\"异常跳转等\",{\"1\":{\"1136\":1}}],[\"异常测试\",{\"0\":{\"1037\":1}}],[\"异常代码行数\",{\"1\":{\"1036\":1}}],[\"异常类\",{\"1\":{\"1036\":2}}],[\"异常指令athrow\",{\"1\":{\"1036\":1}}],[\"异常指令\",{\"1\":{\"1035\":1}}],[\"异常父类\",{\"1\":{\"1035\":1}}],[\"异常\",{\"1\":{\"1035\":1}}],[\"异常处理表\",{\"1\":{\"1036\":2}}],[\"异常处理\",{\"0\":{\"1034\":1,\"1035\":1,\"1941\":1,\"1951\":1},\"1\":{\"1036\":1,\"1037\":1,\"1101\":1,\"1521\":1}}],[\"异步消息\",{\"0\":{\"1848\":1}}],[\"异步消息模式\",{\"1\":{\"938\":1}}],[\"异步\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"异步返回\",{\"1\":{\"926\":1}}],[\"寻找模板类的构造方法\",{\"1\":{\"1598\":1}}],[\"寻找文件\",{\"1\":{\"1552\":2}}],[\"寻找文件副本\",{\"1\":{\"298\":1}}],[\"寻找注解实现\",{\"1\":{\"1546\":1}}],[\"寻找注册方法\",{\"1\":{\"1022\":1}}],[\"寻找下一个函数\",{\"1\":{\"1101\":1}}],[\"寻找和读取\",{\"1\":{\"1064\":1}}],[\"~loopercallback\",{\"1\":{\"1831\":1}}],[\"~messagehandler\",{\"1\":{\"1831\":1}}],[\"~\",{\"0\":{\"1923\":1},\"1\":{\"1022\":4,\"1078\":2,\"1806\":1,\"1921\":1,\"1922\":3,\"1923\":1,\"1943\":2,\"1952\":4}}],[\"函数之前\",{\"1\":{\"1708\":1}}],[\"函数拦截的方法\",{\"1\":{\"1588\":1}}],[\"函数变换\",{\"1\":{\"1521\":1}}],[\"函数默认参数\",{\"1\":{\"1518\":1}}],[\"函数定义\",{\"1\":{\"1518\":1}}],[\"函数更精简\",{\"1\":{\"1280\":1}}],[\"函数中条件逻辑使人难以看清正常的执行路径\",{\"1\":{\"1277\":1}}],[\"函数\",{\"1\":{\"1277\":1,\"1476\":1,\"1491\":1,\"1534\":1,\"1588\":1,\"1709\":1,\"1712\":1}}],[\"函数本体不再需要某个参数\",{\"1\":{\"1274\":1}}],[\"函数的名称未能揭示函数的用途\",{\"1\":{\"1274\":1}}],[\"函数改名\",{\"1\":{\"1274\":1}}],[\"函数下移\",{\"1\":{\"1262\":1}}],[\"函数上移\",{\"1\":{\"1262\":1}}],[\"函数过度\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"函数链过长\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"函数调用与返回\",{\"1\":{\"995\":1}}],[\"函数名大写外部可以访问\",{\"1\":{\"1075\":1}}],[\"函数名\",{\"1\":{\"944\":1,\"946\":1}}],[\"私钥\",{\"0\":{\"1941\":1}}],[\"私有方法\",{\"1\":{\"991\":1,\"1101\":1}}],[\"私服\",{\"1\":{\"608\":2}}],[\"抛出methodandargscaller异常\",{\"1\":{\"1866\":1}}],[\"抛出相应的exception\",{\"1\":{\"1756\":1}}],[\"抛出java异常\",{\"1\":{\"1527\":1}}],[\"抛出uncaught异常\",{\"1\":{\"1036\":1}}],[\"抛出异常说明父类无法完成加载请求\",{\"1\":{\"197\":1,\"1175\":1}}],[\"抛异常\",{\"1\":{\"984\":1}}],[\"准备主线程looper\",{\"1\":{\"1867\":1}}],[\"准备looper循环执行\",{\"1\":{\"1730\":1}}],[\"准备过程\",{\"1\":{\"1197\":1}}],[\"准备执行类初始化方法\",{\"1\":{\"1003\":1}}],[\"准备阶段\",{\"1\":{\"979\":1}}],[\"准备\",{\"0\":{\"1172\":1},\"1\":{\"979\":1,\"1169\":1}}],[\"准确诊断问题\",{\"1\":{\"230\":1}}],[\"普通消息必须有一个target\",{\"1\":{\"1847\":1}}],[\"普通消息不唤醒队列\",{\"1\":{\"1847\":1}}],[\"普通binder线程\",{\"1\":{\"1778\":1}}],[\"普通文本\",{\"1\":{\"1702\":1}}],[\"普通post与poststicky区别\",{\"1\":{\"1546\":1}}],[\"普通页面和列表页面\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"普通优化\",{\"1\":{\"1210\":1}}],[\"普通计算压栈出栈\",{\"1\":{\"1094\":1}}],[\"普通类\",{\"1\":{\"1008\":1}}],[\"普通类的数据来自于class文件\",{\"1\":{\"978\":1,\"1009\":1,\"1030\":1}}],[\"普通写法\",{\"1\":{\"422\":1}}],[\"吞吐量优先\",{\"1\":{\"1143\":1}}],[\"吞吐量\",{\"1\":{\"954\":1}}],[\"必然是多技术栈混合的\",{\"1\":{\"1694\":1}}],[\"必要条件\",{\"1\":{\"955\":1}}],[\"必要处理能够被执行\",{\"1\":{\"954\":1}}],[\"必须是allproject\",{\"1\":{\"1911\":1}}],[\"必须是2x图\",{\"1\":{\"1443\":1}}],[\"必须要使用\",{\"1\":{\"1707\":1}}],[\"必须要通过手动释放才行\",{\"1\":{\"1530\":1}}],[\"必须使用属性指定自定义组件名称\",{\"1\":{\"1702\":3}}],[\"必须使用小米手机外观素材\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"必须先执行looper\",{\"1\":{\"1840\":1}}],[\"必须先make编译\",{\"1\":{\"1534\":1}}],[\"必须先set\",{\"1\":{\"381\":1}}],[\"必须在声明处的类型后添加\",{\"1\":{\"1518\":1}}],[\"必须初始化5种情况\",{\"1\":{\"1169\":1}}],[\"必须暂停其他工作线程\",{\"1\":{\"1139\":1}}],[\"必须遵守标准\",{\"1\":{\"955\":1}}],[\"必须考察具体的逻辑关系\",{\"1\":{\"735\":1}}],[\"必须保证为\",{\"1\":{\"352\":1}}],[\"必须依次扩展每一层\",{\"1\":{\"311\":1}}],[\"必须用接口才行\",{\"1\":{\"259\":1}}],[\"必须\",{\"1\":{\"106\":1}}],[\"标注工具\",{\"1\":{\"1702\":1}}],[\"标注要求\",{\"0\":{\"1445\":1}}],[\"标签\",{\"0\":{\"1941\":1},\"1\":{\"1518\":1}}],[\"标题\",{\"1\":{\"1444\":1}}],[\"标量替换\",{\"1\":{\"1212\":1}}],[\"标准模板写法\",{\"1\":{\"1534\":1}}],[\"标准示例\",{\"1\":{\"1527\":1}}],[\"标准\",{\"0\":{\"954\":1}}],[\"标记完成后\",{\"1\":{\"205\":1}}],[\"标记出所有需要回收的对象\",{\"1\":{\"205\":1}}],[\"标记清除后产生大量不连续内存碎片\",{\"1\":{\"204\":1}}],[\"标记和清除两个过程效率不高\",{\"1\":{\"204\":1,\"1130\":1}}],[\"标记\",{\"0\":{\"204\":1,\"205\":1,\"1130\":1,\"1132\":1},\"1\":{\"205\":1,\"1130\":1,\"1132\":1,\"1133\":2,\"1144\":1}}],[\"伪代码\",{\"1\":{\"948\":1}}],[\"陷入暂停\",{\"1\":{\"945\":1}}],[\"陷入死局\",{\"1\":{\"227\":1}}],[\"休眠\",{\"1\":{\"944\":1}}],[\"终归要coding\",{\"1\":{\"1453\":1}}],[\"终止状态\",{\"1\":{\"943\":1}}],[\"终结阶段\",{\"1\":{\"144\":1,\"145\":1}}],[\"隐藏函数\",{\"1\":{\"1274\":1}}],[\"隐藏\",{\"1\":{\"1259\":1}}],[\"隐藏线程创建过程\",{\"1\":{\"938\":1}}],[\"隐藏构造细节\",{\"1\":{\"799\":1}}],[\"耗时\",{\"1\":{\"1132\":1}}],[\"耗时操作\",{\"1\":{\"938\":2}}],[\"耗时交易10s\",{\"1\":{\"926\":1}}],[\"耗时交易\",{\"1\":{\"926\":2}}],[\"详细见代码\",{\"1\":{\"1632\":1}}],[\"详细介绍\",{\"1\":{\"935\":1}}],[\"详见armsconstant\",{\"1\":{\"1552\":1}}],[\"详见\",{\"1\":{\"237\":1,\"1286\":1,\"1580\":1}}],[\"逻辑独立\",{\"1\":{\"1824\":1}}],[\"逻辑层\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"逻辑\",{\"1\":{\"935\":1}}],[\"释放相应的服务\",{\"1\":{\"1790\":1}}],[\"释放函数\",{\"1\":{\"1598\":1}}],[\"释放后\",{\"1\":{\"1530\":1}}],[\"释放内存\",{\"1\":{\"1527\":1}}],[\"释放\",{\"1\":{\"1238\":1,\"1247\":1}}],[\"释放对象锁\",{\"1\":{\"1238\":1}}],[\"释放写入锁\",{\"1\":{\"932\":1}}],[\"释放锁\",{\"1\":{\"876\":1,\"879\":1,\"1826\":1,\"1828\":2}}],[\"示例在demo1中\",{\"1\":{\"1534\":1}}],[\"示例module\",{\"1\":{\"1491\":1}}],[\"示例核心代码\",{\"0\":{\"1488\":1}}],[\"示例代码\",{\"1\":{\"1474\":1}}],[\"示例代码pool\",{\"0\":{\"249\":1}}],[\"示例demo\",{\"1\":{\"1305\":1,\"1527\":1}}],[\"示例\",{\"1\":{\"929\":1,\"935\":1,\"958\":1,\"1117\":1,\"1298\":1,\"1530\":1}}],[\"倒计时类\",{\"1\":{\"1713\":1}}],[\"倒数计数\",{\"1\":{\"904\":1}}],[\"倒置==导致\",{\"1\":{\"750\":1}}],[\"柯南长了一岁\",{\"1\":{\"900\":1}}],[\"阈值\",{\"1\":{\"897\":1}}],[\"窃取算法\",{\"1\":{\"897\":1}}],[\"死亡通知\",{\"1\":{\"1786\":1}}],[\"死亡通知是为了让bp端\",{\"1\":{\"1761\":1}}],[\"死亡通告\",{\"1\":{\"1751\":1}}],[\"死循环\",{\"1\":{\"895\":1}}],[\"死锁\",{\"0\":{\"823\":1}}],[\"入门实战\",{\"1\":{\"1534\":1}}],[\"入参\",{\"1\":{\"1064\":1}}],[\"入参解析\",{\"0\":{\"1055\":1}}],[\"入队时\",{\"1\":{\"1841\":2}}],[\"入队不成功反复入队\",{\"1\":{\"895\":1}}],[\"入队前\",{\"1\":{\"895\":1}}],[\"入队列\",{\"1\":{\"895\":1}}],[\"入队和出队用同一把锁\",{\"1\":{\"895\":1}}],[\"入职拧螺丝\",{\"1\":{\"227\":1}}],[\"散列算法定位到segment\",{\"1\":{\"894\":1}}],[\"唤醒\",{\"1\":{\"1847\":1}}],[\"唤醒poll循环\",{\"0\":{\"1827\":1}}],[\"唤醒所有\",{\"1\":{\"889\":1}}],[\"唤起三种方式\",{\"1\":{\"1326\":1}}],[\"唤起阻塞\",{\"1\":{\"888\":1}}],[\"阻塞操作\",{\"1\":{\"1846\":2}}],[\"阻塞和唤醒一个线程\",{\"1\":{\"1238\":1}}],[\"阻塞\",{\"1\":{\"1230\":1}}],[\"阻塞状态\",{\"1\":{\"943\":1}}],[\"阻塞队列用来给生产者与消费者解耦\",{\"1\":{\"949\":1}}],[\"阻塞队列blockqueue\",{\"1\":{\"949\":1}}],[\"阻塞队列\",{\"0\":{\"896\":1},\"1\":{\"958\":1}}],[\"阻塞队列是给生产者和消费者解耦的\",{\"1\":{\"832\":1}}],[\"阻塞算法\",{\"1\":{\"895\":1}}],[\"阻塞当前线程\",{\"1\":{\"888\":1}}],[\"降序\",{\"1\":{\"1518\":1}}],[\"降级\",{\"1\":{\"954\":1}}],[\"降级为读锁\",{\"1\":{\"932\":1}}],[\"降级指把持住当前写锁\",{\"1\":{\"887\":1}}],[\"降低使用成本\",{\"1\":{\"1546\":1}}],[\"降低重构带来的开销\",{\"1\":{\"1268\":1,\"1286\":1}}],[\"降低资源消耗\",{\"1\":{\"912\":1}}],[\"降低维护费用\",{\"1\":{\"772\":1}}],[\"降低程序内存的占用\",{\"1\":{\"441\":1}}],[\"降低前端参与业务交付的门槛\",{\"1\":{\"305\":1}}],[\"低频题\",{\"0\":{\"1710\":1}}],[\"低级中间代码\",{\"1\":{\"1210\":1}}],[\"低停顿\",{\"1\":{\"1144\":1}}],[\"低16位表示写\",{\"1\":{\"886\":1}}],[\"低耦合\",{\"1\":{\"12\":1,\"731\":1,\"750\":1}}],[\"饥饿\",{\"1\":{\"881\":1}}],[\"记录服务名和handle信息\",{\"1\":{\"1785\":1}}],[\"记录错题\",{\"1\":{\"1701\":1}}],[\"记录修改清单\",{\"1\":{\"1286\":1}}],[\"记录重构原因\",{\"1\":{\"1286\":1}}],[\"记录重构手法与情景映射\",{\"1\":{\"1286\":1}}],[\"记录重构清单\",{\"1\":{\"1253\":1}}],[\"记录命名\",{\"1\":{\"1286\":1}}],[\"记录\",{\"1\":{\"1253\":1}}],[\"记录那块内存可用\",{\"1\":{\"1116\":1}}],[\"记录额外信息\",{\"1\":{\"1029\":1}}],[\"记录共享节点\",{\"1\":{\"880\":1}}],[\"记住一个原则\",{\"1\":{\"265\":1}}],[\"记住坏味道\",{\"1\":{\"265\":1}}],[\"条件判定\",{\"1\":{\"1521\":1}}],[\"条件表达式统一写法\",{\"1\":{\"1518\":1}}],[\"条件罕见\",{\"1\":{\"1277\":1}}],[\"条件编译\",{\"0\":{\"1204\":1}}],[\"条件满足执行\",{\"1\":{\"948\":1}}],[\"条件锁\",{\"1\":{\"896\":1}}],[\"条件\",{\"1\":{\"878\":1,\"896\":1,\"949\":1}}],[\"条件不满足等待\",{\"1\":{\"948\":1}}],[\"条件不满足\",{\"1\":{\"870\":1,\"948\":1}}],[\"步骤三\",{\"1\":{\"1417\":1}}],[\"步骤二\",{\"1\":{\"1417\":1}}],[\"步骤一\",{\"1\":{\"1417\":1}}],[\"步状态获取与释放\",{\"1\":{\"877\":1}}],[\"步子\",{\"1\":{\"281\":1}}],[\"仅仅忽略项目根目录下的\",{\"1\":{\"1952\":1}}],[\"仅仅只是设置元素的值不算结构发生变化\",{\"1\":{\"335\":1}}],[\"仅做测试\",{\"1\":{\"1604\":1}}],[\"仅需要将操作代理到sync上即可\",{\"1\":{\"876\":1}}],[\"独立集成解决已有技术\",{\"1\":{\"1694\":1}}],[\"独立且互不依赖\",{\"1\":{\"12\":2,\"731\":2}}],[\"独占式同步状态获取与释放\",{\"0\":{\"879\":1}}],[\"独占式同\",{\"1\":{\"877\":1}}],[\"独占式获取与释放同步状态\",{\"1\":{\"876\":1}}],[\"独占锁\",{\"1\":{\"876\":1}}],[\"继续执行\",{\"1\":{\"1248\":1}}],[\"继续等待\",{\"1\":{\"870\":1}}],[\"继承sharepreffacade\",{\"0\":{\"1626\":1}}],[\"继承是侵入性的\",{\"1\":{\"753\":1}}],[\"继承关系\",{\"1\":{\"738\":1}}],[\"继承自\",{\"1\":{\"358\":1,\"362\":1,\"367\":1}}],[\"继承自collection接口\",{\"1\":{\"212\":1}}],[\"继承了\",{\"1\":{\"327\":1,\"1702\":3}}],[\"继承父类\",{\"1\":{\"158\":1}}],[\"继承\",{\"0\":{\"158\":1},\"1\":{\"158\":1}}],[\"块代码不能清理做清理或关闭逻辑\",{\"1\":{\"867\":1}}],[\"初处初始化耗时\",{\"1\":{\"1320\":1}}],[\"初次读包含final域对象\",{\"1\":{\"863\":1}}],[\"初始会生成一个\",{\"1\":{\"1707\":1}}],[\"初始状态\",{\"1\":{\"878\":1,\"943\":1}}],[\"初始化系统上下文\",{\"1\":{\"1867\":1}}],[\"初始化子进程退出的信号处理过程\",{\"1\":{\"1857\":1}}],[\"初始化native消息队列\",{\"1\":{\"1829\":1}}],[\"初始化mydata数据\",{\"1\":{\"1737\":1}}],[\"初始化控件的代码调用\",{\"1\":{\"1598\":1}}],[\"初始化工作并放入顶点数据\",{\"1\":{\"1540\":1}}],[\"初始化工作\",{\"1\":{\"1540\":1}}],[\"初始化资源\",{\"1\":{\"1527\":1}}],[\"初始化缓存\",{\"1\":{\"1527\":1}}],[\"初始化类\",{\"1\":{\"1521\":1}}],[\"初始化代码\",{\"1\":{\"1518\":1}}],[\"初始化项目\",{\"1\":{\"1491\":1}}],[\"初始化当前项目\",{\"1\":{\"1474\":2}}],[\"初始化和销毁\",{\"1\":{\"1416\":1}}],[\"初始化数据\",{\"1\":{\"1364\":1}}],[\"初始化spname\",{\"1\":{\"1625\":1}}],[\"初始化sdk\",{\"1\":{\"1320\":1}}],[\"初始化segmentshift和segmentmask\",{\"1\":{\"894\":1}}],[\"初始化segments数组\",{\"1\":{\"894\":1}}],[\"初始化插入注解处理器\",{\"1\":{\"1197\":1}}],[\"初始化一个类\",{\"1\":{\"1169\":1}}],[\"初始化一个类时\",{\"1\":{\"1002\":1}}],[\"初始化\",{\"0\":{\"1174\":1},\"1\":{\"1169\":1,\"1383\":1,\"1666\":1,\"1870\":1}}],[\"初始化为0值\",{\"1\":{\"1116\":1}}],[\"初始化虚拟机\",{\"1\":{\"1044\":1}}],[\"初始化逻辑\",{\"0\":{\"1003\":1}}],[\"初始化final变量\",{\"1\":{\"929\":1}}],[\"初始化每个segment\",{\"1\":{\"894\":1}}],[\"初始化对象\",{\"1\":{\"864\":1}}],[\"初始化值\",{\"1\":{\"381\":1}}],[\"初始化threadlocalmap对象\",{\"1\":{\"381\":1}}],[\"初始值为\",{\"1\":{\"359\":1}}],[\"享变量所做修改的\",{\"1\":{\"862\":1}}],[\"享元模式\",{\"0\":{\"439\":1},\"1\":{\"256\":1,\"257\":1,\"394\":1,\"440\":1,\"441\":1}}],[\"临界区代码必须从主内存中读取共享变量\",{\"1\":{\"862\":1}}],[\"临界区互斥执行\",{\"1\":{\"862\":1}}],[\"临时存储\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"临时笔记\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"临时字段多\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"临时性会议\",{\"1\":{\"586\":1}}],[\"临时例会\",{\"1\":{\"586\":1}}],[\"版本是多少\",{\"1\":{\"1712\":1}}],[\"版本是\",{\"1\":{\"1708\":1}}],[\"版本名\",{\"1\":{\"1377\":1}}],[\"版本字符串\",{\"1\":{\"1298\":1}}],[\"版本号\",{\"0\":{\"1078\":1},\"1\":{\"1298\":1}}],[\"版本\",{\"1\":{\"853\":1,\"1298\":1,\"1966\":1}}],[\"版本v8\",{\"1\":{\"701\":1}}],[\"轻量锁失效\",{\"1\":{\"1248\":1}}],[\"轻量锁\",{\"0\":{\"1248\":1},\"1\":{\"1248\":1}}],[\"轻量锁升级\",{\"1\":{\"848\":1}}],[\"轻量级线程操作\",{\"1\":{\"1225\":1}}],[\"轻量级进程与内核进程1\",{\"1\":{\"1225\":1}}],[\"轻量级进程\",{\"1\":{\"1225\":1}}],[\"轻量级解锁时\",{\"1\":{\"847\":1}}],[\"轻量级锁解锁\",{\"1\":{\"847\":1}}],[\"轻量级锁加锁\",{\"1\":{\"847\":1}}],[\"轻量级锁\",{\"0\":{\"847\":1}}],[\"轻量级锁状态\",{\"1\":{\"845\":1}}],[\"轻量级的synchronized\",{\"1\":{\"840\":1}}],[\"失败则重新进行操作\",{\"1\":{\"1239\":1}}],[\"失败则构造同步节点\",{\"1\":{\"879\":1}}],[\"失败\",{\"1\":{\"847\":1,\"1383\":1,\"1666\":1}}],[\"失去响应等情况\",{\"1\":{\"312\":1}}],[\"持续性增加\",{\"1\":{\"1512\":1}}],[\"持有偏向锁线程每次进入\",{\"1\":{\"1247\":1}}],[\"持有偏向锁的线程才会释放锁\",{\"1\":{\"846\":1}}],[\"持有锁线程长时间不释放\",{\"1\":{\"1238\":1}}],[\"持有这个引用为了支持方法调用过程中动态连接\",{\"1\":{\"1184\":1}}],[\"持久层\",{\"1\":{\"311\":1}}],[\"持久代\",{\"1\":{\"207\":1,\"1133\":1}}],[\"偏向模式结束\",{\"1\":{\"1247\":1}}],[\"偏向时间戳\",{\"1\":{\"1117\":1}}],[\"偏向线程id\",{\"1\":{\"1117\":1}}],[\"偏向锁升级\",{\"1\":{\"848\":1}}],[\"偏向锁的撤销\",{\"1\":{\"846\":1}}],[\"偏向锁使用了一种等到竞争出现才释放锁的机制\",{\"1\":{\"846\":1}}],[\"偏向锁撤销\",{\"1\":{\"846\":1}}],[\"偏向锁加锁\",{\"1\":{\"846\":1}}],[\"偏向锁\",{\"0\":{\"846\":1,\"1247\":1}}],[\"偏向锁状态\",{\"1\":{\"845\":1}}],[\"偏移量offset做控制\",{\"1\":{\"1096\":1}}],[\"偏高\",{\"1\":{\"833\":1}}],[\"汇编指令\",{\"1\":{\"841\":1}}],[\"汇报工作\",{\"1\":{\"537\":1}}],[\"慢的sql\",{\"1\":{\"834\":1}}],[\"看此时代码更像一个模板\",{\"1\":{\"1610\":1}}],[\"看视频是个很寂寞的事情\",{\"1\":{\"1543\":1}}],[\"看书只是懂\",{\"1\":{\"1509\":1}}],[\"看每个线程的性能信息\",{\"1\":{\"833\":1}}],[\"看看pid为3117的进程\",{\"1\":{\"822\":1}}],[\"看看什么是行之有效的\",{\"1\":{\"814\":1}}],[\"线\",{\"1\":{\"1540\":1}}],[\"线性扫描算法\",{\"1\":{\"1210\":1}}],[\"线上问题定位\",{\"0\":{\"833\":1}}],[\"线程进入休眠状态的个数就是空闲线程数\",{\"1\":{\"1780\":1}}],[\"线程进入waitting状态\",{\"1\":{\"870\":1}}],[\"线程退出循环\",{\"1\":{\"1778\":1}}],[\"线程的todo队列\",{\"1\":{\"1761\":1}}],[\"线程的可分配数量越小\",{\"1\":{\"1119\":1}}],[\"线程最大同时激活数\",{\"1\":{\"1708\":1}}],[\"线程不支持\",{\"1\":{\"1707\":1}}],[\"线程不会释放占有资源\",{\"1\":{\"945\":1}}],[\"线程是对上面的一个综合运用\",{\"1\":{\"1527\":1}}],[\"线程是比进程更轻量级调度执行单位\",{\"1\":{\"1224\":1}}],[\"线程创建锁记录\",{\"1\":{\"1248\":1}}],[\"线程本地存储\",{\"1\":{\"1240\":1}}],[\"线程对立\",{\"0\":{\"1236\":1}}],[\"线程兼容\",{\"0\":{\"1235\":1}}],[\"线程结束\",{\"1\":{\"1230\":1}}],[\"线程阻塞了\",{\"1\":{\"1230\":1}}],[\"线程已经启动\",{\"1\":{\"1230\":1}}],[\"线程刚创建\",{\"1\":{\"1230\":1}}],[\"线程执行时间自己决定\",{\"1\":{\"1229\":1}}],[\"线程自己运行到标志\",{\"1\":{\"1136\":1}}],[\"线程持有的锁\",{\"1\":{\"1117\":1}}],[\"线程队列\",{\"1\":{\"950\":1}}],[\"线程中栈帧执行完毕退出\",{\"1\":{\"994\":1}}],[\"线程中断的标识位\",{\"1\":{\"945\":1}}],[\"线程中触发该对象的\",{\"1\":{\"200\":1}}],[\"线程之间顺序执行\",{\"1\":{\"945\":1}}],[\"线程之间的共享变量存储在主内存\",{\"1\":{\"151\":1}}],[\"线程之间的通信总是隐式进行\",{\"1\":{\"151\":1}}],[\"线程礼让\",{\"1\":{\"944\":1}}],[\"线程函数\",{\"0\":{\"944\":1}}],[\"线程优先级\",{\"1\":{\"942\":1}}],[\"线程优先级不能正确执行\",{\"1\":{\"867\":1}}],[\"线程可以访问共享内存变量\",{\"1\":{\"942\":1}}],[\"线程拥有各自计数器\",{\"1\":{\"942\":1}}],[\"线程\",{\"1\":{\"942\":1,\"1755\":1}}],[\"线程间交换数据的exchanger\",{\"0\":{\"908\":1}}],[\"线程间通信\",{\"0\":{\"870\":1}}],[\"线程再次获取锁\",{\"1\":{\"882\":1}}],[\"线程状态转换\",{\"1\":{\"1230\":1}}],[\"线程状态图\",{\"1\":{\"943\":1}}],[\"线程状态\",{\"0\":{\"943\":1},\"1\":{\"878\":1,\"943\":1}}],[\"线程b获取一个锁\",{\"1\":{\"862\":1}}],[\"线程b到主内存中去读取线程a之前已更新过共享变量\",{\"1\":{\"858\":1}}],[\"线程a释放锁\",{\"1\":{\"862\":1}}],[\"线程a释放一个锁\",{\"1\":{\"862\":1}}],[\"线程a\",{\"1\":{\"862\":1}}],[\"线程a把本地内存a更新过的共享变量刷新到主内存中去\",{\"1\":{\"858\":1}}],[\"线程内操作按序执行\",{\"1\":{\"859\":1}}],[\"线程通信和线程同步\",{\"1\":{\"858\":1}}],[\"线程尝试使用\",{\"1\":{\"847\":1}}],[\"线程安全阻塞队列\",{\"1\":{\"958\":1}}],[\"线程安全方法\",{\"1\":{\"935\":1}}],[\"线程安全队列\",{\"1\":{\"895\":1}}],[\"线程安全的实现\",{\"0\":{\"1237\":1}}],[\"线程安全的\",{\"1\":{\"886\":1,\"1518\":1}}],[\"线程安全\",{\"0\":{\"1231\":1},\"1\":{\"405\":1,\"1636\":1}}],[\"线程安全集合类与非线程安全\",{\"0\":{\"213\":1}}],[\"线程经常会被复用\",{\"1\":{\"385\":1}}],[\"线程私有数据\",{\"1\":{\"271\":1,\"1086\":1}}],[\"线程工厂\",{\"1\":{\"246\":1,\"914\":1}}],[\"线程池接口规范\",{\"1\":{\"950\":1}}],[\"线程池框架\",{\"1\":{\"950\":1}}],[\"线程池最小线程数\",{\"1\":{\"917\":1}}],[\"线程池最大数量\",{\"1\":{\"246\":1,\"914\":1}}],[\"线程池技术\",{\"1\":{\"917\":1}}],[\"线程池自定义实现\",{\"0\":{\"917\":1}}],[\"线程池的线程数量\",{\"1\":{\"916\":1}}],[\"线程池的基本大小\",{\"1\":{\"914\":1}}],[\"线程池里曾经创建过的最大线程数量\",{\"1\":{\"916\":1}}],[\"线程池在运行过程中已完成的任务数量\",{\"1\":{\"916\":1}}],[\"线程池需要执行的任务数量\",{\"1\":{\"916\":1}}],[\"线程池监控\",{\"0\":{\"916\":1}}],[\"线程池参数\",{\"0\":{\"914\":1}}],[\"线程池原理\",{\"0\":{\"913\":1}}],[\"线程池与生产消费者模式\",{\"1\":{\"832\":1}}],[\"线程池\",{\"1\":{\"441\":1,\"917\":1,\"949\":1,\"1494\":1}}],[\"线程池分解\",{\"1\":{\"248\":1}}],[\"线程池工作线程空闲后\",{\"1\":{\"246\":1,\"914\":1}}],[\"线程池基本大小\",{\"1\":{\"246\":1}}],[\"线程池核心参数\",{\"0\":{\"246\":1},\"1\":{\"246\":1}}],[\"线程与进程\",{\"0\":{\"243\":1}}],[\"场景\",{\"0\":{\"832\":1,\"1849\":1},\"1\":{\"846\":1,\"958\":1,\"1116\":1}}],[\"仍然串行执行\",{\"1\":{\"824\":1}}],[\"受邀测试用户如何体验\",{\"1\":{\"1708\":1}}],[\"受限于资源\",{\"1\":{\"824\":1}}],[\"受访者\",{\"1\":{\"531\":3}}],[\"尝试获取对象锁\",{\"1\":{\"1238\":1}}],[\"尝试停止和恢复另外线程来实现同步\",{\"1\":{\"1236\":1}}],[\"尝试非阻塞地获取锁\",{\"1\":{\"874\":1}}],[\"尝试使用定时锁\",{\"1\":{\"823\":1}}],[\"尝试次数使用\",{\"1\":{\"359\":1}}],[\"测量上下文切换次数\",{\"1\":{\"820\":1}}],[\"测量上下文切换的时长\",{\"1\":{\"820\":1}}],[\"测量上下文切换和时长\",{\"0\":{\"820\":1}}],[\"测试前\",{\"1\":{\"1534\":1}}],[\"测试一系列数据\",{\"1\":{\"1534\":1}}],[\"测试函数\",{\"1\":{\"1534\":1,\"1709\":1}}],[\"测试函数调用返回\",{\"1\":{\"997\":1}}],[\"测试函数调用与返回\",{\"1\":{\"996\":1}}],[\"测试帮助信息是否可以正常提示\",{\"1\":{\"1534\":1}}],[\"测试程序是否成功运行\",{\"1\":{\"1534\":1}}],[\"测试工具\",{\"1\":{\"1534\":1}}],[\"测试人员须在当天\",{\"1\":{\"1441\":1}}],[\"测试驱动\",{\"1\":{\"1253\":1,\"1286\":1}}],[\"测试驱动开发\",{\"1\":{\"811\":1,\"1253\":1}}],[\"测试并射中\",{\"1\":{\"1239\":1}}],[\"测试解释器和指令集\",{\"1\":{\"1102\":1}}],[\"测试shell脚本\",{\"1\":{\"1070\":1}}],[\"测试参数\",{\"0\":{\"1070\":1}}],[\"测试classpath\",{\"1\":{\"1064\":1}}],[\"测试classloader\",{\"1\":{\"985\":1,\"986\":1}}],[\"测试命令\",{\"1\":{\"1056\":1}}],[\"测试本地方法调用\",{\"1\":{\"1024\":1}}],[\"测试方法\",{\"0\":{\"1024\":1}}],[\"测试字符串参数\",{\"1\":{\"1017\":1}}],[\"测试字符串数组\",{\"1\":{\"1017\":1}}],[\"测试数组\",{\"0\":{\"1010\":1}}],[\"测试分支\",{\"0\":{\"996\":1}}],[\"测试demo\",{\"0\":{\"995\":1}}],[\"测试锁\",{\"1\":{\"884\":1}}],[\"测试死锁\",{\"1\":{\"823\":1}}],[\"测试h5\",{\"1\":{\"603\":1,\"656\":1}}],[\"测试提前进入协助\",{\"1\":{\"595\":1}}],[\"测试提前接入测试方式\",{\"1\":{\"595\":1}}],[\"测试增加资源996为民生上线留出充足时间\",{\"1\":{\"595\":1}}],[\"测试质量\",{\"1\":{\"586\":1}}],[\"测试\",{\"1\":{\"271\":1,\"543\":2,\"586\":1,\"1070\":1,\"1088\":1,\"1534\":2}}],[\"测试类查找功能\",{\"1\":{\"1070\":1}}],[\"测试类\",{\"0\":{\"1056\":1},\"1\":{\"259\":2,\"1064\":1}}],[\"速度比串行执行慢\",{\"1\":{\"819\":1}}],[\"之前的版本默认为false\",{\"1\":{\"1850\":1}}],[\"之后server进程也可以向binder线程池注册新的线程\",{\"1\":{\"1752\":1}}],[\"之后线程a和b继续运行\",{\"1\":{\"958\":1}}],[\"之后可以使用\",{\"1\":{\"327\":1}}],[\"之于\",{\"1\":{\"814\":1}}],[\"置顶思考\",{\"1\":{\"814\":1}}],[\"好处在于开发者在一个子项目中把子组件作为一个子app开发\",{\"1\":{\"1472\":1}}],[\"好工具让api设计更简单\",{\"1\":{\"811\":1}}],[\"好注意+卓越的执行\",{\"1\":{\"592\":1}}],[\"牢记可测试性\",{\"0\":{\"811\":1}}],[\"合理使用\",{\"1\":{\"1518\":1}}],[\"合理通讯\",{\"1\":{\"1500\":1}}],[\"合理分解api\",{\"1\":{\"808\":1}}],[\"合并分支\",{\"1\":{\"1947\":1}}],[\"合并重复的条件片段\",{\"1\":{\"1277\":1}}],[\"合并条件表达式\",{\"1\":{\"1277\":1}}],[\"合并计算结果\",{\"1\":{\"905\":1}}],[\"合并子任务\",{\"1\":{\"897\":1}}],[\"合并两个排序的链表\",{\"1\":{\"298\":1}}],[\"合并全部桶的\",{\"1\":{\"285\":1}}],[\"合并左右\",{\"1\":{\"284\":1}}],[\"合并\",{\"1\":{\"284\":1}}],[\"给通知设置分发时间\",{\"1\":{\"1711\":1}}],[\"给重构找出平滑过渡时间\",{\"1\":{\"1689\":1}}],[\"给retrofit\",{\"1\":{\"1589\":1,\"1592\":1,\"1595\":1}}],[\"给提供统一开发规范方案\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"给点赞👍👍👍\",{\"1\":{\"1341\":1}}],[\"给用户秒开的视觉效果\",{\"1\":{\"1320\":1}}],[\"给用户开发者api\",{\"1\":{\"808\":1}}],[\"给类变量分配内存并设置初始值\",{\"1\":{\"1172\":1}}],[\"给类变量分配空间并给予初始值\",{\"1\":{\"979\":1}}],[\"给予足够自由\",{\"1\":{\"1075\":1}}],[\"给class赋初始值\",{\"1\":{\"979\":1}}],[\"给客户使用的api\",{\"1\":{\"808\":1}}],[\"给对象分配内存以及回收分配给对象内存\",{\"1\":{\"184\":1}}],[\"循环体内\",{\"1\":{\"1869\":1}}],[\"循环等待消息\",{\"1\":{\"1862\":1}}],[\"循环迭代的首次为\",{\"1\":{\"1846\":1}}],[\"循环遍历\",{\"1\":{\"1828\":1}}],[\"循环执行\",{\"1\":{\"1756\":1}}],[\"循环渲染\",{\"1\":{\"1707\":1}}],[\"循环\",{\"1\":{\"1518\":1,\"1857\":1}}],[\"循环展开\",{\"1\":{\"1210\":1}}],[\"循环跳转\",{\"1\":{\"1136\":1}}],[\"循环引用\",{\"1\":{\"1124\":1}}],[\"循环初始化父类\",{\"1\":{\"1003\":1}}],[\"循环计数\",{\"1\":{\"905\":1}}],[\"循环使用\",{\"1\":{\"905\":1}}],[\"循环判断\",{\"1\":{\"867\":1,\"869\":1}}],[\"循环时间长开销大\",{\"1\":{\"853\":1}}],[\"循环cas\",{\"1\":{\"852\":1,\"895\":1}}],[\"循环依赖的讨论\",{\"1\":{\"805\":1}}],[\"循环调用问题\",{\"1\":{\"763\":1}}],[\"副标题\",{\"1\":{\"805\":1}}],[\"越来越有必要将单个应用拆分为独立的块\",{\"1\":{\"805\":1}}],[\"都会返回\",{\"1\":{\"1846\":1}}],[\"都会启动一个新的实例\",{\"1\":{\"1708\":2}}],[\"都会把手机屏幕映射到\",{\"1\":{\"1540\":1}}],[\"都部署给到客户了\",{\"1\":{\"1694\":1}}],[\"都不能解决配置下沉到base\",{\"1\":{\"1479\":1}}],[\"都不应该有看得到的副作用\",{\"1\":{\"1274\":1}}],[\"都存在弊端\",{\"1\":{\"1416\":1}}],[\"都得到相同结果\",{\"1\":{\"1277\":1}}],[\"都需要操作系统从用户态切换到内核态\",{\"1\":{\"1238\":1}}],[\"都是采用非oneway的方式\",{\"1\":{\"1756\":1}}],[\"都是为了避免goto效果\",{\"1\":{\"805\":1}}],[\"都是独立积木\",{\"1\":{\"12\":1,\"731\":1}}],[\"都意味着你对该api用户未来的一个兼容承诺\",{\"1\":{\"799\":1}}],[\"少即是多\",{\"1\":{\"796\":1}}],[\"少用继承\",{\"1\":{\"754\":1,\"760\":1}}],[\"告诉别人如何使用\",{\"1\":{\"796\":1}}],[\"传输数据\",{\"1\":{\"1756\":1}}],[\"传递\",{\"1\":{\"1966\":1}}],[\"传递变量\",{\"1\":{\"1699\":1}}],[\"传递第一个参数\",{\"1\":{\"644\":1}}],[\"传入java方法\",{\"1\":{\"1527\":1}}],[\"传入文字\",{\"1\":{\"1305\":1}}],[\"传统用法\",{\"1\":{\"1518\":1}}],[\"传参\",{\"1\":{\"1151\":1}}],[\"传道\",{\"1\":{\"796\":1}}],[\"职责建造一个子build\",{\"1\":{\"1312\":1}}],[\"职责\",{\"1\":{\"796\":1}}],[\"职位\",{\"1\":{\"543\":1}}],[\"了解用户两种方式\",{\"1\":{\"796\":1}}],[\"源代码地址\",{\"1\":{\"1905\":1}}],[\"源代码\",{\"1\":{\"1534\":1}}],[\"源代码兼容\",{\"1\":{\"796\":1}}],[\"源码路径\",{\"0\":{\"1832\":1,\"1852\":1,\"1870\":1}}],[\"源码目录\",{\"0\":{\"1746\":1,\"1757\":1}}],[\"源码build文件\",{\"1\":{\"1724\":1}}],[\"源码中有完整使用示例\",{\"1\":{\"1621\":1}}],[\"源码\",{\"0\":{\"1620\":1},\"1\":{\"1604\":1}}],[\"源码控制版本号\",{\"1\":{\"1298\":1}}],[\"源码分析要点\",{\"1\":{\"1546\":1}}],[\"源码分析\",{\"0\":{\"329\":1},\"1\":{\"319\":1,\"1481\":1}}],[\"源码常问rxjava\",{\"1\":{\"227\":1}}],[\"源码集成对接了nacos与各种监控\",{\"1\":{\"12\":1,\"731\":1}}],[\"源码集成便于调试扩展与二次开发\",{\"1\":{\"12\":2,\"731\":2}}],[\"付出的努力不要化为乌有\",{\"1\":{\"793\":1}}],[\"另一个负责修改\",{\"1\":{\"1274\":1}}],[\"另一个被阻塞\",{\"1\":{\"867\":1}}],[\"另一个线程能读到修改的值\",{\"1\":{\"839\":1}}],[\"另一类api为开发者服务\",{\"1\":{\"805\":1}}],[\"另一部分放在独立包\",{\"1\":{\"793\":1}}],[\"另外\",{\"1\":{\"1755\":1}}],[\"另外ibinder接口有一个内部接口deathdecipient\",{\"1\":{\"1751\":1}}],[\"另外线程尝试获得锁\",{\"1\":{\"1248\":1}}],[\"另外一词语是沟通\",{\"1\":{\"589\":1}}],[\"另外还要注意的是出问题的是哪一个路径下的文件\",{\"1\":{\"76\":1}}],[\"离我们近事物\",{\"1\":{\"793\":1}}],[\"良好的文档和示例demo\",{\"1\":{\"793\":1}}],[\"良好的功能延伸性\",{\"1\":{\"313\":1}}],[\"广泛的共识\",{\"1\":{\"793\":1}}],[\"管道读写\",{\"1\":{\"870\":1}}],[\"管道输入\",{\"1\":{\"870\":1}}],[\"管道\",{\"1\":{\"793\":1,\"1826\":1}}],[\"管理用户请求和session\",{\"1\":{\"314\":1}}],[\"严格限制除api以外\",{\"1\":{\"793\":1}}],[\"未做算法优化\",{\"1\":{\"1604\":1}}],[\"未涉及不采用kotlin\",{\"1\":{\"1512\":1}}],[\"未配置此属性\",{\"1\":{\"1491\":1}}],[\"未检测到支付宝客户端\",{\"1\":{\"1358\":1}}],[\"未实战方案\",{\"1\":{\"1317\":1}}],[\"未能真实实现system类加载\",{\"1\":{\"1043\":1}}],[\"未找异常处理方法\",{\"1\":{\"1036\":1}}],[\"未来\",{\"0\":{\"790\":1}}],[\"未达到满意\",{\"1\":{\"227\":1}}],[\"演示\",{\"0\":{\"1621\":1}}],[\"演示代码\",{\"1\":{\"1346\":1}}],[\"演示地址\",{\"1\":{\"15\":1,\"734\":1}}],[\"演变成面向对象\",{\"1\":{\"787\":1}}],[\"稳如老狗\",{\"1\":{\"1647\":1}}],[\"稳定\",{\"1\":{\"1647\":1}}],[\"稳定项目进行二次封装\",{\"1\":{\"1595\":1}}],[\"稳定性有待商榷\",{\"1\":{\"1512\":1}}],[\"稳定的api\",{\"1\":{\"787\":1}}],[\"稳流监控\",{\"1\":{\"12\":1,\"731\":1}}],[\"轮询等待消息\",{\"1\":{\"1863\":1}}],[\"轮廓模糊\",{\"1\":{\"787\":1}}],[\"轮胎离开车仍然可以存在\",{\"1\":{\"735\":1}}],[\"轮胎\",{\"1\":{\"428\":1}}],[\"理由\",{\"1\":{\"1494\":1}}],[\"理念就是用模板\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"理所当然的用\",{\"1\":{\"787\":1}}],[\"理性主义\",{\"1\":{\"787\":1}}],[\"理论定义该学科方方面面\",{\"1\":{\"787\":1}}],[\"理解会透彻一些\",{\"1\":{\"1610\":1}}],[\"理解不在一条线上\",{\"1\":{\"787\":1}}],[\"理解\",{\"1\":{\"750\":1}}],[\"理解信息局部不全\",{\"1\":{\"598\":1}}],[\"兼容性测试套件tck\",{\"1\":{\"811\":1}}],[\"兼容性是一种约束\",{\"1\":{\"775\":1}}],[\"兼容各个版本jdk\",{\"1\":{\"805\":1}}],[\"兼容后续版本\",{\"1\":{\"787\":1}}],[\"兼容式移除\",{\"1\":{\"784\":1}}],[\"明确版本的重要性\",{\"1\":{\"784\":1}}],[\"消费者关系\",{\"1\":{\"958\":1}}],[\"消费者模式\",{\"0\":{\"958\":1}}],[\"消费者范例\",{\"1\":{\"950\":1}}],[\"消费者\",{\"1\":{\"870\":2,\"948\":1,\"949\":1,\"950\":2,\"958\":2}}],[\"消亡的过程\",{\"0\":{\"784\":1}}],[\"消息头\",{\"1\":{\"1850\":1}}],[\"消息池的可用大小进行加1操作\",{\"1\":{\"1850\":1}}],[\"消息池的可用大小进行减1操作\",{\"1\":{\"1850\":1}}],[\"消息池的默认大小为50\",{\"1\":{\"1850\":1}}],[\"消息池\",{\"0\":{\"1850\":1}}],[\"消息没有退出\",{\"1\":{\"1847\":1}}],[\"消息队头存在barrier\",{\"1\":{\"1847\":1}}],[\"消息队列的主要功能向消息池投递消息\",{\"1\":{\"1837\":1}}],[\"消息队列native方法\",{\"1\":{\"1825\":1}}],[\"消息队列\",{\"0\":{\"1824\":1},\"1\":{\"1546\":1,\"1824\":1,\"1840\":1}}],[\"消息正在退出\",{\"1\":{\"1846\":1}}],[\"消息循环\",{\"0\":{\"1843\":1}}],[\"消息出队\",{\"0\":{\"1842\":1}}],[\"消息入队\",{\"0\":{\"1841\":1}}],[\"消息辅助类\",{\"1\":{\"1837\":1}}],[\"消息分为硬件产生的消息\",{\"1\":{\"1837\":1}}],[\"消息处理\",{\"1\":{\"1831\":1}}],[\"消息处理流程是先处理native\",{\"1\":{\"1824\":1}}],[\"消息类型\",{\"1\":{\"1831\":1}}],[\"消息总线\",{\"1\":{\"1500\":1}}],[\"消息\",{\"1\":{\"862\":2}}],[\"消息中间件\",{\"1\":{\"314\":1}}],[\"消息代理可能要做成集群\",{\"1\":{\"314\":1}}],[\"消息推送\",{\"1\":{\"103\":1}}],[\"说服开发人员为他们的api提供文档\",{\"1\":{\"778\":1}}],[\"说明要忽略的是目录\",{\"1\":{\"1952\":1}}],[\"说明webview\",{\"1\":{\"1320\":1}}],[\"说明1\",{\"1\":{\"1078\":1}}],[\"说明并不是由某一个线程导致cpu\",{\"1\":{\"833\":1}}],[\"说明存在某种问题\",{\"1\":{\"793\":1}}],[\"说明程序本身不再持有该对象的任何强引用\",{\"1\":{\"145\":1}}],[\"说明\",{\"0\":{\"145\":1},\"1\":{\"753\":2,\"754\":1,\"1377\":1,\"1961\":1}}],[\"团队协作\",{\"0\":{\"778\":1}}],[\"团队整体配合给力\",{\"1\":{\"595\":1}}],[\"桥接\",{\"1\":{\"775\":1}}],[\"桥接模式主要为应对某个类多个变化维度增加场景\",{\"1\":{\"261\":1}}],[\"桥接模式\",{\"0\":{\"457\":1},\"1\":{\"256\":1,\"257\":1,\"394\":1,\"458\":1,\"459\":1}}],[\"声明式的方法来描述\",{\"1\":{\"1709\":1}}],[\"声明式开发范式的基本组成说明正确的是\",{\"1\":{\"1709\":1}}],[\"声明式开发范式的转场动画包含以下哪几种类型\",{\"1\":{\"1702\":1}}],[\"声明式开发范式的属性动画需要在\",{\"1\":{\"1702\":1}}],[\"声明式编程\",{\"0\":{\"766\":1},\"1\":{\"766\":1,\"1491\":1}}],[\"声明一个字节缓冲区\",{\"1\":{\"1540\":1}}],[\"声明native方法\",{\"1\":{\"1530\":1}}],[\"声明\",{\"1\":{\"1491\":1}}],[\"声明+实现\",{\"1\":{\"1491\":1}}],[\"声卡设备\",{\"1\":{\"483\":1}}],[\"声卡\",{\"1\":{\"483\":1}}],[\"于是人们总说\",{\"1\":{\"763\":1}}],[\"阿米巴变形虫模型\",{\"1\":{\"763\":1}}],[\"阿里分发平台\",{\"1\":{\"1338\":2,\"1435\":2}}],[\"阿里云开放安全组端口8080\",{\"0\":{\"718\":1}}],[\"阿里云仓库\",{\"0\":{\"124\":1,\"1462\":1}}],[\"阿里安全组开启3306端口\",{\"0\":{\"626\":1}}],[\"阿里\",{\"1\":{\"12\":2,\"731\":2}}],[\"留给api使用或演进的余地越小\",{\"1\":{\"760\":1}}],[\"谨慎使用第三方api\",{\"1\":{\"760\":1}}],[\"暴露给用户细节太多\",{\"1\":{\"1481\":1}}],[\"暴露内容越多\",{\"1\":{\"760\":1}}],[\"暴露\",{\"1\":{\"760\":1}}],[\"暴露自身三大问题\",{\"1\":{\"230\":1}}],[\"阅读本书首要关注\",{\"1\":{\"757\":1}}],[\"凭感觉判断做出来\",{\"1\":{\"757\":1}}],[\"技巧\",{\"1\":{\"929\":1}}],[\"技巧有局限性和特定场景下针对性\",{\"1\":{\"757\":1}}],[\"技术的过程把每个点\",{\"1\":{\"1540\":1}}],[\"技术难点卡在如何创造这两个函数上来支持这个功能\",{\"1\":{\"1491\":1}}],[\"技术\",{\"1\":{\"1481\":1}}],[\"技术点收集\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"技术领导善于平衡长期利益与短期利益的关系\",{\"1\":{\"1268\":1}}],[\"技术发展超前于实践\",{\"1\":{\"1268\":1}}],[\"技术进阶\",{\"1\":{\"558\":1}}],[\"技术架构\",{\"1\":{\"305\":1}}],[\"技术缺少全面性和规范性\",{\"1\":{\"230\":1}}],[\"技术方面深度需要提升\",{\"1\":{\"230\":1}}],[\"犯错形成的相关知识\",{\"1\":{\"757\":1}}],[\"随机事件\",{\"1\":{\"1583\":1}}],[\"随时挂载mock和卸载mock的框架\",{\"1\":{\"1595\":1}}],[\"随时挑一个目标\",{\"1\":{\"1271\":1}}],[\"随时可取代的\",{\"1\":{\"12\":1,\"731\":1}}],[\"随后释放先前拥有的写锁\",{\"1\":{\"887\":1}}],[\"随后线程b获取这个锁\",{\"1\":{\"862\":1}}],[\"随便放\",{\"1\":{\"808\":1}}],[\"随着技术演变\",{\"1\":{\"1694\":1}}],[\"随着软件规模的增大以及功能复杂性的提高\",{\"1\":{\"805\":1}}],[\"随着项目扩张\",{\"1\":{\"757\":1}}],[\"作用是恢复远程调用端的uid和pid信息\",{\"1\":{\"1717\":1}}],[\"作用是清空远程调用端的uid和pid\",{\"1\":{\"1717\":1}}],[\"作用\",{\"1\":{\"944\":1,\"946\":1,\"983\":1}}],[\"作者认为思维差异\",{\"1\":{\"1268\":1}}],[\"作者是api开发\",{\"1\":{\"757\":1}}],[\"作者当时背景\",{\"1\":{\"757\":1}}],[\"作为基础库\",{\"1\":{\"1595\":1}}],[\"作为当前项目target\",{\"1\":{\"1534\":1}}],[\"作为表达式\",{\"1\":{\"1518\":1}}],[\"作为版本控制和开发测试依据\",{\"1\":{\"1441\":1}}],[\"作为版本控制依据\",{\"1\":{\"1440\":1}}],[\"作为提高效率的切入点\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"作为偏移量\",{\"1\":{\"1094\":1}}],[\"作为图形呈现\",{\"1\":{\"571\":1}}],[\"作为中心思想\",{\"1\":{\"571\":1}}],[\"序列\",{\"1\":{\"1524\":1}}],[\"序列转换成列表\",{\"1\":{\"1521\":1}}],[\"序列化时需要使用\",{\"1\":{\"334\":1}}],[\"序列化与反序列化二叉树\",{\"1\":{\"298\":2}}],[\"序列化\",{\"0\":{\"334\":1},\"1\":{\"12\":1,\"731\":1}}],[\"序列化期间动态修改数据\",{\"1\":{\"12\":1,\"731\":1}}],[\"序列化期间脱敏\",{\"1\":{\"12\":1,\"731\":1}}],[\"序言\",{\"0\":{\"757\":1},\"1\":{\"1530\":1}}],[\"迪米特原则\",{\"0\":{\"754\":1}}],[\"遵循\",{\"1\":{\"1707\":1}}],[\"遵循二八原则\",{\"1\":{\"1253\":1}}],[\"遵循开闭原则重要手段是通过抽象\",{\"1\":{\"752\":1}}],[\"遵循unix哲学\",{\"1\":{\"12\":1,\"731\":1}}],[\"效果杠杠无后遗症\",{\"0\":{\"1635\":1}}],[\"效果==>使用效果前\",{\"1\":{\"1491\":1}}],[\"效果\",{\"0\":{\"747\":1},\"1\":{\"1491\":1}}],[\"效率会降低\",{\"1\":{\"1131\":1}}],[\"效率会比较低\",{\"1\":{\"382\":1}}],[\"效率\",{\"1\":{\"954\":1}}],[\"效率低下的hashtable\",{\"1\":{\"894\":1}}],[\"效率以及稳定性提升\",{\"1\":{\"305\":1}}],[\"效率高的算法\",{\"1\":{\"207\":1}}],[\"效率问题\",{\"1\":{\"204\":1,\"1130\":1}}],[\"讨论头脑中有统一映射\",{\"1\":{\"744\":1}}],[\"嘴是头的一部分且不能脱离了头而单独存在\",{\"1\":{\"738\":1}}],[\"便会进入done\",{\"1\":{\"1780\":1}}],[\"便会写入min\",{\"1\":{\"1756\":1}}],[\"便是client端和server共同协商好的统一方法\",{\"1\":{\"1767\":1}}],[\"便进入jointhreadpool\",{\"1\":{\"1755\":1}}],[\"便采用环不断talkwithdriver\",{\"1\":{\"1755\":1}}],[\"便与我们永恒共存\",{\"1\":{\"757\":1}}],[\"便不复存在\",{\"1\":{\"738\":1}}],[\"便于生成模板代码\",{\"1\":{\"1534\":2}}],[\"便于后续复用\",{\"1\":{\"1509\":1}}],[\"便于管理和测试\",{\"1\":{\"1443\":1}}],[\"便于开发和测试\",{\"1\":{\"1440\":1}}],[\"便于高效团队合作\",{\"1\":{\"1435\":1}}],[\"便于多处复用\",{\"1\":{\"1417\":1}}],[\"便于多团队开发调试\",{\"1\":{\"12\":1,\"731\":1}}],[\"便于快速着色\",{\"1\":{\"1540\":1}}],[\"便于快速开发\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"便于快速访问\",{\"1\":{\"559\":1}}],[\"便于用户清晰\",{\"1\":{\"1312\":1}}],[\"便于用户使用\",{\"1\":{\"262\":1}}],[\"便于项目重构\",{\"1\":{\"1069\":1}}],[\"便于单元测试\",{\"0\":{\"1068\":1}}],[\"便于互相查找\",{\"1\":{\"1030\":1}}],[\"便于定位\",{\"1\":{\"945\":1}}],[\"便于定点查找\",{\"1\":{\"571\":1}}],[\"便于在头脑中搭建一个思考模型\",{\"1\":{\"571\":1}}],[\"便于维护\",{\"1\":{\"501\":1}}],[\"便于记录\",{\"1\":{\"489\":1}}],[\"脱离了\",{\"1\":{\"738\":1}}],[\"缺少系统方法论\",{\"1\":{\"757\":1}}],[\"缺省值\",{\"1\":{\"738\":1}}],[\"缺点消耗处理器资源\",{\"1\":{\"1242\":1}}],[\"缺点是有一部分空间未利用\",{\"1\":{\"1131\":1}}],[\"缺点是会出现单点失败\",{\"1\":{\"314\":1}}],[\"缺点\",{\"1\":{\"311\":1,\"312\":1,\"313\":1,\"314\":2,\"559\":1,\"753\":1,\"1130\":1,\"1132\":1,\"1209\":2,\"1225\":1,\"1479\":1,\"1480\":1,\"1481\":2,\"1482\":2,\"1483\":1,\"1494\":1,\"1647\":3}}],[\"菱形指向整体\",{\"1\":{\"735\":2}}],[\"且没有达到上限\",{\"1\":{\"1776\":1}}],[\"且looper状态为已注册或已进入时创建新的线程\",{\"1\":{\"1770\":1}}],[\"且有良心提示\",{\"1\":{\"1491\":2}}],[\"且文件后缀改为\",{\"1\":{\"1488\":1}}],[\"且提供对应1x\",{\"1\":{\"1435\":1}}],[\"且此方法不会注册到registry中\",{\"1\":{\"1022\":1}}],[\"且部分可以离开整体而单独存在\",{\"1\":{\"735\":1}}],[\"且按序到达\",{\"1\":{\"181\":1}}],[\"课程是个抽象的东西他不拥有学生\",{\"1\":{\"735\":1}}],[\"学科不严谨\",{\"1\":{\"787\":1}}],[\"学习要高效快速\",{\"1\":{\"1537\":1}}],[\"学习jni\",{\"1\":{\"1530\":1}}],[\"学习顺序\",{\"1\":{\"1530\":1}}],[\"学习ndk\",{\"1\":{\"1530\":1}}],[\"学习kotlin反思\",{\"1\":{\"1509\":1}}],[\"学习成本高\",{\"1\":{\"1481\":1}}],[\"学习很多组件化方案\",{\"1\":{\"1453\":1}}],[\"学习到技术也符合28定律\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"学习一门新语言\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"学习原路返回\",{\"1\":{\"1271\":1}}],[\"学习编写api问题\",{\"1\":{\"757\":1}}],[\"学习算法\",{\"1\":{\"227\":1}}],[\"学生也可能有多名老师\",{\"1\":{\"735\":1}}],[\"带有默认实现方法\",{\"1\":{\"1521\":1}}],[\"带有特别含义\",{\"1\":{\"1283\":1}}],[\"带有优先级的blockingqueue\",{\"1\":{\"958\":1}}],[\"带有箭头的虚线\",{\"1\":{\"738\":1}}],[\"带有箭头且指向自身的直线表示\",{\"1\":{\"738\":1}}],[\"带空心三角形的虚线表示\",{\"1\":{\"738\":1}}],[\"带空心三角形的直线表示\",{\"1\":{\"738\":1}}],[\"带空心菱形和箭头的直线\",{\"1\":{\"738\":1}}],[\"带空心菱形的实心线\",{\"1\":{\"735\":1}}],[\"带实心菱形和箭头的直线表示\",{\"1\":{\"738\":1}}],[\"带实心菱形的实线\",{\"1\":{\"735\":1}}],[\"带箭头的直线表示\",{\"1\":{\"738\":1}}],[\"带箭头的虚线\",{\"1\":{\"735\":1}}],[\"带普通箭头的实心线\",{\"1\":{\"735\":1}}],[\"带三角箭头的虚线\",{\"1\":{\"735\":1}}],[\"带三角箭头的实线\",{\"1\":{\"735\":1}}],[\"箭头及指向\",{\"1\":{\"735\":4}}],[\"箭头指向接口\",{\"1\":{\"735\":1}}],[\"箭头指向父类\",{\"1\":{\"735\":1}}],[\"箭头指向\",{\"1\":{\"735\":2}}],[\"丈夫与妻子关联可以是双向的\",{\"1\":{\"735\":1}}],[\"聚合和解耦是项目架构的基础\",{\"1\":{\"1472\":1}}],[\"聚合关系强调是\",{\"1\":{\"738\":1}}],[\"聚合关系是关联关系的一种\",{\"1\":{\"735\":1}}],[\"聚合关系\",{\"1\":{\"735\":1,\"738\":1}}],[\"聚合\",{\"0\":{\"735\":1},\"1\":{\"735\":3}}],[\"聚焦业务逻辑\",{\"1\":{\"305\":1}}],[\"泛型\",{\"1\":{\"1518\":1}}],[\"泛型擦除\",{\"1\":{\"1202\":1}}],[\"泛型遇到重载后不能编译\",{\"1\":{\"1202\":1}}],[\"泛型编译后成为object\",{\"1\":{\"1202\":1}}],[\"泛型与类型擦除\",{\"0\":{\"1202\":1}}],[\"泛型指向那个\",{\"1\":{\"259\":1}}],[\"泛化关系\",{\"1\":{\"735\":1}}],[\"泛化\",{\"0\":{\"735\":1},\"1\":{\"735\":3}}],[\"配合宽度非0dp\",{\"1\":{\"1346\":1}}],[\"配合ufw防火墙\",{\"0\":{\"721\":1}}],[\"配置deployment\",{\"1\":{\"1960\":1}}],[\"配置多个ssh\",{\"0\":{\"1920\":1}}],[\"配置仓库\",{\"1\":{\"1911\":1}}],[\"配置接入\",{\"0\":{\"1690\":1}}],[\"配置action\",{\"1\":{\"1555\":1}}],[\"配置插件信息\",{\"1\":{\"1555\":1}}],[\"配置jdk\",{\"1\":{\"1555\":1}}],[\"配置还支持容错性trimall不可见字符\",{\"1\":{\"1476\":1}}],[\"配置方式接入组件\",{\"1\":{\"1476\":2}}],[\"配置化生命周期\",{\"1\":{\"1709\":1}}],[\"配置化操作\",{\"1\":{\"1592\":1}}],[\"配置化\",{\"1\":{\"1476\":2}}],[\"配置安卓环境变量\",{\"0\":{\"1371\":1},\"1\":{\"1371\":1}}],[\"配置lookup\",{\"1\":{\"805\":1}}],[\"配置\",{\"1\":{\"805\":1,\"1289\":1,\"1555\":1,\"1613\":1,\"1690\":1}}],[\"配置文件内容\",{\"1\":{\"1952\":1}}],[\"配置文件中\",{\"1\":{\"1709\":1}}],[\"配置文件\",{\"0\":{\"1952\":1},\"1\":{\"793\":1}}],[\"配置跨域\",{\"0\":{\"651\":1}}],[\"配置vue项目\",{\"0\":{\"640\":1}}],[\"配置nginx\",{\"0\":{\"638\":1}}],[\"配置mysql权限\",{\"0\":{\"629\":1}}],[\"配置对象\",{\"1\":{\"169\":1}}],[\"配置intellij\",{\"1\":{\"67\":1}}],[\"配置环境变量\",{\"1\":{\"67\":1}}],[\"配置系统菜单\",{\"1\":{\"14\":1,\"733\":1}}],[\"配置系统用户所属担任职务\",{\"1\":{\"14\":1,\"733\":1}}],[\"配置系统组织机构\",{\"1\":{\"14\":1,\"733\":1}}],[\"配置简单\",{\"1\":{\"12\":1,\"731\":1}}],[\"配置中心选型nacos\",{\"1\":{\"9\":1,\"728\":1}}],[\"配置项的相关说明详见\",{\"1\":{\"0\":1}}],[\"永不消失\",{\"1\":{\"784\":1}}],[\"永不宕机\",{\"1\":{\"711\":1}}],[\"永无bug\",{\"1\":{\"711\":1}}],[\"永久代被移除6岁\",{\"1\":{\"1146\":1}}],[\"永久代\",{\"1\":{\"207\":1}}],[\"永久代对垃圾回收没有显著影响\",{\"1\":{\"207\":1}}],[\"永久代主要存放静态文件\",{\"1\":{\"207\":1}}],[\"佛祖保佑\",{\"1\":{\"711\":1}}],[\"状态流转图\",{\"1\":{\"1795\":1}}],[\"状态更新\",{\"1\":{\"1711\":1}}],[\"状态数据特征\",{\"1\":{\"1708\":1}}],[\"状态转换\",{\"0\":{\"1230\":1}}],[\"状态变化\",{\"1\":{\"867\":1}}],[\"状态\",{\"1\":{\"711\":1}}],[\"状态模式\",{\"0\":{\"505\":1},\"1\":{\"256\":1,\"257\":1,\"395\":1,\"506\":1,\"507\":1,\"1283\":1}}],[\"停止返回线程当前操作\",{\"1\":{\"920\":1}}],[\"停止\",{\"1\":{\"711\":1,\"945\":1,\"1253\":1,\"1271\":2}}],[\"卸载等场景\",{\"1\":{\"1702\":1}}],[\"卸载\",{\"1\":{\"701\":1}}],[\"刷新\",{\"1\":{\"695\":1,\"1383\":1,\"1666\":1}}],[\"└─9632\",{\"1\":{\"694\":1}}],[\"└──\",{\"1\":{\"12\":69,\"731\":69}}],[\"●\",{\"1\":{\"694\":1}}],[\"购物车列表\",{\"1\":{\"668\":1}}],[\"购买\",{\"1\":{\"441\":1}}],[\"售后详情\",{\"1\":{\"668\":1}}],[\"品牌列表\",{\"1\":{\"668\":1}}],[\"外界引用不可见\",{\"1\":{\"1518\":1}}],[\"外部访问通过内部代理\",{\"1\":{\"1716\":1}}],[\"外部不能访问\",{\"1\":{\"1101\":1}}],[\"外部人员代码贡献者编写的代码\",{\"1\":{\"787\":1}}],[\"外部无法访问该端口\",{\"1\":{\"662\":1,\"723\":1}}],[\"外观定义新接口\",{\"1\":{\"264\":1}}],[\"外观对象表示一个子系统\",{\"1\":{\"264\":1}}],[\"外观模式异同\",{\"0\":{\"264\":1}}],[\"外观模式重点对外封装统一高层接口\",{\"1\":{\"262\":1}}],[\"外观模式和中介模式区别\",{\"0\":{\"262\":1}}],[\"外观模式\",{\"0\":{\"451\":1},\"1\":{\"256\":1,\"257\":1,\"394\":1,\"452\":1,\"453\":1}}],[\"浏览器会自动的识别请求是否是跨域请求\",{\"1\":{\"649\":1}}],[\"浏览器\",{\"1\":{\"649\":1}}],[\"商城h5接入支付宝支付\",{\"1\":{\"1358\":1}}],[\"商城阿里云\",{\"1\":{\"615\":1}}],[\"商业项目一般是多个技术点的综合运用\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"商业场景中\",{\"1\":{\"1131\":1}}],[\"商业探索\",{\"0\":{\"5\":1}}],[\"商品分类\",{\"1\":{\"668\":1}}],[\"商品列表\",{\"1\":{\"668\":1}}],[\"授权账号远程连接\",{\"1\":{\"629\":1}}],[\"授权\",{\"0\":{\"613\":1},\"1\":{\"619\":1}}],[\"z564359805\",{\"1\":{\"1970\":1}}],[\"zyw\",{\"1\":{\"1908\":1}}],[\"zygote入口\",{\"1\":{\"1870\":1}}],[\"zygote进程\",{\"1\":{\"1869\":1}}],[\"zygote进程启动\",{\"0\":{\"1859\":1}}],[\"zygote初始化\",{\"1\":{\"1866\":1}}],[\"zygoteconnection\",{\"1\":{\"1863\":1,\"1866\":1}}],[\"zygoteinit$methodandargscaller\",{\"1\":{\"1866\":1}}],[\"zygoteinit\",{\"0\":{\"1862\":1},\"1\":{\"1860\":1,\"1861\":1,\"1863\":1,\"1865\":2,\"1866\":8,\"1869\":1,\"1870\":1}}],[\"zygote启动流程\",{\"1\":{\"1859\":1}}],[\"zygote通过fork生成system\",{\"1\":{\"1856\":1}}],[\"zygote\",{\"1\":{\"1777\":1,\"1787\":1,\"1858\":3,\"1860\":3,\"1861\":2,\"1863\":1,\"1865\":1,\"1870\":2}}],[\"zoom\",{\"1\":{\"1707\":1}}],[\"zilianliuxue\",{\"1\":{\"1583\":1}}],[\"zip文件\",{\"1\":{\"1077\":1}}],[\"zip\",{\"1\":{\"1064\":2,\"1413\":1,\"1549\":2}}],[\"zipentry\",{\"1\":{\"1064\":1}}],[\"z\",{\"1\":{\"984\":2,\"1009\":2,\"1030\":6,\"1289\":2,\"1530\":1}}],[\"zero\",{\"1\":{\"631\":6,\"880\":1,\"1518\":2}}],[\"ze8piw\",{\"1\":{\"608\":1}}],[\"zhihu\",{\"1\":{\"1978\":1}}],[\"zhuanlan\",{\"1\":{\"1978\":1}}],[\"zhousiwei\",{\"1\":{\"1970\":1}}],[\"zhang\",{\"1\":{\"1518\":3}}],[\"zh\",{\"1\":{\"19\":1,\"1317\":1,\"1399\":1,\"1503\":1,\"1682\":1,\"1959\":1}}],[\"核心服务\",{\"1\":{\"1868\":1}}],[\"核心是采用反向代理生成\",{\"1\":{\"1592\":1}}],[\"核心是psi\",{\"1\":{\"1552\":1}}],[\"核心思想\",{\"1\":{\"1482\":1}}],[\"核心逻辑\",{\"0\":{\"1474\":1}}],[\"核心模板两个文件\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"核心模板代码在此路径\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"核心代码\",{\"0\":{\"1717\":1,\"1762\":1,\"1772\":1,\"1778\":1,\"1798\":1,\"1805\":1},\"1\":{\"1383\":1,\"1666\":1}}],[\"核心放在的是业务层面逻辑\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"核心\",{\"1\":{\"882\":1}}],[\"核心方法调用\",{\"0\":{\"993\":1}}],[\"核心方法\",{\"0\":{\"1770\":1},\"1\":{\"876\":1}}],[\"核心类\",{\"1\":{\"1746\":3}}],[\"核心类型spi\",{\"1\":{\"808\":1}}],[\"核心类型api\",{\"1\":{\"808\":1}}],[\"核心类尽量有接口和抽象类\",{\"1\":{\"753\":1}}],[\"核心类为\",{\"1\":{\"360\":1}}],[\"核心原理是抽象\",{\"1\":{\"753\":1}}],[\"核心内容\",{\"1\":{\"631\":1}}],[\"核心关注点\",{\"1\":{\"604\":1}}],[\"环境配置\",{\"1\":{\"1555\":1}}],[\"环境变量\",{\"1\":{\"1534\":2}}],[\"环境变量生效\",{\"1\":{\"1371\":1,\"1534\":1}}],[\"环境变量会影响平台移植性\",{\"1\":{\"793\":1}}],[\"环境变量和命令行选项\",{\"1\":{\"793\":1}}],[\"环境搭建\",{\"0\":{\"601\":1}}],[\"环境设置\",{\"0\":{\"31\":1},\"1\":{\"31\":1}}],[\"风险\",{\"1\":{\"598\":1}}],[\"需添加网络权限\",{\"1\":{\"1713\":1}}],[\"需求评审\",{\"1\":{\"598\":1}}],[\"需要配置多个key\",{\"1\":{\"1920\":1}}],[\"需要打aar的module下build\",{\"1\":{\"1905\":1}}],[\"需要运行\",{\"1\":{\"1846\":1}}],[\"需要唤醒poll循环\",{\"1\":{\"1826\":1}}],[\"需要以下哪种权限\",{\"1\":{\"1712\":2}}],[\"需要以下那种权限\",{\"1\":{\"1712\":1}}],[\"需要设置\",{\"1\":{\"1711\":1}}],[\"需要重新发布新的测试版本追加用户\",{\"1\":{\"1708\":1}}],[\"需要申请权限\",{\"1\":{\"1707\":1}}],[\"需要到\",{\"1\":{\"1707\":1}}],[\"需要导入以下哪个模块\",{\"1\":{\"1702\":1}}],[\"需要改动代码点很多\",{\"1\":{\"1588\":1}}],[\"需要经验\",{\"1\":{\"1481\":1}}],[\"需要标注出来\",{\"1\":{\"1445\":1}}],[\"需要手动开启模拟器\",{\"1\":{\"1413\":1}}],[\"需要添加配置文件\",{\"1\":{\"1405\":1}}],[\"需要在代码中设置如下代码才可以正常进行网络请求\",{\"1\":{\"1405\":1}}],[\"需要自定义clipper\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"需要什么样子一个技术框图\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"需要什么功能\",{\"1\":{\"313\":1}}],[\"需要移动端配合拦截指定url\",{\"1\":{\"1358\":1}}],[\"需要移动大量元素\",{\"1\":{\"346\":1}}],[\"需要编写上传蒲公英平台的脚本\",{\"1\":{\"1323\":1}}],[\"需要与其他数据和行为一起使用才有意义\",{\"1\":{\"1283\":1}}],[\"需要变换思维方式\",{\"1\":{\"1268\":1}}],[\"需要同步方法\",{\"1\":{\"1233\":1}}],[\"需要用户态和内核态中来回切换\",{\"1\":{\"1225\":1}}],[\"需要系统调用\",{\"1\":{\"1225\":1,\"1238\":1}}],[\"需要额外的时间\",{\"1\":{\"1209\":1}}],[\"需要额外的内存\",{\"1\":{\"1209\":1}}],[\"需要额外的计数器\",{\"1\":{\"1209\":1}}],[\"需要实现throwable\",{\"1\":{\"1035\":1}}],[\"需要等待全局安全点\",{\"1\":{\"846\":1}}],[\"需要保持api编写的一致性\",{\"1\":{\"757\":1}}],[\"需要更多人来写api\",{\"1\":{\"757\":1}}],[\"需要梳理大家需要遵守的规范\",{\"1\":{\"757\":1}}],[\"需要人工注册路由\",{\"1\":{\"668\":1}}],[\"需要继承\",{\"1\":{\"364\":1}}],[\"需要遍历所有\",{\"1\":{\"359\":1}}],[\"需要把键值对重新计算桶下标\",{\"1\":{\"353\":1}}],[\"需要注意的是\",{\"1\":{\"352\":2}}],[\"需要存储的键值对数量为\",{\"1\":{\"352\":1}}],[\"需要比较操作前后\",{\"1\":{\"335\":1}}],[\"需要调用\",{\"1\":{\"333\":1}}],[\"需要取整\",{\"1\":{\"332\":1}}],[\"需要使用\",{\"1\":{\"332\":1}}],[\"需要代码调整或增加功能时\",{\"1\":{\"311\":1}}],[\"需要过多注释\",{\"1\":{\"265\":1}}],[\"需要那个接口\",{\"1\":{\"259\":1}}],[\"需要特别指定泛型类\",{\"1\":{\"259\":1}}],[\"需要外界一个履历说明自己可以\",{\"1\":{\"230\":1}}],[\"需要概念定义清晰\",{\"1\":{\"227\":1}}],[\"需要从主存中读取\",{\"1\":{\"167\":1}}],[\"需要联网\",{\"1\":{\"103\":1}}],[\"需要再绑定host\",{\"1\":{\"25\":1}}],[\"需要激活码\",{\"1\":{\"25\":1}}],[\"流转状态管理\",{\"1\":{\"1702\":1}}],[\"流转任务管理服务为开发者提供了以下哪几项功能\",{\"1\":{\"1702\":1}}],[\"流转架构中\",{\"1\":{\"1702\":2}}],[\"流转进行\",{\"1\":{\"1702\":1}}],[\"流转中\",{\"1\":{\"1702\":2}}],[\"流水账式记录\",{\"1\":{\"1521\":1}}],[\"流量控制\",{\"1\":{\"907\":1}}],[\"流量控制框架选型sentinel\",{\"1\":{\"9\":1,\"728\":1}}],[\"流程\",{\"0\":{\"1796\":1},\"1\":{\"598\":1}}],[\"预加载资源为了fork做准备\",{\"1\":{\"1862\":1}}],[\"预加载类和资源\",{\"1\":{\"1862\":2}}],[\"预知风险\",{\"1\":{\"598\":1}}],[\"预计11月30日开发提测\",{\"1\":{\"595\":1}}],[\"人工智能领域\",{\"1\":{\"1530\":1}}],[\"人工注册\",{\"0\":{\"668\":1}}],[\"人类对世界认识主要来源是经验\",{\"1\":{\"787\":1}}],[\"人员组合搭配不当\",{\"1\":{\"598\":1}}],[\"人在解决问题时有两大问题\",{\"1\":{\"230\":1}}],[\"遇见突发情况也会出现风险\",{\"1\":{\"598\":1}}],[\"遇到这个问题的同学点个赞👍\",{\"1\":{\"1323\":1}}],[\"遇到\",{\"1\":{\"1169\":1}}],[\"遇到遗漏概念\",{\"1\":{\"227\":1}}],[\"遇到问题\",{\"0\":{\"227\":1}}],[\"凡是只要有可能\",{\"1\":{\"760\":1}}],[\"凡是出现几种指标特征\",{\"1\":{\"598\":1}}],[\"凡事讲流程的人\",{\"1\":{\"598\":1}}],[\"意味着在某一天在该环节出现风险\",{\"1\":{\"598\":1}}],[\"意外情况需要依赖其他内存\",{\"1\":{\"206\":1}}],[\"责任职能划分\",{\"1\":{\"1262\":1}}],[\"责任心不强\",{\"1\":{\"598\":1}}],[\"责任链\",{\"1\":{\"537\":1}}],[\"责任链模式\",{\"0\":{\"535\":1},\"1\":{\"256\":1,\"257\":1,\"395\":1,\"536\":1,\"537\":1}}],[\"近期思考\",{\"1\":{\"598\":1}}],[\"放到当前方法的栈帧的本地变量中\",{\"1\":{\"993\":1}}],[\"放入f\",{\"1\":{\"1127\":1}}],[\"放入已加载列表\",{\"1\":{\"979\":1}}],[\"放入桶内\",{\"1\":{\"285\":1}}],[\"放在第2期开发\",{\"1\":{\"595\":1}}],[\"余下功能\",{\"1\":{\"595\":1}}],[\"节点创建失败\",{\"1\":{\"1755\":1}}],[\"节奏\",{\"1\":{\"595\":1}}],[\"节奏工作\",{\"1\":{\"595\":1}}],[\"节省指针定位开销\",{\"1\":{\"1118\":1}}],[\"节省空间\",{\"1\":{\"168\":1}}],[\"节省时间\",{\"1\":{\"168\":1}}],[\"金服项目按照\",{\"1\":{\"595\":1}}],[\"金服app\",{\"0\":{\"595\":1}}],[\"移除handler所有空消息\",{\"1\":{\"1851\":1}}],[\"移除屏障\",{\"1\":{\"1849\":1}}],[\"移除fd\",{\"1\":{\"1828\":1}}],[\"移除不想要函数\",{\"1\":{\"1521\":1}}],[\"移除不可以\",{\"1\":{\"802\":1}}],[\"移除调试代码\",{\"1\":{\"1473\":1}}],[\"移除对参数赋值\",{\"1\":{\"1280\":1}}],[\"移除对象\",{\"1\":{\"381\":1}}],[\"移除控制标志\",{\"1\":{\"1277\":1}}],[\"移除设值函数\",{\"1\":{\"1274\":1}}],[\"移除参数\",{\"1\":{\"1274\":1}}],[\"移除中间人\",{\"1\":{\"1259\":1}}],[\"移除没有同步需求的锁\",{\"1\":{\"1243\":1}}],[\"移除并推入调用者栈帧的操作数栈顶\",{\"1\":{\"993\":1}}],[\"移除工作线程\",{\"1\":{\"950\":1}}],[\"移除是可以的\",{\"1\":{\"808\":1}}],[\"移除是不容许的\",{\"1\":{\"808\":1}}],[\"移除或添加一个类或者接口\",{\"1\":{\"802\":1}}],[\"移除方法或字段\",{\"1\":{\"802\":1}}],[\"移除一个比较难\",{\"1\":{\"799\":1}}],[\"移除部分api保留一段时间\",{\"1\":{\"784\":1}}],[\"移动端ui验收规范\",{\"0\":{\"1438\":1}}],[\"移动端ui开发规范\",{\"0\":{\"1435\":1}}],[\"移动端按照\",{\"1\":{\"595\":1}}],[\"移动端开户\",{\"1\":{\"595\":1}}],[\"抽调后端资源以996方式支持开发\",{\"1\":{\"595\":1}}],[\"抽象模板参数\",{\"1\":{\"1604\":1}}],[\"抽象模板关键参数\",{\"1\":{\"1604\":1}}],[\"抽象工作\",{\"1\":{\"1534\":1}}],[\"抽象工厂\",{\"0\":{\"260\":1,\"426\":1},\"1\":{\"260\":1,\"427\":1,\"428\":1}}],[\"抽象工厂模式\",{\"1\":{\"256\":1,\"257\":1,\"393\":1}}],[\"抽象出span简单\",{\"0\":{\"1311\":1}}],[\"抽象语法树\",{\"1\":{\"1200\":1}}],[\"抽象类\",{\"1\":{\"1518\":1}}],[\"抽象类一个优势\",{\"1\":{\"802\":1}}],[\"抽象类建议不要多用\",{\"1\":{\"802\":1}}],[\"抽象类与接口\",{\"0\":{\"223\":1}}],[\"抽象不应该依赖细节\",{\"1\":{\"753\":1}}],[\"抽象优点\",{\"1\":{\"753\":1}}],[\"抽象约束\",{\"1\":{\"752\":1}}],[\"抽象\",{\"1\":{\"750\":1}}],[\"周四早上10点开会同步进度民生银行和ios审核进度\",{\"1\":{\"595\":1}}],[\"周期性检查栈顶\",{\"1\":{\"1209\":1}}],[\"周期性会议\",{\"1\":{\"586\":1}}],[\"周期性例会\",{\"1\":{\"586\":2}}],[\"零资产更换银行卡\",{\"1\":{\"595\":1}}],[\"资料详细\",{\"1\":{\"1482\":1}}],[\"资产查询\",{\"1\":{\"595\":1}}],[\"资源许可\",{\"1\":{\"907\":1}}],[\"资源池复用\",{\"1\":{\"824\":1}}],[\"资源限制的挑战\",{\"1\":{\"824\":1}}],[\"资源限制挑战\",{\"0\":{\"824\":1}}],[\"资源协调与沟通\",{\"1\":{\"598\":1}}],[\"资源冲突\",{\"1\":{\"598\":1}}],[\"资源\",{\"1\":{\"586\":1}}],[\"资源复用\",{\"1\":{\"305\":1}}],[\"充值\",{\"1\":{\"595\":1}}],[\"签约\",{\"1\":{\"595\":2}}],[\"签名文件密码\",{\"1\":{\"106\":1}}],[\"签名文件绝对路径\",{\"1\":{\"106\":1}}],[\"签名不对\",{\"0\":{\"106\":1}}],[\"签名完成\",{\"1\":{\"103\":1}}],[\"签名要在加固宝中配置好\",{\"1\":{\"103\":1}}],[\"民生详情开发提测\",{\"1\":{\"595\":1}}],[\"民生沟通协调问题\",{\"1\":{\"595\":1}}],[\"民生上线不可控因素多\",{\"1\":{\"595\":1}}],[\"民生二类电子账户\",{\"1\":{\"595\":1}}],[\"民生银行上线流程复杂\",{\"1\":{\"595\":1}}],[\"民生项目总结\",{\"0\":{\"595\":1}}],[\"敏捷开放\",{\"1\":{\"589\":1}}],[\"胜任和关系\",{\"1\":{\"589\":1}}],[\"成员引用\",{\"1\":{\"1521\":1}}],[\"成员\",{\"1\":{\"1518\":1}}],[\"成员变量\",{\"1\":{\"735\":3}}],[\"成为上下文管理者\",{\"1\":{\"1788\":1}}],[\"成为组件化项目\",{\"1\":{\"1500\":1}}],[\"成为项目瓶颈\",{\"1\":{\"757\":1}}],[\"成果易被其他人摘桃子\",{\"1\":{\"1268\":1}}],[\"成功提示\",{\"1\":{\"1922\":1}}],[\"成功地获取messagequeue中的下一条即将要执行的消息\",{\"1\":{\"1846\":1}}],[\"成功后\",{\"1\":{\"1713\":1}}],[\"成功后返回data为空\",{\"1\":{\"1417\":1}}],[\"成功\",{\"1\":{\"847\":1}}],[\"成长变化\",{\"1\":{\"589\":1}}],[\"成本较高\",{\"1\":{\"314\":1}}],[\"沟通双方就是api用户和api设计者\",{\"1\":{\"796\":1}}],[\"沟通\",{\"1\":{\"589\":1}}],[\"质量\",{\"1\":{\"586\":1}}],[\"报告崩溃本地代码\",{\"1\":{\"1583\":1}}],[\"报告写得好\",{\"1\":{\"586\":1}}],[\"报告不要平铺\",{\"1\":{\"586\":1}}],[\"报错\",{\"1\":{\"67\":1,\"73\":1,\"603\":1}}],[\"亮点\",{\"1\":{\"586\":1}}],[\"协调资源\",{\"1\":{\"586\":2}}],[\"协议就要花钱\",{\"1\":{\"1307\":1}}],[\"协议客户端\",{\"1\":{\"12\":1,\"731\":1}}],[\"协议\",{\"1\":{\"12\":1,\"649\":1,\"731\":1,\"793\":1,\"1767\":1}}],[\"领导不认可的\",{\"1\":{\"598\":1}}],[\"领导不懂细节\",{\"1\":{\"586\":1}}],[\"领域能力依赖\",{\"1\":{\"12\":1,\"731\":1}}],[\"范围检查消除\",{\"1\":{\"1210\":1}}],[\"范围\",{\"1\":{\"586\":1}}],[\"陈桐\",{\"1\":{\"1952\":1}}],[\"陈桐原创\",{\"1\":{\"580\":1}}],[\"陈总\",{\"1\":{\"531\":1}}],[\"热度衰减\",{\"1\":{\"1209\":1}}],[\"热点探测\",{\"0\":{\"1209\":1}}],[\"热点代码\",{\"1\":{\"1208\":1}}],[\"热修复技术\",{\"0\":{\"1432\":1}}],[\"热修复\",{\"1\":{\"573\":1,\"1432\":3,\"1561\":1}}],[\"热题大纲\",{\"0\":{\"302\":1}}],[\"袁辉辉博客\",{\"1\":{\"572\":1}}],[\"罗升阳\",{\"1\":{\"572\":1}}],[\"鸣谢\",{\"0\":{\"572\":1}}],[\"行文力求简洁\",{\"1\":{\"571\":1}}],[\"行为\",{\"1\":{\"793\":1}}],[\"行为是平行关系\",{\"1\":{\"507\":1}}],[\"行为型\",{\"0\":{\"481\":1,\"487\":1,\"493\":1,\"499\":1,\"505\":1,\"511\":1,\"517\":1,\"523\":1,\"529\":1,\"535\":1,\"541\":1}}],[\"行为型设计模式\",{\"0\":{\"395\":1},\"1\":{\"257\":2,\"390\":1}}],[\"行为型模式\",{\"1\":{\"256\":1}}],[\"阐明运作流程\",{\"1\":{\"571\":1}}],[\"追求极致\",{\"1\":{\"558\":1}}],[\"动画效果是根据项目优先级\",{\"1\":{\"1447\":1}}],[\"动画效果\",{\"0\":{\"1447\":1},\"2\":{\"1466\":1}}],[\"动机\",{\"1\":{\"558\":1}}],[\"动态配置\",{\"1\":{\"1622\":1}}],[\"动态生成模板代码\",{\"1\":{\"1604\":1}}],[\"动态生成字节码效率高\",{\"1\":{\"1494\":1}}],[\"动态插入文件\",{\"1\":{\"1552\":2}}],[\"动态库\",{\"1\":{\"1534\":1}}],[\"动态分配\",{\"1\":{\"1772\":1}}],[\"动态分析对象动态作用域\",{\"1\":{\"1212\":1}}],[\"动态分派\",{\"1\":{\"1188\":1}}],[\"动态链接\",{\"0\":{\"1184\":1}}],[\"动态支持\",{\"1\":{\"1169\":1}}],[\"动态年龄判断\",{\"1\":{\"1146\":1}}],[\"动态绑定\",{\"1\":{\"991\":4}}],[\"动态加载class\",{\"1\":{\"977\":1}}],[\"动态给对象添加新功能\",{\"1\":{\"470\":1}}],[\"动态参数配置\",{\"1\":{\"422\":1}}],[\"动态部署\",{\"1\":{\"314\":1}}],[\"动态化\",{\"1\":{\"305\":2}}],[\"动态规划动态规划本质是数学公式的推导展开\",{\"1\":{\"298\":1}}],[\"动态代理基础上\",{\"1\":{\"1592\":1}}],[\"动态代理第二种通用式写法\",{\"1\":{\"259\":1}}],[\"动态代理一个代理律师\",{\"1\":{\"259\":1,\"447\":1}}],[\"动态代理\",{\"1\":{\"259\":3,\"447\":2}}],[\"动态代理写法\",{\"0\":{\"259\":1}}],[\"动态代理和静态代理区别\",{\"0\":{\"258\":1}}],[\"动态的给对象添加新的功能\",{\"1\":{\"257\":1,\"394\":1}}],[\"动态对象年龄判定\",{\"1\":{\"184\":1}}],[\"语言相互调用的\",{\"1\":{\"1530\":1}}],[\"语言和\",{\"1\":{\"1530\":1}}],[\"语言\",{\"1\":{\"1317\":1}}],[\"语句\",{\"1\":{\"1277\":1}}],[\"语句就放在这一层\",{\"1\":{\"311\":1}}],[\"语义清晰\",{\"1\":{\"1518\":2}}],[\"语义简洁\",{\"1\":{\"1512\":1}}],[\"语义更清晰\",{\"1\":{\"1274\":1}}],[\"语义分析主要任务是对结构上源程序上下文有关性质审查\",{\"1\":{\"1200\":1}}],[\"语义分析与字节码生成\",{\"0\":{\"1200\":1}}],[\"语法上类java\",{\"1\":{\"1689\":1}}],[\"语法主要\",{\"1\":{\"1601\":1}}],[\"语法\",{\"1\":{\"1534\":1}}],[\"语法表达式\",{\"1\":{\"1521\":1}}],[\"语法清晰\",{\"1\":{\"1518\":1}}],[\"语法大概掌握\",{\"1\":{\"1509\":1}}],[\"语法糖清单\",{\"1\":{\"1512\":1}}],[\"语法糖\",{\"0\":{\"1201\":1}}],[\"语法糖对功能没有影响\",{\"1\":{\"1200\":1}}],[\"语法树能保证结构正确\",{\"1\":{\"1200\":1}}],[\"语法分析是根据token序列构造抽象语法树ast的过程\",{\"1\":{\"1198\":1}}],[\"语法分析\",{\"1\":{\"1198\":1}}],[\"语法简介\",{\"0\":{\"558\":1}}],[\"弱全局引用有点类似于\",{\"1\":{\"1530\":1}}],[\"弱化了容器类与遍历算法之间的关系\",{\"1\":{\"543\":1}}],[\"弱引用的特点是\",{\"1\":{\"385\":1}}],[\"弱引用\",{\"1\":{\"154\":1,\"1126\":1,\"1527\":1,\"1530\":1}}],[\"女\",{\"1\":{\"543\":3}}],[\"程序结构接口\",{\"1\":{\"1552\":1}}],[\"程序和着色器链接\",{\"1\":{\"1540\":1}}],[\"程序可持续特点有四个特点\",{\"1\":{\"1253\":1}}],[\"程序解释执行\",{\"1\":{\"1207\":1}}],[\"程序只有到达安全点\",{\"1\":{\"1136\":1}}],[\"程序计数器\",{\"1\":{\"1115\":1}}],[\"程序计算通过栈stack来实现\",{\"1\":{\"271\":1,\"1087\":1}}],[\"程序执行流最小单元\",{\"1\":{\"942\":1}}],[\"程序的执行速度受限于计算机硬件资源或软件资源\",{\"1\":{\"824\":1}}],[\"程序输入输出文本也是api\",{\"1\":{\"793\":1}}],[\"程序猿\",{\"1\":{\"543\":1}}],[\"男\",{\"1\":{\"543\":1}}],[\"性价比不高\",{\"1\":{\"1128\":1}}],[\"性别\",{\"1\":{\"543\":1,\"1711\":1}}],[\"性能分析器能够对以下哪几方面资源进行使用率分析\",{\"1\":{\"1702\":1}}],[\"性能好\",{\"1\":{\"1647\":1}}],[\"性能监控\",{\"1\":{\"1561\":1}}],[\"性能监控调优\",{\"0\":{\"1149\":1}}],[\"性能\",{\"1\":{\"954\":1}}],[\"性能测试工具\",{\"1\":{\"1320\":1}}],[\"性能测试\",{\"0\":{\"834\":1}}],[\"性能也会不佳\",{\"1\":{\"314\":1}}],[\"性能较好\",{\"1\":{\"312\":1}}],[\"性能优化成为可能\",{\"1\":{\"305\":1}}],[\"性能优化\",{\"0\":{\"220\":1}}],[\"年轻代\",{\"1\":{\"1133\":1}}],[\"年龄\",{\"1\":{\"543\":1,\"1711\":1}}],[\"年代都进行回收\",{\"1\":{\"207\":1}}],[\"姓名\",{\"1\":{\"543\":1}}],[\"雇员\",{\"1\":{\"543\":1}}],[\"审批\",{\"1\":{\"537\":1}}],[\"额度\",{\"1\":{\"537\":1}}],[\"拥有权限\",{\"1\":{\"537\":1}}],[\"卖大米项目\",{\"1\":{\"531\":1}}],[\"王总\",{\"1\":{\"531\":1}}],[\"马云\",{\"1\":{\"531\":1,\"1346\":1}}],[\"花钱项目\",{\"1\":{\"531\":1}}],[\"甄嬛来了\",{\"1\":{\"519\":1}}],[\"观察者同步数据\",{\"1\":{\"1283\":1}}],[\"观察者\",{\"1\":{\"519\":2,\"1699\":1}}],[\"观察者模式\",{\"0\":{\"517\":1},\"1\":{\"256\":1,\"257\":1,\"395\":1,\"518\":1}}],[\"向管道写端写入字符\",{\"1\":{\"1828\":1}}],[\"向管道mwakeeventfd写入字符1\",{\"1\":{\"1827\":1}}],[\"向binder驱动发送ipc数据\",{\"1\":{\"1796\":1}}],[\"向zygote进程发起创建socket消息\",{\"1\":{\"1777\":1}}],[\"向当前线程的todo队列添加binder\",{\"1\":{\"1770\":1}}],[\"向目标进程的target\",{\"1\":{\"1770\":1}}],[\"向用户空间写入br\",{\"1\":{\"1761\":1}}],[\"向服务器提交表单数据\",{\"1\":{\"1712\":1}}],[\"向设备\",{\"1\":{\"1702\":1}}],[\"向现有接口中添加方法\",{\"1\":{\"802\":1}}],[\"向现有继承体系中添加一个接口或者类\",{\"1\":{\"802\":1}}],[\"向后兼容不可能\",{\"1\":{\"802\":1}}],[\"向后兼容\",{\"1\":{\"802\":1}}],[\"向api增加一个方法容易\",{\"1\":{\"799\":1}}],[\"向下\",{\"1\":{\"489\":1}}],[\"向上汇报\",{\"1\":{\"586\":1}}],[\"向上管理\",{\"1\":{\"586\":1}}],[\"向上\",{\"1\":{\"489\":1}}],[\"向右\",{\"1\":{\"489\":1}}],[\"向左\",{\"1\":{\"489\":1}}],[\"向关心组件提issue\",{\"1\":{\"305\":1}}],[\"输出位置\",{\"1\":{\"1604\":1}}],[\"输出\",{\"1\":{\"1534\":1}}],[\"输出jvm参数\",{\"1\":{\"1151\":1}}],[\"输出柯南现在的年龄\",{\"1\":{\"900\":1}}],[\"输出结果\",{\"1\":{\"884\":1,\"923\":1,\"1188\":2,\"1203\":1,\"1534\":1}}],[\"输出流\",{\"1\":{\"870\":1}}],[\"输出电压\",{\"1\":{\"477\":1}}],[\"输入以下命令\",{\"1\":{\"1341\":1}}],[\"输入符号表\",{\"1\":{\"1197\":1}}],[\"输入变量\",{\"1\":{\"1101\":1}}],[\"输入流于输出进行连接\",{\"1\":{\"870\":1}}],[\"输入密码\",{\"1\":{\"612\":1,\"620\":1}}],[\"输入有序数组\",{\"1\":{\"298\":1}}],[\"输入app包名\",{\"1\":{\"106\":1}}],[\"输入hosts文件的路径\",{\"1\":{\"25\":1}}],[\"层级调用改为链式调用\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"层层给装饰方法添加新内容\",{\"1\":{\"471\":1}}],[\"层与层之间通过接口通信\",{\"1\":{\"311\":1}}],[\"穿鞋子\",{\"1\":{\"471\":2}}],[\"穿牛仔裤\",{\"1\":{\"471\":2}}],[\"咖啡\",{\"1\":{\"459\":2}}],[\"咖啡制造\",{\"1\":{\"459\":1}}],[\"挂断\",{\"1\":{\"453\":2}}],[\"拨电话\",{\"1\":{\"453\":1}}],[\"拍照\",{\"1\":{\"453\":2}}],[\"坐票\",{\"1\":{\"441\":1}}],[\"西安\",{\"1\":{\"441\":1}}],[\"青岛\",{\"1\":{\"441\":2}}],[\"北京\",{\"1\":{\"441\":3}}],[\"火车票\",{\"1\":{\"441\":1}}],[\"价格\",{\"1\":{\"441\":2}}],[\"铺位\",{\"1\":{\"441\":1}}],[\"目前未使用的协议\",{\"1\":{\"1755\":1}}],[\"目前android中不存在小于999的uid\",{\"1\":{\"1717\":1}}],[\"目前retrofit\",{\"1\":{\"1595\":1}}],[\"目前手机上opengl使用渲染管线\",{\"1\":{\"1540\":1}}],[\"目前组件化文章很多\",{\"1\":{\"1500\":1}}],[\"目的就是为了清空管道内容\",{\"1\":{\"1828\":1}}],[\"目的\",{\"1\":{\"1259\":1,\"1311\":1,\"1312\":1,\"1313\":1,\"1435\":1}}],[\"目的是为了提高\",{\"1\":{\"845\":1}}],[\"目的地\",{\"1\":{\"441\":1}}],[\"目标等待队列\",{\"1\":{\"1770\":1}}],[\"目标todo队列\",{\"1\":{\"1770\":1}}],[\"目标binder节点\",{\"1\":{\"1770\":1}}],[\"目标binder线程创建后\",{\"1\":{\"1755\":1}}],[\"目标线程\",{\"1\":{\"1770\":1}}],[\"目标进程\",{\"1\":{\"1755\":1,\"1770\":1}}],[\"目标app的包名\",{\"1\":{\"1326\":1}}],[\"目标方法复制到调用方法\",{\"1\":{\"1211\":1}}],[\"目标用户需求只想收发邮件\",{\"1\":{\"793\":1}}],[\"目标管理法\",{\"0\":{\"589\":1},\"1\":{\"589\":1}}],[\"目标必须就有明确的截止期限\",{\"1\":{\"583\":1}}],[\"目标必须和其他目标具有相关性\",{\"1\":{\"583\":1}}],[\"目标必须是可达到的\",{\"1\":{\"583\":1}}],[\"目标必须是可以衡量的\",{\"1\":{\"583\":1}}],[\"目标是具体的\",{\"1\":{\"583\":1}}],[\"目标\",{\"1\":{\"559\":1,\"589\":1,\"1253\":1,\"1280\":1}}],[\"目录下的所有文件\",{\"1\":{\"1952\":1}}],[\"目录下\",{\"1\":{\"1867\":1}}],[\"目录结构\",{\"1\":{\"1555\":1}}],[\"目录分析\",{\"1\":{\"1413\":1}}],[\"目录抽象类\",{\"1\":{\"465\":1}}],[\"目录\",{\"1\":{\"67\":1,\"1527\":1,\"1530\":1,\"1533\":1}}],[\"始发地\",{\"1\":{\"441\":1}}],[\"吉普车\",{\"1\":{\"435\":2}}],[\"具体参考\",{\"1\":{\"1604\":1}}],[\"具体代码位置去\",{\"1\":{\"1488\":1,\"1491\":1}}],[\"具体实现\",{\"1\":{\"428\":1}}],[\"具有原子性\",{\"1\":{\"861\":1}}],[\"具有\",{\"1\":{\"322\":1}}],[\"汽车工厂\",{\"1\":{\"428\":1}}],[\"发信时间\",{\"1\":{\"1831\":1}}],[\"发起进程先通过binder发送消息给system\",{\"1\":{\"1869\":1}}],[\"发起进程的线程不一定是在binder线程\",{\"1\":{\"1776\":2}}],[\"发起者一定是binder线程\",{\"1\":{\"1776\":1}}],[\"发起端线程向binder\",{\"1\":{\"1755\":1}}],[\"发起网络请求\",{\"1\":{\"1712\":1}}],[\"发起网络数据请求需要导入以下哪个模块\",{\"1\":{\"1708\":1}}],[\"发起验收行为\",{\"1\":{\"1441\":1}}],[\"发送消息\",{\"1\":{\"1839\":1}}],[\"发送消息维护到\",{\"1\":{\"1826\":1}}],[\"发送消息sendmessage和唤醒\",{\"0\":{\"1826\":1}}],[\"发送到用户空间处理\",{\"1\":{\"1768\":1}}],[\"发送死亡通知sendobituary\",{\"1\":{\"1761\":1}}],[\"发送端把binder\",{\"1\":{\"1753\":1}}],[\"发送\",{\"1\":{\"1546\":1}}],[\"发送者\",{\"1\":{\"489\":1}}],[\"发布开源库\",{\"1\":{\"1911\":1}}],[\"发布开放式测试版本后\",{\"1\":{\"1708\":4}}],[\"发布后的应用可以在哪里获取\",{\"1\":{\"1712\":1}}],[\"发布后的鸿蒙应用可以在哪里获取\",{\"1\":{\"1708\":1}}],[\"发布公共事件\",{\"1\":{\"1709\":1}}],[\"发布\",{\"1\":{\"1708\":1,\"1712\":1}}],[\"发布应用时需要创建证书\",{\"1\":{\"1712\":1}}],[\"发布应用时需要创建\",{\"1\":{\"1708\":1,\"1712\":1}}],[\"发布应用时要创建证书\",{\"1\":{\"1708\":1}}],[\"发布证书\",{\"1\":{\"1708\":1,\"1712\":1}}],[\"发布者首先要在\",{\"1\":{\"1702\":2}}],[\"发布者只需关心是否合并子组件功能\",{\"1\":{\"1472\":1}}],[\"发布和维护\",{\"1\":{\"772\":1}}],[\"发现异步消息优先执行\",{\"1\":{\"1846\":1}}],[\"发现当前没有空闲线程\",{\"1\":{\"1776\":1}}],[\"发现此类技术解决方案\",{\"1\":{\"1561\":1}}],[\"发现方法经常出现\",{\"1\":{\"1209\":1}}],[\"发现不在安全点线程\",{\"1\":{\"1136\":1}}],[\"发生回调\",{\"1\":{\"1828\":2}}],[\"发生超时\",{\"1\":{\"1828\":1}}],[\"发生错误\",{\"1\":{\"1828\":1}}],[\"发生的概率\",{\"1\":{\"881\":1}}],[\"发生频率比较低\",{\"1\":{\"207\":1}}],[\"发生频率比较高\",{\"1\":{\"207\":1}}],[\"发动机\",{\"1\":{\"428\":1}}],[\"省略条件表达式\",{\"1\":{\"1277\":1}}],[\"省略主类名称\",{\"1\":{\"1151\":1}}],[\"省略driector\",{\"1\":{\"422\":1}}],[\"省略构建者\",{\"1\":{\"422\":1}}],[\"策略\",{\"1\":{\"422\":1}}],[\"策略模式重在整个算法的替换\",{\"1\":{\"263\":1}}],[\"策略模式和状态模式区别\",{\"0\":{\"263\":1}}],[\"策略模式\",{\"0\":{\"511\":1},\"1\":{\"256\":1,\"257\":1,\"395\":1,\"512\":1,\"513\":1,\"1277\":1,\"1283\":1}}],[\"例个栗子\",{\"1\":{\"1779\":1}}],[\"例子如下\",{\"1\":{\"1613\":1}}],[\"例子1\",{\"1\":{\"447\":1}}],[\"例子\",{\"0\":{\"414\":1,\"435\":1}}],[\"例如android的system\",{\"1\":{\"1752\":1}}],[\"例如网页的前进\",{\"1\":{\"1713\":1}}],[\"例如现在要实现一个广告弹窗\",{\"1\":{\"1708\":1}}],[\"例如饿了么hermes\",{\"1\":{\"1481\":1}}],[\"例如上面的\",{\"1\":{\"349\":1}}],[\"例如根据一个范围查找元素的操作\",{\"1\":{\"322\":1}}],[\"例如bug\",{\"1\":{\"61\":1}}],[\"例如\",{\"1\":{\"12\":2,\"731\":2,\"735\":1,\"991\":1,\"1093\":1,\"1587\":1,\"1709\":3,\"1776\":1}}],[\"浅拷贝\",{\"1\":{\"409\":1}}],[\"浅拷贝其内容\",{\"1\":{\"409\":1}}],[\"浅拷贝与深拷贝\",{\"1\":{\"409\":1}}],[\"枚举根节点过程中\",{\"1\":{\"1135\":1}}],[\"枚举根节点\",{\"0\":{\"1135\":1}}],[\"枚举默认线程安全\",{\"1\":{\"405\":1}}],[\"枚举法式单例\",{\"1\":{\"405\":1}}],[\"枚举单例\",{\"1\":{\"405\":1}}],[\"懒汉式单例\",{\"1\":{\"405\":1}}],[\"懒汉\",{\"0\":{\"405\":1}}],[\"懒加载\",{\"1\":{\"168\":1}}],[\"非主线程出现timeout则线程退出\",{\"1\":{\"1778\":1}}],[\"非oneway模式下\",{\"1\":{\"1755\":1}}],[\"非java\",{\"1\":{\"1552\":1}}],[\"非特殊情况下\",{\"1\":{\"1443\":1}}],[\"非必传\",{\"1\":{\"1377\":1}}],[\"非阻塞同步\",{\"0\":{\"1239\":1}}],[\"非阻塞算法\",{\"1\":{\"895\":1}}],[\"非原子操作\",{\"1\":{\"1221\":1}}],[\"非数组类型\",{\"1\":{\"1009\":1}}],[\"非公平锁\",{\"1\":{\"884\":1,\"1238\":1}}],[\"非零资产换卡\",{\"1\":{\"595\":1}}],[\"非线程安全\",{\"1\":{\"404\":1,\"1647\":1}}],[\"非常有研究价值\",{\"1\":{\"1561\":1}}],[\"非常好的总线框架\",{\"1\":{\"1481\":1}}],[\"非常重要\",{\"1\":{\"1023\":1}}],[\"非常低效\",{\"1\":{\"894\":1}}],[\"非常频繁\",{\"1\":{\"207\":1}}],[\"非常简单即可修改成自己想要的\",{\"1\":{\"12\":1,\"731\":1}}],[\"饿汉式单例\",{\"1\":{\"404\":1}}],[\"饿汉式\",{\"0\":{\"404\":1}}],[\"郭孝星\",{\"1\":{\"396\":1}}],[\"经典gradle插件编写\",{\"1\":{\"1574\":1}}],[\"经典上传蒲公英平台脚本\",{\"1\":{\"1459\":1}}],[\"经典范例\",{\"0\":{\"947\":1}}],[\"经过2天仔细排查找到原因\",{\"1\":{\"1561\":1}}],[\"经过了一周的钻研已经攻克了\",{\"1\":{\"1491\":1}}],[\"经过上边\",{\"1\":{\"1417\":1}}],[\"经过实践\",{\"1\":{\"1416\":1,\"1588\":1}}],[\"经过分类编目的\",{\"1\":{\"389\":1}}],[\"经验主义\",{\"1\":{\"787\":1}}],[\"经验和技巧获得是下意识积累而来\",{\"1\":{\"757\":1}}],[\"经理处理\",{\"1\":{\"537\":1}}],[\"经理\",{\"1\":{\"531\":1,\"537\":2}}],[\"经常使用的对象放入\",{\"1\":{\"368\":1}}],[\"尽量不修改旧的网路代码\",{\"1\":{\"1587\":1}}],[\"尽量少采用反射\",{\"1\":{\"1494\":1}}],[\"尽量少些\",{\"1\":{\"1386\":1,\"1669\":1}}],[\"尽量保证每个锁只占用一个资源\",{\"1\":{\"823\":1}}],[\"尽量在代理中使用try\",{\"1\":{\"385\":1}}],[\"尽职尽责的监控者\",{\"1\":{\"778\":1}}],[\"尽可能不改动别人代码\",{\"1\":{\"1689\":1}}],[\"尽可能简单表达条件逻辑\",{\"1\":{\"1253\":1}}],[\"尽可能提高并行度\",{\"1\":{\"859\":1}}],[\"尽可能通过友元方式来公开功能\",{\"1\":{\"799\":1}}],[\"尽可能大\",{\"1\":{\"352\":1}}],[\"尽可能小\",{\"1\":{\"352\":1}}],[\"总线模式\",{\"1\":{\"1494\":1}}],[\"总之\",{\"1\":{\"1481\":2,\"1482\":1}}],[\"总是不太容易\",{\"1\":{\"802\":1}}],[\"总结一波组件化的实现方案优缺点\",{\"1\":{\"1503\":1}}],[\"总结一句口诀\",{\"1\":{\"1346\":1}}],[\"总结报告是向上看的\",{\"1\":{\"586\":1}}],[\"总结\",{\"0\":{\"955\":1,\"1271\":1},\"1\":{\"381\":1,\"862\":1,\"1268\":1,\"1530\":1,\"1966\":1}}],[\"总体分为三大类\",{\"1\":{\"256\":1}}],[\"利用android\",{\"1\":{\"1728\":1}}],[\"利用api可以避免去了解第三方组件的细节\",{\"1\":{\"787\":1}}],[\"利用binder引用调用远程sayhello\",{\"1\":{\"1726\":1}}],[\"利用npm安装全局模块xxx\",{\"1\":{\"1409\":1}}],[\"利用\",{\"1\":{\"1409\":1,\"1534\":1}}],[\"利用竞赛游戏提升api设计技巧\",{\"0\":{\"781\":1}}],[\"利用虚拟机回收掉一部分不经常使用的对象\",{\"1\":{\"368\":1}}],[\"利用计数排序适用于小范围数的特点\",{\"1\":{\"287\":1}}],[\"伊甸园\",{\"1\":{\"368\":1}}],[\"采取的是分代缓存\",{\"1\":{\"368\":1}}],[\"采用next指定模板\",{\"1\":{\"1960\":1}}],[\"采用gpg生成秘钥\",{\"1\":{\"1927\":1}}],[\"采用groovy编写weixinapi插件\",{\"1\":{\"1488\":1}}],[\"采用抛出异常的方式\",{\"1\":{\"1866\":1}}],[\"采用mmessageenvelopes\",{\"1\":{\"1831\":1}}],[\"采用循环不断地循环执行getandexecutecommand\",{\"1\":{\"1755\":1}}],[\"采用deletelocalref\",{\"1\":{\"1530\":1}}],[\"采用kotlin\",{\"1\":{\"1512\":1}}],[\"采用微信的组件化思想\",{\"1\":{\"1483\":1}}],[\"采用pins工程\",{\"1\":{\"1483\":1}}],[\"采用服务架构\",{\"1\":{\"1481\":1}}],[\"采用服务方式启动\",{\"1\":{\"12\":1,\"731\":1}}],[\"采用aspectj插件来进行aop拦截\",{\"1\":{\"1588\":1}}],[\"采用asm\",{\"1\":{\"1481\":1}}],[\"采用arouter方案\",{\"1\":{\"1482\":1}}],[\"采用andresguard\",{\"1\":{\"1317\":1}}],[\"采用serviceload\",{\"1\":{\"1479\":1}}],[\"采用springboot\",{\"1\":{\"12\":1,\"731\":1}}],[\"采用已开源代码成熟代码整合出一个新项目\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"采用entityclass\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"采用线程api\",{\"1\":{\"1228\":1}}],[\"采用oopmap数据结构达成目标\",{\"1\":{\"1135\":1}}],[\"采用准确式gc\",{\"1\":{\"1135\":1}}],[\"采用hook方式生成字符串\",{\"0\":{\"1015\":1}}],[\"采用final类\",{\"1\":{\"802\":1}}],[\"采用推到重来这种方法\",{\"1\":{\"796\":1}}],[\"采用远程接口调用+ufw命令做动态控制\",{\"1\":{\"721\":1}}],[\"采用防火墙\",{\"0\":{\"661\":1}}],[\"采用了分段锁\",{\"1\":{\"358\":1}}],[\"采用动态扩容来根据当前的\",{\"1\":{\"352\":1}}],[\"采用消息代理\",{\"1\":{\"314\":1}}],[\"采用双指针\",{\"1\":{\"279\":1}}],[\"采用接口转换\",{\"1\":{\"259\":1}}],[\"采用复制算法\",{\"1\":{\"207\":1}}],[\"采用\",{\"1\":{\"12\":37,\"731\":37,\"1480\":1,\"1481\":4,\"1483\":1}}],[\"采用undertow\",{\"1\":{\"12\":1,\"731\":1}}],[\"采用前后端分离的模式\",{\"1\":{\"9\":1,\"728\":1}}],[\"覆盖webview默认通过第三方或者是系统浏览器打开网页的行为\",{\"1\":{\"1358\":1}}],[\"覆盖\",{\"1\":{\"365\":1}}],[\"累计起来\",{\"1\":{\"359\":1}}],[\"维护一个消息池\",{\"1\":{\"1850\":1}}],[\"维护消息列表\",{\"1\":{\"1831\":1}}],[\"维护在\",{\"1\":{\"1826\":1}}],[\"维护\",{\"1\":{\"796\":1}}],[\"维护了一个\",{\"1\":{\"359\":1}}],[\"维护组件的历史升级版本\",{\"1\":{\"305\":1}}],[\"构造唤醒事件的fd\",{\"1\":{\"1829\":1}}],[\"构造进度条模板通知\",{\"1\":{\"1711\":1}}],[\"构造器生成的组件\",{\"1\":{\"1709\":1}}],[\"构造类\",{\"1\":{\"1601\":1}}],[\"构造spannablestringbuilder\",{\"0\":{\"1305\":1}}],[\"构造方法添加到类中\",{\"1\":{\"1601\":1}}],[\"构造方法就足够了\",{\"1\":{\"1598\":1}}],[\"构造方法\",{\"1\":{\"991\":1,\"993\":2,\"1361\":1,\"1527\":3,\"1601\":1}}],[\"构造函数本体上移\",{\"1\":{\"1262\":1}}],[\"构造函数传递依赖\",{\"1\":{\"753\":1}}],[\"构造函数允许用户传入的容量不是\",{\"1\":{\"354\":1}}],[\"构造一个目录对象表示c盘根目录\",{\"1\":{\"465\":1}}],[\"构件实现\",{\"1\":{\"422\":1}}],[\"构件\",{\"1\":{\"422\":1}}],[\"构建一个\",{\"1\":{\"1534\":1}}],[\"构建class与object关系\",{\"1\":{\"1030\":1}}],[\"构建高质量\",{\"1\":{\"305\":1}}],[\"构建乘积数组\",{\"1\":{\"298\":1}}],[\"构建大根堆\",{\"1\":{\"283\":1}}],[\"构建ndk项目的时候ndk版本引起的同步报错\",{\"1\":{\"64\":1}}],[\"桶位置是原位置\",{\"1\":{\"353\":1}}],[\"桶位置和原来一致\",{\"1\":{\"353\":1}}],[\"桶的数量\",{\"1\":{\"285\":1}}],[\"假如data不为null\",{\"1\":{\"1518\":1}}],[\"假如再加上click事件\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"假设原数组长度\",{\"1\":{\"353\":1}}],[\"假定该元素已被排序\",{\"1\":{\"280\":1}}],[\"能力是否支持与\",{\"1\":{\"1708\":1}}],[\"能力可以提供文档翻拍过程中的辅助增强功能\",{\"1\":{\"1702\":1}}],[\"能⻅到类声明的本模块内的任何客戶端都可⻅其\",{\"1\":{\"1518\":1}}],[\"能快速\",{\"1\":{\"954\":1}}],[\"能被中断地获取锁\",{\"1\":{\"874\":1}}],[\"能够拥抱变化\",{\"1\":{\"453\":1}}],[\"能够使用的比例\",{\"1\":{\"352\":1}}],[\"能用代码实现的\",{\"1\":{\"228\":1}}],[\"装载因子\",{\"1\":{\"352\":1}}],[\"装饰器\",{\"1\":{\"1709\":1}}],[\"装饰器用于装饰自定义弹窗组件\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"装饰器模式\",{\"1\":{\"256\":1}}],[\"装饰盒子\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"装饰者模式\",{\"0\":{\"264\":1}}],[\"装饰模式比继承更加灵活性\",{\"1\":{\"471\":1}}],[\"装饰模式应该为所装饰对象增强功能\",{\"1\":{\"261\":1}}],[\"装饰模式以客户端透明方式扩展对象的功能\",{\"1\":{\"261\":1}}],[\"装饰模式与代理模式区别\",{\"0\":{\"261\":1}}],[\"装饰模式\",{\"0\":{\"469\":1},\"1\":{\"257\":1,\"394\":1,\"470\":1,\"471\":1}}],[\"默认构造\",{\"1\":{\"1840\":1}}],[\"默认15\",{\"1\":{\"1780\":1}}],[\"默认地\",{\"1\":{\"1779\":1}}],[\"默认不允许执行\",{\"1\":{\"1712\":1}}],[\"默认的跳转页面使用的模式是哪一种\",{\"1\":{\"1708\":1}}],[\"默认的并发级别为\",{\"1\":{\"358\":1}}],[\"默认情况下\",{\"1\":{\"1707\":1,\"1756\":1}}],[\"默认值\",{\"1\":{\"1625\":1,\"1713\":4}}],[\"默认依赖的库\",{\"1\":{\"1555\":1}}],[\"默认final类型\",{\"1\":{\"1521\":1}}],[\"默认这个位置\",{\"1\":{\"1475\":1}}],[\"默认是public\",{\"1\":{\"1518\":1}}],[\"默认是禁止所有的http请求的\",{\"1\":{\"1405\":1}}],[\"默认是5\",{\"1\":{\"942\":1}}],[\"默认方法\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"默认会与沉侵式冲突\",{\"1\":{\"1355\":1,\"1663\":1}}],[\"默认线程数\",{\"1\":{\"950\":1}}],[\"默认package访问方式\",{\"1\":{\"799\":1}}],[\"默认安装到\",{\"1\":{\"1534\":1}}],[\"默认安装\",{\"0\":{\"701\":1},\"1\":{\"701\":1}}],[\"默认为null\",{\"1\":{\"1843\":1}}],[\"默认为16个binder线程\",{\"1\":{\"1752\":1}}],[\"默认为true\",{\"1\":{\"1491\":1}}],[\"默认为\",{\"1\":{\"352\":1,\"362\":1,\"364\":1}}],[\"默认大小为\",{\"1\":{\"349\":1}}],[\"次设备号\",{\"1\":{\"1772\":1}}],[\"次数\",{\"1\":{\"1583\":1}}],[\"次构造器\",{\"1\":{\"1521\":1}}],[\"次版本号不为0\",{\"1\":{\"1078\":1}}],[\"次版本号为0\",{\"1\":{\"1078\":1}}],[\"次版本号\",{\"1\":{\"1076\":1,\"1078\":1}}],[\"次尝试获取同步状态\",{\"1\":{\"878\":1}}],[\"次\",{\"1\":{\"359\":1}}],[\"次方这一特点能够极大降低重新计算桶下标操作的复杂度\",{\"1\":{\"353\":1}}],[\"次方\",{\"1\":{\"351\":2,\"352\":1,\"354\":3}}],[\"次垃圾回收后仍然存活的对象\",{\"1\":{\"207\":1}}],[\"令函数携带参数\",{\"1\":{\"1274\":1}}],[\"令一个数\",{\"1\":{\"351\":1}}],[\"令\",{\"1\":{\"351\":1,\"352\":1}}],[\"头文件\",{\"1\":{\"1727\":1}}],[\"头脑中底层原理提纲\",{\"1\":{\"573\":1}}],[\"头插法\",{\"1\":{\"350\":1}}],[\"头尾两端\",{\"1\":{\"279\":1}}],[\"允许此ip访问本机所有端口\",{\"1\":{\"662\":1,\"723\":1}}],[\"允许外部访问3306端口\",{\"1\":{\"662\":1,\"723\":1}}],[\"允许任何方法\",{\"1\":{\"650\":1}}],[\"允许任何头\",{\"1\":{\"650\":1}}],[\"允许任何域名\",{\"1\":{\"650\":1}}],[\"允许cookie\",{\"1\":{\"650\":1}}],[\"允许插入键为\",{\"1\":{\"350\":1}}],[\"允许一个对象在其内部状态改变时改变它的行为\",{\"1\":{\"257\":1,\"395\":1,\"506\":1}}],[\"计时和提醒通知功能被系统后台代理接管\",{\"1\":{\"1711\":1}}],[\"计数栈开始\",{\"1\":{\"1468\":1}}],[\"计数器为0\",{\"1\":{\"1238\":1}}],[\"计数器数量减半\",{\"1\":{\"1209\":1}}],[\"计数器只能使用1次\",{\"1\":{\"904\":1}}],[\"计数排序\",{\"0\":{\"286\":1},\"1\":{\"286\":1}}],[\"计算该字符串\",{\"1\":{\"1518\":1}}],[\"计算pc\",{\"1\":{\"1101\":1}}],[\"计算类变量的个数\",{\"1\":{\"979\":1}}],[\"计算实例变量的个数\",{\"1\":{\"979\":1}}],[\"计算策略\",{\"1\":{\"525\":1}}],[\"计算器\",{\"1\":{\"525\":2}}],[\"计算数组容量\",{\"0\":{\"354\":1}}],[\"计算\",{\"0\":{\"1367\":1},\"1\":{\"351\":1,\"525\":3}}],[\"计算键值对所在的桶\",{\"1\":{\"349\":1}}],[\"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\",{\"1\":{\"711\":1}}],[\"^=\",{\"1\":{\"351\":2}}],[\"^\",{\"1\":{\"348\":1,\"351\":4,\"638\":1,\"711\":2,\"1335\":1}}],[\"互斥是实现同步的一种手段\",{\"1\":{\"1238\":1}}],[\"互斥同步是指多个线程并发访问共享数据时\",{\"1\":{\"1238\":1}}],[\"互斥同步\",{\"0\":{\"1238\":1}}],[\"互相调用\",{\"1\":{\"1527\":1}}],[\"互相引用\",{\"1\":{\"1030\":2}}],[\"互相解耦\",{\"1\":{\"314\":1}}],[\"互不影响\",{\"1\":{\"342\":1}}],[\"读音\",{\"1\":{\"1966\":1}}],[\"读锁总会被成功地获取\",{\"1\":{\"886\":1}}],[\"读锁的获取与释放\",{\"1\":{\"886\":1}}],[\"读写需要2条指令\",{\"1\":{\"1221\":1}}],[\"读写状态的设计\",{\"1\":{\"886\":1}}],[\"读写锁不支持升级\",{\"1\":{\"887\":1}}],[\"读写锁实现原理\",{\"0\":{\"886\":1}}],[\"读写锁\",{\"0\":{\"885\":1},\"1\":{\"880\":1,\"932\":1}}],[\"读写分离\",{\"0\":{\"342\":1},\"1\":{\"342\":1,\"929\":1}}],[\"读书笔记做了简单摘要\",{\"1\":{\"814\":1}}],[\"读取socket客户端发送过来的参数列表\",{\"1\":{\"1863\":1}}],[\"读取应答消息的异常情况\",{\"1\":{\"1756\":1}}],[\"读取编译class文件信息\",{\"1\":{\"1561\":1}}],[\"读取顶点数据\",{\"1\":{\"1540\":1}}],[\"读取二进制字节流\",{\"1\":{\"1170\":1}}],[\"读取变量\",{\"1\":{\"1101\":1}}],[\"读取指令集\",{\"1\":{\"1101\":1}}],[\"读取指令和执行\",{\"1\":{\"1101\":1}}],[\"读取指令opcode\",{\"1\":{\"994\":1}}],[\"读取并检查主次版本号\",{\"1\":{\"1078\":1}}],[\"读取魔数\",{\"1\":{\"1077\":1}}],[\"读取zip\",{\"1\":{\"1064\":1}}],[\"读取path下所有jar文件的classname文件\",{\"1\":{\"1064\":1}}],[\"读取多个classname文件\",{\"1\":{\"1064\":1}}],[\"读取到的class文件内容的\",{\"1\":{\"1064\":1}}],[\"读取文件名称为classname的class文件\",{\"1\":{\"1063\":1}}],[\"读取操作码\",{\"1\":{\"994\":1,\"1094\":2}}],[\"读取class文件\",{\"1\":{\"977\":1}}],[\"读取\",{\"1\":{\"870\":1,\"979\":1,\"1220\":2}}],[\"读取内容\",{\"1\":{\"793\":1}}],[\"读取目录方法\",{\"1\":{\"667\":1}}],[\"读完收获\",{\"1\":{\"573\":1}}],[\"读操作不能读取实时性的数据\",{\"1\":{\"343\":1}}],[\"读操作还是在原始数组中进行\",{\"1\":{\"342\":1}}],[\"替代方案\",{\"0\":{\"340\":1}}],[\"替换成url\",{\"1\":{\"1592\":1}}],[\"替换算法\",{\"1\":{\"1280\":1}}],[\"替换空格\",{\"1\":{\"298\":1}}],[\"替换homebrew\",{\"1\":{\"79\":1}}],[\"替换brew源\",{\"1\":{\"79\":1}}],[\"与gitpage关联\",{\"1\":{\"1960\":1}}],[\"与远程分支建立链接\",{\"1\":{\"1951\":1}}],[\"与java层没有真正关联\",{\"1\":{\"1824\":1}}],[\"与java写法一致\",{\"1\":{\"1518\":1}}],[\"与call类型差不多\",{\"1\":{\"1776\":1}}],[\"与server端完全一致\",{\"1\":{\"1729\":1}}],[\"与其上手直接写代码\",{\"1\":{\"1610\":1}}],[\"与其他api协作\",{\"0\":{\"760\":1}}],[\"与映射\",{\"1\":{\"1518\":1}}],[\"与壳工程隔离\",{\"1\":{\"1494\":1}}],[\"与初次读对象中final域\",{\"1\":{\"863\":1}}],[\"与此对立优点\",{\"1\":{\"802\":1}}],[\"与此threadlocal关联的值\",{\"1\":{\"381\":1}}],[\"与netbeans项目原负责api设想不一致\",{\"1\":{\"787\":1}}],[\"与版本关联\",{\"1\":{\"784\":1}}],[\"与组员沟通过多的\",{\"1\":{\"598\":1}}],[\"与民生对接上线流程\",{\"1\":{\"595\":1}}],[\"与该线程有关的threadlocal值\",{\"1\":{\"381\":1}}],[\"与\",{\"0\":{\"339\":1,\"346\":1,\"356\":1},\"1\":{\"351\":1,\"1029\":1,\"1109\":1,\"1518\":1}}],[\"与桥接者模式相比\",{\"0\":{\"261\":1}}],[\"值的存储支持哪些数据类型\",{\"1\":{\"1708\":1}}],[\"值得才设计\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"值超过127\",{\"1\":{\"1203\":1}}],[\"值相同\",{\"1\":{\"1203\":3}}],[\"值可以是任意类型\",{\"1\":{\"381\":1}}],[\"值来调整\",{\"1\":{\"352\":1}}],[\"值对桶个数取模\",{\"1\":{\"351\":1}}],[\"值\",{\"1\":{\"351\":1,\"352\":1}}],[\"值被设置为\",{\"1\":{\"338\":1}}],[\"值多个\",{\"1\":{\"212\":1}}],[\"增强weixinapi通用性\",{\"1\":{\"1488\":1}}],[\"增强校验\",{\"1\":{\"1277\":1}}],[\"增强可读性\",{\"1\":{\"1200\":1}}],[\"增强程序的性能\",{\"1\":{\"441\":1}}],[\"增长\",{\"1\":{\"338\":1}}],[\"增加附注\",{\"1\":{\"1949\":1}}],[\"增加新的远程链接\",{\"1\":{\"1945\":1}}],[\"增加classpath\",{\"1\":{\"1905\":1}}],[\"增加引用计数\",{\"1\":{\"1829\":1}}],[\"增加注解配置\",{\"0\":{\"1625\":1}}],[\"增加混淆\",{\"1\":{\"1595\":1}}],[\"增加测试难度\",{\"1\":{\"1595\":1}}],[\"增加测试方法\",{\"1\":{\"1070\":1}}],[\"增加可读性\",{\"1\":{\"1540\":1}}],[\"增加复用性同时\",{\"1\":{\"1540\":1}}],[\"增加复杂度\",{\"1\":{\"1268\":1}}],[\"增加align\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"增加padingall\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"增加高频适配模板\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"增加代码清晰度\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"增加操作集合的函数\",{\"1\":{\"1283\":1}}],[\"增加临时变量\",{\"1\":{\"1280\":1}}],[\"增加\",{\"1\":{\"1070\":1,\"1966\":1}}],[\"增加命令行参数\",{\"1\":{\"1044\":1}}],[\"增加异常处理\",{\"1\":{\"1036\":1}}],[\"增加线程任务\",{\"1\":{\"950\":1}}],[\"增加线程\",{\"1\":{\"950\":1}}],[\"增加works\",{\"1\":{\"917\":1}}],[\"增加读状态\",{\"1\":{\"886\":1}}],[\"增加作用于一组元素对象新功能\",{\"1\":{\"257\":1,\"395\":1,\"530\":1}}],[\"增加了一个限制\",{\"1\":{\"70\":1}}],[\"来自looper对象\",{\"1\":{\"1840\":1}}],[\"来自framework层刁难问题\",{\"1\":{\"573\":1}}],[\"来创建binder主线程\",{\"1\":{\"1776\":1}}],[\"来获取amp对象\",{\"1\":{\"1756\":1}}],[\"来发送事务请求\",{\"1\":{\"1745\":1}}],[\"来插入代码\",{\"1\":{\"1587\":1}}],[\"来贯穿各个知识点\",{\"1\":{\"1561\":1}}],[\"来标识该引用可为空\",{\"1\":{\"1518\":1}}],[\"来综上所述的优点\",{\"1\":{\"1483\":1}}],[\"来进行死亡通告\",{\"1\":{\"1761\":1}}],[\"来进行版本控制\",{\"1\":{\"1445\":1}}],[\"来进行同步\",{\"1\":{\"356\":1}}],[\"来满足ui效果\",{\"1\":{\"1445\":1}}],[\"来版本控制\",{\"1\":{\"1441\":1}}],[\"来让写法简答起来\",{\"1\":{\"1302\":1}}],[\"来操作堆上具体对象\",{\"1\":{\"1118\":1}}],[\"来搜索类\",{\"1\":{\"1061\":1}}],[\"来为java程序员提供\",{\"1\":{\"858\":1}}],[\"来达成\",{\"1\":{\"757\":1}}],[\"来决定的\",{\"1\":{\"649\":1}}],[\"来使得我们可以实现跨域访问\",{\"1\":{\"649\":1}}],[\"来监控项目风险\",{\"1\":{\"598\":1}}],[\"来清除陈旧的条目\",{\"1\":{\"381\":1}}],[\"来实现缓存功能\",{\"1\":{\"368\":1}}],[\"来实现序列化\",{\"1\":{\"334\":1}}],[\"来引用缓存对象\",{\"1\":{\"367\":1}}],[\"来确定桶下标\",{\"1\":{\"353\":1}}],[\"来控制只序列化数组中有元素填充那部分内容\",{\"1\":{\"334\":1}}],[\"来支持线程安全\",{\"1\":{\"325\":1}}],[\"修订版本列表\",{\"1\":{\"1298\":1}}],[\"修补错误\",{\"1\":{\"1253\":1,\"1286\":1}}],[\"修饰的属性值发生变化时\",{\"1\":{\"1711\":1}}],[\"修饰的属性不允许在本地进行初始化\",{\"1\":{\"1711\":1}}],[\"修饰的状态数据被修改时会触发组件的\",{\"1\":{\"1708\":1}}],[\"修饰的自定义组件都支持\",{\"1\":{\"1707\":1}}],[\"修饰效果\",{\"1\":{\"1310\":1}}],[\"修饰方法\",{\"1\":{\"1187\":1}}],[\"修饰\",{\"1\":{\"334\":1}}],[\"修改根目录下\",{\"1\":{\"1960\":1}}],[\"修改配置\",{\"0\":{\"1923\":1}}],[\"修改url地址\",{\"1\":{\"1592\":1}}],[\"修改网络请求地址\",{\"1\":{\"1592\":1}}],[\"修改project文件\",{\"1\":{\"1552\":1}}],[\"修改这些函数\",{\"1\":{\"1283\":1}}],[\"修改调用者\",{\"1\":{\"1274\":1}}],[\"修改启动类路径\",{\"1\":{\"1061\":1}}],[\"修改2个文件\",{\"1\":{\"631\":1}}],[\"修改host\",{\"1\":{\"109\":1}}],[\"修改后配置\",{\"1\":{\"64\":1}}],[\"修改\",{\"1\":{\"14\":1,\"733\":1,\"1199\":1}}],[\"倍\",{\"1\":{\"332\":2,\"339\":2}}],[\"倍左右\",{\"1\":{\"332\":1}}],[\"顺时针旋转\",{\"1\":{\"1527\":1}}],[\"顺时针打印矩阵\",{\"1\":{\"298\":1}}],[\"顺向逻辑\",{\"1\":{\"598\":1}}],[\"顺序是固定的\",{\"1\":{\"1169\":1}}],[\"顺序安排\",{\"1\":{\"598\":1}}],[\"顺序之后\",{\"1\":{\"363\":1}}],[\"顺序\",{\"1\":{\"325\":1,\"362\":1,\"365\":1}}],[\"顺序为插入顺序或者最近最少使用\",{\"1\":{\"325\":1}}],[\"队列size\",{\"1\":{\"950\":1,\"958\":1}}],[\"队列已满\",{\"1\":{\"913\":1}}],[\"队列空移除阻塞\",{\"1\":{\"896\":1}}],[\"队列满阻塞\",{\"1\":{\"896\":1}}],[\"队列同步器是用来构建锁或者其他同步组件的基础框架\",{\"1\":{\"875\":1}}],[\"队列同步器\",{\"0\":{\"875\":1}}],[\"队列和双向队列\",{\"1\":{\"323\":1}}],[\"队列里的对象进行第二次标记\",{\"1\":{\"200\":1}}],[\"两者都不能偏废啊\",{\"1\":{\"1694\":1}}],[\"两者都应依赖抽象\",{\"1\":{\"750\":1,\"753\":1}}],[\"两侧间隙比例\",{\"1\":{\"1346\":1}}],[\"两行代码合并一行\",{\"1\":{\"1274\":1}}],[\"两重判断\",{\"1\":{\"945\":1}}],[\"两把共享锁\",{\"1\":{\"880\":1}}],[\"两个赋值操作\",{\"1\":{\"1417\":1}}],[\"两个人合伙做\",{\"1\":{\"1271\":1}}],[\"两个类都需要使用对方特性\",{\"1\":{\"1283\":1}}],[\"两个类有类似特性\",{\"1\":{\"1262\":1}}],[\"两个类关系过于紧密\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"两个线程强占同一个锁\",{\"1\":{\"1248\":1}}],[\"两个关键问题\",{\"1\":{\"858\":1}}],[\"两个对象\",{\"1\":{\"320\":1}}],[\"两种中断方法\",{\"1\":{\"945\":1}}],[\"两种状态笼统的成为\",{\"1\":{\"943\":1}}],[\"两种\",{\"1\":{\"320\":1}}],[\"两数之和\",{\"1\":{\"298\":2}}],[\"概览\",{\"0\":{\"320\":1,\"331\":1,\"345\":1},\"1\":{\"319\":1}}],[\"概念定义忽略\",{\"1\":{\"227\":1}}],[\"概念混淆\",{\"1\":{\"227\":1}}],[\"较难测试\",{\"1\":{\"314\":1}}],[\"处理子进程的终止\",{\"1\":{\"1857\":1}}],[\"处理请求的回调方法\",{\"1\":{\"1828\":1}}],[\"处理带有callback\",{\"1\":{\"1828\":1}}],[\"处理request\",{\"1\":{\"1828\":1}}],[\"处理retrofit\",{\"1\":{\"1592\":1}}],[\"处理所有的事件\",{\"1\":{\"1828\":1}}],[\"处理client端发来的请求\",{\"1\":{\"1786\":1,\"1788\":1}}],[\"处理下一条指令\",{\"1\":{\"1778\":1}}],[\"处理ontransact方法\",{\"1\":{\"1727\":1,\"1732\":1}}],[\"处理消息事件\",{\"1\":{\"1828\":1}}],[\"处理消息\",{\"1\":{\"1546\":2,\"1839\":1}}],[\"处理消息核心\",{\"1\":{\"1546\":1}}],[\"处理图形信号相互独立的并行处理单元\",{\"1\":{\"1540\":1}}],[\"处理字符串非常有优势\",{\"1\":{\"1530\":1}}],[\"处理java异常\",{\"1\":{\"1527\":1}}],[\"处理继承关系\",{\"0\":{\"1262\":1},\"1\":{\"1286\":1}}],[\"处理器对输入代码进行乱序执行优化\",{\"1\":{\"1218\":1}}],[\"处理器如何实现原子操作\",{\"0\":{\"851\":1}}],[\"处理句柄\",{\"1\":{\"1036\":2}}],[\"处理逻辑\",{\"1\":{\"948\":1,\"949\":1}}],[\"处理核心逻辑\",{\"1\":{\"537\":1}}],[\"处理中间件\",{\"1\":{\"314\":1}}],[\"处理单元的部署\",{\"1\":{\"314\":1}}],[\"处理单元\",{\"1\":{\"314\":2}}],[\"决定了顺序\",{\"1\":{\"362\":1}}],[\"决定分配给哪一个处理单元\",{\"1\":{\"314\":1}}],[\"决定一个线程对共享变量\",{\"1\":{\"151\":1}}],[\"访问静态字段\",{\"1\":{\"1527\":1}}],[\"访问静态函数\",{\"1\":{\"1521\":1}}],[\"访问类实例字段\",{\"1\":{\"1527\":1}}],[\"访问map\",{\"1\":{\"1518\":1}}],[\"访问对象\",{\"1\":{\"1253\":1}}],[\"访问对方\",{\"1\":{\"754\":1}}],[\"访问名字\",{\"1\":{\"1109\":1}}],[\"访问标志\",{\"1\":{\"1109\":1}}],[\"访问权限控制\",{\"1\":{\"754\":1}}],[\"访问者查看对应报告\",{\"1\":{\"531\":1}}],[\"访问者模板\",{\"1\":{\"531\":1}}],[\"访问者模式\",{\"0\":{\"529\":1},\"1\":{\"256\":1,\"257\":1,\"395\":1,\"530\":1,\"531\":1}}],[\"访问者类型\",{\"1\":{\"531\":2}}],[\"访问者\",{\"1\":{\"531\":2}}],[\"访问速度更慢\",{\"1\":{\"339\":1}}],[\"访问量减少\",{\"1\":{\"314\":1}}],[\"访问量增加\",{\"1\":{\"314\":1}}],[\"五种策略\",{\"1\":{\"1546\":1}}],[\"五分钟读懂uml类图深入浅出uml类图\",{\"1\":{\"738\":1}}],[\"五分钟读懂uml类图\",{\"0\":{\"738\":1}}],[\"五福项目\",{\"1\":{\"531\":1}}],[\"五\",{\"1\":{\"314\":1,\"1577\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1}}],[\"各种不匹配等问题\",{\"1\":{\"1755\":1}}],[\"各种关系的强弱顺序\",{\"1\":{\"735\":1}}],[\"各种类型的项目都可以用\",{\"1\":{\"312\":1}}],[\"各个线程共享进程资源\",{\"1\":{\"1224\":1}}],[\"各个处理器访问缓存遵循协议\",{\"1\":{\"1218\":1}}],[\"各个组搭配不好的\",{\"1\":{\"598\":1}}],[\"各个服务之间低耦合\",{\"1\":{\"314\":1}}],[\"集合\",{\"1\":{\"1518\":1,\"1521\":1}}],[\"集合遍历\",{\"1\":{\"1518\":1}}],[\"集成太复杂\",{\"1\":{\"1481\":1}}],[\"集成与独立模式\",{\"1\":{\"1476\":1}}],[\"集成发布\",{\"1\":{\"1473\":1}}],[\"集群\",{\"1\":{\"824\":1}}],[\"集团其他部分存在裁员风波\",{\"1\":{\"595\":1}}],[\"集中消息模式\",{\"1\":{\"314\":1}}],[\"集掉那些生命周期短的对象\",{\"1\":{\"207\":1}}],[\"背后隐藏的工作\",{\"1\":{\"772\":1}}],[\"背后通常是一个多功能的应用程序\",{\"1\":{\"314\":1}}],[\"背景透明带圆角\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"背景\",{\"0\":{\"603\":1,\"656\":1},\"1\":{\"595\":1,\"787\":1,\"796\":1,\"805\":1,\"1491\":1}}],[\"背包算法\",{\"0\":{\"252\":1}}],[\"云开发当前支持最低\",{\"1\":{\"1712\":1}}],[\"云开发\",{\"1\":{\"1712\":1}}],[\"云开发可以在一个项目中同时实现端侧和云侧功能的开发\",{\"1\":{\"1711\":1}}],[\"云开发工程创建后\",{\"1\":{\"1713\":1}}],[\"云开发工程结构分哪些部分\",{\"1\":{\"1713\":1}}],[\"云开发工程\",{\"1\":{\"1709\":2,\"1713\":1}}],[\"云数据库\",{\"1\":{\"1709\":1,\"1713\":1}}],[\"云函数\",{\"1\":{\"1709\":1,\"1713\":1}}],[\"云函数打包完成后\",{\"1\":{\"1707\":1}}],[\"云结构\",{\"1\":{\"314\":1}}],[\"云架构\",{\"1\":{\"314\":1}}],[\"云服务就属于这一类\",{\"1\":{\"314\":1}}],[\"云存储\",{\"1\":{\"12\":1,\"731\":1,\"1709\":1,\"1713\":1}}],[\"联系\",{\"1\":{\"314\":1}}],[\"差\",{\"1\":{\"313\":1}}],[\"逐步改善\",{\"1\":{\"796\":1}}],[\"逐步增加功能\",{\"1\":{\"313\":1}}],[\"逐渐\",{\"1\":{\"281\":1}}],[\"应为\",{\"1\":{\"657\":1}}],[\"应根据按时交付结果作为客观判断依据\",{\"1\":{\"598\":1}}],[\"应付于面试\",{\"1\":{\"573\":1}}],[\"应该仅有一个引起它变化的原因\",{\"1\":{\"751\":1,\"1253\":1}}],[\"应该使\",{\"1\":{\"352\":1}}],[\"应该注意到链表的插入是以头插法方式进行的\",{\"1\":{\"349\":1}}],[\"应该注意的是\",{\"1\":{\"328\":1}}],[\"应该减少到最低\",{\"1\":{\"313\":1}}],[\"应用层\",{\"0\":{\"1835\":1},\"1\":{\"1734\":1}}],[\"应用层aidl\",{\"0\":{\"1734\":1}}],[\"应用中涉及到\",{\"1\":{\"1711\":1}}],[\"应用权限申请列表\",{\"1\":{\"1709\":1}}],[\"应用包名需要和\",{\"1\":{\"1708\":1,\"1709\":1,\"1712\":1}}],[\"应用包名不能包含一些保留字段\",{\"1\":{\"1708\":1}}],[\"应用包信息\",{\"1\":{\"1702\":1}}],[\"应用的一站式集成开发环境\",{\"1\":{\"1707\":1}}],[\"应用可以兼容\",{\"1\":{\"1707\":1}}],[\"应用可以直接读取日历信息\",{\"1\":{\"1702\":2}}],[\"应用程序信息\",{\"1\":{\"1702\":1}}],[\"应用云测试\",{\"1\":{\"1702\":1}}],[\"应用在华为真机设备上运行的兼容性问题\",{\"1\":{\"1702\":1}}],[\"应用在跨端迁移后\",{\"1\":{\"1702\":2}}],[\"应用名称\",{\"1\":{\"1413\":1}}],[\"应用截图要求\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"应用宝\",{\"1\":{\"1338\":3,\"1435\":3}}],[\"应用市场提交截图\",{\"1\":{\"1435\":1}}],[\"应用市场提交logo\",{\"1\":{\"1435\":1}}],[\"应用市场截图\",{\"1\":{\"1338\":1}}],[\"应用市场截图尺寸\",{\"1\":{\"1338\":1}}],[\"应用市场\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"应用市场logo\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"应用商店包名\",{\"1\":{\"1326\":1}}],[\"应用\",{\"0\":{\"843\":1},\"1\":{\"1335\":1,\"1521\":1,\"1702\":1}}],[\"应用接口的效果是不可变\",{\"1\":{\"802\":1}}],[\"应用模式\",{\"1\":{\"314\":1}}],[\"应用框架\",{\"1\":{\"305\":1}}],[\"应用工具\",{\"1\":{\"305\":1}}],[\"应用治理\",{\"1\":{\"305\":1}}],[\"应用场景客户端桌面\",{\"1\":{\"1139\":1}}],[\"应用场景\",{\"1\":{\"258\":1}}],[\"应用类加载器\",{\"1\":{\"194\":1,\"1175\":1}}],[\"应用阶段\",{\"1\":{\"144\":1,\"145\":2}}],[\"主binder池\",{\"1\":{\"1778\":1}}],[\"主build\",{\"1\":{\"1632\":1}}],[\"主流程绘制工作\",{\"1\":{\"1540\":1}}],[\"主构造器和初始化器\",{\"1\":{\"1521\":1}}],[\"主构造函数\",{\"1\":{\"1518\":2}}],[\"主页4个tab\",{\"1\":{\"1395\":1,\"1678\":1}}],[\"主板\",{\"1\":{\"1298\":1}}],[\"主内存\",{\"1\":{\"1220\":4}}],[\"主动式中断\",{\"1\":{\"1136\":1}}],[\"主版本号\",{\"1\":{\"1076\":1,\"1078\":1}}],[\"主线程进入循环状态\",{\"1\":{\"1869\":1}}],[\"主线程\",{\"1\":{\"1044\":1}}],[\"主管处理\",{\"1\":{\"537\":1}}],[\"主管\",{\"1\":{\"537\":1}}],[\"主要功能向消息池发送各种消息事件\",{\"1\":{\"1837\":1}}],[\"主要功能和业务逻辑都通过插件实现\",{\"1\":{\"313\":1}}],[\"主要工作\",{\"1\":{\"1804\":1}}],[\"主要用于清理内存等收尾工作\",{\"1\":{\"1790\":1}}],[\"主要用来实现缓存\",{\"1\":{\"367\":1}}],[\"主要需要实现其binderdied\",{\"1\":{\"1761\":1}}],[\"主要采用\",{\"1\":{\"1561\":1}}],[\"主要考虑三点\",{\"1\":{\"1488\":1}}],[\"主要是做数据隔离\",{\"1\":{\"379\":1}}],[\"主要适合网站类应用\",{\"1\":{\"314\":1}}],[\"主要原因是没使用中央数据库\",{\"1\":{\"314\":1}}],[\"主要解决扩展性和并发的问题\",{\"1\":{\"314\":1}}],[\"主从\",{\"1\":{\"12\":1,\"731\":1}}],[\"指多端上\",{\"1\":{\"1702\":1}}],[\"指明思路和方向\",{\"1\":{\"1483\":1}}],[\"指明了安卓framework学习方向\",{\"1\":{\"572\":1}}],[\"指壳工程\",{\"1\":{\"1473\":1}}],[\"指通过一个标志isrunalone\",{\"1\":{\"1473\":1}}],[\"指向服务进程中的binder\",{\"1\":{\"1799\":1}}],[\"指向的是bpbinder对象\",{\"1\":{\"1798\":1}}],[\"指向类元数据class的指针\",{\"1\":{\"1117\":1}}],[\"指向当前class\",{\"1\":{\"1030\":1}}],[\"指向被使用者\",{\"1\":{\"735\":1}}],[\"指向被拥有者\",{\"1\":{\"735\":1}}],[\"指令下载指定的三方库\",{\"1\":{\"1711\":1}}],[\"指令创建对象\",{\"1\":{\"1116\":1}}],[\"指令集转义\",{\"1\":{\"1101\":1}}],[\"指令集包含两部分\",{\"1\":{\"1101\":1}}],[\"指令集做两件事\",{\"1\":{\"1094\":1}}],[\"指令集方法\",{\"0\":{\"1094\":1}}],[\"指令集\",{\"0\":{\"1092\":1,\"1191\":1}}],[\"指令存取类的静态变量\",{\"1\":{\"1002\":1}}],[\"指令类型\",{\"1\":{\"994\":1}}],[\"指令\",{\"1\":{\"983\":1,\"1222\":1}}],[\"指令级并行的重排序\",{\"1\":{\"859\":1}}],[\"指导他们来设计自己所需的api\",{\"1\":{\"796\":1}}],[\"指定版本运行脚本\",{\"1\":{\"1974\":1}}],[\"指定生成\",{\"1\":{\"1534\":1}}],[\"指定\",{\"1\":{\"1534\":1}}],[\"指定要编译的库\",{\"1\":{\"1534\":1}}],[\"指定span的结束位置\",{\"1\":{\"1310\":1}}],[\"指定span的开始位置\",{\"1\":{\"1310\":1}}],[\"指定测试方法\",{\"1\":{\"1070\":1}}],[\"指定jre启动类的目录\",{\"1\":{\"1062\":1}}],[\"指定项目章程\",{\"1\":{\"752\":1}}],[\"指定ip段访问特定端口\",{\"1\":{\"662\":1,\"723\":1}}],[\"指定接口\",{\"1\":{\"259\":1}}],[\"指引方向\",{\"1\":{\"571\":1}}],[\"指南\",{\"0\":{\"571\":1}}],[\"指针碰撞\",{\"1\":{\"1116\":1}}],[\"指针\",{\"1\":{\"345\":1}}],[\"指的是软件的内核相对较小\",{\"1\":{\"313\":1}}],[\"又不损失效率\",{\"1\":{\"1589\":2}}],[\"又要将子组件代码编译到主项目中\",{\"1\":{\"1473\":1}}],[\"又要减少耦合\",{\"1\":{\"754\":1,\"1253\":1}}],[\"又修改对象状态\",{\"1\":{\"1274\":1}}],[\"又可以独立调度\",{\"1\":{\"1224\":1}}],[\"又称为\",{\"1\":{\"313\":1}}],[\"又进行对象移动\",{\"1\":{\"205\":1}}],[\"它所引用的对象可以被\",{\"1\":{\"1530\":1}}],[\"它所涉及的概念必须处于用户视野范围内\",{\"1\":{\"793\":1}}],[\"它不能在本地函数中跨函数传递\",{\"1\":{\"1530\":1}}],[\"它会影响类的行为\",{\"1\":{\"1283\":1}}],[\"它根据对象类型的不同而选择不同行为\",{\"1\":{\"1277\":1}}],[\"它可以在指定的时间内自行返回\",{\"1\":{\"943\":1}}],[\"它通过协调各个线程\",{\"1\":{\"907\":1}}],[\"它使用了一个int成员变量表示同步状态\",{\"1\":{\"875\":1}}],[\"它使一个类知道另一个类的属性和方法\",{\"1\":{\"735\":1}}],[\"它包含name\",{\"1\":{\"738\":1}}],[\"它包含了四个字段\",{\"1\":{\"348\":1}}],[\"它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期\",{\"1\":{\"735\":1}}],[\"它指定了子类如何特化父类的所有特征和行为\",{\"1\":{\"735\":1}}],[\"它们可以映射到移动设备显示屏的像素上\",{\"1\":{\"1540\":1}}],[\"它们都是位于堆上\",{\"1\":{\"383\":1}}],[\"它们会在\",{\"1\":{\"362\":1}}],[\"它只是作为一个key来让线程从threadlocalmap获取value\",{\"1\":{\"381\":1}}],[\"它是用来做c\",{\"1\":{\"1530\":1}}],[\"它是用来使得\",{\"1\":{\"1530\":1}}],[\"它是线程的局部变量\",{\"1\":{\"379\":1}}],[\"它是遗留类\",{\"1\":{\"325\":1}}],[\"它继承自重入锁\",{\"1\":{\"360\":1}}],[\"它具有以下性质\",{\"1\":{\"351\":1}}],[\"它的掩码为\",{\"1\":{\"354\":1}}],[\"它的哈希值\",{\"1\":{\"353\":1}}],[\"它的作用是在扩容时使容量\",{\"1\":{\"338\":1}}],[\"它的实现与\",{\"1\":{\"337\":1}}],[\"它的高扩展性\",{\"1\":{\"314\":1}}],[\"它分成四个部分\",{\"1\":{\"312\":1}}],[\"它涵\",{\"1\":{\"151\":1}}],[\"往往需要整个软件重新部署\",{\"1\":{\"311\":1}}],[\"往上计算父节点索引\",{\"1\":{\"283\":1}}],[\"天然适合大多数软件公司的组织架构\",{\"1\":{\"311\":1}}],[\"天生支持多机\",{\"1\":{\"12\":1,\"731\":1}}],[\"天生支持分布式\",{\"1\":{\"12\":1,\"731\":1}}],[\"容量\",{\"1\":{\"954\":1}}],[\"容器的主轴是水平方向\",{\"1\":{\"1713\":1}}],[\"容器可以沿水平方向排列\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"容器中的组件默认是按照从左到右的水平方向布局的\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"容器中的子组件默认是按照从上到下的垂直方向布局的\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"容器中的设计模式\",{\"0\":{\"326\":1},\"1\":{\"319\":1}}],[\"容器组件中\",{\"1\":{\"1707\":1}}],[\"容器单例\",{\"1\":{\"405\":1}}],[\"容器主要包括\",{\"1\":{\"320\":1}}],[\"容器\",{\"1\":{\"319\":1}}],[\"容器化\",{\"1\":{\"305\":1}}],[\"容易阅读\",{\"1\":{\"1253\":1}}],[\"容易获取调用关系\",{\"1\":{\"1209\":1}}],[\"容易导致鸡同鸭讲\",{\"1\":{\"787\":1}}],[\"容易开发\",{\"1\":{\"314\":1}}],[\"容易部署\",{\"1\":{\"312\":1,\"314\":1}}],[\"容易理解和开发\",{\"1\":{\"311\":1}}],[\"优缺点\",{\"1\":{\"1512\":1}}],[\"优先使用try\",{\"1\":{\"1518\":1}}],[\"优先分配方法区和堆\",{\"1\":{\"1119\":1}}],[\"优先级最低\",{\"1\":{\"1842\":1}}],[\"优先级最高\",{\"1\":{\"1842\":1}}],[\"优先级仅次于1\",{\"1\":{\"1842\":1}}],[\"优先级不能作为程序正确性依赖\",{\"1\":{\"942\":1}}],[\"优先级无限阻塞队列\",{\"1\":{\"246\":1,\"914\":1}}],[\"优雅解决\",{\"1\":{\"1349\":1}}],[\"优雅关闭线程\",{\"1\":{\"917\":2}}],[\"优雅退出线程\",{\"1\":{\"869\":1}}],[\"优雅停止线程\",{\"0\":{\"869\":1}}],[\"优雅的终止线程\",{\"1\":{\"867\":1}}],[\"优秀思想\",{\"1\":{\"1483\":1}}],[\"优秀开源项目\",{\"0\":{\"1420\":1}}],[\"优秀开源\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"优秀api的规则\",{\"1\":{\"796\":1}}],[\"优秀的文档是必备的条件\",{\"1\":{\"778\":1}}],[\"优秀的api架构师应该预测失败的种种征兆\",{\"1\":{\"772\":1}}],[\"优化代码\",{\"1\":{\"1561\":1}}],[\"优化图片体积\",{\"1\":{\"1317\":1}}],[\"优化遵循二八原则\",{\"1\":{\"1253\":1}}],[\"优化技术\",{\"0\":{\"1211\":1}}],[\"优化水平\",{\"1\":{\"1210\":1}}],[\"优化级别\",{\"1\":{\"1210\":1}}],[\"优化\",{\"0\":{\"1197\":1,\"1206\":1},\"1\":{\"1253\":1,\"1521\":1}}],[\"优化方向错了\",{\"1\":{\"793\":1}}],[\"优化封装\",{\"1\":{\"447\":1}}],[\"优点是高效\",{\"1\":{\"1131\":1}}],[\"优点是快\",{\"1\":{\"1118\":1}}],[\"优点\",{\"1\":{\"311\":1,\"312\":1,\"313\":1,\"314\":2,\"422\":1,\"559\":1,\"949\":1,\"1209\":2,\"1242\":1,\"1481\":2,\"1482\":2,\"1483\":1,\"1494\":1,\"1512\":1,\"1518\":1,\"1647\":2}}],[\"表达主体\",{\"1\":{\"1521\":1}}],[\"表达式的调用者\",{\"1\":{\"1518\":1}}],[\"表达式来过滤\",{\"1\":{\"1518\":1}}],[\"表达式\",{\"1\":{\"1518\":3}}],[\"表示所有都撤销都以前状态\",{\"1\":{\"1951\":1}}],[\"表示是由binder驱动创建的线程\",{\"1\":{\"1778\":1}}],[\"表示客户端请求的资源已经不存在\",{\"1\":{\"1712\":1}}],[\"表示这是个入口组件\",{\"1\":{\"1709\":1}}],[\"表示该结构体具有组件化能力\",{\"1\":{\"1708\":1}}],[\"表示该线程已经执行完毕\",{\"1\":{\"943\":1}}],[\"表示二维数组\",{\"1\":{\"1530\":1}}],[\"表示数组\",{\"1\":{\"1530\":1}}],[\"表示数值的字符串\",{\"1\":{\"298\":1}}],[\"表示实例\",{\"1\":{\"1029\":1}}],[\"表示线程阻塞于锁\",{\"1\":{\"943\":1}}],[\"表示当前锁存在竞争\",{\"1\":{\"847\":1}}],[\"表示没有竞争发生\",{\"1\":{\"847\":1}}],[\"表示上下文切换的次数\",{\"1\":{\"820\":1}}],[\"表示一维数组\",{\"1\":{\"1530\":1}}],[\"表示一个顾客购买了那些产品\",{\"1\":{\"738\":1}}],[\"表示一般与特殊的关系\",{\"1\":{\"735\":1}}],[\"表示protected\",{\"1\":{\"738\":1}}],[\"表示private\",{\"1\":{\"738\":1}}],[\"表示public\",{\"1\":{\"738\":1}}],[\"表示类是接口所有特征和行为的实现\",{\"1\":{\"735\":1}}],[\"表现问题\",{\"1\":{\"598\":1}}],[\"表现层\",{\"1\":{\"311\":1}}],[\"那只有在出现了\",{\"1\":{\"385\":1}}],[\"那就找下⼀个空位置\",{\"1\":{\"382\":1}}],[\"那就用它\",{\"1\":{\"311\":1}}],[\"那么不再调用wake\",{\"1\":{\"1826\":1}}],[\"那么该进程可创建的binder线程个数上限是多少呢\",{\"1\":{\"1779\":1}}],[\"那么简直是太tmd的了\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"那么是线程安全的\",{\"1\":{\"1231\":1}}],[\"那么这个对象就是线程安全的\",{\"1\":{\"1231\":1}}],[\"那么技术架构退化就不可避免\",{\"1\":{\"805\":1}}],[\"那么你就能够学到很多东西\",{\"1\":{\"781\":1}}],[\"那么在下一次垃圾回收的时候必然会被清理掉\",{\"1\":{\"385\":1}}],[\"那么链表首部就是最近最久未使用的节点\",{\"1\":{\"363\":1}}],[\"那么可以认为这个结果是正确的\",{\"1\":{\"359\":1}}],[\"那么\",{\"1\":{\"353\":1,\"833\":1}}],[\"那么每条链表的长度大约为\",{\"1\":{\"352\":1}}],[\"那么就应该用接口\",{\"1\":{\"802\":1}}],[\"那么就宁愿忍受该版本而不愿冒险升级\",{\"1\":{\"763\":1}}],[\"那么就一定有人会去做\",{\"1\":{\"760\":1}}],[\"那么就刷新entry中的value\",{\"1\":{\"382\":1}}],[\"那么就将\",{\"1\":{\"368\":1}}],[\"那么就可以将这个操作转换为位运算\",{\"1\":{\"351\":1}}],[\"那么就没必要全部进行序列化\",{\"1\":{\"334\":1}}],[\"那么要从道这个层面解决问题\",{\"1\":{\"230\":1}}],[\"下的\",{\"1\":{\"1709\":1}}],[\"下列属于\",{\"1\":{\"1713\":1}}],[\"下列哪些状态装饰器修饰的属性必须在本地进行初始化\",{\"1\":{\"1713\":1}}],[\"下列哪个是从\",{\"1\":{\"1712\":1}}],[\"下列哪种组合方式可以实现子组件从父子组件单向状态同步\",{\"1\":{\"1712\":1}}],[\"下列哪种组合方式不能实现子组件从父子组件之间双向数据同步\",{\"1\":{\"1708\":1}}],[\"下列关于\",{\"1\":{\"1712\":1}}],[\"下列描述正确的是\",{\"1\":{\"1709\":1}}],[\"下列描述错误的是\",{\"1\":{\"1708\":1,\"1712\":1}}],[\"下列说法错误的是\",{\"1\":{\"1708\":4}}],[\"下\",{\"0\":{\"1486\":1},\"1\":{\"1486\":1,\"1491\":1,\"1711\":1}}],[\"下拉刷新bloc\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"下划线\",{\"1\":{\"1310\":1}}],[\"下移函数到子类\",{\"1\":{\"1286\":1}}],[\"下移\",{\"1\":{\"1262\":1}}],[\"下一个断点\",{\"1\":{\"1607\":1}}],[\"下一行\",{\"1\":{\"1607\":1}}],[\"下一篇进行原理分析\",{\"1\":{\"1491\":1}}],[\"下一次执行的时候就会执行<cinit>\",{\"1\":{\"1003\":1}}],[\"下一频道\",{\"1\":{\"507\":1}}],[\"下图为自身关联\",{\"1\":{\"735\":1}}],[\"下午6点晚会同步项目进度及风险\",{\"1\":{\"595\":1}}],[\"下面说法正确的有\",{\"1\":{\"1713\":1}}],[\"下面说法错误的是\",{\"1\":{\"1708\":1}}],[\"下面描述正确的是\",{\"1\":{\"1713\":1}}],[\"下面描述错误的是\",{\"1\":{\"1708\":2}}],[\"下面哪种情况不会回调\",{\"1\":{\"1712\":1}}],[\"下面哪些方法可以移除通知\",{\"1\":{\"1713\":1}}],[\"下面哪些组件是容器组件\",{\"1\":{\"1713\":1}}],[\"下面哪些组件层次结构是正确的\",{\"1\":{\"1709\":1}}],[\"下面哪些装饰器可以用于管理自定义组件中变量的状态\",{\"1\":{\"1709\":1}}],[\"下面哪些函数是自定义组件的生命周期函数\",{\"1\":{\"1709\":1}}],[\"下面哪些是\",{\"1\":{\"1709\":1}}],[\"下面哪些容器组件是可以滚动的\",{\"1\":{\"1709\":1}}],[\"下面哪一个事件方法可以获取到\",{\"1\":{\"1708\":1}}],[\"下面哪个接口不是首选项提供的\",{\"1\":{\"1712\":1}}],[\"下面哪个组件层次结构是错误的\",{\"1\":{\"1712\":1}}],[\"下面哪个组件不能包含子组件\",{\"1\":{\"1708\":1}}],[\"下面哪个属性可以实现左右两端对齐\",{\"1\":{\"1708\":1}}],[\"下面哪个方法\",{\"1\":{\"1708\":1}}],[\"下面哪个样式是胶囊型按钮\",{\"1\":{\"1708\":1}}],[\"下面\",{\"1\":{\"1534\":1}}],[\"下面代码不建议使用\",{\"1\":{\"1518\":1}}],[\"下面这张uml图\",{\"1\":{\"735\":1}}],[\"下面是模板方法\",{\"1\":{\"501\":1}}],[\"下面就是我的笔记\",{\"1\":{\"310\":1}}],[\"下铺\",{\"1\":{\"441\":1}}],[\"下标\",{\"1\":{\"381\":1,\"1310\":1}}],[\"下载next主题\",{\"1\":{\"1960\":1}}],[\"下载hexo插件\",{\"1\":{\"1960\":1}}],[\"下载脚本\",{\"1\":{\"1905\":1}}],[\"下载记得翻墙\",{\"1\":{\"1491\":1}}],[\"下载第三方库\",{\"1\":{\"1413\":1}}],[\"下载安装\",{\"0\":{\"702\":1}}],[\"下载成功\",{\"1\":{\"103\":1}}],[\"下载进度100\",{\"1\":{\"103\":1}}],[\"下载进度11\",{\"1\":{\"103\":1}}],[\"下载进度82\",{\"1\":{\"103\":1}}],[\"下载进度75\",{\"1\":{\"103\":1}}],[\"下载进度63\",{\"1\":{\"103\":1}}],[\"下载进度50\",{\"1\":{\"103\":1}}],[\"下载进度32\",{\"1\":{\"103\":1}}],[\"下载进度23\",{\"1\":{\"103\":1}}],[\"下载进度0\",{\"1\":{\"103\":1}}],[\"下载开始\",{\"1\":{\"103\":1}}],[\"下载地址如下\",{\"1\":{\"1335\":1}}],[\"下载地址\",{\"1\":{\"16\":1,\"109\":1}}],[\"出队列\",{\"1\":{\"895\":1}}],[\"出版过一本免费的小册子\",{\"1\":{\"310\":1}}],[\"出现问题\",{\"1\":{\"1182\":1}}],[\"出现的次数\",{\"1\":{\"298\":1}}],[\"出现的界面中选择activation\",{\"1\":{\"25\":1}}],[\"出现无法加载com\",{\"0\":{\"73\":1}}],[\"软件包中使用证书已经失效过者过期\",{\"1\":{\"1709\":1}}],[\"软件包中的发布证书与发布\",{\"1\":{\"1709\":1}}],[\"软件包中的发布\",{\"1\":{\"1709\":1}}],[\"软件包未签名导制提示非法软件包\",{\"1\":{\"1709\":1}}],[\"软件包的格式是什么\",{\"1\":{\"1708\":1,\"1712\":1}}],[\"软件资源\",{\"1\":{\"824\":1}}],[\"软件框架设计的艺术\",{\"0\":{\"814\":1}}],[\"软件框架设计艺术\",{\"0\":{\"1987\":1},\"2\":{\"758\":1,\"761\":1,\"764\":1,\"767\":1,\"770\":1,\"773\":1,\"776\":1,\"779\":1,\"782\":1,\"785\":1,\"788\":1,\"791\":1,\"794\":1,\"797\":1,\"800\":1,\"803\":1,\"806\":1,\"809\":1,\"812\":1,\"815\":1}}],[\"软件熵增加\",{\"1\":{\"796\":1}}],[\"软件的演变\",{\"1\":{\"787\":1}}],[\"软件的扩展性好\",{\"1\":{\"312\":1}}],[\"软件开发的艺术\",{\"0\":{\"787\":1}}],[\"软件实体应该对扩展开放\",{\"1\":{\"752\":1}}],[\"软件从单一可部署单元\",{\"1\":{\"314\":1}}],[\"软件不易产生堵塞\",{\"1\":{\"312\":1}}],[\"软件发出的通知\",{\"1\":{\"312\":1}}],[\"软件升级时\",{\"1\":{\"311\":1}}],[\"软件一定要分成多少层\",{\"1\":{\"311\":1}}],[\"软件架构\",{\"0\":{\"310\":1},\"1\":{\"310\":1,\"1482\":1}}],[\"软引用\",{\"1\":{\"154\":1,\"1126\":1}}],[\"历史维护\",{\"1\":{\"305\":1}}],[\"历史悠远不用多说\",{\"1\":{\"12\":1,\"731\":1}}],[\"避免回调\",{\"1\":{\"1851\":1}}],[\"避免频繁用到反射\",{\"1\":{\"1598\":1}}],[\"避免频繁发送预检请求\",{\"1\":{\"650\":1}}],[\"避免不必要手写代码\",{\"1\":{\"1592\":1}}],[\"避免不必要的翻墙\",{\"1\":{\"124\":1,\"1462\":1}}],[\"避免过多全局变量\",{\"1\":{\"1540\":1}}],[\"避免过度设计\",{\"1\":{\"747\":1}}],[\"避免业务代码写到图像代码中\",{\"1\":{\"1540\":1}}],[\"避免\",{\"1\":{\"1527\":1}}],[\"避免空校验检查\",{\"1\":{\"1524\":1}}],[\"避免new\",{\"1\":{\"1494\":1}}],[\"避免了base在后期开发时急速膨胀\",{\"1\":{\"1486\":1}}],[\"避免使用者有歧义\",{\"1\":{\"1481\":1}}],[\"避免出现实现ui效果与设计存在偏差\",{\"1\":{\"1446\":1}}],[\"避免出现互相依赖的问题\",{\"1\":{\"313\":1}}],[\"避免线程切换开销\",{\"1\":{\"1242\":1}}],[\"避免方法执行时间过长\",{\"1\":{\"949\":1}}],[\"避免一个线程在所内同时占有多个资源\",{\"1\":{\"823\":1}}],[\"避免一个线程获取多个锁\",{\"1\":{\"823\":1}}],[\"避免死锁方法\",{\"1\":{\"823\":1}}],[\"避免暴露深层次继承\",{\"1\":{\"799\":1}}],[\"避免滥用setter方法\",{\"1\":{\"799\":1}}],[\"避免他们在使用api时去了解内部细节性内容\",{\"1\":{\"778\":1}}],[\"避免api误用\",{\"1\":{\"760\":1}}],[\"避免与非直接类通讯\",{\"1\":{\"754\":1}}],[\"避免版本升级混乱\",{\"1\":{\"305\":1}}],[\"避免源文件暴露问题\",{\"1\":{\"305\":1}}],[\"超类和子类之间无太大区别\",{\"1\":{\"1262\":1}}],[\"超类中某个函数只与部分子类有关\",{\"1\":{\"1262\":1}}],[\"超类成员变量按顺序初始化\",{\"1\":{\"145\":1}}],[\"超出虚拟机最大栈深度\",{\"1\":{\"1119\":1}}],[\"超出我们的视野\",{\"1\":{\"793\":1}}],[\"超时自动唤起\",{\"1\":{\"1230\":1}}],[\"超时等待返回\",{\"1\":{\"946\":1}}],[\"超时等待状态\",{\"1\":{\"943\":1}}],[\"超时获取锁\",{\"1\":{\"874\":1}}],[\"超过尝试次数\",{\"1\":{\"359\":1}}],[\"超大型工程矩阵\",{\"1\":{\"305\":1}}],[\"脚本设置参数\",{\"1\":{\"1911\":1}}],[\"脚本问题修复\",{\"1\":{\"1905\":1}}],[\"脚本命令\",{\"1\":{\"1583\":1}}],[\"脚本尾部\",{\"1\":{\"1491\":1}}],[\"脚本如下\",{\"1\":{\"1335\":1}}],[\"脚本\",{\"1\":{\"1323\":1,\"1712\":1}}],[\"脚本的核心就是一句话\",{\"1\":{\"103\":1}}],[\"脚手架\",{\"1\":{\"305\":1}}],[\"底层技术编写过于复杂\",{\"1\":{\"1494\":1}}],[\"底层库\",{\"1\":{\"1395\":1,\"1678\":1}}],[\"底层实现\",{\"1\":{\"900\":1}}],[\"底层服务\",{\"1\":{\"305\":1}}],[\"底层优化规避很多不正确的用法\",{\"1\":{\"12\":1,\"731\":1}}],[\"架构之内\",{\"1\":{\"1483\":1}}],[\"架构相关\",{\"2\":{\"306\":1,\"315\":1}}],[\"架构\",{\"0\":{\"308\":1},\"1\":{\"305\":2}}],[\"架构图作为画面\",{\"1\":{\"571\":1}}],[\"架构图\",{\"0\":{\"13\":1,\"732\":1},\"1\":{\"571\":1,\"732\":1}}],[\"康威定律\",{\"1\":{\"305\":1}}],[\"更容易理解opengl\",{\"1\":{\"1540\":1}}],[\"更高得编译版本中\",{\"1\":{\"1405\":1}}],[\"更直观\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"更多\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"更多参与到业务交付中\",{\"1\":{\"305\":1}}],[\"更清晰\",{\"1\":{\"1280\":1}}],[\"更客观\",{\"1\":{\"814\":1}}],[\"更新文档\",{\"1\":{\"1555\":1}}],[\"更新锁状态为\",{\"1\":{\"1248\":1}}],[\"更新值\",{\"1\":{\"852\":1}}],[\"更新包管理器的索引\",{\"0\":{\"692\":1}}],[\"更新包索引\",{\"0\":{\"676\":1}}],[\"更新user表\",{\"0\":{\"621\":1}}],[\"更新了\",{\"1\":{\"519\":1}}],[\"更新\",{\"0\":{\"1911\":1},\"1\":{\"519\":1}}],[\"更顶端应该是被线程持有\",{\"1\":{\"383\":1}}],[\"更注重对象创建过程\",{\"1\":{\"260\":1}}],[\"健壮的app\",{\"1\":{\"305\":1}}],[\"丰富基础库\",{\"1\":{\"305\":1}}],[\"求\",{\"1\":{\"298\":1}}],[\"扑克牌的顺子\",{\"1\":{\"298\":1}}],[\"打标签\",{\"1\":{\"1949\":1}}],[\"打tag\",{\"1\":{\"1933\":1}}],[\"打release\",{\"1\":{\"1911\":1}}],[\"打包函数\",{\"1\":{\"1709\":1}}],[\"打包\",{\"1\":{\"1399\":1,\"1534\":1,\"1682\":1}}],[\"打包工具\",{\"1\":{\"305\":1}}],[\"打折\",{\"1\":{\"513\":1}}],[\"打电话\",{\"1\":{\"453\":1}}],[\"打印当前线程名字\",{\"1\":{\"1527\":1}}],[\"打印字符串\",{\"1\":{\"1527\":1}}],[\"打印map\",{\"1\":{\"1518\":1}}],[\"打印apk信息\",{\"1\":{\"1371\":1}}],[\"打印日志\",{\"1\":{\"1329\":2}}],[\"打印hello\",{\"1\":{\"1044\":1}}],[\"打印出文件结构\",{\"1\":{\"465\":1}}],[\"打印\",{\"1\":{\"298\":1,\"926\":1,\"1534\":1,\"1604\":1}}],[\"打开官网\",{\"1\":{\"1933\":1}}],[\"打开binder驱动\",{\"1\":{\"1786\":1,\"1788\":1}}],[\"打开build\",{\"1\":{\"1317\":1}}],[\"打开\",{\"1\":{\"1771\":1,\"1777\":1,\"1804\":1}}],[\"打开java网页运行网站\",{\"1\":{\"1368\":1}}],[\"打开dump文件\",{\"1\":{\"822\":1}}],[\"打开浏览器并访问\",{\"0\":{\"680\":1}}],[\"打开相机\",{\"1\":{\"453\":2}}],[\"打开idea\",{\"1\":{\"67\":1}}],[\"打开在最后添加0\",{\"1\":{\"25\":1}}],[\"打开finder>\",{\"1\":{\"25\":1}}],[\"打开新世界\",{\"1\":{\"6\":1}}],[\"其次同步消息\",{\"1\":{\"1846\":1}}],[\"其成员变量mobject和方法exectransact\",{\"1\":{\"1751\":1}}],[\"其成员变量mremote指向binderproxy对象\",{\"1\":{\"1751\":1}}],[\"其方法asinterface\",{\"1\":{\"1751\":1}}],[\"其高度由父组件\",{\"1\":{\"1709\":1}}],[\"其宽度等于\",{\"1\":{\"1709\":1}}],[\"其参数类型为\",{\"1\":{\"1708\":1,\"1713\":1}}],[\"其主轴的方向是水平方向\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"其主轴的方向是垂直方向\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"其依赖关系是通过接口或者抽象类产生\",{\"1\":{\"753\":1}}],[\"其存储的变量只能在其所属线程中可见\",{\"1\":{\"383\":1}}],[\"其中mptr是供native代码使用\",{\"1\":{\"1845\":1}}],[\"其中编写的时候\",{\"1\":{\"1604\":1}}],[\"其中编译期效率最高的\",{\"1\":{\"1604\":1}}],[\"其中还有flutter其他快捷命令\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"其中各个元素各自代表不同的东西\",{\"1\":{\"1283\":1}}],[\"其中一个负责查询\",{\"1\":{\"1274\":1}}],[\"其中一部分工作是以大量条件表达式完成的\",{\"1\":{\"1265\":1}}],[\"其中相应的某些函数以相同顺序执行类似操作\",{\"1\":{\"1262\":1}}],[\"其中long和double占两个slot\",{\"1\":{\"1109\":2}}],[\"其中3个属性是私有的\",{\"1\":{\"738\":1}}],[\"其中可见性的三种符号表示\",{\"1\":{\"738\":1}}],[\"其中键就是threadlocal\",{\"1\":{\"381\":1}}],[\"其中\",{\"1\":{\"332\":1,\"1491\":1,\"1707\":1}}],[\"其中的\",{\"1\":{\"327\":1}}],[\"其它必须是2x\",{\"1\":{\"1443\":1}}],[\"其它\",{\"1\":{\"298\":1}}],[\"其他插件时临时遇到瓶颈\",{\"1\":{\"1905\":1}}],[\"其他服务\",{\"1\":{\"1868\":1}}],[\"其他类型\",{\"1\":{\"1702\":1}}],[\"其他类加载器\",{\"1\":{\"194\":1}}],[\"其他情况正常请求\",{\"1\":{\"1592\":1}}],[\"其他所有图形都是基于三种图元完成\",{\"1\":{\"1540\":1}}],[\"其他模块只需要引用声明即可\",{\"1\":{\"1491\":1}}],[\"其他组件方案对比\",{\"1\":{\"1479\":1}}],[\"其他字段\",{\"1\":{\"1002\":1}}],[\"其他\",{\"1\":{\"991\":1,\"1035\":1}}],[\"其他线程中\",{\"1\":{\"1851\":1}}],[\"其他线程是指并没有调用spawnpooledthread方法\",{\"1\":{\"1776\":1}}],[\"其他线程能够立即看到这个修改\",{\"1\":{\"1223\":1}}],[\"其他线程进入共享节点进入自旋\",{\"1\":{\"880\":1}}],[\"其他线程锁自旋\",{\"1\":{\"879\":1}}],[\"其他线程不能对其进行访问\",{\"1\":{\"379\":1}}],[\"其他线程被阻塞住\",{\"1\":{\"167\":1}}],[\"其他层的接口通过模拟解决\",{\"1\":{\"311\":1}}],[\"位于iservicemanager\",{\"1\":{\"1805\":2}}],[\"位于内核空间\",{\"1\":{\"1744\":1}}],[\"位\",{\"1\":{\"353\":1}}],[\"位以上数\",{\"1\":{\"351\":1}}],[\"位级表示的第\",{\"1\":{\"351\":1}}],[\"位数字\",{\"1\":{\"298\":2}}],[\"位运算的代价比求模运算小的多\",{\"1\":{\"351\":1}}],[\"位运算\",{\"1\":{\"298\":1}}],[\"位置上\",{\"1\":{\"333\":1}}],[\"位置\",{\"1\":{\"271\":1,\"1061\":1,\"1086\":1,\"1402\":1,\"1685\":1}}],[\"丑数\",{\"1\":{\"298\":2}}],[\"珠宝的最高价值\",{\"1\":{\"298\":1}}],[\"礼物的最大价值48\",{\"1\":{\"298\":1}}],[\"连接池\",{\"1\":{\"441\":1}}],[\"连接池监视\",{\"1\":{\"14\":1,\"733\":1}}],[\"连续2个slot空间为long\",{\"1\":{\"1182\":1}}],[\"连续两次得到的结果一致\",{\"1\":{\"359\":1}}],[\"连续子数组的最大和\",{\"1\":{\"298\":1}}],[\"跳转页面\",{\"1\":{\"1468\":1}}],[\"跳转应用市场\",{\"1\":{\"1326\":1}}],[\"跳转偏移量\",{\"1\":{\"1094\":1}}],[\"跳转指令\",{\"1\":{\"1094\":1}}],[\"跳跃训练\",{\"1\":{\"298\":1}}],[\"跳台阶\",{\"1\":{\"298\":1}}],[\"交叉轴是垂直方向\",{\"1\":{\"1713\":1}}],[\"交付页面切图\",{\"1\":{\"1443\":1}}],[\"交流互通才是一切\",{\"1\":{\"787\":1}}],[\"交互作为机理\",{\"1\":{\"571\":1}}],[\"交互方式\",{\"1\":{\"571\":1}}],[\"交易回滚会比较困难\",{\"1\":{\"314\":1}}],[\"交易逆序对的总数\",{\"1\":{\"298\":1}}],[\"交换数据\",{\"1\":{\"958\":1}}],[\"交换出去\",{\"1\":{\"958\":1}}],[\"交换当前遍历的值与父节点的值\",{\"1\":{\"283\":1}}],[\"交换头尾值\",{\"1\":{\"283\":1}}],[\"交换\",{\"1\":{\"279\":1,\"1239\":1}}],[\"交换两数位置\",{\"1\":{\"279\":1}}],[\"调参\",{\"1\":{\"1119\":1}}],[\"调度服务\",{\"1\":{\"938\":1}}],[\"调度中心\",{\"1\":{\"305\":1}}],[\"调整软件内部结构\",{\"1\":{\"1253\":1}}],[\"调整项目策略\",{\"1\":{\"595\":1}}],[\"调整数组顺序使奇数位于偶数前面\",{\"1\":{\"298\":1}}],[\"调低音量\",{\"1\":{\"507\":1}}],[\"调高音量\",{\"1\":{\"507\":1}}],[\"调出\",{\"1\":{\"329\":1}}],[\"调用process\",{\"1\":{\"1869\":1}}],[\"调用systemserver\",{\"1\":{\"1866\":1}}],[\"调用spawnpooledthread来创建binder主线程\",{\"1\":{\"1776\":1}}],[\"调用com\",{\"1\":{\"1861\":1}}],[\"调用相应回调方法\",{\"1\":{\"1828\":1}}],[\"调用相机\",{\"1\":{\"1417\":1}}],[\"调用open\",{\"1\":{\"1804\":1}}],[\"调用服务注册函数将服务\",{\"1\":{\"1796\":1}}],[\"调用链\",{\"1\":{\"1778\":1}}],[\"调用talkwithdriver\",{\"1\":{\"1756\":1}}],[\"调用的流程便是此处\",{\"1\":{\"1756\":1}}],[\"调用的方法\",{\"1\":{\"993\":1}}],[\"调用ipcthreadstate类的方法执行\",{\"1\":{\"1717\":2}}],[\"调用函数\",{\"1\":{\"1592\":1}}],[\"调用缓存字段\",{\"1\":{\"1527\":1}}],[\"调用父类方法\",{\"1\":{\"1527\":1}}],[\"调用实例方法\",{\"1\":{\"1527\":1}}],[\"调用是接口形式\",{\"1\":{\"1494\":1}}],[\"调用页面服务\",{\"1\":{\"1482\":1}}],[\"调用方式也比较固定死板\",{\"1\":{\"1610\":1}}],[\"调用方式统一的问题\",{\"1\":{\"1598\":1}}],[\"调用方式与eventbus一致\",{\"1\":{\"1546\":1}}],[\"调用方式\",{\"1\":{\"1481\":1}}],[\"调用方正确使用同步手段\",{\"1\":{\"1235\":1}}],[\"调用如下\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"调用这个对象行为都可以获得正确结果\",{\"1\":{\"1231\":1}}],[\"调用次数不足提交即时编译器\",{\"1\":{\"1209\":1}}],[\"调用动态方法\",{\"1\":{\"1187\":1}}],[\"调用虚方法\",{\"1\":{\"1187\":1}}],[\"调用构造<init>方法\",{\"1\":{\"1187\":1}}],[\"调用静态方法\",{\"1\":{\"1187\":1,\"1527\":1}}],[\"调用解释器\",{\"0\":{\"1102\":1}}],[\"调用本地方法\",{\"1\":{\"1022\":1}}],[\"调用当前方法的前一个方法的栈帧\",{\"1\":{\"993\":2}}],[\"调用当前的方法的哪一个方法栈帧\",{\"1\":{\"993\":1}}],[\"调用接口方法\",{\"1\":{\"1187\":1}}],[\"调用接口\",{\"1\":{\"991\":1}}],[\"调用无须绑定的实例方法\",{\"1\":{\"991\":1}}],[\"调用者\",{\"1\":{\"945\":1}}],[\"调用者所在线程来运行任务\",{\"1\":{\"246\":1,\"914\":1}}],[\"调用没有\",{\"1\":{\"338\":1}}],[\"调用\",{\"1\":{\"12\":1,\"489\":1,\"731\":1,\"926\":1,\"1358\":1}}],[\"机器人的运动范围\",{\"1\":{\"298\":1}}],[\"机建立的低优先级\",{\"1\":{\"200\":1}}],[\"搜索icon\",{\"1\":{\"1435\":1}}],[\"搜索走过的路径叫引用链\",{\"1\":{\"1125\":1}}],[\"搜索zip或jar文件形式类路径\",{\"1\":{\"1064\":1}}],[\"搜索目录下类路径\",{\"1\":{\"1064\":1}}],[\"搜索class文件\",{\"0\":{\"1060\":1}}],[\"搜索\",{\"1\":{\"298\":1}}],[\"买卖股票的最佳时机\",{\"1\":{\"298\":1}}],[\"股票最大利润\",{\"1\":{\"298\":1}}],[\"剪绳子\",{\"1\":{\"298\":1}}],[\"贪心思想\",{\"1\":{\"298\":1}}],[\"彩灯装饰记录\",{\"1\":{\"298\":1}}],[\"树型结构\",{\"1\":{\"465\":1,\"477\":1}}],[\"树中两个节点的最低公共祖先\",{\"1\":{\"298\":1}}],[\"树的子结构\",{\"1\":{\"298\":1}}],[\"树\",{\"1\":{\"298\":1}}],[\"树结构展现支持数据权限\",{\"1\":{\"14\":1,\"733\":1}}],[\"快捷键生成对应方法\",{\"1\":{\"1530\":1}}],[\"快捷键一键式开发\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"快捷命令\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"快慢指针\",{\"1\":{\"298\":1}}],[\"快速发布开源项目到jcenter\",{\"0\":{\"1908\":1},\"1\":{\"1908\":1}}],[\"快速发现定位问题\",{\"1\":{\"12\":1,\"731\":1}}],[\"快速连接的功能体验\",{\"1\":{\"1702\":3}}],[\"快速刷一遍视频\",{\"1\":{\"1701\":1}}],[\"快速访问推荐下面👇\",{\"1\":{\"1518\":1}}],[\"快速阅读kotlin\",{\"1\":{\"1509\":1}}],[\"快速接入项目\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"快速实现一键化开发\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"快速构建listview列表页面\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"快速构建stateful页面\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"快速创建executor\",{\"1\":{\"938\":1}}],[\"快速行动并实现超越\",{\"1\":{\"592\":1}}],[\"快速应用于实战\",{\"1\":{\"573\":1}}],[\"快速上线\",{\"1\":{\"305\":1}}],[\"快速迭代\",{\"1\":{\"305\":1}}],[\"快速建场\",{\"1\":{\"305\":1}}],[\"快速排序\",{\"0\":{\"279\":1}}],[\"快速http\",{\"1\":{\"12\":1,\"731\":1}}],[\"链式拼装spanbuilder\",{\"0\":{\"1306\":1}}],[\"链接\",{\"1\":{\"1049\":1}}],[\"链接class\",{\"1\":{\"979\":1}}],[\"链表转红黑树\",{\"0\":{\"355\":1}}],[\"链表头部指向新的键值对\",{\"1\":{\"350\":1}}],[\"链表不支持随机访问\",{\"1\":{\"346\":1}}],[\"链表中环的入口结点\",{\"1\":{\"298\":1}}],[\"链表中倒数第\",{\"1\":{\"298\":1}}],[\"链表\",{\"1\":{\"298\":1}}],[\"链路追踪\",{\"1\":{\"12\":1,\"731\":1}}],[\"个人理解\",{\"1\":{\"1268\":1}}],[\"个\",{\"1\":{\"358\":1}}],[\"个桶存放键为\",{\"1\":{\"350\":1}}],[\"个骰子的点数\",{\"1\":{\"298\":1}}],[\"个结点\",{\"1\":{\"298\":2}}],[\"个数不限\",{\"1\":{\"958\":1}}],[\"个数\",{\"1\":{\"298\":2}}],[\"个线程都有一个私有的本地内存\",{\"1\":{\"151\":1}}],[\"栈上分配\",{\"1\":{\"1212\":1}}],[\"栈帧中指向运行时常量池的引用\",{\"1\":{\"1184\":1}}],[\"栈帧中本地变量表\",{\"1\":{\"200\":1}}],[\"栈和堆越大\",{\"1\":{\"1119\":1}}],[\"栈内存归属于单个线程\",{\"1\":{\"383\":1}}],[\"栈压入弹出\",{\"1\":{\"298\":1}}],[\"官网\",{\"1\":{\"298\":25}}],[\"官方不建议cnpm\",{\"1\":{\"1413\":1}}],[\"官方教程\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"官方文档\",{\"1\":{\"112\":1}}],[\"官方地址\",{\"1\":{\"79\":1}}],[\"力扣\",{\"1\":{\"298\":59}}],[\"题目\",{\"1\":{\"298\":1}}],[\"剑指\",{\"1\":{\"298\":1}}],[\"剑指offer\",{\"0\":{\"298\":1}}],[\"高度与\",{\"1\":{\"1709\":1}}],[\"高仿eventbus打造rxbus2\",{\"1\":{\"1647\":1}}],[\"高速缓存的存储交互解决了处理器与内存的速度矛盾\",{\"1\":{\"1218\":1}}],[\"高级特性\",{\"1\":{\"1512\":1}}],[\"高级中间代码\",{\"1\":{\"1210\":1}}],[\"高级专家大夫定义高危产妇\",{\"1\":{\"598\":1}}],[\"高优先级订阅者可修改公共事件内容或处理结果\",{\"1\":{\"1702\":3}}],[\"高优先级分配时间片数量多于低优先级\",{\"1\":{\"942\":1}}],[\"高优先级相同的低优先级高的在前\",{\"1\":{\"287\":1}}],[\"高并发是指多线程对共享资源的原子操作\",{\"1\":{\"942\":1}}],[\"高16位表示读\",{\"1\":{\"886\":1}}],[\"高层模块不应依赖底层模块\",{\"1\":{\"750\":1,\"753\":1}}],[\"高内聚\",{\"1\":{\"750\":1}}],[\"高负载\",{\"1\":{\"314\":1}}],[\"高扩展性\",{\"1\":{\"314\":1}}],[\"高扩展\",{\"1\":{\"12\":1,\"731\":1}}],[\"依然用hack方式打印输出信息\",{\"1\":{\"1043\":1}}],[\"依靠潜意识来设计\",{\"1\":{\"757\":1}}],[\"依次类推\",{\"1\":{\"287\":1}}],[\"依赖静态类型来定位方法执行版本称之为静态分派\",{\"1\":{\"1188\":1}}],[\"依赖classpath\",{\"1\":{\"977\":1}}],[\"依赖注入+spi+rpc+javassit\",{\"1\":{\"1482\":1}}],[\"依赖注入\",{\"1\":{\"805\":1,\"1503\":1}}],[\"依赖三种方式\",{\"1\":{\"753\":1}}],[\"依赖关系自动调整\",{\"1\":{\"784\":1}}],[\"依赖关系\",{\"1\":{\"735\":1,\"738\":1}}],[\"依赖\",{\"0\":{\"735\":1},\"1\":{\"735\":3,\"1329\":1,\"1413\":1}}],[\"依赖倒置原则\",{\"1\":{\"305\":1,\"753\":1,\"802\":1}}],[\"依赖于它对象得到通知并更新\",{\"1\":{\"257\":1,\"395\":1,\"518\":1}}],[\"依赖管理\",{\"1\":{\"12\":1,\"731\":1}}],[\"减法\",{\"1\":{\"525\":1}}],[\"减少很多不必要的麻烦和配置\",{\"1\":{\"1905\":1}}],[\"减少改字符串\",{\"1\":{\"1604\":1}}],[\"减少大量不必要实现\",{\"1\":{\"1521\":1}}],[\"减少编写过多模板代码\",{\"1\":{\"1494\":1}}],[\"减少module内过度依赖\",{\"1\":{\"1494\":1}}],[\"减少生僻概念\",{\"1\":{\"1476\":1}}],[\"减少体积标配\",{\"1\":{\"1317\":1}}],[\"减少1\",{\"1\":{\"1317\":1}}],[\"减少apk体积\",{\"1\":{\"1317\":1}}],[\"减少不必要gradle脚本\",{\"1\":{\"1488\":1}}],[\"减少不必要的耦合\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"减少不必要的widget编写\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"减少不必要代码层级\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"减少不必要重复工作\",{\"1\":{\"1610\":1}}],[\"减少不必要重复劳动\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"减少不必要重复代码\",{\"1\":{\"1311\":1}}],[\"减少不必要pom依赖\",{\"1\":{\"12\":1,\"731\":1}}],[\"减少相同代码\",{\"1\":{\"1262\":1}}],[\"减少出错\",{\"1\":{\"1200\":1}}],[\"减少工作线程\",{\"1\":{\"917\":1}}],[\"减少工作线程数\",{\"1\":{\"822\":1}}],[\"减少线程\",{\"1\":{\"917\":1,\"950\":1}}],[\"减少人工手写配置\",{\"1\":{\"805\":1}}],[\"减少\",{\"1\":{\"799\":1}}],[\"减少用户查看源码来解决问题\",{\"1\":{\"793\":1}}],[\"减少扩容操作的次数\",{\"1\":{\"332\":1}}],[\"减去1\",{\"1\":{\"286\":1}}],[\"项\",{\"1\":{\"286\":1}}],[\"项目需要联合编译\",{\"1\":{\"1689\":1}}],[\"项目早期\",{\"1\":{\"1587\":1}}],[\"项目采用的是mvparms框架\",{\"1\":{\"1587\":1}}],[\"项目基于hujiang项目进行改造\",{\"1\":{\"1561\":1}}],[\"项目的一些自动配置信息\",{\"1\":{\"1555\":1}}],[\"项目稳定后\",{\"1\":{\"1494\":1}}],[\"项目编译时移除原有module中\",{\"1\":{\"1488\":1}}],[\"项目代码\",{\"1\":{\"1476\":1}}],[\"项目四处都是\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"项目中会频繁出现\",{\"1\":{\"1598\":1}}],[\"项目中重构实战示例在\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"项目中示例\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"项目中组长\",{\"1\":{\"598\":1}}],[\"项目地址\",{\"1\":{\"1320\":1,\"1383\":1,\"1527\":1,\"1666\":1}}],[\"项目运行中所处当前位置\",{\"1\":{\"598\":1}}],[\"项目关键路径\",{\"1\":{\"598\":1}}],[\"项目关键里程碑\",{\"1\":{\"586\":1}}],[\"项目负责人内心对目标不坚定的\",{\"1\":{\"598\":1}}],[\"项目排期出现重大不协调的\",{\"1\":{\"598\":1}}],[\"项目经理过于身先士卒\",{\"1\":{\"598\":1}}],[\"项目经理或组长平时管理不严格的\",{\"1\":{\"598\":1}}],[\"项目风险监控\",{\"0\":{\"598\":1}}],[\"项目与运维主动和民生协调沟通\",{\"1\":{\"595\":1}}],[\"项目上与民生商定\",{\"1\":{\"595\":1}}],[\"项目决定周二\",{\"1\":{\"595\":1}}],[\"项目确立方向\",{\"1\":{\"595\":1}}],[\"项目例会机制\",{\"1\":{\"586\":1}}],[\"项目资源\",{\"1\":{\"586\":1}}],[\"项目成果\",{\"1\":{\"586\":1}}],[\"项目目标\",{\"1\":{\"586\":1}}],[\"项目管理\",{\"0\":{\"1985\":1},\"2\":{\"581\":1,\"584\":1,\"587\":1,\"590\":1,\"593\":1,\"596\":1,\"599\":1}}],[\"项目组件化\",{\"1\":{\"305\":1}}],[\"项目路径修改\",{\"1\":{\"12\":1,\"731\":1}}],[\"项目产物由jar包和配置2部分组成\",{\"1\":{\"11\":1,\"730\":1}}],[\"项目主页配置\",{\"1\":{\"0\":1}}],[\"统摄全局\",{\"1\":{\"571\":1}}],[\"统一通过事件方法进行设置\",{\"1\":{\"1709\":1}}],[\"统一通过属性方法进行设置\",{\"1\":{\"1709\":1}}],[\"统一生态\",{\"1\":{\"1708\":1,\"1709\":1}}],[\"统一都可以写成这样\",{\"1\":{\"1598\":1}}],[\"统一名称规范\",{\"1\":{\"1253\":1,\"1286\":1}}],[\"统一上传\",{\"0\":{\"645\":1}}],[\"统一日志和异常处理\",{\"1\":{\"314\":1}}],[\"统一三位版版本号管理规则\",{\"1\":{\"305\":1}}],[\"统一协议\",{\"1\":{\"305\":1}}],[\"统一接入\",{\"1\":{\"305\":1}}],[\"统一的管理中心\",{\"1\":{\"12\":1,\"731\":1}}],[\"统计次数是相对频率\",{\"1\":{\"1209\":1}}],[\"统计执行次数\",{\"1\":{\"1209\":1}}],[\"统计所有线程分别处于什么状态\",{\"1\":{\"822\":1}}],[\"统计目标成绩的出现次数\",{\"1\":{\"298\":1}}],[\"统计数组中每个值为i的元素出现的次数\",{\"1\":{\"286\":1}}],[\"描述错误的是\",{\"1\":{\"1712\":1}}],[\"描述build的标签\",{\"1\":{\"1298\":1}}],[\"描述符\",{\"1\":{\"1109\":1}}],[\"描述api的线程模型\",{\"1\":{\"763\":1}}],[\"描述模式应用效果及使用模式应权衡问题\",{\"1\":{\"747\":1}}],[\"描述应该在什么情况下使用设计模式\",{\"1\":{\"745\":1}}],[\"描述在各种情况下通用解决方案\",{\"1\":{\"742\":1}}],[\"描述\",{\"1\":{\"286\":1,\"943\":1,\"1709\":1}}],[\"长文本\",{\"1\":{\"1702\":1}}],[\"长按\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"长期存活的对象进入老年代\",{\"1\":{\"1146\":1}}],[\"长期存活的对象将进入老年代\",{\"1\":{\"184\":1}}],[\"长度为\",{\"1\":{\"352\":1}}],[\"长度是arr数组的长度+1\",{\"1\":{\"285\":1}}],[\"递归加载接口类\",{\"1\":{\"979\":1}}],[\"递归加载父类\",{\"1\":{\"979\":2}}],[\"递归终止条件\",{\"1\":{\"284\":1}}],[\"递归调用超类的构造方法\",{\"1\":{\"145\":1}}],[\"划成长度只有2或者1的子序列\",{\"1\":{\"284\":1}}],[\"划分三类\",{\"1\":{\"194\":1}}],[\"归并排序的优点在于最好情况和最坏的情况的时间复杂度都是o\",{\"1\":{\"284\":1}}],[\"归并排序是采用分治法的典型应用\",{\"1\":{\"284\":1}}],[\"归并排序\",{\"0\":{\"284\":1},\"1\":{\"284\":1}}],[\"退出looper循环\",{\"1\":{\"1851\":1}}],[\"退出方法内\",{\"1\":{\"1607\":1}}],[\"退出方法\",{\"1\":{\"1185\":1}}],[\"退出自旋\",{\"1\":{\"879\":1,\"880\":2}}],[\"退出\",{\"1\":{\"695\":1}}],[\"退出循环\",{\"1\":{\"283\":1,\"1789\":1}}],[\"退出销毁\",{\"1\":{\"271\":2,\"1086\":2}}],[\"证书类型选择什么类型\",{\"1\":{\"1708\":1,\"1712\":1}}],[\"证明已经是大根堆\",{\"1\":{\"283\":1}}],[\"证据确凿\",{\"1\":{\"259\":1,\"447\":1}}],[\"父进程执行\",{\"1\":{\"1863\":1}}],[\"父组件通过设置属性向子组件传递参数\",{\"1\":{\"1702\":1}}],[\"父类\",{\"1\":{\"1274\":1}}],[\"父类未初始化时\",{\"1\":{\"1169\":1}}],[\"父类指针\",{\"1\":{\"1109\":1}}],[\"父类名\",{\"1\":{\"1109\":1}}],[\"父类常量池索引\",{\"1\":{\"1076\":1}}],[\"父类引用指向子类对象\",{\"1\":{\"158\":1}}],[\"父节点的索引\",{\"1\":{\"283\":1}}],[\"末尾的索引值往左减1\",{\"1\":{\"283\":1}}],[\"固定线程数\",{\"1\":{\"950\":1}}],[\"固定线程池\",{\"1\":{\"247\":2,\"828\":2}}],[\"固定策略不能轻易改变\",{\"1\":{\"501\":1}}],[\"固定最大值在末尾\",{\"1\":{\"283\":1}}],[\"固定最大值\",{\"1\":{\"283\":1}}],[\"尾指针索引减一\",{\"1\":{\"283\":1}}],[\"变的用poet写\",{\"1\":{\"1601\":1}}],[\"变成一对多\",{\"1\":{\"483\":1}}],[\"变成可复制的内存数据单元\",{\"1\":{\"314\":1}}],[\"变量可以不用给定初始值\",{\"1\":{\"1708\":1}}],[\"变量不能在组件内部进行初始化\",{\"1\":{\"1707\":1}}],[\"变量\",{\"1\":{\"1518\":1,\"1521\":1,\"1534\":1}}],[\"变量和赋值之间数据能否匹配\",{\"1\":{\"1200\":1}}],[\"变量槽slot为最小单位\",{\"1\":{\"1182\":1}}],[\"变量初始化后\",{\"1\":{\"929\":1}}],[\"变量原子性\",{\"1\":{\"861\":1}}],[\"变量数据类型建议是接口或抽象类\",{\"1\":{\"753\":1}}],[\"变量来统计该\",{\"1\":{\"359\":1}}],[\"变量存放对象引用\",{\"1\":{\"271\":1,\"1087\":1}}],[\"变量存放数据本身\",{\"1\":{\"271\":1,\"1087\":1}}],[\"变得很凌乱和笨重\",{\"1\":{\"314\":1}}],[\"变薄\",{\"1\":{\"305\":1}}],[\"变为\",{\"1\":{\"281\":1}}],[\"抓包\",{\"0\":{\"1341\":1},\"1\":{\"1341\":1}}],[\"抓新牌\",{\"1\":{\"280\":1}}],[\"抓牌排序\",{\"1\":{\"280\":1}}],[\"取反\",{\"1\":{\"1952\":1}}],[\"取出消息和处理消息\",{\"0\":{\"1828\":1}}],[\"取出消息\",{\"0\":{\"1846\":1},\"1\":{\"1546\":2}}],[\"取出下一个元素\",{\"1\":{\"280\":1}}],[\"取消binder死亡回调\",{\"1\":{\"1762\":1}}],[\"取消订阅公共事件\",{\"1\":{\"1709\":1}}],[\"取消\",{\"1\":{\"1358\":1}}],[\"取数据\",{\"1\":{\"1283\":1}}],[\"取值有如下四个\",{\"1\":{\"1310\":1}}],[\"取值\",{\"1\":{\"1110\":1,\"1628\":1}}],[\"取值通过常量池来获得\",{\"1\":{\"1110\":1}}],[\"取走元素\",{\"1\":{\"950\":1,\"958\":1}}],[\"取当前同步状态\",{\"1\":{\"876\":1}}],[\"取模效果是一样的\",{\"1\":{\"351\":1}}],[\"取模\",{\"1\":{\"351\":1}}],[\"取得数组中的最大数\",{\"1\":{\"287\":1}}],[\"取代switch\",{\"1\":{\"1518\":1}}],[\"取代嵌套条件表达式\",{\"1\":{\"1277\":1}}],[\"取代\",{\"0\":{\"112\":1}}],[\"右value\",{\"1\":{\"1518\":1}}],[\"右边进行归并排序\",{\"1\":{\"284\":1}}],[\"右边的数就比基准值大\",{\"1\":{\"279\":1}}],[\"右节点索引\",{\"1\":{\"283\":1}}],[\"右键\",{\"1\":{\"67\":1}}],[\"左图中waitforresponse收到br\",{\"1\":{\"1755\":1}}],[\"左key\",{\"1\":{\"1518\":1}}],[\"左边距在logoiv右侧开始\",{\"1\":{\"1346\":1}}],[\"左边距是8dp\",{\"1\":{\"1346\":1}}],[\"左边进行归并排序\",{\"1\":{\"284\":1}}],[\"左边的数就比基准值小\",{\"1\":{\"279\":1}}],[\"左节点索引\",{\"1\":{\"283\":1}}],[\"左右\",{\"1\":{\"1320\":1}}],[\"左右两边数列递归结束后\",{\"1\":{\"279\":1}}],[\"左右各一排\",{\"1\":{\"279\":1}}],[\"选用dart的人\",{\"1\":{\"1689\":1}}],[\"选用lookup理由\",{\"1\":{\"805\":1}}],[\"选中url\",{\"1\":{\"1549\":1}}],[\"选项\",{\"1\":{\"1474\":1}}],[\"选文件\",{\"1\":{\"1292\":1}}],[\"选择题\",{\"0\":{\"1708\":1}}],[\"选择选择java\",{\"1\":{\"1604\":1}}],[\"选择intellij\",{\"1\":{\"1555\":1}}],[\"选择\",{\"1\":{\"1317\":2}}],[\"选择真正的理由\",{\"1\":{\"802\":1}}],[\"选择排序\",{\"0\":{\"282\":1}}],[\"选择2018年3月6日\",{\"1\":{\"109\":1}}],[\"选基准\",{\"1\":{\"279\":1}}],[\"冒泡排序\",{\"1\":{\"278\":1}}],[\"冒泡算法\",{\"0\":{\"278\":1}}],[\"确认redis已经安装并且服务正在运行\",{\"1\":{\"707\":1}}],[\"确认项目时间范围\",{\"1\":{\"586\":1}}],[\"确保在权限检查时基于本地进程\",{\"1\":{\"1843\":1}}],[\"确保无误后\",{\"1\":{\"1441\":1}}],[\"确保异常及时处理\",{\"1\":{\"1061\":1}}],[\"确保它正在运行\",{\"0\":{\"694\":1}}],[\"确保一个类只有一个实例\",{\"1\":{\"257\":1,\"393\":1,\"402\":1}}],[\"确定民生1期需求范围开户\",{\"1\":{\"595\":1}}],[\"确定更高目标\",{\"1\":{\"592\":1}}],[\"确定汇报关系\",{\"1\":{\"537\":1}}],[\"确定桶下标的最后一步是将\",{\"1\":{\"351\":1}}],[\"确定桶下标\",{\"0\":{\"351\":1},\"1\":{\"350\":1}}],[\"确定第二大的数\",{\"1\":{\"278\":1}}],[\"排除\",{\"1\":{\"1709\":1}}],[\"排除最大的数\",{\"1\":{\"278\":1}}],[\"排期评审\",{\"1\":{\"598\":1}}],[\"排期细化\",{\"1\":{\"598\":1}}],[\"排序插入到messagequeue中\",{\"1\":{\"1847\":1}}],[\"排序效率较高\",{\"1\":{\"285\":1}}],[\"排序\",{\"1\":{\"280\":1,\"298\":1}}],[\"排序完成\",{\"1\":{\"279\":1,\"282\":1,\"283\":1,\"285\":1}}],[\"排序算法时间复杂度\",{\"0\":{\"277\":1}}],[\"排序算法\",{\"0\":{\"276\":1},\"1\":{\"276\":1}}],[\"排序算法大纲\",{\"0\":{\"275\":1}}],[\"思考路径\",{\"1\":{\"1486\":1}}],[\"思想是flux\",{\"1\":{\"1386\":1,\"1669\":1}}],[\"思维导图\",{\"0\":{\"580\":1}}],[\"思维盲点\",{\"1\":{\"230\":1}}],[\"思路\",{\"1\":{\"278\":1,\"279\":1,\"280\":1,\"281\":1,\"282\":1,\"283\":1,\"284\":1,\"285\":1,\"1402\":1,\"1685\":1}}],[\"相关技术\",{\"1\":{\"1503\":1}}],[\"相当于framelayout布局\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"相当于view\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"相当于mvp\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"相当于占位符\",{\"1\":{\"1310\":1}}],[\"相当于结构化编程之于意大利面条代码\",{\"1\":{\"805\":1}}],[\"相对位置\",{\"1\":{\"1346\":1,\"1445\":1}}],[\"相对大小\",{\"1\":{\"1310\":1}}],[\"相对线程安全\",{\"0\":{\"1234\":1}}],[\"相对隔离的\",{\"1\":{\"379\":1}}],[\"相同模块\",{\"1\":{\"1518\":1}}],[\"相同功能函数\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"相同年龄对象大小之和>survivor空间大小\",{\"1\":{\"1146\":1}}],[\"相同之处\",{\"1\":{\"264\":1}}],[\"相似api的桥接和共存\",{\"1\":{\"775\":1}}],[\"相交链表\",{\"1\":{\"298\":2}}],[\"相反的\",{\"1\":{\"285\":1}}],[\"相邻元素\",{\"1\":{\"278\":1}}],[\"相邻冒泡\",{\"1\":{\"278\":1}}],[\"比原计划12月9日审核通过整体提前2周\",{\"1\":{\"595\":1}}],[\"比较弱全局引用所引用对象是否被\",{\"1\":{\"1530\":1}}],[\"比较局部引用或者全局引用是否为\",{\"1\":{\"1530\":1}}],[\"比较局部引用\",{\"1\":{\"1530\":1}}],[\"比较直观\",{\"1\":{\"1494\":1}}],[\"比较并交换cas\",{\"1\":{\"1239\":1}}],[\"比较的是地址\",{\"1\":{\"1203\":1}}],[\"比较形象地展示了各种类图关系\",{\"1\":{\"735\":1}}],[\"比较重要的几个方法\",{\"1\":{\"381\":1}}],[\"比较相邻的元素\",{\"1\":{\"278\":1}}],[\"比喻动作\",{\"1\":{\"280\":1}}],[\"比喻\",{\"1\":{\"278\":1,\"279\":1,\"280\":1,\"281\":1,\"282\":1}}],[\"比如非法handle\",{\"1\":{\"1755\":1}}],[\"比如下载gradle\",{\"1\":{\"1413\":1}}],[\"比如string\",{\"1\":{\"1232\":1}}],[\"比如上图中汽车包含了发动机\",{\"1\":{\"738\":1}}],[\"比如前后端分离后\",{\"1\":{\"649\":1}}],[\"比如rest\",{\"1\":{\"314\":1}}],[\"比如新生代\",{\"1\":{\"206\":1}}],[\"比如debian\",{\"1\":{\"16\":1}}],[\"数量相等\",{\"1\":{\"360\":1}}],[\"数学公式会用到\",{\"1\":{\"1310\":2}}],[\"数学\",{\"1\":{\"298\":1}}],[\"数值的整数次方\",{\"1\":{\"298\":1}}],[\"数字型\",{\"1\":{\"1708\":1}}],[\"数字面值中间加下划线\",{\"1\":{\"1518\":1}}],[\"数字\",{\"1\":{\"298\":1,\"525\":1}}],[\"数字在排序数组中出现的次数\",{\"1\":{\"298\":1}}],[\"数字类型\",{\"1\":{\"271\":1,\"1087\":1}}],[\"数组操作\",{\"1\":{\"1530\":1}}],[\"数组array\",{\"1\":{\"1518\":1}}],[\"数组范围检查\",{\"1\":{\"1211\":1}}],[\"数组对象特有\",{\"1\":{\"1117\":1}}],[\"数组length\",{\"1\":{\"1117\":1}}],[\"数组扩展\",{\"0\":{\"1014\":1}}],[\"数组类\",{\"1\":{\"1008\":1}}],[\"数组类的数据是jvm在运行期间动态生成的\",{\"1\":{\"978\":1,\"1009\":1,\"1030\":1}}],[\"数组类型\",{\"1\":{\"271\":1,\"1009\":1,\"1030\":1,\"1087\":1}}],[\"数组value通过构造方法传递进去\",{\"1\":{\"900\":1}}],[\"数组\",{\"1\":{\"738\":1,\"900\":1}}],[\"数组支持随机访问\",{\"1\":{\"346\":1}}],[\"数组的默认大小为\",{\"1\":{\"331\":1}}],[\"数组中只出现一次的数\",{\"1\":{\"298\":1}}],[\"数组中的逆序对\",{\"1\":{\"298\":1}}],[\"数组中重复的数字\",{\"1\":{\"298\":1}}],[\"数组与矩阵\",{\"1\":{\"298\":1}}],[\"数据操作\",{\"1\":{\"1771\":1}}],[\"数据错误检查\",{\"1\":{\"1756\":1}}],[\"数据拷贝失败\",{\"1\":{\"1755\":1}}],[\"数据驱动更新\",{\"1\":{\"1709\":1}}],[\"数据量大\",{\"1\":{\"1524\":1}}],[\"数据量大时\",{\"1\":{\"1521\":1}}],[\"数据变换重新排列\",{\"1\":{\"1521\":1}}],[\"数据类\",{\"1\":{\"1521\":1}}],[\"数据类型检测\",{\"1\":{\"1518\":1}}],[\"数据类型\",{\"1\":{\"271\":1,\"1087\":1}}],[\"数据是单向流动\",{\"1\":{\"1386\":1,\"1669\":1}}],[\"数据是无序的\",{\"1\":{\"216\":1}}],[\"数据来源\",{\"1\":{\"1377\":1}}],[\"数据要刷新\",{\"1\":{\"1332\":1}}],[\"数据清晰\",{\"1\":{\"1283\":1}}],[\"数据实体类\",{\"1\":{\"1280\":1}}],[\"数据及控制流分析\",{\"1\":{\"1200\":1}}],[\"数据流分析\",{\"1\":{\"1197\":1}}],[\"数据流中的中位数\",{\"1\":{\"298\":2}}],[\"数据id按照hash算法分段取模\",{\"1\":{\"821\":1}}],[\"数据统计\",{\"1\":{\"668\":1}}],[\"数据不一致\",{\"1\":{\"343\":1}}],[\"数据中间件\",{\"1\":{\"314\":1}}],[\"数据复制\",{\"1\":{\"314\":1}}],[\"数据合并主键冲突重复而发愁\",{\"1\":{\"12\":1,\"731\":1}}],[\"数据库连接\",{\"1\":{\"834\":1}}],[\"数据库连接池\",{\"1\":{\"12\":1,\"731\":1}}],[\"数据库\",{\"1\":{\"311\":1,\"1702\":1}}],[\"数据库主键\",{\"1\":{\"12\":1,\"731\":1}}],[\"数据进行翻译支持多种模式\",{\"1\":{\"12\":1,\"731\":1}}],[\"数据翻译\",{\"1\":{\"12\":1,\"731\":1}}],[\"数据加解密\",{\"1\":{\"12\":1,\"731\":1}}],[\"数据脱敏\",{\"1\":{\"12\":1,\"731\":1}}],[\"数据分页\",{\"1\":{\"12\":1,\"731\":1}}],[\"数据连接池及监控\",{\"1\":{\"12\":1,\"731\":1}}],[\"数据权限\",{\"1\":{\"12\":2,\"731\":2}}],[\"执行handlechildproc方法\",{\"1\":{\"1869\":1}}],[\"执行rc文件中触发器为\",{\"1\":{\"1857\":3}}],[\"执行reponse相应的回调方法\",{\"1\":{\"1828\":1}}],[\"执行完成后\",{\"1\":{\"1846\":1}}],[\"执行binder\",{\"1\":{\"1761\":1}}],[\"执行相应的操作\",{\"1\":{\"1756\":1}}],[\"执行层\",{\"1\":{\"1733\":1}}],[\"执行测试\",{\"1\":{\"1728\":1}}],[\"执行命令\",{\"1\":{\"1613\":1,\"1905\":1}}],[\"执行命令行\",{\"1\":{\"103\":2,\"1613\":1}}],[\"执行时序\",{\"1\":{\"1574\":1}}],[\"执行片段着色器\",{\"1\":{\"1540\":1}}],[\"执行顶点着色器和组装图元\",{\"1\":{\"1540\":1}}],[\"执行原方法\",{\"1\":{\"1374\":1,\"1589\":1}}],[\"执行moniter指令时\",{\"1\":{\"1238\":1}}],[\"执行注解处理\",{\"1\":{\"1197\":1}}],[\"执行finalize方法\",{\"1\":{\"1127\":1}}],[\"执行<init>方法\",{\"1\":{\"1116\":1}}],[\"执行类加载过程\",{\"1\":{\"1116\":1}}],[\"执行native方法\",{\"1\":{\"1115\":1}}],[\"执行new指令创建类实例\",{\"1\":{\"1002\":1}}],[\"执行\",{\"0\":{\"1733\":1},\"1\":{\"1101\":1,\"1713\":1}}],[\"执行操作数栈\",{\"1\":{\"1094\":2}}],[\"执行主类\",{\"1\":{\"1055\":1}}],[\"执行文件目录android\",{\"1\":{\"1341\":1}}],[\"执行文件\",{\"0\":{\"1055\":1}}],[\"执行某些反射操作\",{\"1\":{\"1002\":1}}],[\"执行invokestatic调用静态方法\",{\"1\":{\"1002\":1}}],[\"执行putstatic\",{\"1\":{\"1002\":1}}],[\"执行栈帧\",{\"1\":{\"994\":1}}],[\"执行指令逻辑\",{\"1\":{\"1101\":1}}],[\"执行指令集的调用者\",{\"0\":{\"1101\":1}}],[\"执行指令\",{\"1\":{\"994\":1,\"1183\":1}}],[\"执行任务\",{\"1\":{\"950\":1}}],[\"执行任务并合并结果\",{\"1\":{\"897\":1}}],[\"执行工作\",{\"1\":{\"950\":1}}],[\"执行job\",{\"1\":{\"917\":1}}],[\"执行一个任务\",{\"1\":{\"897\":1}}],[\"执行子任务\",{\"1\":{\"897\":1}}],[\"执行代码\",{\"1\":{\"870\":1}}],[\"执行逻辑\",{\"1\":{\"870\":1}}],[\"执行程序时\",{\"1\":{\"859\":1}}],[\"执行程序读取写文件及其内容\",{\"1\":{\"793\":1}}],[\"执行力\",{\"1\":{\"592\":1}}],[\"执行项目例会\",{\"1\":{\"586\":1}}],[\"执行当前方法的帧\",{\"1\":{\"271\":1,\"1087\":1}}],[\"寄存器\",{\"1\":{\"271\":1,\"1087\":1}}],[\"寄存器以及其他的硬件和编译器优化\",{\"1\":{\"151\":1}}],[\"堆溢出\",{\"1\":{\"1119\":1}}],[\"堆\",{\"1\":{\"1115\":1}}],[\"堆内存中的对象可以被所有线程访问\",{\"1\":{\"383\":1}}],[\"堆栈中\",{\"1\":{\"1209\":1}}],[\"堆栈\",{\"1\":{\"942\":1}}],[\"堆栈队列\",{\"1\":{\"298\":1}}],[\"堆栈等相关信息\",{\"1\":{\"14\":1,\"733\":1}}],[\"堆排序\",{\"0\":{\"283\":1,\"285\":1}}],[\"堆heap\",{\"1\":{\"271\":1,\"1086\":1}}],[\"字节\",{\"1\":{\"1708\":1}}],[\"字节码需要reference类型参数来指明锁定和解锁对象\",{\"1\":{\"1238\":1}}],[\"字节码\",{\"1\":{\"1203\":1}}],[\"字节码生成\",{\"1\":{\"1200\":1}}],[\"字节码执行引擎\",{\"0\":{\"1180\":1,\"1189\":1}}],[\"字节码验证\",{\"1\":{\"1171\":1}}],[\"字体版权特别声明\",{\"0\":{\"1446\":1}}],[\"字体大小或者内容与标注空间大小\",{\"1\":{\"1445\":1}}],[\"字体大小\",{\"1\":{\"1445\":1}}],[\"字体\",{\"1\":{\"1444\":1}}],[\"字体样式\",{\"1\":{\"1310\":1}}],[\"字面量\",{\"1\":{\"1110\":1}}],[\"字符型\",{\"1\":{\"1708\":1}}],[\"字符串操作\",{\"1\":{\"1527\":1,\"1530\":1}}],[\"字符串模板\",{\"1\":{\"1518\":1}}],[\"字符串参数\",{\"1\":{\"1016\":1,\"1044\":1}}],[\"字符串测试\",{\"0\":{\"1016\":1}}],[\"字符串\",{\"1\":{\"1015\":1,\"1110\":2,\"1530\":1}}],[\"字符串utf\",{\"1\":{\"1015\":1}}],[\"字符串转换整数\",{\"1\":{\"298\":1}}],[\"字符串中的单词反转\",{\"1\":{\"298\":1}}],[\"字符串中的第一个唯一字符\",{\"1\":{\"298\":2}}],[\"字符串单词反转\",{\"1\":{\"298\":1}}],[\"字符流中第一个不重复的字符\",{\"1\":{\"298\":2}}],[\"字段当前需要固定配置为\",{\"1\":{\"1711\":1}}],[\"字段上移\",{\"1\":{\"1262\":1}}],[\"字段的解析\",{\"1\":{\"1173\":1}}],[\"字段或方法\",{\"1\":{\"1109\":1}}],[\"字段或方法的描述符常量池索引\",{\"1\":{\"1079\":1}}],[\"字段或方法的访问标志\",{\"1\":{\"1079\":1}}],[\"字段名或方法名的常量池索引\",{\"1\":{\"1079\":1}}],[\"字段和方法表\",{\"0\":{\"1079\":1}}],[\"字段表\",{\"1\":{\"1076\":1,\"1109\":3}}],[\"字段我们可以看出\",{\"1\":{\"348\":1}}],[\"字段\",{\"1\":{\"271\":1,\"1086\":1,\"1110\":2,\"1283\":1}}],[\"字典管理\",{\"1\":{\"14\":1,\"668\":1,\"733\":1}}],[\"字典翻译等\",{\"1\":{\"12\":1,\"731\":1}}],[\"帧计算要重点看\",{\"1\":{\"271\":1,\"1086\":1}}],[\"运算在没有遇到算术运算情况下不会拆箱\",{\"1\":{\"1203\":1}}],[\"运算功能来自线程jvm栈帧\",{\"1\":{\"271\":1,\"1086\":1}}],[\"运动车\",{\"1\":{\"435\":1}}],[\"运行项目报错\",{\"1\":{\"1555\":1}}],[\"运行快\",{\"1\":{\"1530\":1}}],[\"运行壳工程配置\",{\"1\":{\"1474\":1}}],[\"运行期\",{\"0\":{\"1206\":1}}],[\"运行期确定\",{\"1\":{\"991\":1}}],[\"运行main主方法\",{\"1\":{\"1044\":1}}],[\"运行状态转为就绪状态\",{\"1\":{\"944\":1}}],[\"运行状态\",{\"1\":{\"943\":1,\"1230\":2}}],[\"运行时\",{\"1\":{\"1604\":1}}],[\"运行时注解\",{\"1\":{\"1592\":1}}],[\"运行时效率低下\",{\"1\":{\"1494\":1}}],[\"运行时动态放入到base模块\",{\"1\":{\"1486\":1}}],[\"运行时栈帧结构\",{\"0\":{\"1181\":1},\"1\":{\"1181\":1}}],[\"运行时用子类替换\",{\"1\":{\"753\":1}}],[\"运行时常量池\",{\"1\":{\"271\":1,\"1086\":1,\"1109\":1,\"1110\":1,\"1115\":1}}],[\"运行时数据类型\",{\"1\":{\"271\":1,\"1086\":1}}],[\"运行时数据区\",{\"0\":{\"1085\":1,\"1115\":1},\"1\":{\"271\":1,\"1086\":1,\"1115\":1}}],[\"运行时数据\",{\"0\":{\"271\":1,\"1087\":1},\"1\":{\"271\":1,\"1087\":1,\"1088\":1}}],[\"运行\",{\"1\":{\"85\":1,\"943\":1,\"1056\":1,\"1546\":1,\"1702\":1}}],[\"跨端迁移和协同是哪个鸿蒙特征的能力\",{\"1\":{\"1708\":1}}],[\"跨端迁移和多端协同\",{\"1\":{\"1702\":3}}],[\"跨端迁移\",{\"1\":{\"1702\":1}}],[\"跨端迁移是一种实现用户应用程序流转的技术方案\",{\"1\":{\"1702\":1}}],[\"跨端技术解决一套代码\",{\"1\":{\"1694\":1}}],[\"跨端技术和独立集成是一个硬币两面\",{\"1\":{\"1694\":1}}],[\"跨端技术有用到uniapp\",{\"1\":{\"1694\":1}}],[\"跨端技术与独立集成\",{\"0\":{\"1693\":1}}],[\"跨端技术\",{\"0\":{\"566\":1,\"2002\":1},\"2\":{\"1691\":1,\"1695\":1,\"1700\":1,\"1703\":1,\"1705\":1,\"1714\":1}}],[\"跨线程使用\",{\"1\":{\"1530\":2}}],[\"跨组件调用\",{\"1\":{\"1481\":1}}],[\"跨域问题\",{\"1\":{\"652\":1}}],[\"跨域允许时间\",{\"1\":{\"650\":1}}],[\"跨域资源共享\",{\"1\":{\"649\":1}}],[\"跨域配置\",{\"1\":{\"12\":1,\"638\":1,\"731\":1}}],[\"跨平台多端赋能\",{\"1\":{\"305\":1}}],[\"跨技术栈提升研发效能\",{\"1\":{\"305\":1}}],[\"跨进程通信\",{\"0\":{\"268\":1}}],[\"冗余类\",{\"1\":{\"265\":1,\"1256\":1,\"1286\":1}}],[\"过滤\",{\"1\":{\"1518\":1}}],[\"过于追求语法简洁\",{\"1\":{\"1512\":1}}],[\"过于强大插件功能\",{\"1\":{\"1476\":1}}],[\"过于关注某些缺点\",{\"1\":{\"598\":1}}],[\"过多注释\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"过多根据能力和态度判断一个人\",{\"1\":{\"598\":1}}],[\"过度设计\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"过度依赖\",{\"1\":{\"763\":1}}],[\"过大的类\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"过长函数\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"过长参数列表\",{\"1\":{\"265\":1,\"1256\":1,\"1286\":1}}],[\"过程中再进入spawnpooledthread\",{\"1\":{\"1776\":1}}],[\"过程中赋值\",{\"1\":{\"1756\":1}}],[\"过程\",{\"1\":{\"1761\":3,\"1799\":1}}],[\"过程3\",{\"1\":{\"1197\":1}}],[\"过程1\",{\"1\":{\"1197\":2}}],[\"过程2\",{\"1\":{\"1197\":1}}],[\"过期方法suspend\",{\"1\":{\"945\":1}}],[\"过期时间\",{\"1\":{\"12\":1,\"731\":1}}],[\"过去人们一直认为设计工作不能由一个集体来完成\",{\"1\":{\"796\":1}}],[\"三角形\",{\"1\":{\"1540\":1}}],[\"三\",{\"0\":{\"313\":1,\"329\":1,\"381\":1,\"1308\":1,\"1638\":1},\"1\":{\"319\":1,\"598\":1,\"738\":1,\"1552\":1,\"1577\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1,\"1805\":1}}],[\"三则重构\",{\"1\":{\"265\":1,\"1253\":1}}],[\"三方组件是开发者在系统能力的基础上进行了一层具体功能的封装\",{\"1\":{\"1711\":1}}],[\"三方库的包依赖是在哪个配置文件中\",{\"1\":{\"1708\":1}}],[\"三方支付\",{\"1\":{\"12\":1,\"731\":1}}],[\"三方插件依赖\",{\"1\":{\"12\":1,\"731\":1}}],[\"事有始终\",{\"1\":{\"1271\":1}}],[\"事后返工的\",{\"1\":{\"598\":1}}],[\"事件方法\",{\"1\":{\"1709\":1}}],[\"事件防抖\",{\"1\":{\"1561\":1}}],[\"事件总线\",{\"1\":{\"805\":1}}],[\"事件处理器可以独立地加载和卸载\",{\"1\":{\"312\":1}}],[\"事件处理器之间高度解耦\",{\"1\":{\"312\":1}}],[\"事件队列\",{\"1\":{\"312\":1}}],[\"事件\",{\"1\":{\"312\":1,\"1711\":1}}],[\"事件驱动架构\",{\"0\":{\"312\":1},\"1\":{\"312\":1}}],[\"事不过三\",{\"1\":{\"265\":1,\"1253\":1}}],[\"事务监控\",{\"1\":{\"12\":1,\"731\":1}}],[\"他会陷入阻塞状态\",{\"1\":{\"958\":1}}],[\"他需要一个架构师对所有设计进行决策\",{\"1\":{\"796\":1}}],[\"他们共享同一主内存\",{\"1\":{\"1218\":1}}],[\"他们要么改进后给我\",{\"1\":{\"778\":1}}],[\"他们之间相互关系及各自职责和协助方式\",{\"1\":{\"746\":1}}],[\"他们之间通过一个中介对象进行\",{\"1\":{\"262\":1}}],[\"他首先不会自己尝试加载这个类\",{\"1\":{\"194\":1}}],[\"转移函数\",{\"1\":{\"1286\":1}}],[\"转化到字节码写到磁盘中\",{\"1\":{\"1200\":1}}],[\"转化为\",{\"1\":{\"1110\":2}}],[\"转换函数\",{\"1\":{\"1530\":1}}],[\"转换成\",{\"1\":{\"1081\":1}}],[\"转换为iremoteservice\",{\"1\":{\"1739\":1}}],[\"转换为unicode编码\",{\"1\":{\"1530\":1}}],[\"转换为utf编码\",{\"1\":{\"1530\":1}}],[\"转换为序列\",{\"1\":{\"1521\":2}}],[\"转换为\",{\"1\":{\"1015\":1,\"1806\":1}}],[\"转换时\",{\"1\":{\"259\":1}}],[\"转自阮一峰\",{\"1\":{\"314\":1}}],[\"转载博客\",{\"1\":{\"1577\":1}}],[\"转载请注明地址\",{\"1\":{\"580\":1}}],[\"转载\",{\"1\":{\"52\":1,\"100\":1,\"735\":1}}],[\"获取指定tag代码\",{\"1\":{\"1949\":1}}],[\"获取一条消息\",{\"1\":{\"1846\":1}}],[\"获取一个key对应的value\",{\"1\":{\"885\":1}}],[\"获取looper对象中的消息队列\",{\"1\":{\"1843\":1}}],[\"获取tls存储的looper对象\",{\"1\":{\"1843\":1}}],[\"获取tls中的looper对象\",{\"1\":{\"1829\":1}}],[\"获取bpservicemanager对象\",{\"1\":{\"1798\":1}}],[\"获取binder线程名\",{\"1\":{\"1778\":1}}],[\"获取binderproxy\",{\"1\":{\"1762\":1}}],[\"获取processstate对象\",{\"1\":{\"1778\":1}}],[\"获取以下信息\",{\"1\":{\"1770\":1}}],[\"获取ipc数据中的binder协议\",{\"1\":{\"1770\":1}}],[\"获取或创建parcel对象\",{\"1\":{\"1756\":1}}],[\"获取服务\",{\"0\":{\"1799\":1},\"1\":{\"1744\":1}}],[\"获取名为\",{\"1\":{\"1726\":1,\"1731\":1,\"1756\":1,\"1799\":1}}],[\"获取servicemanager\",{\"1\":{\"1744\":1,\"1799\":1}}],[\"获取service\",{\"1\":{\"1725\":1,\"1726\":1}}],[\"获取控件id\",{\"1\":{\"1604\":1}}],[\"获取文件uri\",{\"1\":{\"1417\":1}}],[\"获取并增加\",{\"1\":{\"1239\":1}}],[\"获取对象引用\",{\"1\":{\"984\":1}}],[\"获取对象的锁\",{\"1\":{\"948\":1}}],[\"获取字段符号引用\",{\"1\":{\"984\":2}}],[\"获取类符号引用\",{\"1\":{\"984\":3}}],[\"获取当前field字段\",{\"1\":{\"1604\":1}}],[\"获取当前文件夹名\",{\"1\":{\"1534\":1}}],[\"获取当前任务类型\",{\"1\":{\"1474\":1}}],[\"获取当前栈\",{\"1\":{\"994\":1}}],[\"获取当前栈帧所在类的常量池\",{\"1\":{\"984\":3}}],[\"获取当前方法需要的参数个数\",{\"1\":{\"993\":1}}],[\"获取当前线程\",{\"1\":{\"381\":2}}],[\"获取读取锁\",{\"1\":{\"932\":1}}],[\"获取写入锁\",{\"1\":{\"932\":1}}],[\"获取活动的线程数\",{\"1\":{\"916\":1}}],[\"获取同步状态\",{\"1\":{\"879\":2}}],[\"获取下一个entry对象\",{\"1\":{\"381\":1}}],[\"获取key对应的\",{\"1\":{\"381\":1}}],[\"获取entry对象\",{\"1\":{\"381\":1}}],[\"获取到就把对象放入\",{\"1\":{\"368\":1}}],[\"获取\",{\"1\":{\"368\":1}}],[\"获取实体类classloader\",{\"1\":{\"259\":1}}],[\"获取小民的classloader\",{\"1\":{\"259\":1,\"447\":1}}],[\"获得服务\",{\"1\":{\"1804\":1}}],[\"获得servicemanage\",{\"0\":{\"1803\":1,\"1804\":1}}],[\"获得servicemethod的值\",{\"1\":{\"1592\":1}}],[\"获得processstate实例对象\",{\"1\":{\"1798\":1}}],[\"获得加固宝输出路径\",{\"1\":{\"1613\":1}}],[\"获得加载类名字\",{\"1\":{\"985\":1,\"996\":1,\"1044\":1}}],[\"获得值\",{\"1\":{\"1592\":1}}],[\"获得光标下单词\",{\"1\":{\"1555\":1}}],[\"获得复制内容\",{\"1\":{\"1552\":1}}],[\"获得该类注解信息列表\",{\"1\":{\"1546\":1}}],[\"获得源字符串的指针\",{\"1\":{\"1527\":1}}],[\"获得\",{\"1\":{\"1506\":1}}],[\"获得泛型类及泛型实例化\",{\"0\":{\"1506\":1}}],[\"获得return\",{\"1\":{\"1456\":1}}],[\"获得t\",{\"0\":{\"1456\":1},\"1\":{\"1456\":1,\"1506\":1}}],[\"获得返回报文\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"获得apk路径\",{\"1\":{\"1613\":1}}],[\"获得apk全路径\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"获得api\",{\"1\":{\"1317\":1}}],[\"获得+1\",{\"1\":{\"1238\":1}}],[\"获得下一个指令集便宜\",{\"1\":{\"1101\":1}}],[\"获得main函数\",{\"1\":{\"1102\":2}}],[\"获得main方法\",{\"1\":{\"985\":1,\"996\":1,\"1044\":1}}],[\"获得method类\",{\"1\":{\"1101\":1}}],[\"获得异常类\",{\"1\":{\"1036\":1}}],[\"获得classfile\",{\"1\":{\"1102\":1}}],[\"获得classname\",{\"1\":{\"1064\":1}}],[\"获得classloader\",{\"1\":{\"985\":1,\"996\":1}}],[\"获得cpu个数\",{\"1\":{\"248\":1}}],[\"获得当前元素的typeelement\",{\"1\":{\"1604\":1}}],[\"获得当前复制内容\",{\"1\":{\"1555\":1}}],[\"获得当前页面实例\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"获得当前任务数\",{\"1\":{\"950\":1}}],[\"获得当前队列大小\",{\"1\":{\"950\":1,\"958\":1}}],[\"获得对象的锁\",{\"1\":{\"948\":1}}],[\"获得同步状态\",{\"1\":{\"880\":1}}],[\"获得锁\",{\"1\":{\"879\":1}}],[\"获得锁和释放锁的效率\",{\"1\":{\"845\":1}}],[\"获得动态实例\",{\"1\":{\"447\":1}}],[\"获得动态代理实例\",{\"1\":{\"259\":1}}],[\"获得接口列表\",{\"1\":{\"259\":1}}],[\"获得注册码\",{\"1\":{\"109\":1}}],[\"获得签名串\",{\"1\":{\"106\":1}}],[\"判定热点方法\",{\"1\":{\"1209\":2}}],[\"判断消息是否正在使用\",{\"1\":{\"1850\":1}}],[\"判断题\",{\"0\":{\"1707\":1,\"1711\":1}}],[\"判断当前类是fragment\",{\"1\":{\"1604\":1}}],[\"判断当前是不是activity类\",{\"1\":{\"1604\":1}}],[\"判断当前任务\",{\"1\":{\"1474\":1}}],[\"判断集合是否包含\",{\"1\":{\"1518\":1}}],[\"判断是否安装支付宝app\",{\"1\":{\"1358\":1}}],[\"判断是否安装支付宝\",{\"1\":{\"1358\":1}}],[\"判断小数点后只能输入两位\",{\"1\":{\"1349\":1}}],[\"判断\",{\"1\":{\"984\":2}}],[\"判断对象是否属于某类型\",{\"1\":{\"983\":1}}],[\"判断线程是否被中断\",{\"1\":{\"944\":1}}],[\"判断一个api是否优秀\",{\"1\":{\"796\":1}}],[\"判断方法\",{\"1\":{\"751\":1}}],[\"判断需要修改字段\",{\"0\":{\"622\":1}}],[\"判断两个类名是否相同\",{\"1\":{\"196\":1,\"1177\":1}}],[\"判决老板即日起七天内结算工资\",{\"1\":{\"259\":1,\"447\":1}}],[\"诉讼成功\",{\"1\":{\"259\":1,\"447\":1}}],[\"诉讼完成\",{\"1\":{\"259\":1,\"447\":1}}],[\"结尾的文件\",{\"1\":{\"1952\":1}}],[\"结尾\",{\"1\":{\"1530\":1,\"1952\":2}}],[\"结束状态\",{\"1\":{\"1230\":1}}],[\"结合工厂模式\",{\"1\":{\"808\":1}}],[\"结合使用场景\",{\"1\":{\"796\":1}}],[\"结合两位大佬罗升阳和袁辉辉文章和博客\",{\"1\":{\"573\":1}}],[\"结构体\",{\"1\":{\"1709\":1,\"1772\":1}}],[\"结构与模板方法\",{\"1\":{\"877\":1}}],[\"结构发生变化是指添加或者删除至少一个元素的所有操作\",{\"1\":{\"335\":1}}],[\"结构发生变化的次数\",{\"1\":{\"335\":1}}],[\"结构简单\",{\"1\":{\"311\":1}}],[\"结构型\",{\"0\":{\"439\":1,\"445\":1,\"451\":1,\"457\":1,\"463\":1,\"469\":1,\"475\":1}}],[\"结构型设计模式\",{\"0\":{\"394\":1},\"1\":{\"257\":2,\"390\":1}}],[\"结构型模式\",{\"1\":{\"256\":1}}],[\"结果false\",{\"1\":{\"1203\":1}}],[\"结果\",{\"1\":{\"259\":1,\"447\":1,\"586\":1,\"589\":1}}],[\"铁证如山\",{\"1\":{\"259\":1,\"447\":1}}],[\"特性\",{\"1\":{\"1707\":1}}],[\"特定语法不够清晰\",{\"1\":{\"1512\":1}}],[\"特别感谢\",{\"0\":{\"1647\":1},\"1\":{\"1589\":1,\"1592\":1,\"1595\":1}}],[\"特别注意\",{\"1\":{\"1540\":1}}],[\"特别提供addcomponent\",{\"1\":{\"1491\":1}}],[\"特别要求\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"特别建议\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"特别支持帮助类\",{\"1\":{\"1416\":1}}],[\"特别支持\",{\"1\":{\"1015\":1}}],[\"特殊全局变量\",{\"1\":{\"1540\":1}}],[\"特殊字体要有版权\",{\"1\":{\"1446\":1}}],[\"特殊情况下\",{\"1\":{\"1443\":1}}],[\"特殊要求\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"特殊点\",{\"1\":{\"802\":1}}],[\"特殊null\",{\"1\":{\"271\":1,\"1087\":1}}],[\"特此申请仲裁\",{\"1\":{\"259\":1,\"447\":1}}],[\"特点\",{\"0\":{\"11\":1,\"730\":1},\"1\":{\"787\":1}}],[\"小节2\",{\"1\":{\"1780\":1}}],[\"小于1m\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"小于50k\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"小于或等于taskcount\",{\"1\":{\"916\":1}}],[\"小写不可以访问\",{\"1\":{\"1075\":1}}],[\"小遗憾\",{\"0\":{\"1043\":1}}],[\"小程序规定要https\",{\"1\":{\"638\":1}}],[\"小程序接口的域名配置\",{\"1\":{\"638\":1}}],[\"小方\",{\"1\":{\"543\":1}}],[\"小芸\",{\"1\":{\"543\":1}}],[\"小孙\",{\"1\":{\"531\":1}}],[\"小李\",{\"1\":{\"531\":1}}],[\"小张\",{\"1\":{\"531\":1}}],[\"小明\",{\"1\":{\"519\":1,\"531\":1}}],[\"小名\",{\"1\":{\"519\":1}}],[\"小米\",{\"1\":{\"519\":1,\"1338\":2,\"1377\":1,\"1435\":2}}],[\"小杯咖啡\",{\"1\":{\"459\":2}}],[\"小杯的\",{\"1\":{\"459\":1}}],[\"小轿车\",{\"1\":{\"435\":2}}],[\"小民\",{\"1\":{\"543\":1}}],[\"小民提交证据\",{\"1\":{\"259\":1,\"447\":1}}],[\"小民申请仲裁\",{\"1\":{\"259\":1,\"447\":1}}],[\"小组\",{\"1\":{\"14\":1,\"733\":1}}],[\"辩护\",{\"1\":{\"259\":1,\"447\":1}}],[\"举证\",{\"1\":{\"259\":1,\"447\":1}}],[\"备注\",{\"0\":{\"1963\":1}}],[\"备忘录式写书方式\",{\"1\":{\"757\":1}}],[\"备忘录模式\",{\"0\":{\"493\":1},\"1\":{\"256\":1,\"257\":1,\"395\":1,\"494\":1,\"495\":1}}],[\"备用地址\",{\"1\":{\"79\":2}}],[\"迭代\",{\"1\":{\"543\":1}}],[\"迭代器\",{\"1\":{\"356\":1}}],[\"迭代器模式\",{\"0\":{\"327\":1,\"541\":1},\"1\":{\"257\":1,\"319\":1,\"395\":1,\"542\":1,\"543\":2}}],[\"迭代模式\",{\"1\":{\"256\":1}}],[\"迭代规划解决问题方案\",{\"1\":{\"230\":1}}],[\"模版函数\",{\"1\":{\"1805\":1}}],[\"模版代码\",{\"1\":{\"1739\":1}}],[\"模拟器名字\",{\"1\":{\"1341\":1}}],[\"模块的版本\",{\"1\":{\"1974\":1}}],[\"模块描述正确的是\",{\"1\":{\"1713\":1}}],[\"模块发起网络请求后\",{\"1\":{\"1711\":1}}],[\"模块发起网络请求时\",{\"1\":{\"1707\":1}}],[\"模块中\",{\"1\":{\"1711\":1}}],[\"模块类型\",{\"1\":{\"1709\":1}}],[\"模块名\",{\"1\":{\"1709\":1}}],[\"模块提供了全双工通信协议\",{\"1\":{\"1708\":1}}],[\"模块\",{\"1\":{\"1540\":1}}],[\"模块内可见\",{\"1\":{\"1521\":1}}],[\"模块间调用解耦不易\",{\"1\":{\"1494\":1}}],[\"模块间依赖通过抽象发生\",{\"1\":{\"753\":1}}],[\"模块划分经验之谈\",{\"1\":{\"1483\":1}}],[\"模块负责人制度\",{\"1\":{\"1483\":1}}],[\"模块化\",{\"1\":{\"1483\":1}}],[\"模块化与组件化区分\",{\"0\":{\"1429\":1}}],[\"模块化目的实现一个程序中各组成部分的松耦合\",{\"1\":{\"805\":1}}],[\"模块化设计的类型\",{\"1\":{\"805\":1}}],[\"模块化应用程序之于普通面向对象程序\",{\"1\":{\"805\":1}}],[\"模块化架构中那些发现注入和依赖注入的模式\",{\"1\":{\"805\":1}}],[\"模块化架构将规范与集体实现分离\",{\"1\":{\"805\":1}}],[\"模块化架构\",{\"0\":{\"805\":1}}],[\"模块或者插件\",{\"1\":{\"805\":1}}],[\"模式名称用一两个词来描述模式问题\",{\"1\":{\"744\":1}}],[\"模式名称\",{\"0\":{\"744\":1}}],[\"模式\",{\"1\":{\"314\":1}}],[\"模板工程\",{\"1\":{\"1707\":1}}],[\"模板要抽出变与不变的地方\",{\"1\":{\"1601\":1}}],[\"模板如下\",{\"1\":{\"1601\":1}}],[\"模板代码都类似\",{\"1\":{\"1601\":1}}],[\"模板类\",{\"1\":{\"1598\":1}}],[\"模板式编写cmake\",{\"1\":{\"1534\":1}}],[\"模板\",{\"1\":{\"305\":1,\"1399\":1,\"1682\":1}}],[\"模板模式\",{\"0\":{\"499\":1},\"1\":{\"257\":1,\"395\":1,\"500\":1}}],[\"模板方法\",{\"1\":{\"256\":1,\"501\":1}}],[\"模型\",{\"1\":{\"12\":1,\"731\":1}}],[\"适用多个条件\",{\"1\":{\"1518\":1}}],[\"适用两个条件\",{\"1\":{\"1518\":1}}],[\"适用场景\",{\"0\":{\"343\":1}}],[\"适用性广\",{\"1\":{\"312\":1}}],[\"适应不同的开发需要\",{\"1\":{\"313\":1}}],[\"适配器则是复用原有接口\",{\"1\":{\"264\":1}}],[\"适配器和外观是对现存系统封装\",{\"1\":{\"264\":1}}],[\"适配器模式\",{\"0\":{\"264\":1,\"328\":1,\"475\":1},\"1\":{\"256\":1,\"257\":1,\"319\":1,\"394\":1,\"476\":1}}],[\"适合系统没有sudo或未加入sudoer\",{\"1\":{\"16\":1}}],[\"共享元素转场\",{\"1\":{\"1702\":1}}],[\"共享\",{\"1\":{\"878\":1}}],[\"共享式同步状态获取与释放\",{\"0\":{\"880\":1}}],[\"共享式同步状态获取与释放以及超时获取同步状态等同步器的核心数据\",{\"1\":{\"877\":1}}],[\"共享式获取与释放\",{\"1\":{\"876\":1}}],[\"共享池\",{\"1\":{\"441\":1}}],[\"共11种\",{\"1\":{\"256\":1}}],[\"共7种\",{\"1\":{\"256\":1}}],[\"共5种\",{\"1\":{\"256\":1}}],[\"建站\",{\"0\":{\"1960\":1}}],[\"建站hexo\",{\"1\":{\"1959\":1}}],[\"建立死亡通知\",{\"1\":{\"1762\":1}}],[\"建立binder死亡回调\",{\"1\":{\"1762\":1}}],[\"建立图形模型\",{\"1\":{\"1540\":1}}],[\"建立ui和开发人员规范认知的一致性\",{\"1\":{\"1435\":1}}],[\"建立一个独立函数\",{\"1\":{\"1274\":1}}],[\"建立单一函数\",{\"1\":{\"1274\":1}}],[\"建立两个不同函数\",{\"1\":{\"1274\":1}}],[\"建立继承体系\",{\"1\":{\"1265\":1}}],[\"建立那个继承体系\",{\"1\":{\"1265\":1}}],[\"建立通用术语库\",{\"1\":{\"787\":1}}],[\"建造重构词汇表\",{\"1\":{\"1253\":1,\"1286\":1}}],[\"建造者\",{\"1\":{\"422\":2,\"1521\":1}}],[\"建造者模式的api调用\",{\"1\":{\"799\":1}}],[\"建造者模式区别\",{\"0\":{\"260\":1}}],[\"建造者模式\",{\"0\":{\"420\":1},\"1\":{\"256\":1,\"257\":1,\"260\":1,\"393\":1,\"421\":1,\"1313\":1}}],[\"建议artifact和moudle名字是一样的\",{\"1\":{\"1905\":1}}],[\"建议改用rxbus\",{\"1\":{\"1647\":1}}],[\"建议这种写法\",{\"1\":{\"1604\":1}}],[\"建议这种方式\",{\"1\":{\"70\":1}}],[\"建议下载\",{\"1\":{\"1555\":1}}],[\"建议jni调用用c封装好的函数\",{\"1\":{\"1527\":1}}],[\"建议不要\",{\"1\":{\"1494\":1}}],[\"建议用基本数据类型和jstring\",{\"1\":{\"1530\":1}}],[\"建议用static修饰\",{\"1\":{\"1530\":1}}],[\"建议用专门库来实现这个功能\",{\"1\":{\"1494\":1}}],[\"建议用作框架设计\",{\"1\":{\"805\":1}}],[\"建议读此文读者反复读这个位置\",{\"1\":{\"1491\":1}}],[\"建议也要支持扩展方法addcomponent\",{\"1\":{\"1473\":1}}],[\"建议在设计过程中\",{\"1\":{\"1338\":1}}],[\"建议第一种\",{\"1\":{\"1317\":1}}],[\"建议try\",{\"1\":{\"1127\":1}}],[\"建议\",{\"1\":{\"799\":1}}],[\"建议回收自定义的threadlocal变量\",{\"1\":{\"385\":1}}],[\"建议使用ps或其他软件处理后另存为png格式\",{\"1\":{\"76\":1}}],[\"设备的文件操作结构\",{\"1\":{\"1772\":1}}],[\"设备名\",{\"1\":{\"1772\":1}}],[\"设备选择\",{\"1\":{\"1702\":1}}],[\"设备不支持流转任务管理服务时\",{\"1\":{\"1702\":1}}],[\"设备\",{\"1\":{\"1702\":1}}],[\"设备类型信息\",{\"1\":{\"1709\":1}}],[\"设备类型\",{\"1\":{\"1377\":1}}],[\"设备信息\",{\"1\":{\"1377\":1}}],[\"设备参数\",{\"1\":{\"1298\":1}}],[\"设定当前进程最大的最大并发binder线程个数为16\",{\"1\":{\"1804\":1}}],[\"设定目标和定义关键结果\",{\"1\":{\"592\":1}}],[\"设定最大缓存空间\",{\"1\":{\"365\":1}}],[\"设\",{\"1\":{\"352\":1}}],[\"设计原则\",{\"0\":{\"1986\":1}}],[\"设计系统\",{\"1\":{\"1702\":1}}],[\"设计工具是一款\",{\"1\":{\"1702\":1}}],[\"设计rxbus重点\",{\"1\":{\"1546\":1}}],[\"设计spi时候\",{\"1\":{\"808\":1}}],[\"设计api时要区分其目标用户群\",{\"0\":{\"808\":1}}],[\"设计api公开的内容最少\",{\"1\":{\"799\":1}}],[\"设计的api会存在被他人误用可能\",{\"1\":{\"799\":1}}],[\"设计评审会达成一致性\",{\"1\":{\"796\":1}}],[\"设计评审\",{\"1\":{\"796\":1}}],[\"设计易于被对方程序员理解的api\",{\"1\":{\"793\":1}}],[\"设计架构\",{\"1\":{\"757\":1}}],[\"设计了设计模式组成成分\",{\"1\":{\"746\":1}}],[\"设计\",{\"1\":{\"543\":1,\"796\":1}}],[\"设计前\",{\"1\":{\"271\":1,\"1088\":1}}],[\"设计模式中有建造者模式\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"设计模式为重构提供目标\",{\"1\":{\"1253\":2}}],[\"设计模式模版方法\",{\"1\":{\"876\":1}}],[\"设计模式之禅\",{\"1\":{\"754\":1}}],[\"设计模式六大原则\",{\"0\":{\"750\":1}}],[\"设计模式背景\",{\"0\":{\"742\":1}}],[\"设计模式4个要素\",{\"0\":{\"741\":1}}],[\"设计模式\",{\"0\":{\"399\":1,\"401\":1,\"409\":1,\"412\":1,\"420\":1,\"426\":1,\"432\":1,\"439\":1,\"445\":1,\"451\":1,\"457\":1,\"463\":1,\"469\":1,\"475\":1,\"481\":1,\"487\":1,\"493\":1,\"499\":1,\"505\":1,\"511\":1,\"517\":1,\"523\":1,\"529\":1,\"535\":1,\"541\":1},\"2\":{\"397\":1,\"407\":1,\"410\":1,\"418\":1,\"424\":1,\"430\":1,\"437\":1,\"443\":1,\"449\":1,\"455\":1,\"461\":1,\"467\":1,\"473\":1,\"479\":1,\"485\":1,\"491\":1,\"497\":1,\"503\":1,\"509\":1,\"515\":1,\"521\":1,\"527\":1,\"533\":1,\"539\":1,\"545\":1,\"736\":1,\"739\":1,\"748\":1,\"755\":1}}],[\"设计模式在设计者是一种流行的思考设计问题的方法\",{\"1\":{\"389\":1}}],[\"设计模式简单定义\",{\"0\":{\"391\":1},\"1\":{\"257\":1}}],[\"设计模式按照类型划分\",{\"0\":{\"390\":1},\"1\":{\"257\":1}}],[\"设计模式定义\",{\"0\":{\"257\":1,\"389\":1}}],[\"设计模式有哪些\",{\"0\":{\"256\":1}}],[\"设计模式的基本概念与区别\",{\"0\":{\"255\":1}}],[\"设置全局信息\",{\"0\":{\"1942\":1}}],[\"设置对应的参数即可\",{\"1\":{\"1905\":1}}],[\"设置主题\",{\"1\":{\"1867\":1}}],[\"设置进程名\",{\"1\":{\"1860\":1}}],[\"设置消息的使用状态\",{\"1\":{\"1846\":1}}],[\"设置消息是否为异步处理方式\",{\"1\":{\"1840\":1}}],[\"设置msg\",{\"1\":{\"1841\":1}}],[\"设置前台调度策略\",{\"1\":{\"1778\":1}}],[\"设置调用者uid\",{\"1\":{\"1717\":1}}],[\"设置调用者pid\",{\"1\":{\"1717\":1}}],[\"设置是否允许执行\",{\"1\":{\"1712\":1}}],[\"设置属性动画的播放次数\",{\"1\":{\"1702\":1}}],[\"设置断点执行命令\",{\"1\":{\"1607\":1}}],[\"设置变量\",{\"1\":{\"1534\":2}}],[\"设置边界\",{\"1\":{\"1500\":1}}],[\"设置file\",{\"1\":{\"1491\":1}}],[\"设置action为拍照\",{\"1\":{\"1417\":1}}],[\"设置\",{\"1\":{\"1416\":1,\"1435\":1}}],[\"设置最大最小宽高布局\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"设置具体尺寸\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"设置edittext只能输入小数点后两位\",{\"1\":{\"1349\":1}}],[\"设置权重\",{\"1\":{\"1346\":1}}],[\"设置宽高比\",{\"1\":{\"1346\":1,\"1402\":1,\"1685\":1}}],[\"设置http公共参数\",{\"1\":{\"1332\":1}}],[\"设置header\",{\"1\":{\"1332\":1}}],[\"设置刷新句柄\",{\"1\":{\"1332\":1}}],[\"设置param\",{\"1\":{\"1332\":1}}],[\"设置公共参数\",{\"1\":{\"1332\":2}}],[\"设置支持的so库架构\",{\"1\":{\"1317\":1}}],[\"设置超级span\",{\"1\":{\"1313\":1}}],[\"设置更新属性\",{\"1\":{\"1305\":1}}],[\"设置监听点击事件\",{\"1\":{\"1305\":1}}],[\"设置url\",{\"1\":{\"1305\":1}}],[\"设置字体\",{\"1\":{\"1305\":1}}],[\"设置相对字体大小\",{\"1\":{\"1305\":1}}],[\"设置绝对字体大小\",{\"1\":{\"1305\":1}}],[\"设置上标\",{\"1\":{\"1305\":1}}],[\"设置下标\",{\"1\":{\"1305\":1}}],[\"设置下划线\",{\"1\":{\"1305\":1}}],[\"设置图片\",{\"1\":{\"1305\":2,\"1310\":1}}],[\"设置模糊\",{\"1\":{\"1305\":1}}],[\"设置x倍数\",{\"1\":{\"1305\":1}}],[\"设置删除线\",{\"1\":{\"1305\":1}}],[\"设置正常\",{\"1\":{\"1305\":1}}],[\"设置斜体\",{\"1\":{\"1305\":1}}],[\"设置粗体斜体\",{\"1\":{\"1305\":1}}],[\"设置粗体\",{\"1\":{\"1305\":1}}],[\"设置文字style\",{\"1\":{\"1305\":1}}],[\"设置文字颜色\",{\"1\":{\"1305\":1}}],[\"设置文字背景色\",{\"1\":{\"1305\":1}}],[\"设置默认\",{\"1\":{\"1295\":1}}],[\"设置标准字体\",{\"1\":{\"1295\":1}}],[\"设置成功\",{\"1\":{\"1247\":1}}],[\"设置获得锁线程id记录到对象头中\",{\"1\":{\"1247\":1}}],[\"设置开始初始化标志\",{\"1\":{\"1003\":1}}],[\"设置key对应的value\",{\"1\":{\"885\":1}}],[\"设置同步状态\",{\"1\":{\"879\":1}}],[\"设置的原子性\",{\"1\":{\"876\":1}}],[\"设置当前同步状态\",{\"1\":{\"876\":1}}],[\"设置instance为memory\",{\"1\":{\"864\":1}}],[\"设置密码\",{\"0\":{\"695\":1}}],[\"设置nginx开机自启\",{\"0\":{\"679\":1}}],[\"设置预检请求保持时间\",{\"1\":{\"650\":1}}],[\"设置允许的header属性\",{\"1\":{\"650\":1}}],[\"设置允许的方法\",{\"1\":{\"650\":1}}],[\"设置允许跨域请求的域名\",{\"1\":{\"650\":1}}],[\"设置允许跨域的路径\",{\"1\":{\"650\":1}}],[\"设置初始值\",{\"1\":{\"381\":1,\"1101\":1}}],[\"设置为前台优先级\",{\"1\":{\"1730\":1}}],[\"设置为false\",{\"1\":{\"1592\":1}}],[\"设置为\",{\"1\":{\"365\":1,\"1712\":1}}],[\"设置虚引用唯一目的能在这个对象被回收时收到一个系统通知\",{\"1\":{\"154\":1}}],[\"设置角色按机构进行数据范围权限划分\",{\"1\":{\"14\":1,\"733\":1}}],[\"混合型\",{\"1\":{\"248\":1}}],[\"混淆文件proguard\",{\"1\":{\"1361\":1}}],[\"混淆\",{\"0\":{\"37\":1}}],[\"四大组件\",{\"0\":{\"1815\":1,\"1817\":1}}],[\"四步流程\",{\"1\":{\"1540\":1}}],[\"四周留出4个像素用于填充\",{\"1\":{\"1338\":1}}],[\"四种引用\",{\"0\":{\"1126\":1}}],[\"四种线程池\",{\"0\":{\"247\":1}}],[\"四处运行\",{\"1\":{\"1075\":1}}],[\"四\",{\"0\":{\"314\":1,\"385\":1,\"1639\":1},\"1\":{\"1577\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1,\"1805\":1}}],[\"四类元素\",{\"1\":{\"12\":1,\"731\":1}}],[\"丢掉\",{\"1\":{\"246\":1,\"914\":1}}],[\"丢队列最近一个任务\",{\"1\":{\"246\":1,\"914\":1}}],[\"饱和策略\",{\"1\":{\"246\":1,\"914\":1}}],[\"保障了\",{\"1\":{\"1075\":1}}],[\"保障上线进度能提前\",{\"1\":{\"595\":1}}],[\"保护api用户已写代码不要改变\",{\"1\":{\"793\":1}}],[\"保护投资\",{\"1\":{\"793\":1}}],[\"保持对象完整\",{\"1\":{\"1274\":1}}],[\"保持代码功能不变\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"保持相对稳定和付出\",{\"1\":{\"586\":1}}],[\"保持sessions\",{\"1\":{\"314\":1}}],[\"保持存活时间\",{\"1\":{\"246\":1,\"914\":1}}],[\"保证开发效率\",{\"1\":{\"1512\":1}}],[\"保证核心基础库稳定\",{\"1\":{\"1512\":1}}],[\"保证同一时刻只有一个线程使用\",{\"1\":{\"1238\":1}}],[\"保证现场对象在并发环境安全\",{\"1\":{\"1235\":1}}],[\"保证它不可变\",{\"1\":{\"1232\":1}}],[\"保证合理的使用公共资源\",{\"1\":{\"907\":1}}],[\"保证结果可见\",{\"1\":{\"859\":1}}],[\"保证进度提前\",{\"1\":{\"595\":1}}],[\"保证进程同步\",{\"1\":{\"268\":1}}],[\"保证链表尾部是最近访问的节点\",{\"1\":{\"363\":1}}],[\"保证某个处理单元都得到同样的数据\",{\"1\":{\"314\":1}}],[\"保证有序\",{\"1\":{\"281\":1}}],[\"保存native层的looper到tls\",{\"1\":{\"1829\":1}}],[\"保存到svclist列表\",{\"1\":{\"1785\":1}}],[\"保存元素的数组\",{\"1\":{\"334\":1}}],[\"保存数据\",{\"1\":{\"311\":1}}],[\"保存对象内部状态\",{\"1\":{\"257\":1,\"395\":1,\"494\":1}}],[\"保存后替换\",{\"1\":{\"25\":1}}],[\"空类型保护操作\",{\"1\":{\"1512\":1}}],[\"空指针校验\",{\"1\":{\"1512\":2}}],[\"空值校验\",{\"1\":{\"1277\":1,\"1518\":1}}],[\"空值检查消除\",{\"1\":{\"1210\":2}}],[\"空闲时\",{\"1\":{\"1846\":1}}],[\"空闲\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"空闲空间未被回收\",{\"1\":{\"1182\":1}}],[\"空闲列表\",{\"1\":{\"1116\":1}}],[\"空闲线程活动保持时间\",{\"1\":{\"246\":1,\"914\":1}}],[\"空方法\",{\"1\":{\"1022\":1,\"1598\":1,\"1601\":1}}],[\"空间大小标注\",{\"1\":{\"1445\":1}}],[\"空间\",{\"1\":{\"1248\":1}}],[\"空间分配担保\",{\"1\":{\"1146\":1}}],[\"空间整合\",{\"1\":{\"1145\":1}}],[\"空间效率低\",{\"1\":{\"1144\":1}}],[\"空间碎片太多可能导致程序后续分配大对象时\",{\"1\":{\"204\":1}}],[\"空间问题\",{\"1\":{\"204\":1,\"1130\":1}}],[\"红黑树与hashmap\",{\"0\":{\"240\":1}}],[\"手动回收\",{\"1\":{\"1530\":1}}],[\"手动编写jvm虚拟机\",{\"0\":{\"1990\":1},\"1\":{\"237\":1},\"2\":{\"981\":1,\"988\":1,\"999\":1,\"1005\":1,\"1012\":1,\"1019\":1,\"1026\":1,\"1032\":1,\"1039\":1,\"1046\":1,\"1052\":1,\"1058\":1,\"1066\":1,\"1072\":1,\"1083\":1,\"1090\":1,\"1098\":1,\"1105\":1,\"1112\":1}}],[\"手敲一遍\",{\"1\":{\"1346\":1}}],[\"手工写约束\",{\"0\":{\"1346\":1}}],[\"手法\",{\"1\":{\"1265\":3}}],[\"手机视频应用退出\",{\"1\":{\"1702\":1}}],[\"手机系统版本号\",{\"1\":{\"1377\":1}}],[\"手机唯一标识\",{\"1\":{\"1377\":1}}],[\"手机产品名\",{\"1\":{\"1298\":1}}],[\"手机\",{\"1\":{\"106\":1}}],[\"手机号\",{\"1\":{\"12\":1,\"731\":1}}],[\"类库\",{\"1\":{\"1966\":1}}],[\"类库复用即可\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"类比于java层的looper\",{\"1\":{\"1829\":1}}],[\"类全路径\",{\"1\":{\"1601\":1,\"1604\":1}}],[\"类内部可见\",{\"1\":{\"1521\":1}}],[\"类扩展\",{\"1\":{\"1521\":1}}],[\"类和属性\",{\"1\":{\"1521\":1}}],[\"类继承\",{\"1\":{\"1518\":1}}],[\"类与对象\",{\"1\":{\"1518\":1}}],[\"类与类之间关系的表示方式\",{\"1\":{\"738\":1}}],[\"类文件\",{\"1\":{\"1601\":1,\"1604\":1}}],[\"类文件膨胀\",{\"1\":{\"1386\":1,\"1669\":1}}],[\"类文件结构\",{\"0\":{\"236\":1,\"1162\":1}}],[\"类中某个字段应该在对象创建时被设值\",{\"1\":{\"1274\":1}}],[\"类中某些特性只被某些\",{\"1\":{\"1262\":1}}],[\"类java指令重新排序\",{\"1\":{\"1218\":1}}],[\"类或接口的解析\",{\"1\":{\"1173\":1}}],[\"类元数据信息\",{\"1\":{\"1116\":1}}],[\"类符号引用\",{\"1\":{\"1110\":1}}],[\"类名\",{\"1\":{\"1109\":1}}],[\"类常量池索引\",{\"1\":{\"1076\":1}}],[\"类访问标志\",{\"1\":{\"1076\":1,\"1109\":1}}],[\"类路径查找\",{\"0\":{\"1064\":1},\"1\":{\"1064\":1}}],[\"类初始化触发情况\",{\"0\":{\"1002\":1}}],[\"类初始化\",{\"0\":{\"1001\":1}}],[\"类方法的解析\",{\"1\":{\"1173\":1}}],[\"类方法\",{\"1\":{\"991\":1}}],[\"类已经加载\",{\"1\":{\"978\":1,\"1009\":1,\"1030\":1}}],[\"类可重复利用\",{\"1\":{\"954\":1}}],[\"类间依赖关系应建立在最小接口上\",{\"1\":{\"753\":1}}],[\"类间彼此知道尽量小\",{\"1\":{\"750\":1}}],[\"类的其中一个构造方法\",{\"1\":{\"1527\":1}}],[\"类的写法\",{\"1\":{\"1518\":1}}],[\"类的全限定名\",{\"1\":{\"1110\":1}}],[\"类的超类还没有初始化\",{\"1\":{\"1002\":1}}],[\"类的职责单一\",{\"1\":{\"750\":1}}],[\"类的方法的表示方式\",{\"1\":{\"738\":1}}],[\"类的属性表示方式\",{\"1\":{\"738\":1}}],[\"类的表示方式\",{\"1\":{\"738\":1}}],[\"类使用包含类名\",{\"1\":{\"738\":1}}],[\"类转换器\",{\"1\":{\"559\":1}}],[\"类分析和写入\",{\"1\":{\"559\":1}}],[\"类似android\",{\"1\":{\"1555\":1}}],[\"类似压栈出栈\",{\"1\":{\"1530\":1}}],[\"类似java增强for循环\",{\"1\":{\"1518\":1}}],[\"类似\",{\"1\":{\"323\":1,\"325\":1,\"337\":1}}],[\"类\",{\"1\":{\"314\":1,\"340\":1,\"381\":1,\"799\":1,\"1063\":3,\"1064\":1,\"1110\":2,\"1256\":1,\"1286\":1,\"1361\":1,\"1702\":5}}],[\"类型选择什么类型\",{\"1\":{\"1708\":1,\"1712\":1}}],[\"类型的\",{\"1\":{\"1702\":2}}],[\"类型的数组\",{\"1\":{\"348\":1}}],[\"类型对比\",{\"1\":{\"1530\":1}}],[\"类型监测\",{\"1\":{\"1521\":1}}],[\"类型擦除\",{\"1\":{\"1518\":1}}],[\"类型指针\",{\"1\":{\"1117\":1}}],[\"类型\",{\"1\":{\"298\":1,\"328\":1,\"738\":1,\"1335\":1,\"1713\":1}}],[\"类型结构一致\",{\"1\":{\"263\":1}}],[\"类类型\",{\"1\":{\"271\":1,\"1087\":1}}],[\"类实例\",{\"1\":{\"271\":1,\"1086\":1}}],[\"类数据\",{\"1\":{\"271\":1,\"1086\":1}}],[\"类功能过多\",{\"1\":{\"265\":1}}],[\"类加载解析过程中\",{\"1\":{\"1187\":1}}],[\"类加载的时机\",{\"1\":{\"1169\":1}}],[\"类加载信息\",{\"1\":{\"1152\":1}}],[\"类加载规则\",{\"0\":{\"1063\":1}}],[\"类加载过程\",{\"0\":{\"979\":1},\"1\":{\"979\":1}}],[\"类加载器的层次关系\",{\"1\":{\"1175\":1}}],[\"类加载器支持数组\",{\"1\":{\"1009\":1}}],[\"类加载器\",{\"0\":{\"976\":1},\"1\":{\"1044\":1,\"1109\":1}}],[\"类加载器之间父子关系是以组合关系来复用父加载器代码\",{\"1\":{\"194\":1}}],[\"类加载时机\",{\"0\":{\"233\":1,\"1169\":1},\"1\":{\"233\":1}}],[\"类加载生命周期\",{\"0\":{\"172\":1}}],[\"兜兜转转\",{\"1\":{\"230\":1}}],[\"再经过层层调用后fork出新的应用进程\",{\"1\":{\"1869\":1}}],[\"再调用对象的run\",{\"1\":{\"1867\":1}}],[\"再处理native的message\",{\"1\":{\"1828\":1}}],[\"再处理native\",{\"1\":{\"1824\":1}}],[\"再处理另一件事\",{\"1\":{\"1253\":1,\"1271\":1,\"1286\":1}}],[\"再利用mmap\",{\"1\":{\"1804\":1}}],[\"再次安装\",{\"1\":{\"1702\":1}}],[\"再次动态代理\",{\"1\":{\"1592\":2}}],[\"再写方法\",{\"1\":{\"1601\":1}}],[\"再写变量\",{\"1\":{\"1601\":1}}],[\"再动态代理\",{\"1\":{\"1592\":1}}],[\"再ctest\",{\"1\":{\"1534\":1}}],[\"再到原理分析\",{\"1\":{\"1491\":1}}],[\"再后续优化\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"再跟g比较\",{\"1\":{\"1203\":1}}],[\"再判断内容\",{\"1\":{\"1203\":1}}],[\"再完整实现\",{\"1\":{\"1043\":1}}],[\"再获取读锁\",{\"1\":{\"887\":1}}],[\"再导出\",{\"1\":{\"760\":1}}],[\"再按高优先级排序\",{\"1\":{\"287\":1}}],[\"再按照高位排序\",{\"1\":{\"287\":1}}],[\"再把临时数组的值复制回原数组\",{\"1\":{\"284\":1}}],[\"再实现功能\",{\"1\":{\"271\":1,\"1088\":1}}],[\"再找解决方案\",{\"1\":{\"230\":1}}],[\"再也不用为分库分表\",{\"1\":{\"12\":1,\"731\":1}}],[\"我的task命令的打印日志\",{\"1\":{\"1613\":1}}],[\"我终于hook了retrofit\",{\"1\":{\"1589\":1}}],[\"我就把观看视频写得实战demo\",{\"1\":{\"1543\":1}}],[\"我就是一直改别的\",{\"1\":{\"76\":1}}],[\"我要快速去学算法\",{\"1\":{\"1537\":1}}],[\"我要自己造轮子了\",{\"1\":{\"1483\":1}}],[\"我写过makefile\",{\"1\":{\"1534\":1}}],[\"我只是力求更简单理解\",{\"1\":{\"1527\":1}}],[\"我承认是站在巨人肩膀上coding的\",{\"1\":{\"1527\":1}}],[\"我这边是把aspectj插件专门抽出来\",{\"1\":{\"1632\":1}}],[\"我这边项目循序渐进参考借鉴孤云\",{\"1\":{\"1527\":1}}],[\"我这边用建造者方式重新写一个\",{\"1\":{\"1302\":1}}],[\"我来洒洒水\",{\"1\":{\"1497\":1}}],[\"我在苍王和guiying肩膀上实操组件化\",{\"1\":{\"1453\":1}}],[\"我将我认识到技术综合运用写出一篇\",{\"1\":{\"1453\":1}}],[\"我还特意加上click事件\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"我是测试党\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"我是工程项目开发\",{\"1\":{\"814\":1}}],[\"我需要什么\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"我采取思路是\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"我又花了相当长时间才对这种差异有了足够充分的认识\",{\"1\":{\"1268\":1}}],[\"我们只是操作hexo\",{\"1\":{\"1961\":1}}],[\"我们认为此时mptr\",{\"1\":{\"1847\":1}}],[\"我们可以拦截\",{\"1\":{\"1588\":1}}],[\"我们可以采用新的思路\",{\"1\":{\"1588\":1}}],[\"我们可以看清楚\",{\"1\":{\"793\":1}}],[\"我们核心诉求\",{\"1\":{\"1587\":1}}],[\"我们很难专门预留出位置\",{\"1\":{\"1587\":1}}],[\"我们用constraintlayout\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"我们开发过程中\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"我们确实需要资源或者服务分布到不同的域当中\",{\"1\":{\"649\":1}}],[\"我们在主线程中创建⼀个\",{\"1\":{\"384\":1}}],[\"我们知道\",{\"1\":{\"351\":1}}],[\"我读后受益匪浅\",{\"1\":{\"310\":1}}],[\"我过于执着外相了\",{\"1\":{\"230\":1}}],[\"唯一不同的是async是oneway方式不需要回复\",{\"1\":{\"1776\":1}}],[\"唯一编号\",{\"1\":{\"1298\":1}}],[\"唯一架构师的方式会受到规模限制\",{\"1\":{\"796\":1}}],[\"唯一id\",{\"1\":{\"12\":1,\"731\":1}}],[\"唯心角度\",{\"1\":{\"230\":1}}],[\"做模拟题\",{\"1\":{\"1701\":1}}],[\"做这样的扩展\",{\"1\":{\"1587\":1}}],[\"做click去重出现问题\",{\"1\":{\"1561\":1}}],[\"做项目初始化\",{\"1\":{\"1488\":1}}],[\"做到编写隔离\",{\"1\":{\"1473\":1}}],[\"做安全检查\",{\"1\":{\"1213\":1}}],[\"做好扩展性\",{\"1\":{\"802\":1}}],[\"做小游戏寓教于乐\",{\"1\":{\"781\":1}}],[\"做两层控制\",{\"0\":{\"721\":1}}],[\"做事经常是苦劳的\",{\"1\":{\"598\":1}}],[\"做事顺序是按照前后顺序做的\",{\"1\":{\"598\":1}}],[\"做事主动性不强\",{\"1\":{\"598\":1}}],[\"做与运算\",{\"1\":{\"351\":1}}],[\"做一切必要事情践行方案\",{\"1\":{\"230\":1}}],[\"做依赖精简\",{\"1\":{\"12\":1,\"731\":1}}],[\"践行\",{\"1\":{\"230\":1}}],[\"诊断\",{\"1\":{\"230\":1}}],[\"落地解决方法论\",{\"1\":{\"230\":1}}],[\"很小众\",{\"1\":{\"1694\":1}}],[\"很像模板\",{\"1\":{\"1610\":1}}],[\"很套路毫无新鲜感\",{\"1\":{\"1610\":1}}],[\"很多操作都需要先确定一个键值对所在的桶下标\",{\"1\":{\"351\":1}}],[\"很难通过一步一步学习\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"很难精确\",{\"1\":{\"1209\":1}}],[\"很难从根本上解决问题\",{\"1\":{\"796\":1}}],[\"很难说服别人\",{\"1\":{\"757\":1}}],[\"很难回滚\",{\"1\":{\"312\":1}}],[\"很难面对现实\",{\"1\":{\"230\":1}}],[\"很有孔乙己中茴香豆\",{\"1\":{\"227\":1}}],[\"潜意识防卫机制\",{\"1\":{\"230\":1}}],[\"术\",{\"1\":{\"230\":1}}],[\"反复参考微信android模块化架构重构实践思想\",{\"1\":{\"1486\":1}}],[\"反复操作1~2步骤\",{\"1\":{\"284\":1}}],[\"反衬易用性不足\",{\"1\":{\"1481\":1}}],[\"反之为lib项目\",{\"1\":{\"1473\":1}}],[\"反之非公平\",{\"1\":{\"881\":1}}],[\"反向指针\",{\"1\":{\"1283\":1}}],[\"反向填充目标数组\",{\"1\":{\"286\":1}}],[\"反而更慢\",{\"1\":{\"824\":1}}],[\"反射调用zygoteinit\",{\"1\":{\"1861\":1}}],[\"反射调用初始化\",{\"1\":{\"1598\":1}}],[\"反射类加载\",{\"1\":{\"1598\":1}}],[\"反射解决了调用相同模板\",{\"1\":{\"1598\":1}}],[\"反射解决兼容性\",{\"1\":{\"808\":1}}],[\"反射修改实体类中的值\",{\"1\":{\"1592\":1}}],[\"反射修改string\",{\"1\":{\"1015\":1}}],[\"反射支持\",{\"1\":{\"1015\":1}}],[\"反射设置\",{\"1\":{\"1015\":1}}],[\"反射\",{\"1\":{\"805\":1,\"1494\":1}}],[\"反射方式不建议\",{\"1\":{\"70\":1}}],[\"反序列化使用的是\",{\"1\":{\"334\":1}}],[\"反转二叉树\",{\"1\":{\"298\":1}}],[\"反转链表\",{\"1\":{\"298\":1}}],[\"反思的反思\",{\"0\":{\"230\":1},\"1\":{\"230\":1}}],[\"图形填上颜色\",{\"1\":{\"1540\":1}}],[\"图形化管理模块\",{\"1\":{\"12\":1,\"731\":1}}],[\"图像修改\",{\"1\":{\"1540\":1}}],[\"图像基本组成要素是一样的\",{\"1\":{\"1540\":1}}],[\"图标有正常和圆角两种\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"图标可以画图区域大小可以设为\",{\"1\":{\"1338\":1}}],[\"图片中内容建议在正中间\",{\"1\":{\"1443\":1}}],[\"图片类型\",{\"1\":{\"1435\":1}}],[\"图片选择器\",{\"1\":{\"1417\":2}}],[\"图片尺寸\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"图片\",{\"1\":{\"1310\":1,\"1702\":1}}],[\"图片上传失败\",{\"1\":{\"229\":1}}],[\"综上\",{\"1\":{\"228\":1,\"595\":1,\"1399\":1,\"1682\":1}}],[\"查缓存\",{\"1\":{\"1598\":1}}],[\"查看n\",{\"1\":{\"1974\":1}}],[\"查看远程项目\",{\"1\":{\"1950\":1}}],[\"查看标签信息\",{\"1\":{\"1949\":1}}],[\"查看项目状态\",{\"0\":{\"1948\":1}}],[\"查看分支\",{\"1\":{\"1947\":2}}],[\"查看公钥\",{\"1\":{\"1943\":1}}],[\"查看私钥列表\",{\"1\":{\"1922\":1}}],[\"查看内存映像工具\",{\"1\":{\"1154\":1}}],[\"查看jvm配置信息\",{\"1\":{\"1153\":1}}],[\"查看jvm运行状态\",{\"1\":{\"1152\":1}}],[\"查看虚拟机进程\",{\"1\":{\"1151\":1}}],[\"查看老年代最大连续空间>新生代对象之和\",{\"1\":{\"1146\":1}}],[\"查看线程状态\",{\"1\":{\"867\":1}}],[\"查看cpu的利用率\",{\"1\":{\"834\":1}}],[\"查看系统内存情况\",{\"1\":{\"834\":1}}],[\"查看系统平均负载\",{\"1\":{\"834\":1}}],[\"查看网络流量\",{\"1\":{\"834\":1}}],[\"查看每个cpu的性能数据\",{\"1\":{\"833\":1}}],[\"查看每个进程的情况\",{\"1\":{\"833\":1}}],[\"查看waiting状态\",{\"1\":{\"822\":1}}],[\"查看版本\",{\"0\":{\"703\":1}}],[\"查看端口状态\",{\"1\":{\"661\":1,\"722\":1}}],[\"查看mysql\",{\"0\":{\"622\":1}}],[\"查看user表\",{\"0\":{\"614\":1}}],[\"查看启动状态\",{\"1\":{\"613\":1}}],[\"查看并分析\",{\"1\":{\"228\":1}}],[\"查找当前目录下的所有源文件\",{\"1\":{\"1534\":1}}],[\"查找方法\",{\"1\":{\"993\":1}}],[\"查找需要分成两步进行\",{\"1\":{\"349\":1}}],[\"查找源码文件\",{\"1\":{\"329\":1}}],[\"查找的时间复杂度为\",{\"1\":{\"322\":1}}],[\"查询相应的服务\",{\"1\":{\"1790\":1}}],[\"查询服务\",{\"1\":{\"1785\":1,\"1790\":1}}],[\"查询同步队列中的等待线程情况\",{\"1\":{\"876\":1}}],[\"查询已注册服务\",{\"1\":{\"805\":1}}],[\"查询生效的user表\",{\"0\":{\"630\":1}}],[\"查询效率比较高\",{\"1\":{\"214\":1}}],[\"查询\",{\"1\":{\"52\":1}}],[\"考虑程序安全稳定\",{\"1\":{\"1268\":1}}],[\"考虑重构\",{\"1\":{\"1253\":1}}],[\"考虑是让程序长时间执行\",{\"1\":{\"1136\":1}}],[\"考虑其他第三方基于该模块进行二次开发可能性\",{\"1\":{\"805\":1}}],[\"考虑项目并行风险\",{\"1\":{\"595\":1}}],[\"考虑金融app苹果审核未来更加严格\",{\"1\":{\"595\":1}}],[\"考虑安全因素\",{\"1\":{\"195\":1,\"1176\":1}}],[\"考察基础概念回答一半\",{\"1\":{\"227\":1}}],[\"生态\",{\"1\":{\"1707\":1}}],[\"生效\",{\"1\":{\"1313\":1}}],[\"生成aar包含源码\",{\"1\":{\"1966\":1}}],[\"生成页面会自动同步到github\",{\"1\":{\"1961\":1}}],[\"生成私钥\",{\"0\":{\"1943\":1}}],[\"生成key\",{\"0\":{\"1928\":1}}],[\"生成ssh\",{\"0\":{\"1921\":1}}],[\"生成即可\",{\"1\":{\"1911\":1}}],[\"生成对应的reponse对象\",{\"1\":{\"1828\":1}}],[\"生成对应模板信息类\",{\"1\":{\"1552\":1}}],[\"生成对应模板信息\",{\"1\":{\"1552\":1}}],[\"生成应答数据通知client\",{\"1\":{\"1797\":1}}],[\"生成ipc应答数据\",{\"1\":{\"1796\":1}}],[\"生成br\",{\"1\":{\"1768\":1,\"1770\":1,\"1796\":2}}],[\"生成相应的binder\",{\"1\":{\"1768\":1}}],[\"生成的apk的路径\",{\"1\":{\"1613\":1}}],[\"生成随机数\",{\"1\":{\"1583\":1}}],[\"生成随机文件\",{\"1\":{\"1583\":1}}],[\"生成文件继承jframe\",{\"1\":{\"1552\":1}}],[\"生成效果如下\",{\"1\":{\"1549\":1}}],[\"生成源码安装包\",{\"1\":{\"1534\":1}}],[\"生成二进制安装包\",{\"1\":{\"1534\":1}}],[\"生成动态库\",{\"1\":{\"1534\":1}}],[\"生成静态库\",{\"1\":{\"1534\":1}}],[\"生成执行程序\",{\"1\":{\"1534\":1}}],[\"生成执行文件\",{\"1\":{\"1534\":1}}],[\"生成字节码\",{\"1\":{\"1197\":1}}],[\"生成一个计算任务\",{\"1\":{\"897\":1}}],[\"生存性\",{\"1\":{\"954\":1}}],[\"生产包和测试包用同一份代码\",{\"1\":{\"1595\":1}}],[\"生产代码与测试代码一致\",{\"1\":{\"1595\":1}}],[\"生产版本\",{\"1\":{\"1589\":1}}],[\"生产具有稳定性\",{\"1\":{\"1512\":1}}],[\"生产消费模型\",{\"1\":{\"958\":1}}],[\"生产消费者\",{\"0\":{\"948\":1}}],[\"生产\",{\"0\":{\"958\":1}}],[\"生产者\",{\"1\":{\"870\":2,\"948\":1,\"950\":2,\"958\":2}}],[\"生产者和消费者\",{\"1\":{\"832\":1}}],[\"生产环境\",{\"1\":{\"668\":1}}],[\"生产部署路由失效\",{\"0\":{\"655\":1}}],[\"生产部署\",{\"1\":{\"603\":1,\"656\":1}}],[\"生难偏涩概念汇总和完整准确答案\",{\"1\":{\"227\":1}}],[\"生命周期函数\",{\"1\":{\"1707\":1}}],[\"生命周期\",{\"1\":{\"144\":1}}],[\"抱怨没有用\",{\"1\":{\"227\":1}}],[\"廻\",{\"1\":{\"227\":1}}],[\"囬\",{\"1\":{\"227\":1}}],[\"囘\",{\"1\":{\"227\":1}}],[\"茴字有四种写法\",{\"1\":{\"227\":1}}],[\"回滚\",{\"1\":{\"1955\":1}}],[\"回复\",{\"1\":{\"1789\":1}}],[\"回到到\",{\"1\":{\"1527\":1}}],[\"回调msg\",{\"1\":{\"1842\":1}}],[\"回调方法handlemessage\",{\"1\":{\"1842\":1}}],[\"回调方法\",{\"1\":{\"1840\":1}}],[\"回调spawnpooledthread\",{\"1\":{\"1776\":1}}],[\"回调支持\",{\"1\":{\"1416\":1}}],[\"回调\",{\"1\":{\"1416\":1}}],[\"回边计数器\",{\"1\":{\"1209\":1}}],[\"回收msg\",{\"1\":{\"1847\":1}}],[\"回收\",{\"1\":{\"1530\":2,\"1850\":1}}],[\"回收建议\",{\"1\":{\"1530\":1}}],[\"回收所引用的对象\",{\"1\":{\"1530\":1}}],[\"回收内容\",{\"1\":{\"1128\":1}}],[\"回收方法区\",{\"0\":{\"1128\":1}}],[\"回收过程\",{\"0\":{\"1127\":1}}],[\"回收时先将\",{\"1\":{\"207\":1}}],[\"回答问题\",{\"1\":{\"228\":1}}],[\"回答完整\",{\"1\":{\"227\":1}}],[\"回\",{\"1\":{\"227\":1}}],[\"诚不欺我\",{\"1\":{\"227\":1}}],[\"果然\",{\"1\":{\"227\":1}}],[\"还需要人工审核吗\",{\"1\":{\"1708\":1}}],[\"还需要编写特定业务manange类\",{\"1\":{\"1647\":1}}],[\"还需要将interfaces下沉的base\",{\"1\":{\"1481\":1}}],[\"还不够亲民\",{\"1\":{\"1481\":1}}],[\"还要创建对象\",{\"1\":{\"1274\":1}}],[\"还要写出\",{\"1\":{\"227\":1}}],[\"还没有启动\",{\"1\":{\"1230\":1}}],[\"还保留泛型信息\",{\"1\":{\"1202\":1}}],[\"还可以再追加测试用户吗\",{\"1\":{\"1708\":1}}],[\"还可以再更新版本吗\",{\"1\":{\"1708\":1}}],[\"还可以让释放锁的线程向获取同一个锁的线程发生消息\",{\"1\":{\"862\":1}}],[\"还可以增加差异\",{\"1\":{\"753\":1}}],[\"还可以用作栈\",{\"1\":{\"323\":1}}],[\"还是很geek的人\",{\"1\":{\"1689\":1}}],[\"还是要将技术基本功再深入下去\",{\"1\":{\"1530\":1}}],[\"还是要在原理上深挖\",{\"1\":{\"227\":1}}],[\"还是\",{\"1\":{\"751\":1}}],[\"还是面试结果不理想\",{\"1\":{\"227\":1}}],[\"还在为请求不知道去哪了\",{\"1\":{\"12\":1,\"731\":1}}],[\"虽然谨慎却仍然自信\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"虽然没有明确约定\",{\"1\":{\"311\":1}}],[\"虽然我系统学习jvm虚拟机\",{\"1\":{\"227\":1}}],[\"虽然该这些引用仍然是存在着的\",{\"1\":{\"145\":1}}],[\"算法实现\",{\"0\":{\"1134\":1}}],[\"算法\",{\"0\":{\"290\":1},\"1\":{\"1530\":1},\"2\":{\"288\":1,\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1,\"297\":1,\"300\":1,\"301\":1,\"303\":1,\"304\":1}}],[\"算法比较\",{\"1\":{\"277\":1}}],[\"算法要刷剑指offer\",{\"1\":{\"228\":1}}],[\"算法给出解决方案是o\",{\"1\":{\"227\":1}}],[\"算法适用于对象存活率低的场景\",{\"1\":{\"206\":1}}],[\"算是热身练手\",{\"1\":{\"227\":1}}],[\"面向用例的重要性\",{\"1\":{\"796\":1}}],[\"面向对象的核心概念是继承\",{\"1\":{\"760\":1}}],[\"面向接口而非实现进行编程\",{\"0\":{\"802\":1}}],[\"面向接口编程\",{\"1\":{\"753\":1,\"802\":2}}],[\"面向接口\",{\"1\":{\"750\":1}}],[\"面向连接\",{\"1\":{\"181\":1}}],[\"面试题\",{\"1\":{\"298\":2},\"2\":{\"370\":1,\"373\":1,\"376\":1,\"386\":1,\"962\":1,\"965\":1,\"968\":1,\"971\":1,\"974\":1}}],[\"面试官反馈意见\",{\"1\":{\"230\":1}}],[\"面试中暴露问题\",{\"1\":{\"230\":1}}],[\"面试中一些问题\",{\"1\":{\"227\":1}}],[\"面试造火箭\",{\"1\":{\"227\":1}}],[\"面试2周\",{\"1\":{\"227\":1}}],[\"新进程\",{\"1\":{\"1869\":1}}],[\"新进程调用runtimeinit\",{\"1\":{\"1777\":1}}],[\"新文件写入内容\",{\"1\":{\"1552\":1}}],[\"新开发一个app\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"新技术发展从本质上讲\",{\"1\":{\"1268\":1}}],[\"新的改动不会危及现有行为\",{\"1\":{\"1253\":1}}],[\"新创建的实例对象需要赋初值\",{\"1\":{\"1009\":1}}],[\"新创建了一个线程对象\",{\"1\":{\"943\":1}}],[\"新建页面\",{\"1\":{\"1960\":2}}],[\"新建仓库\",{\"1\":{\"1959\":1}}],[\"新建readme文档\",{\"1\":{\"1944\":1}}],[\"新建remote\",{\"1\":{\"1607\":1}}],[\"新建方法\",{\"1\":{\"1604\":1}}],[\"新建构造方法target\",{\"1\":{\"1604\":1}}],[\"新建field\",{\"1\":{\"1604\":1}}],[\"新建类target\",{\"1\":{\"1604\":1}}],[\"新建注解\",{\"1\":{\"1604\":1}}],[\"新建module\",{\"1\":{\"1604\":2}}],[\"新建action\",{\"1\":{\"1555\":1}}],[\"新建插件项目\",{\"1\":{\"1555\":1}}],[\"新建文件写入\",{\"1\":{\"1552\":1}}],[\"新建\",{\"1\":{\"1530\":1,\"1552\":1}}],[\"新建状态\",{\"1\":{\"1230\":1}}],[\"新建虚拟机\",{\"1\":{\"1044\":1}}],[\"新建object\",{\"1\":{\"1030\":1}}],[\"新建实例\",{\"1\":{\"983\":1}}],[\"新建一个子类\",{\"1\":{\"1262\":1}}],[\"新建一个类做扩展\",{\"1\":{\"1259\":1}}],[\"新建一个\",{\"1\":{\"349\":1}}],[\"新启动命令行窗口进入\",{\"1\":{\"619\":1}}],[\"新容量的大小为\",{\"1\":{\"332\":1}}],[\"新上课方式\",{\"1\":{\"305\":1}}],[\"新场景\",{\"1\":{\"305\":1}}],[\"新增如下配置\",{\"1\":{\"1607\":1}}],[\"新增\",{\"1\":{\"228\":1,\"1283\":1}}],[\"新增即可\",{\"1\":{\"215\":1}}],[\"新加\",{\"1\":{\"227\":2}}],[\"新生代发生的\",{\"1\":{\"207\":1}}],[\"新生代内存按照\",{\"1\":{\"207\":1}}],[\"新生代的目标就是尽可能快速的收\",{\"1\":{\"207\":1}}],[\"新生代\",{\"1\":{\"207\":1,\"1133\":1}}],[\"新生代对象存活率低\",{\"1\":{\"207\":1}}],[\"新生代中的对象98\",{\"1\":{\"206\":1}}],[\"扩大了安全范围\",{\"1\":{\"1137\":1}}],[\"扩容之后\",{\"1\":{\"353\":1}}],[\"扩容操作同样需要把\",{\"1\":{\"352\":1}}],[\"扩容操作需要调用\",{\"1\":{\"332\":1}}],[\"扩容使用\",{\"1\":{\"352\":1}}],[\"扩容时每次都令\",{\"1\":{\"338\":1}}],[\"扩容\",{\"0\":{\"332\":1,\"338\":1,\"352\":1,\"353\":1}}],[\"扩容大小\",{\"1\":{\"215\":1}}],[\"扩容规则\",{\"1\":{\"215\":1}}],[\"扩展的声明式开发范式\",{\"1\":{\"1702\":1}}],[\"扩展的类\",{\"1\":{\"1702\":1}}],[\"扩展会比较简单\",{\"1\":{\"1632\":1}}],[\"扩展会很困难\",{\"1\":{\"311\":1}}],[\"扩展类搜索\",{\"1\":{\"1063\":1}}],[\"扩展类路径\",{\"1\":{\"1061\":1}}],[\"扩展类加载器\",{\"1\":{\"194\":1,\"1175\":1}}],[\"扩展\",{\"1\":{\"991\":1,\"1518\":1}}],[\"扩展可变部分\",{\"1\":{\"501\":1}}],[\"扩展性好\",{\"1\":{\"314\":1}}],[\"扩展性\",{\"1\":{\"313\":1}}],[\"扩展性差\",{\"1\":{\"311\":1}}],[\"扩展了token鉴权与分布式会话同步\",{\"1\":{\"12\":1,\"731\":1}}],[\"扩展支持了开发团队路由\",{\"1\":{\"12\":1,\"731\":1}}],[\"键为\",{\"1\":{\"350\":1}}],[\"键唯一\",{\"1\":{\"212\":1}}],[\"键值对数量\",{\"1\":{\"352\":1}}],[\"键值对\",{\"1\":{\"212\":1,\"349\":3,\"1598\":1}}],[\"插桩技术很大程度用到此项技术\",{\"1\":{\"558\":1}}],[\"插桩技术\",{\"1\":{\"558\":1}}],[\"插在\",{\"1\":{\"349\":1}}],[\"插入到目标进程或其子线程的todo队列中\",{\"1\":{\"1753\":1}}],[\"插入到这个数的后面\",{\"1\":{\"280\":1}}],[\"插入代码\",{\"1\":{\"1588\":1}}],[\"插入文件\",{\"1\":{\"1552\":1}}],[\"插入消息\",{\"1\":{\"1546\":1}}],[\"插入式插件在处理注解期间对语法树进行修改\",{\"1\":{\"1199\":1}}],[\"插入式编译器插件\",{\"1\":{\"1199\":1}}],[\"插入队尾\",{\"1\":{\"879\":1}}],[\"插入新键值对\",{\"1\":{\"350\":1}}],[\"插入需要添加的值\",{\"1\":{\"285\":1}}],[\"插入排序等\",{\"1\":{\"285\":1}}],[\"插入排序\",{\"0\":{\"280\":1},\"1\":{\"281\":1}}],[\"插入\",{\"1\":{\"212\":1,\"285\":1,\"349\":3}}],[\"插件的描述\",{\"1\":{\"1555\":1}}],[\"插件的一些描述信息\",{\"1\":{\"1555\":1}}],[\"插件版本\",{\"1\":{\"1555\":1}}],[\"插件显示的名字\",{\"1\":{\"1555\":1}}],[\"插件唯一的id\",{\"1\":{\"1555\":1}}],[\"插件编写流程\",{\"1\":{\"1552\":1}}],[\"插件编写原则\",{\"0\":{\"1476\":1}}],[\"插件下载地址\",{\"1\":{\"1549\":1}}],[\"插件位置\",{\"1\":{\"1476\":1}}],[\"插件批量处理\",{\"1\":{\"1317\":1}}],[\"插件化开发\",{\"0\":{\"1426\":1}}],[\"插件化\",{\"1\":{\"573\":1}}],[\"插件可以独立的加载和卸载\",{\"1\":{\"313\":1}}],[\"插件之间的通信\",{\"1\":{\"313\":1}}],[\"插件则是互相独立的\",{\"1\":{\"313\":1}}],[\"插件架构\",{\"1\":{\"313\":1}}],[\"插件\",{\"1\":{\"12\":1,\"731\":1,\"1488\":1,\"1491\":1,\"1574\":1,\"1702\":1}}],[\"插件模块\",{\"1\":{\"12\":1,\"731\":1}}],[\"索引查询速度快\",{\"1\":{\"212\":1}}],[\"被重新申领到各个业务模块\",{\"1\":{\"1486\":1}}],[\"被监视数据\",{\"1\":{\"1283\":1}}],[\"被拒绝的遗赠\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"被线程访问到\",{\"1\":{\"1212\":1}}],[\"被外部方法引用\",{\"1\":{\"1212\":1}}],[\"被多次执行的循环体\",{\"1\":{\"1208\":1}}],[\"被多次调用的方法\",{\"1\":{\"1208\":1}}],[\"被弱引用关联对象只能生存到下一次垃圾收集发生之前\",{\"1\":{\"1126\":1}}],[\"被通知后仍要检查条件\",{\"1\":{\"948\":1}}],[\"被限制在同一域名\",{\"1\":{\"649\":1}}],[\"被观察者\",{\"1\":{\"519\":1}}],[\"被传递给weakreference的构造方法\",{\"1\":{\"381\":1}}],[\"被\",{\"1\":{\"367\":1}}],[\"被拆成了多个服务\",{\"1\":{\"314\":1}}],[\"被显式调用等\",{\"1\":{\"207\":1}}],[\"被写满和system\",{\"1\":{\"207\":1}}],[\"由上一小节\",{\"1\":{\"1756\":1}}],[\"由目标binder\",{\"1\":{\"1754\":1}}],[\"由binder\",{\"1\":{\"1754\":1}}],[\"由易变难\",{\"1\":{\"1527\":1}}],[\"由模块化到组件化\",{\"1\":{\"1429\":1}}],[\"由其他线程通知该线程\",{\"1\":{\"945\":1}}],[\"由\",{\"1\":{\"367\":1}}],[\"由于aspectj\",{\"1\":{\"1632\":1}}],[\"由于初始化控件\",{\"1\":{\"1598\":1}}],[\"由于每个处理单元的数据都在内存里\",{\"1\":{\"314\":1}}],[\"由于每一层内部是耦合的\",{\"1\":{\"311\":1}}],[\"由于没有中央数据库\",{\"1\":{\"314\":1}}],[\"由于强调互相独立和低耦合\",{\"1\":{\"314\":1}}],[\"由于full\",{\"1\":{\"207\":1}}],[\"由当前微服务决定\",{\"1\":{\"12\":1,\"731\":1}}],[\"包不得超过\",{\"1\":{\"1708\":1}}],[\"包组成\",{\"1\":{\"1708\":1}}],[\"包信息\",{\"1\":{\"1702\":1}}],[\"包下所有\",{\"1\":{\"1702\":1}}],[\"包则不需要签名\",{\"1\":{\"1702\":1}}],[\"包需要签名\",{\"1\":{\"1702\":1}}],[\"包名\",{\"1\":{\"1335\":1,\"1601\":1,\"1604\":1,\"1966\":1}}],[\"包体积分析\",{\"1\":{\"1317\":1}}],[\"包括bninterface\",{\"1\":{\"1800\":1}}],[\"包括首次安装\",{\"1\":{\"1702\":1}}],[\"包括字体\",{\"1\":{\"1310\":1}}],[\"包括新生代和老年代\",{\"1\":{\"207\":1}}],[\"包装类\",{\"1\":{\"1203\":1}}],[\"包装类自动装箱会缓存值为\",{\"1\":{\"1203\":1}}],[\"包装一下\",{\"1\":{\"97\":1}}],[\"包之间避免不必要的交叉引用\",{\"1\":{\"805\":1}}],[\"包路径划分\",{\"1\":{\"559\":1}}],[\"包含了以下哪些信息\",{\"1\":{\"1709\":1}}],[\"包含图片和文本等信息\",{\"1\":{\"1708\":1}}],[\"包含以下哪几种类型\",{\"1\":{\"1702\":1}}],[\"包含以下哪几种功能\",{\"1\":{\"1702\":1}}],[\"包含父类的注解\",{\"1\":{\"1604\":1}}],[\"包含各种写法\",{\"1\":{\"1527\":1}}],[\"包含从父类继承来的实例变量\",{\"1\":{\"1109\":1}}],[\"包含所有音视频服务\",{\"1\":{\"305\":1}}],[\"包含\",{\"1\":{\"271\":1,\"738\":1,\"1086\":1}}],[\"使该项目显得更加清晰\",{\"1\":{\"1487\":1}}],[\"使它们返回超类中的某个\",{\"1\":{\"1283\":1}}],[\"使它在调用函数之前先做检查\",{\"1\":{\"1274\":1}}],[\"使重构能够成功的\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"使其wait返回\",{\"1\":{\"946\":1}}],[\"使其再\",{\"1\":{\"878\":1}}],[\"使redis服务开机自启\",{\"1\":{\"707\":1}}],[\"使⽤\",{\"1\":{\"384\":1}}],[\"使得弹窗可以自定义内容及样式\",{\"1\":{\"1711\":1}}],[\"使得弹窗可以动态设置内容及样式\",{\"1\":{\"1707\":1}}],[\"使得网页可以在webview中打开\",{\"1\":{\"1358\":1}}],[\"使得空间效率和时间效率都能得到保证\",{\"1\":{\"352\":1}}],[\"使得内存占用为原来的两倍左右\",{\"1\":{\"343\":1}}],[\"使得它比较容易部署\",{\"1\":{\"313\":1}}],[\"使得多个对象都有处理这个请求的机会\",{\"1\":{\"257\":1,\"395\":1,\"536\":1}}],[\"使效率降低\",{\"1\":{\"285\":1}}],[\"使他们都可以独立进行变化\",{\"1\":{\"257\":1,\"394\":1,\"458\":1}}],[\"使垃圾回收能尽快完成\",{\"1\":{\"207\":1}}],[\"使用模版方法\",{\"0\":{\"1806\":1}}],[\"使用服务\",{\"1\":{\"1744\":1}}],[\"使用宏\",{\"1\":{\"1727\":2}}],[\"使用首选项要导入的包是哪个\",{\"1\":{\"1712\":1}}],[\"使用下面那种弹窗可以实现\",{\"1\":{\"1708\":1}}],[\"使用端云一体化开发\",{\"1\":{\"1707\":1}}],[\"使用rxjava系列框架\",{\"1\":{\"1647\":1}}],[\"使用教程\",{\"1\":{\"1549\":1}}],[\"使用open程序\",{\"1\":{\"1540\":1}}],[\"使用opengl程序\",{\"1\":{\"1540\":1}}],[\"使用版本\",{\"1\":{\"1534\":1}}],[\"使用版本号\",{\"1\":{\"853\":1}}],[\"使用传入方法必须实现run方法\",{\"1\":{\"1527\":1}}],[\"使用时缓存\",{\"1\":{\"1527\":1}}],[\"使用for循环\",{\"1\":{\"1518\":1}}],[\"使用final关键字修饰\",{\"1\":{\"1232\":1}}],[\"使用特有语法糖\",{\"1\":{\"1512\":1}}],[\"使用效果后==>\",{\"1\":{\"1491\":1}}],[\"使用简单但功能强大的安卓组件化框架\",{\"1\":{\"1481\":1}}],[\"使用简介\",{\"1\":{\"649\":1}}],[\"使用方法\",{\"1\":{\"1374\":1}}],[\"使用方式\",{\"1\":{\"752\":1,\"753\":2,\"1905\":1}}],[\"使用方式编写方法与maven多环境单测插件\",{\"1\":{\"12\":1,\"731\":1}}],[\"使用jenkins实现持续集成\",{\"1\":{\"1323\":1}}],[\"使用java\",{\"1\":{\"1063\":1}}],[\"使用webp文件格式\",{\"1\":{\"1317\":1}}],[\"使用对象避免过多参数\",{\"1\":{\"1286\":1}}],[\"使用泛型去除重复逻辑\",{\"1\":{\"1286\":1}}],[\"使用频次\",{\"1\":{\"1259\":1}}],[\"使用频次高\",{\"1\":{\"1259\":1}}],[\"使用用户线程加轻量级进程混合实现\",{\"0\":{\"1227\":1}}],[\"使用用户线程实现\",{\"0\":{\"1226\":1}}],[\"使用内核线程实现\",{\"0\":{\"1225\":1}}],[\"使用句柄\",{\"1\":{\"1118\":1}}],[\"使用范例\",{\"1\":{\"1055\":1,\"1374\":1}}],[\"使用同一个线程为当前方法创建栈帧并压入线程栈顶\",{\"1\":{\"993\":1}}],[\"使用单线程执行模式\",{\"1\":{\"935\":1}}],[\"使用场景\",{\"1\":{\"935\":1}}],[\"使用通知模式\",{\"1\":{\"896\":1}}],[\"使用cas设置当前状态\",{\"1\":{\"876\":1}}],[\"使用curl下载nodesource\",{\"1\":{\"702\":1}}],[\"使用两个blocked线程\",{\"1\":{\"867\":1}}],[\"使用锁机制实现原子操作\",{\"1\":{\"852\":1}}],[\"使用循环cas实现原子操作\",{\"1\":{\"852\":1}}],[\"使用总线锁保证原子性\",{\"1\":{\"851\":1}}],[\"使用协程\",{\"1\":{\"821\":1}}],[\"使用最少线程\",{\"1\":{\"821\":1}}],[\"使用抽象类\",{\"1\":{\"802\":1}}],[\"使用上面的命令编辑nginx的配置文件\",{\"1\":{\"638\":1}}],[\"使用缓存锁保证原子性\",{\"1\":{\"851\":1}}],[\"使用缓存\",{\"1\":{\"441\":1}}],[\"使用示例\",{\"1\":{\"405\":1,\"1476\":1}}],[\"使用了设计模式\",{\"1\":{\"389\":1}}],[\"使用了\",{\"1\":{\"360\":1,\"368\":1,\"1702\":3}}],[\"使用分段锁机制来实现并发更新操作\",{\"1\":{\"360\":1}}],[\"使用链表的头插法\",{\"1\":{\"350\":1}}],[\"使用第\",{\"1\":{\"350\":1}}],[\"使用除留余数法得到所在的桶下标\",{\"1\":{\"349\":3}}],[\"使用拉链法来解决冲突\",{\"1\":{\"348\":1}}],[\"使用\",{\"0\":{\"1628\":1},\"1\":{\"334\":1,\"345\":1,\"353\":1,\"356\":1,\"365\":1,\"368\":2,\"1081\":1,\"1220\":1,\"1329\":1,\"1332\":1,\"1518\":1,\"1707\":1,\"1708\":2,\"1711\":2,\"1712\":4}}],[\"使用双向链表来维护元素的顺序\",{\"1\":{\"325\":1}}],[\"使用指南\",{\"2\":{\"309\":1}}],[\"使用maven\",{\"0\":{\"100\":1}}],[\"老的api依赖于新的api\",{\"1\":{\"775\":1}}],[\"老师有多名学生\",{\"1\":{\"735\":1}}],[\"老师与学生是双向关联\",{\"1\":{\"735\":1}}],[\"老师与学生\",{\"1\":{\"735\":1}}],[\"老虎是动物的一种\",{\"1\":{\"735\":1}}],[\"老板处理\",{\"1\":{\"537\":1}}],[\"老板\",{\"1\":{\"537\":1}}],[\"老板年底拖欠工资\",{\"1\":{\"259\":1,\"447\":1}}],[\"老\",{\"1\":{\"207\":1}}],[\"老年代被写满\",{\"1\":{\"207\":1}}],[\"老年代对象存活时间比较长\",{\"1\":{\"207\":1}}],[\"老年代存活率高\",{\"1\":{\"207\":1}}],[\"老年代\",{\"1\":{\"205\":1,\"206\":1,\"207\":1,\"1133\":2}}],[\"若远程依赖失效\",{\"1\":{\"1966\":1}}],[\"若有module采用\",{\"1\":{\"1491\":1}}],[\"若当前是子组件\",{\"1\":{\"1474\":1}}],[\"若当前是壳工程\",{\"1\":{\"1474\":1}}],[\"若当前线程sleep\",{\"1\":{\"945\":1}}],[\"若isrunalone==true\",{\"1\":{\"1473\":1}}],[\"若圆角为android切\",{\"1\":{\"1435\":1}}],[\"若截图含有手机外观\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"若干函数做了类似的工作\",{\"1\":{\"1274\":1}}],[\"若依微服务\",{\"0\":{\"726\":1}}],[\"若依是一套全部开源的快速开发平台\",{\"1\":{\"9\":1,\"728\":1}}],[\"若是老年代也满了就会触发一次\",{\"1\":{\"207\":1}}],[\"接入新技术平滑过渡\",{\"1\":{\"1694\":1}}],[\"接入flutter\",{\"0\":{\"1689\":1}}],[\"接入民生银行金服组重大事件回顾\",{\"1\":{\"595\":1}}],[\"接收ams消息进行处理\",{\"0\":{\"1863\":1}}],[\"接收远程消息\",{\"1\":{\"1727\":1,\"1732\":1}}],[\"接收顶点坐标\",{\"1\":{\"1540\":1}}],[\"接收者只指向进程\",{\"1\":{\"1776\":2}}],[\"接收者\",{\"1\":{\"489\":1}}],[\"接下来一段时间\",{\"1\":{\"1483\":1}}],[\"接受新思维有渐进过程\",{\"1\":{\"1268\":1}}],[\"接受的补丁不符合要求\",{\"1\":{\"778\":1}}],[\"接受api的补丁\",{\"1\":{\"778\":1}}],[\"接着下一轮继续相同的操作\",{\"1\":{\"278\":1}}],[\"接存放到老年代\",{\"1\":{\"207\":1}}],[\"接口实现\",{\"1\":{\"1762\":1}}],[\"接口实现关系\",{\"1\":{\"738\":1}}],[\"接口中常量flag\",{\"1\":{\"1751\":1}}],[\"接口不建议写方法体\",{\"1\":{\"1518\":1}}],[\"接口暴露\",{\"1\":{\"1491\":1}}],[\"接口版本\",{\"1\":{\"1377\":1}}],[\"接口简洁易用\",{\"1\":{\"1274\":1}}],[\"接口存引用\",{\"1\":{\"1110\":1}}],[\"接口方法一通操作\",{\"1\":{\"1592\":1}}],[\"接口方法的解析\",{\"1\":{\"1173\":1}}],[\"接口方法\",{\"1\":{\"1110\":1}}],[\"接口名\",{\"1\":{\"1109\":1}}],[\"接口常量池索引表\",{\"1\":{\"1076\":1}}],[\"接口并非指java中interface\",{\"1\":{\"802\":1}}],[\"接口vs类\",{\"1\":{\"802\":1}}],[\"接口弱点背后的优点\",{\"1\":{\"802\":1}}],[\"接口注入\",{\"1\":{\"753\":1}}],[\"接口声明依赖对象\",{\"1\":{\"753\":1}}],[\"接口设计有限度的\",{\"1\":{\"753\":1}}],[\"接口高内聚\",{\"1\":{\"753\":1}}],[\"接口尽量小\",{\"1\":{\"753\":1}}],[\"接口的单一职责\",{\"1\":{\"753\":1}}],[\"接口的聚合对象\",{\"1\":{\"327\":1}}],[\"接口==借口\",{\"1\":{\"750\":1}}],[\"接口隔离原则\",{\"1\":{\"753\":1}}],[\"接口隔离\",{\"1\":{\"750\":1}}],[\"接口标识着该类支持快速随机访问\",{\"1\":{\"331\":1}}],[\"接口类型\",{\"1\":{\"271\":1,\"1087\":1}}],[\"接口\",{\"1\":{\"259\":1,\"327\":1,\"926\":1,\"938\":1,\"1518\":1,\"1712\":1,\"1732\":1}}],[\"接口文档频繁改动\",{\"1\":{\"1423\":1}}],[\"接口文档\",{\"1\":{\"12\":1,\"731\":1}}],[\"接口化支持扩展其他厂家\",{\"1\":{\"12\":1,\"731\":1}}],[\"接口化两步即可完成自定义扩展\",{\"1\":{\"12\":1,\"731\":1}}],[\"此状态变化不会传递到其父组件\",{\"1\":{\"1711\":1}}],[\"此过程属于多端协同的哪个过程\",{\"1\":{\"1702\":1}}],[\"此外api\",{\"1\":{\"1549\":1}}],[\"此处通过反射\",{\"1\":{\"1866\":1}}],[\"此处ismain=true\",{\"1\":{\"1778\":1}}],[\"此处调用waitforresponse根据是否有设置tf\",{\"1\":{\"1756\":1}}],[\"此处便是bpbinder\",{\"1\":{\"1756\":1}}],[\"此处为null\",{\"1\":{\"1756\":1}}],[\"此处obj\",{\"1\":{\"1756\":1}}],[\"此处可用于权限拦截\",{\"1\":{\"1737\":1}}],[\"此处即可根据其值是否为空来决定采用哪种处理方法\",{\"1\":{\"1417\":1}}],[\"此处逻辑建议迁移出去\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"此处进行第三方sdk初始化\",{\"1\":{\"1320\":1}}],[\"此处之后串行操作\",{\"1\":{\"923\":1}}],[\"此版本号都为0\",{\"1\":{\"1078\":1}}],[\"此方法返回\",{\"1\":{\"381\":1}}],[\"此图非常重要\",{\"1\":{\"271\":1}}],[\"此图也会实时更新\",{\"1\":{\"229\":1}}],[\"此\",{\"1\":{\"207\":1}}],[\"此时可以查看远程地址\",{\"1\":{\"1960\":1}}],[\"此时min还没有数据\",{\"1\":{\"1756\":1}}],[\"此时该线程处于阻塞状态\",{\"1\":{\"1755\":1}}],[\"此时感受到一万点暴击\",{\"1\":{\"1491\":1}}],[\"此时维护的是插入顺序\",{\"1\":{\"362\":1}}],[\"此时\",{\"1\":{\"207\":1,\"1587\":1,\"1921\":1}}],[\"此知识点常考\",{\"0\":{\"169\":1}}],[\"区间检测\",{\"1\":{\"1518\":1}}],[\"区间方法\",{\"1\":{\"1518\":1}}],[\"区别\",{\"1\":{\"883\":1}}],[\"区别在于代理类生成时间不同\",{\"1\":{\"258\":1}}],[\"区获取\",{\"1\":{\"368\":1}}],[\"区满了才触发\",{\"1\":{\"207\":1}}],[\"区不足以存放\",{\"1\":{\"207\":1}}],[\"区为空\",{\"1\":{\"207\":1}}],[\"区交换\",{\"1\":{\"207\":1}}],[\"区是空的\",{\"1\":{\"207\":1}}],[\"区存活对象复制到另一个\",{\"1\":{\"207\":1}}],[\"区存活对象复制到一个\",{\"1\":{\"207\":1}}],[\"区和\",{\"1\":{\"207\":2}}],[\"区和两个\",{\"1\":{\"207\":1}}],[\"区也\",{\"1\":{\"207\":1}}],[\"区中生成\",{\"1\":{\"207\":1}}],[\"区\",{\"1\":{\"207\":5}}],[\"所占空间百分比\",{\"1\":{\"1152\":1}}],[\"所执行字节码的当前执行号指示器\",{\"1\":{\"1115\":1}}],[\"所属的类\",{\"1\":{\"1109\":1,\"1110\":1}}],[\"所包含的类指针\",{\"1\":{\"993\":1}}],[\"所谓smart原则\",{\"1\":{\"583\":1}}],[\"所有标签推送上去\",{\"1\":{\"1949\":1}}],[\"所有使用\",{\"1\":{\"1707\":1}}],[\"所有\",{\"1\":{\"1521\":1}}],[\"所有对应属性要全\",{\"1\":{\"1445\":1}}],[\"所有逻辑都只在唯一地点指定\",{\"1\":{\"1253\":1}}],[\"所有方法调用中目标方法在class文件里面都是常量池中符号引用\",{\"1\":{\"1187\":1}}],[\"所有通配符下类路径\",{\"1\":{\"1064\":1}}],[\"所有被屏障拦截的线程才会继续运行\",{\"1\":{\"905\":1}}],[\"所有线程都只能看到一个单一操作执行顺序\",{\"1\":{\"860\":1}}],[\"所有内容不可更改\",{\"1\":{\"799\":1}}],[\"所有内容围绕这个概念展开\",{\"1\":{\"760\":1}}],[\"所有引用基类地方必须透明地使用子类对象\",{\"1\":{\"753\":1}}],[\"所有组件提供二进制化功能\",{\"1\":{\"305\":1}}],[\"所有知识点沿着这个路径\",{\"1\":{\"229\":1}}],[\"所有面试过程遇到问题\",{\"1\":{\"228\":1}}],[\"所有新生成的对象首先都是放在新生代的\",{\"1\":{\"207\":1}}],[\"所以是bpbinder\",{\"1\":{\"1804\":1}}],[\"所以是比较稳定的排序方式\",{\"1\":{\"284\":1}}],[\"所以不指定线程\",{\"1\":{\"1776\":2}}],[\"所以选型接入flutter\",{\"1\":{\"1689\":1}}],[\"所以hellotv\",{\"1\":{\"1604\":1}}],[\"所以需要开发一款无入侵式mock工具\",{\"1\":{\"1595\":1}}],[\"所以有没有一种方式在create\",{\"1\":{\"1588\":1}}],[\"所以结果true\",{\"1\":{\"1203\":1}}],[\"所以当atomicintegerarray对内部的数组元素进行修改时\",{\"1\":{\"900\":1}}],[\"所以根据原书\",{\"1\":{\"814\":1}}],[\"所以要尽量不使用双向的互相依赖\",{\"1\":{\"735\":1}}],[\"所以只需要后端开发者正确的设置后\",{\"1\":{\"649\":1}}],[\"所以如果\",{\"1\":{\"385\":1}}],[\"所以新容量大约是旧容量的\",{\"1\":{\"332\":1}}],[\"所以支持快速随机访问\",{\"1\":{\"331\":1}}],[\"所以扩展性的最大瓶颈消失了\",{\"1\":{\"314\":1}}],[\"所以顶点的数就是最大值\",{\"1\":{\"283\":1}}],[\"所以比minor\",{\"1\":{\"207\":1}}],[\"所以\",{\"1\":{\"207\":1,\"343\":1,\"383\":1}}],[\"所走过的路径称为引用链\",{\"1\":{\"200\":1}}],[\"朝生夕死大对象应该避免\",{\"1\":{\"1146\":1}}],[\"朝生夕死\",{\"1\":{\"206\":1}}],[\"但同一个服务已注册\",{\"1\":{\"1786\":1}}],[\"但system\",{\"1\":{\"1776\":1}}],[\"但kernel只允许注册一次死亡通知\",{\"1\":{\"1761\":1}}],[\"但如果设置了flag\",{\"1\":{\"1751\":1}}],[\"但你无法通过继承手法消除它\",{\"1\":{\"1283\":1}}],[\"但其间有一个单项链接\",{\"1\":{\"1283\":1}}],[\"但在函数本体中却包含了不同的值\",{\"1\":{\"1274\":1}}],[\"但各个操作的细节上有所不同\",{\"1\":{\"1262\":1}}],[\"但无论如何还是可以去做\",{\"1\":{\"1253\":1}}],[\"但还没有调用start\",{\"1\":{\"943\":1}}],[\"但真正大部分情况用不到\",{\"1\":{\"802\":1}}],[\"但存在一个规模的限制\",{\"1\":{\"796\":1}}],[\"但当事物处于视野临界就有些模糊\",{\"1\":{\"793\":1}}],[\"但部分不能离开整体而单独存在\",{\"1\":{\"735\":1}}],[\"但学生与某课程间的关系为单向关联\",{\"1\":{\"735\":1}}],[\"但插入删除只需要改变指针\",{\"1\":{\"346\":1}}],[\"但插入删除的代价很高\",{\"1\":{\"346\":1}}],[\"但它是线程安全的\",{\"1\":{\"323\":1,\"325\":1}}],[\"但不包括\",{\"1\":{\"1952\":1}}],[\"但不能终止公共事件处理\",{\"1\":{\"1702\":3}}],[\"但不能降级\",{\"1\":{\"845\":1}}],[\"但不影响正式包效率\",{\"1\":{\"1587\":1}}],[\"但不一定\",{\"1\":{\"1128\":1}}],[\"但不支持有序性操作\",{\"1\":{\"322\":1}}],[\"但不对对象功能本身增加\",{\"1\":{\"261\":1}}],[\"但不保证一定等\",{\"1\":{\"200\":1}}],[\"但是站在业务角度\",{\"1\":{\"1689\":1}}],[\"但是需要有hook点\",{\"1\":{\"1588\":1}}],[\"但是不利于长期发展\",{\"1\":{\"1561\":1}}],[\"但是cmake比较简单一些\",{\"1\":{\"1534\":1}}],[\"但是它不会在方法返回时被自动释放\",{\"1\":{\"1530\":1}}],[\"但是它还是存在一致性问题\",{\"1\":{\"1218\":1}}],[\"但是细节地方\",{\"1\":{\"1509\":1}}],[\"但是每次使用之前都会从主内存中重新读取\",{\"1\":{\"1222\":1}}],[\"但是对象地址不相同\",{\"1\":{\"1203\":1}}],[\"但是加载class文件来源\",{\"1\":{\"1075\":1}}],[\"但是仍然会输出旧的年龄\",{\"1\":{\"900\":1}}],[\"但是在java虚拟机退出时daemon线程中的finally块并不一定会执行\",{\"1\":{\"868\":1}}],[\"但是他必须花费大量时间来学习这些api\",{\"1\":{\"793\":1}}],[\"但是技巧很分散\",{\"1\":{\"757\":1}}],[\"但是随着互联网的发展\",{\"1\":{\"649\":1}}],[\"但是没有链表\",{\"1\":{\"382\":1}}],[\"但是必须重写initialvalue\",{\"1\":{\"381\":1}}],[\"但是因为无法调用\",{\"1\":{\"350\":1}}],[\"但是\",{\"1\":{\"343\":1,\"385\":1,\"738\":1,\"1253\":1,\"1271\":1}}],[\"但是使用了\",{\"1\":{\"337\":1}}],[\"但是可以快速地在链表中间插入和删除元素\",{\"1\":{\"323\":1}}],[\"但是查找效率不如\",{\"1\":{\"322\":1}}],[\"但是查询效率低\",{\"1\":{\"214\":1}}],[\"但是四层的结构最常见\",{\"1\":{\"311\":1}}],[\"但是插入和删除效率低\",{\"1\":{\"214\":1}}],[\"但解决内存碎片问题\",{\"1\":{\"205\":1}}],[\"直线及三角形分解成大量的小片段\",{\"1\":{\"1540\":1}}],[\"直角图标\",{\"1\":{\"1338\":2,\"1435\":2}}],[\"直到收到应答消息\",{\"1\":{\"1756\":1}}],[\"直到收到如下br\",{\"1\":{\"1755\":1}}],[\"直到通过\",{\"1\":{\"1701\":1}}],[\"直到所有注解处理器不在修改\",{\"1\":{\"1199\":1}}],[\"直到父加载器反馈无法完成\",{\"1\":{\"1175\":1}}],[\"直到顶层的启动类加载器\",{\"1\":{\"1175\":1}}],[\"直到它收集结束\",{\"1\":{\"1139\":1}}],[\"直到线程b也调用了exchange\",{\"1\":{\"958\":1}}],[\"直到为空为⽌\",{\"1\":{\"382\":1}}],[\"直到最后一个线程到达屏障时\",{\"1\":{\"905\":1}}],[\"直到最后一个元素\",{\"1\":{\"282\":1,\"283\":1}}],[\"直到最高位\",{\"1\":{\"287\":1}}],[\"直到找到已排序的元素小于或者等于新元素的位置\",{\"1\":{\"280\":1}}],[\"直到头尾指针相等或头指针大于尾指针\",{\"1\":{\"279\":1}}],[\"直到排序完成\",{\"1\":{\"278\":1,\"284\":1}}],[\"直到委托到启动类加载器\",{\"1\":{\"194\":1}}],[\"直接创建message对象\",{\"1\":{\"1850\":1}}],[\"直接跳转done\",{\"1\":{\"1828\":3}}],[\"直接隐式调用\",{\"1\":{\"1358\":1}}],[\"直接设置中断标志\",{\"1\":{\"1136\":1}}],[\"直接指针\",{\"1\":{\"1118\":2}}],[\"直接返回\",{\"1\":{\"1063\":1,\"1826\":1}}],[\"直接请求就发不出去\",{\"1\":{\"649\":1}}],[\"直接进入mysql模式\",{\"1\":{\"619\":1}}],[\"直接抛出异常\",{\"1\":{\"246\":1,\"914\":1}}],[\"直接清理掉端边界以外的内存\",{\"1\":{\"205\":1}}],[\"让博客666起来\",{\"1\":{\"1958\":1}}],[\"让博士论文评议委员会相信重构研究够得上博士水平\",{\"1\":{\"1268\":1}}],[\"让重要的消息尽可能早的得到执行\",{\"1\":{\"1848\":1}}],[\"让service\",{\"1\":{\"1789\":1}}],[\"让spannablestringbuilder更简单\",{\"0\":{\"1301\":1}}],[\"让flutter像webview一样引用\",{\"1\":{\"1689\":1}}],[\"让后续项目自然接入\",{\"1\":{\"1500\":1}}],[\"让组件化技术真正落地接地气\",{\"1\":{\"1453\":1}}],[\"让参数接受者取出该项参数\",{\"1\":{\"1274\":1}}],[\"让软件开发者相信重构的实际价值\",{\"1\":{\"1268\":1}}],[\"让存活的对象都向一端移动\",{\"1\":{\"1132\":1}}],[\"让接手的人易于理解\",{\"1\":{\"1069\":1}}],[\"让出当前线程执行权\",{\"1\":{\"945\":1}}],[\"让出执行权\",{\"1\":{\"944\":1}}],[\"让一组线程到达一个屏障\",{\"1\":{\"905\":1}}],[\"让系统的其他部分只依赖于接口\",{\"1\":{\"802\":1}}],[\"让用户通过getter\",{\"1\":{\"799\":1}}],[\"让作者加以改进给我\",{\"1\":{\"778\":1}}],[\"让问题库重新焕发活力\",{\"1\":{\"775\":1}}],[\"让对象不可变\",{\"1\":{\"766\":1}}],[\"让第三方库对用户不可见\",{\"1\":{\"760\":1}}],[\"让配置生效\",{\"0\":{\"639\":1}}],[\"让民生项目开发和测试进度提前2周\",{\"1\":{\"595\":1}}],[\"让代码更容易被他人理解和保证代码的可靠性\",{\"1\":{\"389\":1}}],[\"让轻量化的业务服务端研发成为可能\",{\"1\":{\"305\":1}}],[\"让子类决定实例化那个类\",{\"1\":{\"257\":1,\"393\":1,\"413\":1,\"415\":1,\"416\":1}}],[\"让所有存活对象都向一端移动\",{\"1\":{\"205\":1}}],[\"让开发人员从此不再为搭建环境而烦恼\",{\"1\":{\"12\":1,\"731\":1}}],[\"整数\",{\"1\":{\"1110\":1}}],[\"整数中\",{\"1\":{\"298\":1}}],[\"整型变量上维护多种状态\",{\"1\":{\"886\":1}}],[\"整型和浮点\",{\"1\":{\"271\":1,\"1087\":1}}],[\"整理\",{\"1\":{\"1145\":1}}],[\"整理让大家遵守的规范\",{\"1\":{\"757\":1}}],[\"整理算法在标记\",{\"1\":{\"205\":1}}],[\"整理算法\",{\"0\":{\"205\":1,\"1132\":1},\"1\":{\"207\":1,\"1132\":1,\"1133\":1}}],[\"整个get过程不需要加锁\",{\"1\":{\"894\":1}}],[\"整个前端全部996\",{\"1\":{\"595\":1}}],[\"整个架构就会变得复杂\",{\"1\":{\"314\":1}}],[\"整个软件就分成事件代理和事件处理器两部分\",{\"1\":{\"312\":1}}],[\"整体渲染流程\",{\"1\":{\"1540\":1}}],[\"整体关系是指局部内容\",{\"1\":{\"1445\":1}}],[\"整体拼装方式\",{\"1\":{\"1313\":1}}],[\"整体是标记\",{\"1\":{\"1145\":1}}],[\"整体\",{\"1\":{\"257\":1,\"394\":1,\"464\":1,\"465\":1,\"738\":3}}],[\"整体移除v4\",{\"1\":{\"52\":1}}],[\"提示\",{\"1\":{\"1444\":1}}],[\"提取消息的调用链\",{\"1\":{\"1828\":1}}],[\"提取子函数\",{\"1\":{\"1286\":1}}],[\"提取公共部分代码\",{\"1\":{\"501\":1}}],[\"提炼函数\",{\"1\":{\"1280\":1}}],[\"提炼继承体系\",{\"1\":{\"1265\":1}}],[\"提炼接口\",{\"1\":{\"1262\":1}}],[\"提炼超类\",{\"1\":{\"1262\":1}}],[\"提炼子类\",{\"1\":{\"1262\":1}}],[\"提炼一个函数减少变化\",{\"1\":{\"1259\":1}}],[\"提炼类\",{\"1\":{\"1259\":1}}],[\"提货单模式\",{\"1\":{\"926\":1}}],[\"提高效率\",{\"1\":{\"1512\":1}}],[\"提高开发效率\",{\"1\":{\"1512\":1}}],[\"提高生产力\",{\"1\":{\"1268\":1}}],[\"提高思维认识\",{\"1\":{\"1268\":1}}],[\"提高质量\",{\"1\":{\"955\":1}}],[\"提高吞吐量\",{\"1\":{\"938\":1}}],[\"提高线程的可管理性\",{\"1\":{\"912\":1}}],[\"提高响应速度\",{\"1\":{\"912\":1}}],[\"提高代码的扩展性\",{\"1\":{\"753\":1}}],[\"提倡模块化设计和基于组件的架构\",{\"1\":{\"784\":1,\"790\":1}}],[\"提升权限\",{\"1\":{\"619\":1}}],[\"提交到新的远程仓库\",{\"0\":{\"1945\":1}}],[\"提交标签classfile\",{\"1\":{\"1082\":1}}],[\"提交标签classpath\",{\"1\":{\"1065\":1}}],[\"提交标签\",{\"1\":{\"1018\":1,\"1025\":1,\"1031\":1,\"1038\":1,\"1045\":1,\"1057\":1}}],[\"提交代码标记\",{\"1\":{\"998\":1}}],[\"提交uat测试报告给民生银行\",{\"1\":{\"595\":1}}],[\"提交申请\",{\"1\":{\"259\":1,\"447\":1}}],[\"提现\",{\"1\":{\"595\":1}}],[\"提前看出问题\",{\"1\":{\"772\":1}}],[\"提前做好监测\",{\"1\":{\"598\":1}}],[\"提前大幅度进度\",{\"1\":{\"595\":1}}],[\"提前2周\",{\"1\":{\"586\":1}}],[\"提前触发gc\",{\"1\":{\"204\":1}}],[\"提纲挈领\",{\"1\":{\"571\":1}}],[\"提供利用率\",{\"1\":{\"1866\":1}}],[\"提供了下面哪些弹窗功能\",{\"1\":{\"1713\":1}}],[\"提供了相关动态库\",{\"1\":{\"1530\":1}}],[\"提供后台代理提醒功能\",{\"1\":{\"1711\":1}}],[\"提供循环渲染的数据源\",{\"1\":{\"1709\":1}}],[\"提供的动画控制\",{\"1\":{\"1713\":1}}],[\"提供的数据管理的方式都有哪些\",{\"1\":{\"1713\":1}}],[\"提供的\",{\"1\":{\"1708\":1}}],[\"提供的包管理能力包含以下哪些信息\",{\"1\":{\"1702\":1}}],[\"提供两个方法\",{\"1\":{\"1555\":1}}],[\"提供渲染方法setrenderer来设置渲染器\",{\"1\":{\"1540\":1}}],[\"提供api越多\",{\"1\":{\"1481\":1}}],[\"提供gradle插件\",{\"1\":{\"1480\":1}}],[\"提供sketch和切图\",{\"1\":{\"1441\":1}}],[\"提供view的\",{\"0\":{\"1392\":1,\"1675\":1}}],[\"提供mdpi~xxxhdpi\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"提供给客户端代码的api与为开发商提供的api要有所不同\",{\"1\":{\"808\":1}}],[\"提供简单但又非常通用的功能类库模块\",{\"1\":{\"805\":1}}],[\"提供新的版本更迭\",{\"1\":{\"793\":1}}],[\"提供可运行的demo\",{\"1\":{\"793\":1}}],[\"提供\",{\"1\":{\"314\":1}}],[\"提供不同业务逻辑需要的一些通用接口\",{\"1\":{\"311\":1}}],[\"提供数据\",{\"1\":{\"311\":1}}],[\"提供一个全局访问点\",{\"1\":{\"257\":1,\"393\":1,\"402\":1}}],[\"提供最小核心能力集合\",{\"1\":{\"12\":1,\"731\":1}}],[\"提供框架功能的实际使用案例\",{\"1\":{\"12\":1,\"731\":1}}],[\"提供单例测试\",{\"1\":{\"12\":1,\"731\":1}}],[\"提供详细的修改方案文档\",{\"1\":{\"12\":1,\"731\":1}}],[\"提供详细的搭建文档\",{\"1\":{\"12\":1,\"731\":1}}],[\"垃圾收集器\",{\"0\":{\"208\":1,\"1138\":1},\"1\":{\"208\":1,\"1138\":1}}],[\"垃圾收集算法\",{\"0\":{\"203\":1},\"1\":{\"203\":1}}],[\"垃圾回收信息\",{\"1\":{\"1152\":1}}],[\"垃圾回收时\",{\"1\":{\"1131\":1}}],[\"垃圾回收器会回收该对象\",{\"1\":{\"1126\":1}}],[\"垃圾回收器就不会回收该对象\",{\"1\":{\"1126\":1}}],[\"垃圾回收器对该对象的所占用的内存空间进行回收或者再分配了\",{\"1\":{\"145\":1}}],[\"垃圾回收机制\",{\"0\":{\"1122\":1}}],[\"垃圾回收有两种类型\",{\"1\":{\"207\":1}}],[\"任意\",{\"1\":{\"1521\":1}}],[\"任意对象使用when\",{\"1\":{\"1521\":1}}],[\"任玉刚三连击\",{\"1\":{\"1574\":1}}],[\"任玉刚\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"任何情况随时要git\",{\"1\":{\"1948\":1}}],[\"任何情况下\",{\"1\":{\"1233\":1}}],[\"任何有返回值的函数\",{\"1\":{\"1274\":1}}],[\"任何一个binder线程当同时满足以下条件\",{\"1\":{\"1780\":1}}],[\"任何一个等待线程都可以获得锁\",{\"1\":{\"1238\":1}}],[\"任何一个对象finalize方法只会被系统调用一次\",{\"1\":{\"200\":1}}],[\"任何成功的框架来说\",{\"1\":{\"778\":1}}],[\"任何类都不应该从具体类派生\",{\"1\":{\"753\":1}}],[\"任务阻塞队列\",{\"1\":{\"950\":1}}],[\"任务将被拒绝\",{\"1\":{\"913\":1}}],[\"任务性质分类\",{\"0\":{\"248\":1}}],[\"任务队列\",{\"1\":{\"246\":1,\"914\":1}}],[\"任务完成\",{\"1\":{\"103\":1}}],[\"任务调度包含执行结果日志\",{\"1\":{\"14\":1,\"733\":1}}],[\"任务监控\",{\"1\":{\"12\":1,\"731\":1}}],[\"时候触发网页默认弹窗\",{\"1\":{\"1711\":1}}],[\"时\",{\"1\":{\"1707\":1,\"1708\":2,\"1711\":2,\"1712\":1,\"1713\":4,\"1799\":1}}],[\"时机\",{\"1\":{\"1253\":1}}],[\"时被阻塞\",{\"1\":{\"905\":1}}],[\"时会移除最晚的节点\",{\"1\":{\"364\":1}}],[\"时会将链表转换为红黑树\",{\"1\":{\"355\":1}}],[\"时间间隔\",{\"1\":{\"1583\":1}}],[\"时间\",{\"1\":{\"586\":1}}],[\"时间复杂度显然和链表的长度成正比\",{\"1\":{\"349\":1}}],[\"时间单位\",{\"1\":{\"246\":1,\"914\":1}}],[\"时该对象又成功被引用\",{\"1\":{\"200\":1}}],[\"时failed\",{\"0\":{\"100\":1}}],[\"待它执行结束\",{\"1\":{\"200\":1}}],[\"该库包含的源码在frameworks\",{\"1\":{\"1867\":1}}],[\"该上限不统计通过bc\",{\"1\":{\"1779\":1}}],[\"该开发者自定义的属性名称为\",{\"1\":{\"1702\":1}}],[\"该场景中使用了\",{\"1\":{\"1702\":1}}],[\"该广播即使多发\",{\"1\":{\"1417\":1}}],[\"该类对应的对象没有被任何地方被引用\",{\"1\":{\"1128\":1}}],[\"该类所有实例已被回收\",{\"1\":{\"1128\":1}}],[\"该状态不同于waiting\",{\"1\":{\"943\":1}}],[\"该方法能够保证状态\",{\"1\":{\"876\":1}}],[\"该线程名格式为binder\",{\"1\":{\"1776\":1}}],[\"该线程不一定是binder线程\",{\"1\":{\"1776\":1}}],[\"该线程不断地进行睡眠\",{\"1\":{\"867\":1}}],[\"该线程在blocked\",{\"1\":{\"867\":1}}],[\"该线程在waiting\",{\"1\":{\"867\":1}}],[\"该api是否还能存在\",{\"1\":{\"796\":1}}],[\"该值为\",{\"1\":{\"359\":1}}],[\"该关键字声明数组默认不会被序列化\",{\"1\":{\"334\":1}}],[\"该操作的时间复杂度为\",{\"1\":{\"333\":1}}],[\"该中间件负责协调处理单元\",{\"1\":{\"314\":1}}],[\"该垃圾回收算法适用于对象存活率搞得场景\",{\"1\":{\"205\":1}}],[\"该对象是否必要执行finalize\",{\"1\":{\"200\":1}}],[\"该功能主要完成系统用户配置\",{\"1\":{\"14\":1,\"733\":1}}],[\"筛选条件是\",{\"1\":{\"200\":1}}],[\"第2章\",{\"0\":{\"1479\":1}}],[\"第2层\",{\"1\":{\"1207\":1}}],[\"第20章\",{\"0\":{\"790\":1}}],[\"第0层\",{\"1\":{\"1207\":1}}],[\"第9章\",{\"0\":{\"811\":1}}],[\"第8章\",{\"0\":{\"808\":1}}],[\"第7章\",{\"0\":{\"805\":1}}],[\"第6章\",{\"0\":{\"802\":1}}],[\"第5章\",{\"0\":{\"799\":1}}],[\"第4章\",{\"0\":{\"796\":1,\"1494\":1}}],[\"第3章\",{\"0\":{\"793\":1,\"1486\":1,\"1491\":1},\"1\":{\"1486\":2,\"1491\":2}}],[\"第1层\",{\"1\":{\"1207\":1}}],[\"第1章\",{\"0\":{\"787\":1,\"1471\":1}}],[\"第19章\",{\"0\":{\"784\":1}}],[\"第17章\",{\"0\":{\"781\":1}}],[\"第16章\",{\"0\":{\"778\":1}}],[\"第15章\",{\"0\":{\"775\":1}}],[\"第14章\",{\"0\":{\"772\":1}}],[\"第13章\",{\"0\":{\"769\":1}}],[\"第12章\",{\"0\":{\"766\":1}}],[\"第11章\",{\"0\":{\"763\":1}}],[\"第10章\",{\"0\":{\"760\":1},\"1\":{\"754\":1}}],[\"第1期12月6日上线\",{\"1\":{\"595\":1}}],[\"第四个词是思维方式\",{\"1\":{\"589\":1}}],[\"第三个参数为匿名函数\",{\"1\":{\"1709\":1}}],[\"第三个是协同\",{\"1\":{\"589\":1}}],[\"第三方工具\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"第三方sdk启动\",{\"1\":{\"1320\":1}}],[\"第三方sdk初始化放在异步线程中\",{\"1\":{\"1320\":1}}],[\"第三方能力\",{\"1\":{\"12\":1,\"731\":1}}],[\"第三次做类似的事\",{\"1\":{\"1253\":1}}],[\"第三种情况\",{\"1\":{\"833\":1}}],[\"第二个参数生成子组件的\",{\"1\":{\"1709\":1}}],[\"第二个不为点\",{\"1\":{\"1349\":1}}],[\"第二次做类似事会产生反感\",{\"1\":{\"1253\":1}}],[\"第二次标记筛选\",{\"1\":{\"1127\":1}}],[\"第二次标记\",{\"1\":{\"200\":1}}],[\"第二是使用cas算法将入队节点设置成尾节点\",{\"1\":{\"895\":1}}],[\"第二种写法\",{\"1\":{\"1346\":2}}],[\"第二种存在测试量\",{\"1\":{\"1317\":1}}],[\"第二种情况\",{\"1\":{\"833\":1}}],[\"第二种方式\",{\"1\":{\"259\":1}}],[\"第一章\",{\"0\":{\"1497\":1}}],[\"第一步期望子组件可以作为app单独调试和壳app集成发布\",{\"1\":{\"1472\":1}}],[\"第一次做某件事时只管去做\",{\"1\":{\"1253\":1}}],[\"第一次标记筛选\",{\"1\":{\"1127\":1}}],[\"第一次标记\",{\"1\":{\"200\":1}}],[\"第一是定位出尾节点\",{\"1\":{\"895\":1}}],[\"第一个参数必须是数组\",{\"1\":{\"1709\":1}}],[\"第一个版本远非完美\",{\"1\":{\"796\":1}}],[\"第一个是目标设定\",{\"1\":{\"589\":1}}],[\"第一性原理\",{\"1\":{\"769\":1,\"799\":1,\"802\":1,\"1512\":1}}],[\"第一部分\",{\"1\":{\"754\":1}}],[\"第一种情况\",{\"1\":{\"833\":1}}],[\"第一种方式\",{\"1\":{\"259\":1}}],[\"第一种写法\",{\"1\":{\"259\":1,\"1346\":2}}],[\"解除绑定远程服务\",{\"1\":{\"1736\":1}}],[\"解除依赖\",{\"1\":{\"1482\":1}}],[\"解注册\",{\"1\":{\"1702\":1}}],[\"解绑方法添加类中\",{\"1\":{\"1601\":1}}],[\"解绑方法\",{\"1\":{\"1601\":1}}],[\"解锁\",{\"1\":{\"1220\":1,\"1248\":1}}],[\"解语法糖\",{\"1\":{\"1197\":1,\"1200\":1}}],[\"解码指令\",{\"1\":{\"1101\":1}}],[\"解析成arguments对象格式\",{\"1\":{\"1863\":1}}],[\"解析init\",{\"1\":{\"1857\":1}}],[\"解析处理\",{\"1\":{\"1789\":1}}],[\"解析返回报文\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"解析与填充符号表\",{\"0\":{\"1198\":1}}],[\"解析\",{\"0\":{\"1173\":1,\"1187\":1},\"1\":{\"1197\":1,\"1552\":2}}],[\"解析方法区运行时数据结构\",{\"1\":{\"1170\":1}}],[\"解析结果ref\",{\"1\":{\"1169\":1}}],[\"解析用户类加载\",{\"1\":{\"1063\":1}}],[\"解析启动类加载\",{\"1\":{\"1063\":1}}],[\"解析剩余参数\",{\"1\":{\"1055\":1}}],[\"解析符号引用\",{\"1\":{\"992\":1}}],[\"解析classfile\",{\"0\":{\"1080\":1}}],[\"解析classfile文件\",{\"0\":{\"1074\":1}}],[\"解析class\",{\"1\":{\"197\":1,\"1175\":1}}],[\"解约\",{\"1\":{\"595\":1}}],[\"解释执行\",{\"1\":{\"1189\":1}}],[\"解释器还要替编译器收集性能监控信息\",{\"1\":{\"1206\":1}}],[\"解释器与编译器交互\",{\"1\":{\"1206\":1}}],[\"解释器执行\",{\"1\":{\"1102\":1}}],[\"解释器是将指令以逻辑方式运行\",{\"0\":{\"1165\":1},\"1\":{\"1101\":1}}],[\"解释器\",{\"0\":{\"1100\":1},\"1\":{\"1101\":1}}],[\"解释器模式\",{\"0\":{\"523\":1},\"1\":{\"256\":1,\"257\":1,\"395\":1,\"524\":1,\"525\":1}}],[\"解释了设计问题和问题存在前因后果\",{\"1\":{\"745\":1}}],[\"解释与执行分离\",{\"1\":{\"525\":1}}],[\"解答均写在\",{\"1\":{\"228\":1}}],[\"解决远程依赖传递失效问题\",{\"1\":{\"1966\":1}}],[\"解决aar包发布到maven问题\",{\"0\":{\"1966\":1}}],[\"解决aar库问题\",{\"0\":{\"121\":1}}],[\"解决问题\",{\"1\":{\"1604\":1}}],[\"解决问题方式\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"解决通配符问题\",{\"1\":{\"1518\":1}}],[\"解决部分公用代码动态下沉到base\",{\"1\":{\"1494\":1}}],[\"解决这个问题\",{\"1\":{\"1491\":1}}],[\"解决了arouter加载组件是反射效率低下问题\",{\"1\":{\"1479\":1}}],[\"解决多层嵌套问题\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"解决多线程的并发访问\",{\"1\":{\"380\":1}}],[\"解决support库问题\",{\"1\":{\"1329\":1}}],[\"解决swich\",{\"1\":{\"513\":1}}],[\"解决眼前迫切问题\",{\"1\":{\"1268\":1}}],[\"解决未分配cpu时间\",{\"1\":{\"1137\":1}}],[\"解决内存分配并发问题\",{\"1\":{\"1116\":1}}],[\"解决mac\",{\"0\":{\"118\":1}}],[\"解决方法\",{\"1\":{\"85\":1,\"1927\":1,\"1936\":1}}],[\"解决方案是那两个函数include\",{\"1\":{\"1491\":1}}],[\"解决方案是从\",{\"1\":{\"230\":1}}],[\"解决方案和效果\",{\"1\":{\"744\":1}}],[\"解决方案绝对不能是o\",{\"1\":{\"228\":1}}],[\"解决方案\",{\"0\":{\"228\":1,\"604\":1,\"657\":1,\"746\":1},\"1\":{\"70\":1,\"94\":1,\"97\":1,\"106\":1,\"115\":1,\"644\":1,\"757\":2,\"787\":1,\"793\":1,\"796\":2,\"799\":2,\"805\":1,\"935\":1,\"1119\":1,\"1358\":1,\"1491\":1,\"1509\":1,\"1555\":1,\"1922\":1}}],[\"解决resolve\",{\"0\":{\"34\":1}}],[\"先按照网络上流行方法解决\",{\"1\":{\"1905\":1}}],[\"先按低优先级排序\",{\"1\":{\"287\":1}}],[\"先初始化systemserver对象\",{\"1\":{\"1867\":1}}],[\"先创建zygote进程\",{\"1\":{\"1858\":1}}],[\"先执行writetransactiondata\",{\"1\":{\"1756\":1}}],[\"先clean\",{\"1\":{\"1607\":1}}],[\"先方法内\",{\"1\":{\"1530\":1}}],[\"先用filter\",{\"1\":{\"1521\":1}}],[\"先从使用教程\",{\"1\":{\"1491\":1}}],[\"先mark上\",{\"1\":{\"1465\":1}}],[\"先出基本效果\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"先实现view与logic解耦\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"先写margin\",{\"1\":{\"1346\":1}}],[\"先申请tinypng账号\",{\"1\":{\"1317\":1}}],[\"先说效果显著的\",{\"1\":{\"1317\":1}}],[\"先分析真正问题\",{\"1\":{\"1253\":1}}],[\"先进行操作\",{\"1\":{\"1239\":1}}],[\"先行发生原则\",{\"1\":{\"1223\":1}}],[\"先把所有线程全部中断\",{\"1\":{\"1136\":1}}],[\"先把内存一分为二\",{\"1\":{\"1131\":1}}],[\"先把配置文件中的server注释掉\",{\"1\":{\"638\":1}}],[\"先读取命令行参数\",{\"1\":{\"1063\":1}}],[\"先载入java\",{\"1\":{\"1030\":1}}],[\"先加载class\",{\"1\":{\"1030\":1}}],[\"先加载\",{\"1\":{\"1030\":2}}],[\"先计数减少\",{\"1\":{\"923\":1}}],[\"先计算\",{\"1\":{\"349\":3}}],[\"先并行再串行\",{\"1\":{\"923\":1}}],[\"先释放读锁\",{\"1\":{\"887\":1}}],[\"先对锁进行获取请求一定是先被满足的\",{\"1\":{\"881\":1}}],[\"先见之明\",{\"1\":{\"772\":1}}],[\"先考虑如何求一个数的掩码\",{\"1\":{\"354\":1}}],[\"先找出是否已经存在键为\",{\"1\":{\"350\":1}}],[\"先定义好对应结构体\",{\"1\":{\"271\":1,\"1088\":1}}],[\"先调用父加载器的loadclass\",{\"1\":{\"197\":1,\"1175\":1}}],[\"先单独执行这句话\",{\"1\":{\"103\":1}}],[\"加依赖\",{\"1\":{\"1623\":1}}],[\"加上list页面\",{\"1\":{\"1395\":1,\"1678\":1}}],[\"加密\",{\"1\":{\"1352\":1,\"1660\":1}}],[\"加入到消息池\",{\"1\":{\"1847\":1,\"1850\":1}}],[\"加入消息\",{\"1\":{\"1546\":2,\"1826\":1}}],[\"加入一个配置头文件\",{\"1\":{\"1534\":1}}],[\"加入环境\",{\"1\":{\"1313\":1}}],[\"加入同步队列\",{\"1\":{\"878\":1}}],[\"加到对象上\",{\"1\":{\"1244\":1}}],[\"加载android\",{\"1\":{\"1867\":1}}],[\"加载网络图片\",{\"1\":{\"1712\":1}}],[\"加载资源\",{\"1\":{\"1613\":1}}],[\"加载模板\",{\"1\":{\"1598\":1}}],[\"加载数据\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"加载该类classloader被回收\",{\"1\":{\"1128\":1}}],[\"加载到内存\",{\"1\":{\"1061\":1}}],[\"加载基本类型\",{\"1\":{\"1030\":2}}],[\"加载基本数据类型\",{\"1\":{\"1030\":2}}],[\"加载\",{\"0\":{\"1170\":1},\"1\":{\"1015\":1,\"1169\":1,\"1239\":1}}],[\"加载java类\",{\"1\":{\"1015\":1}}],[\"加载java\",{\"1\":{\"1015\":1}}],[\"加载class类\",{\"1\":{\"1016\":1,\"1044\":1}}],[\"加载class\",{\"1\":{\"979\":1}}],[\"加载父加载器classloader\",{\"1\":{\"197\":1,\"1175\":1}}],[\"加班996方式\",{\"1\":{\"595\":1}}],[\"加大资源投入\",{\"1\":{\"586\":1}}],[\"加法\",{\"1\":{\"525\":1}}],[\"加糖\",{\"1\":{\"459\":3}}],[\"加锁失败\",{\"1\":{\"1248\":1}}],[\"加锁成功\",{\"1\":{\"1248\":1}}],[\"加锁解锁在一起\",{\"1\":{\"823\":1}}],[\"加锁\",{\"1\":{\"359\":2,\"1247\":1,\"1248\":1,\"1805\":1}}],[\"加了一个服务层\",{\"1\":{\"311\":1}}],[\"加速开发\",{\"1\":{\"305\":1}}],[\"加固完成加固成功\",{\"1\":{\"103\":1}}],[\"加固中\",{\"1\":{\"103\":8}}],[\"加固数据分析\",{\"1\":{\"103\":1}}],[\"加固过程中需要1~2分钟等待\",{\"1\":{\"103\":1}}],[\"加固时间长\",{\"1\":{\"103\":1}}],[\"是屏障消息特点\",{\"1\":{\"1848\":1}}],[\"是当前handler\",{\"1\":{\"1841\":1}}],[\"是当前接口是否mock的开关\",{\"1\":{\"1595\":1}}],[\"是创建一个新的binder线程\",{\"1\":{\"1777\":1}}],[\"是由binder\",{\"1\":{\"1776\":1}}],[\"是为了将appdeathrecipient死亡通知注册到binder上\",{\"1\":{\"1761\":1}}],[\"是为了使代码具有可重用性\",{\"1\":{\"389\":1}}],[\"是android进程间通信机制binder的守护进程\",{\"1\":{\"1744\":1}}],[\"是资源引用类型描述错误的是\",{\"1\":{\"1708\":1}}],[\"是资源引用类型\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"是声明式开发范式\",{\"1\":{\"1707\":1}}],[\"是可以重复\",{\"1\":{\"1707\":1}}],[\"是以\",{\"1\":{\"1707\":1}}],[\"是能够完成一个独立功能的组件\",{\"1\":{\"1707\":1}}],[\"是系统调度应用的最小单元\",{\"1\":{\"1707\":1}}],[\"是开发\",{\"1\":{\"1707\":1}}],[\"是使用不同的\",{\"1\":{\"1702\":3}}],[\"是jakewharton写的性能检测框架\",{\"1\":{\"1632\":1}}],[\"是时候开始改变了\",{\"1\":{\"1610\":1}}],[\"是时候总结一波组件化文章\",{\"1\":{\"1503\":1}}],[\"是编译期处理注解的工具\",{\"1\":{\"1604\":1}}],[\"是mock的所有接口的总开关\",{\"1\":{\"1595\":1}}],[\"是显示芯片内部\",{\"1\":{\"1540\":1}}],[\"是局部引用\",{\"1\":{\"1527\":1}}],[\"是这个插件由来的原因\",{\"1\":{\"1486\":1}}],[\"是完全透明\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"是完全不同的两码事\",{\"1\":{\"1268\":1}}],[\"是安全的\",{\"1\":{\"1232\":1}}],[\"是非原子操作的\",{\"1\":{\"1233\":1}}],[\"是非虚方法\",{\"1\":{\"1187\":1}}],[\"是非常好的入门读物\",{\"1\":{\"310\":1}}],[\"是压栈出栈的过程\",{\"1\":{\"1183\":1}}],[\"是用来控制同时访问特定资源的线程数量\",{\"1\":{\"907\":1}}],[\"是因为多线程会导致hashmap的entry链表\",{\"1\":{\"894\":1}}],[\"是什么\",{\"1\":{\"814\":1}}],[\"是不能移除\",{\"1\":{\"802\":1}}],[\"是比聚合关系还要强的关系\",{\"1\":{\"735\":1}}],[\"是强的关联关系\",{\"1\":{\"735\":1}}],[\"是强引用\",{\"1\":{\"385\":1}}],[\"是整体与部分的关系\",{\"1\":{\"735\":2}}],[\"是错的\",{\"1\":{\"629\":1}}],[\"是一对多\",{\"1\":{\"1546\":1}}],[\"是一个把大任务分割成若干个小任务\",{\"1\":{\"897\":1}}],[\"是一个线程的标识位\",{\"1\":{\"867\":1}}],[\"是一个链表\",{\"1\":{\"348\":1}}],[\"是一种趋同的设计方式\",{\"1\":{\"1702\":1}}],[\"是一种使用的关系\",{\"1\":{\"735\":1}}],[\"是一种拥有的关系\",{\"1\":{\"735\":1}}],[\"是一种类与接口的关系\",{\"1\":{\"735\":1}}],[\"是一种继承关系\",{\"1\":{\"735\":1}}],[\"是一套被反复使用\",{\"1\":{\"389\":1}}],[\"是存放在栈上咯\",{\"1\":{\"383\":1}}],[\"是每一个线程所单独持有的\",{\"1\":{\"379\":1}}],[\"是大于原始数字的最小的\",{\"1\":{\"354\":1}}],[\"是\",{\"1\":{\"339\":1,\"751\":1,\"1109\":4,\"1326\":1,\"1494\":5,\"1530\":1,\"1960\":1}}],[\"是同步的\",{\"1\":{\"339\":1}}],[\"是否加入\",{\"1\":{\"1534\":1}}],[\"是否使用自己的\",{\"1\":{\"1534\":1}}],[\"是否在某范围内\",{\"1\":{\"1518\":1}}],[\"是否选用\",{\"1\":{\"1494\":1}}],[\"是否每次都执行\",{\"1\":{\"1491\":1}}],[\"是否为主app\",{\"1\":{\"1476\":2}}],[\"是否显示布局\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"是否可以访问\",{\"1\":{\"1109\":1}}],[\"是否处于占用状态\",{\"1\":{\"876\":1}}],[\"是否仍旧保持不错\",{\"1\":{\"796\":1}}],[\"是否允许证书\",{\"1\":{\"650\":1}}],[\"是否达成\",{\"1\":{\"586\":1}}],[\"是否有下一个元素\",{\"1\":{\"543\":1}}],[\"是否登录\",{\"1\":{\"501\":1}}],[\"是否改变\",{\"1\":{\"335\":1}}],[\"是否由同一个类加载器实例加载\",{\"1\":{\"196\":1,\"1177\":1}}],[\"是基于数组实现的\",{\"1\":{\"331\":1}}],[\"是最容易扩展的架构\",{\"1\":{\"314\":1}}],[\"是最常见的软件架构\",{\"1\":{\"311\":1}}],[\"是服务导向架构\",{\"1\":{\"314\":1}}],[\"是状态发生变化时\",{\"1\":{\"312\":1}}],[\"是继承关系替代方案\",{\"1\":{\"261\":1}}],[\"是冯友兰在中国哲学简史给出的定义\",{\"1\":{\"230\":1}}],[\"是自动排好序的\",{\"1\":{\"216\":1}}],[\"是c++语言实现\",{\"1\":{\"194\":1}}],[\"存档\",{\"1\":{\"1966\":1}}],[\"存常量池索引\",{\"1\":{\"1110\":1}}],[\"存取静态变量\",{\"1\":{\"983\":1}}],[\"存取实例变量\",{\"1\":{\"983\":1}}],[\"存放页面\",{\"1\":{\"1707\":1}}],[\"存放常量信息\",{\"1\":{\"1115\":1}}],[\"存放对象实例\",{\"1\":{\"1115\":1}}],[\"存放本地方法栈帧\",{\"1\":{\"1115\":1}}],[\"存放虚拟机栈帧\",{\"1\":{\"1115\":1}}],[\"存放静态变量\",{\"1\":{\"1109\":1}}],[\"存放类变量占据的空间大小\",{\"1\":{\"1109\":1}}],[\"存放实例变量占据的空间大小\",{\"1\":{\"1109\":1}}],[\"存放putfield\",{\"1\":{\"1008\":1}}],[\"存放aload\",{\"1\":{\"1008\":1}}],[\"存放key\",{\"1\":{\"381\":1}}],[\"存放满了时\",{\"1\":{\"207\":1}}],[\"存入数组c的第i项\",{\"1\":{\"286\":1}}],[\"存在法律风险\",{\"1\":{\"1446\":1}}],[\"存在一个问题\",{\"1\":{\"1386\":1,\"1669\":1}}],[\"存在aba问题\",{\"1\":{\"1239\":1}}],[\"存在读锁或者当前获取线程不是已经获取写锁的线程\",{\"1\":{\"886\":1}}],[\"存在偷懒嫌疑\",{\"1\":{\"802\":1}}],[\"存在可能\",{\"1\":{\"598\":1}}],[\"存在问题\",{\"1\":{\"204\":1}}],[\"存在非常大隐患\",{\"1\":{\"195\":1,\"1176\":1}}],[\"存储服务\",{\"1\":{\"1702\":1}}],[\"存储的key值\",{\"1\":{\"1625\":1}}],[\"存储对象自身运行时数据\",{\"1\":{\"1117\":1}}],[\"存储类信息\",{\"1\":{\"1108\":1}}],[\"存储结构\",{\"0\":{\"348\":1,\"358\":1,\"362\":1,\"367\":1}}],[\"存储链表节点信息\",{\"1\":{\"345\":1}}],[\"存储着键值对\",{\"1\":{\"320\":1,\"348\":1}}],[\"存储着对象的集合\",{\"1\":{\"320\":1}}],[\"存储来自共享数据+私有数据\",{\"1\":{\"271\":1,\"1086\":1}}],[\"存储\",{\"1\":{\"106\":1,\"1220\":1,\"1239\":1,\"1628\":1,\"1699\":1}}],[\"就存在优化空间\",{\"1\":{\"1537\":1}}],[\"就可以给控件赋值\",{\"1\":{\"1598\":1}}],[\"就可以实现不修改原有的网络代码实现效果\",{\"1\":{\"1589\":1}}],[\"就可以接入\",{\"1\":{\"1500\":1}}],[\"就可以动态引入子组件\",{\"1\":{\"1476\":1}}],[\"就可以设置设置项目中组件lib与app形式切换\",{\"1\":{\"1476\":1}}],[\"就可以任务用户进程\",{\"1\":{\"1226\":1}}],[\"就\",{\"1\":{\"1361\":1}}],[\"就不允许输入\",{\"1\":{\"1349\":1}}],[\"就绪状态\",{\"1\":{\"1230\":1}}],[\"就分裂成两个子任务计算\",{\"1\":{\"897\":1}}],[\"就一定需要\",{\"1\":{\"886\":1}}],[\"就一个类而言\",{\"1\":{\"751\":1,\"1253\":1}}],[\"就像一门艺术\",{\"1\":{\"787\":1}}],[\"就判断下⼀个位置\",{\"1\":{\"382\":1}}],[\"就初始化⼀个entry对象放在位置i上\",{\"1\":{\"382\":1}}],[\"就需要对每个\",{\"1\":{\"359\":1}}],[\"就必须进行扩容操作\",{\"1\":{\"352\":1}}],[\"就新启动处理单元\",{\"1\":{\"314\":1}}],[\"就新建处理单元\",{\"1\":{\"314\":1}}],[\"就关闭处理单元\",{\"1\":{\"314\":2}}],[\"就是向servicemanager进程查询指定服务\",{\"1\":{\"1799\":1}}],[\"就是给上层提供服务的\",{\"1\":{\"1587\":1}}],[\"就是为了更深入做图像识别\",{\"1\":{\"1530\":1}}],[\"就是通过内核空间共享内存来实现的\",{\"1\":{\"1743\":1}}],[\"就是通过\",{\"1\":{\"1540\":1}}],[\"就是通过事件进行通信的软件架构\",{\"1\":{\"312\":1}}],[\"就是通常所指的线程\",{\"1\":{\"1225\":1}}],[\"就是一对类以及类中方法和字段的集合\",{\"1\":{\"793\":1}}],[\"就是软件的基本结构\",{\"1\":{\"310\":1}}],[\"就交换值\",{\"1\":{\"283\":1}}],[\"就交换它们两个\",{\"1\":{\"278\":1}}],[\"就将存活对象直\",{\"1\":{\"207\":1}}],[\"就将存货的对象复制到另外一块上面\",{\"1\":{\"206\":1}}],[\"就采用标记\",{\"1\":{\"207\":1}}],[\"就没有必要让子类再加载一次\",{\"1\":{\"195\":1,\"1176\":1}}],[\"就会获得当前元素\",{\"1\":{\"1604\":1}}],[\"就会产生死循环获取entry\",{\"1\":{\"894\":1}}],[\"就会消失\",{\"1\":{\"793\":1}}],[\"就会将该threadlocal对象添加到该map中\",{\"1\":{\"381\":1}}],[\"就会将最近最久未使用的数据移除\",{\"1\":{\"365\":1}}],[\"就会被放到老年代中\",{\"1\":{\"207\":1}}],[\"就会被回收\",{\"1\":{\"154\":1}}],[\"就会晋升到老年代\",{\"1\":{\"184\":1}}],[\"负载减少\",{\"1\":{\"314\":1}}],[\"负载均衡\",{\"1\":{\"12\":1,\"314\":1,\"731\":1}}],[\"负责计算1+2+3+4\",{\"1\":{\"897\":1}}],[\"负责处理单元的启动和关闭\",{\"1\":{\"314\":1}}],[\"负责通信\",{\"1\":{\"314\":1}}],[\"负责不同的层\",{\"1\":{\"311\":1}}],[\"负责视觉和用户互动\",{\"1\":{\"311\":1}}],[\"负责加载用户类路径上的指定类库\",{\"1\":{\"194\":1}}],[\"负责加载<java\",{\"1\":{\"194\":1}}],[\"负责加载java\",{\"1\":{\"194\":1}}],[\"双击666\",{\"1\":{\"1491\":1}}],[\"双击\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"双击去重\",{\"0\":{\"1374\":1}}],[\"双击下载的webstorm安装包\",{\"1\":{\"24\":1}}],[\"双亲委派模型工作过程\",{\"1\":{\"1175\":1}}],[\"双亲委派模型\",{\"0\":{\"1175\":1}}],[\"双亲委托工作流程\",{\"1\":{\"194\":1}}],[\"双亲委托模型\",{\"0\":{\"193\":1,\"194\":1},\"1\":{\"194\":1}}],[\"双方各自持有对方类型的成员变量\",{\"1\":{\"738\":1}}],[\"双向通信\",{\"1\":{\"1708\":1}}],[\"双向关联\",{\"1\":{\"738\":1}}],[\"双向关联和自关联\",{\"1\":{\"738\":1}}],[\"双向的关联可以有两个箭头或者没有箭头\",{\"1\":{\"735\":1}}],[\"双指针\",{\"1\":{\"298\":1}}],[\"虚方法表存放方法实际地址\",{\"1\":{\"1188\":1}}],[\"虚拟分派\",{\"1\":{\"1188\":1}}],[\"虚拟中间件又包含四个组件\",{\"1\":{\"314\":1}}],[\"虚拟中间件\",{\"1\":{\"314\":1}}],[\"虚拟机创建\",{\"1\":{\"1861\":1}}],[\"虚拟机内部方法\",{\"1\":{\"1530\":1}}],[\"虚拟机所运行的环境\",{\"1\":{\"1530\":1}}],[\"虚拟机决定\",{\"1\":{\"1228\":1}}],[\"虚拟机使用索引定位方式使用slot\",{\"1\":{\"1182\":1}}],[\"虚拟机一部分\",{\"1\":{\"1175\":1}}],[\"虚拟机类加载机制\",{\"0\":{\"1168\":1}}],[\"虚拟机栈和本地方法栈溢出\",{\"1\":{\"1119\":1}}],[\"虚拟机栈中引用对象\",{\"1\":{\"200\":1,\"1125\":1}}],[\"虚拟机\",{\"0\":{\"549\":1}}],[\"虚拟机启动创建\",{\"1\":{\"271\":1,\"1086\":1}}],[\"虚拟机发起一次minorgc\",{\"1\":{\"184\":1}}],[\"虚引用示例\",{\"1\":{\"154\":1}}],[\"虚引用\",{\"1\":{\"154\":1,\"1126\":1}}],[\"因突然原因\",{\"1\":{\"1537\":1}}],[\"因没有实现return指令\",{\"1\":{\"1101\":1}}],[\"因操作系统差异\",{\"1\":{\"942\":1}}],[\"因而减少了客户对于子系统的耦合\",{\"1\":{\"453\":1}}],[\"因\",{\"1\":{\"207\":1}}],[\"因此无需等待可以直接查询pending\",{\"1\":{\"1846\":1}}],[\"因此添加testoption\",{\"1\":{\"1069\":1}}],[\"因此我们说driver类依赖于car类\",{\"1\":{\"738\":1}}],[\"因此保存在map中\",{\"1\":{\"381\":1}}],[\"因此保存元素的数组不一定都会被使用\",{\"1\":{\"334\":1}}],[\"因此他们使用的都是自己从内存中拷贝过来的变量的副本\",{\"1\":{\"379\":1}}],[\"因此具有和\",{\"1\":{\"362\":1}}],[\"因此尝试次数为\",{\"1\":{\"359\":1}}],[\"因此这一步是很费时的\",{\"1\":{\"352\":1}}],[\"因此需要保证\",{\"1\":{\"352\":1}}],[\"因此查找的复杂度为\",{\"1\":{\"352\":1}}],[\"因此在进行这种计算时用位运算的话能带来更高的性能\",{\"1\":{\"351\":1}}],[\"因此很适合读多写少的应用场景\",{\"1\":{\"343\":1}}],[\"因此开销就比\",{\"1\":{\"339\":1}}],[\"因此最好在创建\",{\"1\":{\"332\":1}}],[\"因此应该尽可能减少full\",{\"1\":{\"207\":1}}],[\"因此成本更高\",{\"1\":{\"205\":1}}],[\"因此会出现丢包\",{\"1\":{\"181\":1}}],[\"因为获得注解的同时\",{\"1\":{\"1604\":1}}],[\"因为java\",{\"1\":{\"1487\":1}}],[\"因为listview列表在app中是高频使用的存在\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"因为你还不知道何时应该使用它们\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"因为系统分配每个进程内存是有限制的\",{\"1\":{\"1119\":1}}],[\"因为增加上线问调度和资源调度时间\",{\"1\":{\"824\":1}}],[\"因为每一次从\",{\"1\":{\"822\":1}}],[\"因为每一个线程都拥有自己的变量副本\",{\"1\":{\"380\":1}}],[\"因为多继承可以减少对内存的占用\",{\"1\":{\"802\":1}}],[\"因为升级可能会出现位置的问题\",{\"1\":{\"763\":1}}],[\"因为对方无类似经验\",{\"1\":{\"757\":1}}],[\"因为项目紧急\",{\"1\":{\"586\":1}}],[\"因为threadlocal实例实际上也是被其创建的类持有\",{\"1\":{\"383\":1}}],[\"因为它主要被用作程序中后台调度以及支持性工作\",{\"1\":{\"868\":1}}],[\"因为它有效避免无关代码部分之间类似goto的跳转\",{\"1\":{\"805\":1}}],[\"因为它可以自动地将传入的容量转换为\",{\"1\":{\"354\":1}}],[\"因为它的方向其实是依赖其父activity的\",{\"1\":{\"70\":1}}],[\"因为部分写操作的数据还未同步到读数组中\",{\"1\":{\"343\":1}}],[\"因为同步操作完全可以由程序员自己来控制\",{\"1\":{\"339\":1}}],[\"因为\",{\"1\":{\"325\":1,\"331\":1}}],[\"因为涉及到插件与内核的通信\",{\"1\":{\"313\":1}}],[\"因为事件通过会涉及多个处理器\",{\"1\":{\"312\":1}}],[\"因为事件的异步本质\",{\"1\":{\"312\":1}}],[\"因为地址连续\",{\"1\":{\"214\":1}}],[\"因为新生代的\",{\"1\":{\"207\":1}}],[\"因为可以避免重复加载\",{\"1\":{\"195\":1,\"1176\":1}}],[\"因为透明\",{\"1\":{\"70\":1}}],[\"锁状态为\",{\"1\":{\"1248\":1}}],[\"锁状态标志\",{\"1\":{\"1117\":1}}],[\"锁对象被强占\",{\"1\":{\"1248\":1}}],[\"锁升级\",{\"0\":{\"1245\":1}}],[\"锁升级流程\",{\"0\":{\"848\":1,\"1250\":1},\"1\":{\"1250\":1}}],[\"锁粗化\",{\"0\":{\"1244\":1}}],[\"锁消除\",{\"0\":{\"1243\":1}}],[\"锁优化\",{\"0\":{\"1241\":1}}],[\"锁绑定多个条件\",{\"1\":{\"1238\":1}}],[\"锁定\",{\"1\":{\"1220\":1}}],[\"锁信息\",{\"1\":{\"1116\":1}}],[\"锁降级完成\",{\"1\":{\"887\":1}}],[\"锁降级\",{\"0\":{\"887\":1},\"1\":{\"885\":1,\"886\":1,\"932\":1}}],[\"锁最终释放\",{\"1\":{\"882\":1}}],[\"锁获取与释放的可操作性\",{\"1\":{\"874\":1}}],[\"锁可操作性\",{\"0\":{\"874\":1}}],[\"锁可以升级\",{\"1\":{\"845\":1}}],[\"锁内存含义\",{\"0\":{\"862\":1}}],[\"锁就会膨胀成重量级锁\",{\"1\":{\"847\":1}}],[\"锁不仅不存在多线程竞争\",{\"1\":{\"846\":1}}],[\"锁的优缺点比较\",{\"0\":{\"849\":1},\"1\":{\"849\":1}}],[\"锁的级别\",{\"1\":{\"845\":1}}],[\"锁的升级与对比\",{\"0\":{\"845\":1}}],[\"锁的三种用法\",{\"1\":{\"169\":1}}],[\"锁是synchonized括号里配置的对象\",{\"1\":{\"843\":1}}],[\"锁是synchronized配置对象\",{\"1\":{\"169\":4,\"843\":1}}],[\"锁是synchrionized括号里配置对象\",{\"1\":{\"169\":1}}],[\"锁是当前类class\",{\"1\":{\"843\":1}}],[\"锁是当前类class对象\",{\"1\":{\"169\":2}}],[\"锁是当前类的class对象\",{\"1\":{\"843\":1}}],[\"锁是当前实例对象\",{\"1\":{\"169\":2,\"843\":2}}],[\"工程模板\",{\"1\":{\"1712\":1}}],[\"工程模版\",{\"1\":{\"1708\":1}}],[\"工程级一多\",{\"1\":{\"1709\":1}}],[\"工程名poet\",{\"1\":{\"1604\":1}}],[\"工程名\",{\"1\":{\"1534\":1}}],[\"工程师\",{\"1\":{\"531\":1}}],[\"工作队列\",{\"1\":{\"917\":1}}],[\"工作内存\",{\"1\":{\"167\":1,\"1220\":4}}],[\"工具友好\",{\"1\":{\"1512\":1}}],[\"工具类\",{\"0\":{\"1311\":1}}],[\"工具类框架\",{\"1\":{\"12\":1,\"731\":1}}],[\"工具\",{\"0\":{\"578\":1,\"1897\":1,\"2004\":1},\"2\":{\"1971\":1,\"1975\":1,\"1979\":1}}],[\"工厂\",{\"1\":{\"415\":1,\"416\":1,\"435\":1}}],[\"工厂化\",{\"1\":{\"305\":2}}],[\"工厂方法优于构造函数\",{\"1\":{\"799\":1}}],[\"工厂方法\",{\"0\":{\"260\":1,\"412\":1},\"1\":{\"260\":1,\"413\":1,\"415\":1,\"416\":1}}],[\"工厂方法模式\",{\"1\":{\"256\":1,\"257\":1,\"393\":1}}],[\"返回的是bbinder对象的真实子类\",{\"1\":{\"1799\":1}}],[\"返回的是bpbinder对象\",{\"1\":{\"1799\":1}}],[\"返回的是servicemanagerproxy对象\",{\"1\":{\"1751\":1}}],[\"返回null\",{\"1\":{\"1756\":1,\"1846\":1}}],[\"返回一个\",{\"1\":{\"1713\":1}}],[\"返回一个condition\",{\"1\":{\"876\":1,\"880\":1}}],[\"返回数组\",{\"1\":{\"1527\":1}}],[\"返回字符串\",{\"1\":{\"1527\":1}}],[\"返回符合第一个\",{\"1\":{\"1521\":1}}],[\"返回常量数据\",{\"1\":{\"1283\":1}}],[\"返回空方法\",{\"1\":{\"1022\":1}}],[\"返回指令\",{\"1\":{\"993\":1}}],[\"返回值给调用者\",{\"1\":{\"1185\":1}}],[\"返回值\",{\"1\":{\"1064\":1}}],[\"返回值类型为int\",{\"1\":{\"738\":1}}],[\"返回值类型为string\",{\"1\":{\"738\":1}}],[\"返回值类型为void\",{\"1\":{\"738\":1}}],[\"返回值和形参都不能改变\",{\"1\":{\"159\":1}}],[\"返回类型\",{\"1\":{\"738\":1}}],[\"返回类型可以相同也可以不同\",{\"1\":{\"159\":1}}],[\"返回当前元素\",{\"1\":{\"543\":1}}],[\"返回false\",{\"1\":{\"501\":1}}],[\"返回\",{\"1\":{\"285\":1,\"1518\":1,\"1711\":1}}],[\"同样我们可以在这个生成实体类的基础上\",{\"1\":{\"1592\":1}}],[\"同样\",{\"1\":{\"1587\":1}}],[\"同理\",{\"1\":{\"1487\":1}}],[\"同包也可访问\",{\"1\":{\"1109\":1}}],[\"同一应用或进程中每个文件仅存在一个\",{\"1\":{\"1711\":1}}],[\"同一时刻只能有一个线程获取到锁\",{\"1\":{\"876\":1}}],[\"同一个bpbinder可以注册多个死亡回调\",{\"1\":{\"1761\":1}}],[\"同一个链表中存放哈希值和散列桶取模运算结果相同的\",{\"1\":{\"348\":1}}],[\"同一个行为具有多个不同表现形式或形态的能力\",{\"1\":{\"158\":1}}],[\"同源的3种行为\",{\"1\":{\"649\":1}}],[\"同源策略\",{\"0\":{\"649\":1}}],[\"同步屏障\",{\"0\":{\"1848\":1}}],[\"同步屏障+异步消息nativewake\",{\"1\":{\"1847\":1}}],[\"同步屏障cyclicbarrier\",{\"0\":{\"905\":1}}],[\"同步组件\",{\"1\":{\"1702\":1}}],[\"同步式线程调度\",{\"1\":{\"1229\":1}}],[\"同步消除\",{\"1\":{\"1212\":1}}],[\"同步队列\",{\"1\":{\"877\":1}}],[\"同步状态失败时\",{\"1\":{\"878\":1}}],[\"同步状态\",{\"1\":{\"876\":1}}],[\"同步器会将当前线程以及等待状态等信息构造成为一个节点\",{\"1\":{\"878\":1}}],[\"同步器提供的模板方法\",{\"1\":{\"876\":1}}],[\"同步器是实现锁的关键\",{\"1\":{\"876\":1}}],[\"同步块时不需要进行cas操作来加锁和解锁\",{\"1\":{\"846\":1}}],[\"同步与死锁\",{\"1\":{\"763\":1}}],[\"同步\",{\"0\":{\"337\":1}}],[\"同时运行\",{\"1\":{\"1702\":1}}],[\"同时兼容适配retrofit2\",{\"1\":{\"1595\":1}}],[\"同时会阻塞当前线程\",{\"1\":{\"878\":1}}],[\"同时相信两种互相矛盾的观点\",{\"1\":{\"772\":1}}],[\"同时使用swagger3\",{\"1\":{\"672\":1}}],[\"同时也让从云端一体的视角重新审视研发效率\",{\"1\":{\"305\":1}}],[\"同时\",{\"1\":{\"305\":1,\"1530\":1}}],[\"同时支持动态多数据源代码生成\",{\"1\":{\"12\":1,\"731\":1}}],[\"封装是基于整体性理解\",{\"1\":{\"1540\":1}}],[\"封装工具\",{\"1\":{\"1358\":1}}],[\"封装就是为了简写\",{\"1\":{\"1311\":1}}],[\"封装固定调用逻辑\",{\"1\":{\"1286\":1}}],[\"封装集合\",{\"1\":{\"1283\":1}}],[\"封装字段\",{\"1\":{\"1283\":1}}],[\"封装复杂\",{\"1\":{\"787\":1}}],[\"封装第三方api\",{\"1\":{\"760\":1}}],[\"封装变化\",{\"1\":{\"752\":1}}],[\"封装不变部分\",{\"1\":{\"501\":1}}],[\"封装一个复杂对象过程\",{\"1\":{\"257\":1,\"393\":1,\"421\":1}}],[\"封装\",{\"0\":{\"158\":1},\"1\":{\"158\":1}}],[\"封装的\",{\"1\":{\"12\":1,\"731\":1}}],[\"创建博客目录是hexo\",{\"1\":{\"1960\":1}}],[\"创建仓库\",{\"1\":{\"1959\":1}}],[\"创建github仓库\",{\"0\":{\"1959\":1}}],[\"创建分支基于指定tag\",{\"1\":{\"1949\":1}}],[\"创建特性分支\",{\"1\":{\"1947\":1}}],[\"创建主线程looper\",{\"1\":{\"1869\":1}}],[\"创建其他服务\",{\"1\":{\"1867\":1}}],[\"创建核心服务\",{\"1\":{\"1867\":1}}],[\"创建引导服务\",{\"1\":{\"1867\":1}}],[\"创建looper消息循环\",{\"1\":{\"1867\":1}}],[\"创建servicemanager\",{\"1\":{\"1867\":1}}],[\"创建system\",{\"1\":{\"1867\":1}}],[\"创建socket\",{\"1\":{\"1858\":1}}],[\"创建系统服务管理\",{\"1\":{\"1867\":1}}],[\"创建pathclassloader类加载器\",{\"1\":{\"1866\":1}}],[\"创建虚拟机\",{\"1\":{\"1861\":1}}],[\"创建名为zygote\",{\"1\":{\"1858\":1}}],[\"创建名为binder的工作队列\",{\"1\":{\"1772\":1}}],[\"创建zygote进程和system\",{\"1\":{\"1857\":1}}],[\"创建maven\",{\"1\":{\"1966\":1}}],[\"创建messagequeue\",{\"0\":{\"1845\":1}}],[\"创建myserviceproxy对象\",{\"1\":{\"1731\":1}}],[\"创建native层的looper\",{\"1\":{\"1829\":1}}],[\"创建消息队列和looper\",{\"0\":{\"1829\":1}}],[\"创建大小为1m\",{\"1\":{\"1804\":1}}],[\"创建死亡通知对象\",{\"1\":{\"1799\":1}}],[\"创建binder线程\",{\"1\":{\"1778\":1}}],[\"创建新的epoll实例\",{\"1\":{\"1829\":1}}],[\"创建新的binder线程\",{\"1\":{\"1778\":1}}],[\"创建新对象\",{\"1\":{\"154\":1}}],[\"创建事务\",{\"1\":{\"1770\":1}}],[\"创建javadeathrecipient对象\",{\"1\":{\"1762\":1}}],[\"创建ibinder\",{\"1\":{\"1762\":1}}],[\"创建activitythread\",{\"1\":{\"1867\":1}}],[\"创建app进程\",{\"1\":{\"1863\":2}}],[\"创建amp对象\",{\"1\":{\"1756\":1}}],[\"创建args数组\",{\"1\":{\"1016\":1,\"1044\":1}}],[\"创建应用时\",{\"1\":{\"1708\":1,\"1709\":1,\"1712\":1}}],[\"创建的主线程不算在最大线程上限\",{\"1\":{\"1779\":1}}],[\"创建的\",{\"1\":{\"1707\":1}}],[\"创建对应函数的触发器才可以在端侧中调用\",{\"1\":{\"1707\":1}}],[\"创建对象需要关键指令\",{\"1\":{\"983\":1}}],[\"创建对象\",{\"1\":{\"441\":1,\"984\":1,\"1518\":1}}],[\"创建target类\",{\"1\":{\"1604\":1}}],[\"创建释放方法\",{\"1\":{\"1604\":1}}],[\"创建构造方法\",{\"1\":{\"1604\":1}}],[\"创建文件\",{\"1\":{\"1601\":1}}],[\"创建文件夹\",{\"1\":{\"1417\":1,\"1944\":1}}],[\"创建opengl必须在onsurfacecreated\",{\"1\":{\"1540\":1}}],[\"创建opengl程序和着色器链接\",{\"1\":{\"1540\":1}}],[\"创建cmakelists\",{\"1\":{\"1534\":1}}],[\"创建class实例总方法\",{\"1\":{\"1109\":1}}],[\"创建class\",{\"0\":{\"1107\":1},\"1\":{\"1108\":1}}],[\"创建指定数据的局部引用空间\",{\"1\":{\"1530\":1}}],[\"创建失败\",{\"1\":{\"1530\":1}}],[\"创建多线程\",{\"1\":{\"1527\":1}}],[\"创建单例\",{\"1\":{\"1518\":1}}],[\"创建实体类\",{\"1\":{\"1518\":1}}],[\"创建存储照片的文件\",{\"1\":{\"1417\":1}}],[\"创建项目\",{\"1\":{\"1413\":1}}],[\"创建需要消耗内核资源\",{\"1\":{\"1225\":1}}],[\"创建运行时常量池\",{\"1\":{\"1110\":1}}],[\"创建\",{\"1\":{\"1109\":3,\"1305\":1,\"1540\":1}}],[\"创建解析器\",{\"1\":{\"1063\":1}}],[\"创建栈帧\",{\"1\":{\"994\":1,\"1044\":1}}],[\"创建工作者\",{\"1\":{\"950\":1}}],[\"创建线程过多导致内存溢出\",{\"1\":{\"1119\":1}}],[\"创建线程\",{\"1\":{\"994\":1,\"1527\":1}}],[\"创建线程池实例工具类\",{\"1\":{\"938\":1}}],[\"创建线程时创建\",{\"1\":{\"271\":1,\"1086\":1}}],[\"创建一个指定数量内嵌空间\",{\"1\":{\"1530\":1}}],[\"创建一个类加载器\",{\"1\":{\"978\":1,\"1030\":1}}],[\"创建一个线程\",{\"1\":{\"950\":1}}],[\"创建一个入队节点\",{\"1\":{\"895\":1}}],[\"创建一个threadlocalmap对象\",{\"1\":{\"381\":1}}],[\"创建一个temp数组\",{\"1\":{\"285\":1}}],[\"创建型\",{\"0\":{\"401\":1,\"409\":1,\"412\":1,\"420\":1,\"426\":1,\"432\":1}}],[\"创建型设计模式\",{\"0\":{\"393\":1},\"1\":{\"256\":1,\"257\":2,\"390\":1}}],[\"创建出若干个桶\",{\"1\":{\"285\":1}}],[\"创建和销毁时机\",{\"1\":{\"271\":1,\"1086\":1}}],[\"创建相关依赖对象家族\",{\"1\":{\"257\":1,\"393\":1,\"427\":1}}],[\"创建内部类和静态内部类\",{\"0\":{\"160\":1}}],[\"创建阶段\",{\"1\":{\"144\":1,\"145\":1}}],[\"常识性原因影响开发者\",{\"1\":{\"1268\":1}}],[\"常量需要下沉到基础库\",{\"1\":{\"1482\":1}}],[\"常量\",{\"1\":{\"1283\":1}}],[\"常量传播\",{\"1\":{\"1210\":2}}],[\"常量项\",{\"1\":{\"1110\":1}}],[\"常量池内的符号替换成直接引用过程\",{\"1\":{\"1173\":1}}],[\"常量池转化为运行时常量池\",{\"1\":{\"1108\":1}}],[\"常量池\",{\"1\":{\"1076\":1,\"1115\":1}}],[\"常量池常量推到操作数栈顶\",{\"1\":{\"983\":1}}],[\"常用结构体\",{\"0\":{\"1831\":1}}],[\"常用top\",{\"1\":{\"1567\":1}}],[\"常用方法\",{\"1\":{\"1534\":1}}],[\"常用概念\",{\"1\":{\"1530\":1}}],[\"常用重构手法\",{\"1\":{\"1286\":1}}],[\"常用数据结构原理缺失\",{\"1\":{\"227\":1}}],[\"常用知识点遗漏\",{\"1\":{\"227\":1}}],[\"常用工具\",{\"0\":{\"1895\":1,\"1982\":1},\"1\":{\"12\":1,\"731\":1},\"2\":{\"17\":1,\"20\":1}}],[\"常见三个点\",{\"1\":{\"1552\":1}}],[\"常见的有以下几种关系\",{\"1\":{\"735\":1}}],[\"常见于企业内部\",{\"1\":{\"314\":1}}],[\"常见坏味道要点\",{\"1\":{\"265\":1}}],[\"常见容器\",{\"0\":{\"211\":1}}],[\"常见\",{\"1\":{\"154\":1}}],[\"也增加易用性\",{\"1\":{\"1540\":1}}],[\"也推荐这篇文章\",{\"1\":{\"1483\":1}}],[\"也避免一些不易用的缺点\",{\"1\":{\"1483\":1}}],[\"也没有关系\",{\"1\":{\"1417\":1}}],[\"也没有扩容规则\",{\"1\":{\"215\":1}}],[\"也要有长期利益\",{\"1\":{\"1268\":1}}],[\"也要有单元测试类\",{\"1\":{\"1069\":1}}],[\"也不建议写属性字段原则就是清晰\",{\"1\":{\"1518\":1}}],[\"也不用考虑与布局无关的逻辑\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"也不少\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"也不会影响程序的执行性能\",{\"1\":{\"379\":1}}],[\"也不会被回收\",{\"1\":{\"154\":1}}],[\"也有可能是gc造成\",{\"1\":{\"833\":1}}],[\"也是终点\",{\"1\":{\"790\":1}}],[\"也是事实上的标准架构\",{\"1\":{\"311\":1}}],[\"也会阻止它所引用的对象被回收\",{\"1\":{\"1530\":1}}],[\"也会被清理掉\",{\"1\":{\"385\":1}}],[\"也会根据threadlocal对象的hash值\",{\"1\":{\"382\":1}}],[\"也就成为一个好的api设计者\",{\"1\":{\"781\":1}}],[\"也就无法确定该键值对的桶下标\",{\"1\":{\"350\":1}}],[\"也就是意味着binder主线程名为binder\",{\"1\":{\"1776\":1}}],[\"也就是需要等待服务端的返回结果\",{\"1\":{\"1756\":1}}],[\"也就是自己的threadlocalmap\",{\"1\":{\"381\":1}}],[\"也就是链表首部节点\",{\"1\":{\"364\":1}}],[\"也就是新的键值对插在链表的头部\",{\"1\":{\"350\":1}}],[\"也就是新生代\",{\"1\":{\"207\":1}}],[\"也就是策略替换\",{\"1\":{\"263\":1}}],[\"也就是对象不可达\",{\"1\":{\"200\":1}}],[\"也就是说指定为\",{\"1\":{\"363\":1}}],[\"也就是说默认创建\",{\"1\":{\"358\":1}}],[\"也就是说默认情况下\",{\"1\":{\"338\":1}}],[\"也就是说使用\",{\"1\":{\"322\":1}}],[\"也就是说\",{\"1\":{\"181\":1,\"352\":1,\"1326\":1,\"1540\":1}}],[\"也未实现目标\",{\"1\":{\"230\":1}}],[\"也执着要证明自己\",{\"1\":{\"230\":1}}],[\"也暴露很多问题\",{\"1\":{\"227\":1}}],[\"也叫\",{\"1\":{\"207\":1}}],[\"也叫做\",{\"1\":{\"207\":1}}],[\"也无法通过虚引用来取得对象实例\",{\"1\":{\"154\":1}}],[\"也可以沿垂直方向排列\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"也可以动态化加载\",{\"1\":{\"1494\":1}}],[\"也可以叫同步点\",{\"1\":{\"905\":1}}],[\"也可以是单向的\",{\"1\":{\"735\":1}}],[\"也可以使用\",{\"1\":{\"340\":1}}],[\"也可以使用以下方式调用\",{\"1\":{\"328\":1}}],[\"也可以通过构造函数设置增长的容量\",{\"1\":{\"339\":1}}],[\"也可能是图片压缩时产生的问题\",{\"1\":{\"76\":1}}],[\"也可通过前端页面添加数据源支持spel表达式从请求头参数等条件切换数据源\",{\"1\":{\"12\":1,\"731\":1}}],[\"即flags\",{\"1\":{\"1846\":1}}],[\"即将处于idle状态\",{\"1\":{\"1828\":1}}],[\"即当前处于binder\",{\"1\":{\"1780\":1}}],[\"即ready\",{\"1\":{\"1780\":1}}],[\"即requested\",{\"1\":{\"1780\":1}}],[\"即ref所在进程的todo队列\",{\"1\":{\"1761\":1}}],[\"即reference不会改变\",{\"1\":{\"1118\":1}}],[\"即收到命令是bc\",{\"1\":{\"1780\":1}}],[\"即bpbinder对象\",{\"1\":{\"1762\":1}}],[\"即静态库\",{\"1\":{\"1534\":1}}],[\"即c\",{\"1\":{\"1530\":1}}],[\"即跳转地址\",{\"1\":{\"1518\":1}}],[\"即mvp中view层\",{\"1\":{\"1512\":1}}],[\"即选取照片成功时也发送\",{\"1\":{\"1417\":1}}],[\"即在文本前插入新的文本会应用该样式\",{\"1\":{\"1310\":2}}],[\"即开闭原则\",{\"1\":{\"1253\":1}}],[\"即无重复代码\",{\"1\":{\"1253\":1}}],[\"即偏向模式\",{\"1\":{\"1247\":1}}],[\"即缓存一致性\",{\"1\":{\"1218\":1}}],[\"即时编译器运行占用用户程序运行时间\",{\"1\":{\"1213\":1}}],[\"即时编译器优化成本地代码需要占用程序运行时间\",{\"1\":{\"1206\":1}}],[\"即时了解组件升级动态\",{\"1\":{\"305\":1}}],[\"即被\",{\"1\":{\"993\":1}}],[\"即下篇设计实战\",{\"1\":{\"796\":1}}],[\"即一个类的实现需要另一个类的协助\",{\"1\":{\"735\":1}}],[\"即一个服务要用到另一个服务\",{\"1\":{\"314\":1}}],[\"即有老虎的特性也有动物的共性\",{\"1\":{\"735\":1}}],[\"即栈内存可以理解成线程的私有内存\",{\"1\":{\"383\":1}}],[\"即threadlocal对象\",{\"1\":{\"381\":1}}],[\"即每个线程内部都会有一个该变量\",{\"1\":{\"379\":1}}],[\"即数组中的每个位置被当成一个桶\",{\"1\":{\"348\":1}}],[\"即数据同步\",{\"1\":{\"314\":1}}],[\"即使不做插件化\",{\"1\":{\"1476\":1}}],[\"即使只修改一个小地方\",{\"1\":{\"311\":1}}],[\"即使在内存不足\",{\"1\":{\"154\":1}}],[\"即\",{\"1\":{\"207\":1,\"215\":1,\"332\":1,\"351\":1,\"583\":1,\"1518\":1,\"1530\":1}}],[\"即保持\",{\"1\":{\"207\":1}}],[\"即不保证可靠交付\",{\"1\":{\"181\":1}}],[\"即程序的执行已经超出了该对象的作用域\",{\"1\":{\"145\":1}}],[\"只计算bc\",{\"1\":{\"1779\":1}}],[\"只获得指针\",{\"1\":{\"1527\":1}}],[\"只在本类与子类可见\",{\"1\":{\"1518\":1}}],[\"只读list\",{\"1\":{\"1518\":1}}],[\"只读\",{\"1\":{\"1518\":2}}],[\"只留了一个遐想空间\",{\"1\":{\"1491\":1}}],[\"只是引用计数加1\",{\"1\":{\"1799\":1}}],[\"只是简单接入\",{\"1\":{\"1561\":1}}],[\"只是唤醒系统刷新媒体文件\",{\"1\":{\"1417\":1}}],[\"只是通过⼀些技巧将可⻅性修改成了线程可见\",{\"1\":{\"383\":1}}],[\"只保证这个对象单独操作是线程安全\",{\"1\":{\"1234\":1}}],[\"只改变句柄实例的指针\",{\"1\":{\"1118\":1}}],[\"只包含当前类的类变量\",{\"1\":{\"1109\":1}}],[\"只公开你要公开的内容\",{\"0\":{\"799\":1}}],[\"只要使用端云一体化的云端资源就需要支付费用\",{\"1\":{\"1707\":1}}],[\"只要有光\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"只要强引用存在\",{\"1\":{\"1126\":1}}],[\"只要强引用在\",{\"1\":{\"154\":1}}],[\"只要对象正确构造\",{\"1\":{\"863\":1}}],[\"只要代码开始访问其他无关模块中内容\",{\"1\":{\"805\":1}}],[\"只要将源码复制过来既可以工作\",{\"1\":{\"793\":1}}],[\"只关注参数\",{\"1\":{\"1604\":1}}],[\"只关注于更重要的事情\",{\"1\":{\"787\":1}}],[\"只关心释放即可\",{\"1\":{\"1598\":1}}],[\"只关心自己业务交付\",{\"1\":{\"305\":1}}],[\"只暴露抽象内容\",{\"1\":{\"760\":1}}],[\"只做一件事\",{\"1\":{\"751\":1,\"1253\":1,\"1274\":1}}],[\"只与直接朋友通信\",{\"1\":{\"750\":1,\"754\":1}}],[\"只管个人\",{\"1\":{\"598\":1}}],[\"只能保证一个共享变量的原子操作\",{\"1\":{\"853\":1}}],[\"只能通过强制指定一个桶下标来存放\",{\"1\":{\"350\":1}}],[\"只能使用相应的包装类型数组\",{\"1\":{\"328\":1}}],[\"只能顺序访问\",{\"1\":{\"323\":1}}],[\"只能生存到下一次垃圾回收之前\",{\"1\":{\"154\":1}}],[\"只出现一次的数字\",{\"1\":{\"298\":1}}],[\"只存在两种类加载器\",{\"1\":{\"194\":1}}],[\"只有第一次循环时\",{\"1\":{\"1846\":1}}],[\"只有binder代理对象才会进入该分支\",{\"1\":{\"1762\":1}}],[\"只有在assemble任务才引入依赖\",{\"1\":{\"1491\":1}}],[\"只有在构建\",{\"1\":{\"364\":1}}],[\"只有assemble任务才添加依赖\",{\"1\":{\"1474\":1}}],[\"只有object为0\",{\"1\":{\"1076\":1}}],[\"只有建议与当前问题所处环境相匹配时才值得采纳\",{\"1\":{\"769\":1}}],[\"只有父类反馈无法完成请求\",{\"1\":{\"194\":1}}],[\"只有当前线程可以访问该变量\",{\"1\":{\"167\":1}}],[\"只有创建外部类\",{\"1\":{\"160\":1}}],[\"只需要知道对应常量使用简单易懂\",{\"1\":{\"1482\":1}}],[\"只需要通过思考就能理解和描述这个真实的世界\",{\"1\":{\"787\":1}}],[\"只需设计好表结构\",{\"1\":{\"12\":1,\"731\":1}}],[\"只需在yml配置好厂家密钥即可使用\",{\"1\":{\"12\":1,\"731\":1}}],[\"只需一个注解即可完成数据自动缓存\",{\"1\":{\"12\":1,\"731\":1}}],[\"强烈推荐第一种写法\",{\"1\":{\"1518\":2}}],[\"强烈推荐这种写法\",{\"1\":{\"1518\":2}}],[\"强大在于\",{\"1\":{\"1491\":1}}],[\"强化职责和设计\",{\"1\":{\"1483\":1}}],[\"强化api的一致性\",{\"1\":{\"760\":1}}],[\"强制启动jit模式\",{\"1\":{\"1206\":1}}],[\"强制启动解释器模式\",{\"1\":{\"1206\":1}}],[\"强制启动c2\",{\"1\":{\"1206\":1}}],[\"强制启动c1\",{\"1\":{\"1206\":1}}],[\"强互动\",{\"1\":{\"589\":1}}],[\"强引用\",{\"1\":{\"154\":1,\"1126\":1}}],[\"强行进入\",{\"1\":{\"1607\":1}}],[\"强行提升权限\",{\"0\":{\"619\":1}}],[\"强行用一知半解知识解释\",{\"1\":{\"227\":1}}],[\"强行停止\",{\"1\":{\"106\":2}}],[\"强行设置\",{\"1\":{\"55\":1}}],[\"写框架\",{\"1\":{\"1647\":1}}],[\"写类\",{\"1\":{\"1604\":1}}],[\"写mock库目的\",{\"1\":{\"1595\":1}}],[\"写一个可移植性的程序\",{\"1\":{\"1543\":1}}],[\"写了一个标准用法\",{\"1\":{\"1527\":1}}],[\"写了一套native方法\",{\"1\":{\"1527\":1}}],[\"写入字符\",{\"1\":{\"1827\":1}}],[\"写入服务名\",{\"1\":{\"1799\":1}}],[\"写入rpc头\",{\"1\":{\"1799\":1}}],[\"写入头信息\",{\"1\":{\"1798\":1}}],[\"写入parcel数据\",{\"1\":{\"1756\":1}}],[\"写入\",{\"1\":{\"1220\":2}}],[\"写时复制\",{\"1\":{\"929\":1}}],[\"写锁已经被获取\",{\"1\":{\"886\":1}}],[\"写锁的获取与释放\",{\"1\":{\"886\":1}}],[\"写锁降级为读锁\",{\"1\":{\"885\":1,\"887\":1}}],[\"写法是一层\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"写法风格要一种\",{\"1\":{\"793\":1}}],[\"写法一\",{\"0\":{\"415\":1}}],[\"写法\",{\"0\":{\"422\":1,\"441\":1,\"447\":1,\"453\":1,\"459\":1,\"465\":1,\"471\":1,\"477\":1,\"483\":1,\"489\":1,\"495\":1,\"501\":1,\"507\":1,\"513\":1,\"519\":1,\"525\":1,\"531\":1,\"537\":1,\"543\":1},\"1\":{\"409\":1}}],[\"写操作结束之后需要把原始数组指向新的复制数组\",{\"1\":{\"342\":1}}],[\"写操作需要加锁\",{\"1\":{\"342\":1}}],[\"写操作在一个复制的数组上进行\",{\"1\":{\"342\":1}}],[\"写在github上\",{\"1\":{\"228\":1}}],[\"写缓冲区\",{\"1\":{\"151\":1}}],[\"写共享变量的副本\",{\"1\":{\"151\":1}}],[\"盖了缓存\",{\"1\":{\"151\":1}}],[\"中文文档\",{\"1\":{\"1959\":1}}],[\"中文全称是什么\",{\"1\":{\"1708\":1}}],[\"中指定\",{\"1\":{\"1713\":1}}],[\"中默认内置的基本组件和布局组件\",{\"1\":{\"1709\":1}}],[\"中创建新项目\",{\"1\":{\"1709\":1}}],[\"中包含以下哪些信息\",{\"1\":{\"1709\":1}}],[\"中国大陆\",{\"1\":{\"1711\":1}}],[\"中国\",{\"1\":{\"1708\":1}}],[\"中绘制椭圆形状的子组件\",{\"1\":{\"1702\":1}}],[\"中申请所需的权限\",{\"1\":{\"1702\":2}}],[\"中发布带权限公共事件\",{\"1\":{\"1702\":2}}],[\"中间各种局部引用代码\",{\"1\":{\"1530\":3}}],[\"中间无空格\",{\"1\":{\"1530\":1}}],[\"中间不能有阻塞操作\",{\"1\":{\"1527\":1}}],[\"中除了\",{\"1\":{\"1326\":1}}],[\"中复制数据\",{\"1\":{\"1109\":1}}],[\"中读取内容\",{\"1\":{\"1081\":1}}],[\"中断理解\",{\"1\":{\"945\":1}}],[\"中断线程\",{\"1\":{\"944\":1}}],[\"中断和标识位\",{\"1\":{\"869\":1}}],[\"中断退出\",{\"1\":{\"867\":1,\"869\":1}}],[\"中断\",{\"1\":{\"867\":1,\"878\":1,\"944\":1}}],[\"中cas操作利用cmpxchg指令实现\",{\"1\":{\"852\":1}}],[\"中括号中的内容表示是可选的\",{\"1\":{\"738\":2}}],[\"中使用的\",{\"1\":{\"385\":1}}],[\"中计算数组容量的代码\",{\"1\":{\"354\":1}}],[\"中的入口是通过什么组件体现的\",{\"1\":{\"1708\":1}}],[\"中的弱引用\",{\"1\":{\"1530\":1}}],[\"中的常量池转化为运行时常量池\",{\"0\":{\"1110\":1}}],[\"中的所有对象都放入\",{\"1\":{\"368\":1}}],[\"中的\",{\"1\":{\"368\":1,\"935\":1}}],[\"中的键值对个数\",{\"1\":{\"359\":1}}],[\"中的元素次序是不变的\",{\"1\":{\"356\":1}}],[\"中的元素\",{\"1\":{\"327\":1}}],[\"中的值是不确定的\",{\"1\":{\"167\":1}}],[\"中台化核心做两件事\",{\"1\":{\"305\":1}}],[\"中台化\",{\"1\":{\"305\":2}}],[\"中介\",{\"1\":{\"483\":1,\"754\":1}}],[\"中介模式\",{\"0\":{\"481\":1}}],[\"中介模式避免多个互相协作对象直接易用\",{\"1\":{\"262\":1}}],[\"中介者模式\",{\"1\":{\"256\":1,\"257\":1,\"395\":1,\"482\":1,\"483\":1}}],[\"中\",{\"1\":{\"151\":1,\"329\":1,\"352\":1,\"368\":3,\"994\":1,\"1409\":2,\"1702\":3,\"1708\":1,\"1712\":1}}],[\"中设置\",{\"1\":{\"0\":1}}],[\"从spool中取出一个message对象\",{\"1\":{\"1850\":1}}],[\"从消息队列找到\",{\"1\":{\"1849\":1}}],[\"从当前线程的tls中获取looper对象\",{\"1\":{\"1840\":1}}],[\"从当前类及其父类中查找方法\",{\"1\":{\"992\":1}}],[\"从txn解析出binder\",{\"1\":{\"1789\":1}}],[\"从target\",{\"1\":{\"1770\":1}}],[\"从parcel中读取数据\",{\"1\":{\"1738\":1}}],[\"从path\",{\"1\":{\"1064\":1}}],[\"从一次一次演化\",{\"1\":{\"1610\":1}}],[\"从一开始就使用模块化思想进行设计\",{\"1\":{\"805\":1}}],[\"从无到有手写butterknife框架\",{\"0\":{\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1},\"1\":{\"1577\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1}}],[\"从此就有去重功能\",{\"1\":{\"1374\":1}}],[\"从来没有被其他任何类用到\",{\"1\":{\"1274\":1}}],[\"从f\",{\"1\":{\"1127\":1}}],[\"从field的静态变量列表中获取值\",{\"1\":{\"984\":1}}],[\"从gc\",{\"1\":{\"1125\":1}}],[\"从字节码流中取出操作数\",{\"1\":{\"1101\":1}}],[\"从字节码中读取一个两字节的数\",{\"1\":{\"1094\":1}}],[\"从字节码中读取操作数\",{\"1\":{\"994\":1}}],[\"从byte数组树化classfile\",{\"0\":{\"1081\":1}}],[\"从1\",{\"1\":{\"1078\":1}}],[\"从用户类路径寻找读取\",{\"1\":{\"1063\":1}}],[\"从扩展类路径寻找读取\",{\"1\":{\"1063\":1}}],[\"从启动类路径寻找读取\",{\"1\":{\"1063\":1}}],[\"从运行时常量池获取常量c\",{\"1\":{\"984\":2}}],[\"从操作数栈获取对象引用ref\",{\"1\":{\"984\":2}}],[\"从对象引用的实例变量列表中获取值\",{\"1\":{\"984\":1}}],[\"从jdk1\",{\"1\":{\"808\":1}}],[\"从java虚拟机角度讲\",{\"1\":{\"194\":1}}],[\"从团队成员中选择一些技术最好的人\",{\"1\":{\"796\":1}}],[\"从例子中查找与自己需求关联最紧密的内容\",{\"1\":{\"793\":1}}],[\"从侧面说明筛选提交人\",{\"1\":{\"778\":1}}],[\"从上到下执行命令\",{\"1\":{\"1413\":1}}],[\"从上面的测试结果中我们可以看到\",{\"1\":{\"820\":1}}],[\"从上图所示\",{\"1\":{\"738\":1}}],[\"从上往下打印二叉树\",{\"1\":{\"298\":1}}],[\"从classfile读取信息\",{\"0\":{\"1109\":1}}],[\"从classfile生成异常处理\",{\"1\":{\"1036\":1}}],[\"从classpath\",{\"1\":{\"979\":1}}],[\"从common\",{\"1\":{\"608\":1}}],[\"从c中的第一个元素开始\",{\"1\":{\"286\":1}}],[\"从浩如烟海的大部头\",{\"1\":{\"573\":1}}],[\"从多对多网状关系\",{\"1\":{\"483\":1}}],[\"从线程上下文环境中获取设置的值\",{\"1\":{\"381\":1}}],[\"从而生成一幅图像\",{\"1\":{\"1540\":1}}],[\"从而实现灵活的运营配置\",{\"1\":{\"1481\":1}}],[\"从而与服务端完成通信\",{\"1\":{\"649\":1}}],[\"从而使得被监视器保护的\",{\"1\":{\"862\":1}}],[\"从而使组织保持一致并激发高绩效\",{\"1\":{\"592\":1}}],[\"从而使其并发度更高\",{\"1\":{\"358\":1}}],[\"从而也就没有必要对该变量进行同步了\",{\"1\":{\"380\":1}}],[\"从而隔离了多个线程对数据的访问冲突\",{\"1\":{\"380\":1}}],[\"从而保证经常被访问的节点不容易被回收\",{\"1\":{\"368\":1}}],[\"从而保证缓存空间足够\",{\"1\":{\"364\":1}}],[\"从而放到对应的桶上\",{\"1\":{\"353\":1}}],[\"从而得到他们耦合松散\",{\"1\":{\"262\":1}}],[\"从下面的添加元素代码中可以看出\",{\"1\":{\"352\":1}}],[\"从\",{\"1\":{\"298\":1,\"327\":1,\"348\":1,\"355\":1,\"441\":1,\"1081\":1,\"1109\":1,\"1709\":1}}],[\"从尾到头打印链\",{\"1\":{\"298\":1}}],[\"从最低位开始取每个位组成radix数组\",{\"1\":{\"287\":1}}],[\"从n\",{\"1\":{\"281\":1}}],[\"从后向前扫描\",{\"1\":{\"280\":1}}],[\"从第一个元素开始\",{\"1\":{\"280\":1}}],[\"从左往右\",{\"1\":{\"1607\":1}}],[\"从左往右找到比基准值大的第一个数\",{\"1\":{\"279\":1}}],[\"从左边选择第一个比基准大的数\",{\"1\":{\"279\":1}}],[\"从右边选取第一个比基准小的数\",{\"1\":{\"279\":1}}],[\"从右往左找到比基准值小的第一个数\",{\"1\":{\"279\":1}}],[\"从数组中取第一个数做为基准\",{\"1\":{\"279\":1}}],[\"从开始第一对到结尾的最后一对\",{\"1\":{\"278\":1}}],[\"从开发人员角度讲\",{\"1\":{\"194\":1}}],[\"从外界找到原因\",{\"1\":{\"230\":1}}],[\"从修行的角度反思自己\",{\"1\":{\"230\":1}}],[\"从这些节点上向下搜索\",{\"1\":{\"200\":1}}],[\"从抽象的角度来看\",{\"1\":{\"151\":1}}],[\"从超类到子类对static成员进行初始化\",{\"1\":{\"145\":1}}],[\"则发送进程便是该app所在进程\",{\"1\":{\"1869\":1}}],[\"则发起进程便是launcher所在进程\",{\"1\":{\"1869\":1}}],[\"则执行runtimeinit\",{\"1\":{\"1860\":1}}],[\"则执行zygoteinit\",{\"1\":{\"1860\":1}}],[\"则循环并等待\",{\"1\":{\"1846\":1}}],[\"则设置下一次轮询的超时时长\",{\"1\":{\"1846\":1}}],[\"则立刻退出循环\",{\"1\":{\"1846\":1}}],[\"则查询异步消息\",{\"1\":{\"1846\":1}}],[\"则退出循环\",{\"1\":{\"1843\":1}}],[\"则读取并清空管道数据\",{\"1\":{\"1828\":1}}],[\"则该方法会返回\",{\"1\":{\"1828\":1}}],[\"则该对象不可达\",{\"1\":{\"1125\":1}}],[\"则该对象设置为可回收的垃圾对象\",{\"1\":{\"1124\":1}}],[\"则该对象放在f\",{\"1\":{\"200\":1}}],[\"则该对象彻底消失了\",{\"1\":{\"145\":1}}],[\"则该对象进入终结阶段\",{\"1\":{\"145\":1}}],[\"则不再创建新对象\",{\"1\":{\"1799\":1}}],[\"则不能进行跨端迁移\",{\"1\":{\"1702\":2}}],[\"则不能固定它的方向\",{\"1\":{\"70\":1}}],[\"则从list移除引用\",{\"1\":{\"1762\":1}}],[\"则在bn端死掉后\",{\"1\":{\"1761\":1}}],[\"则调用waitforresponse\",{\"1\":{\"1756\":2}}],[\"则根据收到的不同响应吗\",{\"1\":{\"1756\":1}}],[\"则返回值为空\",{\"1\":{\"1756\":1}}],[\"则返回值不为空\",{\"1\":{\"1756\":1}}],[\"则返回初始值\",{\"1\":{\"381\":1}}],[\"则阻塞在binder\",{\"1\":{\"1755\":1}}],[\"则都会执行executecommand过程\",{\"1\":{\"1755\":1}}],[\"则没有机会执行executecommand\",{\"1\":{\"1755\":1}}],[\"则所有的属性必须指定默认值\",{\"1\":{\"1518\":1}}],[\"则自动使用其作为manifest文件\",{\"1\":{\"1475\":1}}],[\"则近道也\",{\"1\":{\"1271\":1}}],[\"则操作成功\",{\"1\":{\"1239\":1}}],[\"则进入该该分支\",{\"1\":{\"1847\":1}}],[\"则进入老年代\",{\"1\":{\"1146\":1}}],[\"则进行第一次标记筛选\",{\"1\":{\"200\":1}}],[\"则\",{\"1\":{\"1119\":1}}],[\"则只有\",{\"1\":{\"1109\":1}}],[\"则classname\",{\"1\":{\"1064\":1}}],[\"则无法中断\",{\"1\":{\"945\":1}}],[\"则创建新的binder线程\",{\"1\":{\"1776\":1}}],[\"则创建新的线程来处理任务\",{\"1\":{\"913\":1}}],[\"则创建新线程来执行任务\",{\"1\":{\"913\":1}}],[\"则创建一个threadlocalmap对象\",{\"1\":{\"381\":1}}],[\"则当前线程进入等待状态\",{\"1\":{\"886\":1}}],[\"则说明是这个线程有可能有死循环\",{\"1\":{\"833\":1}}],[\"则直接返回\",{\"1\":{\"1846\":1}}],[\"则直接返回entry中的value值\",{\"1\":{\"381\":1}}],[\"则直接退出循环\",{\"1\":{\"1755\":1}}],[\"则直接赋值\",{\"1\":{\"381\":1}}],[\"则认为这个结果是正确的\",{\"1\":{\"359\":1}}],[\"则对每个\",{\"1\":{\"359\":1}}],[\"则对象进入了\",{\"1\":{\"145\":1}}],[\"则为请求服务所在进程创建binder\",{\"1\":{\"1799\":1}}],[\"则为\",{\"1\":{\"322\":1}}],[\"则交换父节点的值\",{\"1\":{\"283\":1}}],[\"则把父节点索引指向最大值索引\",{\"1\":{\"283\":1}}],[\"则最大值索引指向右子节点索引\",{\"1\":{\"283\":1}}],[\"则数组排序完成\",{\"1\":{\"281\":1}}],[\"则将binder\",{\"1\":{\"1761\":1}}],[\"则将任务加入blockingqueue\",{\"1\":{\"913\":1}}],[\"则将\",{\"1\":{\"207\":1}}],[\"则会生成用于创建新线程的br\",{\"1\":{\"1780\":1}}],[\"则会将该节点移到链表尾部\",{\"1\":{\"363\":1}}],[\"则会导致大部分的数落入到同一个桶中\",{\"1\":{\"285\":1}}],[\"则会被移除即将回收的集合\",{\"1\":{\"200\":1}}],[\"则会去执行该方法的终端操作\",{\"1\":{\"145\":1}}],[\"则大于等于该年龄的对象直接进入老年代\",{\"1\":{\"184\":1}}],[\"当zygote为false时\",{\"1\":{\"1860\":1}}],[\"当zygote为true时\",{\"1\":{\"1860\":1}}],[\"当阻塞时需要唤醒\",{\"1\":{\"1847\":1}}],[\"当异步消息触发时间大于当前时间\",{\"1\":{\"1846\":1}}],[\"当查询到异步消息\",{\"1\":{\"1846\":1}}],[\"当消息池没有满时\",{\"1\":{\"1850\":1}}],[\"当消息池为空时\",{\"1\":{\"1850\":1}}],[\"当消息队列为空\",{\"1\":{\"1846\":1}}],[\"当消息的handler为空时\",{\"1\":{\"1846\":1}}],[\"当消息循环已经退出\",{\"1\":{\"1846\":1}}],[\"当等待nextpolltimeoutmillis时长\",{\"1\":{\"1846\":1}}],[\"当handler存在callback成员变量时\",{\"1\":{\"1842\":1}}],[\"当h=1时\",{\"1\":{\"281\":1}}],[\"当message存在回调方法\",{\"1\":{\"1842\":1}}],[\"当把消息加入到消息队列的头部时\",{\"1\":{\"1826\":1}}],[\"当请求服务的进程与服务属于同一进程\",{\"1\":{\"1799\":1}}],[\"当请求服务的进程与服务属于不同进程\",{\"1\":{\"1799\":1}}],[\"当执行binder\",{\"1\":{\"1799\":1}}],[\"当服务注册完成后\",{\"1\":{\"1796\":1}}],[\"当类型为binder\",{\"1\":{\"1780\":1}}],[\"当发生以下3种情况之一\",{\"1\":{\"1780\":1}}],[\"当满足请求线程加已准备线程数等于0\",{\"1\":{\"1770\":1}}],[\"当存在\",{\"1\":{\"1761\":1}}],[\"当存活对象变多时\",{\"1\":{\"1131\":1}}],[\"当binder所在进程死亡后\",{\"1\":{\"1786\":1}}],[\"当binder驱动向client端发送死亡通知的情况\",{\"1\":{\"1780\":1}}],[\"当bn端进程死亡后能通知到bp端\",{\"1\":{\"1761\":1}}],[\"当bwr的读写buffer都没有数据时\",{\"1\":{\"1755\":1}}],[\"当未设置oneway时\",{\"1\":{\"1756\":1}}],[\"当已设置oneway时\",{\"1\":{\"1756\":1}}],[\"当收到其他br命令\",{\"1\":{\"1755\":1}}],[\"当uid<999则抛出异常\",{\"1\":{\"1717\":1}}],[\"当访问在线网页时\",{\"1\":{\"1713\":1}}],[\"当订阅动作是在无序公共事件发布之后进行\",{\"1\":{\"1702\":3}}],[\"当代码变多后\",{\"1\":{\"1610\":1}}],[\"当你用到那块方面时候\",{\"1\":{\"1527\":1}}],[\"当某个变量的值可以为\",{\"1\":{\"1518\":1}}],[\"当有客户端连接时便会执行zygoteconnection\",{\"1\":{\"1869\":1}}],[\"当有另外线程尝试获取这个锁\",{\"1\":{\"1247\":1}}],[\"当有同步状态时\",{\"1\":{\"879\":1}}],[\"当锁对象第一次被线程获取时\",{\"1\":{\"1247\":1}}],[\"当超过一定时间限度\",{\"1\":{\"1209\":1}}],[\"当计数器达到阈值\",{\"1\":{\"1209\":1}}],[\"当计数器为0时\",{\"1\":{\"1124\":1}}],[\"当pc计数器超过作用域\",{\"1\":{\"1182\":1}}],[\"当内存不足时\",{\"1\":{\"1126\":1}}],[\"当同步状态释放时\",{\"1\":{\"878\":1}}],[\"当状态为0的时候获取锁\",{\"1\":{\"876\":1}}],[\"当线程执行binder\",{\"1\":{\"1776\":1}}],[\"当线程a调用exchange对象的exchange\",{\"1\":{\"958\":1}}],[\"当线程获取锁时\",{\"1\":{\"862\":1}}],[\"当线程释放锁时\",{\"1\":{\"862\":1}}],[\"当其他线程尝试竞争偏向锁时\",{\"1\":{\"846\":1}}],[\"当并发操作执行操作循环累加不超百万次时\",{\"1\":{\"819\":1}}],[\"当模块卸载有监听\",{\"1\":{\"805\":1}}],[\"当然可以简化很多工作\",{\"1\":{\"796\":1}}],[\"当然也可以初始化一个\",{\"1\":{\"381\":1}}],[\"当创建一个threadlocal的时候\",{\"1\":{\"381\":1}}],[\"当使用threadlocal维护变量的时候为每一个使用该变量的线程提供一个独立的变量副本\",{\"1\":{\"379\":1}}],[\"当从某app内启动远程进程\",{\"1\":{\"1869\":1}}],[\"当从桌面启动应用\",{\"1\":{\"1869\":1}}],[\"当从\",{\"1\":{\"368\":1}}],[\"当调用一个空闲handler时\",{\"1\":{\"1846\":1}}],[\"当调用\",{\"1\":{\"368\":2}}],[\"当需要扩容时\",{\"1\":{\"352\":1}}],[\"当负载增加\",{\"1\":{\"314\":1}}],[\"当老年代内存满时触发\",{\"1\":{\"207\":1}}],[\"当\",{\"1\":{\"207\":1,\"352\":1,\"364\":1,\"1702\":1,\"1707\":1,\"1708\":1,\"1711\":1,\"1713\":4,\"1770\":1}}],[\"当这个\",{\"1\":{\"207\":1}}],[\"当一个方法执行后\",{\"1\":{\"1185\":1}}],[\"当一个volatile变量时\",{\"1\":{\"861\":1}}],[\"当一个线程访问同步块并获取锁时\",{\"1\":{\"846\":1}}],[\"当一个线程修改一个共享变量时\",{\"1\":{\"839\":1}}],[\"当一个节点被访问时\",{\"1\":{\"363\":1}}],[\"当一个请求进来以后\",{\"1\":{\"314\":1}}],[\"当一个对象没有引用链\",{\"1\":{\"1125\":1}}],[\"当一个对象没有任何引用链与gcroots连接时就说明此对象不可用\",{\"1\":{\"200\":1}}],[\"当一个对象处于不可见阶段时\",{\"1\":{\"145\":1}}],[\"当一块内存用完\",{\"1\":{\"206\":1}}],[\"当父类已经加载该类\",{\"1\":{\"195\":1,\"1176\":1}}],[\"当对象被引用+1\",{\"1\":{\"1124\":1}}],[\"当对象在新生代经历一定次数\",{\"1\":{\"184\":1}}],[\"当对象执行完\",{\"1\":{\"145\":1}}],[\"当eden区没有足够空间进行分配时\",{\"1\":{\"184\":1}}],[\"当前进程已启动线程个数小于最大上限\",{\"1\":{\"1780\":1}}],[\"当前进程没有空闲可用的binder线程\",{\"1\":{\"1780\":1}}],[\"当前进程中没有请求创建binder线程\",{\"1\":{\"1780\":1}}],[\"当前进程uid赋值给mcallinguid\",{\"1\":{\"1717\":1}}],[\"当前进程pid赋值给mcallingpid\",{\"1\":{\"1717\":1}}],[\"当前类type元素和当前类元素的列表\",{\"1\":{\"1604\":1}}],[\"当前类class对象\",{\"1\":{\"169\":2}}],[\"当前文件\",{\"1\":{\"1534\":1}}],[\"当前文件夹名称\",{\"1\":{\"1534\":1}}],[\"当前项目采用mvparms\",{\"1\":{\"1500\":1}}],[\"当前需求\",{\"1\":{\"1500\":1}}],[\"当前是壳工程\",{\"1\":{\"1474\":1}}],[\"当前lib项目转化为app项目\",{\"1\":{\"1473\":1}}],[\"当前页面提供切图\",{\"1\":{\"1443\":1}}],[\"当前布局相对位置\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"当前网络wifi地址\",{\"1\":{\"1341\":1}}],[\"当前开发代码\",{\"1\":{\"1298\":1}}],[\"当前目录完整路径\",{\"1\":{\"1534\":1}}],[\"当前目录所有源文件保存到指定变量\",{\"1\":{\"1534\":1}}],[\"当前目录\",{\"1\":{\"1061\":1}}],[\"当前方法的栈帧\",{\"1\":{\"993\":2}}],[\"当前方法\",{\"1\":{\"993\":1}}],[\"当前任务job数\",{\"1\":{\"950\":1}}],[\"当前线程加入到线程池\",{\"1\":{\"1798\":1}}],[\"当前线程已接收到bc\",{\"1\":{\"1780\":1}}],[\"当前线程的return\",{\"1\":{\"1780\":1}}],[\"当前线程成为binder线程\",{\"1\":{\"1779\":1}}],[\"当前线程数\",{\"1\":{\"950\":4}}],[\"当前线程释放对象锁\",{\"1\":{\"946\":1}}],[\"当前线程调用对象的wait\",{\"1\":{\"946\":1}}],[\"当前线程获取\",{\"1\":{\"878\":1}}],[\"当前有多少台机器在压测服务器\",{\"1\":{\"834\":1}}],[\"当前职位\",{\"1\":{\"537\":1}}],[\"当前权限\",{\"1\":{\"537\":1}}],[\"当前对象\",{\"1\":{\"381\":1}}],[\"当前插入的索引\",{\"1\":{\"283\":1}}],[\"当前值\",{\"1\":{\"280\":1,\"853\":1}}],[\"当前第一个比第二个大交换\",{\"1\":{\"278\":1}}],[\"当前实例对象\",{\"1\":{\"169\":2}}],[\"当前系统中活跃用户状态监控\",{\"1\":{\"14\":1,\"733\":1}}],[\"当垃圾回收器发现该对象已经处于\",{\"1\":{\"145\":1}}],[\"開始构造对象\",{\"1\":{\"145\":1}}],[\"为不同的项目设置单独的name和email\",{\"0\":{\"1924\":1}}],[\"为fork创建做准备\",{\"1\":{\"1862\":1}}],[\"为zygote注册socket\",{\"1\":{\"1862\":2}}],[\"为数据源中的每个数组项生成子组件\",{\"1\":{\"1709\":1}}],[\"为模式\",{\"1\":{\"1708\":2}}],[\"为多实例模式\",{\"1\":{\"1708\":2}}],[\"为线上很容易引入潜在问题\",{\"1\":{\"1587\":1}}],[\"为lib库\",{\"1\":{\"1491\":1}}],[\"为textview使用\",{\"1\":{\"1313\":1}}],[\"为代码清晰\",{\"1\":{\"1280\":1,\"1475\":1}}],[\"为这两个类建立一个超类\",{\"1\":{\"1262\":1}}],[\"为后续代码预留下集中处理\",{\"1\":{\"1259\":1}}],[\"为新生对象分配内存\",{\"1\":{\"1116\":1}}],[\"为类变量分配空间并初始化\",{\"1\":{\"979\":1}}],[\"为开发设计者提供注册插件扩展功能方式是spi\",{\"1\":{\"808\":1}}],[\"为开发节省时间\",{\"1\":{\"595\":1}}],[\"为以后持续性的改进有良好的支持\",{\"1\":{\"778\":1}}],[\"为什么\",{\"1\":{\"814\":1,\"1253\":1,\"1286\":1}}],[\"为什么要创造api\",{\"1\":{\"757\":1}}],[\"为什么使用双亲委托\",{\"0\":{\"195\":1,\"1176\":1}}],[\"为空字符串\",{\"1\":{\"657\":1}}],[\"为避免民生银行因为金融系统风险考虑\",{\"1\":{\"595\":1}}],[\"为其他对象提供一种代理以控制对这个对象访问\",{\"1\":{\"446\":1}}],[\"为其他对象提供一种代理以控制对这个对象的访问\",{\"1\":{\"257\":1,\"394\":1,\"447\":1}}],[\"为\",{\"1\":{\"349\":3,\"351\":2,\"353\":5,\"363\":1,\"365\":1,\"385\":4,\"1534\":1,\"1707\":1,\"1708\":1,\"1711\":2,\"1712\":1,\"1713\":5}}],[\"为主\",{\"1\":{\"347\":1}}],[\"为了便于易用\",{\"1\":{\"1595\":1}}],[\"为了便于理解\",{\"1\":{\"347\":1}}],[\"为了深入学习\",{\"1\":{\"1561\":1}}],[\"为了以后方便使用\",{\"1\":{\"1527\":1}}],[\"为了能让android\",{\"1\":{\"1491\":1}}],[\"为了实现这个目标\",{\"1\":{\"1483\":1}}],[\"为了开发者简单链式调用\",{\"1\":{\"1313\":1}}],[\"为了做分层\",{\"1\":{\"1283\":1}}],[\"为了安全\",{\"1\":{\"1259\":1}}],[\"为了安全性浏览器有一个同源策略\",{\"1\":{\"649\":1}}],[\"为了使处理器运算单元利用率高\",{\"1\":{\"1218\":1}}],[\"为了解决一致性问题\",{\"1\":{\"1218\":1}}],[\"为了尽可能节省栈帧空间\",{\"1\":{\"1182\":1}}],[\"为了简化\",{\"1\":{\"1063\":1}}],[\"为了提高性能\",{\"1\":{\"859\":1}}],[\"为了让线程获得锁的代价更低而引入了偏向锁\",{\"1\":{\"846\":1}}],[\"为了让查找的成本降低\",{\"1\":{\"352\":1}}],[\"为了满足新时期的需求\",{\"1\":{\"649\":1}}],[\"为了抓到纲要\",{\"1\":{\"573\":1}}],[\"为了更极致获得速度和效率\",{\"1\":{\"558\":1}}],[\"为了更好的体验已用于演示服务器升级\",{\"1\":{\"15\":1,\"734\":1}}],[\"为了效率\",{\"1\":{\"558\":1,\"1494\":1}}],[\"为原来的两倍\",{\"1\":{\"338\":1,\"352\":1}}],[\"为奇数就是\",{\"1\":{\"332\":1}}],[\"为偶数就是\",{\"1\":{\"332\":1}}],[\"为对象分配存储空间\",{\"1\":{\"145\":1}}],[\"进能知晓bn端\",{\"1\":{\"1761\":1}}],[\"进而限制了\",{\"1\":{\"1476\":1}}],[\"进程\",{\"0\":{\"1885\":1,\"1887\":1}}],[\"进程创建过程会调用startthreadpool\",{\"1\":{\"1776\":1}}],[\"进程空间分为用户空间和内核空间\",{\"1\":{\"1743\":1}}],[\"进程与用户线程是1\",{\"1\":{\"1226\":1}}],[\"进程号\",{\"1\":{\"118\":1}}],[\"进入system\",{\"1\":{\"1865\":1}}],[\"进入消息循环\",{\"1\":{\"1863\":1}}],[\"进入子进程流程\",{\"1\":{\"1863\":1}}],[\"进入loop的主循环方法\",{\"1\":{\"1843\":1}}],[\"进入循环模式\",{\"1\":{\"1862\":1}}],[\"进入循环\",{\"1\":{\"1789\":1}}],[\"进入无限循环\",{\"1\":{\"1786\":1,\"1788\":1}}],[\"进入方法内\",{\"1\":{\"1607\":1}}],[\"进入等待队列\",{\"1\":{\"946\":1}}],[\"进入该状态的线程需要等待\",{\"1\":{\"943\":1}}],[\"进入mysql数据库\",{\"1\":{\"619\":1}}],[\"进入mysql目录\",{\"1\":{\"619\":1}}],[\"进入网站\",{\"1\":{\"25\":1}}],[\"进度条\",{\"1\":{\"1416\":1}}],[\"进度\",{\"1\":{\"586\":2}}],[\"进一步深入理解\",{\"1\":{\"573\":1}}],[\"进行插入操作\",{\"1\":{\"1841\":1}}],[\"进行binder通信工作\",{\"1\":{\"1804\":1}}],[\"进行相应处理\",{\"1\":{\"1761\":1}}],[\"进行端云一体开发时\",{\"1\":{\"1711\":1}}],[\"进行后续行为\",{\"1\":{\"1441\":1}}],[\"进行垃圾收集时\",{\"1\":{\"1139\":1}}],[\"进行链接\",{\"1\":{\"979\":1}}],[\"进行同步\",{\"1\":{\"337\":1}}],[\"进行查漏补缺\",{\"1\":{\"229\":1}}],[\"进行分配担保\",{\"1\":{\"206\":1}}],[\"进阶知识\",{\"0\":{\"127\":1}}],[\"杀死远程服务\",{\"1\":{\"1736\":1}}],[\"杀死进程\",{\"1\":{\"118\":1}}],[\"杀掉指定进程\",{\"1\":{\"58\":1}}],[\"显然这条件是满足的\",{\"1\":{\"1780\":1}}],[\"显然该模块中类不会直接访问另一个模块中的类\",{\"1\":{\"805\":1}}],[\"显著减少体积2\",{\"1\":{\"1317\":1}}],[\"显示所有tag\",{\"1\":{\"1949\":1}}],[\"显示设备列表\",{\"1\":{\"1702\":1}}],[\"显示在屏幕上\",{\"1\":{\"1540\":1}}],[\"显示apk信息\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"显示屏参数\",{\"1\":{\"1298\":1}}],[\"显示全名\",{\"1\":{\"1151\":1}}],[\"显示进程号\",{\"1\":{\"118\":1}}],[\"显式包内容\",{\"1\":{\"67\":1}}],[\"|awk\",{\"1\":{\"834\":1}}],[\"|=\",{\"1\":{\"354\":8,\"1546\":1,\"1756\":1,\"1828\":4,\"1846\":1}}],[\"|||||\",{\"1\":{\"711\":2}}],[\"|||\",{\"1\":{\"711\":2}}],[\"||\",{\"1\":{\"278\":1,\"279\":1,\"280\":1,\"281\":1,\"283\":2,\"284\":1,\"285\":4,\"348\":2,\"350\":1,\"359\":1,\"543\":1,\"880\":1,\"886\":3,\"984\":1,\"993\":2,\"1036\":1,\"1056\":1,\"1064\":1,\"1070\":1,\"1109\":2,\"1332\":1,\"1358\":1,\"1555\":1,\"1598\":1,\"1604\":1,\"1790\":3,\"1840\":2,\"1846\":1,\"1847\":3,\"1849\":2}}],[\"|\",{\"1\":{\"118\":1,\"614\":276,\"622\":138,\"630\":276,\"702\":1,\"711\":17,\"715\":3,\"822\":3,\"834\":4,\"1056\":1,\"1197\":3,\"1323\":2,\"1335\":3,\"1368\":9,\"1459\":2,\"1613\":1,\"1717\":1,\"1770\":1}}],[\"亲测可用\",{\"0\":{\"109\":1},\"1\":{\"1335\":1,\"1601\":1}}],[\"正在退出时\",{\"1\":{\"1847\":1}}],[\"正在把数据\",{\"1\":{\"958\":1}}],[\"正好是`clearcallingidentity`的反过程\",{\"1\":{\"1717\":1}}],[\"正常创建git项目流程\",{\"0\":{\"1944\":1}}],[\"正常情况下binder线程一旦创建则不会退出\",{\"1\":{\"1755\":1}}],[\"正常请求\",{\"1\":{\"1592\":1}}],[\"正常返回\",{\"1\":{\"1592\":1}}],[\"正常走流程\",{\"1\":{\"1592\":1}}],[\"正常写法\",{\"1\":{\"1491\":1}}],[\"正常权限\",{\"0\":{\"612\":1,\"620\":1}}],[\"正方形图片\",{\"1\":{\"1338\":3,\"1435\":3}}],[\"正式压轴大戏\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"正确\",{\"1\":{\"1702\":7,\"1707\":7,\"1711\":17}}],[\"正确的判断来自于经验\",{\"1\":{\"781\":1}}],[\"正确的\",{\"1\":{\"657\":1}}],[\"正确可用\",{\"1\":{\"73\":1}}],[\"正则表达式匹配\",{\"1\":{\"298\":1}}],[\"正版webstorm破解\",{\"0\":{\"109\":1}}],[\"清晰\",{\"1\":{\"1518\":1}}],[\"清晰明确\",{\"1\":{\"1274\":1}}],[\"清理加固文件\",{\"1\":{\"1613\":1}}],[\"清理成功\",{\"1\":{\"1488\":1}}],[\"清理apimodule中空文件夹\",{\"1\":{\"1487\":1}}],[\"清理掉端边界外的内存\",{\"1\":{\"1132\":1}}],[\"清空私钥列表\",{\"1\":{\"1922\":1}}],[\"清空远程调用端的uid和pid\",{\"1\":{\"1717\":1}}],[\"清空所有的内容\",{\"1\":{\"885\":1}}],[\"清空缓存无效\",{\"1\":{\"106\":1}}],[\"清单\",{\"1\":{\"796\":1}}],[\"清除in\",{\"1\":{\"1850\":1}}],[\"清除reponse引用的回调方法\",{\"1\":{\"1828\":1}}],[\"清除队列的引用\",{\"1\":{\"1778\":1}}],[\"清除线程本地上下文环境\",{\"1\":{\"381\":1}}],[\"清除算法或标记\",{\"1\":{\"207\":1}}],[\"清除算法基础上\",{\"1\":{\"205\":1}}],[\"清除算法\",{\"0\":{\"204\":1,\"1130\":1},\"1\":{\"1130\":1,\"1133\":1,\"1144\":1}}],[\"清除微信缓存\",{\"1\":{\"106\":1}}],[\"大多數情況下\",{\"1\":{\"1776\":1}}],[\"大写字母\",{\"1\":{\"1530\":1}}],[\"大写字母转小写即可获得\",{\"1\":{\"106\":1}}],[\"大小\",{\"1\":{\"1310\":1,\"1444\":1}}],[\"大学之道\",{\"1\":{\"1271\":1}}],[\"大型重构\",{\"0\":{\"1265\":1},\"1\":{\"1265\":1,\"1286\":1}}],[\"大部分场景不会影响并发安全性\",{\"1\":{\"1239\":1}}],[\"大部分对象在\",{\"1\":{\"207\":1}}],[\"大批量地执行处理\",{\"1\":{\"954\":1}}],[\"大杯咖啡\",{\"1\":{\"459\":2}}],[\"大杯的\",{\"1\":{\"459\":1}}],[\"大大减少应用程序创建的对象\",{\"1\":{\"441\":1}}],[\"大大提高了读操作的性能\",{\"1\":{\"343\":1}}],[\"大于等于\",{\"1\":{\"352\":1}}],[\"大于新元素\",{\"1\":{\"280\":1}}],[\"大纲\",{\"1\":{\"298\":1}}],[\"大根堆的交换头尾值\",{\"1\":{\"283\":1}}],[\"大顶堆概念\",{\"1\":{\"283\":1}}],[\"大环境就是这样\",{\"1\":{\"227\":1}}],[\"大概比例是\",{\"1\":{\"207\":1}}],[\"大对象直接进入老年代\",{\"1\":{\"184\":1,\"1146\":1}}],[\"大前端架构演进\",{\"1\":{\"305\":1}}],[\"大前端\",{\"0\":{\"3\":1,\"305\":1}}],[\"请在local\",{\"1\":{\"1613\":1}}],[\"请引用retrofit\",{\"1\":{\"1595\":1}}],[\"请用debug包\",{\"1\":{\"1595\":1}}],[\"请大家给我一个star\",{\"1\":{\"1488\":1}}],[\"请同意权限\",{\"1\":{\"1416\":1}}],[\"请安装后重试\",{\"1\":{\"1358\":1}}],[\"请记住这个pid\",{\"1\":{\"833\":1}}],[\"请检查签名是否与开发平台签名一致\",{\"0\":{\"106\":1}}],[\"请求结构体\",{\"1\":{\"1831\":1}}],[\"请求锁\",{\"1\":{\"1826\":1,\"1828\":2}}],[\"请求服务\",{\"1\":{\"1799\":1}}],[\"请求的参数可以在\",{\"1\":{\"1713\":1}}],[\"请求支持\",{\"1\":{\"1713\":1}}],[\"请求才会成功\",{\"1\":{\"1707\":1}}],[\"请求\",{\"1\":{\"1383\":1,\"1666\":1,\"1702\":1}}],[\"请求体\",{\"1\":{\"1332\":1}}],[\"请求体缓存\",{\"1\":{\"12\":1,\"731\":1}}],[\"请求不能发送\",{\"1\":{\"649\":1}}],[\"请求响应日志等\",{\"1\":{\"12\":1,\"731\":1}}],[\"已设置状态为binder\",{\"1\":{\"1780\":1}}],[\"已启动线程数小于最大线程数\",{\"1\":{\"1770\":1}}],[\"已向parcel数据类型的mout写入数据\",{\"1\":{\"1756\":1}}],[\"已经唤醒了\",{\"1\":{\"1828\":1}}],[\"已经将kotlin示例\",{\"1\":{\"1509\":1}}],[\"已经加载的类数据\",{\"1\":{\"978\":1}}],[\"已应用于项目\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"已写好工具\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"已知的可用类有\",{\"1\":{\"1310\":1}}],[\"已使用内存和空间交错\",{\"1\":{\"1116\":1}}],[\"已排序\",{\"1\":{\"280\":1}}],[\"已签名\",{\"1\":{\"103\":1}}],[\"已自动弃选\",{\"1\":{\"103\":1}}],[\"已选增强服务\",{\"1\":{\"103\":1}}],[\"崩溃日志\",{\"1\":{\"103\":1}}],[\"盗版监测\",{\"1\":{\"103\":1}}],[\"防火墙做内部控制\",{\"1\":{\"721\":1}}],[\"防止view被连续点击\",{\"1\":{\"1374\":2}}],[\"防止指令重排\",{\"1\":{\"861\":1,\"864\":1}}],[\"防止反序列化重新创建新的对象\",{\"1\":{\"405\":1}}],[\"防止出现内存泄漏问题\",{\"1\":{\"381\":1}}],[\"防止并发写入时导致写入数据丢失\",{\"1\":{\"342\":1}}],[\"防dex内存截取\",{\"1\":{\"103\":1}}],[\"防二次打包\",{\"1\":{\"103\":1}}],[\"勾选自动登录\",{\"1\":{\"103\":1}}],[\"找段时间彻底总结一下\",{\"1\":{\"1908\":1}}],[\"找该类所有注解方法\",{\"1\":{\"1546\":1}}],[\"找当前module的状态\",{\"1\":{\"1475\":1}}],[\"找相同代码\",{\"1\":{\"1262\":1}}],[\"找方法\",{\"1\":{\"992\":1}}],[\"找一些用户\",{\"1\":{\"796\":1}}],[\"找出真正问题\",{\"1\":{\"1253\":1}}],[\"找出待排序的数组中最大和最小的元素\",{\"1\":{\"286\":1}}],[\"找出最大值\",{\"1\":{\"285\":2}}],[\"找到message应该插入的位置i\",{\"1\":{\"1826\":1}}],[\"找到相应的binder\",{\"1\":{\"1754\":1}}],[\"找到属性为code代码\",{\"1\":{\"1093\":1}}],[\"找到class文件并读取为\",{\"1\":{\"979\":1}}],[\"找到之后就可以阅读源码\",{\"1\":{\"329\":1}}],[\"找到第\",{\"1\":{\"298\":2}}],[\"找到第二小的元素\",{\"1\":{\"282\":1}}],[\"找到一个位置\",{\"1\":{\"285\":1}}],[\"找到桶的下标\",{\"1\":{\"285\":1}}],[\"找到最小的元素\",{\"1\":{\"282\":1}}],[\"找到问题根源\",{\"1\":{\"230\":1}}],[\"找到正确答案\",{\"1\":{\"228\":1}}],[\"找到hosts文件\",{\"1\":{\"25\":1}}],[\"找打印日志的执行命令行\",{\"1\":{\"103\":1}}],[\"<xxxxx\",{\"1\":{\"1928\":1}}],[\"<pre\",{\"1\":{\"1869\":1}}],[\"<extensions\",{\"1\":{\"1555\":1}}],[\"<exclusion>\",{\"1\":{\"672\":2}}],[\"<exclusions>\",{\"1\":{\"672\":1}}],[\"<vendor\",{\"1\":{\"1555\":1}}],[\"<version>1\",{\"1\":{\"1555\":1}}],[\"<version>3\",{\"1\":{\"672\":1}}],[\"<version>2\",{\"1\":{\"672\":1}}],[\"<name>armmvphelper<\",{\"1\":{\"1555\":1}}],[\"<network\",{\"1\":{\"1405\":1}}],[\"<reified\",{\"1\":{\"1506\":2}}],[\"<repository>\",{\"1\":{\"608\":1}}],[\"<base\",{\"1\":{\"1405\":1}}],[\"<button\",{\"1\":{\"1346\":2}}],[\"<fields>\",{\"1\":{\"1361\":1}}],[\"<methods>\",{\"1\":{\"1361\":1}}],[\"<your\",{\"1\":{\"1341\":2}}],[\"<change\",{\"1\":{\"1555\":1}}],[\"<category\",{\"1\":{\"1326\":3}}],[\"<classname>\",{\"1\":{\"1063\":3}}],[\"<clinit>\",{\"1\":{\"1003\":1}}],[\"<add\",{\"1\":{\"1555\":1}}],[\"<application\",{\"1\":{\"1405\":2}}],[\"<android\",{\"1\":{\"1346\":6}}],[\"<actions>\",{\"1\":{\"1555\":1}}],[\"<action\",{\"1\":{\"1326\":2,\"1555\":2}}],[\"<artifactid>mapstruct<\",{\"1\":{\"672\":1}}],[\"<artifactid>swagger\",{\"1\":{\"672\":1}}],[\"<artifactid>springfox\",{\"1\":{\"672\":1}}],[\"<artifactid>spring\",{\"1\":{\"672\":1}}],[\"<job>\",{\"1\":{\"950\":1}}],[\"<0x00000007969b2280>\",{\"1\":{\"822\":2}}],[\"<groupid>io\",{\"1\":{\"672\":2}}],[\"<groupid>org\",{\"1\":{\"672\":2}}],[\"<style\",{\"1\":{\"1320\":2}}],[\"<service\",{\"1\":{\"1320\":1}}],[\"<scope>import<\",{\"1\":{\"672\":1}}],[\"<snapshotrepository>\",{\"1\":{\"608\":1}}],[\"<depends>com\",{\"1\":{\"1555\":1}}],[\"<dependency>\",{\"1\":{\"672\":2}}],[\"<description>armmvp框架\",{\"1\":{\"1555\":1}}],[\"<data\",{\"1\":{\"1326\":1}}],[\"<distributionmanagement>\",{\"1\":{\"608\":1}}],[\"<url>https\",{\"1\":{\"608\":2}}],[\"<id>com\",{\"1\":{\"1555\":1}}],[\"<id>rdc\",{\"1\":{\"608\":2}}],[\"<idea\",{\"1\":{\"1555\":2}}],[\"<imageview\",{\"1\":{\"1346\":1}}],[\"<item\",{\"1\":{\"1320\":6}}],[\"<intent\",{\"1\":{\"1326\":1}}],[\"<init>\",{\"1\":{\"993\":1,\"1361\":1}}],[\"<inputapkpath>\",{\"1\":{\"103\":1}}],[\"<textview\",{\"1\":{\"1346\":11}}],[\"<type>pom<\",{\"1\":{\"672\":1}}],[\"<t\",{\"1\":{\"416\":2}}],[\"<t>\",{\"1\":{\"259\":5,\"328\":1,\"543\":1,\"1592\":1}}],[\"<<<<<\",{\"1\":{\"1843\":1}}],[\"<<<\",{\"1\":{\"1604\":1}}],[\"<<\",{\"1\":{\"352\":1}}],[\"<k3\",{\"1\":{\"349\":2}}],[\"<k2\",{\"1\":{\"349\":3}}],[\"<k1\",{\"1\":{\"349\":1}}],[\"<=27\",{\"1\":{\"1521\":1}}],[\"<=\",{\"1\":{\"279\":1,\"284\":4,\"537\":1,\"631\":1,\"880\":1,\"897\":2,\"917\":2,\"950\":1,\"958\":1,\"1203\":1,\"1368\":1,\"1790\":1,\"1828\":1,\"1846\":1,\"1849\":1}}],[\"<\",{\"0\":{\"602\":1},\"1\":{\"278\":1,\"279\":1,\"280\":3,\"281\":2,\"282\":3,\"283\":6,\"284\":1,\"285\":4,\"332\":1,\"338\":2,\"352\":1,\"354\":1,\"359\":5,\"525\":1,\"603\":1,\"608\":6,\"672\":6,\"845\":3,\"880\":2,\"882\":1,\"883\":1,\"884\":1,\"886\":1,\"917\":2,\"923\":1,\"950\":2,\"1009\":1,\"1036\":2,\"1110\":1,\"1320\":4,\"1326\":3,\"1346\":7,\"1368\":1,\"1374\":2,\"1405\":2,\"1416\":1,\"1456\":2,\"1518\":2,\"1530\":2,\"1546\":1,\"1555\":11,\"1717\":1,\"1725\":1,\"1726\":3,\"1770\":3,\"1778\":1,\"1789\":3,\"1798\":2,\"1799\":1,\"1826\":1,\"1828\":3,\"1829\":1,\"1846\":4,\"1847\":2,\"1850\":1,\"1861\":1,\"1943\":1}}],[\"<outputpath>\",{\"1\":{\"103\":1}}],[\"用jitpack\",{\"0\":{\"1933\":1}}],[\"用jstack命令dump线程信息\",{\"1\":{\"822\":1}}],[\"用语监控远程服务连接的状态\",{\"1\":{\"1736\":1}}],[\"用当前本地进程的uid和pid替代\",{\"1\":{\"1717\":1}}],[\"用哪一种装饰器修饰的组件可作为页面入口组件\",{\"1\":{\"1708\":1}}],[\"用哪一种装饰器修饰的\",{\"1\":{\"1708\":1}}],[\"用以等待外部进程调用结束\",{\"1\":{\"1613\":1}}],[\"用模板自动生成代码\",{\"1\":{\"1610\":1}}],[\"用模板的方式\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"用反向代理\",{\"1\":{\"1592\":1}}],[\"用反射\",{\"0\":{\"416\":1}}],[\"用的dragger方式注入\",{\"1\":{\"1587\":1}}],[\"用代码来说话\",{\"1\":{\"1543\":1}}],[\"用代理解决\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"用glsl语言定义着色\",{\"1\":{\"1540\":1}}],[\"用gradle脚本方式写的\",{\"1\":{\"103\":1}}],[\"用面向对象思想封装\",{\"1\":{\"1540\":1}}],[\"用命令来调节\",{\"1\":{\"1534\":1}}],[\"用native执行java方法\",{\"1\":{\"1527\":1}}],[\"用作示例\",{\"1\":{\"1527\":1}}],[\"用when代替复杂if\",{\"1\":{\"1521\":1}}],[\"用不到rpc\",{\"1\":{\"1481\":1}}],[\"用快捷键方式\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"用view与logic解耦方式\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"用建造者模式对单一spanbuilder进行模型简化\",{\"0\":{\"1312\":1}}],[\"用单元测试保证观察行为一致\",{\"1\":{\"1253\":1}}],[\"用boolean变量控制\",{\"1\":{\"945\":1}}],[\"用到知识点\",{\"0\":{\"912\":1}}],[\"用法不变\",{\"1\":{\"1632\":1}}],[\"用法不够简洁\",{\"1\":{\"1302\":1}}],[\"用法so\",{\"0\":{\"1301\":1}}],[\"用法\",{\"0\":{\"1624\":1},\"1\":{\"843\":1,\"1595\":1}}],[\"用继承的方式用api\",{\"1\":{\"799\":1}}],[\"用例驱动api设计\",{\"1\":{\"796\":1}}],[\"用例站在用户视角\",{\"1\":{\"796\":1}}],[\"用测试用例从外观上保持行为一致\",{\"1\":{\"775\":1}}],[\"用父类对象定义\",{\"1\":{\"753\":1}}],[\"用带有分割线的矩形划分\",{\"1\":{\"738\":1}}],[\"用\",{\"1\":{\"650\":1,\"754\":1,\"1346\":1}}],[\"用entry来进行存储\",{\"1\":{\"381\":1}}],[\"用冗余换取架构的简单性\",{\"1\":{\"314\":1}}],[\"用两个栈实现队列\",{\"1\":{\"298\":1}}],[\"用stack计算\",{\"1\":{\"271\":1,\"1086\":1}}],[\"用contentprovider保证线程安全\",{\"1\":{\"268\":1}}],[\"用一个中介对象来封装一系列对象交互\",{\"1\":{\"257\":1,\"395\":1,\"482\":1}}],[\"用来装饰类\",{\"1\":{\"1709\":1}}],[\"用来简化测试工作\",{\"1\":{\"1534\":2}}],[\"用来特殊处理\",{\"1\":{\"1313\":1}}],[\"用来表示某种错误\",{\"1\":{\"1274\":1}}],[\"用来方便他人扩展当前的模块功能\",{\"1\":{\"793\":1}}],[\"用来维护插入顺序或者\",{\"1\":{\"362\":1}}],[\"用来记录\",{\"1\":{\"335\":1}}],[\"用来访问子系统中一群接口\",{\"1\":{\"257\":1,\"394\":1,\"452\":1}}],[\"用来解耦对象的实例化过程\",{\"1\":{\"257\":1,\"390\":1}}],[\"用于栈帧清空\",{\"1\":{\"1866\":1}}],[\"用于分发message\",{\"1\":{\"1843\":1}}],[\"用于debug功能\",{\"1\":{\"1843\":1}}],[\"用于私有当前线程looper对象\",{\"1\":{\"1843\":1}}],[\"用于需要唤醒poll循环\",{\"1\":{\"1827\":1}}],[\"用于实现上述两个方法\",{\"1\":{\"1806\":1}}],[\"用于实现对内存敏感的高速缓存\",{\"1\":{\"154\":1}}],[\"用于申明asinterface\",{\"1\":{\"1806\":1}}],[\"用于创建新的线程\",{\"1\":{\"1770\":1}}],[\"用于从binder\",{\"1\":{\"1768\":1}}],[\"用于从ipc层传递到binder\",{\"1\":{\"1768\":1}}],[\"用于检测parcel大小是否大于800k\",{\"1\":{\"1756\":1}}],[\"用于native方法\",{\"1\":{\"1751\":1}}],[\"用于给定数组项生成唯一且稳定的键值\",{\"1\":{\"1709\":1}}],[\"用于添加组件对事件的响应逻辑\",{\"1\":{\"1709\":1}}],[\"用于组件属性的配置\",{\"1\":{\"1709\":1}}],[\"用于组装完整spanbuild\",{\"1\":{\"1313\":1}}],[\"用于控制\",{\"1\":{\"1709\":1}}],[\"用于设置组件属性的值\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"用于设置子组件在交叉轴方向上的对齐格式\",{\"1\":{\"1707\":1}}],[\"用于设置子组件在主轴方向上的对齐格式\",{\"1\":{\"1707\":1}}],[\"用于验证\",{\"1\":{\"1702\":1}}],[\"用于判断当前类类型\",{\"1\":{\"1604\":1}}],[\"用于处理指定的文件描述符的poll事件\",{\"1\":{\"1831\":1}}],[\"用于处理和调试与binder相关的垃圾回收\",{\"1\":{\"1751\":1}}],[\"用于处理\",{\"1\":{\"1534\":1}}],[\"用于读取\",{\"1\":{\"1527\":1}}],[\"用于解决工作日常80\",{\"1\":{\"1286\":1}}],[\"用于存储锁对象\",{\"1\":{\"1248\":1}}],[\"用于存储被虚拟机加载的类信息\",{\"1\":{\"1115\":1}}],[\"用于存放方法参数和方法内部定义的局部变量\",{\"1\":{\"1182\":1}}],[\"用于存放方法参数\",{\"1\":{\"1115\":1}}],[\"用于执行下一条指令\",{\"1\":{\"994\":1}}],[\"用于搜索和读取\",{\"1\":{\"978\":1}}],[\"用于保存等待执行任务的阻塞队列\",{\"1\":{\"246\":1,\"914\":1}}],[\"用于引用占用内存空间较大的对象\",{\"1\":{\"154\":1}}],[\"用域了\",{\"1\":{\"145\":1}}],[\"用yarn\",{\"0\":{\"112\":1}}],[\"用户空间是彼此不共享的\",{\"1\":{\"1743\":1}}],[\"用户列表存储位置需要选择\",{\"1\":{\"1708\":1}}],[\"用户体验差\",{\"1\":{\"1494\":1}}],[\"用户群体大\",{\"1\":{\"1482\":1}}],[\"用户最小情况修改代码\",{\"1\":{\"1476\":1}}],[\"用户访问令牌\",{\"1\":{\"1377\":1}}],[\"用户线程和轻量级进程比例\",{\"1\":{\"1227\":1}}],[\"用户类搜索\",{\"1\":{\"1063\":1}}],[\"用户类路径\",{\"1\":{\"1061\":1}}],[\"用户的工作也应该受到尊重\",{\"1\":{\"793\":1}}],[\"用户的请求将依次通过这四层的处理\",{\"1\":{\"311\":1}}],[\"用户更愿意去看一些例子\",{\"1\":{\"793\":1}}],[\"用户采用反射调用隐藏的api\",{\"1\":{\"793\":1}}],[\"用户请求大量增加时\",{\"1\":{\"311\":1}}],[\"用户界面\",{\"1\":{\"311\":1}}],[\"用户通过平台入口\",{\"1\":{\"305\":1}}],[\"用户是系统操作者\",{\"1\":{\"14\":1,\"733\":1}}],[\"用户管理\",{\"1\":{\"14\":1,\"668\":1,\"733\":1}}],[\"用户模块\",{\"1\":{\"12\":1,\"731\":1}}],[\"用户模型\",{\"1\":{\"12\":1,\"731\":1}}],[\"用户权限\",{\"1\":{\"12\":1,\"731\":1}}],[\"用户认证能力\",{\"1\":{\"12\":1,\"731\":1}}],[\"完美替换eventbus\",{\"1\":{\"1636\":1}}],[\"完成注册服务\",{\"1\":{\"1797\":1}}],[\"完成传输过程\",{\"1\":{\"1754\":1}}],[\"完成myservice定义\",{\"1\":{\"1727\":1}}],[\"完成一个密码输入框\",{\"1\":{\"1712\":1}}],[\"完成\",{\"1\":{\"1368\":1,\"1383\":1,\"1666\":1}}],[\"完成安装\",{\"1\":{\"24\":1}}],[\"完全不透明\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"完全不会对其生存时间构成影响\",{\"1\":{\"154\":1}}],[\"完全建立在用户空间的线程库\",{\"1\":{\"1226\":1}}],[\"完整的一行\",{\"1\":{\"1549\":1}}],[\"完整的360加固日志\",{\"0\":{\"103\":1}}],[\"完整可用调研了支持拍照和图片选择上传\",{\"1\":{\"1416\":1}}],[\"完整建造者代码\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"完整版\",{\"1\":{\"631\":1}}],[\"而在连接技术上\",{\"1\":{\"1702\":3}}],[\"而在文本后插入新文本也会应用该样式\",{\"1\":{\"1310\":1}}],[\"而在文本后插入新文本不会应用该样式\",{\"1\":{\"1310\":1}}],[\"而屏幕的顶边就对应\",{\"1\":{\"1540\":1}}],[\"而编译时\",{\"1\":{\"1473\":1}}],[\"而不会导致base\",{\"1\":{\"1491\":1}}],[\"而不影响别人\",{\"1\":{\"1472\":1}}],[\"而不是调用进程\",{\"1\":{\"1843\":1}}],[\"而不是直接访问\",{\"1\":{\"1716\":1}}],[\"而不是flutter有什么技术\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"而不是重复的语法\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"而不是各处都采用\",{\"1\":{\"805\":1}}],[\"而不是扩展协议\",{\"1\":{\"793\":1}}],[\"而不是自底向上坚实基础\",{\"1\":{\"757\":1}}],[\"而不是链表的尾部\",{\"1\":{\"350\":1}}],[\"而不是\",{\"1\":{\"339\":1}}],[\"而不是buildscript\",{\"1\":{\"100\":1}}],[\"而defaultpage\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"而实践注重于短期利益\",{\"1\":{\"1268\":1}}],[\"而非全部\",{\"1\":{\"1262\":1}}],[\"而cyclicbarrier的计数器可以使用reset\",{\"1\":{\"906\":1}}],[\"而所做的也只是\",{\"1\":{\"886\":1}}],[\"而其他获取锁的线程只能处于同步队列中等待\",{\"1\":{\"876\":1}}],[\"而经验来自于错误的判断\",{\"1\":{\"781\":1}}],[\"而没有意识到这两者矛盾\",{\"1\":{\"772\":1}}],[\"而发动机脱离了汽车也能单独存在\",{\"1\":{\"738\":1}}],[\"而单独存在\",{\"1\":{\"738\":1}}],[\"而对于前端开发者来说是完全隐藏了细节的\",{\"1\":{\"649\":1}}],[\"而threadlocal的值其实也是被线程实例持有\",{\"1\":{\"383\":1}}],[\"而堆内存中的对象对所有线程可见\",{\"1\":{\"383\":1}}],[\"而且修改create\",{\"1\":{\"1588\":1}}],[\"而且\",{\"1\":{\"1530\":1}}],[\"而且这个通信过程必须要经过主内存\",{\"1\":{\"858\":1}}],[\"而且总是由同一线程多次获得\",{\"1\":{\"846\":1}}],[\"而且每个部件都应该是独立的\",{\"1\":{\"805\":1}}],[\"而且key不等于entry\",{\"1\":{\"382\":1}}],[\"而且可以有多个threadlocal变量\",{\"1\":{\"381\":1}}],[\"而且是一种稳定的排序方式\",{\"1\":{\"284\":1}}],[\"而\",{\"1\":{\"320\":1,\"334\":1,\"339\":1}}],[\"而状态模式则是通过状态来改变行为\",{\"1\":{\"263\":1}}],[\"而将一些步骤延迟到子类实现\",{\"1\":{\"257\":1,\"395\":1,\"500\":1}}],[\"而无须指定具体类\",{\"1\":{\"257\":1,\"393\":1,\"427\":1}}],[\"而是直接调用ipc\",{\"1\":{\"1776\":1}}],[\"而是这种节奏\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"而是委派到它的父类加载器去尝试加载\",{\"1\":{\"1175\":1}}],[\"而是指抽象内容\",{\"1\":{\"802\":1}}],[\"而是放置内部\",{\"1\":{\"799\":1}}],[\"而是看多年后\",{\"1\":{\"796\":1}}],[\"而是插入在链表头部\",{\"1\":{\"349\":1}}],[\"而是使用\",{\"1\":{\"325\":1}}],[\"而是把数据都复制到内存中\",{\"1\":{\"314\":1}}],[\"而是将这个请求委派给父类加载器完成\",{\"1\":{\"194\":1}}],[\"而是可选项\",{\"1\":{\"12\":1,\"731\":1}}],[\"而udp是不可靠的\",{\"1\":{\"181\":1}}],[\"而udp只有8字节\",{\"1\":{\"181\":1}}],[\"而synchronized则可以保证变量的修改可见性和原子性\",{\"1\":{\"167\":1}}],[\"而参数不同\",{\"1\":{\"159\":1}}],[\"溢出bug\",{\"0\":{\"97\":1}}],[\"首次调用create\",{\"1\":{\"1756\":1}}],[\"首选项的\",{\"1\":{\"1713\":1}}],[\"首选项的数据持久化后是放在哪里\",{\"1\":{\"1712\":1}}],[\"首选项存储数据数量建议不超过\",{\"1\":{\"1713\":1}}],[\"首选项以\",{\"1\":{\"1713\":1}}],[\"首选项是关系型数据库\",{\"1\":{\"1711\":1}}],[\"首选项是非关系数据库\",{\"1\":{\"1707\":1}}],[\"首选项\",{\"1\":{\"1707\":1,\"1708\":2,\"1713\":1}}],[\"首个js\",{\"1\":{\"1413\":1}}],[\"首先特别感谢javalong\",{\"1\":{\"1589\":1,\"1592\":1,\"1595\":1}}],[\"首先不会自己尝试加载这个类\",{\"1\":{\"1175\":1}}],[\"首先标记所有需要回收的对象\",{\"1\":{\"1130\":1}}],[\"首先标记出所有需要回收的对象\",{\"1\":{\"204\":1}}],[\"首先检查类是否加载过\",{\"1\":{\"197\":1,\"1175\":1}}],[\"首先\",{\"1\":{\"94\":1}}],[\"首页\",{\"0\":{\"0\":1}}],[\"⠹\",{\"1\":{\"94\":1}}],[\"⠋\",{\"1\":{\"94\":2}}],[\"✔\",{\"1\":{\"94\":4}}],[\"卡片服务\",{\"1\":{\"1702\":2}}],[\"卡片提供方实例管理模块\",{\"1\":{\"1702\":2}}],[\"卡片使用方\",{\"1\":{\"1702\":1}}],[\"卡死问题\",{\"0\":{\"118\":1}}],[\"卡在copy\",{\"0\":{\"94\":1}}],[\"卡住\",{\"0\":{\"34\":1}}],[\"然而并不是\",{\"1\":{\"383\":1}}],[\"然而这个bug只有在8\",{\"1\":{\"70\":1}}],[\"然后调用binder\",{\"1\":{\"1786\":1}}],[\"然后执行waitforresponse\",{\"1\":{\"1756\":1}}],[\"然后销毁子类\",{\"1\":{\"1283\":1}}],[\"然后就不在改变\",{\"1\":{\"1274\":1}}],[\"然后对之前的区域进行全部回收\",{\"1\":{\"1131\":1}}],[\"然后对每一个小组分别进行插入排序\",{\"1\":{\"281\":1}}],[\"然后统一回收所有标记对象\",{\"1\":{\"1130\":1}}],[\"然后以线程安全的方式交换数据\",{\"1\":{\"958\":1}}],[\"然后atomicintegerarray会将当前数组\",{\"1\":{\"900\":1}}],[\"然后在segment里进行插入操作\",{\"1\":{\"894\":1}}],[\"然后在⼦线程中得到这个\",{\"1\":{\"384\":1}}],[\"然后去行动\",{\"1\":{\"814\":1}}],[\"然后添加下面的语句\",{\"1\":{\"638\":1}}],[\"然后判断该位置entry对象中的key是否和get的key⼀致\",{\"1\":{\"382\":1}}],[\"然后把\",{\"1\":{\"359\":1}}],[\"然后再运行ssh\",{\"1\":{\"1922\":1}}],[\"然后再收集\",{\"1\":{\"287\":1}}],[\"然后再把已使用过的内存空间一次清理掉\",{\"1\":{\"206\":1}}],[\"然后收集\",{\"1\":{\"287\":1}}],[\"然后利用临时数组\",{\"1\":{\"284\":1}}],[\"然后继续往上层比较\",{\"1\":{\"283\":1}}],[\"然后将\",{\"1\":{\"207\":1}}],[\"然后清空\",{\"1\":{\"207\":2}}],[\"然后\",{\"1\":{\"85\":1,\"314\":1}}],[\"重建epoll事件\",{\"1\":{\"1829\":1}}],[\"重建二叉树\",{\"1\":{\"298\":1}}],[\"重塑模块化\",{\"1\":{\"1491\":1}}],[\"重点参考优点\",{\"1\":{\"1647\":1}}],[\"重点在于业务\",{\"1\":{\"1488\":1}}],[\"重点概念用一篇文章完全说明\",{\"1\":{\"228\":1}}],[\"重视短期利益\",{\"1\":{\"1268\":1}}],[\"重量锁\",{\"0\":{\"1249\":1}}],[\"重量级锁状态\",{\"1\":{\"845\":1}}],[\"重入读写锁\",{\"1\":{\"932\":1}}],[\"重入锁\",{\"0\":{\"881\":1,\"882\":1},\"1\":{\"881\":1}}],[\"重进入\",{\"1\":{\"885\":1}}],[\"重排序不能改变执行结果\",{\"1\":{\"859\":1}}],[\"重排序\",{\"0\":{\"859\":1}}],[\"重复写\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"重复代码\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"重复使用\",{\"1\":{\"905\":1}}],[\"重复可验证性\",{\"1\":{\"787\":1}}],[\"重复步骤2~3\",{\"1\":{\"283\":1}}],[\"重复步骤2~5\",{\"1\":{\"280\":1}}],[\"重复步骤3\",{\"1\":{\"280\":1}}],[\"重复步骤1\",{\"1\":{\"278\":1}}],[\"重复上面1\",{\"1\":{\"279\":1}}],[\"重构与开发者心态\",{\"1\":{\"1483\":1}}],[\"重构的时机\",{\"1\":{\"1286\":1}}],[\"重构手法列出\",{\"1\":{\"1286\":1}}],[\"重构手法与情景映射\",{\"1\":{\"1253\":1}}],[\"重构目标\",{\"1\":{\"1271\":1}}],[\"重构破坏现有程序\",{\"1\":{\"1268\":1}}],[\"重构是长远利益\",{\"1\":{\"1268\":1}}],[\"重构认知普及的瓶颈\",{\"1\":{\"1268\":1}}],[\"重构和修改功能是两件事\",{\"1\":{\"1253\":1,\"1271\":1,\"1286\":1}}],[\"重构原因\",{\"1\":{\"1253\":1}}],[\"重构原则\",{\"1\":{\"1253\":1}}],[\"重构会引入中间层\",{\"1\":{\"1253\":1}}],[\"重构修改清单\",{\"1\":{\"1253\":1,\"1286\":1}}],[\"重构不需要了解软件行为\",{\"1\":{\"1253\":1}}],[\"重构实战\",{\"0\":{\"1286\":1},\"1\":{\"1253\":2,\"1286\":1}}],[\"重构\",{\"0\":{\"556\":1,\"1253\":1,\"1992\":1},\"1\":{\"265\":1,\"1253\":1},\"2\":{\"1254\":1,\"1257\":1,\"1260\":1,\"1263\":1,\"1266\":1,\"1269\":1,\"1272\":1,\"1275\":1,\"1278\":1,\"1281\":1,\"1284\":1,\"1287\":1}}],[\"重构之代码坏味道\",{\"0\":{\"265\":1}}],[\"重载是在一个类里面\",{\"1\":{\"159\":1}}],[\"重写思路\",{\"0\":{\"1637\":1}}],[\"重写rxbus原因\",{\"0\":{\"1636\":1}}],[\"重写hugo\",{\"0\":{\"1632\":1}}],[\"重写增加灵活性\",{\"1\":{\"1283\":1}}],[\"重写\",{\"1\":{\"1188\":1}}],[\"重写扩展方法\",{\"1\":{\"916\":1}}],[\"重写是子类对父类的允许访问的方法的实现过程进行重新编写\",{\"1\":{\"159\":1}}],[\"重写和重载\",{\"0\":{\"159\":1}}],[\"重写父类方法\",{\"1\":{\"158\":1}}],[\"重新注册前会先移除之前的注册信息\",{\"1\":{\"1786\":1}}],[\"重新设计代码分层\",{\"1\":{\"1483\":1}}],[\"重新设计模块\",{\"1\":{\"1483\":1}}],[\"重新加载数据\",{\"1\":{\"1332\":1}}],[\"重新组织数据\",{\"0\":{\"1283\":1},\"1\":{\"1286\":1}}],[\"重新组织函数\",{\"0\":{\"1280\":1},\"1\":{\"1286\":1}}],[\"重新引起竞争\",{\"1\":{\"879\":1}}],[\"重新计算桶下标\",{\"0\":{\"353\":1}}],[\"重新计算右节点索引\",{\"1\":{\"283\":1}}],[\"重新计算左节点索引\",{\"1\":{\"283\":1}}],[\"重新构建大根堆\",{\"1\":{\"283\":1}}],[\"重新构建大顶堆\",{\"1\":{\"283\":1}}],[\"重新运行\",{\"1\":{\"85\":1}}],[\"重新换掉有问题的图片后可以生成apk包\",{\"1\":{\"76\":1}}],[\"重置idle\",{\"1\":{\"1846\":1}}],[\"重置pendingidlehandlercount为0\",{\"1\":{\"1846\":1}}],[\"重置homebrew\",{\"1\":{\"79\":1}}],[\"重置brew\",{\"1\":{\"79\":1}}],[\"重启nginx\",{\"0\":{\"639\":1}}],[\"重启服务授权\",{\"1\":{\"619\":1}}],[\"重启服务\",{\"0\":{\"628\":1,\"696\":1},\"1\":{\"613\":1}}],[\"重启\",{\"1\":{\"67\":1,\"711\":1}}],[\"重启idea\",{\"1\":{\"67\":1}}],[\"扶额暴汗\",{\"1\":{\"76\":1}}],[\"千万不要对着别的文件一通操作\",{\"1\":{\"76\":1}}],[\"方位方式2种\",{\"1\":{\"1118\":1}}],[\"方便后续开发\",{\"1\":{\"1604\":1}}],[\"方便查看\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"方便数据类型校验\",{\"1\":{\"1283\":1}}],[\"方便开发人员使用\",{\"1\":{\"1200\":1}}],[\"方便编写服务池\",{\"1\":{\"805\":1}}],[\"方便回溯与追查问题\",{\"1\":{\"305\":1}}],[\"方法加载动画\",{\"1\":{\"1711\":1}}],[\"方法以及变量\",{\"1\":{\"1709\":1}}],[\"方法进行\",{\"1\":{\"1708\":1}}],[\"方法进行缩放\",{\"1\":{\"1707\":1}}],[\"方法进行扩容\",{\"1\":{\"332\":1}}],[\"方法内配置以下哪几个组件来自定义页面转场动效\",{\"1\":{\"1702\":1}}],[\"方法内联\",{\"1\":{\"1210\":1,\"1211\":1}}],[\"方法用法\",{\"1\":{\"1604\":1}}],[\"方法就是对应的api接口方法\",{\"1\":{\"1592\":1}}],[\"方法签名转换\",{\"1\":{\"1530\":1}}],[\"方法类型转换\",{\"1\":{\"1530\":1}}],[\"方法说明不介绍\",{\"1\":{\"1530\":1}}],[\"方法体\",{\"1\":{\"1518\":1}}],[\"方法覆盖\",{\"1\":{\"1518\":1}}],[\"方法切入点\",{\"1\":{\"1374\":1}}],[\"方法中断网络请求\",{\"1\":{\"1711\":1}}],[\"方法中的代码块\",{\"1\":{\"1709\":1}}],[\"方法中\",{\"1\":{\"1540\":1}}],[\"方法中加载视图之前设置回原来主题\",{\"1\":{\"1320\":1}}],[\"方法中类的静态属性引用对象\",{\"1\":{\"200\":1}}],[\"方法计数器\",{\"1\":{\"1209\":1}}],[\"方法执行遇到异常\",{\"1\":{\"1185\":1}}],[\"方法表\",{\"1\":{\"1076\":1,\"1109\":2}}],[\"方法描述符descriptor\",{\"1\":{\"993\":1}}],[\"方法name\",{\"1\":{\"993\":1}}],[\"方法调用指令\",{\"1\":{\"993\":1}}],[\"方法调用\",{\"0\":{\"1186\":1},\"1\":{\"993\":1}}],[\"方法调用和返回\",{\"0\":{\"990\":1,\"1192\":1}}],[\"方法后\",{\"1\":{\"958\":1}}],[\"方法后仍然处于不可达状态时\",{\"1\":{\"145\":1}}],[\"方法重置\",{\"1\":{\"906\":1}}],[\"方法优于字段\",{\"1\":{\"799\":1}}],[\"方法和字段标识访问\",{\"1\":{\"793\":2}}],[\"方法论对应实战\",{\"1\":{\"1253\":1}}],[\"方法论\",{\"0\":{\"1253\":1},\"1\":{\"790\":1,\"1253\":1}}],[\"方法是公有的\",{\"1\":{\"738\":1}}],[\"方法二\",{\"0\":{\"416\":1}}],[\"方法的response事件\",{\"1\":{\"1828\":1}}],[\"方法的\",{\"1\":{\"1708\":1}}],[\"方法的每条路径是否有返回值\",{\"1\":{\"1200\":1}}],[\"方法的参数或者对静态方法的调用\",{\"1\":{\"735\":1}}],[\"方法的情况下\",{\"1\":{\"385\":1}}],[\"方法的时候\",{\"1\":{\"385\":1}}],[\"方法时\",{\"1\":{\"368\":2}}],[\"方法实现\",{\"1\":{\"365\":1}}],[\"方法返回字节指令码\",{\"1\":{\"1185\":1}}],[\"方法返回地址\",{\"0\":{\"1185\":1}}],[\"方法返回地址等\",{\"1\":{\"1115\":1}}],[\"方法返回\",{\"1\":{\"364\":1}}],[\"方法在传入的对象存在\",{\"1\":{\"334\":1}}],[\"方法来指定输出\",{\"1\":{\"1843\":1}}],[\"方法来保证容量足够\",{\"1\":{\"332\":1}}],[\"方法来遍历实现了\",{\"1\":{\"327\":1}}],[\"方法能够产生一个\",{\"1\":{\"327\":1}}],[\"方法字节码表\",{\"1\":{\"1109\":1}}],[\"方法字节码表插入code\",{\"1\":{\"1022\":1}}],[\"方法字节码\",{\"1\":{\"271\":1,\"1086\":1}}],[\"方法信息等\",{\"1\":{\"1115\":1}}],[\"方法信息\",{\"1\":{\"271\":1,\"1086\":1}}],[\"方法区中类静态属性引用对象\",{\"1\":{\"1125\":1}}],[\"方法区中常量引用对象\",{\"1\":{\"200\":1,\"1125\":1}}],[\"方法区溢出\",{\"1\":{\"1119\":1}}],[\"方法区\",{\"1\":{\"1115\":1}}],[\"方法区存储类信息\",{\"1\":{\"1108\":1}}],[\"方法区method\",{\"1\":{\"271\":1,\"1086\":1}}],[\"方法过长\",{\"1\":{\"265\":1}}],[\"方法名字相同\",{\"1\":{\"159\":1}}],[\"方法\",{\"1\":{\"145\":1,\"167\":1,\"200\":2,\"207\":1,\"216\":1,\"334\":1,\"335\":1,\"350\":1,\"381\":1,\"385\":1,\"738\":1,\"913\":1,\"943\":1,\"946\":1,\"958\":1,\"1110\":2,\"1271\":1,\"1361\":1,\"1588\":1,\"1707\":2,\"1708\":2,\"1713\":1,\"1726\":1,\"1731\":1,\"1732\":1,\"1755\":3,\"1756\":1,\"1761\":1,\"1777\":1,\"1828\":1,\"1842\":1,\"1861\":1,\"1866\":1,\"1867\":1,\"1869\":3}}],[\"方案是arouter+auto\",{\"1\":{\"1479\":1}}],[\"方案\",{\"1\":{\"230\":1,\"1262\":4,\"1274\":6,\"1277\":5,\"1283\":3,\"1320\":1}}],[\"方案二\",{\"1\":{\"73\":1}}],[\"方案一\",{\"1\":{\"73\":1}}],[\"方式开发\",{\"1\":{\"1491\":1}}],[\"方式操作\",{\"1\":{\"12\":1,\"731\":1}}],[\"方式\",{\"1\":{\"12\":1,\"731\":1}}],[\"改造出适应当前项目的aop\",{\"1\":{\"1561\":1}}],[\"改造cc过于复杂\",{\"1\":{\"1494\":1}}],[\"改名为\",{\"1\":{\"1488\":1}}],[\"改成链式调用会简单一些\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"改为传递整个对象\",{\"1\":{\"1274\":1}}],[\"改为不透明\",{\"1\":{\"70\":1}}],[\"改善其内部结构\",{\"1\":{\"1253\":1}}],[\"改善既有代码设计\",{\"0\":{\"1253\":1},\"1\":{\"1253\":1}}],[\"改善代码设计\",{\"0\":{\"1992\":1},\"1\":{\"265\":1},\"2\":{\"1254\":1,\"1257\":1,\"1260\":1,\"1263\":1,\"1266\":1,\"1269\":1,\"1272\":1,\"1275\":1,\"1278\":1,\"1281\":1,\"1284\":1,\"1287\":1}}],[\"改变通信方式\",{\"1\":{\"1483\":1,\"1491\":1}}],[\"改变条件\",{\"1\":{\"948\":2}}],[\"改变工作方式\",{\"1\":{\"796\":1}}],[\"改进api\",{\"0\":{\"775\":1}}],[\"改动较少\",{\"1\":{\"595\":1}}],[\"改target版本\",{\"1\":{\"70\":1}}],[\"把未使用的数据区域进行置0操作\",{\"1\":{\"1829\":1}}],[\"把主线程加入线程池\",{\"1\":{\"1725\":1}}],[\"把逻辑和视图分离\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"把类数据加载到方法区\",{\"1\":{\"978\":1,\"1009\":1,\"1030\":1}}],[\"把一些只有特殊场景下才用到的类转移到其他地方\",{\"1\":{\"808\":1}}],[\"把一个api拆分成两个或多个组成部分\",{\"1\":{\"793\":1}}],[\"把有关联的类防止在同一个包中\",{\"1\":{\"808\":1}}],[\"把有关联的方法防止在同一个类中\",{\"1\":{\"808\":1}}],[\"把\",{\"0\":{\"1110\":1},\"1\":{\"750\":1}}],[\"把原理的关键路径突现出来\",{\"1\":{\"573\":1}}],[\"把原数组整个复制到新数组中\",{\"1\":{\"332\":1}}],[\"把字符串转换成整数\",{\"1\":{\"298\":1}}],[\"把数字翻译成字符串\",{\"1\":{\"298\":1}}],[\"把数组排成最小的数\",{\"1\":{\"298\":1}}],[\"把数组不断划分成子序列\",{\"1\":{\"284\":1}}],[\"把数组分割成若干h个小组\",{\"1\":{\"281\":1}}],[\"把传进来的arr数组\",{\"1\":{\"285\":1}}],[\"把值放回到nums数组中\",{\"1\":{\"285\":1}}],[\"把临时数组中已排序的数复制到nums数组中\",{\"1\":{\"284\":1}}],[\"把最大值的索引变成父节点索引\",{\"1\":{\"283\":1}}],[\"把父节点的索引指向当前遍历的索引\",{\"1\":{\"283\":1}}],[\"把基准值与头指针的数交换\",{\"1\":{\"279\":1}}],[\"把它们封装起来\",{\"1\":{\"257\":1,\"395\":1,\"512\":1}}],[\"把对象的属性与行为封装为一个独立整体\",{\"1\":{\"158\":1}}],[\"把方向省掉\",{\"1\":{\"70\":1}}],[\"把精力都投入到业务设计上框架为其适配mp\",{\"1\":{\"12\":1,\"731\":1}}],[\">github同步\",{\"0\":{\"1930\":1}}],[\">getpostmessage\",{\"1\":{\"1841\":1}}],[\">getcontextobject\",{\"1\":{\"1805\":1}}],[\">getlongfield\",{\"1\":{\"1756\":1,\"1762\":2}}],[\">getservice\",{\"1\":{\"1726\":1,\"1799\":1}}],[\">getobjectarrayelement\",{\"1\":{\"1530\":2}}],[\">getintarrayelements\",{\"1\":{\"1530\":1}}],[\">zygoteinit\",{\"1\":{\"1869\":1}}],[\">msg\",{\"1\":{\"1842\":1}}],[\">mqueue\",{\"1\":{\"1842\":1}}],[\">max\",{\"1\":{\"1770\":1}}],[\">queue\",{\"1\":{\"1841\":2}}],[\">querylocalinterface\",{\"1\":{\"1806\":1}}],[\">incstrong\",{\"1\":{\"1829\":1}}],[\">ipcsetdatareference\",{\"1\":{\"1798\":1}}],[\">issameobject\",{\"1\":{\"1530\":3}}],[\">new\",{\"1\":{\"1829\":2,\"1843\":1}}],[\">next\",{\"1\":{\"1790\":1}}],[\">nativedestroy\",{\"1\":{\"1830\":1}}],[\">nativeinit\",{\"1\":{\"1829\":1}}],[\">nativepollonce\",{\"1\":{\"1828\":1}}],[\">nativemessagequeue\",{\"1\":{\"1827\":1,\"1828\":1}}],[\">nativewake\",{\"1\":{\"1827\":1}}],[\">name\",{\"1\":{\"1790\":2}}],[\">nums\",{\"1\":{\"278\":1}}],[\">fork\",{\"1\":{\"1869\":1}}],[\">func\",{\"1\":{\"1789\":1}}],[\">fd\",{\"1\":{\"1789\":1}}],[\">false<\",{\"1\":{\"1320\":1}}],[\">runtimeinit\",{\"1\":{\"1869\":1}}],[\">run\",{\"1\":{\"1778\":1}}],[\">ready\",{\"1\":{\"1770\":1}}],[\">requested\",{\"1\":{\"1770\":3}}],[\">return\",{\"1\":{\"1770\":1}}],[\">restorecallingidentity\",{\"1\":{\"1717\":1}}],[\">releaseintarrayelements\",{\"1\":{\"1530\":1}}],[\">write\",{\"1\":{\"1827\":1}}],[\">writeint32\",{\"1\":{\"1727\":1}}],[\">wait\",{\"1\":{\"1770\":2}}],[\">work\",{\"1\":{\"1770\":2}}],[\">len\",{\"1\":{\"1790\":1}}],[\">loop\",{\"1\":{\"1843\":1}}],[\">looper\",{\"1\":{\"1770\":1,\"1826\":1,\"1827\":1,\"1828\":2,\"1842\":1,\"1843\":1}}],[\">localbinder\",{\"1\":{\"1762\":1}}],[\">linktodeath\",{\"1\":{\"1761\":1,\"1762\":1,\"1799\":1}}],[\">talkwithdriver\",{\"1\":{\"1778\":1}}],[\">type\",{\"1\":{\"1770\":3}}],[\">todo都为空时\",{\"1\":{\"1770\":1}}],[\">todo和\",{\"1\":{\"1770\":1}}],[\">todo\",{\"1\":{\"1761\":1,\"1770\":2}}],[\">transaction\",{\"1\":{\"1770\":1}}],[\">transact\",{\"1\":{\"1717\":1,\"1727\":1,\"1756\":2,\"1798\":1,\"1799\":1}}],[\">true<\",{\"1\":{\"1320\":2}}],[\">tree\",{\"1\":{\"559\":1}}],[\">jointhreadpool\",{\"1\":{\"1725\":1,\"1778\":2,\"1779\":1,\"1798\":1}}],[\">java\\bin\",{\"1\":{\"103\":1}}],[\">callstaticvoidmethod\",{\"1\":{\"1861\":1}}],[\">clearreference\",{\"1\":{\"1762\":1}}],[\">clearcallingidentity\",{\"1\":{\"1717\":1}}],[\">common\",{\"1\":{\"559\":1}}],[\">陈桐<\",{\"1\":{\"1555\":1}}],[\">xxxposter\",{\"1\":{\"1546\":1}}],[\">epoll\",{\"1\":{\"1828\":1,\"1829\":1}}],[\">enqueuemessage\",{\"1\":{\"1841\":2}}],[\">entry\",{\"1\":{\"1770\":1}}],[\">ensurelocalcapacity\",{\"1\":{\"1530\":1}}],[\">edit\",{\"1\":{\"67\":1}}],[\">data\",{\"1\":{\"1770\":1,\"1789\":1}}],[\">datasize\",{\"1\":{\"1756\":1}}],[\">decstrong\",{\"1\":{\"1830\":1}}],[\">death\",{\"1\":{\"1790\":3}}],[\">death对象\",{\"1\":{\"1761\":1}}],[\">deletelocalref\",{\"1\":{\"1527\":1}}],[\">dispatch\",{\"1\":{\"1386\":1,\"1669\":1}}],[\">prepare\",{\"1\":{\"1843\":1}}],[\">process\",{\"1\":{\"1869\":1}}],[\">procees\",{\"1\":{\"1869\":1}}],[\">proc\",{\"1\":{\"1761\":1}}],[\">ptr\",{\"1\":{\"1789\":1}}],[\">poolthread\",{\"1\":{\"1778\":1}}],[\">posttosubscription\",{\"1\":{\"1546\":1}}],[\">postsingleeventforeventtype\",{\"1\":{\"1546\":1}}],[\">postsingleevent\",{\"1\":{\"1546\":1}}],[\">poplocalframe\",{\"1\":{\"1530\":1}}],[\">pushlocalframe\",{\"1\":{\"1530\":1}}],[\">p\",{\"1\":{\"1521\":1}}],[\">view\",{\"1\":{\"1386\":1,\"1669\":1}}],[\">sendmessagedelayed\",{\"1\":{\"1841\":2}}],[\">sendmessageattime\",{\"1\":{\"1826\":1,\"1841\":2}}],[\">setthreadpoolmaxthreadcount\",{\"1\":{\"1779\":1}}],[\">seterror\",{\"1\":{\"1756\":1}}],[\">spawnpooledthread\",{\"1\":{\"1778\":2}}],[\">sayhello\",{\"1\":{\"1726\":1}}],[\">sthreadlocal\",{\"1\":{\"1843\":1}}],[\">startthreadpool\",{\"1\":{\"1725\":1,\"1778\":2,\"1779\":1,\"1798\":1}}],[\">store\",{\"1\":{\"1386\":1,\"1669\":1}}],[\">signature\",{\"1\":{\"559\":1}}],[\">unused\",{\"1\":{\"1317\":1}}],[\">unusedresources\",{\"1\":{\"1317\":1}}],[\">util\",{\"1\":{\"559\":1}}],[\">用于跳转下一个方法\",{\"1\":{\"1094\":1}}],[\">3a\",{\"1\":{\"853\":1}}],[\">2b\",{\"1\":{\"853\":1}}],[\">ams\",{\"1\":{\"1869\":1}}],[\">awoken\",{\"1\":{\"1828\":1}}],[\">await\",{\"1\":{\"923\":1}}],[\">android\",{\"1\":{\"1827\":1,\"1828\":1,\"1829\":1,\"1830\":1}}],[\">analyze\",{\"1\":{\"1317\":1}}],[\">allow\",{\"1\":{\"1790\":2}}],[\">addservice\",{\"1\":{\"1725\":1,\"1798\":1}}],[\">armmvp\",{\"1\":{\"1549\":1}}],[\">activitythread\",{\"1\":{\"1869\":1}}],[\">activity\",{\"1\":{\"1320\":1}}],[\">application\",{\"1\":{\"1320\":1}}],[\">a\",{\"1\":{\"853\":1}}],[\">buffer\",{\"1\":{\"1770\":1}}],[\">b\",{\"1\":{\"853\":1}}],[\">>>>>\",{\"1\":{\"1843\":1}}],[\">>>\",{\"1\":{\"351\":4,\"354\":5,\"1604\":1}}],[\">>\",{\"1\":{\"332\":3,\"354\":3,\"381\":1,\"1546\":2}}],[\">=\",{\"1\":{\"281\":1,\"284\":2,\"285\":1,\"337\":1,\"350\":1,\"352\":1,\"354\":1,\"368\":1,\"880\":1,\"917\":1,\"993\":1,\"1036\":1,\"1203\":1,\"1416\":1,\"1417\":1,\"1790\":1,\"1826\":1,\"1828\":1,\"1829\":1}}],[\">handlechildproc\",{\"1\":{\"1869\":1}}],[\">handler\",{\"1\":{\"1842\":1}}],[\">handleevent\",{\"1\":{\"1828\":1}}],[\">handlemessage\",{\"1\":{\"1828\":1}}],[\">handle\",{\"1\":{\"1790\":5}}],[\">h\",{\"1\":{\"281\":2}}],[\">清空缓存\",{\"1\":{\"106\":1}}],[\">微信\",{\"1\":{\"106\":1}}],[\">应用管理\",{\"1\":{\"106\":1}}],[\">设置\",{\"1\":{\"106\":1}}],[\">\",{\"1\":{\"70\":1,\"103\":1,\"197\":2,\"279\":2,\"281\":2,\"283\":3,\"284\":1,\"285\":1,\"332\":2,\"333\":1,\"334\":1,\"338\":2,\"358\":1,\"359\":1,\"365\":1,\"381\":2,\"543\":1,\"608\":1,\"672\":1,\"711\":1,\"735\":4,\"822\":1,\"833\":1,\"870\":1,\"880\":1,\"886\":1,\"917\":1,\"949\":1,\"950\":3,\"958\":1,\"979\":5,\"984\":2,\"993\":1,\"1008\":3,\"1009\":6,\"1015\":1,\"1023\":1,\"1030\":2,\"1036\":1,\"1055\":1,\"1175\":2,\"1198\":3,\"1317\":1,\"1320\":8,\"1326\":6,\"1329\":1,\"1332\":6,\"1346\":21,\"1349\":4,\"1358\":2,\"1364\":2,\"1405\":4,\"1416\":7,\"1417\":2,\"1456\":2,\"1474\":1,\"1488\":1,\"1518\":23,\"1521\":1,\"1546\":8,\"1555\":12,\"1583\":1,\"1589\":1,\"1592\":2,\"1598\":5,\"1613\":1,\"1711\":2,\"1717\":2,\"1725\":1,\"1726\":3,\"1788\":1,\"1790\":1,\"1798\":2,\"1806\":1,\"1865\":3}}],[\"$l\",{\"1\":{\"1604\":1}}],[\"$logfile\",{\"1\":{\"1583\":2}}],[\"$random\",{\"1\":{\"1583\":1}}],[\"$request\",{\"1\":{\"651\":1}}],[\"$remote\",{\"1\":{\"638\":1}}],[\"$env\",{\"1\":{\"1534\":2}}],[\"$degrees\",{\"1\":{\"1518\":1}}],[\"$item\",{\"1\":{\"1518\":1}}],[\"$index\",{\"1\":{\"1518\":4}}],[\"$key\",{\"1\":{\"1518\":2}}],[\"$value\",{\"1\":{\"1518\":4}}],[\"$b\",{\"1\":{\"1518\":1}}],[\"$0x0\",{\"1\":{\"1222\":1}}],[\"$0×0\",{\"1\":{\"841\":2}}],[\"$7$5\",{\"1\":{\"834\":1}}],[\"$jvm\",{\"1\":{\"711\":2}}],[\"$java\",{\"1\":{\"67\":2}}],[\"$2$3$4$5\",{\"1\":{\"822\":1}}],[\"$2\",{\"1\":{\"711\":2,\"715\":1,\"1323\":4,\"1335\":4,\"1459\":4}}],[\"$a\",{\"1\":{\"1518\":2}}],[\"$android\",{\"1\":{\"1371\":5}}],[\"$arg\",{\"1\":{\"715\":1}}],[\"$argv\",{\"1\":{\"644\":1}}],[\"$appname\",{\"1\":{\"711\":12}}],[\"$filename\",{\"1\":{\"1323\":1,\"1335\":1,\"1459\":1}}],[\"$file\",{\"1\":{\"644\":1}}],[\"$uri\",{\"1\":{\"640\":2}}],[\"$1\",{\"1\":{\"638\":1,\"711\":3,\"715\":2,\"1323\":1,\"1335\":1,\"1459\":1}}],[\"$pixels\",{\"1\":{\"1518\":1}}],[\"$pid\",{\"1\":{\"711\":7}}],[\"$port\",{\"1\":{\"711\":2}}],[\"$proxy\",{\"1\":{\"638\":1}}],[\"$path\",{\"1\":{\"67\":1}}],[\"$host\",{\"1\":{\"638\":1}}],[\"$\",{\"1\":{\"79\":6,\"638\":1,\"711\":3,\"715\":1,\"820\":1,\"867\":2,\"1050\":1,\"1323\":26,\"1326\":5,\"1335\":25,\"1459\":26,\"1475\":5,\"1518\":4,\"1534\":33,\"1555\":1,\"1583\":1,\"1921\":1,\"1922\":4,\"1952\":2,\"1963\":2}}],[\"6个\",{\"1\":{\"1779\":1}}],[\"6个线程\",{\"1\":{\"1779\":1}}],[\"6e\",{\"1\":{\"1367\":1}}],[\"6b\",{\"1\":{\"1367\":1}}],[\"69\",{\"1\":{\"1367\":2}}],[\"6<\",{\"1\":{\"672\":1}}],[\"6后\",{\"1\":{\"672\":1}}],[\"650158515\",{\"1\":{\"1978\":1}}],[\"65001\",{\"1\":{\"615\":1}}],[\"65535\",{\"1\":{\"1078\":1}}],[\"65536错误\",{\"1\":{\"28\":1}}],[\"65536\",{\"1\":{\"28\":1}}],[\"65\",{\"1\":{\"298\":1,\"1367\":1}}],[\"628\",{\"1\":{\"1866\":1}}],[\"62\",{\"1\":{\"298\":1,\"1367\":1}}],[\"660\",{\"1\":{\"1858\":1}}],[\"662\",{\"1\":{\"822\":1}}],[\"66\",{\"1\":{\"298\":1,\"1367\":2}}],[\"6670943\",{\"1\":{\"121\":1}}],[\"60336189\",{\"1\":{\"1908\":1}}],[\"600\",{\"1\":{\"1374\":1}}],[\"60dp\",{\"1\":{\"1346\":2}}],[\"60\",{\"1\":{\"298\":1,\"615\":1,\"1307\":1,\"1367\":1,\"1435\":2}}],[\"60l\",{\"1\":{\"247\":1,\"828\":1}}],[\"63\",{\"1\":{\"298\":1,\"1367\":2}}],[\"612\",{\"1\":{\"1346\":1}}],[\"61\",{\"1\":{\"298\":1,\"1367\":2}}],[\"61980a\",{\"1\":{\"229\":1}}],[\"6113669\",{\"1\":{\"64\":1}}],[\"676767\",{\"1\":{\"1518\":1}}],[\"67\",{\"1\":{\"103\":1,\"298\":1,\"1367\":1}}],[\"640x1136\",{\"1\":{\"1435\":1}}],[\"640x960\",{\"1\":{\"1435\":1}}],[\"640\",{\"1\":{\"1435\":1}}],[\"640dpi\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"64位机器\",{\"1\":{\"1182\":1}}],[\"64位\",{\"1\":{\"635\":1}}],[\"64k\",{\"1\":{\"631\":1}}],[\"64m\",{\"1\":{\"631\":1}}],[\"643b901503606e36cc7e4672bfa38821aa111c13\",{\"1\":{\"614\":1,\"615\":1,\"630\":1}}],[\"64\",{\"1\":{\"103\":1,\"298\":1,\"358\":1,\"615\":1,\"1367\":1,\"1530\":2,\"1534\":1}}],[\"68\",{\"1\":{\"94\":1,\"298\":1,\"1338\":2,\"1367\":1,\"1435\":2}}],[\"6\",{\"0\":{\"217\":1,\"261\":1,\"283\":1,\"353\":1,\"671\":1,\"672\":1,\"893\":1,\"1085\":1,\"1180\":1,\"1314\":1},\"1\":{\"64\":1,\"103\":1,\"144\":1,\"145\":1,\"181\":1,\"227\":1,\"228\":1,\"246\":1,\"265\":1,\"298\":1,\"405\":1,\"525\":1,\"598\":2,\"672\":2,\"738\":1,\"769\":1,\"793\":1,\"796\":1,\"799\":1,\"802\":1,\"805\":1,\"822\":1,\"984\":2,\"1078\":1,\"1253\":1,\"1256\":1,\"1259\":1,\"1262\":1,\"1274\":1,\"1277\":1,\"1280\":1,\"1283\":1,\"1286\":3,\"1317\":1,\"1338\":2,\"1346\":3,\"1367\":1,\"1435\":3,\"1476\":1,\"1481\":1,\"1482\":1,\"1521\":1,\"1534\":12,\"1555\":1,\"1632\":1,\"1756\":2,\"1778\":1,\"1779\":1,\"1780\":1}}],[\"要注意包\",{\"1\":{\"1604\":1}}],[\"要提供通用shapeutil工具类\",{\"1\":{\"1540\":1}}],[\"要提示色值\",{\"1\":{\"1445\":1}}],[\"要分开写\",{\"1\":{\"1540\":1}}],[\"要通过回调来操作\",{\"1\":{\"1540\":1}}],[\"要抽象出来增加复用性\",{\"1\":{\"1540\":1}}],[\"要充分利用\",{\"1\":{\"1530\":1}}],[\"要实现runnable\",{\"1\":{\"1527\":1}}],[\"要存在一致性\",{\"1\":{\"1445\":1}}],[\"要绘制的内容\",{\"1\":{\"1445\":1}}],[\"要有批注来进行提示\",{\"1\":{\"1445\":1}}],[\"要有统一尺寸\",{\"1\":{\"1444\":1}}],[\"要有全局统一要求\",{\"1\":{\"1444\":1}}],[\"要点\",{\"1\":{\"1259\":8,\"1262\":10,\"1274\":14,\"1277\":8,\"1280\":9,\"1283\":14}}],[\"要编译优化程度更高代码\",{\"1\":{\"1206\":1}}],[\"要减少冗余重复代码\",{\"1\":{\"1069\":1}}],[\"要先初始化超类\",{\"1\":{\"1002\":1}}],[\"要根据受众分类\",{\"1\":{\"808\":1}}],[\"要为增加参数做好准备\",{\"1\":{\"802\":1}}],[\"要小心\",{\"1\":{\"802\":1}}],[\"要限制访问权限\",{\"1\":{\"799\":1}}],[\"要求\",{\"1\":{\"1443\":1}}],[\"要求标注\",{\"1\":{\"1440\":1}}],[\"要求清单\",{\"1\":{\"793\":1}}],[\"要求语法严格\",{\"1\":{\"657\":1}}],[\"要处理机器语言\",{\"1\":{\"787\":1}}],[\"要么不执行\",{\"1\":{\"1223\":1}}],[\"要么全部执行\",{\"1\":{\"1223\":1}}],[\"要么就不给我\",{\"1\":{\"778\":1}}],[\"要么用的有问题\",{\"1\":{\"61\":1}}],[\"要牢记api用户绝对是一个有创意的群体\",{\"1\":{\"760\":1}}],[\"要约束一大堆方法\",{\"1\":{\"760\":1}}],[\"要约束一个方法行为\",{\"1\":{\"760\":1}}],[\"要定义清晰才能理解精准\",{\"1\":{\"750\":1}}],[\"要跨域去获取数据有3中方法\",{\"1\":{\"649\":1}}],[\"要言不烦\",{\"1\":{\"571\":1}}],[\"要尽可能大\",{\"1\":{\"352\":1}}],[\"要大\",{\"1\":{\"339\":1}}],[\"要考虑远程通信\",{\"1\":{\"312\":1}}],[\"要写一篇文章专门阐述逻辑\",{\"1\":{\"271\":1,\"1086\":1}}],[\"要关注技术成果与产出量化\",{\"1\":{\"230\":1}}],[\"要不没命名\",{\"1\":{\"61\":1}}],[\"这成为非阻塞的调用方式\",{\"1\":{\"1751\":1}}],[\"这段空间内所有被释放掉\",{\"1\":{\"1530\":1}}],[\"这套思想应用安卓场景需要适配\",{\"1\":{\"1482\":1}}],[\"这点导致gc进行时必须停顿所有java线程\",{\"1\":{\"1135\":1}}],[\"这点要特别注意\",{\"1\":{\"100\":1}}],[\"这两个步骤实质上是线程a在向线程b发送消息\",{\"1\":{\"858\":1}}],[\"这说明这个线程可能有性能问题\",{\"1\":{\"833\":1}}],[\"这才是王道\",{\"1\":{\"805\":1}}],[\"这使得整个程序架构更加清晰\",{\"1\":{\"805\":1}}],[\"这种线程由内核来完成线程切换\",{\"1\":{\"1225\":1}}],[\"这种策略\",{\"1\":{\"845\":1}}],[\"这种方式\",{\"1\":{\"754\":1}}],[\"这种架构将软件分成若干个水平层\",{\"1\":{\"311\":1}}],[\"这通过让customer类持有一个类型为address的成员变量类实现\",{\"1\":{\"738\":1}}],[\"这就是okr封面评论\",{\"0\":{\"592\":1}}],[\"这还会清除尾随null之前遇到的所有其他过时的条目\",{\"1\":{\"381\":1}}],[\"这样重复写来写去很烦\",{\"1\":{\"1601\":1}}],[\"这样会造成程序的整体不稳定\",{\"1\":{\"1595\":1}}],[\"这样会造成一致性问题\",{\"1\":{\"796\":1}}],[\"这样写法你说优秀不优秀\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"这样耦合在一起的编写不简洁\",{\"1\":{\"1309\":1}}],[\"这样是公平锁\",{\"1\":{\"881\":1}}],[\"这样一来就会出现\",{\"1\":{\"385\":1}}],[\"这样一来\",{\"1\":{\"385\":1}}],[\"这样的话\",{\"1\":{\"382\":1}}],[\"这样就不存在线程安全问题\",{\"1\":{\"379\":1}}],[\"这样同时多个线程访问该变量并不会彼此相互影响\",{\"1\":{\"379\":1}}],[\"这样在最后的元素就是最大的数\",{\"1\":{\"278\":1}}],[\"这些写起布局清爽\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"这些技术如此精彩\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"这些老对象会被垃圾收集器回收\",{\"1\":{\"368\":1}}],[\"这些单元都是分布式的\",{\"1\":{\"314\":1}}],[\"这在实现\",{\"1\":{\"364\":1}}],[\"这意味着同一时刻多个线程同时写入\",{\"1\":{\"325\":1}}],[\"这导致系统依赖大量的微服务\",{\"1\":{\"314\":1}}],[\"这里就是我们要写代码的地方啦\",{\"1\":{\"1555\":1}}],[\"这里是针对从文件中选图片的处理\",{\"1\":{\"1417\":1}}],[\"这里是针对文件路径处理\",{\"1\":{\"1417\":1}}],[\"这里其实就是\",{\"1\":{\"1352\":1,\"1660\":1}}],[\"这里将导致instanceholder类被初始化\",{\"1\":{\"863\":1}}],[\"这里的\",{\"1\":{\"738\":1}}],[\"这里需要注意的是\",{\"1\":{\"649\":1}}],[\"这里主要讲cors的使用与配置\",{\"1\":{\"649\":1}}],[\"这里填写回调\",{\"1\":{\"259\":1}}],[\"这里提到的共享内存模型指的就是\",{\"1\":{\"151\":1}}],[\"这是file\",{\"1\":{\"1772\":1}}],[\"这是我的项目\",{\"1\":{\"1453\":1}}],[\"这是为什么\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"这是通过反射获得参数化类型的依据\",{\"1\":{\"1202\":1}}],[\"这是合同书和过去一年的银行工资流水\",{\"1\":{\"259\":1,\"447\":1}}],[\"这是项目主页的案例\",{\"1\":{\"0\":1}}],[\"这个过程便会发出死亡通知的回调\",{\"1\":{\"1786\":1}}],[\"这个过程实质上是线程a通过主内存向线程b发送消息\",{\"1\":{\"862\":1}}],[\"这个\",{\"1\":{\"1647\":1}}],[\"这个rxbus完美抄袭eventbus\",{\"0\":{\"1635\":1}}],[\"这个field不用关注\",{\"1\":{\"1604\":1}}],[\"这个类中核心的一句话\",{\"1\":{\"1604\":1}}],[\"这个体验也太好了\",{\"1\":{\"1506\":1}}],[\"这个是验证可用的\",{\"1\":{\"1392\":1,\"1675\":1}}],[\"这个是核心模板\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"这个变量\",{\"1\":{\"886\":1}}],[\"这个变量上\",{\"1\":{\"61\":1}}],[\"这个新的协议完全是由\",{\"1\":{\"649\":1}}],[\"这个映射由threadlocal类维护\",{\"1\":{\"381\":1}}],[\"这个性质和\",{\"1\":{\"351\":1}}],[\"这个操作代价很高\",{\"1\":{\"332\":1}}],[\"这个模式主要分成两部分\",{\"1\":{\"314\":1}}],[\"这个层面解决问题\",{\"1\":{\"230\":1}}],[\"这个非常危险\",{\"1\":{\"227\":1}}],[\"这个对象的状态就切换到了\",{\"1\":{\"145\":1}}],[\"问题反馈解答\",{\"1\":{\"1595\":1}}],[\"问题背景\",{\"1\":{\"1358\":1}}],[\"问题定位\",{\"1\":{\"787\":1}}],[\"问题当前项目阶段\",{\"1\":{\"757\":1}}],[\"问题原因\",{\"1\":{\"70\":1}}],[\"问题出在\",{\"1\":{\"61\":1}}],[\"问题出在project\",{\"1\":{\"61\":1}}],[\"问题\",{\"0\":{\"745\":1},\"1\":{\"52\":1,\"230\":1,\"598\":1,\"604\":1,\"644\":1,\"799\":1,\"1286\":1,\"1358\":1,\"1966\":1}}],[\"关于请求返回的响应码\",{\"1\":{\"1712\":1}}],[\"关于容器组件\",{\"1\":{\"1708\":1}}],[\"关于\",{\"1\":{\"1708\":8,\"1709\":2,\"1713\":3}}],[\"关系数据库\",{\"1\":{\"1713\":1}}],[\"关系数据库支持\",{\"1\":{\"12\":1,\"731\":1}}],[\"关系就是先有鸡\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"关注点在响应时间优先\",{\"1\":{\"1144\":1}}],[\"关注点在吞吐量优先\",{\"1\":{\"1141\":1}}],[\"关注点在于行为的选择\",{\"1\":{\"513\":1}}],[\"关注于\",{\"1\":{\"814\":1}}],[\"关注结果\",{\"1\":{\"787\":1}}],[\"关联和聚合在语法上无法区分\",{\"1\":{\"735\":1}}],[\"关联关系又可进一步分为单向关联\",{\"1\":{\"738\":1}}],[\"关联关系\",{\"1\":{\"735\":1,\"738\":1}}],[\"关联\",{\"0\":{\"735\":1},\"1\":{\"735\":3,\"1253\":1,\"1286\":1}}],[\"关联的对象在下一次垃圾回收时会被回收\",{\"1\":{\"367\":1}}],[\"关闭旧的epoll实例\",{\"1\":{\"1829\":1}}],[\"关闭连接池\",{\"1\":{\"917\":1}}],[\"关闭线程池\",{\"0\":{\"915\":1},\"1\":{\"938\":1,\"950\":2}}],[\"关闭线程\",{\"1\":{\"867\":1,\"869\":1}}],[\"关闭端口的访问\",{\"1\":{\"662\":1,\"723\":1}}],[\"关闭防火墙\",{\"1\":{\"661\":1,\"722\":1}}],[\"关闭\",{\"1\":{\"619\":1}}],[\"关闭相机\",{\"1\":{\"453\":2}}],[\"关键服务\",{\"0\":{\"1890\":1,\"1892\":1}}],[\"关键代码\",{\"0\":{\"1756\":1}}],[\"关键参数就是元素resid\",{\"1\":{\"1604\":1}}],[\"关键字\",{\"1\":{\"1518\":1}}],[\"关键字经过编译后\",{\"1\":{\"1238\":1}}],[\"关键核心类要采用final修饰\",{\"1\":{\"1481\":1}}],[\"关键是技术领导与开发人员之间利益平衡\",{\"1\":{\"1268\":1}}],[\"关键\",{\"1\":{\"1253\":1}}],[\"关键实现是native方法\",{\"1\":{\"1224\":1}}],[\"关键函数\",{\"0\":{\"1009\":1}}],[\"关键流程\",{\"0\":{\"992\":1}}],[\"关键指令编写\",{\"0\":{\"984\":1}}],[\"关键指标\",{\"1\":{\"598\":1}}],[\"关键指标达成\",{\"1\":{\"595\":1}}],[\"关键时间点\",{\"1\":{\"598\":2}}],[\"关键词\",{\"1\":{\"592\":1,\"750\":1}}],[\"关键细节作为线索\",{\"1\":{\"571\":1}}],[\"关键细节来指导\",{\"1\":{\"571\":1}}],[\"关机\",{\"1\":{\"507\":1}}],[\"关掉instant\",{\"1\":{\"49\":1}}],[\"`account\",{\"1\":{\"615\":1}}],[\"`authentication\",{\"1\":{\"615\":1}}],[\"`alter\",{\"1\":{\"615\":2}}],[\"`password\",{\"1\":{\"615\":3}}],[\"`plugin`\",{\"1\":{\"615\":1}}],[\"`process\",{\"1\":{\"615\":1}}],[\"`max\",{\"1\":{\"615\":4}}],[\"`x509\",{\"1\":{\"615\":2}}],[\"`trigger\",{\"1\":{\"615\":1}}],[\"`event\",{\"1\":{\"615\":1}}],[\"`execute\",{\"1\":{\"615\":1}}],[\"`lock\",{\"1\":{\"615\":1}}],[\"`index\",{\"1\":{\"615\":1}}],[\"`insert\",{\"1\":{\"615\":1}}],[\"`repl\",{\"1\":{\"615\":2}}],[\"`references\",{\"1\":{\"615\":1}}],[\"`reload\",{\"1\":{\"615\":1}}],[\"`grant\",{\"1\":{\"615\":1}}],[\"`file\",{\"1\":{\"615\":1}}],[\"`ssl\",{\"1\":{\"615\":2}}],[\"`super\",{\"1\":{\"615\":1}}],[\"`show\",{\"1\":{\"615\":2}}],[\"`shutdown\",{\"1\":{\"615\":1}}],[\"`select\",{\"1\":{\"615\":1}}],[\"`drop\",{\"1\":{\"615\":1}}],[\"`delete\",{\"1\":{\"615\":1}}],[\"`create\",{\"1\":{\"615\":6}}],[\"`update\",{\"1\":{\"615\":1}}],[\"`user`\",{\"1\":{\"615\":9}}],[\"`host`\",{\"1\":{\"615\":2}}],[\"`\",{\"0\":{\"37\":1}}],[\"编号从1开始\",{\"1\":{\"1776\":1}}],[\"编码\",{\"1\":{\"1530\":1}}],[\"编写函数\",{\"1\":{\"1709\":1}}],[\"编写aspectj插件\",{\"0\":{\"1632\":1}}],[\"编写模板代码切记从上往下写\",{\"1\":{\"1601\":1}}],[\"编写思路\",{\"0\":{\"1588\":1}}],[\"编写思考路径\",{\"0\":{\"1309\":1}}],[\"编写代码时刻要考虑\",{\"1\":{\"1540\":1}}],[\"编写代码提供插件支持\",{\"1\":{\"1476\":1}}],[\"编写输出\",{\"1\":{\"1534\":1}}],[\"编写输入\",{\"1\":{\"1534\":1}}],[\"编写过简单makefile框架\",{\"1\":{\"1534\":1}}],[\"编写一个通用库\",{\"1\":{\"1527\":1}}],[\"编写一次\",{\"1\":{\"1075\":1}}],[\"编写有些复杂\",{\"1\":{\"1494\":1}}],[\"编写组件减少他们之间的依赖\",{\"1\":{\"1494\":1}}],[\"编写\",{\"1\":{\"1494\":1}}],[\"编写框架涉及技术\",{\"1\":{\"1494\":1}}],[\"编写框架方法\",{\"0\":{\"1308\":1}}],[\"编写的思想\",{\"1\":{\"1491\":1}}],[\"编写其中有很多技术难点\",{\"1\":{\"1488\":1}}],[\"编写放在外面\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"编写项目的思路\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"编写自定义注解处理器\",{\"1\":{\"1205\":1}}],[\"编写解释器interpreter\",{\"0\":{\"994\":1}}],[\"编写测试类\",{\"0\":{\"985\":1}}],[\"编写测试用例\",{\"1\":{\"775\":1}}],[\"编写执行者可安全终止的worker\",{\"1\":{\"950\":1}}],[\"编写扩展点\",{\"1\":{\"805\":1}}],[\"编译执行\",{\"0\":{\"1728\":1}}],[\"编译打包的软件包存放在项目目录\",{\"1\":{\"1711\":1}}],[\"编译生成文件\",{\"1\":{\"1555\":1}}],[\"编译后可以生成插件\",{\"1\":{\"1552\":1}}],[\"编译着色器\",{\"1\":{\"1540\":2}}],[\"编译opengl程序\",{\"1\":{\"1540\":1}}],[\"编译cmake文件\",{\"1\":{\"1534\":1}}],[\"编译可执行文件\",{\"1\":{\"1534\":1}}],[\"编译时注解\",{\"1\":{\"1494\":1}}],[\"编译时间\",{\"1\":{\"1298\":1}}],[\"编译对象与除法条件\",{\"0\":{\"1208\":1}}],[\"编译过程\",{\"0\":{\"1210\":1},\"1\":{\"1197\":1}}],[\"编译结果\",{\"1\":{\"1188\":1}}],[\"编译耗时优化\",{\"1\":{\"1207\":1}}],[\"编译耗时\",{\"1\":{\"1152\":1}}],[\"编译目录\",{\"1\":{\"1070\":1}}],[\"编译\",{\"1\":{\"1056\":1,\"1534\":2,\"1604\":1}}],[\"编译期确定\",{\"1\":{\"991\":1}}],[\"编译器将回到解析及填充符号表重新处理\",{\"1\":{\"1199\":1}}],[\"编译器\",{\"0\":{\"1197\":1}}],[\"编译器优化\",{\"0\":{\"1196\":1}}],[\"编译器优化的重排序\",{\"1\":{\"859\":1}}],[\"编译器和处理器常常会对指令做重排\",{\"1\":{\"859\":1}}],[\"编译器问题\",{\"1\":{\"34\":1}}],[\"编译性注解\",{\"1\":{\"805\":1}}],[\"编译android\",{\"0\":{\"115\":1}}],[\"编译报错\",{\"0\":{\"52\":1}}],[\"编排\",{\"1\":{\"12\":1,\"731\":1}}],[\"二维数组\",{\"1\":{\"1530\":1}}],[\"二维数组中的查找\",{\"1\":{\"298\":1}}],[\"二八原则\",{\"1\":{\"1253\":1}}],[\"二进制执行文件\",{\"1\":{\"1534\":1}}],[\"二进制进行解析\",{\"1\":{\"1093\":1}}],[\"二进制兼容\",{\"1\":{\"796\":1}}],[\"二进制化\",{\"1\":{\"305\":1}}],[\"二进制中\",{\"1\":{\"298\":1}}],[\"二分查找\",{\"1\":{\"298\":1}}],[\"二叉搜索树的最近公共祖先\",{\"1\":{\"298\":1}}],[\"二叉搜索树的后序遍历序列\",{\"1\":{\"298\":1}}],[\"二叉查找树的第\",{\"1\":{\"298\":1}}],[\"二叉树的最大深度\",{\"1\":{\"298\":1}}],[\"二叉树的后序遍历\",{\"1\":{\"298\":1}}],[\"二叉树深度\",{\"1\":{\"298\":1}}],[\"二叉树中和为目标值的路径\",{\"1\":{\"298\":2}}],[\"二叉树下一个节点\",{\"1\":{\"298\":1}}],[\"二\",{\"0\":{\"163\":1,\"312\":1,\"326\":1,\"380\":1,\"1303\":1,\"1346\":1,\"1552\":1,\"1637\":1},\"1\":{\"34\":1,\"319\":1,\"598\":1,\"738\":1,\"1549\":1,\"1552\":2,\"1555\":2,\"1577\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1}}],[\"二级认证校验\",{\"1\":{\"12\":1,\"731\":1}}],[\"代表messagequeue没有消息\",{\"1\":{\"1847\":1}}],[\"代表的是binder主线程\",{\"1\":{\"1778\":1}}],[\"代表bpbinder\",{\"1\":{\"1731\":1}}],[\"代表第n个slot\",{\"1\":{\"1182\":1}}],[\"代数简化\",{\"1\":{\"1211\":1}}],[\"代价是大量线程切换\",{\"1\":{\"884\":1}}],[\"代替\",{\"1\":{\"650\":1,\"1346\":1}}],[\"代理和组合\",{\"1\":{\"760\":1}}],[\"代理对象表示一个单一对象\",{\"1\":{\"264\":1}}],[\"代理类\",{\"1\":{\"259\":1,\"447\":1}}],[\"代理模式对所代理对象施加控制\",{\"1\":{\"261\":1}}],[\"代理模式是给一个对象提供代理对象\",{\"1\":{\"261\":1}}],[\"代理模式\",{\"0\":{\"445\":1},\"1\":{\"256\":1,\"257\":1,\"394\":1,\"446\":1}}],[\"代理问题\",{\"1\":{\"34\":1}}],[\"代码自动部署github\",{\"1\":{\"1960\":1}}],[\"代码路径\",{\"0\":{\"1718\":1,\"1763\":1,\"1781\":1,\"1791\":1,\"1800\":1,\"1807\":1}}],[\"代码少\",{\"1\":{\"1647\":1}}],[\"代码演进\",{\"1\":{\"1610\":1}}],[\"代码的演进\",{\"1\":{\"1577\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1}}],[\"代码位置\",{\"1\":{\"1527\":1}}],[\"代码会执行到此处\",{\"1\":{\"1518\":1}}],[\"代码简洁语法\",{\"1\":{\"1512\":1}}],[\"代码隔离\",{\"1\":{\"1500\":1}}],[\"代码逻辑需要因地制宜实现\",{\"1\":{\"1483\":1}}],[\"代码需要自己实现\",{\"1\":{\"1483\":1}}],[\"代码编写\",{\"1\":{\"1481\":1}}],[\"代码和资源隔离\",{\"1\":{\"1480\":1}}],[\"代码更简洁\",{\"1\":{\"1280\":1}}],[\"代码是最好的注释\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"代码段\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"代码坏味道\",{\"0\":{\"1256\":1}}],[\"代码坏味道中\",{\"1\":{\"265\":1}}],[\"代码与对应手法\",{\"1\":{\"1253\":1}}],[\"代码清晰\",{\"1\":{\"1253\":1,\"1512\":1}}],[\"代码行号\",{\"1\":{\"1036\":1}}],[\"代码执行逻辑\",{\"1\":{\"870\":1}}],[\"代码并发执行\",{\"1\":{\"824\":1}}],[\"代码公共逻辑重用\",{\"1\":{\"753\":1}}],[\"代码表现\",{\"1\":{\"735\":1}}],[\"代码体现\",{\"1\":{\"735\":3}}],[\"代码\",{\"0\":{\"428\":1},\"1\":{\"1549\":1,\"1552\":1,\"1555\":1,\"1767\":1}}],[\"代码示例\",{\"0\":{\"406\":1,\"417\":1,\"423\":1,\"429\":1,\"436\":1,\"442\":1,\"448\":1,\"454\":1,\"460\":1,\"466\":1,\"472\":1,\"478\":1,\"484\":1,\"490\":1,\"496\":1,\"502\":1,\"508\":1,\"514\":1,\"520\":1,\"526\":1,\"532\":1,\"538\":1,\"544\":1},\"1\":{\"409\":1,\"1374\":1}}],[\"代码设计经验的总结\",{\"1\":{\"389\":1}}],[\"代码参考上节序列化中的\",{\"1\":{\"335\":1}}],[\"代码复用\",{\"1\":{\"305\":2}}],[\"代码质量\",{\"1\":{\"305\":1}}],[\"代码重复\",{\"1\":{\"265\":1}}],[\"代码实现的核心逻辑\",{\"0\":{\"1487\":1}}],[\"代码实现\",{\"0\":{\"197\":1},\"1\":{\"938\":1,\"1358\":1}}],[\"代码单例测试\",{\"1\":{\"12\":1,\"731\":1}}],[\"代码生成器\",{\"1\":{\"12\":1,\"731\":1}}],[\"代码生成\",{\"1\":{\"12\":1,\"14\":1,\"731\":1,\"733\":1}}],[\"代码生成能力\",{\"1\":{\"12\":1,\"731\":1}}],[\"一台机器配置多个项目托管仓库\",{\"1\":{\"1920\":1}}],[\"一直循环执行\",{\"1\":{\"1867\":1}}],[\"一张图\",{\"1\":{\"1577\":1}}],[\"一律采用系统字体\",{\"1\":{\"1446\":1}}],[\"一整张图片\",{\"1\":{\"1435\":1}}],[\"一组控件数据\",{\"1\":{\"1364\":1}}],[\"一年交税170多亿\",{\"1\":{\"1346\":1}}],[\"一年交税170多亿马云\",{\"1\":{\"1346\":2}}],[\"一团功能相似变量\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"一件事做完\",{\"1\":{\"1253\":1,\"1271\":1,\"1286\":1}}],[\"一维数组\",{\"1\":{\"1008\":1,\"1530\":1}}],[\"一定时间才可以take的blockingqueue\",{\"1\":{\"958\":1}}],[\"一定要放到allproject下\",{\"1\":{\"100\":1}}],[\"一次拷贝\",{\"0\":{\"1769\":1},\"1\":{\"1769\":1}}],[\"一次开发多端部署的三个层次有哪些\",{\"1\":{\"1709\":1}}],[\"一次开发\",{\"1\":{\"1709\":1}}],[\"一次比一次趋近于模板化\",{\"1\":{\"1610\":1}}],[\"一次编译四处运行的基础\",{\"1\":{\"1163\":1}}],[\"一次只有一个线程通过\",{\"1\":{\"935\":1}}],[\"一次性只能有限资源并行执行\",{\"1\":{\"907\":1}}],[\"一部分针对调用功能的开发人员\",{\"1\":{\"793\":1}}],[\"一经发现\",{\"1\":{\"784\":1}}],[\"一份老板不付钱的额外工作\",{\"1\":{\"1268\":1}}],[\"一份好的文档可以有效帮助用户\",{\"1\":{\"778\":1}}],[\"一份缓存\",{\"1\":{\"112\":1}}],[\"一致性\",{\"1\":{\"757\":1,\"793\":1}}],[\"一句话解释\",{\"1\":{\"1253\":1}}],[\"一句话理解\",{\"1\":{\"751\":1,\"752\":1,\"753\":3,\"754\":1,\"1253\":1}}],[\"一句话速记\",{\"1\":{\"750\":1}}],[\"一方单向持有成员变量\",{\"1\":{\"738\":1}}],[\"一名学生可能要上多门课程\",{\"1\":{\"735\":1}}],[\"一簇抽象接口\",{\"1\":{\"428\":1}}],[\"一样的快速查找特性\",{\"1\":{\"362\":1}}],[\"一种解决方案是把它们拷贝到每一个服务中去\",{\"1\":{\"314\":1}}],[\"一种遍历访问容器对象中各个元素的方法\",{\"1\":{\"257\":1,\"395\":1,\"542\":1}}],[\"一旦太阳下山\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"一旦阻塞扰乱热点探测\",{\"1\":{\"1209\":1}}],[\"一旦形成环形数据结构\",{\"1\":{\"894\":1}}],[\"一旦人们习惯了软件的某个版本\",{\"1\":{\"763\":1}}],[\"一旦服务之间需要通信\",{\"1\":{\"314\":1}}],[\"一旦环境变化\",{\"1\":{\"311\":1}}],[\"一旦对象被创建\",{\"1\":{\"145\":1}}],[\"一套代码服务多端\",{\"1\":{\"305\":1}}],[\"一个新message能够被分发\",{\"1\":{\"1846\":1}}],[\"一个应用只能有一个\",{\"1\":{\"1707\":1}}],[\"一个应用可以包含一个或多个\",{\"1\":{\"1707\":1}}],[\"一个成熟的项目\",{\"1\":{\"1694\":1}}],[\"一个table\",{\"1\":{\"1625\":1}}],[\"一个spname\",{\"1\":{\"1625\":1}}],[\"一个将列表转化为多组映射\",{\"1\":{\"1521\":1}}],[\"一个插件只做好一件事\",{\"1\":{\"1476\":1}}],[\"一个变量只存一个值\",{\"1\":{\"1280\":1}}],[\"一个变化多个类修改\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"一个函数\",{\"1\":{\"1274\":1}}],[\"一个函数过多依赖其他类\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"一个参数\",{\"1\":{\"1274\":1}}],[\"一个支持中断状态\",{\"1\":{\"945\":1}}],[\"一个支持优先级排序的无界阻塞队列\",{\"1\":{\"896\":1}}],[\"一个boolean\",{\"1\":{\"945\":1}}],[\"一个不存储元素的阻塞队列\",{\"1\":{\"896\":1}}],[\"一个使用优先级队列实现的无界阻塞队列\",{\"1\":{\"896\":1}}],[\"一个由链表结构组成的双向阻塞队列\",{\"1\":{\"896\":1}}],[\"一个由链表结构组成的无界阻塞队列\",{\"1\":{\"896\":1}}],[\"一个由链表结构组成的有界阻塞队列\",{\"1\":{\"896\":1}}],[\"一个由数组结构组成的有界阻塞队列\",{\"1\":{\"896\":1}}],[\"一个线程只要不是内核线程\",{\"1\":{\"1226\":1}}],[\"一个线程进入写的时候\",{\"1\":{\"880\":1}}],[\"一个线程获得锁进入业务逻辑\",{\"1\":{\"879\":1}}],[\"一个线程中所有操作必须按照程序的顺序来执行\",{\"1\":{\"860\":1}}],[\"一个获取锁成功\",{\"1\":{\"867\":1}}],[\"一个处理器的缓存回写到内存会导致其他处理器的缓存无效\",{\"1\":{\"841\":1}}],[\"一个为客户端代码服务\",{\"1\":{\"805\":1}}],[\"一个模块不依赖于另一个模块\",{\"1\":{\"805\":1}}],[\"一个api的生命周期\",{\"1\":{\"796\":1}}],[\"一个api\",{\"1\":{\"793\":1}}],[\"一个类需多处修改\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"一个类\",{\"1\":{\"751\":1,\"1253\":1}}],[\"一个employee类\",{\"1\":{\"738\":1}}],[\"一个expect脚本\",{\"1\":{\"644\":1}}],[\"一个域名下的应用使用许多数据或者请求的获取\",{\"1\":{\"649\":1}}],[\"一个桶存储的链表长度大于等于\",{\"1\":{\"355\":1}}],[\"一个桶存放一个链表\",{\"1\":{\"348\":1}}],[\"一个具体工厂类负责创建一系列相关对象\",{\"1\":{\"260\":1}}],[\"一个具体工厂类负责创建一个具体对象类型\",{\"1\":{\"260\":1}}],[\"一个工厂方法创建不同类型对象\",{\"1\":{\"260\":1}}],[\"一个工厂类根据传入参数决定创建哪一种产品实例\",{\"1\":{\"257\":1,\"393\":1,\"433\":1}}],[\"一个对象调用多种方法\",{\"1\":{\"1518\":1}}],[\"一个对象应该对其他对象有最少了解\",{\"1\":{\"754\":1,\"1253\":1}}],[\"一个对象逻辑关系\",{\"1\":{\"751\":1}}],[\"一个对象改变\",{\"1\":{\"257\":1,\"395\":1,\"518\":1}}],[\"一个对象是否有虚引用存在\",{\"1\":{\"154\":1}}],[\"一般地\",{\"1\":{\"1847\":1}}],[\"一般写法\",{\"1\":{\"1598\":1}}],[\"一般源码分析的重点在register方法上\",{\"1\":{\"1546\":1}}],[\"一般项目多p工程解耦成本太高\",{\"1\":{\"1494\":1}}],[\"一般中小项目中\",{\"1\":{\"1494\":1}}],[\"一般不会有下沉base代码\",{\"1\":{\"1494\":1}}],[\"一般是先有\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"一般在这里使用速度快\",{\"1\":{\"207\":1}}],[\"一般都是图片格式有问题\",{\"1\":{\"76\":1}}],[\"一\",{\"0\":{\"157\":1,\"311\":1,\"320\":1,\"379\":1,\"1302\":1,\"1555\":1,\"1636\":1},\"1\":{\"34\":1,\"319\":1,\"598\":1,\"738\":1,\"1549\":1,\"1552\":3,\"1555\":2,\"1577\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1}}],[\"一键发布到jcenter\",{\"0\":{\"1905\":1}}],[\"一键化生成代码示例\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"一键式快速开发\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"一键搭建所有环境\",{\"1\":{\"12\":1,\"731\":1}}],[\"一键生成所有crud代码与页面降低80\",{\"1\":{\"12\":1,\"731\":1}}],[\"qihoo360\",{\"1\":{\"1561\":1}}],[\"qibilly\",{\"1\":{\"1481\":1,\"1503\":1}}],[\"qiniu\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"qq\",{\"1\":{\"1399\":1,\"1555\":1,\"1564\":1,\"1682\":1,\"1905\":1}}],[\"quitsafely\",{\"1\":{\"1851\":1}}],[\"quitallowed\",{\"1\":{\"1829\":2,\"1845\":2}}],[\"quick\",{\"1\":{\"631\":1}}],[\"quicksort\",{\"1\":{\"279\":4}}],[\"qualifiedname\",{\"1\":{\"1601\":3,\"1604\":3}}],[\"quarterturns\",{\"1\":{\"1402\":3,\"1685\":3}}],[\"quotepath\",{\"1\":{\"1937\":1,\"1938\":1,\"1970\":1}}],[\"quote\",{\"1\":{\"513\":4}}],[\"querylocalinterface\",{\"1\":{\"1732\":1,\"1739\":1,\"1756\":3}}],[\"querymap\",{\"1\":{\"1549\":1}}],[\"queryparams\",{\"1\":{\"1332\":1}}],[\"queryparamsmap\",{\"1\":{\"1332\":11}}],[\"query\",{\"0\":{\"1332\":1},\"1\":{\"1332\":2,\"1549\":1}}],[\"queueidle\",{\"1\":{\"1846\":1}}],[\"queue\",{\"0\":{\"324\":1},\"1\":{\"200\":1,\"895\":1,\"917\":9,\"950\":2,\"1546\":2,\"1770\":1,\"1841\":2,\"1843\":2,\"1857\":3}}],[\"queue队列中取出\",{\"1\":{\"1127\":1}}],[\"queue队列\",{\"1\":{\"200\":1,\"1127\":1}}],[\"questions`\",{\"1\":{\"615\":1}}],[\"questions\",{\"1\":{\"55\":1,\"115\":1,\"614\":1,\"622\":1,\"630\":1}}],[\"q\",{\"1\":{\"31\":1,\"52\":1,\"895\":10,\"1056\":1,\"1151\":1}}],[\"日历类\",{\"1\":{\"1713\":1}}],[\"日常手头重复的工作\",{\"1\":{\"1610\":1}}],[\"日常问题锦集\",{\"0\":{\"1984\":1},\"2\":{\"29\":1,\"32\":1,\"35\":1,\"38\":1,\"41\":1,\"44\":1,\"47\":1,\"50\":1,\"53\":1,\"56\":1,\"59\":1,\"62\":1,\"65\":1,\"68\":1,\"71\":1,\"74\":1,\"77\":1,\"80\":1,\"83\":1,\"86\":1,\"89\":1,\"92\":1,\"95\":1,\"98\":1,\"101\":1,\"104\":1,\"107\":1,\"110\":1,\"113\":1,\"116\":1,\"119\":1,\"122\":1,\"125\":1}}],[\"日志框架\",{\"0\":{\"1616\":1}}],[\"日志打印\",{\"1\":{\"12\":1,\"731\":1}}],[\"日志定制实现\",{\"1\":{\"12\":1,\"731\":1}}],[\"原设备上的应用需要自行退出\",{\"1\":{\"1702\":2}}],[\"原生方法\",{\"1\":{\"1756\":1}}],[\"原生智能\",{\"1\":{\"1709\":1}}],[\"原生技术接入flutter\",{\"1\":{\"1694\":1}}],[\"原生支持\",{\"1\":{\"12\":1,\"731\":1}}],[\"原来的例子\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"原来用户写的代码\",{\"1\":{\"793\":1}}],[\"原子化布局\",{\"1\":{\"1702\":1}}],[\"原子化布局包含自适应变化和自适应布局两类\",{\"1\":{\"1702\":2}}],[\"原子操作组合业务\",{\"1\":{\"1233\":1}}],[\"原子操作原理\",{\"0\":{\"850\":1}}],[\"原子变量操作\",{\"1\":{\"917\":1}}],[\"原子更新带有版本号的引用类型\",{\"1\":{\"900\":1}}],[\"原子更新带有标记位的引用类型\",{\"1\":{\"900\":1}}],[\"原子更新引用类型里的字段\",{\"1\":{\"900\":1}}],[\"原子更新引用类型\",{\"1\":{\"900\":1}}],[\"原子更新引用类型数组里的元素\",{\"1\":{\"900\":1}}],[\"原子更新长整型字段的更新器\",{\"1\":{\"900\":1}}],[\"原子更新长整型数组里的元素\",{\"1\":{\"900\":1}}],[\"原子更新长整型\",{\"1\":{\"900\":1}}],[\"原子更新整型的字段的更新器\",{\"1\":{\"900\":1}}],[\"原子更新整型数组里的元素\",{\"1\":{\"900\":1}}],[\"原子更新整型\",{\"1\":{\"900\":1}}],[\"原子更新布尔类型\",{\"1\":{\"900\":1}}],[\"原子性是指一个操作是不可分割的\",{\"1\":{\"1223\":1}}],[\"原子性\",{\"1\":{\"839\":1,\"1223\":1}}],[\"原文介绍位置\",{\"1\":{\"1491\":1}}],[\"原文写的过于冗长\",{\"1\":{\"814\":1}}],[\"原文链接\",{\"1\":{\"25\":1}}],[\"原则\",{\"0\":{\"1223\":1},\"1\":{\"808\":1,\"1253\":1,\"1259\":1,\"1262\":1,\"1265\":1,\"1274\":1,\"1277\":1,\"1283\":1,\"1286\":1,\"1521\":1}}],[\"原创\",{\"0\":{\"750\":1}}],[\"原味\",{\"1\":{\"459\":3}}],[\"原理是利用aspectj\",{\"1\":{\"1632\":1}}],[\"原理讲解与注解语法\",{\"1\":{\"1586\":1,\"1592\":1,\"1595\":1}}],[\"原理便于系统理解opengl\",{\"1\":{\"1540\":1}}],[\"原理简单\",{\"1\":{\"1534\":1}}],[\"原理asm修改字节码\",{\"1\":{\"1479\":1}}],[\"原理\",{\"1\":{\"879\":1,\"1332\":1,\"1540\":1}}],[\"原理作为指北针\",{\"1\":{\"571\":1}}],[\"原理类似\",{\"1\":{\"334\":1}}],[\"原理到位\",{\"1\":{\"227\":1}}],[\"原型模式\",{\"0\":{\"409\":1},\"1\":{\"256\":1,\"257\":1,\"393\":1,\"409\":2}}],[\"原始大小\",{\"1\":{\"215\":1}}],[\"原因是\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"原因是线程创建和上下切换的开销\",{\"1\":{\"819\":1}}],[\"原因是as设置了代理\",{\"1\":{\"40\":1}}],[\"原因\",{\"0\":{\"1069\":1},\"1\":{\"49\":1,\"787\":1,\"793\":1,\"945\":1,\"1479\":1,\"1518\":1}}],[\"将非git项目本地代码\",{\"0\":{\"1945\":1}}],[\"将公共的抽取出来\",{\"1\":{\"1905\":1}}],[\"将消息标示位置为in\",{\"1\":{\"1850\":1}}],[\"将消息按时间顺序插入到messagequeue\",{\"1\":{\"1847\":1}}],[\"将message对象加入消息池\",{\"1\":{\"1850\":1}}],[\"将message放入消息池\",{\"1\":{\"1843\":1}}],[\"将myservice转换为imyservice接口\",{\"1\":{\"1732\":1}}],[\"将request队列的事件\",{\"1\":{\"1829\":1}}],[\"将唤醒事件\",{\"1\":{\"1829\":1}}],[\"将死亡通知连接到binder\",{\"1\":{\"1799\":1}}],[\"将bc\",{\"1\":{\"1789\":1}}],[\"将binder客户端传递过来的参数\",{\"1\":{\"1863\":1}}],[\"将binder\",{\"1\":{\"1761\":1}}],[\"将biner对象转换为强引用类型的imyservice\",{\"1\":{\"1726\":1}}],[\"将java\",{\"1\":{\"1756\":1}}],[\"将ibinder\",{\"1\":{\"1739\":1}}],[\"将input相关方法封装在一个帮助类中\",{\"1\":{\"1417\":1}}],[\"将名为\",{\"1\":{\"1725\":1}}],[\"将其右移32位得到的是uid\",{\"1\":{\"1717\":1}}],[\"将其注入\",{\"1\":{\"805\":1}}],[\"将通道设置为下面哪个类型\",{\"1\":{\"1712\":1}}],[\"将不同应用的数据进行隔离\",{\"1\":{\"1702\":1}}],[\"将不必要的内容从api中移走\",{\"1\":{\"799\":1}}],[\"将顶点坐标通过内存拷贝传递给渲染管线\",{\"1\":{\"1540\":1}}],[\"将库链接\",{\"1\":{\"1534\":1}}],[\"将头文件添加到搜索路径中\",{\"1\":{\"1534\":1}}],[\"将好的用法记录下来\",{\"1\":{\"1521\":1}}],[\"将服务扁平化\",{\"1\":{\"1494\":1}}],[\"将模块中代码拆分为\",{\"1\":{\"1491\":1}}],[\"将api文件\",{\"1\":{\"1488\":1}}],[\"将apimodule中\",{\"1\":{\"1487\":1}}],[\"将原来所有module中\",{\"1\":{\"1487\":1}}],[\"将原本下沉到base模块的通用性不高的代码\",{\"1\":{\"1486\":1}}],[\"将项目中所有module中\",{\"1\":{\"1487\":1}}],[\"将这些\",{\"1\":{\"1486\":1}}],[\"将组件间关系扁平化\",{\"1\":{\"1481\":1}}],[\"将拍取的照片保存到指定uri\",{\"1\":{\"1417\":1}}],[\"将逻辑层迁移到defaultbloc当中\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"将逻辑与视图分离\",{\"1\":{\"1265\":1}}],[\"将输出结果和表头粘在一起\",{\"1\":{\"1368\":1}}],[\"将自动生成代码拷贝指定位置并运行\",{\"1\":{\"1368\":1}}],[\"将双向关联变为单项\",{\"1\":{\"1283\":1}}],[\"将单项关联改为双向关联\",{\"1\":{\"1283\":1}}],[\"将值对象改为引用对象\",{\"1\":{\"1283\":1}}],[\"将值存储到线程上下文环境中\",{\"1\":{\"381\":1}}],[\"将null值替换为null对象\",{\"1\":{\"1277\":1}}],[\"将它们作为某一次函数调用的参数\",{\"1\":{\"1274\":1}}],[\"将查询函数和修改函数分离\",{\"1\":{\"1274\":1}}],[\"将大块行为分成小块\",{\"1\":{\"1265\":1}}],[\"将数据写入到parcel\",{\"1\":{\"1738\":1}}],[\"将数据记录变成对象\",{\"1\":{\"1265\":1}}],[\"将数据复制到每一个处理单元\",{\"1\":{\"314\":1}}],[\"将过程化设计转化对象设计\",{\"1\":{\"1265\":1}}],[\"将他们合为一体\",{\"1\":{\"1262\":1}}],[\"将相同的子集提炼到一个独立接口中\",{\"1\":{\"1262\":1}}],[\"将相同特性转移至超类\",{\"1\":{\"1262\":1}}],[\"将上面所说的那一部分特性转移到子类中\",{\"1\":{\"1262\":1}}],[\"将类型码转为状态模式\",{\"1\":{\"1286\":1}}],[\"将类内联化\",{\"1\":{\"1259\":1}}],[\"将类和对象按照一定规则组合成一个更加强大的结构体\",{\"1\":{\"257\":1,\"390\":1}}],[\"将字节码编译成本地代码\",{\"1\":{\"1207\":2}}],[\"将字段符号引用解析为field\",{\"1\":{\"984\":2}}],[\"将结果3转换成long类型\",{\"1\":{\"1203\":1}}],[\"将结果压入栈\",{\"1\":{\"984\":1}}],[\"将各步骤生成信息\",{\"1\":{\"1200\":1}}],[\"将存活的对象全部拷贝到另外一个区域\",{\"1\":{\"1131\":1}}],[\"将flag参数转成cmd\",{\"1\":{\"1055\":1}}],[\"将go\",{\"1\":{\"1015\":1}}],[\"将当前线程直接加入binder线程队列\",{\"1\":{\"1776\":1}}],[\"将当前读取到的字节码的位置设置到\",{\"1\":{\"994\":1}}],[\"将当前栈帧从线程中移除\",{\"1\":{\"993\":1}}],[\"将当前栈帧的返回值\",{\"1\":{\"993\":1}}],[\"将栈帧push线程stack中\",{\"1\":{\"994\":1,\"1044\":1}}],[\"将常量c压入操作数栈\",{\"1\":{\"984\":2}}],[\"将常用数据结构的原理\",{\"1\":{\"228\":1}}],[\"将引用对象push到栈顶\",{\"1\":{\"984\":1}}],[\"将状态设置为0\",{\"1\":{\"876\":1}}],[\"将代码分成接口和实现两部分\",{\"1\":{\"802\":1}}],[\"将知识传授给他人\",{\"1\":{\"757\":1}}],[\"将进度压缩\",{\"1\":{\"595\":1}}],[\"将一个类的方法护着接口转换成客户希望的另一个接口\",{\"1\":{\"476\":1}}],[\"将一个类的方法或者接口转换成客户希望另一个接口\",{\"1\":{\"257\":1,\"394\":1}}],[\"将对象原来的markword替换回来\",{\"1\":{\"1248\":1}}],[\"将对象markword更新为lock\",{\"1\":{\"1248\":1}}],[\"将对象组成树形结构以表示\",{\"1\":{\"464\":1}}],[\"将对象组成成树形结构以表示\",{\"1\":{\"257\":1,\"394\":1}}],[\"将对象转换为字节流并输出\",{\"1\":{\"334\":1}}],[\"将\",{\"1\":{\"333\":1,\"1081\":1,\"1110\":2,\"1488\":1,\"1711\":1}}],[\"将二叉搜索树转化为排序的双向链表\",{\"1\":{\"298\":2}}],[\"将每个元素i放在新数组的第c\",{\"1\":{\"286\":1}}],[\"将新元素插入到该位置后\",{\"1\":{\"280\":1}}],[\"将该元素移到下一位置\",{\"1\":{\"280\":1}}],[\"将请求的发送者和接受者解耦\",{\"1\":{\"257\":1,\"395\":1,\"536\":1}}],[\"将命令请求封装成一个对象\",{\"1\":{\"257\":1,\"395\":1,\"488\":1}}],[\"将抽象部分与实现部分分离\",{\"1\":{\"257\":1,\"394\":1,\"458\":1}}],[\"将网络部分的知识补上\",{\"1\":{\"228\":1}}],[\"将面试考到问题汇总\",{\"1\":{\"228\":1}}],[\"将support库\",{\"1\":{\"55\":1}}],[\"将复制的注册码\",{\"1\":{\"25\":1}}],[\"将webstorm拖入到application文件夹中\",{\"1\":{\"24\":1}}],[\"4种写法\",{\"1\":{\"1518\":1}}],[\"4g6hww6gxnmv\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"4f\",{\"1\":{\"1367\":1}}],[\"4d\",{\"1\":{\"1367\":1}}],[\"4a\",{\"1\":{\"1367\":1}}],[\"4张\",{\"1\":{\"1338\":7,\"1435\":7}}],[\"4条指令\",{\"1\":{\"1169\":1}}],[\"4bit\",{\"1\":{\"1117\":1}}],[\"4到jdk1\",{\"1\":{\"808\":1}}],[\"4个要素\",{\"0\":{\"743\":1}}],[\"4s\",{\"1\":{\"694\":1,\"1435\":1}}],[\"480\",{\"1\":{\"1338\":5,\"1435\":7}}],[\"480dpi\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"485\",{\"1\":{\"822\":1}}],[\"48\",{\"1\":{\"614\":4,\"615\":4,\"630\":4,\"1078\":2,\"1338\":2,\"1367\":1,\"1435\":2}}],[\"46b42f7f593c\",{\"1\":{\"1503\":1}}],[\"46\",{\"1\":{\"298\":1,\"1078\":2,\"1338\":2,\"1367\":1,\"1435\":2}}],[\"443\",{\"1\":{\"638\":1,\"662\":1,\"723\":1}}],[\"44\",{\"1\":{\"298\":1,\"1367\":1}}],[\"436\",{\"1\":{\"1616\":1}}],[\"43641304\",{\"1\":{\"19\":1}}],[\"43\",{\"1\":{\"298\":1,\"1367\":1}}],[\"47\",{\"1\":{\"298\":1,\"1078\":2,\"1367\":2}}],[\"42\",{\"1\":{\"298\":1,\"1367\":2,\"1518\":2}}],[\"4111459\",{\"1\":{\"1534\":1}}],[\"4184745d6983\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"41\",{\"1\":{\"298\":3,\"694\":3,\"1367\":1}}],[\"456\",{\"1\":{\"1518\":1}}],[\"450\",{\"1\":{\"1338\":2,\"1435\":2}}],[\"4503\",{\"1\":{\"694\":1}}],[\"45\",{\"1\":{\"118\":1,\"298\":1,\"694\":3,\"1078\":3,\"1367\":2}}],[\"49387395\",{\"1\":{\"1503\":1}}],[\"49\",{\"1\":{\"103\":1,\"298\":1,\"1078\":2,\"1367\":1}}],[\"49043551\",{\"1\":{\"55\":1}}],[\"4096\",{\"1\":{\"1943\":1}}],[\"40dp\",{\"1\":{\"1346\":2}}],[\"404\",{\"1\":{\"640\":3,\"1712\":1,\"1981\":1}}],[\"40\",{\"1\":{\"103\":1,\"298\":1,\"1305\":1,\"1367\":2,\"1435\":2}}],[\"40u\",{\"1\":{\"58\":1,\"1963\":1}}],[\"4000\",{\"1\":{\"58\":2,\"1960\":1,\"1963\":1}}],[\"4\",{\"0\":{\"197\":1,\"207\":1,\"215\":1,\"230\":1,\"259\":1,\"281\":1,\"334\":1,\"340\":1,\"351\":1,\"383\":1,\"639\":1,\"747\":1,\"850\":1,\"867\":1,\"1064\":1,\"1068\":1,\"1127\":1,\"1133\":1,\"1138\":1,\"1162\":1,\"1228\":1,\"1307\":1,\"1312\":1,\"1446\":1,\"1476\":1,\"1628\":1,\"1710\":1,\"1924\":1},\"1\":{\"25\":1,\"52\":1,\"70\":1,\"109\":1,\"144\":1,\"145\":1,\"181\":1,\"184\":1,\"200\":1,\"207\":2,\"227\":1,\"228\":1,\"246\":3,\"265\":1,\"281\":1,\"298\":1,\"351\":5,\"354\":2,\"365\":2,\"405\":1,\"573\":1,\"583\":1,\"595\":1,\"598\":2,\"619\":1,\"631\":1,\"650\":1,\"738\":1,\"752\":1,\"753\":1,\"760\":1,\"763\":1,\"769\":1,\"772\":1,\"778\":1,\"784\":1,\"793\":1,\"796\":3,\"799\":1,\"802\":1,\"805\":3,\"808\":1,\"820\":1,\"821\":1,\"823\":1,\"897\":1,\"914\":1,\"954\":1,\"984\":4,\"1002\":1,\"1022\":1,\"1064\":1,\"1078\":1,\"1145\":1,\"1203\":1,\"1253\":3,\"1256\":1,\"1259\":1,\"1262\":1,\"1265\":1,\"1268\":3,\"1271\":1,\"1274\":1,\"1277\":1,\"1280\":1,\"1283\":1,\"1286\":5,\"1317\":1,\"1338\":5,\"1346\":1,\"1367\":1,\"1374\":1,\"1383\":1,\"1402\":2,\"1416\":1,\"1435\":6,\"1474\":2,\"1481\":3,\"1487\":1,\"1488\":2,\"1491\":1,\"1512\":3,\"1518\":2,\"1521\":2,\"1527\":1,\"1530\":2,\"1534\":3,\"1540\":2,\"1546\":2,\"1549\":1,\"1552\":1,\"1568\":1,\"1586\":1,\"1589\":1,\"1592\":3,\"1595\":4,\"1607\":1,\"1610\":1,\"1666\":1,\"1685\":2,\"1690\":1,\"1711\":2,\"1712\":3,\"1756\":8,\"1778\":1,\"1788\":1,\"1789\":2,\"1805\":1,\"1846\":1,\"1974\":3}}],[\"0ef91db916621aa8a658304abab65e6faffb5278\",{\"1\":{\"1928\":1,\"1929\":1}}],[\"0以后的版本默认为true\",{\"1\":{\"1850\":1}}],[\"0版本\",{\"1\":{\"1595\":1,\"1949\":1}}],[\"0版本做适配\",{\"1\":{\"1592\":2}}],[\"0版本时为了支持全面屏\",{\"1\":{\"70\":1}}],[\"0及以上获取文件\",{\"1\":{\"1417\":1}}],[\"0f\",{\"1\":{\"1367\":1,\"1368\":1}}],[\"0d\",{\"1\":{\"1367\":1}}],[\"0dp\",{\"1\":{\"1346\":12}}],[\"0a\",{\"1\":{\"1367\":1}}],[\"0~202\",{\"1\":{\"1093\":1}}],[\"0~45\",{\"1\":{\"1078\":2}}],[\"0×1104800\",{\"1\":{\"841\":1}}],[\"0m\",{\"1\":{\"711\":2,\"715\":1}}],[\"0ms\",{\"1\":{\"103\":1}}],[\"0<\",{\"1\":{\"672\":1,\"1555\":1}}],[\"0后\",{\"1\":{\"650\":1,\"1146\":1}}],[\"04\",{\"1\":{\"614\":5,\"615\":6,\"622\":4,\"630\":5,\"694\":1,\"711\":1}}],[\"043cfed1cc07\",{\"1\":{\"115\":1}}],[\"0l\",{\"1\":{\"247\":2,\"359\":2,\"828\":2,\"896\":1}}],[\"09\",{\"1\":{\"103\":1,\"314\":1,\"1647\":1}}],[\"05\",{\"1\":{\"103\":1,\"614\":1,\"615\":1,\"630\":1,\"1367\":1,\"1647\":1,\"1928\":2}}],[\"084\",{\"1\":{\"298\":1}}],[\"083\",{\"1\":{\"298\":1}}],[\"08\",{\"1\":{\"103\":1,\"1367\":1,\"1503\":1,\"1928\":2}}],[\"02121\",{\"1\":{\"1518\":1}}],[\"023\",{\"1\":{\"298\":1}}],[\"02\",{\"1\":{\"103\":2,\"1534\":1}}],[\"033\",{\"1\":{\"711\":4,\"715\":2}}],[\"03\",{\"1\":{\"103\":1,\"1367\":1,\"1518\":1}}],[\"06\",{\"1\":{\"103\":1}}],[\"07\",{\"1\":{\"103\":2}}],[\"00100000\",{\"1\":{\"353\":3}}],[\"000\",{\"1\":{\"1518\":2}}],[\"000l\",{\"1\":{\"868\":1}}],[\"000000\",{\"1\":{\"1305\":2,\"1346\":1}}],[\"00000010\",{\"1\":{\"351\":2}}],[\"00001111\",{\"1\":{\"351\":2}}],[\"00010000\",{\"1\":{\"351\":2,\"353\":3}}],[\"006\",{\"1\":{\"298\":1}}],[\"00\",{\"1\":{\"103\":22,\"614\":1,\"615\":1,\"622\":1,\"630\":1,\"1248\":1,\"1367\":1,\"1534\":6}}],[\"016\",{\"1\":{\"298\":1}}],[\"01\",{\"1\":{\"103\":6,\"118\":1,\"298\":1,\"1247\":1,\"1613\":1}}],[\"0中有\",{\"1\":{\"70\":1}}],[\"0xff\",{\"1\":{\"1093\":1}}],[\"0xfe\",{\"1\":{\"1022\":7,\"1093\":1}}],[\"0xcafebabe\",{\"1\":{\"1077\":2}}],[\"0xc0817c4a2f69df89\",{\"1\":{\"58\":1,\"1963\":1}}],[\"0xac\",{\"1\":{\"1022\":1}}],[\"0xad\",{\"1\":{\"1022\":1}}],[\"0xae\",{\"1\":{\"1022\":1}}],[\"0xaf\",{\"1\":{\"1022\":1}}],[\"0xb0\",{\"1\":{\"1022\":1}}],[\"0xb1\",{\"1\":{\"1022\":1}}],[\"0x00\",{\"1\":{\"1093\":1}}],[\"0x00~0xca\",{\"1\":{\"1093\":1}}],[\"0x0000000052423000\",{\"1\":{\"822\":1}}],[\"0x01a3de24\",{\"1\":{\"841\":1}}],[\"0x01a3de1d\",{\"1\":{\"841\":1}}],[\"0x10d5b24e0\",{\"1\":{\"67\":1}}],[\"0x10d52e4c0\",{\"1\":{\"67\":1}}],[\"0t0\",{\"1\":{\"58\":1,\"1963\":1}}],[\"0+\",{\"0\":{\"37\":1},\"1\":{\"1416\":1}}],[\"0\",{\"0\":{\"64\":1,\"275\":1,\"1246\":1},\"1\":{\"25\":3,\"34\":4,\"40\":2,\"52\":1,\"55\":4,\"64\":1,\"67\":3,\"94\":10,\"103\":1,\"109\":8,\"118\":3,\"247\":2,\"278\":2,\"279\":1,\"280\":1,\"281\":2,\"282\":1,\"283\":3,\"284\":4,\"285\":6,\"332\":4,\"333\":1,\"334\":1,\"338\":7,\"350\":5,\"351\":1,\"352\":2,\"353\":1,\"354\":1,\"359\":6,\"365\":1,\"447\":1,\"513\":2,\"525\":3,\"543\":1,\"614\":21,\"615\":25,\"622\":9,\"627\":6,\"630\":21,\"631\":4,\"638\":4,\"644\":1,\"662\":1,\"672\":1,\"701\":1,\"711\":2,\"715\":1,\"723\":1,\"820\":20,\"822\":4,\"828\":2,\"852\":1,\"853\":2,\"870\":5,\"876\":3,\"879\":1,\"880\":5,\"882\":4,\"883\":3,\"884\":1,\"886\":5,\"896\":3,\"897\":1,\"900\":3,\"907\":1,\"917\":5,\"935\":1,\"949\":1,\"950\":7,\"958\":5,\"979\":1,\"984\":4,\"993\":2,\"1009\":6,\"1016\":1,\"1022\":1,\"1030\":12,\"1036\":3,\"1044\":1,\"1055\":3,\"1056\":4,\"1070\":2,\"1078\":11,\"1117\":1,\"1203\":3,\"1289\":1,\"1298\":1,\"1304\":2,\"1305\":2,\"1329\":7,\"1332\":5,\"1338\":1,\"1346\":3,\"1349\":7,\"1367\":1,\"1368\":2,\"1371\":1,\"1374\":2,\"1383\":2,\"1392\":2,\"1402\":15,\"1405\":2,\"1416\":6,\"1456\":2,\"1488\":1,\"1491\":2,\"1518\":11,\"1530\":3,\"1534\":15,\"1540\":3,\"1546\":4,\"1552\":4,\"1555\":1,\"1558\":1,\"1567\":10,\"1589\":3,\"1592\":1,\"1595\":3,\"1601\":1,\"1604\":1,\"1623\":2,\"1625\":2,\"1642\":2,\"1648\":2,\"1666\":2,\"1675\":2,\"1685\":15,\"1690\":1,\"1717\":1,\"1725\":1,\"1726\":1,\"1727\":1,\"1731\":1,\"1738\":1,\"1739\":5,\"1756\":4,\"1762\":1,\"1770\":2,\"1780\":2,\"1788\":3,\"1789\":11,\"1790\":6,\"1798\":3,\"1799\":4,\"1804\":2,\"1826\":2,\"1828\":11,\"1829\":6,\"1831\":4,\"1840\":1,\"1846\":8,\"1847\":2,\"1849\":1,\"1850\":5,\"1857\":1,\"1860\":1,\"1861\":2,\"1863\":1,\"1865\":1,\"1905\":1,\"1911\":1,\"1949\":13,\"1966\":6}}],[\"复审代码\",{\"1\":{\"1253\":1,\"1286\":1}}],[\"复用别人业务\",{\"1\":{\"1689\":1}}],[\"复用\",{\"1\":{\"760\":1,\"1494\":1}}],[\"复杂情况用ensurelocalcapacity申请额外开销\",{\"1\":{\"1530\":1}}],[\"复杂链表的复制\",{\"1\":{\"298\":2}}],[\"复杂排序\",{\"1\":{\"12\":1,\"731\":1}}],[\"复盘\",{\"1\":{\"230\":1}}],[\"复制\",{\"1\":{\"1283\":1}}],[\"复制一份\",{\"1\":{\"900\":1}}],[\"复制一份文件在桌面\",{\"1\":{\"25\":1}}],[\"复制到temp数组\",{\"1\":{\"285\":1}}],[\"复制算法将可用内存容量划分为大小相等两块\",{\"1\":{\"206\":1}}],[\"复制算法\",{\"0\":{\"206\":1,\"1131\":1},\"1\":{\"1131\":1,\"1133\":1}}],[\"复制注册码内容\",{\"1\":{\"25\":1}}],[\"在指定md文件下一通狂写\",{\"1\":{\"1960\":1}}],[\"在指令\",{\"1\":{\"1003\":1}}],[\"在模式前加上惊叹号\",{\"1\":{\"1952\":1}}],[\"在local\",{\"1\":{\"1905\":1}}],[\"在lir寄存器做窥孔优化\",{\"1\":{\"1210\":1}}],[\"在需要打aar库下引入特定配置\",{\"1\":{\"1905\":1}}],[\"在nativewake\",{\"1\":{\"1828\":1}}],[\"在整个binder系统中handle=0代表\",{\"1\":{\"1804\":1}}],[\"在整体流程状态\",{\"1\":{\"598\":1}}],[\"在mediaplayerservice收到该命令后\",{\"1\":{\"1796\":1}}],[\"在debugfs文件系统中创建一系列的文件\",{\"1\":{\"1772\":1}}],[\"在当前binder\",{\"1\":{\"1754\":1}}],[\"在当前页面\",{\"1\":{\"1445\":1}}],[\"在哪个文件中会生成相关的配置信息\",{\"1\":{\"1712\":1}}],[\"在应用退居后台或退出后\",{\"1\":{\"1711\":1}}],[\"在应用非常广泛\",{\"1\":{\"1561\":1}}],[\"在欢迎页点击\",{\"1\":{\"1709\":1}}],[\"在什么时机执行\",{\"1\":{\"1708\":1}}],[\"在下面哪个文件中可以设置页面的路径配置信息\",{\"1\":{\"1708\":1}}],[\"在声明式开发范式中\",{\"1\":{\"1702\":3}}],[\"在父组件引用时需要将属性名称转换为下列哪一项\",{\"1\":{\"1702\":1}}],[\"在类\",{\"1\":{\"1702\":2}}],[\"在真机上运行\",{\"1\":{\"1702\":1}}],[\"在app\",{\"1\":{\"1860\":1}}],[\"在android的源码中\",{\"1\":{\"1728\":1}}],[\"在around中对方法进行操作\",{\"1\":{\"1632\":1}}],[\"在activiy\",{\"1\":{\"1320\":1}}],[\"在项目的根目录下的gradle\",{\"1\":{\"1607\":1}}],[\"在项目不断扩大时\",{\"1\":{\"1486\":1}}],[\"在实例api的基础上\",{\"1\":{\"1592\":1}}],[\"在切点方法里注入代码\",{\"1\":{\"1589\":1}}],[\"在拦截方法注入代码进行我们需要的操作\",{\"1\":{\"1588\":1}}],[\"在函数对之间局部引用都会在这个空间\",{\"1\":{\"1530\":1}}],[\"在编译的时候\",{\"1\":{\"1491\":1}}],[\"在编写代码时\",{\"1\":{\"802\":1}}],[\"在腾讯文章中提到\",{\"1\":{\"1491\":1}}],[\"在gradle\",{\"1\":{\"1905\":1}}],[\"在gradle中引入子组件\",{\"1\":{\"1476\":1}}],[\"在get的时候\",{\"1\":{\"382\":1}}],[\"在空壳app下gradle\",{\"1\":{\"1476\":1}}],[\"在根目录下build\",{\"1\":{\"1491\":1}}],[\"在根目录下gradle\",{\"1\":{\"1476\":1}}],[\"在根据实际情况\",{\"1\":{\"1253\":1}}],[\"在开发中也有好处\",{\"1\":{\"1476\":1}}],[\"在连接点进行方法替换\",{\"1\":{\"1374\":1}}],[\"在控制台下\",{\"1\":{\"1341\":1}}],[\"在四周空出几个像素点使得设计的图标与其他图标在视觉上一致\",{\"1\":{\"1338\":1}}],[\"在oncreate之前设置透明主题或者闪屏页\",{\"1\":{\"1320\":1}}],[\"在build基础上\",{\"1\":{\"1313\":1}}],[\"在工具类基础上简单组合方式\",{\"1\":{\"1312\":1}}],[\"在一些列布尔表达式中\",{\"1\":{\"1277\":1}}],[\"在条件表达式分支上都有着相同的一段代码\",{\"1\":{\"1277\":1}}],[\"在止于至善\",{\"1\":{\"1271\":1}}],[\"在亲民\",{\"1\":{\"1271\":1}}],[\"在明明德\",{\"1\":{\"1271\":1}}],[\"在写完毕业论文以后\",{\"1\":{\"1268\":1}}],[\"在写操作时需要复制一个新的数组\",{\"1\":{\"343\":1}}],[\"在写操作的同时允许读操作\",{\"1\":{\"343\":1}}],[\"在超类新建一个构造函数\",{\"1\":{\"1262\":1}}],[\"在各个子类中产生完全相同效果\",{\"1\":{\"1262\":1}}],[\"在对象之间搬移特性\",{\"0\":{\"1259\":1},\"1\":{\"1286\":1}}],[\"在悬崖峭壁上的小径行走\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"在重构者的整场表演中\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"在特定操作协议下\",{\"1\":{\"1218\":1}}],[\"在进入gc问题\",{\"1\":{\"1136\":1}}],[\"在进行get之前\",{\"1\":{\"381\":1}}],[\"在进行扩容时\",{\"1\":{\"353\":1}}],[\"在进行序列化或者迭代等操作时\",{\"1\":{\"335\":1}}],[\"在方法调用\",{\"1\":{\"1136\":1}}],[\"在永久代回收\",{\"1\":{\"1128\":1}}],[\"在invoke\",{\"1\":{\"1023\":1}}],[\"在构造函数中\",{\"1\":{\"929\":1}}],[\"在构造方法中\",{\"1\":{\"863\":1}}],[\"在释放这个锁之前对共\",{\"1\":{\"862\":1}}],[\"在顺序一致性内存模型中\",{\"1\":{\"860\":1}}],[\"在于项目中切身感受和重读此书\",{\"1\":{\"814\":1}}],[\"在提交代码时进行代码评审\",{\"1\":{\"778\":1}}],[\"在同行间\",{\"1\":{\"744\":1}}],[\"在product类中维护一个customer类型的成员变量表示这个产品被哪个顾客所购买\",{\"1\":{\"738\":1}}],[\"在uml类图中\",{\"1\":{\"735\":1,\"738\":1}}],[\"在ubuntu系统上安装nginx可以通过以下步骤进行\",{\"1\":{\"675\":1}}],[\"在打包后引入的资源路径出错的问题\",{\"1\":{\"604\":1}}],[\"在调用\",{\"1\":{\"385\":1}}],[\"在垃圾回收的时候会被清理掉的\",{\"1\":{\"385\":1}}],[\"在冲突严重的情况下\",{\"1\":{\"382\":1}}],[\"在插⼊过程中\",{\"1\":{\"382\":1}}],[\"在节点多于\",{\"1\":{\"365\":1}}],[\"在这里为\",{\"1\":{\"364\":1}}],[\"在每次访问一个节点时\",{\"1\":{\"363\":1}}],[\"在执行zygoteinit\",{\"1\":{\"1869\":1}}],[\"在执行\",{\"1\":{\"359\":2}}],[\"在第\",{\"1\":{\"353\":1}}],[\"在前面提到\",{\"1\":{\"353\":1}}],[\"在前面已排序的元素序列中\",{\"1\":{\"280\":1}}],[\"在链表上顺序查找\",{\"1\":{\"349\":1}}],[\"在\",{\"1\":{\"329\":1,\"360\":1,\"364\":1,\"1702\":12,\"1707\":3,\"1708\":1,\"1711\":3,\"1911\":1}}],[\"在heap内\",{\"1\":{\"271\":1,\"1086\":1}}],[\"在文集\",{\"1\":{\"265\":1}}],[\"在用户类与被调用类之间加了一个中间层\",{\"1\":{\"264\":1}}],[\"在不同设备间运行来实现完整的业务\",{\"1\":{\"1702\":3}}],[\"在不深入了解api的情况下就能将api用到自己开发当中\",{\"1\":{\"778\":1}}],[\"在不改变数据结构的前提下\",{\"1\":{\"257\":1,\"395\":1,\"530\":1}}],[\"在不破坏封装前提下\",{\"1\":{\"257\":1,\"395\":1,\"494\":1}}],[\"在老年代中经历了\",{\"1\":{\"207\":1}}],[\"在标记完成后统一进行回收所有被标记对象\",{\"1\":{\"204\":1}}],[\"在该阶段是等待垃圾回收器对该对象空间进行回收\",{\"1\":{\"145\":1}}],[\"在创建阶段系统通过以下的几个步骤来完毕对象的创建过程\",{\"1\":{\"145\":1}}],[\"在java中\",{\"1\":{\"144\":1,\"383\":1}}],[\"在finder\",{\"1\":{\"67\":1}}],[\"在webstorm试用30天后就会过期\",{\"1\":{\"25\":1}}],[\"在线体验\",{\"0\":{\"15\":1,\"734\":1}}],[\"在线构建器\",{\"1\":{\"14\":1,\"733\":1}}],[\"在线\",{\"1\":{\"14\":1,\"733\":1}}],[\"在线用户\",{\"1\":{\"14\":1,\"733\":1}}],[\"破解ide\",{\"2\":{\"26\":1}}],[\"破解\",{\"0\":{\"25\":1}}],[\"破解地址\",{\"1\":{\"19\":1}}],[\"2单独调试\",{\"0\":{\"1475\":1}}],[\"2x\",{\"1\":{\"1435\":1}}],[\"2x切图\",{\"1\":{\"1435\":1}}],[\"2e\",{\"1\":{\"1367\":1}}],[\"2种含义\",{\"1\":{\"1253\":1}}],[\"2b\",{\"1\":{\"1367\":1}}],[\"2bit锁标志位\",{\"1\":{\"1117\":1}}],[\"2b22354a3f98\",{\"1\":{\"25\":1}}],[\"2d\",{\"1\":{\"1101\":1}}],[\"2之后\",{\"1\":{\"1078\":1}}],[\"2之前采用主次版本号\",{\"1\":{\"1078\":1}}],[\"2>\",{\"1\":{\"711\":1,\"1335\":1}}],[\"2到2\",{\"1\":{\"672\":1}}],[\"2m\",{\"1\":{\"631\":1}}],[\"2k\",{\"1\":{\"631\":1}}],[\"26cefcc04fec\",{\"1\":{\"1555\":1}}],[\"2688\",{\"1\":{\"1435\":1}}],[\"260\",{\"1\":{\"298\":1}}],[\"263\",{\"1\":{\"298\":1}}],[\"26\",{\"1\":{\"298\":1,\"543\":1,\"1367\":2,\"1371\":1}}],[\"256\",{\"1\":{\"1789\":1}}],[\"256k\",{\"1\":{\"631\":2}}],[\"255\",{\"1\":{\"1368\":1}}],[\"250ms\",{\"1\":{\"1320\":1}}],[\"25bit\",{\"1\":{\"1117\":1}}],[\"25733098ee214d595c27e3cb8bee05bac78a7f4d\",{\"1\":{\"622\":1}}],[\"25\",{\"1\":{\"298\":3,\"615\":1,\"631\":1,\"711\":1,\"1367\":1,\"1534\":2}}],[\"2540ms\",{\"1\":{\"103\":1}}],[\"2步骤\",{\"1\":{\"279\":1}}],[\"233\",{\"1\":{\"298\":1}}],[\"235\",{\"1\":{\"298\":1}}],[\"2398024\",{\"1\":{\"608\":2}}],[\"239\",{\"1\":{\"298\":1}}],[\"23\",{\"1\":{\"259\":1,\"298\":1,\"406\":1,\"409\":1,\"417\":1,\"423\":1,\"429\":1,\"436\":1,\"442\":1,\"448\":1,\"454\":1,\"460\":1,\"466\":1,\"472\":1,\"478\":1,\"484\":1,\"490\":1,\"496\":1,\"502\":1,\"508\":1,\"514\":1,\"520\":1,\"526\":1,\"532\":1,\"538\":1,\"544\":1,\"1367\":1,\"1503\":1,\"1613\":1}}],[\"23种设计模式简单定义\",{\"0\":{\"388\":1},\"1\":{\"391\":1}}],[\"23种设计模式\",{\"1\":{\"256\":1}}],[\"27\",{\"1\":{\"298\":1,\"622\":2,\"694\":1,\"1367\":1,\"1534\":1}}],[\"27下午\",{\"1\":{\"118\":1}}],[\"277\",{\"1\":{\"94\":1}}],[\"2462\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"240dpi\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"24\",{\"1\":{\"103\":1,\"298\":1,\"662\":1,\"723\":1,\"1367\":2,\"1564\":1}}],[\"29\",{\"1\":{\"103\":2,\"298\":1,\"1341\":1,\"1367\":2,\"1374\":1,\"1435\":2}}],[\"223\",{\"1\":{\"1341\":2}}],[\"2297092\",{\"1\":{\"820\":2}}],[\"220\",{\"1\":{\"477\":1}}],[\"2249069246763182397l\",{\"1\":{\"358\":1}}],[\"22\",{\"1\":{\"103\":1,\"298\":1,\"543\":1,\"1367\":1}}],[\"2160\",{\"1\":{\"1435\":1}}],[\"216\",{\"1\":{\"1338\":4,\"1435\":4}}],[\"21\",{\"1\":{\"64\":1,\"298\":1,\"543\":1,\"622\":2,\"694\":3,\"822\":1,\"1256\":1,\"1286\":1,\"1367\":2}}],[\"20monkey\",{\"1\":{\"1583\":1}}],[\"2072\",{\"1\":{\"1503\":1}}],[\"20k以内\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"200k以内\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"200\",{\"1\":{\"652\":1,\"1558\":1}}],[\"20000\",{\"1\":{\"537\":1}}],[\"2000\",{\"1\":{\"537\":1,\"651\":1,\"823\":1}}],[\"204\",{\"1\":{\"651\":1}}],[\"2026\",{\"1\":{\"1928\":1}}],[\"2020\",{\"1\":{\"1311\":1,\"1312\":1,\"1313\":1}}],[\"2023\",{\"1\":{\"622\":2}}],[\"2024\",{\"1\":{\"614\":5,\"615\":6,\"630\":5,\"694\":1,\"711\":1,\"1928\":1}}],[\"20\",{\"0\":{\"64\":1},\"1\":{\"103\":2,\"298\":1,\"351\":1,\"531\":3,\"834\":1,\"1256\":1,\"1286\":1,\"1332\":1,\"1341\":1,\"1367\":1,\"1435\":2,\"1521\":3,\"1530\":1,\"1583\":1,\"1737\":1}}],[\"2015\",{\"1\":{\"1564\":1,\"1727\":1}}],[\"20190312\",{\"1\":{\"1335\":1}}],[\"2019\",{\"1\":{\"1323\":1,\"1332\":1,\"1383\":1,\"1459\":1,\"1613\":1,\"1666\":1}}],[\"2019年的不可以\",{\"1\":{\"109\":1}}],[\"2019年破解码\",{\"1\":{\"19\":1}}],[\"201\",{\"1\":{\"615\":1}}],[\"2016\",{\"1\":{\"314\":1,\"1483\":1}}],[\"2018\",{\"0\":{\"22\":1},\"1\":{\"1503\":1,\"1647\":1,\"1648\":1}}],[\"28s\",{\"1\":{\"103\":1}}],[\"28\",{\"1\":{\"55\":2,\"298\":1,\"1298\":1,\"1329\":2,\"1367\":1,\"1483\":1}}],[\"2\",{\"0\":{\"24\":1,\"159\":1,\"168\":1,\"195\":1,\"205\":1,\"213\":1,\"228\":1,\"257\":1,\"279\":1,\"323\":1,\"332\":1,\"338\":1,\"343\":1,\"346\":1,\"349\":1,\"359\":1,\"405\":1,\"414\":1,\"416\":1,\"435\":1,\"477\":1,\"559\":1,\"637\":1,\"745\":1,\"823\":1,\"838\":1,\"840\":1,\"879\":1,\"880\":1,\"943\":1,\"979\":1,\"1043\":1,\"1054\":1,\"1062\":1,\"1110\":1,\"1122\":1,\"1125\":1,\"1129\":1,\"1131\":1,\"1136\":1,\"1164\":1,\"1192\":1,\"1199\":1,\"1203\":1,\"1226\":1,\"1248\":1,\"1305\":1,\"1310\":1,\"1368\":1,\"1441\":1,\"1442\":1,\"1443\":1,\"1444\":2,\"1445\":1,\"1446\":1,\"1447\":1,\"1473\":1,\"1487\":1,\"1588\":1,\"1592\":1,\"1601\":1,\"1626\":1,\"1642\":1,\"1645\":1,\"1708\":1,\"1712\":1,\"1922\":1,\"1960\":1},\"1\":{\"25\":1,\"67\":1,\"70\":1,\"79\":1,\"85\":1,\"103\":1,\"106\":3,\"109\":1,\"115\":1,\"144\":1,\"145\":1,\"158\":1,\"159\":1,\"168\":1,\"181\":1,\"184\":1,\"194\":2,\"195\":1,\"196\":1,\"200\":2,\"204\":1,\"207\":4,\"215\":1,\"227\":1,\"228\":1,\"230\":2,\"246\":3,\"248\":1,\"257\":2,\"261\":1,\"265\":1,\"271\":1,\"278\":1,\"279\":1,\"280\":1,\"281\":5,\"283\":10,\"284\":2,\"285\":3,\"305\":2,\"328\":2,\"332\":1,\"339\":1,\"350\":1,\"351\":3,\"352\":2,\"353\":1,\"354\":5,\"359\":2,\"365\":1,\"422\":1,\"447\":2,\"525\":2,\"558\":1,\"573\":1,\"583\":1,\"595\":1,\"598\":2,\"619\":1,\"622\":1,\"638\":1,\"645\":2,\"649\":1,\"711\":2,\"738\":5,\"750\":1,\"752\":1,\"753\":6,\"754\":1,\"757\":3,\"760\":1,\"763\":1,\"766\":1,\"769\":1,\"772\":1,\"775\":2,\"778\":1,\"784\":1,\"787\":1,\"793\":2,\"796\":3,\"799\":1,\"802\":1,\"805\":4,\"808\":1,\"820\":2,\"821\":1,\"823\":2,\"828\":1,\"841\":1,\"845\":1,\"847\":1,\"858\":1,\"860\":1,\"863\":1,\"864\":2,\"867\":1,\"874\":1,\"880\":1,\"895\":1,\"897\":2,\"900\":1,\"904\":2,\"905\":2,\"908\":4,\"914\":1,\"917\":2,\"945\":1,\"948\":2,\"949\":1,\"950\":1,\"954\":1,\"977\":1,\"979\":1,\"984\":7,\"993\":1,\"1002\":1,\"1030\":1,\"1036\":1,\"1042\":1,\"1061\":1,\"1063\":1,\"1064\":2,\"1078\":3,\"1087\":1,\"1094\":2,\"1108\":1,\"1145\":1,\"1176\":1,\"1177\":1,\"1198\":1,\"1203\":3,\"1225\":1,\"1253\":6,\"1256\":1,\"1259\":1,\"1262\":1,\"1265\":1,\"1268\":4,\"1271\":2,\"1274\":1,\"1277\":1,\"1280\":1,\"1283\":1,\"1286\":8,\"1292\":2,\"1305\":1,\"1311\":1,\"1312\":1,\"1313\":1,\"1317\":3,\"1320\":1,\"1323\":1,\"1326\":1,\"1332\":1,\"1338\":5,\"1341\":1,\"1346\":2,\"1349\":2,\"1358\":1,\"1367\":1,\"1368\":2,\"1371\":1,\"1374\":1,\"1383\":2,\"1399\":2,\"1416\":2,\"1417\":1,\"1435\":9,\"1459\":1,\"1473\":1,\"1474\":2,\"1476\":3,\"1479\":2,\"1480\":2,\"1481\":3,\"1482\":1,\"1483\":2,\"1487\":1,\"1488\":2,\"1491\":1,\"1512\":5,\"1518\":11,\"1521\":3,\"1524\":1,\"1527\":1,\"1530\":5,\"1534\":17,\"1540\":8,\"1546\":4,\"1549\":2,\"1552\":3,\"1555\":3,\"1561\":1,\"1567\":10,\"1587\":1,\"1592\":3,\"1595\":5,\"1598\":2,\"1604\":3,\"1607\":1,\"1610\":2,\"1623\":1,\"1636\":1,\"1637\":1,\"1647\":1,\"1648\":2,\"1666\":2,\"1682\":2,\"1690\":1,\"1701\":1,\"1711\":9,\"1712\":9,\"1713\":7,\"1756\":4,\"1762\":1,\"1770\":1,\"1788\":1,\"1790\":3,\"1798\":2,\"1805\":2,\"1843\":1,\"1905\":5,\"1911\":1,\"1922\":1,\"1933\":1,\"1959\":1,\"1966\":5}}],[\"网上关于aop研究不够深入\",{\"1\":{\"1561\":1}}],[\"网上查看各种方案\",{\"1\":{\"1416\":1}}],[\"网络请求数据\",{\"1\":{\"1592\":1}}],[\"网络代码自动生成工具\",{\"1\":{\"1555\":1}}],[\"网络代码自动生成工具<\",{\"1\":{\"1555\":1}}],[\"网络代码自动生成插件mvparmshelper插件编写环境配置\",{\"1\":{\"1549\":1,\"1552\":1,\"1555\":1}}],[\"网络代码自动生成插件\",{\"0\":{\"1549\":1}}],[\"网络框架\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"网络通知\",{\"1\":{\"1329\":1}}],[\"网络日志打印\",{\"1\":{\"1329\":1}}],[\"网络协议\",{\"1\":{\"793\":1}}],[\"网络基础\",{\"0\":{\"553\":1}}],[\"网络\",{\"0\":{\"551\":1},\"1\":{\"1702\":1},\"2\":{\"552\":1,\"554\":1,\"555\":1}}],[\"网络相关知识缺失\",{\"1\":{\"227\":1}}],[\"网址是\",{\"1\":{\"23\":1}}],[\"网关模块\",{\"1\":{\"12\":1,\"731\":1}}],[\"网关壳\",{\"1\":{\"12\":1,\"731\":1}}],[\"到jcenter\",{\"1\":{\"1908\":1}}],[\"到天亮项目\",{\"1\":{\"531\":1}}],[\"到\",{\"1\":{\"298\":2,\"441\":1,\"958\":1}}],[\"到module下敲命令\",{\"1\":{\"52\":1}}],[\"到官网下载最新的webstorm\",{\"0\":{\"23\":1}}],[\"到哪出了问题而烦恼吗用了它即可实时查看请求经过的每一处每一个节点\",{\"1\":{\"12\":1,\"731\":1}}],[\"1个\",{\"1\":{\"1779\":2}}],[\"1个线程\",{\"1\":{\"1779\":2}}],[\"1次是90度\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"1fb3bfa7c427\",{\"1\":{\"1647\":1}}],[\"1f\",{\"1\":{\"1367\":1}}],[\"1c\",{\"1\":{\"1367\":1}}],[\"1关系\",{\"1\":{\"1225\":1}}],[\"1标记算法\",{\"0\":{\"1123\":1}}],[\"1bit\",{\"1\":{\"1117\":1}}],[\"1vxn\",{\"1\":{\"1049\":1}}],[\"1dthgs1m\",{\"1\":{\"1049\":1}}],[\"1避免数组越界\",{\"1\":{\"993\":1}}],[\"1a\",{\"1\":{\"853\":1,\"1367\":1}}],[\"1m\",{\"1\":{\"631\":1,\"1338\":7,\"1435\":7}}],[\"1<<4\",{\"1\":{\"351\":1}}],[\"1小时快速构建拥有基础能力的应用\",{\"1\":{\"305\":1}}],[\"1+2+3+\",{\"1\":{\"298\":1}}],[\"11000033\",{\"1\":{\"1534\":2}}],[\"11011000\",{\"1\":{\"354\":1}}],[\"1125x2436\",{\"1\":{\"1435\":1}}],[\"1190000014396421\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"1171\",{\"1\":{\"820\":1}}],[\"111111\",{\"1\":{\"613\":1,\"621\":1,\"629\":1,\"695\":1}}],[\"11111110\",{\"1\":{\"354\":1}}],[\"11111111\",{\"1\":{\"354\":2}}],[\"11月27日第一轮测试bug修复完毕\",{\"1\":{\"595\":1}}],[\"11月27日uat民生审核通过\",{\"1\":{\"595\":1}}],[\"11月25日bug整体第一轮修复\",{\"1\":{\"595\":1}}],[\"11月23日测试抽调资源\",{\"1\":{\"595\":1}}],[\"11月22日下午所有开发整体提测\",{\"1\":{\"595\":1}}],[\"11月20日\",{\"1\":{\"595\":1}}],[\"11月第二周\",{\"1\":{\"595\":1}}],[\"11月18日\",{\"1\":{\"595\":1}}],[\"11月16日\",{\"1\":{\"595\":1}}],[\"11月11日\",{\"1\":{\"595\":1}}],[\"11月13日苹果应用市场正式发布\",{\"1\":{\"595\":1}}],[\"11月12日\",{\"1\":{\"595\":1}}],[\"11月8日ios提出第12次发版审核需求\",{\"1\":{\"595\":1}}],[\"11月8日运维梳理民生上线流程\",{\"1\":{\"595\":1}}],[\"11月8日排期确定开发排期\",{\"1\":{\"595\":1}}],[\"11月6日产品评审通过\",{\"1\":{\"595\":1}}],[\"118\",{\"1\":{\"349\":4}}],[\"115\",{\"1\":{\"349\":2}}],[\"11\",{\"0\":{\"831\":1,\"983\":1},\"1\":{\"298\":1,\"598\":1,\"615\":4,\"884\":2,\"1256\":1,\"1262\":1,\"1274\":1,\"1283\":1,\"1286\":1,\"1367\":1,\"1402\":1,\"1518\":1,\"1534\":2,\"1685\":1}}],[\"189\",{\"1\":{\"1708\":1}}],[\"18601986749\",{\"1\":{\"1305\":1}}],[\"186c00\",{\"1\":{\"1298\":2}}],[\"186\",{\"1\":{\"1298\":1}}],[\"18000l\",{\"1\":{\"650\":1}}],[\"182行\",{\"1\":{\"381\":1}}],[\"18\",{\"0\":{\"1034\":1},\"1\":{\"298\":1,\"543\":1,\"615\":1,\"1256\":1,\"1286\":1,\"1367\":1,\"1374\":1}}],[\"181\",{\"1\":{\"298\":1}}],[\"175\",{\"1\":{\"1866\":1}}],[\"173\",{\"1\":{\"1555\":1}}],[\"1792\",{\"1\":{\"1435\":1}}],[\"170\",{\"1\":{\"298\":1,\"1338\":2,\"1435\":2}}],[\"17\",{\"0\":{\"1028\":1},\"1\":{\"298\":3,\"622\":2,\"900\":1,\"1256\":1,\"1286\":1,\"1367\":2,\"1974\":3}}],[\"1728000\",{\"1\":{\"651\":1}}],[\"172\",{\"1\":{\"94\":1,\"298\":1,\"1341\":2}}],[\"1500次\",{\"1\":{\"1209\":1}}],[\"15岁\",{\"1\":{\"1146\":1}}],[\"1563286764000\",{\"1\":{\"1298\":1}}],[\"156\",{\"1\":{\"298\":1}}],[\"155214966\",{\"1\":{\"1298\":1}}],[\"155\",{\"1\":{\"298\":1}}],[\"153\",{\"1\":{\"298\":1}}],[\"154\",{\"1\":{\"298\":1}}],[\"15\",{\"0\":{\"1014\":1},\"1\":{\"184\":1,\"298\":1,\"884\":6,\"900\":2,\"1256\":1,\"1286\":1,\"1292\":2,\"1367\":1,\"1770\":1}}],[\"151\",{\"1\":{\"67\":1,\"298\":1,\"1030\":10}}],[\"1对多\",{\"1\":{\"181\":1}}],[\"1986xxx\",{\"1\":{\"1518\":2}}],[\"1920若提供一张切图\",{\"1\":{\"1435\":1}}],[\"1920\",{\"1\":{\"1338\":2,\"1435\":4}}],[\"192\",{\"1\":{\"662\":2,\"723\":2,\"1338\":2,\"1435\":2}}],[\"19\",{\"0\":{\"1041\":1},\"1\":{\"103\":1,\"298\":1,\"531\":1,\"614\":5,\"615\":5,\"630\":5,\"1256\":1,\"1286\":1,\"1367\":1,\"1402\":2,\"1685\":2}}],[\"140dp\",{\"1\":{\"1346\":1}}],[\"144\",{\"1\":{\"1338\":2,\"1435\":2}}],[\"1489\",{\"1\":{\"822\":1}}],[\"1464\",{\"1\":{\"822\":1}}],[\"145\",{\"1\":{\"298\":1}}],[\"14\",{\"0\":{\"1007\":1},\"1\":{\"103\":1,\"298\":2,\"531\":1,\"884\":3,\"1256\":1,\"1274\":1,\"1283\":1,\"1286\":1,\"1367\":2,\"1521\":1,\"1974\":3}}],[\"13995次\",{\"1\":{\"1209\":1}}],[\"13\",{\"0\":{\"1001\":1},\"1\":{\"103\":1,\"298\":1,\"598\":1,\"614\":4,\"615\":4,\"630\":4,\"884\":5,\"1256\":1,\"1274\":1,\"1283\":1,\"1286\":1,\"1367\":1}}],[\"12dp\",{\"1\":{\"1346\":10}}],[\"1234\",{\"1\":{\"1154\":1,\"1156\":1,\"1708\":1}}],[\"123\",{\"1\":{\"1037\":1,\"1518\":4,\"1952\":1}}],[\"12300\",{\"1\":{\"531\":1}}],[\"12200\",{\"1\":{\"834\":1}}],[\"128错误\",{\"1\":{\"1690\":1}}],[\"1280\",{\"1\":{\"1338\":2,\"1435\":4}}],[\"128\",{\"1\":{\"1203\":2,\"1338\":2,\"1435\":2,\"1717\":1,\"1788\":1}}],[\"128~127\",{\"1\":{\"1203\":1}}],[\"128~127的integer对象\",{\"1\":{\"1203\":1}}],[\"128k\",{\"1\":{\"631\":1}}],[\"1287\",{\"1\":{\"298\":1}}],[\"12月9日uat民生审核通过\",{\"1\":{\"595\":1}}],[\"127868\",{\"1\":{\"820\":1}}],[\"127876\",{\"1\":{\"820\":1}}],[\"127\",{\"1\":{\"298\":1,\"627\":1,\"638\":2,\"1203\":1,\"1790\":1}}],[\"12159\",{\"1\":{\"1616\":1}}],[\"121\",{\"1\":{\"298\":1}}],[\"1242\",{\"1\":{\"1435\":1}}],[\"1242x2208\",{\"1\":{\"1435\":1}}],[\"124\",{\"1\":{\"298\":1}}],[\"120dpi\",{\"1\":{\"1338\":1}}],[\"120\",{\"1\":{\"298\":1}}],[\"12\",{\"0\":{\"990\":1},\"1\":{\"103\":1,\"118\":1,\"298\":1,\"351\":1,\"598\":1,\"884\":3,\"1070\":1,\"1256\":1,\"1274\":1,\"1283\":1,\"1286\":1,\"1323\":1,\"1338\":2,\"1367\":2,\"1435\":2,\"1459\":1,\"1483\":1,\"1521\":2,\"1564\":1}}],[\"16进制表示\",{\"1\":{\"1367\":1,\"1368\":1}}],[\"16dp\",{\"1\":{\"1346\":1}}],[\"16格式\",{\"1\":{\"1015\":1}}],[\"168\",{\"1\":{\"644\":1,\"662\":2,\"723\":2}}],[\"16m\",{\"1\":{\"631\":2}}],[\"16k\",{\"1\":{\"631\":1}}],[\"16=6\",{\"1\":{\"349\":2}}],[\"16=3\",{\"1\":{\"349\":1}}],[\"163\",{\"1\":{\"298\":1}}],[\"166\",{\"1\":{\"298\":1}}],[\"160dpi\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"160\",{\"1\":{\"298\":1}}],[\"1626326127283\",{\"1\":{\"229\":1}}],[\"16\",{\"0\":{\"1021\":1},\"1\":{\"94\":1,\"298\":1,\"349\":1,\"352\":2,\"353\":3,\"354\":1,\"358\":3,\"531\":1,\"614\":1,\"615\":1,\"630\":1,\"702\":1,\"1015\":1,\"1203\":1,\"1256\":1,\"1286\":1,\"1338\":4,\"1346\":3,\"1367\":1,\"1435\":4,\"1521\":1,\"1530\":2,\"1540\":1}}],[\"1中已经修复\",{\"1\":{\"70\":1}}],[\"1systemprop\",{\"1\":{\"40\":1}}],[\"108360866\",{\"1\":{\"1970\":1}}],[\"1080\",{\"1\":{\"1338\":2,\"1435\":4}}],[\"1032\",{\"1\":{\"1865\":1}}],[\"1021\",{\"1\":{\"1865\":1}}],[\"1024\",{\"1\":{\"12\":1,\"731\":1,\"1182\":2,\"1435\":2,\"1534\":1,\"1788\":1}}],[\"10700次\",{\"1\":{\"1209\":1}}],[\"10级\",{\"1\":{\"942\":1}}],[\"10的位置\",{\"1\":{\"833\":1}}],[\"10mb\",{\"1\":{\"1708\":1}}],[\"10m\",{\"1\":{\"631\":1}}],[\"1009\",{\"1\":{\"1865\":1}}],[\"1008\",{\"1\":{\"1865\":1}}],[\"10086\",{\"1\":{\"604\":2,\"657\":1}}],[\"1007\",{\"1\":{\"1865\":1}}],[\"1006\",{\"1\":{\"1865\":1}}],[\"1006210\",{\"1\":{\"1604\":1}}],[\"1005\",{\"1\":{\"1865\":1}}],[\"1004\",{\"1\":{\"1865\":1}}],[\"100450\",{\"1\":{\"531\":1}}],[\"1003\",{\"1\":{\"1865\":1}}],[\"1002\",{\"1\":{\"1865\":1}}],[\"10011\",{\"1\":{\"1417\":1}}],[\"10010000\",{\"1\":{\"354\":2}}],[\"100f\",{\"1\":{\"1368\":1}}],[\"100dp\",{\"1\":{\"1346\":1}}],[\"10000次\",{\"1\":{\"1209\":1}}],[\"10000\",{\"1\":{\"537\":1}}],[\"100000000\",{\"1\":{\"354\":1}}],[\"1000\",{\"1\":{\"531\":1,\"537\":1,\"833\":1,\"1383\":1,\"1583\":1,\"1666\":1}}],[\"100\",{\"1\":{\"513\":3,\"537\":1,\"662\":1,\"723\":1,\"867\":2,\"894\":1,\"1182\":1,\"1367\":1,\"1368\":1,\"1518\":2,\"1534\":3,\"1583\":2}}],[\"100+\",{\"1\":{\"228\":1}}],[\"1045\",{\"1\":{\"618\":1}}],[\"104\",{\"1\":{\"298\":1}}],[\"10\",{\"0\":{\"265\":1,\"287\":1,\"828\":1,\"976\":1},\"1\":{\"94\":2,\"103\":1,\"298\":1,\"331\":2,\"338\":1,\"531\":2,\"598\":1,\"694\":3,\"701\":1,\"793\":1,\"802\":1,\"868\":1,\"907\":1,\"917\":1,\"923\":1,\"926\":1,\"950\":1,\"1248\":1,\"1256\":1,\"1262\":1,\"1274\":1,\"1283\":1,\"1286\":2,\"1329\":1,\"1367\":1,\"1402\":3,\"1518\":1,\"1521\":1,\"1530\":1,\"1534\":3,\"1685\":3,\"1737\":1,\"1756\":1,\"1974\":1}}],[\"1018\",{\"1\":{\"1865\":1}}],[\"1010\",{\"1\":{\"1865\":1}}],[\"1010000009719093\",{\"1\":{\"31\":1}}],[\"101684223987951077\",{\"1\":{\"1706\":1}}],[\"101100\",{\"1\":{\"531\":1}}],[\"10110010\",{\"1\":{\"351\":2}}],[\"101\",{\"1\":{\"67\":2,\"615\":1,\"644\":1}}],[\"1\",{\"0\":{\"23\":1,\"158\":1,\"167\":1,\"194\":1,\"204\":1,\"212\":1,\"227\":1,\"256\":1,\"276\":1,\"277\":1,\"278\":1,\"322\":1,\"331\":1,\"337\":1,\"342\":1,\"345\":1,\"348\":1,\"358\":1,\"360\":1,\"402\":1,\"404\":1,\"413\":1,\"415\":1,\"421\":1,\"427\":1,\"433\":1,\"440\":1,\"446\":1,\"452\":1,\"458\":1,\"464\":1,\"470\":1,\"476\":1,\"482\":1,\"488\":1,\"494\":1,\"500\":1,\"506\":1,\"512\":1,\"518\":1,\"524\":1,\"530\":1,\"536\":1,\"542\":1,\"636\":1,\"744\":1,\"817\":1,\"818\":1,\"839\":1,\"878\":1,\"942\":1,\"978\":1,\"1036\":1,\"1042\":1,\"1048\":1,\"1061\":1,\"1109\":1,\"1114\":1,\"1124\":1,\"1130\":1,\"1135\":1,\"1163\":1,\"1191\":1,\"1198\":1,\"1202\":1,\"1225\":1,\"1247\":1,\"1304\":1,\"1309\":1,\"1345\":1,\"1399\":1,\"1439\":1,\"1440\":2,\"1441\":1,\"1443\":1,\"1472\":1,\"1586\":1,\"1587\":1,\"1598\":1,\"1625\":1,\"1641\":1,\"1644\":1,\"1682\":1,\"1707\":1,\"1711\":1,\"1921\":1,\"1959\":1},\"1\":{\"25\":1,\"34\":2,\"43\":2,\"67\":2,\"70\":1,\"73\":3,\"79\":1,\"85\":1,\"94\":3,\"103\":3,\"106\":3,\"109\":1,\"115\":1,\"118\":1,\"144\":1,\"145\":1,\"158\":1,\"159\":1,\"168\":1,\"181\":1,\"184\":1,\"194\":2,\"195\":1,\"196\":1,\"200\":2,\"204\":1,\"206\":3,\"207\":6,\"215\":2,\"227\":1,\"228\":1,\"230\":2,\"237\":1,\"246\":3,\"247\":2,\"257\":2,\"261\":1,\"265\":1,\"271\":1,\"278\":2,\"279\":2,\"280\":2,\"281\":1,\"282\":1,\"283\":6,\"284\":3,\"285\":4,\"298\":5,\"305\":1,\"322\":1,\"327\":1,\"328\":2,\"329\":1,\"332\":7,\"333\":1,\"337\":1,\"339\":1,\"342\":1,\"347\":1,\"351\":6,\"352\":1,\"353\":1,\"354\":5,\"355\":1,\"358\":2,\"359\":2,\"360\":3,\"365\":3,\"381\":2,\"409\":1,\"422\":1,\"447\":1,\"513\":1,\"525\":2,\"543\":1,\"558\":2,\"573\":1,\"583\":1,\"595\":1,\"598\":2,\"615\":1,\"619\":1,\"627\":1,\"631\":2,\"638\":3,\"644\":2,\"649\":1,\"662\":2,\"694\":2,\"711\":3,\"723\":2,\"738\":5,\"750\":1,\"752\":1,\"753\":6,\"754\":1,\"757\":3,\"760\":1,\"763\":2,\"766\":1,\"769\":1,\"772\":1,\"775\":2,\"778\":1,\"784\":1,\"787\":2,\"793\":2,\"796\":3,\"799\":1,\"802\":1,\"805\":4,\"808\":1,\"820\":2,\"821\":1,\"823\":2,\"828\":2,\"833\":1,\"841\":1,\"845\":1,\"847\":1,\"853\":1,\"858\":1,\"860\":1,\"863\":1,\"864\":1,\"867\":1,\"870\":6,\"874\":1,\"876\":7,\"880\":7,\"886\":3,\"895\":1,\"897\":2,\"900\":4,\"904\":1,\"905\":1,\"908\":3,\"914\":1,\"917\":2,\"923\":2,\"942\":1,\"945\":1,\"948\":2,\"949\":1,\"950\":1,\"954\":1,\"977\":1,\"979\":1,\"984\":8,\"985\":1,\"993\":4,\"996\":1,\"1002\":1,\"1009\":3,\"1030\":1,\"1036\":3,\"1042\":1,\"1044\":1,\"1055\":1,\"1056\":2,\"1061\":1,\"1063\":1,\"1064\":3,\"1070\":1,\"1076\":1,\"1078\":2,\"1087\":1,\"1094\":2,\"1102\":1,\"1108\":1,\"1109\":1,\"1110\":1,\"1124\":1,\"1131\":2,\"1145\":1,\"1176\":1,\"1177\":1,\"1198\":1,\"1203\":8,\"1225\":1,\"1238\":1,\"1239\":1,\"1253\":6,\"1256\":1,\"1259\":1,\"1262\":1,\"1265\":1,\"1268\":4,\"1271\":2,\"1274\":1,\"1277\":1,\"1280\":1,\"1283\":1,\"1286\":8,\"1289\":1,\"1292\":2,\"1298\":1,\"1304\":1,\"1311\":1,\"1312\":1,\"1313\":1,\"1317\":4,\"1320\":1,\"1323\":1,\"1326\":1,\"1329\":4,\"1332\":2,\"1338\":6,\"1341\":1,\"1346\":5,\"1349\":7,\"1358\":1,\"1367\":2,\"1368\":2,\"1383\":2,\"1398\":1,\"1399\":2,\"1402\":2,\"1405\":1,\"1416\":5,\"1417\":1,\"1435\":7,\"1473\":1,\"1474\":3,\"1475\":1,\"1476\":3,\"1479\":4,\"1480\":2,\"1481\":3,\"1482\":1,\"1483\":2,\"1486\":1,\"1487\":1,\"1488\":2,\"1491\":2,\"1494\":1,\"1500\":1,\"1512\":7,\"1518\":19,\"1521\":6,\"1524\":2,\"1527\":1,\"1530\":5,\"1534\":9,\"1540\":13,\"1546\":7,\"1549\":2,\"1552\":3,\"1555\":2,\"1558\":1,\"1561\":1,\"1567\":10,\"1580\":1,\"1586\":1,\"1587\":1,\"1589\":4,\"1592\":2,\"1595\":9,\"1598\":2,\"1601\":2,\"1604\":4,\"1607\":2,\"1610\":2,\"1623\":2,\"1632\":2,\"1636\":1,\"1637\":1,\"1642\":1,\"1647\":1,\"1666\":2,\"1681\":1,\"1682\":2,\"1685\":2,\"1701\":1,\"1707\":2,\"1708\":1,\"1711\":9,\"1712\":10,\"1713\":9,\"1727\":1,\"1739\":2,\"1762\":3,\"1770\":1,\"1776\":1,\"1788\":1,\"1789\":4,\"1790\":10,\"1798\":5,\"1799\":1,\"1805\":1,\"1826\":2,\"1827\":3,\"1829\":1,\"1846\":3,\"1850\":1,\"1857\":3,\"1905\":5,\"1911\":2,\"1922\":1,\"1933\":1,\"1949\":1,\"1959\":1,\"1960\":2,\"1962\":1,\"1966\":5}}],[\"实质就是向binder\",{\"1\":{\"1761\":1}}],[\"实质上是线程b接收了之前某个线程发出的\",{\"1\":{\"862\":1}}],[\"实质上是线程a向接下来将要获取这个锁的某个线程发出了\",{\"1\":{\"862\":1}}],[\"实体类型\",{\"1\":{\"1735\":1}}],[\"实体类创建简单pojo\",{\"1\":{\"1512\":1}}],[\"实在是难以让人接受\",{\"1\":{\"1481\":1}}],[\"实例\",{\"1\":{\"1711\":1}}],[\"实例化processstate\",{\"1\":{\"1805\":1}}],[\"实例化\",{\"1\":{\"1598\":2}}],[\"实例用到\",{\"1\":{\"1262\":1}}],[\"实例数据\",{\"1\":{\"1117\":2}}],[\"实例找到对应class\",{\"1\":{\"1029\":1}}],[\"实例方法\",{\"1\":{\"991\":1}}],[\"实例设置的值\",{\"1\":{\"384\":1}}],[\"实际情况来安排\",{\"1\":{\"1447\":1}}],[\"实际情况未必\",{\"1\":{\"859\":1}}],[\"实际中项目学习\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"实际元数据中\",{\"1\":{\"1202\":1}}],[\"实际项目\",{\"1\":{\"1069\":1}}],[\"实际上\",{\"1\":{\"385\":1}}],[\"实战范例目的是新手在项目基础上修改\",{\"1\":{\"1540\":1}}],[\"实战范例\",{\"1\":{\"1540\":1}}],[\"实战演示\",{\"0\":{\"1307\":1}}],[\"实战\",{\"0\":{\"1205\":1},\"1\":{\"1515\":1,\"1540\":1}}],[\"实战编程\",{\"0\":{\"949\":1}}],[\"实战示例\",{\"1\":{\"945\":1}}],[\"实战案例\",{\"0\":{\"822\":1,\"1810\":1,\"1812\":1}}],[\"实战项目地址\",{\"0\":{\"980\":1,\"987\":1,\"998\":1,\"1004\":1,\"1011\":1,\"1018\":1,\"1025\":1,\"1031\":1,\"1038\":1,\"1045\":1,\"1051\":1,\"1057\":1,\"1065\":1,\"1071\":1,\"1082\":1,\"1089\":1,\"1097\":1,\"1104\":1,\"1111\":1},\"1\":{\"271\":1,\"1561\":1}}],[\"实用\",{\"1\":{\"814\":1,\"1317\":1,\"1521\":1}}],[\"实践过程是有用\",{\"1\":{\"757\":1}}],[\"实现bpservicemanager对象\",{\"1\":{\"1806\":1}}],[\"实现一些后尾清除类的工作\",{\"1\":{\"1761\":1}}],[\"实现iremoteservice\",{\"1\":{\"1737\":1}}],[\"实现服务端sayhello方法\",{\"1\":{\"1727\":1}}],[\"实现客户端sayhello方法\",{\"1\":{\"1727\":1}}],[\"实现接口\",{\"1\":{\"1604\":1}}],[\"实现特定渲染器\",{\"1\":{\"1540\":1}}],[\"实现有技术成本且慎用\",{\"1\":{\"1494\":1}}],[\"实现扁平化\",{\"1\":{\"1494\":1}}],[\"实现多采用反射与效率背道而驰\",{\"1\":{\"1494\":1}}],[\"实现原理\",{\"0\":{\"1486\":1},\"1\":{\"1486\":1,\"1491\":1}}],[\"实现代码\",{\"1\":{\"1364\":1}}],[\"实现同步\",{\"1\":{\"1238\":1}}],[\"实现同步访问\",{\"1\":{\"1238\":1}}],[\"实现的接口指针\",{\"1\":{\"1109\":1}}],[\"实现的一个\",{\"1\":{\"365\":1}}],[\"实现线程安全的阻塞队列\",{\"1\":{\"950\":1}}],[\"实现线程池的三步\",{\"0\":{\"950\":1}}],[\"实现demo\",{\"1\":{\"945\":1}}],[\"实现生产者消费者\",{\"1\":{\"917\":2}}],[\"实现方式\",{\"1\":{\"754\":1}}],[\"实现类之间不发生直接依赖关系\",{\"1\":{\"753\":1}}],[\"实现关系\",{\"1\":{\"735\":1}}],[\"实现上类似\",{\"1\":{\"358\":1}}],[\"实现\",{\"0\":{\"735\":1},\"1\":{\"352\":1,\"368\":2,\"735\":3,\"1732\":1}}],[\"实现了\",{\"1\":{\"334\":1}}],[\"实现复杂\",{\"1\":{\"314\":1}}],[\"实现业务逻辑\",{\"1\":{\"311\":1,\"314\":1}}],[\"实现运行时数据区\",{\"0\":{\"1088\":1},\"1\":{\"271\":1}}],[\"实现重用\",{\"1\":{\"158\":1}}],[\"实测可用\",{\"1\":{\"16\":1}}],[\"实时监测工作\",{\"1\":{\"1540\":1}}],[\"实时指引方向\",{\"1\":{\"571\":1}}],[\"实时报警监控\",{\"1\":{\"12\":1,\"731\":1}}],[\"实时收集所有服务的运行日志\",{\"1\":{\"12\":1,\"731\":1}}],[\"nr\",{\"1\":{\"1857\":3}}],[\"nr|head\",{\"1\":{\"834\":1}}],[\"nwrite\",{\"1\":{\"1827\":2}}],[\"nsecs\",{\"1\":{\"1826\":1,\"1828\":1,\"1831\":2}}],[\"n++\",{\"1\":{\"1799\":1}}],[\"nv\",{\"1\":{\"1518\":1}}],[\"n关系\",{\"1\":{\"1226\":1}}],[\"n和n+1两个slot\",{\"1\":{\"1182\":1}}],[\"nice\",{\"1\":{\"1865\":1}}],[\"nicename\",{\"1\":{\"1860\":3,\"1863\":1}}],[\"nil\",{\"1\":{\"979\":2,\"984\":3,\"985\":1,\"992\":1,\"993\":3,\"996\":1,\"1003\":2,\"1015\":2,\"1022\":2,\"1030\":1,\"1036\":8,\"1044\":1,\"1063\":2,\"1064\":1,\"1102\":2,\"1110\":2}}],[\"nid=0x555e\",{\"1\":{\"822\":1}}],[\"nginx\",{\"0\":{\"651\":1},\"1\":{\"636\":1,\"637\":2,\"638\":7,\"639\":1,\"640\":1,\"675\":1,\"677\":1,\"678\":1,\"679\":1}}],[\"nginx官方提供了yum源\",{\"1\":{\"635\":1}}],[\"nginx与跨域配置\",{\"1\":{\"635\":1}}],[\"nginx配置fe\",{\"0\":{\"634\":1},\"1\":{\"635\":1}}],[\"nlogn\",{\"1\":{\"284\":1}}],[\"numexpression\",{\"1\":{\"525\":5}}],[\"number\",{\"1\":{\"351\":1,\"359\":2,\"1521\":2,\"1555\":1,\"1707\":1}}],[\"nummoved\",{\"1\":{\"333\":3}}],[\"num\",{\"1\":{\"278\":4,\"285\":7,\"354\":1,\"525\":5,\"917\":20,\"950\":15,\"1527\":1,\"1727\":1}}],[\"nums\",{\"1\":{\"278\":5,\"279\":18,\"280\":9,\"281\":9,\"282\":9,\"283\":27,\"284\":18,\"285\":12}}],[\"nullable\",{\"1\":{\"1592\":2}}],[\"null缩写\",{\"1\":{\"1518\":1}}],[\"null<\",{\"1\":{\"1320\":1}}],[\"nullobject模式\",{\"1\":{\"1286\":1}}],[\"null引用可以转换为任何类型\",{\"1\":{\"984\":1}}],[\"nullpointerexception\",{\"1\":{\"672\":1,\"984\":1,\"993\":2,\"1036\":1}}],[\"null\",{\"1\":{\"154\":1,\"197\":2,\"259\":1,\"278\":1,\"279\":1,\"280\":1,\"281\":1,\"283\":2,\"284\":1,\"285\":4,\"333\":1,\"348\":2,\"350\":13,\"352\":3,\"356\":1,\"359\":1,\"363\":4,\"364\":2,\"368\":2,\"381\":10,\"385\":3,\"405\":3,\"416\":1,\"537\":2,\"543\":1,\"614\":5,\"615\":50,\"622\":2,\"630\":5,\"711\":1,\"864\":2,\"876\":1,\"879\":4,\"880\":1,\"882\":1,\"886\":1,\"895\":7,\"896\":2,\"917\":2,\"984\":2,\"995\":1,\"1175\":2,\"1292\":1,\"1320\":1,\"1329\":1,\"1332\":4,\"1335\":1,\"1349\":1,\"1358\":5,\"1416\":5,\"1417\":12,\"1518\":7,\"1521\":1,\"1530\":5,\"1546\":3,\"1552\":1,\"1555\":5,\"1592\":4,\"1598\":5,\"1601\":3,\"1604\":4,\"1610\":1,\"1613\":1,\"1732\":4,\"1736\":2,\"1739\":5,\"1756\":13,\"1762\":3,\"1770\":2,\"1772\":1,\"1788\":1,\"1799\":3,\"1805\":5,\"1806\":2,\"1829\":4,\"1840\":3,\"1842\":2,\"1843\":3,\"1846\":12,\"1847\":4,\"1848\":1,\"1849\":9,\"1850\":7,\"1851\":2,\"1865\":1,\"1866\":2,\"1869\":1}}],[\"ncpu\",{\"1\":{\"248\":1,\"828\":1}}],[\"ncpu+1\",{\"1\":{\"248\":1,\"828\":1}}],[\"nthreads\",{\"1\":{\"247\":3,\"828\":3}}],[\"nternal\",{\"0\":{\"85\":1}}],[\"n2\",{\"1\":{\"227\":1,\"228\":1}}],[\"n\",{\"0\":{\"1973\":1,\"1974\":1},\"1\":{\"207\":1,\"298\":3,\"333\":1,\"348\":2,\"350\":2,\"351\":1,\"352\":6,\"353\":1,\"354\":17,\"614\":66,\"615\":128,\"622\":31,\"630\":66,\"1182\":1,\"1227\":1,\"1338\":1,\"1417\":1,\"1435\":1,\"1518\":2,\"1727\":4,\"1799\":3,\"1857\":1,\"1955\":1,\"1974\":11}}],[\"npm安装模块\",{\"0\":{\"1409\":1}}],[\"npm安装卸载命令\",{\"0\":{\"1408\":1}}],[\"npm\",{\"0\":{\"112\":1,\"1410\":1},\"1\":{\"85\":2,\"94\":13,\"701\":2,\"703\":1,\"1409\":6,\"1410\":2,\"1413\":11,\"1960\":2,\"1974\":1}}],[\"ndk=$android\",{\"1\":{\"1371\":1}}],[\"ndkversion\",{\"1\":{\"64\":2}}],[\"ndk\",{\"0\":{\"64\":1},\"1\":{\"1317\":1,\"1371\":2,\"1530\":1}}],[\"noop\",{\"1\":{\"1789\":1}}],[\"nooperandsinstruction\",{\"1\":{\"1094\":2,\"1095\":1}}],[\"nop\",{\"1\":{\"1093\":1}}],[\"nosuchmethoderror\",{\"1\":{\"993\":1}}],[\"nohup\",{\"1\":{\"711\":1}}],[\"nor\",{\"1\":{\"1518\":1}}],[\"north2016\",{\"1\":{\"1503\":3}}],[\"noredirect\",{\"1\":{\"667\":1,\"668\":5}}],[\"normalfactory\",{\"1\":{\"428\":6}}],[\"normaltire\",{\"1\":{\"428\":2}}],[\"normalengine\",{\"1\":{\"428\":2}}],[\"normalbrake\",{\"1\":{\"428\":2}}],[\"nonblock\",{\"1\":{\"1829\":1}}],[\"nonnull\",{\"1\":{\"1598\":6,\"1851\":1}}],[\"nonzero\",{\"1\":{\"1518\":2}}],[\"none\",{\"1\":{\"1329\":1}}],[\"nonfairtryacquire\",{\"1\":{\"882\":1}}],[\"non\",{\"1\":{\"334\":1,\"631\":3}}],[\"notnull\",{\"1\":{\"1524\":1}}],[\"nothing\",{\"1\":{\"1022\":1,\"1094\":1}}],[\"notification命令的信息\",{\"1\":{\"1790\":1}}],[\"notification事务添加当前当前进程\",{\"1\":{\"1761\":1}}],[\"notification\",{\"1\":{\"1761\":2,\"1770\":3}}],[\"notificationslot\",{\"1\":{\"1702\":1}}],[\"notify等方法必须放在synchroized代码块中\",{\"1\":{\"946\":1}}],[\"notifyall\",{\"1\":{\"870\":1,\"917\":1,\"926\":1,\"946\":1,\"948\":1,\"950\":1,\"958\":1}}],[\"notify\",{\"1\":{\"519\":3,\"917\":2,\"946\":1}}],[\"notice\",{\"1\":{\"668\":3}}],[\"not\",{\"0\":{\"76\":1,\"1405\":1},\"1\":{\"94\":2,\"334\":1,\"615\":42,\"631\":1,\"668\":1,\"711\":2,\"985\":1,\"996\":1,\"1009\":3,\"1044\":1,\"1064\":1,\"1102\":1,\"1518\":3,\"1601\":2,\"1604\":2,\"1610\":1,\"1613\":1,\"1648\":1,\"1827\":1,\"1922\":1,\"1981\":1}}],[\"notes>\",{\"1\":{\"1555\":1}}],[\"notes>第一版<\",{\"1\":{\"1555\":1}}],[\"notes\",{\"1\":{\"299\":1,\"1555\":1,\"1952\":1}}],[\"note\",{\"1\":{\"73\":1,\"631\":1}}],[\"now\",{\"1\":{\"73\":1,\"1828\":2,\"1846\":4}}],[\"no\",{\"0\":{\"61\":1,\"64\":1,\"88\":1},\"1\":{\"61\":2,\"67\":2,\"94\":1,\"631\":8,\"644\":1,\"1101\":1,\"1110\":1,\"1320\":1,\"1329\":1,\"1416\":1,\"1589\":1,\"1595\":2,\"1598\":1,\"1604\":1,\"1717\":1,\"1727\":2,\"1756\":2,\"1762\":1,\"1778\":2,\"1798\":4,\"1911\":1}}],[\"node管理\",{\"0\":{\"1973\":1,\"1974\":1}}],[\"node下所有的ref\",{\"1\":{\"1761\":1}}],[\"node再找到目标进程binder\",{\"1\":{\"1754\":1}}],[\"node实体\",{\"1\":{\"1754\":1}}],[\"nodes\",{\"1\":{\"895\":2}}],[\"nodesource\",{\"1\":{\"702\":1}}],[\"nodejs\",{\"1\":{\"701\":2,\"702\":1}}],[\"node<k\",{\"1\":{\"362\":1,\"363\":1}}],[\"node<e>\",{\"1\":{\"345\":5,\"895\":5}}],[\"node\",{\"1\":{\"58\":2,\"94\":5,\"345\":1,\"363\":1,\"604\":2,\"657\":1,\"703\":1,\"878\":5,\"879\":29,\"880\":8,\"895\":1,\"896\":7,\"1413\":1,\"1761\":1,\"1770\":3,\"1786\":1,\"1799\":1,\"1963\":2}}],[\"narrow\",{\"1\":{\"1416\":1}}],[\"navigator\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"navicat\",{\"1\":{\"615\":1}}],[\"na\",{\"1\":{\"1338\":2,\"1435\":2}}],[\"nanos\",{\"1\":{\"888\":1}}],[\"nanoseconds\",{\"1\":{\"247\":1,\"828\":1}}],[\"nat\",{\"1\":{\"834\":2}}],[\"nativemessagequeue\",{\"1\":{\"1829\":8}}],[\"nativemethod\",{\"1\":{\"1022\":7}}],[\"native消息处理\",{\"1\":{\"1828\":1}}],[\"nativesetfiledescriptorevents\",{\"1\":{\"1825\":1}}],[\"nativeispolling\",{\"1\":{\"1825\":1}}],[\"nativeinit\",{\"0\":{\"1829\":1},\"1\":{\"1527\":2,\"1825\":1,\"1829\":3,\"1845\":1}}],[\"nativeinvokejavaexception\",{\"1\":{\"1527\":1}}],[\"nativewake\",{\"0\":{\"1827\":1},\"1\":{\"1825\":1,\"1827\":1,\"1847\":1,\"1849\":1}}],[\"nativepollonce用于提取消息队列中的消息\",{\"1\":{\"1828\":1}}],[\"nativepollonce\",{\"0\":{\"1828\":1},\"1\":{\"1825\":1,\"1828\":2,\"1846\":2}}],[\"nativedestroy\",{\"0\":{\"1830\":1},\"1\":{\"1825\":1,\"1830\":1}}],[\"nativezygoteinit\",{\"1\":{\"1777\":1,\"1866\":2}}],[\"native层关键方法\",{\"0\":{\"1825\":1}}],[\"native层实现\",{\"1\":{\"1824\":1}}],[\"native层\",{\"0\":{\"1822\":1},\"1\":{\"1729\":1}}],[\"native实践\",{\"1\":{\"1724\":1}}],[\"nativeorder\",{\"1\":{\"1540\":1}}],[\"native类型\",{\"1\":{\"1530\":2}}],[\"nativeclass\",{\"1\":{\"1530\":1}}],[\"nativefree\",{\"1\":{\"1527\":1}}],[\"nativethread\",{\"1\":{\"1527\":3}}],[\"nativethrowexception\",{\"1\":{\"1527\":1}}],[\"nativebitmap\",{\"1\":{\"1527\":1}}],[\"nativelib\",{\"1\":{\"1527\":1}}],[\"native插件集成\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"native方法\",{\"1\":{\"1035\":1,\"1530\":1}}],[\"native方法引用的对象\",{\"1\":{\"200\":1}}],[\"native中注册\",{\"1\":{\"1023\":1}}],[\"native指令\",{\"1\":{\"1022\":1}}],[\"native工具支撑\",{\"1\":{\"305\":1}}],[\"native\",{\"0\":{\"1413\":1,\"1724\":1},\"1\":{\"52\":1,\"94\":1,\"613\":1,\"614\":5,\"615\":6,\"622\":2,\"630\":4,\"822\":1,\"896\":1,\"900\":1,\"993\":1,\"1022\":3,\"1023\":9,\"1025\":1,\"1029\":1,\"1030\":11,\"1031\":1,\"1035\":1,\"1036\":2,\"1413\":5,\"1527\":42,\"1530\":3,\"1583\":1,\"1717\":2,\"1718\":1,\"1746\":8,\"1762\":2,\"1763\":1,\"1781\":2,\"1791\":1,\"1800\":2,\"1807\":2,\"1825\":6,\"1832\":2,\"1866\":1}}],[\"name为\",{\"1\":{\"1798\":1}}],[\"name+\",{\"1\":{\"1518\":1}}],[\"name>\",{\"1\":{\"1341\":1,\"1555\":1}}],[\"namenotfoundexception\",{\"1\":{\"1326\":1}}],[\"nameanddescriptor\",{\"1\":{\"1110\":1}}],[\"nameindex\",{\"1\":{\"1079\":1}}],[\"nameobj\",{\"1\":{\"1030\":4}}],[\"namespace\",{\"1\":{\"1727\":2}}],[\"names\",{\"1\":{\"615\":1}}],[\"name=system\",{\"1\":{\"1865\":1}}],[\"name=$\",{\"1\":{\"1335\":1}}],[\"name=\",{\"1\":{\"531\":6,\"543\":1,\"1320\":9,\"1326\":5,\"1518\":2}}],[\"named\",{\"0\":{\"88\":1},\"1\":{\"631\":3}}],[\"name\",{\"1\":{\"58\":1,\"465\":9,\"495\":5,\"519\":5,\"531\":14,\"543\":5,\"638\":2,\"640\":1,\"651\":1,\"667\":5,\"668\":18,\"900\":10,\"929\":5,\"978\":3,\"979\":8,\"992\":3,\"993\":5,\"1009\":12,\"1015\":7,\"1022\":2,\"1030\":11,\"1102\":1,\"1109\":5,\"1110\":5,\"1317\":1,\"1320\":2,\"1335\":2,\"1488\":3,\"1518\":15,\"1521\":3,\"1527\":6,\"1552\":1,\"1555\":1,\"1604\":5,\"1613\":2,\"1628\":2,\"1709\":1,\"1711\":1,\"1736\":2,\"1772\":1,\"1778\":2,\"1798\":2,\"1799\":4,\"1806\":1,\"1860\":1,\"1911\":1,\"1924\":1,\"1942\":1,\"1947\":6,\"1952\":1,\"1963\":1,\"1966\":2}}],[\"nacos服务\",{\"1\":{\"12\":1,\"731\":1}}],[\"nacos配置\",{\"1\":{\"12\":1,\"731\":1}}],[\"nacos\",{\"1\":{\"12\":8,\"731\":8}}],[\"neither\",{\"1\":{\"1518\":1}}],[\"negativearraysizeexception\",{\"1\":{\"1009\":1}}],[\"needwake\",{\"1\":{\"1847\":6,\"1849\":4}}],[\"need\",{\"1\":{\"631\":1}}],[\"nested\",{\"1\":{\"334\":1,\"672\":1}}],[\"nextpolltimeoutmillis\",{\"1\":{\"1846\":6}}],[\"nextpc\",{\"1\":{\"994\":2,\"1003\":1,\"1036\":1,\"1094\":2,\"1101\":1}}],[\"nextresponsebodyconverter\",{\"1\":{\"1592\":1}}],[\"nextbtn\",{\"1\":{\"1364\":2}}],[\"nextcalladapter\",{\"1\":{\"1592\":1}}],[\"nextc\",{\"1\":{\"882\":3,\"883\":3}}],[\"nextchannel\",{\"1\":{\"507\":6}}],[\"nextwaiter\",{\"1\":{\"878\":1,\"896\":1}}],[\"nexthandler\",{\"1\":{\"537\":4}}],[\"nextint\",{\"1\":{\"441\":1}}],[\"nextindex\",{\"1\":{\"381\":1}}],[\"next\",{\"0\":{\"1846\":1},\"1\":{\"94\":1,\"345\":1,\"348\":3,\"350\":3,\"352\":4,\"358\":1,\"465\":1,\"543\":3,\"631\":1,\"652\":2,\"878\":1,\"879\":3,\"880\":1,\"895\":3,\"900\":2,\"1203\":1,\"1239\":3,\"1332\":3,\"1828\":1,\"1837\":1,\"1842\":1,\"1843\":1,\"1846\":6,\"1847\":4,\"1849\":8,\"1850\":3,\"1960\":4,\"1961\":2}}],[\"nexus\",{\"1\":{\"94\":1,\"124\":1,\"1341\":2,\"1462\":1,\"1966\":2}}],[\"newident\",{\"1\":{\"1843\":1}}],[\"newinterfacemethodref\",{\"1\":{\"1110\":1}}],[\"newinstruction\",{\"1\":{\"994\":1,\"1101\":1}}],[\"newinstance\",{\"1\":{\"259\":7,\"416\":1,\"447\":2,\"1383\":1,\"1506\":1,\"1598\":1,\"1666\":1}}],[\"newlocalref\",{\"1\":{\"1530\":1}}],[\"newweakglobalref\",{\"1\":{\"1530\":1}}],[\"newwildcardentry\",{\"1\":{\"1063\":2,\"1064\":1}}],[\"newglobalref\",{\"1\":{\"1530\":1}}],[\"new开头函数\",{\"1\":{\"1530\":1}}],[\"newdatainputstream\",{\"1\":{\"1613\":1}}],[\"newdata\",{\"1\":{\"1518\":2}}],[\"newdirentry\",{\"1\":{\"1064\":1}}],[\"newprogress\",{\"1\":{\"1416\":2}}],[\"newproxyinstance\",{\"1\":{\"259\":4,\"447\":2,\"1589\":1,\"1592\":2}}],[\"newbuilder\",{\"1\":{\"1332\":3}}],[\"newzipentry\",{\"1\":{\"1064\":1}}],[\"newjvm\",{\"1\":{\"1044\":2}}],[\"newentry\",{\"1\":{\"1063\":1,\"1064\":1}}],[\"newexceptiontable\",{\"1\":{\"1036\":3}}],[\"newelements\",{\"1\":{\"342\":3}}],[\"newmethodref\",{\"1\":{\"1110\":1}}],[\"newmethods\",{\"1\":{\"1109\":2}}],[\"newmethod\",{\"1\":{\"1022\":1}}],[\"new创建\",{\"1\":{\"1008\":1}}],[\"newarray指令\",{\"1\":{\"1009\":1}}],[\"newarray\",{\"1\":{\"1008\":1,\"1009\":2,\"1016\":1,\"1044\":1,\"1738\":1}}],[\"newasp\",{\"1\":{\"16\":1}}],[\"newfieldref\",{\"1\":{\"1110\":1}}],[\"newfields\",{\"1\":{\"1109\":2}}],[\"newfixedthreadpool\",{\"1\":{\"247\":2,\"828\":2,\"907\":1,\"908\":1,\"923\":1,\"950\":1}}],[\"newframe\",{\"1\":{\"993\":4,\"994\":1,\"1003\":3,\"1044\":1}}],[\"newobjectarray\",{\"1\":{\"1530\":1}}],[\"newobject\",{\"1\":{\"984\":1,\"1009\":1,\"1015\":1,\"1030\":3,\"1530\":1}}],[\"newtestframe\",{\"1\":{\"1101\":1}}],[\"newtread\",{\"1\":{\"994\":1,\"1044\":1,\"1101\":1}}],[\"newthread\",{\"1\":{\"938\":1}}],[\"newtable\",{\"1\":{\"352\":8}}],[\"newupdater\",{\"1\":{\"900\":1}}],[\"newnode\",{\"1\":{\"895\":3}}],[\"newclassref\",{\"1\":{\"1110\":2}}],[\"newclass\",{\"1\":{\"979\":1,\"1109\":1}}],[\"newclassloader\",{\"1\":{\"978\":1,\"985\":1,\"996\":1,\"1030\":1,\"1044\":1}}],[\"newconfig\",{\"1\":{\"1295\":3}}],[\"newconstantpool\",{\"1\":{\"1109\":1,\"1110\":1}}],[\"newcondition\",{\"1\":{\"876\":3,\"880\":3,\"889\":1}}],[\"newcompositeentry\",{\"1\":{\"1064\":1}}],[\"newcount\",{\"1\":{\"880\":6}}],[\"newcapacity\",{\"1\":{\"332\":6,\"338\":6,\"352\":5}}],[\"newcachedthreadpool\",{\"1\":{\"247\":2,\"828\":2,\"938\":1,\"950\":1}}],[\"newratio=1\",{\"1\":{\"711\":1}}],[\"newvalue\",{\"1\":{\"348\":2}}],[\"newsubscription\",{\"1\":{\"1546\":2}}],[\"newstderr\",{\"1\":{\"1863\":1}}],[\"newstringinstance\",{\"1\":{\"1527\":1}}],[\"newstate\",{\"1\":{\"876\":1}}],[\"news\",{\"1\":{\"1476\":4}}],[\"newslots\",{\"1\":{\"1009\":1}}],[\"newscheduledthreadpoolexecutor\",{\"1\":{\"247\":1,\"828\":1}}],[\"newscheduledthreadpool\",{\"1\":{\"247\":1,\"828\":1,\"938\":1,\"950\":1}}],[\"newsinglethreadexecutor\",{\"1\":{\"247\":2,\"828\":2}}],[\"new\",{\"1\":{\"70\":1,\"154\":5,\"160\":3,\"169\":3,\"247\":8,\"259\":13,\"284\":1,\"285\":3,\"327\":1,\"334\":4,\"337\":1,\"338\":2,\"340\":2,\"349\":1,\"350\":1,\"352\":2,\"353\":2,\"365\":1,\"368\":2,\"381\":1,\"404\":1,\"405\":4,\"415\":3,\"416\":1,\"422\":4,\"428\":4,\"435\":4,\"441\":3,\"447\":9,\"453\":1,\"459\":6,\"465\":9,\"471\":3,\"477\":1,\"483\":4,\"489\":6,\"495\":1,\"501\":1,\"507\":4,\"513\":6,\"519\":5,\"525\":7,\"531\":13,\"537\":4,\"543\":7,\"650\":3,\"823\":7,\"828\":8,\"841\":1,\"843\":2,\"852\":1,\"853\":1,\"863\":1,\"864\":1,\"867\":8,\"868\":2,\"870\":9,\"874\":1,\"876\":3,\"879\":2,\"880\":3,\"882\":2,\"883\":1,\"884\":4,\"885\":2,\"886\":1,\"887\":1,\"889\":1,\"895\":1,\"896\":1,\"897\":4,\"900\":7,\"904\":5,\"905\":6,\"907\":2,\"908\":3,\"917\":8,\"923\":2,\"926\":3,\"932\":2,\"938\":4,\"943\":1,\"945\":2,\"950\":6,\"958\":7,\"983\":3,\"984\":2,\"995\":2,\"1003\":1,\"1009\":1,\"1116\":1,\"1169\":1,\"1182\":1,\"1188\":5,\"1203\":2,\"1230\":1,\"1295\":1,\"1305\":3,\"1307\":3,\"1312\":2,\"1313\":2,\"1320\":2,\"1326\":8,\"1329\":2,\"1332\":14,\"1349\":1,\"1352\":1,\"1358\":5,\"1364\":4,\"1383\":16,\"1392\":3,\"1402\":40,\"1416\":3,\"1417\":7,\"1488\":1,\"1518\":1,\"1540\":1,\"1546\":4,\"1552\":2,\"1589\":2,\"1592\":6,\"1598\":6,\"1601\":1,\"1604\":7,\"1610\":1,\"1613\":5,\"1626\":1,\"1645\":1,\"1660\":1,\"1666\":16,\"1675\":3,\"1685\":40,\"1709\":1,\"1725\":1,\"1730\":1,\"1731\":1,\"1736\":2,\"1737\":2,\"1738\":3,\"1739\":1,\"1756\":2,\"1762\":2,\"1778\":1,\"1798\":1,\"1799\":1,\"1804\":3,\"1805\":1,\"1806\":1,\"1829\":3,\"1839\":1,\"1840\":1,\"1843\":1,\"1846\":1,\"1847\":2,\"1850\":2,\"1851\":1,\"1863\":1,\"1866\":1,\"1867\":4,\"1869\":2,\"1928\":1,\"1960\":1}}],[\"networkhelper\",{\"1\":{\"1555\":2}}],[\"networksecurityconfig=\",{\"1\":{\"1405\":1}}],[\"network\",{\"1\":{\"1405\":4,\"1549\":1,\"1555\":4}}],[\"networking\",{\"1\":{\"631\":1}}],[\"netstat\",{\"1\":{\"834\":2}}],[\"netbeans项目把api划分四类\",{\"1\":{\"808\":1}}],[\"net\",{\"1\":{\"16\":1,\"19\":1,\"37\":1,\"46\":1,\"52\":1,\"631\":1,\"822\":4,\"834\":1,\"1320\":2,\"1346\":1,\"1420\":1,\"1453\":1,\"1465\":2,\"1482\":1,\"1503\":4,\"1515\":1,\"1574\":4,\"1577\":1,\"1580\":1,\"1702\":1,\"1708\":1,\"1905\":1,\"1908\":2,\"1970\":1}}],[\"安卓拍照支持适配7\",{\"1\":{\"1416\":1}}],[\"安卓webview禁用input\",{\"1\":{\"1416\":1}}],[\"安卓一般view有三种显示方式gone\",{\"1\":{\"1392\":1,\"1675\":1}}],[\"安卓专属\",{\"1\":{\"1377\":1}}],[\"安卓模拟器\",{\"0\":{\"1341\":1}}],[\"安卓建议\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"安卓8\",{\"1\":{\"70\":1,\"1146\":1}}],[\"安而后能虑\",{\"1\":{\"1271\":1}}],[\"安全判断\",{\"1\":{\"1518\":1}}],[\"安全\",{\"1\":{\"1512\":1,\"1521\":1}}],[\"安全区域\",{\"0\":{\"1137\":1}}],[\"安全点\",{\"0\":{\"1136\":1}}],[\"安全性和生存性\",{\"1\":{\"955\":1}}],[\"安全性\",{\"1\":{\"954\":1}}],[\"安全终止线程\",{\"1\":{\"945\":1}}],[\"安全组\",{\"0\":{\"719\":1},\"1\":{\"719\":1,\"721\":1}}],[\"安全可靠\",{\"1\":{\"12\":1,\"731\":1}}],[\"安装稳定版本\",{\"1\":{\"1974\":1}}],[\"安装最新版本\",{\"1\":{\"1974\":1}}],[\"安装指定版本\",{\"1\":{\"1974\":1}}],[\"安装插件\",{\"1\":{\"1960\":1}}],[\"安装包\",{\"1\":{\"1534\":1}}],[\"安装包立减1m\",{\"1\":{\"1317\":1}}],[\"安装的模块路径比较奇怪\",{\"1\":{\"1413\":1}}],[\"安装并写入package\",{\"1\":{\"1409\":2}}],[\"安装但不写入package\",{\"1\":{\"1409\":1}}],[\"安装xxx模块到当前命令行所在目录\",{\"1\":{\"1409\":1}}],[\"安装alipay支付宝\",{\"1\":{\"1358\":1}}],[\"安装下载支付宝\",{\"1\":{\"1358\":1}}],[\"安装redis\",{\"0\":{\"706\":1,\"707\":1},\"1\":{\"707\":1}}],[\"安装n\",{\"1\":{\"1974\":1}}],[\"安装node\",{\"0\":{\"699\":1,\"700\":1}}],[\"安装nginx\",{\"0\":{\"636\":1,\"675\":1,\"677\":1}}],[\"安装mysql\",{\"0\":{\"693\":1}}],[\"安装mysql5\",{\"0\":{\"691\":1}}],[\"安装jdk8\",{\"0\":{\"687\":1,\"688\":1}}],[\"安装tomcat8\",{\"0\":{\"683\":1}}],[\"安装腾讯签名生成工具apk\",{\"1\":{\"106\":1}}],[\"安装\",{\"0\":{\"24\":1},\"1\":{\"635\":1,\"675\":1,\"684\":1,\"1534\":1,\"1712\":1}}],[\"安装命令\",{\"1\":{\"16\":1}}],[\"llong\",{\"1\":{\"1828\":1,\"1829\":1}}],[\"l540675759\",{\"1\":{\"1577\":1}}],[\"luckybilly\",{\"1\":{\"1503\":1}}],[\"lchpersonal521\",{\"1\":{\"1482\":1,\"1503\":1}}],[\"lcr\",{\"1\":{\"298\":19}}],[\"lmj623565791\",{\"1\":{\"1346\":1,\"1908\":1}}],[\"lmbench3\",{\"1\":{\"820\":1}}],[\"ldpi\",{\"1\":{\"1338\":1}}],[\"ldc2\",{\"1\":{\"984\":1}}],[\"ldc\",{\"1\":{\"983\":1,\"984\":6}}],[\"lreturn\",{\"1\":{\"1022\":1}}],[\"lrucache<>\",{\"1\":{\"365\":1}}],[\"lrucache<integer\",{\"1\":{\"365\":1}}],[\"lrucache<k\",{\"1\":{\"365\":1}}],[\"lrucache\",{\"1\":{\"365\":1}}],[\"lru\",{\"0\":{\"365\":1},\"1\":{\"325\":1,\"362\":1,\"363\":1,\"364\":1,\"365\":2}}],[\"lru算法\",{\"0\":{\"295\":1}}],[\"lxxx\",{\"1\":{\"1009\":4}}],[\"ljava\",{\"1\":{\"1008\":1,\"1015\":1,\"1023\":4,\"1030\":8,\"1036\":3,\"1102\":1,\"1203\":1,\"1530\":6}}],[\"lesscharset=utf\",{\"1\":{\"1938\":1}}],[\"leaks\",{\"1\":{\"1840\":2}}],[\"learning\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"leader\",{\"1\":{\"537\":5}}],[\"level\",{\"1\":{\"358\":1,\"1329\":2}}],[\"len\",{\"1\":{\"342\":3,\"381\":3,\"979\":1,\"1009\":4,\"1016\":1,\"1036\":2,\"1044\":1,\"1055\":1,\"1109\":2,\"1110\":1,\"1530\":5,\"1790\":12}}],[\"length\",{\"1\":{\"278\":5,\"279\":2,\"280\":4,\"281\":5,\"282\":2,\"283\":4,\"284\":3,\"285\":12,\"332\":2,\"338\":1,\"342\":1,\"350\":3,\"351\":3,\"352\":4,\"359\":3,\"381\":1,\"525\":1,\"631\":1,\"652\":1,\"1305\":2,\"1307\":3,\"1349\":4,\"1368\":1,\"1518\":1,\"1521\":1,\"1540\":1,\"1546\":1,\"1552\":1,\"1598\":1}}],[\"let\",{\"1\":{\"333\":1,\"1518\":1}}],[\"leftresult\",{\"1\":{\"897\":2}}],[\"lefttask\",{\"1\":{\"897\":3}}],[\"leftcommand\",{\"1\":{\"489\":13}}],[\"left\",{\"1\":{\"279\":5,\"283\":5,\"1402\":8,\"1685\":8}}],[\"leetcodetop\",{\"1\":{\"292\":1,\"295\":1}}],[\"leetcode\",{\"1\":{\"228\":1,\"298\":60}}],[\"lsr\",{\"1\":{\"1974\":1}}],[\"ls\",{\"1\":{\"1974\":1}}],[\"lsp\",{\"0\":{\"753\":1}}],[\"lstat\",{\"1\":{\"94\":1}}],[\"lsof\",{\"1\":{\"58\":2,\"711\":1,\"715\":1,\"1963\":2}}],[\"lf\",{\"0\":{\"91\":1}}],[\"late\",{\"1\":{\"1857\":2}}],[\"latestsupported\",{\"1\":{\"1604\":1}}],[\"latest\",{\"1\":{\"1534\":1,\"1974\":1}}],[\"lateinit\",{\"1\":{\"1524\":1}}],[\"latch\",{\"1\":{\"904\":4,\"923\":6}}],[\"lazyvalue\",{\"1\":{\"1518\":3}}],[\"lazy\",{\"1\":{\"1518\":2}}],[\"lazysingleton\",{\"1\":{\"405\":9}}],[\"lambda\",{\"1\":{\"1518\":2,\"1521\":2,\"1709\":1}}],[\"lambda表达式\",{\"1\":{\"1512\":2}}],[\"label\",{\"1\":{\"1518\":1}}],[\"labelid\",{\"1\":{\"1383\":3,\"1666\":3}}],[\"lable\",{\"1\":{\"1323\":1,\"1335\":1,\"1459\":1}}],[\"launchtype\",{\"1\":{\"1708\":1}}],[\"launchappdetail\",{\"1\":{\"1326\":1}}],[\"launchintent\",{\"1\":{\"1326\":2}}],[\"launcher\",{\"1\":{\"1292\":1,\"1305\":2}}],[\"launcher=true\",{\"1\":{\"67\":2}}],[\"layoutalgorithm\",{\"1\":{\"1416\":1}}],[\"layout3\",{\"1\":{\"1346\":2}}],[\"layout2\",{\"1\":{\"1346\":1}}],[\"layout0\",{\"1\":{\"1346\":1}}],[\"layout\",{\"1\":{\"666\":1,\"668\":5,\"1292\":3,\"1346\":101,\"1568\":1,\"1598\":1,\"1610\":4}}],[\"layered\",{\"1\":{\"311\":1}}],[\"largestpoolsize\",{\"1\":{\"916\":1}}],[\"largestindex\",{\"1\":{\"283\":8}}],[\"large\",{\"1\":{\"880\":1,\"1756\":1}}],[\"largecoffeesugar\",{\"1\":{\"459\":2}}],[\"largecoffeeordinary\",{\"1\":{\"459\":2}}],[\"largecoffee\",{\"1\":{\"459\":6}}],[\"lastindexof\",{\"1\":{\"1601\":1,\"1604\":1}}],[\"lastchar\",{\"1\":{\"1521\":3}}],[\"lastclicktime\",{\"1\":{\"1374\":3}}],[\"last\",{\"1\":{\"345\":2,\"359\":3,\"363\":7,\"614\":1,\"615\":1,\"622\":1,\"630\":1,\"895\":1,\"1521\":1,\"1555\":1}}],[\"law\",{\"1\":{\"1648\":1}}],[\"lawsuit\",{\"1\":{\"259\":3}}],[\"lawyer\",{\"1\":{\"259\":13,\"447\":18}}],[\"landroid\",{\"0\":{\"55\":1},\"1\":{\"55\":1}}],[\"language\",{\"1\":{\"1648\":1}}],[\"lang<\",{\"1\":{\"1555\":1}}],[\"lang\",{\"0\":{\"37\":1,\"82\":1},\"1\":{\"672\":1,\"822\":5,\"979\":3,\"984\":6,\"993\":9,\"1008\":1,\"1009\":3,\"1015\":4,\"1016\":1,\"1022\":1,\"1023\":10,\"1029\":1,\"1030\":25,\"1035\":3,\"1036\":5,\"1044\":1,\"1064\":2,\"1070\":1,\"1077\":1,\"1078\":1,\"1102\":1,\"1109\":1,\"1110\":1,\"1119\":4,\"1170\":1,\"1203\":2,\"1530\":10,\"1604\":1,\"1717\":1,\"1731\":1,\"1732\":1,\"1739\":2,\"1866\":1}}],[\"lanyus\",{\"1\":{\"19\":1,\"25\":1,\"109\":1}}],[\"l\",{\"1\":{\"16\":1,\"145\":5,\"750\":1,\"984\":2,\"1009\":2,\"1022\":1,\"1151\":1,\"1156\":1,\"1530\":1,\"1778\":1,\"1799\":1,\"1805\":2,\"1826\":1,\"1829\":1,\"1922\":1}}],[\"licenses\",{\"1\":{\"1648\":1,\"1966\":2}}],[\"licensed\",{\"1\":{\"1648\":1}}],[\"license\",{\"0\":{\"1648\":1},\"1\":{\"1534\":2,\"1648\":8,\"1966\":3}}],[\"license授权\",{\"1\":{\"1534\":1}}],[\"lit\",{\"1\":{\"1518\":2}}],[\"little\",{\"1\":{\"631\":1}}],[\"livesettings\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"lir\",{\"1\":{\"1210\":1}}],[\"lightsservice\",{\"1\":{\"1867\":1,\"1868\":1}}],[\"light\",{\"1\":{\"640\":1,\"1320\":2,\"1867\":1}}],[\"lifetime`\",{\"1\":{\"615\":1}}],[\"lifetime\",{\"1\":{\"614\":1,\"622\":1,\"630\":1}}],[\"limitations\",{\"1\":{\"1648\":1}}],[\"limitedbox\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"limit\",{\"1\":{\"537\":4,\"694\":1}}],[\"like\",{\"1\":{\"334\":1,\"1546\":1}}],[\"likely\",{\"1\":{\"94\":1}}],[\"lint删除冗余资源\",{\"1\":{\"1317\":1}}],[\"linktodeath\",{\"1\":{\"1762\":4}}],[\"linktodeath过程\",{\"1\":{\"1761\":1}}],[\"linkprogram\",{\"1\":{\"1540\":1}}],[\"linking\",{\"1\":{\"1534\":1}}],[\"link\",{\"1\":{\"979\":3,\"1534\":1,\"1707\":1,\"1709\":1,\"1790\":1}}],[\"linkedtransferqueue\",{\"1\":{\"896\":1}}],[\"linked\",{\"1\":{\"362\":2}}],[\"linkedhashset\",{\"1\":{\"322\":1}}],[\"linkedhashmap<>\",{\"1\":{\"1598\":1}}],[\"linkedhashmap<k\",{\"1\":{\"362\":1,\"365\":1}}],[\"linkedhashmap\",{\"0\":{\"361\":1},\"1\":{\"319\":1,\"325\":1,\"362\":3,\"363\":3,\"364\":2,\"365\":2}}],[\"linkedblockingdeque\",{\"1\":{\"896\":1}}],[\"linkedblockingqueue\",{\"1\":{\"896\":1,\"958\":1}}],[\"linkedblockingqueue<runnable>\",{\"1\":{\"247\":2,\"828\":2}}],[\"linkedblockqueue\",{\"1\":{\"246\":1,\"914\":1}}],[\"linkedlist<>\",{\"1\":{\"917\":1}}],[\"linkedlist<job>\",{\"1\":{\"917\":1}}],[\"linkedlist是一个双向链表\",{\"1\":{\"215\":1}}],[\"linkedlist是基于链表的数据结构实现\",{\"1\":{\"214\":1}}],[\"linkedlist\",{\"0\":{\"344\":1},\"1\":{\"213\":1,\"319\":1,\"323\":2,\"324\":1,\"346\":2}}],[\"lindex\",{\"1\":{\"644\":1}}],[\"linear\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"linearization\",{\"1\":{\"895\":1}}],[\"linenumbertableattribute\",{\"1\":{\"1036\":6}}],[\"linenumbertable\",{\"1\":{\"1036\":4}}],[\"linenumber\",{\"1\":{\"1036\":2}}],[\"line=\",{\"1\":{\"531\":1}}],[\"line\",{\"1\":{\"531\":5,\"1332\":2}}],[\"linux内核启动创建init进程\",{\"1\":{\"1856\":1}}],[\"linux\",{\"1\":{\"896\":1}}],[\"linux一键安装脚本2\",{\"1\":{\"16\":1}}],[\"linux一键安装脚本1\",{\"1\":{\"16\":1}}],[\"linux版安装路径\",{\"1\":{\"16\":1}}],[\"liyiran\",{\"1\":{\"121\":1}}],[\"list添加binder\",{\"1\":{\"1770\":1}}],[\"list数据量小\",{\"1\":{\"1524\":1}}],[\"list函数\",{\"1\":{\"1521\":1}}],[\"lists03\",{\"1\":{\"1518\":5}}],[\"lists02\",{\"1\":{\"1518\":4}}],[\"lists01\",{\"1\":{\"1518\":5}}],[\"lists\",{\"1\":{\"1518\":10}}],[\"list打印\",{\"1\":{\"1518\":1}}],[\"list创建\",{\"1\":{\"1518\":1}}],[\"listdata\",{\"1\":{\"1518\":3}}],[\"listof\",{\"1\":{\"1518\":11,\"1521\":5}}],[\"listfiles\",{\"1\":{\"1488\":1}}],[\"list列表\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"list列表迭代\",{\"1\":{\"543\":1}}],[\"listview\",{\"1\":{\"1355\":1,\"1663\":1}}],[\"listerner\",{\"1\":{\"1305\":2,\"1307\":3}}],[\"listen\",{\"1\":{\"58\":1,\"631\":1,\"638\":2,\"640\":1,\"651\":1,\"711\":1,\"715\":1,\"1963\":1}}],[\"listiterator<>\",{\"1\":{\"543\":1}}],[\"listiterator<t>\",{\"1\":{\"543\":1}}],[\"listiterator\",{\"1\":{\"543\":1}}],[\"list<class<\",{\"1\":{\"1546\":2}}],[\"list<subscribermethod>\",{\"1\":{\"1546\":3}}],[\"list<string>\",{\"1\":{\"327\":1,\"340\":3,\"1332\":3}}],[\"list<any\",{\"1\":{\"1518\":1}}],[\"list<behaviorsubject<string>>\",{\"1\":{\"1364\":4}}],[\"list<worker>\",{\"1\":{\"917\":1,\"950\":1}}],[\"list<textview>\",{\"1\":{\"1364\":3}}],[\"list<thread>\",{\"1\":{\"884\":1}}],[\"list<t>\",{\"1\":{\"328\":1,\"543\":2}}],[\"list<element>\",{\"1\":{\"1604\":2}}],[\"list<element>>\",{\"1\":{\"1604\":2}}],[\"list<employee>\",{\"1\":{\"543\":1}}],[\"list<e>\",{\"1\":{\"331\":1,\"950\":1,\"958\":1}}],[\"list<integer>\",{\"1\":{\"1203\":2}}],[\"list<iaccept>\",{\"1\":{\"531\":1}}],[\"list<iobserver>\",{\"1\":{\"519\":1}}],[\"list<dir>\",{\"1\":{\"465\":4}}],[\"list\",{\"0\":{\"46\":1,\"52\":1,\"212\":1,\"323\":1},\"1\":{\"106\":1,\"212\":2,\"327\":4,\"328\":5,\"334\":2,\"340\":3,\"362\":2,\"519\":3,\"543\":8,\"1116\":1,\"1203\":4,\"1289\":1,\"1364\":6,\"1383\":1,\"1518\":4,\"1521\":4,\"1534\":2,\"1622\":1,\"1666\":1,\"1707\":1,\"1708\":1,\"1709\":1,\"1711\":1,\"1762\":2,\"1770\":6,\"1974\":1}}],[\"libutils\",{\"1\":{\"1832\":2}}],[\"libs\",{\"1\":{\"1534\":1,\"1718\":1,\"1746\":2,\"1763\":1,\"1781\":2,\"1800\":1,\"1807\":1,\"1966\":1}}],[\"libhello\",{\"1\":{\"1534\":1}}],[\"libraries\",{\"1\":{\"1534\":1,\"1709\":2,\"1713\":1}}],[\"librarydescription\",{\"1\":{\"1905\":1}}],[\"library\",{\"1\":{\"67\":3,\"79\":3,\"1030\":10,\"1329\":2,\"1475\":2,\"1476\":1,\"1534\":4,\"1604\":1,\"1905\":3,\"1908\":1,\"1911\":1}}],[\"lib1\",{\"1\":{\"1064\":4}}],[\"lib目录下或被\",{\"1\":{\"194\":1}}],[\"libexec\",{\"1\":{\"118\":1}}],[\"libinstrument\",{\"1\":{\"67\":1}}],[\"lib\",{\"1\":{\"16\":1,\"67\":3,\"194\":1,\"694\":1,\"986\":1,\"997\":2,\"1010\":1,\"1017\":2,\"1024\":4,\"1030\":12,\"1037\":3,\"1044\":1,\"1061\":2,\"1063\":4,\"1103\":1,\"1289\":1,\"1383\":2,\"1527\":3,\"1534\":9,\"1666\":2,\"1952\":2}}],[\"lottie\",{\"1\":{\"1711\":1,\"1712\":2,\"1713\":5}}],[\"lollipop\",{\"1\":{\"1465\":1}}],[\"loop循环遍历消息\",{\"1\":{\"1843\":1}}],[\"loop循环\",{\"1\":{\"1789\":1}}],[\"loop循环和解析\",{\"0\":{\"1789\":1}}],[\"loop该binder\",{\"1\":{\"1761\":1}}],[\"looper开始循环\",{\"1\":{\"1839\":1}}],[\"looper初始化\",{\"1\":{\"1839\":1}}],[\"looperthread\",{\"1\":{\"1839\":1}}],[\"loopercallback\",{\"1\":{\"1831\":2}}],[\"looper对象中的mwakeeventfd添加到epoll监控\",{\"1\":{\"1829\":1}}],[\"looper或者bc\",{\"1\":{\"1780\":1}}],[\"looper命令发送给binder驱动\",{\"1\":{\"1789\":1}}],[\"looper命令创建的线程\",{\"1\":{\"1779\":1}}],[\"looper命令创建的binder主线程\",{\"1\":{\"1779\":1}}],[\"looper命令\",{\"1\":{\"1770\":1,\"1780\":2}}],[\"looper\",{\"1\":{\"1730\":2,\"1770\":6,\"1778\":6,\"1780\":3,\"1789\":1,\"1824\":1,\"1826\":2,\"1827\":1,\"1828\":2,\"1829\":7,\"1832\":5,\"1837\":2,\"1839\":2,\"1840\":8,\"1843\":2,\"1851\":1,\"1852\":1,\"1867\":2,\"1869\":2}}],[\"loop执行循环所有方法\",{\"1\":{\"1101\":1}}],[\"loop\",{\"1\":{\"994\":2,\"1101\":2,\"1730\":1,\"1786\":1,\"1788\":1,\"1789\":1,\"1837\":1,\"1839\":1,\"1842\":1,\"1843\":1,\"1867\":2,\"1869\":2}}],[\"lookupalleventtypes\",{\"1\":{\"1546\":1}}],[\"lookupmethodininterfaces\",{\"1\":{\"992\":1}}],[\"lookupmethodinclass\",{\"1\":{\"992\":1,\"993\":1}}],[\"lookupmethod\",{\"1\":{\"992\":1}}],[\"lookup滥用\",{\"1\":{\"805\":1}}],[\"lookup提供两类api\",{\"1\":{\"805\":1}}],[\"lookup考虑动态性\",{\"1\":{\"805\":1}}],[\"lookup\",{\"1\":{\"805\":1}}],[\"look\",{\"1\":{\"631\":1}}],[\"lod\",{\"0\":{\"754\":1}}],[\"longterm\",{\"1\":{\"368\":9}}],[\"long\",{\"0\":{\"1221\":1},\"1\":{\"246\":1,\"358\":1,\"359\":2,\"631\":1,\"867\":1,\"870\":4,\"876\":1,\"880\":1,\"888\":1,\"896\":1,\"900\":1,\"938\":1,\"946\":2,\"949\":2,\"950\":2,\"958\":2,\"1009\":2,\"1182\":1,\"1203\":1,\"1298\":1,\"1374\":3,\"1416\":1,\"1530\":4,\"1625\":1,\"1717\":2,\"1825\":6,\"1841\":1,\"1843\":2,\"1846\":2,\"1847\":1,\"1849\":1}}],[\"location\",{\"1\":{\"638\":3,\"640\":3,\"651\":1}}],[\"locations\",{\"1\":{\"631\":3}}],[\"localservices\",{\"1\":{\"1867\":1}}],[\"localstorage\",{\"1\":{\"649\":1}}],[\"localref\",{\"1\":{\"1527\":1}}],[\"locale\",{\"1\":{\"1417\":1}}],[\"localvars\",{\"1\":{\"993\":1,\"1016\":1,\"1023\":3,\"1030\":4,\"1036\":1,\"1044\":1,\"1101\":2}}],[\"localhost\",{\"1\":{\"604\":2,\"611\":1,\"613\":1,\"614\":4,\"615\":4,\"622\":2,\"630\":4,\"657\":1,\"1960\":1,\"1966\":1}}],[\"local\",{\"1\":{\"94\":1,\"151\":1,\"619\":2,\"631\":2,\"870\":3,\"1050\":1,\"1292\":1,\"1534\":1,\"1613\":2,\"1952\":1}}],[\"lock模式\",{\"0\":{\"932\":1}}],[\"lock同步\",{\"1\":{\"917\":1}}],[\"lockinterruptibly\",{\"1\":{\"876\":1,\"880\":1}}],[\"locking\",{\"1\":{\"359\":2,\"631\":1}}],[\"lockusecase\",{\"1\":{\"874\":1}}],[\"lock前缀指令会引起处理器缓存回写到内存\",{\"1\":{\"841\":1}}],[\"locked`\",{\"1\":{\"615\":1}}],[\"locked\",{\"1\":{\"614\":1,\"622\":1,\"630\":1,\"822\":1}}],[\"locksupport\",{\"0\":{\"888\":1},\"1\":{\"896\":1,\"1230\":2}}],[\"locks\",{\"1\":{\"359\":1,\"876\":3}}],[\"lock\",{\"1\":{\"85\":1,\"169\":2,\"342\":5,\"359\":5,\"614\":1,\"622\":1,\"630\":1,\"631\":1,\"823\":1,\"825\":1,\"841\":1,\"870\":7,\"874\":5,\"876\":3,\"880\":2,\"882\":1,\"883\":1,\"884\":27,\"885\":5,\"886\":1,\"887\":7,\"889\":9,\"896\":1,\"917\":10,\"932\":10,\"950\":7,\"958\":7,\"1220\":1,\"1222\":1,\"1248\":1,\"1828\":2,\"1867\":1}}],[\"lock4j\",{\"1\":{\"12\":1,\"731\":1}}],[\"loadingprogress\",{\"1\":{\"1708\":1}}],[\"loadservicemethod\",{\"1\":{\"1592\":5}}],[\"loadsoundcard\",{\"1\":{\"483\":2}}],[\"loadlibrary\",{\"1\":{\"1527\":3,\"1867\":1}}],[\"loaddatawithbaseurl\",{\"1\":{\"1416\":1}}],[\"loadurl\",{\"1\":{\"1416\":1}}],[\"loadprimitiveclass\",{\"1\":{\"1030\":2}}],[\"loadprimitiveclasses\",{\"1\":{\"1030\":2}}],[\"loadbasicclasses\",{\"1\":{\"1030\":2}}],[\"loadbalancer\",{\"1\":{\"12\":1,\"731\":1}}],[\"loadanimation\",{\"1\":{\"1711\":1}}],[\"loadarrayclass\",{\"1\":{\"1009\":2,\"1030\":1}}],[\"loadavg\",{\"1\":{\"834\":1}}],[\"loadnonarrayclass\",{\"1\":{\"978\":1,\"979\":1,\"1009\":1,\"1030\":12}}],[\"loadedapk\",{\"1\":{\"1870\":1}}],[\"loaded\",{\"1\":{\"694\":2,\"979\":1,\"1030\":11}}],[\"loader\",{\"0\":{\"85\":1},\"1\":{\"85\":1,\"259\":8,\"447\":4,\"979\":3,\"1009\":12,\"1015\":5,\"1016\":4,\"1023\":1,\"1030\":10,\"1109\":1,\"1110\":1}}],[\"loados\",{\"1\":{\"501\":3}}],[\"loadcpu\",{\"1\":{\"483\":2}}],[\"loadcd\",{\"1\":{\"483\":2}}],[\"loadclass\",{\"1\":{\"197\":2,\"978\":1,\"979\":2,\"985\":1,\"996\":1,\"1009\":12,\"1015\":2,\"1016\":1,\"1023\":1,\"1030\":4,\"1044\":3,\"1102\":1,\"1110\":1,\"1175\":2,\"1598\":1}}],[\"loadfactor\",{\"1\":{\"352\":4,\"358\":1}}],[\"load\",{\"1\":{\"351\":1,\"352\":2,\"483\":2,\"638\":1,\"1064\":1,\"1220\":2,\"1416\":1,\"1613\":1}}],[\"lombok\",{\"1\":{\"12\":1,\"731\":1}}],[\"logan\",{\"1\":{\"1616\":2}}],[\"logfile=\",{\"1\":{\"1583\":1}}],[\"logic\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"loginstruction\",{\"1\":{\"994\":1}}],[\"loginst\",{\"1\":{\"994\":4}}],[\"login\",{\"1\":{\"103\":1,\"501\":3}}],[\"logoutputencoding\",{\"1\":{\"1937\":1,\"1970\":1}}],[\"logo\",{\"1\":{\"1435\":1}}],[\"logo系统标准要求\",{\"1\":{\"1435\":1}}],[\"logoiv\",{\"1\":{\"1346\":5}}],[\"logo尺寸\",{\"1\":{\"1338\":1}}],[\"logo尺寸及应用市场logo和截图\",{\"0\":{\"1338\":1}}],[\"logger\",{\"1\":{\"1329\":3,\"1604\":9}}],[\"logginginterceptor\",{\"1\":{\"1329\":4}}],[\"logging\",{\"1\":{\"94\":1,\"631\":1,\"1329\":1,\"1843\":5}}],[\"logs\",{\"1\":{\"834\":1}}],[\"logn\",{\"1\":{\"322\":1}}],[\"log\",{\"1\":{\"12\":2,\"465\":1,\"631\":8,\"667\":4,\"668\":1,\"711\":2,\"731\":2,\"834\":1,\"1329\":2,\"1475\":2,\"1527\":2,\"1589\":1,\"1736\":5,\"1737\":6,\"1840\":1,\"1846\":1,\"1851\":1}}],[\"wzgiceman\",{\"1\":{\"1905\":1}}],[\"wzpan\",{\"1\":{\"1534\":1}}],[\"wtf\",{\"1\":{\"1846\":1}}],[\"wq保存\",{\"1\":{\"1534\":1}}],[\"wmrouter\",{\"1\":{\"1481\":2,\"1503\":1}}],[\"w\",{\"1\":{\"886\":3,\"984\":2,\"1346\":1,\"1770\":1,\"1840\":1}}],[\"wlock\",{\"1\":{\"885\":5}}],[\"w3c拟定了新的标准\",{\"1\":{\"649\":1}}],[\"wrap\",{\"1\":{\"1346\":8}}],[\"wrapper\",{\"1\":{\"471\":2}}],[\"writing\",{\"1\":{\"1648\":1}}],[\"written\",{\"1\":{\"631\":1,\"1534\":1}}],[\"writetransactiondata\",{\"1\":{\"1756\":1}}],[\"writetoparcel\",{\"1\":{\"1738\":1,\"1739\":1,\"1756\":1}}],[\"writeto\",{\"1\":{\"1332\":1,\"1601\":1,\"1604\":2}}],[\"writestrongbinder\",{\"1\":{\"1756\":1,\"1798\":1}}],[\"writestring16\",{\"1\":{\"1798\":1,\"1799\":1}}],[\"writestring\",{\"1\":{\"1731\":1,\"1732\":1,\"1739\":1,\"1756\":2}}],[\"writenoexception\",{\"1\":{\"1732\":1,\"1739\":2}}],[\"writeunlock\",{\"1\":{\"932\":1}}],[\"writelock\",{\"1\":{\"885\":1,\"887\":4,\"932\":5}}],[\"writershouldblock\",{\"1\":{\"886\":1}}],[\"writer\",{\"1\":{\"808\":1}}],[\"writeint32\",{\"1\":{\"1778\":2,\"1798\":1}}],[\"writeinterfacetoken\",{\"1\":{\"1727\":1,\"1731\":1,\"1739\":2,\"1756\":1,\"1798\":1,\"1799\":1}}],[\"writeint\",{\"1\":{\"334\":1,\"1738\":2,\"1739\":3,\"1756\":1}}],[\"write\",{\"0\":{\"932\":1},\"1\":{\"334\":3,\"870\":3,\"932\":2,\"1220\":2,\"1416\":1,\"1739\":1,\"1761\":2,\"1768\":1,\"1770\":2,\"1789\":6,\"1827\":2}}],[\"writeobject\",{\"1\":{\"334\":8,\"335\":1}}],[\"wobj\",{\"1\":{\"1530\":1}}],[\"woman\",{\"1\":{\"1188\":13}}],[\"world\",{\"1\":{\"1017\":1,\"1044\":1,\"1135\":1,\"1527\":1}}],[\"word替换回到对象头\",{\"1\":{\"847\":1}}],[\"word替换为指向锁记录的指针\",{\"1\":{\"847\":1}}],[\"word复制到锁记录中\",{\"1\":{\"847\":1}}],[\"word\",{\"1\":{\"847\":2,\"1117\":1}}],[\"word的状态变化\",{\"1\":{\"844\":1}}],[\"work来决定wait在当前线程还是进程的等待队列\",{\"1\":{\"1770\":1}}],[\"works\",{\"1\":{\"1534\":2}}],[\"workunitet\",{\"1\":{\"1364\":1}}],[\"workrunner\",{\"1\":{\"945\":2}}],[\"workerlist\",{\"1\":{\"950\":8}}],[\"worker<job\",{\"1\":{\"950\":1}}],[\"workernum\",{\"1\":{\"917\":7}}],[\"workers\",{\"1\":{\"917\":6}}],[\"worker\",{\"1\":{\"917\":22,\"950\":13,\"958\":4,\"1707\":1,\"1708\":1}}],[\"working\",{\"1\":{\"867\":1,\"869\":1,\"1534\":4}}],[\"work\",{\"1\":{\"333\":1,\"874\":1,\"907\":1,\"945\":1,\"950\":5,\"1761\":2,\"1768\":2,\"1770\":15,\"1780\":1}}],[\"workqueue\",{\"1\":{\"246\":2,\"914\":1,\"1772\":2}}],[\"would\",{\"1\":{\"359\":1}}],[\"whatever\",{\"1\":{\"1332\":1}}],[\"what\",{\"1\":{\"1310\":2,\"1313\":2,\"1831\":5,\"1843\":1,\"1850\":1}}],[\"whentaskadded\",{\"1\":{\"1613\":1}}],[\"whenget\",{\"1\":{\"1558\":1}}],[\"when表达形式\",{\"1\":{\"1518\":1}}],[\"when\",{\"1\":{\"1292\":1,\"1320\":3,\"1518\":8,\"1546\":1,\"1846\":3,\"1847\":8,\"1849\":6,\"1850\":1}}],[\"where\",{\"1\":{\"613\":1,\"621\":1,\"631\":1,\"695\":1}}],[\"why\",{\"1\":{\"305\":1,\"1253\":1,\"1286\":1}}],[\"white\",{\"1\":{\"1289\":1}}],[\"whitelist\",{\"1\":{\"1289\":1,\"1292\":1}}],[\"which\",{\"0\":{\"67\":1},\"1\":{\"67\":1,\"359\":1,\"631\":2,\"1555\":1,\"1604\":1}}],[\"while循环方法\",{\"1\":{\"1518\":1}}],[\"while\",{\"0\":{\"46\":1,\"52\":1},\"1\":{\"115\":1,\"154\":1,\"279\":3,\"280\":1,\"281\":2,\"283\":3,\"284\":3,\"352\":1,\"465\":1,\"543\":1,\"711\":1,\"867\":4,\"869\":1,\"870\":5,\"896\":1,\"917\":3,\"926\":1,\"945\":1,\"948\":1,\"949\":1,\"950\":3,\"958\":2,\"1197\":1,\"1332\":3,\"1518\":1,\"1770\":2,\"1778\":1,\"1789\":1,\"1798\":1,\"1799\":1,\"1805\":1,\"1826\":1,\"1828\":1,\"1846\":1,\"1849\":2,\"1857\":1,\"1863\":1}}],[\"wx\",{\"1\":{\"94\":2}}],[\"wake\",{\"1\":{\"1770\":1,\"1826\":2,\"1827\":4,\"1828\":1}}],[\"wakeapp\",{\"1\":{\"1326\":2}}],[\"way的标记\",{\"1\":{\"1756\":1}}],[\"way\",{\"1\":{\"1756\":1}}],[\"waynell\",{\"1\":{\"1289\":2}}],[\"warranties\",{\"1\":{\"1648\":1}}],[\"warn\",{\"1\":{\"94\":1,\"1329\":1}}],[\"warning\",{\"0\":{\"37\":1,\"91\":1},\"1\":{\"103\":1,\"1413\":1,\"1604\":1}}],[\"was\",{\"1\":{\"1601\":2,\"1604\":2,\"1610\":1}}],[\"wall\",{\"1\":{\"1534\":2}}],[\"waimai\",{\"1\":{\"1503\":1}}],[\"waittime\",{\"1\":{\"1625\":2}}],[\"waitting\",{\"1\":{\"1230\":2}}],[\"waitting到runnable都会进行一次上下文的切换\",{\"1\":{\"822\":1}}],[\"waitforsecondaryzygote\",{\"1\":{\"1865\":1}}],[\"waitforresponse\",{\"1\":{\"1756\":4,\"1798\":2}}],[\"waitfor\",{\"1\":{\"1613\":1}}],[\"waitstatus\",{\"1\":{\"878\":1,\"879\":1}}],[\"waitingthread\",{\"1\":{\"867\":1}}],[\"waiting的线程少了\",{\"1\":{\"822\":1}}],[\"waiting\",{\"1\":{\"822\":7,\"867\":4,\"884\":11,\"943\":2,\"1857\":1}}],[\"wait\",{\"1\":{\"631\":1,\"822\":3,\"867\":1,\"870\":3,\"889\":1,\"896\":1,\"917\":3,\"926\":1,\"946\":4,\"948\":2,\"949\":1,\"950\":2,\"958\":2,\"1230\":2,\"1770\":8,\"1828\":2,\"1857\":2}}],[\"wanandroid\",{\"1\":{\"1399\":1,\"1503\":1,\"1682\":1}}],[\"want\",{\"1\":{\"631\":2,\"1383\":1,\"1666\":1}}],[\"wa\",{\"1\":{\"820\":1}}],[\"watchman\",{\"1\":{\"1413\":1}}],[\"watch\",{\"1\":{\"94\":2}}],[\"wiki放置当前最新切图\",{\"1\":{\"1440\":1}}],[\"wiki放置一份sketch图\",{\"1\":{\"1440\":1}}],[\"widthfactor\",{\"1\":{\"1402\":6,\"1685\":6}}],[\"width\",{\"1\":{\"1402\":9,\"1540\":1,\"1685\":9,\"1709\":1,\"1713\":1}}],[\"width=\",{\"1\":{\"1346\":20}}],[\"widget装饰器\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"widgetdecoration\",{\"1\":{\"1402\":32,\"1685\":32}}],[\"widget开发思路\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"widget布局开发\",{\"0\":{\"1389\":1,\"1672\":1}}],[\"widgets\",{\"1\":{\"1383\":1,\"1392\":1,\"1666\":1,\"1675\":1}}],[\"widget\",{\"0\":{\"55\":1},\"1\":{\"55\":1,\"1305\":2,\"1307\":3,\"1329\":1,\"1383\":8,\"1389\":1,\"1392\":3,\"1402\":67,\"1666\":8,\"1672\":1,\"1675\":3,\"1685\":67}}],[\"wildcardentry\",{\"1\":{\"1064\":1}}],[\"will\",{\"0\":{\"67\":1,\"91\":1},\"1\":{\"67\":1,\"73\":1,\"154\":1,\"631\":1,\"1292\":1,\"1555\":1,\"1604\":1}}],[\"wirte\",{\"1\":{\"929\":1}}],[\"win\",{\"1\":{\"332\":1}}],[\"windowfullscreen\",{\"1\":{\"1320\":1}}],[\"windowcontentoverlay\",{\"1\":{\"1320\":1}}],[\"windowistranslucent\",{\"1\":{\"1320\":2}}],[\"windowbackground\",{\"1\":{\"1320\":2}}],[\"windowscomputer\",{\"1\":{\"501\":2}}],[\"windows电脑载入操作系统\",{\"1\":{\"501\":1}}],[\"windows电脑检查硬件\",{\"1\":{\"501\":1}}],[\"windows电脑开启电源\",{\"1\":{\"501\":1}}],[\"windows电脑\",{\"1\":{\"501\":1}}],[\"windows目录下有文件explorer\",{\"1\":{\"465\":1}}],[\"windows\",{\"0\":{\"1902\":1,\"1938\":1},\"1\":{\"465\":1,\"631\":1}}],[\"window\",{\"1\":{\"70\":1}}],[\"wifi\",{\"0\":{\"118\":1}}],[\"with函数\",{\"1\":{\"1521\":1}}],[\"without\",{\"1\":{\"631\":1,\"1648\":1}}],[\"withindex\",{\"1\":{\"1518\":2}}],[\"within\",{\"1\":{\"359\":1}}],[\"with\",{\"0\":{\"43\":1,\"76\":1},\"1\":{\"73\":1,\"94\":1,\"334\":1,\"631\":5,\"651\":2,\"652\":1,\"1306\":1,\"1307\":1,\"1313\":1,\"1491\":2,\"1518\":2,\"1648\":1}}],[\"wget\",{\"1\":{\"16\":2}}],[\"www\",{\"1\":{\"16\":5,\"19\":1,\"23\":1,\"25\":1,\"100\":2,\"103\":1,\"109\":2,\"115\":1,\"121\":2,\"314\":1,\"580\":1,\"1304\":1,\"1320\":1,\"1323\":2,\"1332\":4,\"1368\":1,\"1380\":2,\"1386\":1,\"1399\":5,\"1459\":2,\"1503\":6,\"1515\":1,\"1534\":1,\"1552\":1,\"1555\":5,\"1574\":1,\"1580\":1,\"1595\":2,\"1613\":2,\"1638\":1,\"1647\":1,\"1648\":1,\"1669\":1,\"1682\":5,\"1905\":1,\"1911\":1,\"1966\":1}}],[\"welcome\",{\"1\":{\"1515\":1}}],[\"well\",{\"1\":{\"12\":1,\"731\":1}}],[\"wealth\",{\"1\":{\"1468\":4}}],[\"weak\",{\"1\":{\"1770\":2,\"1799\":1}}],[\"weakref\",{\"1\":{\"1527\":1,\"1717\":1}}],[\"weakreference<>\",{\"1\":{\"1851\":1}}],[\"weakreference<context>\",{\"1\":{\"1851\":1}}],[\"weakreference<threadlocal<\",{\"1\":{\"381\":1}}],[\"weakreference<object>\",{\"1\":{\"367\":1}}],[\"weakreference\",{\"1\":{\"154\":1,\"367\":2,\"1126\":1}}],[\"weakhashmap<>\",{\"1\":{\"368\":1}}],[\"weakhashmap\",{\"0\":{\"366\":1},\"1\":{\"319\":1,\"367\":3,\"368\":2}}],[\"weight\",{\"1\":{\"1346\":2}}],[\"weight=\",{\"1\":{\"1346\":3}}],[\"weixinapi技术\",{\"1\":{\"1494\":1}}],[\"weixinapi\",{\"1\":{\"1486\":1,\"1488\":2,\"1491\":3}}],[\"weixinapiplugin\",{\"1\":{\"61\":1}}],[\"weixin\",{\"1\":{\"12\":1,\"19\":1,\"731\":1,\"1399\":1,\"1564\":1,\"1682\":1}}],[\"weex\",{\"0\":{\"94\":1},\"1\":{\"94\":6,\"305\":1,\"1399\":1,\"1682\":1}}],[\"weexplugin\",{\"0\":{\"73\":1},\"1\":{\"73\":3}}],[\"webcontroller\",{\"1\":{\"1713\":1}}],[\"webchromeclient\",{\"1\":{\"1416\":2}}],[\"webchrome特别支持\",{\"1\":{\"1416\":1}}],[\"webviewupdateservice\",{\"1\":{\"1867\":1,\"1868\":1}}],[\"webviewuploadfilehelper\",{\"0\":{\"1417\":1},\"1\":{\"1416\":2,\"1417\":3}}],[\"webviewtransport\",{\"1\":{\"1416\":2}}],[\"webview销毁方法\",{\"1\":{\"1416\":1}}],[\"webview初始化\",{\"1\":{\"1416\":1}}],[\"webview支持input标签2\",{\"1\":{\"1416\":1}}],[\"webview支持input标签\",{\"0\":{\"1416\":1}}],[\"webviewclient\",{\"1\":{\"1358\":1}}],[\"webview拦截\",{\"1\":{\"1358\":1}}],[\"webview\",{\"1\":{\"1320\":3,\"1358\":4,\"1416\":12,\"1708\":2}}],[\"webpconvert\",{\"1\":{\"1317\":1}}],[\"webpack\",{\"1\":{\"94\":3}}],[\"webmvcconfigurer\",{\"1\":{\"650\":2}}],[\"website\",{\"1\":{\"1481\":1,\"1503\":1}}],[\"websetting\",{\"1\":{\"1416\":27}}],[\"websettings\",{\"1\":{\"1416\":5}}],[\"webstorm\",{\"0\":{\"22\":1},\"1\":{\"23\":1,\"109\":1}}],[\"websocket\",{\"1\":{\"12\":1,\"649\":1,\"731\":1,\"1708\":1}}],[\"websocket协议\",{\"1\":{\"12\":1,\"731\":1}}],[\"web容器\",{\"1\":{\"12\":1,\"731\":1}}],[\"web业务封装+列表\",{\"1\":{\"12\":1,\"731\":1}}],[\"web插件\",{\"1\":{\"12\":1,\"731\":1}}],[\"web\",{\"1\":{\"12\":10,\"650\":5,\"731\":10,\"1292\":1,\"1702\":9,\"1707\":1,\"1708\":3,\"1711\":1,\"1712\":1,\"1713\":5}}],[\"及以上\",{\"1\":{\"1708\":2}}],[\"及超时获取锁\",{\"1\":{\"874\":1}}],[\"及依赖倒置5个原则定义为solid原则\",{\"1\":{\"750\":1}}],[\"及时研读源码\",{\"1\":{\"228\":1}}],[\"及\",{\"0\":{\"16\":1}}],[\"文本大小\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"文本超链接\",{\"1\":{\"1310\":1}}],[\"文本外貌\",{\"1\":{\"1310\":1}}],[\"文本字体\",{\"1\":{\"1310\":3}}],[\"文本颜色\",{\"1\":{\"1310\":1}}],[\"文本背景色\",{\"1\":{\"1310\":1}}],[\"文本信息也是api\",{\"1\":{\"793\":1}}],[\"文法分析\",{\"1\":{\"525\":1}}],[\"文档检测矫正\",{\"1\":{\"1702\":1}}],[\"文档全面介绍详实\",{\"1\":{\"1481\":1}}],[\"文档说明\",{\"0\":{\"1190\":1}}],[\"文档\",{\"1\":{\"796\":1}}],[\"文档尽量要丰富\",{\"1\":{\"793\":1}}],[\"文档兼容\",{\"1\":{\"766\":1}}],[\"文档管理\",{\"1\":{\"305\":1}}],[\"文档地址\",{\"1\":{\"15\":1,\"734\":1}}],[\"文字版\",{\"0\":{\"392\":1},\"1\":{\"257\":1}}],[\"文集上\",{\"1\":{\"228\":1}}],[\"文件和当前上传软件包的应用不匹配\",{\"1\":{\"1709\":1}}],[\"文件中\",{\"1\":{\"1712\":1}}],[\"文件中的发布证书不匹配\",{\"1\":{\"1709\":1}}],[\"文件中配置哪个字段\",{\"1\":{\"1708\":1}}],[\"文件中哪个字段保持一致\",{\"1\":{\"1708\":1,\"1709\":1,\"1712\":1}}],[\"文件armmvphelper自动拼写\",{\"1\":{\"1549\":1}}],[\"文件改动\",{\"1\":{\"1534\":1}}],[\"文件内可见\",{\"1\":{\"1518\":1}}],[\"文件编译时移除使用\",{\"1\":{\"1487\":1}}],[\"文件后缀改为\",{\"1\":{\"1487\":1}}],[\"文件拷贝至指定apimodule\",{\"1\":{\"1487\":1}}],[\"文件变成系统可识别的\",{\"1\":{\"1486\":1}}],[\"文件是java\",{\"1\":{\"1486\":1}}],[\"文件选择\",{\"1\":{\"1417\":1}}],[\"文件io\",{\"1\":{\"1224\":1}}],[\"文件格式必须以某个固定字节开头\",{\"1\":{\"1077\":1}}],[\"文件\",{\"1\":{\"978\":1,\"1064\":1,\"1487\":1,\"1488\":1,\"1707\":1,\"1944\":1,\"1952\":1,\"1966\":1}}],[\"文件对象不支持该操作\",{\"1\":{\"465\":4}}],[\"文件锁\",{\"1\":{\"268\":1}}],[\"文件夹\",{\"1\":{\"85\":1}}],[\"文件没有从png签名开始\",{\"1\":{\"76\":1}}],[\"文件可加密存储\",{\"1\":{\"12\":1,\"731\":1}}],[\"文件存储\",{\"1\":{\"12\":1,\"731\":1}}],[\"文件服务\",{\"1\":{\"12\":1,\"731\":1}}],[\"文件上传能力\",{\"1\":{\"12\":1,\"731\":1}}],[\"谢谢各位小伙伴\",{\"1\":{\"15\":1,\"734\":1}}],[\"陆陆续续收到一些打赏\",{\"1\":{\"15\":1,\"734\":1}}],[\"磁盘\",{\"1\":{\"14\":1,\"733\":1}}],[\"监视文件系统变更的工具\",{\"1\":{\"1413\":1}}],[\"监视当前系统数据库连接池状态\",{\"1\":{\"14\":1,\"733\":1}}],[\"监视当前系统cpu\",{\"1\":{\"14\":1,\"733\":1}}],[\"监测\",{\"1\":{\"1530\":1}}],[\"监测edittext\",{\"1\":{\"1364\":1}}],[\"监测多个edittextview\",{\"1\":{\"1364\":1}}],[\"监控\",{\"0\":{\"1880\":1,\"1882\":1}}],[\"监控负载和响应时间\",{\"1\":{\"314\":1}}],[\"监控能力微服务化\",{\"1\":{\"12\":1,\"731\":1}}],[\"监控中心\",{\"1\":{\"12\":1,\"731\":1}}],[\"监控壳\",{\"1\":{\"12\":1,\"731\":1}}],[\"删除版本\",{\"1\":{\"1974\":1}}],[\"删除项目远程地址\",{\"1\":{\"1950\":1}}],[\"删除标签\",{\"1\":{\"1949\":1}}],[\"删除分支\",{\"1\":{\"1947\":1}}],[\"删除旧的远程链接\",{\"1\":{\"1945\":1}}],[\"删除api文件\",{\"1\":{\"1488\":1}}],[\"删除api\",{\"1\":{\"1488\":1}}],[\"删除sourcesets\",{\"1\":{\"1476\":1}}],[\"删除所有debug目录下内容\",{\"1\":{\"1475\":1}}],[\"删除全局模块xxx\",{\"1\":{\"1410\":1}}],[\"删除xxx模块\",{\"1\":{\"1410\":1}}],[\"删除模块\",{\"0\":{\"1410\":1}}],[\"删除斜杠\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"删除冗余so库\",{\"1\":{\"1317\":1}}],[\"删除线\",{\"1\":{\"1310\":1}}],[\"删除无用代码\",{\"1\":{\"1204\":1}}],[\"删除3306端口的访问权限\",{\"1\":{\"662\":1,\"723\":1}}],[\"删除对应的所有值\",{\"1\":{\"381\":1}}],[\"删除元素的代价是非常高的\",{\"1\":{\"333\":1}}],[\"删除元素\",{\"0\":{\"333\":1}}],[\"删除链表的节点\",{\"1\":{\"298\":1}}],[\"删除node\",{\"1\":{\"85\":1}}],[\"删除这个配置\",{\"1\":{\"40\":1}}],[\"删除\",{\"1\":{\"14\":1,\"212\":1,\"733\":1,\"1256\":1,\"1286\":1,\"1476\":1,\"1530\":1,\"1961\":1}}],[\"添加gitalk评论\",{\"0\":{\"1962\":1}}],[\"添加远程依赖\",{\"1\":{\"1961\":1}}],[\"添加远程项目\",{\"1\":{\"1950\":1}}],[\"添加以下内容\",{\"1\":{\"1923\":1}}],[\"添加私钥\",{\"0\":{\"1922\":1}}],[\"添加屏障\",{\"1\":{\"1849\":1}}],[\"添加消息\",{\"0\":{\"1847\":1}}],[\"添加到epoll实例\",{\"1\":{\"1829\":1}}],[\"添加到指定下标的桶里\",{\"1\":{\"285\":1}}],[\"添加死亡通告失败\",{\"1\":{\"1762\":1}}],[\"添加用户信息时\",{\"1\":{\"1708\":1}}],[\"添加jiagu\",{\"1\":{\"1613\":1}}],[\"添加对应依赖\",{\"1\":{\"1595\":1}}],[\"添加mock代码\",{\"1\":{\"1595\":1}}],[\"添加版本号\",{\"1\":{\"1534\":1}}],[\"添加子目录\",{\"1\":{\"1534\":1}}],[\"添加扩展方法\",{\"1\":{\"1474\":1}}],[\"添加配置依赖\",{\"1\":{\"1474\":1}}],[\"添加点击事件\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"添加表内容\",{\"1\":{\"1368\":1}}],[\"添加表头\",{\"1\":{\"1368\":1}}],[\"添加参数\",{\"1\":{\"1274\":1}}],[\"添加功能\",{\"1\":{\"1253\":1,\"1286\":1}}],[\"添加抽象语法树任意元素\",{\"1\":{\"1199\":1}}],[\"添加testoption\",{\"0\":{\"1068\":1}}],[\"添加环境变量\",{\"0\":{\"1050\":1}}],[\"添加测试标志\",{\"1\":{\"1030\":1}}],[\"添加native类\",{\"0\":{\"1023\":1}}],[\"添加初始化逻辑\",{\"1\":{\"1003\":1}}],[\"添加元素\",{\"1\":{\"950\":1,\"958\":1}}],[\"添加元素时使用\",{\"1\":{\"332\":1}}],[\"添加共享节点\",{\"1\":{\"880\":1}}],[\"添加方法的另一种方案\",{\"1\":{\"802\":1}}],[\"添加方法或字段\",{\"1\":{\"802\":1}}],[\"添加可以\",{\"1\":{\"802\":2}}],[\"添加容许\",{\"1\":{\"802\":1}}],[\"添加一层命令\",{\"1\":{\"489\":1}}],[\"添加一句\",{\"1\":{\"67\":1}}],[\"添加物\",{\"1\":{\"459\":1}}],[\"添加\",{\"1\":{\"14\":1,\"67\":1,\"109\":1,\"733\":1}}],[\"操作数组\",{\"1\":{\"1527\":1}}],[\"操作数栈\",{\"0\":{\"1183\":1},\"1\":{\"1115\":1}}],[\"操作数栈顶\",{\"1\":{\"993\":1}}],[\"操作细节\",{\"1\":{\"1277\":1}}],[\"操作和冲突检测是原子性操作\",{\"1\":{\"1239\":1}}],[\"操作系统内核线程实现\",{\"1\":{\"1225\":1}}],[\"操作b可以观察到a的副作用\",{\"1\":{\"1223\":1}}],[\"操作a先发生于b\",{\"1\":{\"1223\":1}}],[\"操作栈\",{\"1\":{\"1183\":1}}],[\"操作失败时使用内置锁\",{\"1\":{\"360\":1}}],[\"操作来支持更高的并发度\",{\"1\":{\"360\":1}}],[\"操作时先尝试不加锁\",{\"1\":{\"359\":1}}],[\"操作时\",{\"1\":{\"359\":1}}],[\"操作\",{\"0\":{\"350\":1,\"359\":1},\"1\":{\"1707\":1}}],[\"操作日志\",{\"1\":{\"14\":1,\"668\":1,\"733\":1}}],[\"操作权限\",{\"1\":{\"14\":1,\"733\":1}}],[\"通讯过程\",{\"1\":{\"1755\":1}}],[\"通俗讲java像xml一样解析\",{\"1\":{\"1552\":1}}],[\"通俗解释\",{\"1\":{\"802\":1}}],[\"通信过程\",{\"0\":{\"1755\":1},\"1\":{\"1768\":1}}],[\"通信适配层\",{\"1\":{\"1702\":3}}],[\"通信是隐式调用的\",{\"1\":{\"858\":1}}],[\"通信路由\",{\"1\":{\"305\":1}}],[\"通知内容包含以下哪几种类型\",{\"1\":{\"1702\":1}}],[\"通知logo\",{\"1\":{\"1435\":1}}],[\"通知栏不含有与app自身无关的应用图标\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"通知所有等待对象上的线程\",{\"1\":{\"948\":1}}],[\"通知所有等待线程在该对象的线程\",{\"1\":{\"946\":1}}],[\"通知一个在对象上等待的线程\",{\"1\":{\"946\":1}}],[\"通知机制\",{\"1\":{\"870\":1}}],[\"通知\",{\"0\":{\"948\":1},\"1\":{\"519\":1,\"889\":1,\"890\":1}}],[\"通知公告\",{\"1\":{\"14\":1,\"668\":1,\"733\":1}}],[\"通常用于加载图片资源\",{\"1\":{\"1702\":1}}],[\"通常如下\",{\"1\":{\"1595\":1}}],[\"通常采用模块化类库\",{\"1\":{\"805\":1}}],[\"通常只包含系统运行的最小功能\",{\"1\":{\"313\":1}}],[\"通常比较麻烦和费时\",{\"1\":{\"311\":1}}],[\"通过zygote\",{\"1\":{\"1865\":1}}],[\"通过rc文件创建\",{\"1\":{\"1857\":1}}],[\"通过next成员变量\",{\"1\":{\"1850\":1}}],[\"通过native方法初始化消息队列\",{\"1\":{\"1845\":1}}],[\"通过成员变量mremote=\",{\"1\":{\"1804\":1}}],[\"通过继承接口iservicemanager实现了接口中的业务逻辑函数\",{\"1\":{\"1804\":1}}],[\"通过ioctl发送给binder驱动\",{\"1\":{\"1790\":2}}],[\"通过socket向zygote进程发送创建新进程的请求\",{\"1\":{\"1869\":1}}],[\"通过socket读取消息\",{\"1\":{\"1863\":1}}],[\"通过startthreadpool\",{\"1\":{\"1779\":1}}],[\"通过scheme\",{\"1\":{\"1326\":1}}],[\"通过binder传递数据\",{\"1\":{\"1756\":1}}],[\"通过getiservicemanager方法获取的是servicemanagerproxy对象\",{\"1\":{\"1751\":1}}],[\"通过myserviceproxy对象调用接口的方法\",{\"1\":{\"1731\":1}}],[\"通过mm编译后\",{\"1\":{\"1728\":1}}],[\"通过meta\",{\"1\":{\"805\":1}}],[\"通过接口引用调用服务端方法\",{\"1\":{\"1726\":1}}],[\"通过\",{\"1\":{\"1712\":1}}],[\"通过一种方案去满足不同国家的需求\",{\"1\":{\"1702\":1}}],[\"通过以下哪个接口可以一次性查询到\",{\"1\":{\"1702\":1}}],[\"通过注解\",{\"1\":{\"1604\":1}}],[\"通过注解标识javabean\",{\"1\":{\"805\":1}}],[\"通过反射等手段来hook\",{\"1\":{\"1587\":1}}],[\"通过发送事件类型寻找注册表\",{\"1\":{\"1546\":1}}],[\"通过event寻找该注册类函数清单\",{\"1\":{\"1546\":1}}],[\"通过event寻找注册类\",{\"1\":{\"1546\":1}}],[\"通过env特定转化函数\",{\"1\":{\"1527\":1}}],[\"通过视频链接\",{\"1\":{\"1543\":1}}],[\"通过直观效果\",{\"1\":{\"1540\":1}}],[\"通过它可以访问到\",{\"1\":{\"1530\":1}}],[\"通过okhttp\",{\"1\":{\"1332\":1}}],[\"通过包名判断是否安装该app\",{\"1\":{\"1326\":1}}],[\"通过包名唤醒\",{\"1\":{\"1326\":1}}],[\"通过自定义action\",{\"1\":{\"1326\":1}}],[\"通过减少最大堆和减少栈容量来换取更多线程\",{\"1\":{\"1119\":1}}],[\"通过栈上reference访问对象\",{\"1\":{\"1118\":1}}],[\"通过改变计数器值来指定下一条要执行的字节码指令\",{\"1\":{\"1115\":1}}],[\"通过实例调用\",{\"1\":{\"991\":1}}],[\"通过类调用\",{\"1\":{\"991\":1}}],[\"通过标志位\",{\"1\":{\"920\":1}}],[\"通过内置的fifo队列来完成资源获取线程的排队工作\",{\"1\":{\"875\":1}}],[\"通过检查模块间依赖\",{\"1\":{\"805\":1}}],[\"通过不断尝试\",{\"1\":{\"757\":1}}],[\"通过共享技术来有效支持大量细粒度对象\",{\"1\":{\"440\":1}}],[\"通过共享技术来有效支持大量细粒度的对象\",{\"1\":{\"257\":1,\"394\":1}}],[\"通过重新哈希位于staleslot和下一个null插槽之间的任何可能冲突的条目\",{\"1\":{\"381\":1}}],[\"通过this\",{\"1\":{\"381\":1}}],[\"通过tcp连接传送的数据\",{\"1\":{\"181\":1}}],[\"通过当前线程获取线程中的threadlocal\",{\"1\":{\"381\":3}}],[\"通过使用\",{\"1\":{\"367\":1}}],[\"通过移除最近最久未使用的节点\",{\"1\":{\"364\":1}}],[\"通过这个对象就可以迭代遍历\",{\"1\":{\"327\":1}}],[\"通过远程通信协议\",{\"1\":{\"314\":1}}],[\"通过关注组件\",{\"1\":{\"305\":1}}],[\"通过引入serverless\",{\"1\":{\"305\":1}}],[\"通过桥接把多个变化隔离开\",{\"1\":{\"261\":1}}],[\"通过复制现有实例创建新实例\",{\"1\":{\"257\":1,\"393\":1,\"409\":1}}],[\"通过静态内部类实现单例好处\",{\"0\":{\"168\":1}}],[\"通用初始化\",{\"1\":{\"1866\":1}}],[\"通用的一些初始化\",{\"1\":{\"1866\":1}}],[\"通用密钥库系统\",{\"1\":{\"1708\":1}}],[\"通用封装方法\",{\"1\":{\"1540\":1}}],[\"通用要求\",{\"0\":{\"1444\":1}}],[\"通用二维码地址\",{\"1\":{\"1335\":1}}],[\"通用性越强\",{\"1\":{\"750\":1}}],[\"通用模板\",{\"1\":{\"746\":1}}],[\"通用配置\",{\"1\":{\"650\":1}}],[\"通用组件管理\",{\"1\":{\"305\":1}}],[\"通用\",{\"1\":{\"16\":1}}],[\"通用协议支持大部分邮件厂商\",{\"1\":{\"12\":1,\"731\":1}}],[\"通用日志\",{\"1\":{\"12\":1,\"731\":1}}],[\"通用异常\",{\"1\":{\"12\":1,\"731\":1}}],[\"通用业务领域模块\",{\"1\":{\"12\":1,\"731\":1}}],[\"通用插件依赖\",{\"1\":{\"12\":1,\"731\":1}}],[\"参照cc\",{\"1\":{\"1494\":1}}],[\"参数有mhandle和bpbinder对象\",{\"1\":{\"1761\":2}}],[\"参数说法错误的是\",{\"1\":{\"1712\":1}}],[\"参数可以配置为以下哪几种跳转页面使用的模式\",{\"1\":{\"1708\":1}}],[\"参数个数\",{\"1\":{\"1109\":1}}],[\"参数配置控制行为模式\",{\"1\":{\"752\":1}}],[\"参数列表\",{\"1\":{\"738\":1}}],[\"参数设置\",{\"1\":{\"668\":1}}],[\"参数\",{\"1\":{\"338\":1,\"352\":1,\"1022\":1,\"1061\":1,\"1474\":1,\"1712\":1}}],[\"参数管理\",{\"1\":{\"14\":1,\"733\":1}}],[\"参考手册\",{\"1\":{\"1574\":1}}],[\"参考范例\",{\"1\":{\"1534\":1}}],[\"参考cc\",{\"1\":{\"1482\":1}}],[\"参考的是苍王的书\",{\"1\":{\"1453\":1}}],[\"参考文章\",{\"1\":{\"1399\":1,\"1583\":1,\"1682\":1}}],[\"参考资料\",{\"0\":{\"369\":1},\"1\":{\"319\":1,\"738\":1,\"1399\":1,\"1682\":1}}],[\"参考\",{\"0\":{\"299\":1,\"396\":1},\"1\":{\"55\":1,\"259\":1,\"754\":1,\"1317\":1,\"1320\":1,\"1346\":1,\"1561\":1,\"1574\":1,\"1629\":1,\"1905\":2}}],[\"参考美团gtis防重系统简化实现\",{\"1\":{\"12\":1,\"731\":1}}],[\"按分发机制将消息分发给目标处理者\",{\"1\":{\"1837\":1}}],[\"按位切割使用\",{\"1\":{\"886\":1}}],[\"按顺序合并每个桶的元素\",{\"1\":{\"285\":1}}],[\"按钮权限标识等\",{\"1\":{\"14\":1,\"733\":1}}],[\"按照端口杀进程\",{\"0\":{\"1963\":1}}],[\"按照when\",{\"1\":{\"1847\":1}}],[\"按照when从小到大插入\",{\"1\":{\"1841\":1}}],[\"按照申请锁顺序来依次获得锁\",{\"1\":{\"1238\":1}}],[\"按照搜索先后顺序\",{\"1\":{\"1061\":1}}],[\"按照步骤构建对象\",{\"1\":{\"257\":1,\"393\":1,\"421\":1}}],[\"按照工具类型拆分\",{\"1\":{\"12\":1,\"731\":1}}],[\"按照业务划分\",{\"1\":{\"12\":1,\"731\":1}}],[\"岗位管理\",{\"1\":{\"14\":1,\"668\":1,\"733\":1}}],[\"公用有限资源限制\",{\"1\":{\"907\":1}}],[\"公平锁保证锁获得按照fifo原则\",{\"1\":{\"884\":1}}],[\"公平锁\",{\"1\":{\"884\":1,\"1238\":1}}],[\"公平锁和非公平锁区别\",{\"0\":{\"883\":1}}],[\"公平锁能减少\",{\"1\":{\"881\":1}}],[\"公平锁机制往往没有非公平锁效率高\",{\"1\":{\"881\":1}}],[\"公平性选择\",{\"1\":{\"881\":1,\"885\":1}}],[\"公平和非公平选择\",{\"1\":{\"881\":1}}],[\"公开透明\",{\"1\":{\"589\":1}}],[\"公司名\",{\"1\":{\"1555\":1}}],[\"公司网站或个人网站\",{\"1\":{\"1555\":1}}],[\"公司\",{\"1\":{\"14\":1,\"531\":1,\"543\":1,\"733\":1}}],[\"公共事件服务为应用程序提供哪些能力\",{\"1\":{\"1709\":1}}],[\"公共list列表\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"公共\",{\"1\":{\"1389\":2,\"1672\":2}}],[\"公共titlebar\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"公共子表达式消除\",{\"1\":{\"1211\":1}}],[\"公共字段信息\",{\"1\":{\"1109\":1}}],[\"公共部分\",{\"1\":{\"259\":1,\"447\":2}}],[\"公共依赖\",{\"1\":{\"12\":1,\"731\":1}}],[\"公共模块\",{\"1\":{\"12\":1,\"731\":1}}],[\"部署时候\",{\"1\":{\"1961\":1}}],[\"部署并发布\",{\"1\":{\"1960\":1}}],[\"部署函数\",{\"1\":{\"1709\":1}}],[\"部署\",{\"1\":{\"1552\":1}}],[\"部署中间件\",{\"1\":{\"314\":1}}],[\"部署比较麻烦\",{\"1\":{\"311\":1}}],[\"部署方式\",{\"1\":{\"12\":1,\"731\":1}}],[\"部分与整体关系\",{\"1\":{\"1262\":1}}],[\"部分的关系\",{\"1\":{\"465\":1}}],[\"部分\",{\"1\":{\"257\":1,\"394\":1,\"464\":1,\"738\":3}}],[\"部分加固服务不支持\",{\"1\":{\"103\":1}}],[\"部门\",{\"1\":{\"14\":1,\"733\":1}}],[\"部门管理\",{\"1\":{\"14\":1,\"668\":1,\"733\":1}}],[\"含义明确\",{\"1\":{\"1283\":1}}],[\"含义\",{\"1\":{\"352\":1}}],[\"含\",{\"1\":{\"12\":1,\"731\":1}}],[\"引导服务\",{\"1\":{\"1868\":1}}],[\"引仓库\",{\"1\":{\"1623\":1}}],[\"引言\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"引发不确定性\",{\"1\":{\"945\":1}}],[\"引发问题\",{\"1\":{\"824\":1}}],[\"引入自己的\",{\"1\":{\"1911\":1}}],[\"引入公共配置\",{\"1\":{\"1905\":1}}],[\"引入公共apimodule即可\",{\"1\":{\"1491\":1}}],[\"引入aspectj插件方法\",{\"1\":{\"1632\":1}}],[\"引入apt\",{\"1\":{\"1604\":1}}],[\"引入gradle配置比较麻烦\",{\"1\":{\"1632\":1}}],[\"引入\",{\"0\":{\"1623\":1},\"1\":{\"1905\":1}}],[\"引入两个类\",{\"1\":{\"1601\":1}}],[\"引入插件\",{\"1\":{\"1595\":1}}],[\"引入会导致aop失效\",{\"1\":{\"1589\":1}}],[\"引入mock\",{\"1\":{\"1587\":1}}],[\"引入环境变量\",{\"1\":{\"1534\":1}}],[\"引入cmake环境变量及编译\",{\"1\":{\"1534\":1}}],[\"引入kotlin语境\",{\"1\":{\"1512\":1}}],[\"引入项目依赖\",{\"1\":{\"1491\":1}}],[\"引入解释性变量\",{\"1\":{\"1280\":1}}],[\"引入断言\",{\"1\":{\"1277\":1}}],[\"引入默认值\",{\"1\":{\"1277\":1}}],[\"引入null对象\",{\"1\":{\"1277\":1}}],[\"引入参数对象\",{\"1\":{\"1274\":1}}],[\"引入本地扩展\",{\"1\":{\"1259\":1}}],[\"引入外加函数\",{\"1\":{\"1259\":1}}],[\"引入了分段锁\",{\"1\":{\"325\":1}}],[\"引入支持限流能力\",{\"1\":{\"12\":1,\"731\":1}}],[\"引用增加\",{\"1\":{\"1966\":1}}],[\"引用插件\",{\"1\":{\"1911\":1}}],[\"引用classpath\",{\"1\":{\"1905\":1}}],[\"引用所在进程\",{\"1\":{\"1761\":1}}],[\"引用aop插件\",{\"1\":{\"1595\":1}}],[\"引用数据类型\",{\"1\":{\"1530\":1}}],[\"引用和属性\",{\"1\":{\"1524\":1}}],[\"引用的moudle\",{\"1\":{\"1491\":1}}],[\"引用依赖\",{\"0\":{\"1304\":1},\"1\":{\"1374\":1}}],[\"引用计数器失效\",{\"1\":{\"1124\":1}}],[\"引用计数算法\",{\"0\":{\"1124\":1}}],[\"引用失效时就\",{\"1\":{\"1124\":1}}],[\"引用类\",{\"1\":{\"1110\":1}}],[\"引用类型转换\",{\"1\":{\"1530\":1}}],[\"引用类型\",{\"1\":{\"271\":2,\"1087\":2,\"1530\":1}}],[\"引用型数组\",{\"1\":{\"1008\":1}}],[\"引用\",{\"1\":{\"993\":1,\"1524\":1,\"1613\":1,\"1708\":1}}],[\"引用field\",{\"1\":{\"900\":1}}],[\"引用对象\",{\"1\":{\"900\":1}}],[\"引用何种能力\",{\"1\":{\"12\":1,\"731\":1}}],[\"积木化\",{\"1\":{\"12\":1,\"731\":1}}],[\"并生成可用aar\",{\"1\":{\"1966\":1}}],[\"并清空消息所有的参数\",{\"1\":{\"1850\":1}}],[\"并消息链表断开\",{\"1\":{\"1850\":1}}],[\"并返回\",{\"1\":{\"1846\":1}}],[\"并返回旧的value\",{\"1\":{\"885\":1}}],[\"并注册wake管道\",{\"1\":{\"1829\":1}}],[\"并触发死亡回调\",{\"1\":{\"1761\":1}}],[\"并向其中注册一个binder线程\",{\"1\":{\"1752\":1}}],[\"并启动服务\",{\"1\":{\"1725\":1}}],[\"并销毁当前页面\",{\"1\":{\"1708\":1}}],[\"并为每个数组项创建相应的组件\",{\"1\":{\"1707\":1}}],[\"并为其做了一些改动\",{\"1\":{\"12\":1,\"731\":1}}],[\"并进行运维了\",{\"1\":{\"1707\":1}}],[\"并用插件强行约束\",{\"1\":{\"1500\":1}}],[\"并用应用管理杀掉\",{\"1\":{\"106\":1}}],[\"并加上版本号\",{\"1\":{\"1445\":1}}],[\"并唤起支付宝\",{\"1\":{\"1358\":1}}],[\"并直接调用前一个函数\",{\"1\":{\"1274\":1}}],[\"并通过委托关系让其中一个可以调用另一个\",{\"1\":{\"1265\":1}}],[\"并在子类构造函数中调用它\",{\"1\":{\"1262\":1}}],[\"并在此类知识的基础上设计api\",{\"1\":{\"793\":1}}],[\"并从调用者\",{\"1\":{\"993\":1}}],[\"并分别标号\",{\"1\":{\"979\":2}}],[\"并放在根目录\",{\"1\":{\"1905\":1}}],[\"并放入方法区\",{\"1\":{\"979\":1}}],[\"并放大的\",{\"1\":{\"598\":1}}],[\"并调用rejectedexecutionhandler\",{\"1\":{\"913\":1}}],[\"并得到其结果\",{\"1\":{\"897\":1}}],[\"并行执行任务的框架\",{\"1\":{\"897\":1}}],[\"并非任何场景都以tps作为指标\",{\"1\":{\"881\":1}}],[\"并将名称保存到\",{\"1\":{\"1534\":1}}],[\"并将行为移入相关对象中\",{\"1\":{\"1265\":1}}],[\"并将其\",{\"1\":{\"878\":1}}],[\"并将对象头中的mark\",{\"1\":{\"847\":1}}],[\"并将位置移至下一位\",{\"1\":{\"543\":1}}],[\"并根据codestyle来约束\",{\"1\":{\"814\":1}}],[\"并提供定义良好的对外接口供外部调用\",{\"1\":{\"805\":1}}],[\"并把https证书上传至服务器\",{\"1\":{\"638\":1}}],[\"并下午审核通过\",{\"1\":{\"595\":1}}],[\"并审核成功\",{\"1\":{\"595\":1}}],[\"并设置value为\",{\"1\":{\"381\":1}}],[\"并发并行\",{\"1\":{\"1145\":1}}],[\"并发收集\",{\"1\":{\"1144\":1}}],[\"并发三要素\",{\"0\":{\"839\":1}}],[\"并发线程数\",{\"1\":{\"824\":1}}],[\"并发编程挑战\",{\"0\":{\"817\":1}}],[\"并发编程\",{\"0\":{\"547\":1},\"1\":{\"858\":1}}],[\"并发度与\",{\"1\":{\"360\":1}}],[\"并发度就是\",{\"1\":{\"358\":1}}],[\"并发包下的\",{\"1\":{\"340\":1}}],[\"并取得位数\",{\"1\":{\"287\":1}}],[\"并由代理对象来控制原有对象引用\",{\"1\":{\"261\":1}}],[\"并定义一个解释器\",{\"1\":{\"257\":1,\"395\":1,\"524\":1}}],[\"并执行\",{\"1\":{\"246\":1,\"914\":1}}],[\"并不确定会有哪个线程来处理\",{\"1\":{\"1776\":2}}],[\"并不会有很多机会\",{\"1\":{\"1595\":1}}],[\"并不能真正意义解除依赖\",{\"1\":{\"1481\":1}}],[\"并不能根治问题\",{\"1\":{\"230\":1}}],[\"并不是那么直观\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"并不是简单根据第一个版本给出判断\",{\"1\":{\"796\":1}}],[\"并不包括这个位置\",{\"1\":{\"1310\":1}}],[\"并不真实存在\",{\"1\":{\"151\":1}}],[\"并稍后在由虚拟\",{\"1\":{\"200\":1}}],[\"并尽可能隐藏对象内部细节\",{\"1\":{\"158\":1}}],[\"并且token相等的message\",{\"1\":{\"1849\":1}}],[\"并且同时message是队列中最早的异步消息\",{\"1\":{\"1847\":1}}],[\"并且修改type为binder\",{\"1\":{\"1799\":1}}],[\"并且主线程是不会退出的\",{\"1\":{\"1776\":1}}],[\"并且接收者线程便是上次call时的发起线程\",{\"1\":{\"1776\":1}}],[\"并且输出打印到到system\",{\"1\":{\"1601\":1}}],[\"并且不会遗漏\",{\"1\":{\"1601\":1}}],[\"并且它也可以跨方法\",{\"1\":{\"1530\":1}}],[\"并且删除原来的lib引用\",{\"1\":{\"1476\":1}}],[\"并且删除原来的app引用\",{\"1\":{\"1476\":1}}],[\"并且相信明天早晨太阳仍然升起\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"并且能够访问共享内存变量\",{\"1\":{\"942\":1}}],[\"并且之后也不再调用\",{\"1\":{\"385\":1}}],[\"并且缓存的数据都是热点数据\",{\"1\":{\"364\":1}}],[\"并且覆盖这个方法的实现\",{\"1\":{\"364\":1}}],[\"并且\",{\"1\":{\"360\":1}}],[\"并且具有动态扩容特性\",{\"1\":{\"334\":1}}],[\"并且内部使用双向链表维护元素的插入顺序\",{\"1\":{\"322\":1}}],[\"并且失去了元素的插入顺序信息\",{\"1\":{\"322\":1}}],[\"并且使用插入排序排序\",{\"1\":{\"285\":1}}],[\"并且使它们可以互相替换\",{\"1\":{\"257\":1,\"395\":1,\"512\":1}}],[\"并且进行排序\",{\"1\":{\"281\":1}}],[\"并且网络出现拥塞不会使得发送速率降低\",{\"1\":{\"181\":1}}],[\"并且因为tcp可靠\",{\"1\":{\"181\":1}}],[\"并且采用的是共享内存模型\",{\"1\":{\"151\":1}}],[\"并且垃圾回收器已经对该对象\",{\"1\":{\"145\":1}}],[\"并被分派给某些变量赋值\",{\"1\":{\"145\":1}}],[\"并做好\",{\"1\":{\"12\":1,\"731\":1}}],[\"每调用一次\",{\"1\":{\"1707\":2}}],[\"每种图形glsurfaceview\",{\"1\":{\"1540\":1}}],[\"每层都如此\",{\"1\":{\"1175\":1}}],[\"每1秒切换1000多次\",{\"1\":{\"820\":1}}],[\"每天早上10点早会\",{\"1\":{\"595\":1}}],[\"每次由zygote\",{\"1\":{\"1776\":1}}],[\"每次\",{\"1\":{\"1708\":2}}],[\"每次获取公共数据\",{\"1\":{\"1332\":1}}],[\"每次扩容请求其大小的\",{\"1\":{\"339\":1}}],[\"每次扩容时容量都会翻倍\",{\"1\":{\"338\":1}}],[\"每次只使用其中一个区域\",{\"1\":{\"1131\":1}}],[\"每次只使用其中一块\",{\"1\":{\"206\":1}}],[\"每次只做一件事\",{\"1\":{\"12\":1,\"731\":1}}],[\"每放一个元素就将c\",{\"1\":{\"286\":1}}],[\"每个项目都生效\",{\"1\":{\"1952\":1}}],[\"每个消息用message表示\",{\"1\":{\"1850\":1}}],[\"每个进程的binder线程池的线程个数上限为15\",{\"1\":{\"1779\":1}}],[\"每个server进程在启动时会创建一个binder线程池\",{\"1\":{\"1752\":1}}],[\"每个solt存放一个boolean\",{\"1\":{\"1182\":1}}],[\"每个片段的最终颜色应该是什么\",{\"1\":{\"1540\":1}}],[\"每个轻量级线程都有一个内核进程支持\",{\"1\":{\"1225\":1}}],[\"每个方法建立计数器\",{\"1\":{\"1209\":1}}],[\"每个对象都有一个引用计数器\",{\"1\":{\"1124\":1}}],[\"每个线程一个独立分配空间\",{\"1\":{\"1116\":1}}],[\"每个线程都会有一个栈内存\",{\"1\":{\"383\":1}}],[\"每个condition都包含了一个condition队列\",{\"1\":{\"876\":1,\"880\":1}}],[\"每个操作都必须原子执行且立刻对所有线程可见\",{\"1\":{\"860\":1}}],[\"每个模块都应该对外提供公开的api\",{\"1\":{\"805\":1}}],[\"每个这样的部件都是模块化架构邮寄组成单元\",{\"1\":{\"805\":1}}],[\"每个人世界观都会受限于自己的视野\",{\"1\":{\"793\":1}}],[\"每个thread维护着一个threadlocalmap的引用\",{\"1\":{\"381\":1}}],[\"每个thread对象都有一个threadlocalmap\",{\"1\":{\"381\":1}}],[\"每个\",{\"1\":{\"359\":1,\"1708\":1}}],[\"每个分段锁维护着几个桶\",{\"1\":{\"358\":1}}],[\"每个链表存储了\",{\"1\":{\"345\":1}}],[\"每个组件都可以进行持续集成式的开发\",{\"1\":{\"314\":1}}],[\"每个服务都是可部署单元\",{\"1\":{\"314\":1}}],[\"每个桶使用插入排序进行排序\",{\"1\":{\"285\":1}}],[\"每个节点的值都大于或者等于它的左右子节点的值\",{\"1\":{\"283\":1}}],[\"每一次循环称之为round\",{\"1\":{\"1199\":1}}],[\"每一个普通message必须有一个target\",{\"1\":{\"1847\":1}}],[\"每一个自定义组件都有自己的生命周期\",{\"1\":{\"1707\":1}}],[\"每一个页签对应一个内容视图即\",{\"1\":{\"1707\":1}}],[\"每一个轻量级进程都是一个独立调度单元\",{\"1\":{\"1225\":1}}],[\"每一个额外的辅助工具\",{\"1\":{\"799\":1}}],[\"每一个服务就是一个独立的部署单元\",{\"1\":{\"314\":1}}],[\"每一个层次加载器都是如此\",{\"1\":{\"194\":1}}],[\"每一层都可以独立测试\",{\"1\":{\"311\":1}}],[\"每一层都有清晰的角色和分工\",{\"1\":{\"311\":1}}],[\"每一项和前一项相加\",{\"1\":{\"286\":1}}],[\"每一轮分割的数组的个数逐步缩小\",{\"1\":{\"281\":1}}],[\"每一种能力\",{\"1\":{\"12\":1,\"731\":1}}],[\"每\",{\"1\":{\"151\":1}}],[\"后便进入runselectloop\",{\"1\":{\"1869\":1}}],[\"后创建system\",{\"1\":{\"1858\":1}}],[\"后启动system\",{\"1\":{\"1858\":1}}],[\"后退等功能\",{\"1\":{\"1713\":1}}],[\"后\",{\"1\":{\"1712\":1}}],[\"后compiledebugsources\",{\"1\":{\"1607\":1}}],[\"后返回参数\",{\"1\":{\"1530\":1}}],[\"后map\",{\"1\":{\"1521\":1}}],[\"后期兼容性越差\",{\"1\":{\"1481\":1}}],[\"后期考虑用拦截器编写\",{\"1\":{\"1468\":1}}],[\"后期有突发情况导致加班\",{\"1\":{\"598\":1}}],[\"后续再有aop的任务\",{\"1\":{\"1632\":1}}],[\"后续可支持加密\",{\"1\":{\"1622\":1}}],[\"后续优化方向\",{\"1\":{\"1613\":1}}],[\"后续优化\",{\"1\":{\"1465\":1}}],[\"后续还要精简\",{\"1\":{\"12\":1,\"731\":1}}],[\"后有蛋\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"后优化关系\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"后写constraint\",{\"1\":{\"1346\":1}}],[\"后入先出\",{\"1\":{\"1183\":1}}],[\"后继节点\",{\"1\":{\"878\":1}}],[\"后台代理提醒业务分为哪几种类型\",{\"1\":{\"1713\":1}}],[\"后台接入\",{\"1\":{\"1616\":1}}],[\"后台调度及支持性工作的进程\",{\"1\":{\"942\":1}}],[\"后台vue页面代码上传至\",{\"1\":{\"638\":1}}],[\"后台域名配置\",{\"1\":{\"638\":1}}],[\"后端不同的开发语言\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"后端开发积极与民生开发联调\",{\"1\":{\"595\":1}}],[\"后端与民生对接接口开发完毕并提测\",{\"1\":{\"595\":1}}],[\"后端抽调人员\",{\"1\":{\"595\":1}}],[\"后端采用spring\",{\"1\":{\"9\":1,\"728\":1}}],[\"后记\",{\"0\":{\"573\":1}}],[\"后面的\",{\"1\":{\"1709\":1}}],[\"后面的元素都复制到\",{\"1\":{\"333\":1}}],[\"后面其他工程依赖编译的只是这个生成工程\",{\"1\":{\"1491\":1}}],[\"后面包括\",{\"1\":{\"1310\":2}}],[\"后面不包括\",{\"1\":{\"1310\":2}}],[\"后面\",{\"1\":{\"349\":1}}],[\"最详细日志\",{\"1\":{\"1583\":1}}],[\"最简单方式给对方代码看\",{\"1\":{\"1527\":1}}],[\"最简单通用resp响应\",{\"1\":{\"12\":1,\"731\":1}}],[\"最初代码\",{\"1\":{\"1610\":1}}],[\"最初考虑是反射来hook\",{\"1\":{\"1588\":1}}],[\"最初使用沪江的aspectjx\",{\"1\":{\"1561\":1}}],[\"最初背景\",{\"1\":{\"1481\":1}}],[\"最初面向过程\",{\"1\":{\"787\":1}}],[\"最重要一点\",{\"1\":{\"1479\":1}}],[\"最重要的是以下用于维护顺序的函数\",{\"1\":{\"362\":1}}],[\"最近公司的技术有些百花齐放\",{\"1\":{\"1694\":1}}],[\"最近学习孤云大神的ndk项目\",{\"1\":{\"1543\":1}}],[\"最近学习flutter\",{\"1\":{\"1386\":1,\"1669\":1}}],[\"最近去医院听课\",{\"1\":{\"598\":1}}],[\"最短时间停顿收集器\",{\"1\":{\"1144\":1}}],[\"最弱引用\",{\"1\":{\"1126\":1}}],[\"最终readstrongbinder\",{\"1\":{\"1799\":2}}],[\"最终定位到包含classname文件的entry对象\",{\"1\":{\"1064\":1}}],[\"最终汇总每个小任务结果后得到大任务结果的框架\",{\"1\":{\"897\":1}}],[\"最终执行的指令序列\",{\"1\":{\"859\":1}}],[\"最少创建16个局部引用\",{\"1\":{\"1530\":1}}],[\"最少暴露外界接口实现\",{\"1\":{\"754\":1}}],[\"最少知道原则\",{\"1\":{\"799\":1,\"1253\":1,\"1259\":1}}],[\"最少知道\",{\"1\":{\"750\":1}}],[\"最主要的差别是\",{\"1\":{\"358\":1}}],[\"最好的办法是采用公有开发规范\",{\"1\":{\"1500\":1}}],[\"最好的方案是arouter+auto\",{\"1\":{\"1483\":1}}],[\"最好的方式就是一层\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"最好的方法编程final类\",{\"1\":{\"760\":1}}],[\"最好解决方案还是\",{\"1\":{\"1479\":1}}],[\"最好配置是在壳工程中gradle\",{\"1\":{\"1473\":1}}],[\"最好采用mvp\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"最好构建名字\",{\"1\":{\"945\":1}}],[\"最好用接口\",{\"1\":{\"808\":1}}],[\"最好用final类\",{\"1\":{\"808\":1}}],[\"最好方法避免这个方法被覆盖\",{\"1\":{\"760\":1}}],[\"最好使用\",{\"1\":{\"339\":1}}],[\"最好要进行数据持久化\",{\"1\":{\"314\":1}}],[\"最长不含重复字符的子字符串\",{\"1\":{\"298\":1}}],[\"最小访问原则\",{\"1\":{\"799\":1}}],[\"最小化说明接口尽量小\",{\"1\":{\"750\":1}}],[\"最小化\",{\"1\":{\"750\":1}}],[\"最小\",{\"1\":{\"298\":2}}],[\"最小栈\",{\"1\":{\"298\":1}}],[\"最小值\",{\"1\":{\"285\":2}}],[\"最后调用activitythread\",{\"1\":{\"1869\":1}}],[\"最后处理java\",{\"1\":{\"1824\":1}}],[\"最后根据transact执行具体情况\",{\"1\":{\"1756\":1}}],[\"最后文件输出\",{\"1\":{\"1601\":1}}],[\"最后在串行\",{\"1\":{\"923\":1}}],[\"最后的次序就是高优先级高的在前\",{\"1\":{\"287\":1}}],[\"最后把基准值与头指针的数交换\",{\"1\":{\"279\":1}}],[\"最大删除数是当前线程数\",{\"1\":{\"950\":1}}],[\"最大线程数\",{\"1\":{\"950\":1}}],[\"最大子数组和\",{\"1\":{\"298\":1}}],[\"最大值的索引\",{\"1\":{\"283\":1}}],[\"最大空闲时间\",{\"1\":{\"12\":1,\"731\":1}}],[\"上层消息少\",{\"1\":{\"1824\":1}}],[\"上层业务不是必须依赖\",{\"1\":{\"12\":1,\"731\":1}}],[\"上报业务状态\",{\"1\":{\"1702\":1}}],[\"上的应用通过调用分布式任务调度的能力\",{\"1\":{\"1702\":1}}],[\"上手成本低\",{\"1\":{\"1518\":1}}],[\"上\",{\"1\":{\"1486\":1,\"1491\":1}}],[\"上标\",{\"1\":{\"1310\":1}}],[\"上移函数到父类\",{\"1\":{\"1286\":1}}],[\"上锁\",{\"1\":{\"879\":1}}],[\"上下文释放\",{\"1\":{\"1851\":1}}],[\"上下文\",{\"1\":{\"820\":1}}],[\"上下文切换\",{\"0\":{\"818\":1}}],[\"上下一心\",{\"1\":{\"595\":1}}],[\"上图的意思就是node类包含类型为node的成员变量\",{\"1\":{\"738\":1}}],[\"上图表示每个顾客都有一个地址\",{\"1\":{\"738\":1}}],[\"上图中在customer类中维护一个product\",{\"1\":{\"738\":1}}],[\"上图中\",{\"1\":{\"735\":1}}],[\"上线前必须uat\",{\"1\":{\"595\":1}}],[\"上线前1周准备配置参数\",{\"1\":{\"595\":1}}],[\"上线前2周要申请rsa证书\",{\"1\":{\"595\":1}}],[\"上一频道\",{\"1\":{\"507\":1}}],[\"上一个数的指针\",{\"1\":{\"280\":1}}],[\"上铺\",{\"1\":{\"441\":1}}],[\"上云+公共服务\",{\"1\":{\"305\":1}}],[\"上传hexo源码至仓库\",{\"0\":{\"1961\":1}}],[\"上传标签\",{\"1\":{\"1949\":1}}],[\"上传lib库\",{\"1\":{\"1911\":1}}],[\"上传aar库\",{\"1\":{\"1966\":1}}],[\"上传aar\",{\"1\":{\"1908\":1}}],[\"上传apk路径\",{\"1\":{\"1335\":1}}],[\"上传apk\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"上传代码需要vpn支持\",{\"1\":{\"1905\":1}}],[\"上传发布软件包时\",{\"1\":{\"1712\":1}}],[\"上传鸿蒙应用或元服务软件包时\",{\"1\":{\"1708\":1}}],[\"上传蒲公英\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"上传文件\",{\"1\":{\"644\":1}}],[\"上传仓库\",{\"1\":{\"608\":1}}],[\"上传成功\",{\"1\":{\"103\":1}}],[\"上传进度98\",{\"1\":{\"103\":1}}],[\"上传进度96\",{\"1\":{\"103\":1}}],[\"上传进度94\",{\"1\":{\"103\":1}}],[\"上传进度92\",{\"1\":{\"103\":1}}],[\"上传进度90\",{\"1\":{\"103\":1}}],[\"上传进度78\",{\"1\":{\"103\":1}}],[\"上传进度76\",{\"1\":{\"103\":1}}],[\"上传进度74\",{\"1\":{\"103\":1}}],[\"上传进度72\",{\"1\":{\"103\":1}}],[\"上传进度70\",{\"1\":{\"103\":1}}],[\"上传进度58\",{\"1\":{\"103\":1}}],[\"上传进度56\",{\"1\":{\"103\":1}}],[\"上传进度54\",{\"1\":{\"103\":1}}],[\"上传进度52\",{\"1\":{\"103\":1}}],[\"上传进度50\",{\"1\":{\"103\":2}}],[\"上传进度38\",{\"1\":{\"103\":1}}],[\"上传进度36\",{\"1\":{\"103\":1}}],[\"上传进度34\",{\"1\":{\"103\":1}}],[\"上传进度32\",{\"1\":{\"103\":1}}],[\"上传进度30\",{\"1\":{\"103\":1}}],[\"上传进度18\",{\"1\":{\"103\":1}}],[\"上传进度16\",{\"1\":{\"103\":1}}],[\"上传进度14\",{\"1\":{\"103\":1}}],[\"上传进度12\",{\"1\":{\"103\":1}}],[\"上传进度100\",{\"1\":{\"103\":2}}],[\"上传进度10\",{\"1\":{\"103\":2}}],[\"上传进度88\",{\"1\":{\"103\":1}}],[\"上传进度86\",{\"1\":{\"103\":1}}],[\"上传进度84\",{\"1\":{\"103\":1}}],[\"上传进度82\",{\"1\":{\"103\":1}}],[\"上传进度80\",{\"1\":{\"103\":1}}],[\"上传进度8\",{\"1\":{\"103\":1}}],[\"上传进度68\",{\"1\":{\"103\":1}}],[\"上传进度66\",{\"1\":{\"103\":1}}],[\"上传进度64\",{\"1\":{\"103\":1}}],[\"上传进度62\",{\"1\":{\"103\":1}}],[\"上传进度60\",{\"1\":{\"103\":1}}],[\"上传进度6\",{\"1\":{\"103\":1}}],[\"上传进度48\",{\"1\":{\"103\":1}}],[\"上传进度46\",{\"1\":{\"103\":1}}],[\"上传进度44\",{\"1\":{\"103\":1}}],[\"上传进度42\",{\"1\":{\"103\":1}}],[\"上传进度40\",{\"1\":{\"103\":1}}],[\"上传进度4\",{\"1\":{\"103\":1}}],[\"上传进度28\",{\"1\":{\"103\":1}}],[\"上传进度26\",{\"1\":{\"103\":1}}],[\"上传进度24\",{\"1\":{\"103\":1}}],[\"上传进度22\",{\"1\":{\"103\":1}}],[\"上传进度20\",{\"1\":{\"103\":1}}],[\"上传进度2\",{\"1\":{\"103\":1}}],[\"上传进度0\",{\"1\":{\"103\":1}}],[\"上百种工具覆盖90\",{\"1\":{\"12\":1,\"731\":1}}],[\"单选题\",{\"0\":{\"1712\":1}}],[\"单元\",{\"1\":{\"1709\":1}}],[\"单元测试\",{\"1\":{\"1564\":1}}],[\"单表达式用法\",{\"1\":{\"1518\":1}}],[\"单个控件\",{\"1\":{\"1364\":1}}],[\"单个线程池\",{\"1\":{\"247\":1,\"828\":1}}],[\"单个线程\",{\"1\":{\"247\":1,\"828\":1}}],[\"单分派和多分派\",{\"1\":{\"1188\":1}}],[\"单线程尝试进入\",{\"1\":{\"1247\":1}}],[\"单线程收集器\",{\"1\":{\"1142\":1}}],[\"单线程多任务调度\",{\"1\":{\"821\":1}}],[\"单cpu场景下\",{\"1\":{\"1139\":1}}],[\"单位纳秒\",{\"1\":{\"946\":1}}],[\"单位毫秒\",{\"1\":{\"946\":1}}],[\"单身开发是借口导致\",{\"1\":{\"750\":1}}],[\"单一职责原则\",{\"0\":{\"751\":1},\"1\":{\"1253\":1}}],[\"单一职责\",{\"1\":{\"750\":2,\"1253\":1,\"1259\":1,\"1265\":1,\"1286\":2,\"1309\":1,\"1476\":2}}],[\"单向关联\",{\"1\":{\"738\":1}}],[\"单向的关联有一个箭头\",{\"1\":{\"735\":1}}],[\"单例类\",{\"1\":{\"1521\":1}}],[\"单例\",{\"1\":{\"405\":1,\"1283\":1}}],[\"单例6种写法\",{\"0\":{\"403\":1}}],[\"单例模式\",{\"0\":{\"401\":1},\"1\":{\"256\":1,\"257\":1,\"393\":1,\"402\":1}}],[\"单独实现\",{\"1\":{\"1824\":1}}],[\"单独调试和集成发布功能属于通用功能\",{\"1\":{\"1476\":1}}],[\"单独调试\",{\"1\":{\"1473\":1}}],[\"单独调试与集成发布需求拆解\",{\"0\":{\"1473\":1}}],[\"单独处理\",{\"1\":{\"350\":1}}],[\"单独一个模块提供了很多很全\",{\"1\":{\"12\":1,\"731\":1}}],[\"单主集群\",{\"1\":{\"12\":1,\"731\":1}}],[\"有效至\",{\"1\":{\"1928\":1}}],[\"有两个分支\",{\"1\":{\"1860\":1}}],[\"有两种写法\",{\"1\":{\"1595\":1}}],[\"有参数构造\",{\"1\":{\"1840\":1}}],[\"有返回值\",{\"1\":{\"1518\":1}}],[\"有利于开发者用户快速集成\",{\"1\":{\"1488\":1}}],[\"有网络\",{\"1\":{\"1395\":1,\"1678\":1}}],[\"有个函数返回集合\",{\"1\":{\"1283\":1}}],[\"有一个函数\",{\"1\":{\"1274\":1}}],[\"有些函数\",{\"1\":{\"1262\":1}}],[\"有对应函数引用\",{\"1\":{\"1530\":1}}],[\"有对应的工具类\",{\"1\":{\"12\":1,\"731\":1}}],[\"有对象换存池\",{\"1\":{\"1203\":1}}],[\"有必要执行finalize方法\",{\"1\":{\"1127\":1}}],[\"有双引号\",{\"1\":{\"629\":1}}],[\"有结构\",{\"1\":{\"586\":1}}],[\"有其缺陷\",{\"1\":{\"343\":1}}],[\"有的软件在逻辑层和持久层之间\",{\"1\":{\"311\":1}}],[\"有重复数字的全排列\",{\"1\":{\"298\":1}}],[\"有时候有些属性是有优先级顺序的\",{\"1\":{\"287\":1}}],[\"有数据存储和运算功能\",{\"1\":{\"271\":1,\"1086\":1}}],[\"有序公共事件中\",{\"1\":{\"1702\":3}}],[\"有序性是指线程按照代码的顺序执行\",{\"1\":{\"1223\":1}}],[\"有序性\",{\"1\":{\"839\":1,\"1223\":1}}],[\"有序数组中出现次数超过\",{\"1\":{\"298\":2}}],[\"有序\",{\"1\":{\"212\":1}}],[\"有序增长\",{\"1\":{\"12\":1,\"731\":1}}],[\"全局\",{\"1\":{\"1952\":1}}],[\"全局引用是否相同\",{\"1\":{\"1530\":1}}],[\"全局引用可以用static保存\",{\"1\":{\"1530\":1}}],[\"全局引用可以跨方法\",{\"1\":{\"1530\":1}}],[\"全局引用和局部引用一样\",{\"1\":{\"1530\":1}}],[\"全局引用\",{\"1\":{\"1527\":1,\"1530\":1}}],[\"全部这样搞定\",{\"1\":{\"1598\":1}}],[\"全部通过\",{\"1\":{\"1416\":1}}],[\"全面理解gradle\",{\"1\":{\"1574\":2}}],[\"全称是\",{\"1\":{\"1530\":1}}],[\"全限定\",{\"1\":{\"1109\":3}}],[\"全解析\",{\"1\":{\"935\":1}}],[\"全排列\",{\"1\":{\"298\":2}}],[\"全球极客挚爱的技术成长平台\",{\"1\":{\"298\":25}}],[\"全方位监控报警\",{\"1\":{\"12\":1,\"731\":1}}],[\"全新\",{\"1\":{\"12\":1,\"731\":1}}],[\"探针机制实时监控服务状态\",{\"1\":{\"12\":1,\"731\":1}}],[\"的情况\",{\"1\":{\"1780\":1}}],[\"的生死情况\",{\"1\":{\"1761\":1}}],[\"的生命周期包括哪些函数\",{\"1\":{\"1709\":1}}],[\"的生命周期回调函数\",{\"1\":{\"1709\":1}}],[\"的服务\",{\"1\":{\"1731\":1,\"1756\":1,\"1799\":1}}],[\"的服务到service\",{\"1\":{\"1725\":1}}],[\"的binder接口\",{\"1\":{\"1726\":1}}],[\"的bnmyservice服务添加到servicemanager\",{\"1\":{\"1725\":1}}],[\"的是\",{\"1\":{\"1713\":1}}],[\"的值为\",{\"1\":{\"1712\":1}}],[\"的结构\",{\"1\":{\"1709\":1}}],[\"的相关配置信息\",{\"1\":{\"1709\":1}}],[\"的配置信息\",{\"1\":{\"1709\":1}}],[\"的子组件在交叉轴方向上的对齐方式使用\",{\"1\":{\"1708\":1}}],[\"的最大长度限制大小为\",{\"1\":{\"1708\":1}}],[\"的启动模式有哪些\",{\"1\":{\"1709\":1}}],[\"的启动模式\",{\"1\":{\"1708\":2}}],[\"的方舟开发框架包含基于\",{\"1\":{\"1702\":1}}],[\"的方法\",{\"1\":{\"1527\":1}}],[\"的应用发起多端协同\",{\"1\":{\"1702\":1}}],[\"的应用程序中找到idea的图标\",{\"1\":{\"67\":1}}],[\"的信息\",{\"1\":{\"1702\":1}}],[\"的哪一项流转方案\",{\"1\":{\"1702\":1}}],[\"的分布式软总线连接能力\",{\"1\":{\"1702\":3}}],[\"的碰一碰\",{\"1\":{\"1702\":3}}],[\"的范围内\",{\"1\":{\"1540\":1}}],[\"的平方\",{\"1\":{\"1534\":1}}],[\"的全称是\",{\"1\":{\"1530\":1}}],[\"的操作\",{\"1\":{\"1527\":1}}],[\"的操作数栈中弹出制定个数个参数\",{\"1\":{\"993\":1}}],[\"的博客https\",{\"1\":{\"1453\":1}}],[\"的集成与使用\",{\"1\":{\"1432\":2}}],[\"的集合\",{\"1\":{\"1198\":1}}],[\"的缩写\",{\"1\":{\"1326\":1}}],[\"的代码\",{\"1\":{\"1286\":1}}],[\"的函数身上\",{\"1\":{\"1283\":1}}],[\"的作用\",{\"1\":{\"1277\":1}}],[\"的父类\",{\"1\":{\"1109\":2}}],[\"的各个属性\",{\"1\":{\"1081\":1}}],[\"的屏障\",{\"1\":{\"905\":1}}],[\"的参数有哪些\",{\"1\":{\"1713\":1}}],[\"的参数\",{\"1\":{\"738\":1}}],[\"的参数为泛型的变长参数\",{\"1\":{\"328\":1}}],[\"的详细步骤\",{\"1\":{\"635\":1}}],[\"的记录后\",{\"1\":{\"385\":1}}],[\"的记录\",{\"1\":{\"385\":1}}],[\"的弱引用\",{\"1\":{\"385\":1}}],[\"的实体类\",{\"1\":{\"1592\":1}}],[\"的实例\",{\"1\":{\"384\":1}}],[\"的实现也在链表过长时会转换为红黑树\",{\"1\":{\"360\":1}}],[\"的大小超过了\",{\"1\":{\"368\":1}}],[\"的缓存中特别有用\",{\"1\":{\"364\":1}}],[\"的时候\",{\"1\":{\"1518\":1}}],[\"的时候才为\",{\"1\":{\"364\":1}}],[\"的时候会去反射调用该对象的\",{\"1\":{\"334\":1}}],[\"的改动\",{\"0\":{\"360\":1}}],[\"的迭代器是\",{\"1\":{\"356\":1}}],[\"的所有键值对重新插入\",{\"1\":{\"352\":1}}],[\"的临界值\",{\"1\":{\"352\":1}}],[\"的容量大小\",{\"1\":{\"352\":1}}],[\"的键值对\",{\"1\":{\"350\":3}}],[\"的区别可以归结为数组和链表的区别\",{\"1\":{\"346\":1}}],[\"的比较\",{\"0\":{\"339\":1,\"346\":1,\"356\":1}}],[\"的比例分为一个\",{\"1\":{\"207\":1}}],[\"的构造函数将\",{\"1\":{\"365\":1}}],[\"的构造函数时\",{\"1\":{\"338\":1}}],[\"的构造函数可以传入\",{\"1\":{\"338\":1}}],[\"的\",{\"1\":{\"334\":2,\"349\":3,\"350\":1,\"351\":3,\"352\":2,\"353\":1,\"354\":3,\"356\":1,\"367\":1,\"385\":2,\"441\":1,\"994\":1,\"1335\":1,\"1702\":2}}],[\"的效率会更高\",{\"1\":{\"325\":1}}],[\"的查找效率\",{\"1\":{\"322\":1}}],[\"的映射表\",{\"1\":{\"320\":1}}],[\"的升级\",{\"1\":{\"314\":1}}],[\"的个数\",{\"1\":{\"298\":2,\"358\":1}}],[\"的元素\",{\"1\":{\"298\":2}}],[\"的层次结构\",{\"1\":{\"257\":1,\"394\":1,\"464\":1}}],[\"的存活对象时\",{\"1\":{\"207\":1}}],[\"的一个抽象概念\",{\"1\":{\"151\":1}}],[\"的写入何时对另一个线程可见\",{\"1\":{\"151\":1}}],[\"的内存空间重新分配做好准备时\",{\"1\":{\"145\":1}}],[\"的命令\",{\"1\":{\"112\":1}}],[\"的开发量\",{\"1\":{\"12\":1,\"731\":1}}],[\"的使用需求\",{\"1\":{\"12\":1,\"731\":1}}],[\"的高性能容器\",{\"1\":{\"12\":2,\"731\":2}}],[\"自由流转\",{\"1\":{\"1709\":1}}],[\"自带getter\",{\"1\":{\"1518\":1}}],[\"自封装字段\",{\"1\":{\"1283\":1}}],[\"自适应自旋\",{\"1\":{\"1242\":1}}],[\"自旋时间是由上一次状态决定\",{\"1\":{\"1242\":1}}],[\"自旋\",{\"1\":{\"1242\":1}}],[\"自旋锁与自适应自旋锁\",{\"0\":{\"1242\":1}}],[\"自旋检查同步状态\",{\"1\":{\"879\":1}}],[\"自己练习题\",{\"1\":{\"1509\":1}}],[\"自己手动编写轮子thor\",{\"1\":{\"1483\":1}}],[\"自己手动写java虚拟机源码\",{\"1\":{\"1069\":1}}],[\"自己中断挂起\",{\"1\":{\"1136\":1}}],[\"自己包含自己\",{\"1\":{\"738\":1}}],[\"自定义sayhello\",{\"1\":{\"1732\":1}}],[\"自定义serviceloader\",{\"1\":{\"1481\":1}}],[\"自定义的sayhello\",{\"1\":{\"1731\":1}}],[\"自定义的myservice服务\",{\"1\":{\"1724\":1}}],[\"自定义的myservice服务的头文件\",{\"1\":{\"1724\":1}}],[\"自定义组件\",{\"1\":{\"1709\":1}}],[\"自定义组件的组件化特点有哪些\",{\"1\":{\"1709\":1}}],[\"自定义组件的\",{\"1\":{\"1708\":1}}],[\"自定义\",{\"1\":{\"1699\":1}}],[\"自定义脚部\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"自定义头部\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"自定义类加载器\",{\"1\":{\"1175\":1}}],[\"自定义同步器\",{\"1\":{\"876\":1}}],[\"自定义规则分析组件质量\",{\"1\":{\"305\":1}}],[\"自相矛盾的定义\",{\"1\":{\"772\":1}}],[\"自关联\",{\"1\":{\"738\":1}}],[\"自下而上\",{\"1\":{\"589\":1}}],[\"自主\",{\"1\":{\"589\":1}}],[\"自我状态改变\",{\"1\":{\"507\":1}}],[\"自我意识障碍\",{\"1\":{\"230\":1}}],[\"自身问题\",{\"1\":{\"227\":1}}],[\"自动跳转到应用市场或者进入应用市场搜索待体验的元服务名称\",{\"1\":{\"1708\":1}}],[\"自动输出代码\",{\"1\":{\"1601\":1}}],[\"自动触发一遍该类的缓存的事件\",{\"1\":{\"1546\":1}}],[\"自动写入缓存\",{\"1\":{\"1540\":1}}],[\"自动数据类型转换\",{\"1\":{\"1512\":1}}],[\"自动生成\",{\"1\":{\"1739\":1}}],[\"自动生成一个sdk工程\",{\"1\":{\"1491\":1}}],[\"自动生成代码\",{\"1\":{\"1368\":1,\"1604\":1}}],[\"自动添加约束\",{\"0\":{\"1345\":1}}],[\"自动装箱使用valueof\",{\"1\":{\"1203\":2}}],[\"自动装箱\",{\"1\":{\"1203\":2}}],[\"自动装箱与拆箱\",{\"0\":{\"1203\":1}}],[\"自动化构建\",{\"1\":{\"305\":1}}],[\"自动化构建流程\",{\"1\":{\"305\":1}}],[\"自动排列布局\",{\"1\":{\"12\":1,\"731\":1}}],[\"自动合并相同内容\",{\"1\":{\"12\":1,\"731\":1}}],[\"自行分析拼接sql\",{\"1\":{\"12\":1,\"731\":1}}],[\"校验框架\",{\"1\":{\"12\":1,\"731\":1}}],[\"无操作\",{\"1\":{\"1789\":1}}],[\"无需自己搭建服务器\",{\"1\":{\"1707\":1}}],[\"无需再写一大堆的文档注解了\",{\"1\":{\"12\":1,\"731\":1}}],[\"无学习成本\",{\"1\":{\"1636\":1,\"1637\":1}}],[\"无入侵式mock框架\",{\"0\":{\"1586\":1,\"1592\":1,\"1595\":1}}],[\"无入侵式配置各种服务\",{\"1\":{\"1479\":1}}],[\"无痕埋点\",{\"1\":{\"1561\":1}}],[\"无构造函数\",{\"1\":{\"1521\":1}}],[\"无返回值\",{\"1\":{\"1518\":1}}],[\"无感知式的\",{\"1\":{\"1500\":1}}],[\"无感式过滤只需为mapper设置好注解条件\",{\"1\":{\"12\":1,\"731\":1}}],[\"无论spi还是arouter\",{\"1\":{\"1479\":1}}],[\"无代码示例\",{\"1\":{\"1479\":1}}],[\"无版权字体\",{\"1\":{\"1446\":1}}],[\"无版权字体被查\",{\"1\":{\"1446\":1}}],[\"无手机外观\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"无通知栏\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"无ios截图\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"无底色\",{\"1\":{\"1338\":1}}],[\"无重复代码\",{\"1\":{\"1253\":2,\"1286\":1}}],[\"无重复字符的最长子串\",{\"1\":{\"298\":1}}],[\"无同步方案\",{\"0\":{\"1240\":1}}],[\"无额外同步措施\",{\"1\":{\"1233\":1}}],[\"无限期等待\",{\"1\":{\"1230\":1}}],[\"无用代码消除\",{\"1\":{\"1210\":1,\"1211\":1}}],[\"无用类判断标准\",{\"1\":{\"1128\":1}}],[\"无写锁被获取\",{\"1\":{\"886\":1}}],[\"无锁状态\",{\"1\":{\"845\":1}}],[\"无锁并发编程\",{\"1\":{\"821\":1}}],[\"无绪即是起点\",{\"1\":{\"790\":1}}],[\"无绪\",{\"1\":{\"787\":1}}],[\"无密码直接回车\",{\"0\":{\"695\":1}}],[\"无序\",{\"1\":{\"212\":1}}],[\"无须等待要求指定maxtenuringthreshold年龄\",{\"1\":{\"184\":1}}],[\"无差错\",{\"1\":{\"181\":1}}],[\"无法分配足够内存\",{\"1\":{\"1790\":1}}],[\"无法获取service\",{\"1\":{\"1788\":1}}],[\"无法获取sehandle\",{\"1\":{\"1788\":1}}],[\"无法获得\",{\"1\":{\"649\":1}}],[\"无法保证符合逻辑\",{\"1\":{\"1200\":1}}],[\"无法清晰表达给别人听\",{\"1\":{\"757\":1}}],[\"无法读取\",{\"1\":{\"649\":1}}],[\"无法读取png签名\",{\"1\":{\"76\":1}}],[\"无法自动多渠道打包\",{\"1\":{\"103\":1}}],[\"无注解零入侵基于java注释只需把注释写好\",{\"1\":{\"12\":1,\"731\":1}}],[\"邮件\",{\"1\":{\"12\":1,\"731\":1}}],[\"邮箱\",{\"1\":{\"12\":1,\"731\":1}}],[\"短信\",{\"1\":{\"12\":1,\"731\":1}}],[\"等价于\",{\"1\":{\"1804\":1}}],[\"等目标进程或线程不断循环地从todo队列中取出数据并进行相应的操作\",{\"1\":{\"1753\":1}}],[\"等常用的请求方式\",{\"1\":{\"1713\":1}}],[\"等\",{\"1\":{\"1709\":3}}],[\"等于\",{\"1\":{\"1518\":1}}],[\"等待ams消息\",{\"1\":{\"1862\":1}}],[\"等待事件发生\",{\"1\":{\"1857\":1}}],[\"等待事件发生或者超时\",{\"1\":{\"1828\":1}}],[\"等待时长\",{\"1\":{\"1846\":1}}],[\"等待时间最长的线程先获得锁\",{\"1\":{\"881\":1}}],[\"等待与驱动通信\",{\"1\":{\"1798\":1}}],[\"等待线程可以选择放弃等待\",{\"1\":{\"1238\":1}}],[\"等待可中断\",{\"1\":{\"1238\":1}}],[\"等待一个锁资源\",{\"1\":{\"1230\":1}}],[\"等待被显式唤起\",{\"1\":{\"1230\":1}}],[\"等待目标程序完成后再继续执行\",{\"1\":{\"944\":1}}],[\"等待状态\",{\"1\":{\"943\":1}}],[\"等待其他线程完成\",{\"1\":{\"904\":1}}],[\"等待多线程完成\",{\"0\":{\"904\":1}}],[\"等待子任务执行完\",{\"1\":{\"897\":1}}],[\"等待队列后继节点\",{\"1\":{\"878\":1}}],[\"等待返回\",{\"1\":{\"870\":1}}],[\"等待\",{\"0\":{\"948\":1},\"1\":{\"870\":1,\"878\":1,\"889\":1,\"890\":1}}],[\"等操作之后执行\",{\"1\":{\"364\":1}}],[\"等方法中调用\",{\"1\":{\"362\":1}}],[\"等简化框架大量代码\",{\"1\":{\"12\":1,\"731\":1}}],[\"等一切支持s3协议的厂家\",{\"1\":{\"12\":1,\"731\":1}}],[\"等复杂表达式\",{\"1\":{\"12\":1,\"731\":1}}],[\"腾讯日志框架\",{\"1\":{\"1616\":1}}],[\"腾讯云\",{\"1\":{\"1616\":1}}],[\"腾讯方案介绍\",{\"1\":{\"1317\":1}}],[\"腾讯\",{\"1\":{\"12\":2,\"731\":2,\"1479\":1}}],[\"klass\",{\"1\":{\"1840\":6}}],[\"kzalloc\",{\"1\":{\"1770\":2}}],[\"kun\",{\"1\":{\"1518\":1}}],[\"kk\",{\"1\":{\"1518\":1}}],[\"kotlin非空延时赋值\",{\"0\":{\"1524\":1}}],[\"kotlin接口\",{\"1\":{\"1521\":1}}],[\"kotlin调用\",{\"1\":{\"1521\":1}}],[\"kotlin遍历几种写法\",{\"1\":{\"1521\":1}}],[\"kotlin哲学\",{\"1\":{\"1521\":1}}],[\"kotlin重新复习\",{\"0\":{\"1521\":1}}],[\"kotlinlang\",{\"1\":{\"1518\":1}}],[\"kotlin模拟运行器\",{\"1\":{\"1518\":1}}],[\"kotlin经典用法\",{\"0\":{\"1518\":1}}],[\"kotlincn\",{\"1\":{\"1515\":1}}],[\"kotlin中文网\",{\"1\":{\"1515\":1}}],[\"kotlin中文文档\",{\"0\":{\"1509\":1}}],[\"kotlin相关资料\",{\"0\":{\"1515\":1}}],[\"kotlin新出\",{\"1\":{\"1512\":1}}],[\"kotlin定位\",{\"0\":{\"1512\":1},\"1\":{\"1512\":1}}],[\"kotlinexample\",{\"1\":{\"1509\":1}}],[\"kotlin\",{\"0\":{\"1506\":1,\"1995\":1},\"1\":{\"1506\":1,\"1509\":1,\"1515\":2,\"1518\":1},\"2\":{\"1507\":1,\"1510\":1,\"1513\":1,\"1516\":1,\"1519\":1,\"1522\":1,\"1525\":1}}],[\"kotlin四种实现\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"kaɪvz\",{\"1\":{\"1966\":1}}],[\"kakakakak\",{\"1\":{\"1307\":1}}],[\"kakak\",{\"1\":{\"1305\":1,\"1307\":1}}],[\"kafka\",{\"1\":{\"12\":1,\"731\":1}}],[\"kmpeikhprzyqag\",{\"1\":{\"1049\":1}}],[\"know\",{\"1\":{\"631\":1}}],[\"kpi=\",{\"1\":{\"531\":2}}],[\"kpi\",{\"1\":{\"531\":10}}],[\"k3\",{\"1\":{\"349\":2}}],[\"k2\",{\"1\":{\"348\":3,\"349\":2}}],[\"k1\",{\"1\":{\"348\":4,\"349\":2}}],[\"k++\",{\"1\":{\"285\":1}}],[\"k\",{\"1\":{\"285\":1,\"298\":6,\"348\":5,\"350\":9,\"351\":4,\"352\":1,\"358\":1,\"364\":1,\"368\":8,\"381\":3}}],[\"kingja\",{\"1\":{\"1647\":1}}],[\"kind\",{\"0\":{\"28\":1},\"1\":{\"28\":1,\"531\":24,\"1648\":1}}],[\"kiwifruit\",{\"1\":{\"1518\":4}}],[\"kirin980\",{\"1\":{\"1298\":1}}],[\"kit\",{\"1\":{\"811\":1,\"1530\":1}}],[\"killprocess\",{\"1\":{\"1736\":1}}],[\"killremoteservice\",{\"1\":{\"1736\":3}}],[\"killed\",{\"1\":{\"711\":1,\"715\":1}}],[\"kill\",{\"1\":{\"58\":1,\"118\":1,\"711\":3,\"715\":2,\"1736\":1,\"1963\":2}}],[\"kernel\",{\"1\":{\"1746\":3,\"1770\":2,\"1781\":1,\"1791\":1}}],[\"keygen\",{\"1\":{\"1921\":1,\"1943\":1}}],[\"key=$\",{\"1\":{\"1323\":1,\"1335\":2,\"1459\":1}}],[\"key=\",{\"1\":{\"1323\":3,\"1335\":1,\"1459\":3}}],[\"key=全限定类名\",{\"1\":{\"978\":1}}],[\"key\",{\"0\":{\"1920\":1,\"1921\":1},\"1\":{\"268\":2,\"348\":3,\"350\":16,\"351\":3,\"352\":2,\"353\":1,\"358\":1,\"364\":4,\"381\":3,\"385\":5,\"405\":5,\"441\":6,\"615\":3,\"631\":2,\"638\":2,\"667\":4,\"885\":4,\"1022\":4,\"1292\":2,\"1317\":1,\"1323\":3,\"1332\":8,\"1335\":3,\"1383\":4,\"1402\":116,\"1459\":3,\"1518\":4,\"1604\":2,\"1625\":4,\"1666\":4,\"1685\":116,\"1707\":2,\"1708\":1,\"1713\":2,\"1928\":2}}],[\"keys\",{\"1\":{\"667\":1,\"1298\":2}}],[\"keyset\",{\"1\":{\"365\":1}}],[\"keystore\",{\"1\":{\"106\":2}}],[\"keys被转换为scan支持单机\",{\"1\":{\"12\":1,\"731\":1}}],[\"keytool\",{\"1\":{\"106\":1}}],[\"keep即可\",{\"1\":{\"1361\":1}}],[\"keepclasseswithmembers\",{\"1\":{\"1361\":3}}],[\"keep注解\",{\"1\":{\"1361\":1}}],[\"keep混淆\",{\"0\":{\"1361\":1}}],[\"keepsafe\",{\"1\":{\"1317\":1}}],[\"keeproot\",{\"1\":{\"1292\":1}}],[\"keepalivetime\",{\"1\":{\"246\":2,\"914\":1}}],[\"keep\",{\"0\":{\"37\":1},\"1\":{\"651\":2,\"1292\":1,\"1358\":1,\"1361\":9,\"1595\":2,\"1846\":3}}],[\"业界成熟解决方案\",{\"1\":{\"12\":1,\"731\":1}}],[\"业务组件化\",{\"1\":{\"1500\":1}}],[\"业务组件配置化\",{\"1\":{\"305\":1}}],[\"业务xxx\",{\"1\":{\"887\":2}}],[\"业务处理能力封装成一个个处理单元\",{\"1\":{\"314\":1}}],[\"业务层\",{\"1\":{\"311\":1,\"1767\":1}}],[\"业务开发变轻\",{\"1\":{\"305\":1}}],[\"业务开发的本质是交付服务和功能\",{\"1\":{\"305\":1}}],[\"业务配置化\",{\"1\":{\"305\":1}}],[\"业务模型\",{\"1\":{\"12\":1,\"731\":1}}],[\"业务能力依赖\",{\"1\":{\"12\":1,\"731\":1}}],[\"业务api依赖\",{\"1\":{\"12\":1,\"731\":1}}],[\"靠谱\",{\"1\":{\"12\":1,\"731\":1}}],[\"不包括subdir\",{\"1\":{\"1952\":1}}],[\"不断循环执行\",{\"1\":{\"1837\":1}}],[\"不断读取管道数据\",{\"1\":{\"1828\":1}}],[\"不断地binder读写过程\",{\"1\":{\"1789\":1}}],[\"不断进行talkwithdriver\",{\"1\":{\"1777\":1}}],[\"不断变化的目标\",{\"0\":{\"796\":1}}],[\"不支持一个\",{\"1\":{\"1709\":1}}],[\"不支持多个上传交互\",{\"1\":{\"644\":1}}],[\"不变的放在常量类中\",{\"1\":{\"1601\":1}}],[\"不变量\",{\"1\":{\"1521\":1}}],[\"不常用的\",{\"1\":{\"1567\":1}}],[\"不常用的对象放入\",{\"1\":{\"368\":1}}],[\"不如阐述渐进的思路\",{\"1\":{\"1610\":1}}],[\"不如代码来的直接\",{\"1\":{\"1543\":1}}],[\"不如使用arouter\",{\"1\":{\"1479\":1}}],[\"不建议采用\",{\"1\":{\"1518\":1}}],[\"不使用位运算\",{\"1\":{\"1518\":1}}],[\"不使用的对象应手动赋值为null\",{\"1\":{\"1182\":1}}],[\"不破坏原有结构\",{\"1\":{\"1500\":1}}],[\"不错的扩展性\",{\"1\":{\"1481\":1}}],[\"不许被引用\",{\"1\":{\"1474\":1}}],[\"不一致性体验\",{\"1\":{\"1446\":1}}],[\"不一定执行\",{\"1\":{\"868\":1}}],[\"不一定\",{\"1\":{\"819\":1}}],[\"不一定等\",{\"1\":{\"207\":1}}],[\"不显示webview缩放按钮\",{\"1\":{\"1416\":1}}],[\"不考虑原理\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"不考虑新语言音速\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"不准确\",{\"1\":{\"1377\":1}}],[\"不透明度\",{\"0\":{\"1367\":1},\"1\":{\"1367\":2,\"1368\":1}}],[\"不推荐\",{\"0\":{\"1345\":1}}],[\"不得使用其他品牌手机作为边框或宣传图\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"不止是构建\",{\"1\":{\"1274\":1}}],[\"不必完美\",{\"1\":{\"1256\":1,\"1286\":1}}],[\"不在有任何同步操作\",{\"1\":{\"1247\":1}}],[\"不在改变\",{\"1\":{\"929\":1}}],[\"不放弃处理器执行时间\",{\"1\":{\"1242\":1}}],[\"不直接处理\",{\"1\":{\"1283\":1}}],[\"不直接使用\",{\"1\":{\"1225\":1}}],[\"不直接操作线程\",{\"1\":{\"1136\":1}}],[\"不开启性能监控profiling\",{\"1\":{\"1207\":1}}],[\"不只是子类级别\",{\"1\":{\"1109\":1}}],[\"不做错误输入的处理\",{\"1\":{\"1063\":1}}],[\"不是前面各自独立的技术\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"不是\",{\"1\":{\"1109\":1}}],[\"不是静态变量\",{\"1\":{\"984\":1}}],[\"不是插在\",{\"1\":{\"349\":1}}],[\"不损坏对象\",{\"1\":{\"954\":1}}],[\"不改变软件可观察行为的前提下\",{\"1\":{\"1253\":1}}],[\"不改变句柄\",{\"1\":{\"1118\":1}}],[\"不改变模式\",{\"1\":{\"929\":1}}],[\"不改变程序执行结果的前提下\",{\"1\":{\"859\":1}}],[\"不成功则重试\",{\"1\":{\"895\":1}}],[\"不因一时找不到合适位置\",{\"1\":{\"808\":1}}],[\"不容许代理\",{\"1\":{\"808\":1}}],[\"不容许继承\",{\"1\":{\"808\":1}}],[\"不容许出现出现循环依赖\",{\"1\":{\"805\":1}}],[\"不容易做成分布式\",{\"1\":{\"313\":1}}],[\"不容易做持续发布\",{\"1\":{\"311\":1}}],[\"不符合面向接口编程原则\",{\"1\":{\"802\":1}}],[\"不关注它的原理\",{\"1\":{\"787\":1}}],[\"不要与其他组件化插件功能耦合\",{\"1\":{\"1476\":1}}],[\"不要差异\",{\"1\":{\"1445\":1}}],[\"不要分开\",{\"1\":{\"1443\":1}}],[\"不要使用\",{\"1\":{\"1413\":1}}],[\"不要将两步封装融为一步\",{\"1\":{\"1309\":1}}],[\"不要将类中字段对外公布\",{\"1\":{\"799\":1}}],[\"不要将第三方api接口暴露出来\",{\"1\":{\"760\":1}}],[\"不要改变api当前调用方式\",{\"1\":{\"793\":1}}],[\"不要害怕发布一个稳定的api\",{\"1\":{\"772\":1}}],[\"不要冒险\",{\"1\":{\"763\":1}}],[\"不要关闭该终端\",{\"1\":{\"619\":1}}],[\"不易收集和管理\",{\"1\":{\"757\":1}}],[\"不易理解设计模式之一\",{\"1\":{\"559\":1}}],[\"不带箭头的直线表示\",{\"1\":{\"738\":1}}],[\"不然浏览器不会允许请求这些资源\",{\"1\":{\"649\":1}}],[\"不重视的\",{\"1\":{\"598\":1}}],[\"不重复\",{\"1\":{\"181\":1}}],[\"不管组责任\",{\"1\":{\"598\":1}}],[\"不需登录\",{\"1\":{\"501\":1}}],[\"不需要唤醒事件队列\",{\"1\":{\"1847\":1}}],[\"不需要单独配置权限\",{\"1\":{\"1702\":2}}],[\"不需要注释掉即可\",{\"1\":{\"1604\":1}}],[\"不需要额外修改\",{\"1\":{\"1595\":1}}],[\"不需要额外代码\",{\"1\":{\"1595\":1}}],[\"不需要额外的同步\",{\"1\":{\"1231\":1}}],[\"不需要修改原有网络代码\",{\"1\":{\"1595\":1}}],[\"不需要动业务代码\",{\"1\":{\"1587\":1}}],[\"不需要手动添加\",{\"1\":{\"1549\":1}}],[\"不需要\",{\"1\":{\"1518\":1,\"1708\":1}}],[\"不需要遍历所有\",{\"1\":{\"1135\":1}}],[\"不需要知道其他层的细节\",{\"1\":{\"311\":1}}],[\"不需要再说什么\",{\"1\":{\"259\":1,\"447\":1}}],[\"不需要连续的地址空间\",{\"1\":{\"214\":1}}],[\"不适合内存敏感以及对实时性要求很高的场景\",{\"1\":{\"343\":1}}],[\"不应该去使用它\",{\"1\":{\"325\":1}}],[\"不仅如此\",{\"1\":{\"323\":1}}],[\"不仅要知道\",{\"1\":{\"227\":1}}],[\"不合适大量数据吞吐的大型数据库应用\",{\"1\":{\"314\":1}}],[\"不间断地升级\",{\"1\":{\"314\":1}}],[\"不同linux分支路径略有不同\",{\"1\":{\"1791\":1}}],[\"不同的span对应不同的样式\",{\"1\":{\"1310\":1}}],[\"不同线程处理不同数据段\",{\"1\":{\"821\":1}}],[\"不同技能的程序员可以分工\",{\"1\":{\"311\":1}}],[\"不同之处\",{\"1\":{\"264\":1}}],[\"不能大于\",{\"1\":{\"1712\":1}}],[\"不能拦截接口方法\",{\"1\":{\"1588\":1}}],[\"不能跨线程使用\",{\"1\":{\"1530\":1}}],[\"不能static缓存\",{\"1\":{\"1527\":1}}],[\"不能直接性掌握\",{\"1\":{\"1509\":1}}],[\"不能直接获得方法调用关系\",{\"1\":{\"1209\":1}}],[\"不能串联一起\",{\"1\":{\"1509\":1}}],[\"不能引用子组件代码\",{\"1\":{\"1473\":1}}],[\"不能有耗时操作\",{\"1\":{\"1413\":1}}],[\"不能正常识别\",{\"1\":{\"1413\":1}}],[\"不能指令重排\",{\"1\":{\"863\":2}}],[\"不能保证逃逸分析的性能高于它的消耗\",{\"1\":{\"1212\":1}}],[\"不能保证随着时间的推移\",{\"1\":{\"356\":1}}],[\"不能保证原子性\",{\"1\":{\"167\":1}}],[\"不能使用基本类型数组作为参数\",{\"1\":{\"328\":1}}],[\"不能跳过其中任何一层\",{\"1\":{\"311\":1}}],[\"不希望引入太多额外成本\",{\"1\":{\"305\":1}}],[\"不用手写findviewbyid\",{\"1\":{\"1610\":1}}],[\"不用要第一时间释放\",{\"1\":{\"1530\":1}}],[\"不用担心括号一层一层的问题\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"不用担心会被回收\",{\"1\":{\"368\":1}}],[\"不用加号的加法\",{\"1\":{\"298\":1}}],[\"不用加减乘除做加法\",{\"1\":{\"298\":1}}],[\"不用synchronized\",{\"1\":{\"168\":1}}],[\"不过需要使用到额外的空间\",{\"1\":{\"284\":1}}],[\"不参与排序\",{\"1\":{\"279\":1}}],[\"不暴露该对象内部结构\",{\"1\":{\"257\":1,\"395\":1,\"542\":1}}],[\"不处理\",{\"1\":{\"246\":1,\"914\":1}}],[\"不存储元素阻塞队列\",{\"1\":{\"246\":1,\"914\":1}}],[\"不会导致每个脚本写的很乱\",{\"1\":{\"1905\":1}}],[\"不会导致数据不一致\",{\"1\":{\"325\":1}}],[\"不会退出的线程\",{\"1\":{\"1778\":1}}],[\"不会显示控制视频播放的控制栏\",{\"1\":{\"1711\":1}}],[\"不会有效率影响\",{\"1\":{\"1595\":1}}],[\"不会永久阻塞调用者\",{\"1\":{\"949\":1}}],[\"不会影响传入的数组\",{\"1\":{\"900\":1}}],[\"不会影响到年老代\",{\"1\":{\"207\":1}}],[\"不会释放该锁\",{\"1\":{\"867\":1}}],[\"不会引起线程上下文切换和调度\",{\"1\":{\"840\":1}}],[\"不会被清理\",{\"1\":{\"385\":1}}],[\"不会丢失数据因此适合大数据量的交换\",{\"1\":{\"181\":1}}],[\"不丢失\",{\"1\":{\"181\":1}}],[\"不再处于idle状态\",{\"1\":{\"1828\":1}}],[\"不再持有该对象的任何强引用\",{\"1\":{\"145\":1}}],[\"不再只是基于单机的废物\",{\"1\":{\"12\":1,\"731\":1}}],[\"不可能是一种技术栈\",{\"1\":{\"1694\":1}}],[\"不可上传ios截图\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"不可变对象被构建出来\",{\"1\":{\"1232\":1}}],[\"不可变\",{\"0\":{\"1232\":1}}],[\"不可变的行为\",{\"1\":{\"766\":1}}],[\"不可以\",{\"1\":{\"1708\":1}}],[\"不可以被interrupt\",{\"1\":{\"944\":1}}],[\"不可以让类可以继承\",{\"1\":{\"799\":1}}],[\"不可被中断的一个或一系列操作\",{\"1\":{\"839\":1}}],[\"不可替换\",{\"1\":{\"507\":1}}],[\"不可重复\",{\"1\":{\"212\":1}}],[\"不可达阶段\",{\"1\":{\"144\":1,\"145\":2}}],[\"不可见阶段\",{\"1\":{\"144\":1,\"145\":2}}],[\"不限于部门角色\",{\"1\":{\"12\":1,\"731\":1}}],[\"以github为例\",{\"0\":{\"1921\":1}}],[\"以至于现在大家看到的每个java进程的调用栈如下\",{\"1\":{\"1866\":1}}],[\"以保证不会再次重复运行\",{\"1\":{\"1846\":1}}],[\"以bc\",{\"1\":{\"1790\":2}}],[\"以break语句或return语句取代控制标记\",{\"1\":{\"1277\":1}}],[\"以提供秒开体验\",{\"1\":{\"1708\":1}}],[\"以用户为中心\",{\"1\":{\"1476\":1}}],[\"以1280为宽度尺寸为基准切图\",{\"1\":{\"1435\":1}}],[\"以640为宽度尺寸为基准切图\",{\"1\":{\"1435\":1}}],[\"以指定图像存储路径的方式调起相机\",{\"1\":{\"1417\":1}}],[\"以往开发basetemplete效果\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"以外的所有剩下的内容\",{\"1\":{\"1326\":1}}],[\"以字段取代子类\",{\"1\":{\"1283\":1}}],[\"以字面常亮取代魔法数\",{\"1\":{\"1283\":1}}],[\"以状态对象取代类型码\",{\"1\":{\"1283\":1}}],[\"以state\",{\"1\":{\"1283\":1}}],[\"以子类取代类型码\",{\"1\":{\"1283\":1}}],[\"以类取代类型码\",{\"1\":{\"1283\":1}}],[\"以对象取代数据\",{\"1\":{\"1283\":1}}],[\"以对象取代数据值\",{\"1\":{\"1283\":1}}],[\"以函数方式支持\",{\"1\":{\"1473\":1}}],[\"以函数对象取代函数\",{\"1\":{\"1280\":1}}],[\"以函数取代参数\",{\"1\":{\"1274\":1}}],[\"以查询取代临时变量\",{\"1\":{\"1280\":1}}],[\"以多态取代条件表达式\",{\"1\":{\"1277\":1}}],[\"以卫语句\",{\"1\":{\"1277\":1}}],[\"以测试取代异常\",{\"1\":{\"1274\":1}}],[\"以异常取代错误码\",{\"1\":{\"1274\":1}}],[\"以工厂函数取代构造函数\",{\"1\":{\"1274\":1}}],[\"以一个对象取代这些参数\",{\"1\":{\"1274\":1}}],[\"以一个子类表示一种特殊情况\",{\"1\":{\"1265\":1}}],[\"以明确函数取代参数\",{\"1\":{\"1274\":1}}],[\"以参数表达那些不同的值\",{\"1\":{\"1274\":1}}],[\"以继承取代委托\",{\"1\":{\"1262\":1}}],[\"以委托取代继承\",{\"1\":{\"1262\":1}}],[\"以重构方式改进软件质量\",{\"1\":{\"1253\":1}}],[\"以整个方法作为编译对象\",{\"1\":{\"1208\":1}}],[\"以opcode开头\",{\"1\":{\"1093\":1}}],[\"以int数组为例\",{\"1\":{\"1009\":1}}],[\"以后该线程在进入和退出\",{\"1\":{\"846\":1}}],[\"以及mrequests也添加到epoll的监控范围内\",{\"1\":{\"1829\":1}}],[\"以及modifyinfo\",{\"1\":{\"738\":1}}],[\"以及释放正在等待reply的binder\",{\"1\":{\"1755\":1}}],[\"以及内部的插件登记机制\",{\"1\":{\"313\":1}}],[\"以原理\",{\"1\":{\"571\":1}}],[\"以下关于\",{\"1\":{\"1709\":1}}],[\"以下哪种请求方式比较合适\",{\"1\":{\"1712\":1}}],[\"以下哪种输入格式正确\",{\"1\":{\"1708\":1}}],[\"以下哪种原子化布局能力属于自适应变化能力\",{\"1\":{\"1702\":1}}],[\"以下哪种原子化布局能力是控制元素的尺寸\",{\"1\":{\"1702\":1}}],[\"以下哪些装饰器装饰的自定义组件成员变量必须本地初始化\",{\"1\":{\"1702\":1}}],[\"以下哪几项属于\",{\"1\":{\"1702\":1}}],[\"以下哪一个选项是类\",{\"1\":{\"1702\":1}}],[\"以下哪一个工具可以提供兼容性测试报告\",{\"1\":{\"1702\":1}}],[\"以下哪一项生命周期可用于初始化显示相关数据\",{\"1\":{\"1702\":1}}],[\"以下哪个字段符合规范\",{\"1\":{\"1708\":1}}],[\"以下哪个模块提供远程服务启动\",{\"1\":{\"1702\":2}}],[\"以下哪个公共事件发布后\",{\"1\":{\"1702\":1}}],[\"以下哪个\",{\"1\":{\"1702\":1}}],[\"以下是输出的结果\",{\"1\":{\"900\":1}}],[\"以下是使用\",{\"1\":{\"365\":1}}],[\"以下是\",{\"1\":{\"354\":1}}],[\"以下源码分析以\",{\"1\":{\"347\":1}}],[\"以下源码分析基于\",{\"1\":{\"329\":1}}],[\"以上代码\",{\"1\":{\"1601\":1}}],[\"以上步骤进行复盘优化\",{\"1\":{\"230\":1}}],[\"以上的命令\",{\"1\":{\"12\":1,\"731\":1}}],[\"以解决有此境遇下朋友的难题\",{\"1\":{\"227\":1}}],[\"以\",{\"1\":{\"12\":1,\"731\":1,\"907\":1,\"1768\":2}}],[\"以性能与稳定性闻名天下\",{\"1\":{\"12\":1,\"731\":1}}],[\"内含binderproxy类\",{\"1\":{\"1757\":1}}],[\"内含servicemanagerproxy类\",{\"1\":{\"1757\":1}}],[\"内是判断条件\",{\"1\":{\"1518\":1}}],[\"内容咨询\",{\"1\":{\"1702\":1}}],[\"内容修改\",{\"1\":{\"1445\":1}}],[\"内容\",{\"1\":{\"1444\":1,\"1518\":1}}],[\"内联临时变量\",{\"1\":{\"1280\":1}}],[\"内联函数\",{\"1\":{\"1280\":1}}],[\"内心经常动摇的\",{\"1\":{\"598\":1}}],[\"内部类或本地类都必须申明为static\",{\"1\":{\"1840\":1}}],[\"内部有一个gcwatcher类\",{\"1\":{\"1751\":1}}],[\"内部静态类\",{\"1\":{\"405\":2}}],[\"内部维护了一个双向链表\",{\"1\":{\"362\":1}}],[\"内部包含了一个\",{\"1\":{\"348\":1}}],[\"内核层\",{\"1\":{\"1767\":1}}],[\"内核空间是可共享的\",{\"1\":{\"1743\":1}}],[\"内核初始化\",{\"1\":{\"1320\":1}}],[\"内核通常是一个独立单元\",{\"1\":{\"313\":1}}],[\"内核\",{\"1\":{\"313\":1}}],[\"内存不足\",{\"1\":{\"1755\":1,\"1790\":1}}],[\"内存不足时会被回收\",{\"1\":{\"154\":1}}],[\"内存拷贝服务信息\",{\"1\":{\"1790\":1}}],[\"内存拷贝\",{\"1\":{\"1540\":1}}],[\"内存地址\",{\"1\":{\"1224\":1}}],[\"内存屏障\",{\"1\":{\"1222\":1}}],[\"内存屏障避免特定指令重排\",{\"1\":{\"859\":1}}],[\"内存间交互操作\",{\"0\":{\"1220\":1}}],[\"内存生成java\",{\"1\":{\"1170\":1}}],[\"内存溢出\",{\"0\":{\"1119\":1}}],[\"内存规整且连续\",{\"1\":{\"1116\":1}}],[\"内存分配空间策略\",{\"1\":{\"1116\":1}}],[\"内存分配和回收策略\",{\"0\":{\"184\":1,\"1146\":1}}],[\"内存系统的重排序\",{\"1\":{\"859\":1}}],[\"内存可见性保证\",{\"1\":{\"858\":1}}],[\"内存管理\",{\"1\":{\"763\":1}}],[\"内存占用\",{\"1\":{\"343\":1}}],[\"内存映射\",{\"1\":{\"268\":1}}],[\"内存比新生代也大很多\",{\"1\":{\"207\":1}}],[\"内存泄漏问题\",{\"0\":{\"385\":1}}],[\"内存泄漏\",{\"0\":{\"190\":1}}],[\"内存抖动\",{\"0\":{\"187\":1}}],[\"内存模型\",{\"1\":{\"151\":1,\"1218\":1}}],[\"内存\",{\"0\":{\"1877\":1},\"1\":{\"14\":1,\"733\":1,\"1702\":1}}],[\"内置组件\",{\"1\":{\"1709\":1}}],[\"内置功能\",{\"0\":{\"14\":1,\"733\":1}}],[\"内置多种翻译实现\",{\"1\":{\"12\":1,\"731\":1}}],[\"内网鉴权\",{\"1\":{\"12\":1,\"731\":1}}],[\"可通过setmessagelogging\",{\"1\":{\"1843\":1}}],[\"可读事件\",{\"1\":{\"1829\":1}}],[\"可使用\",{\"1\":{\"1779\":1}}],[\"可使用快排\",{\"1\":{\"285\":1}}],[\"可执行程序\",{\"1\":{\"1729\":2}}],[\"可生成两个可执行文件serverdemo\",{\"1\":{\"1728\":1}}],[\"可组合\",{\"1\":{\"1709\":1}}],[\"可组合其它组件\",{\"1\":{\"1709\":1}}],[\"可复用的\",{\"1\":{\"1709\":1}}],[\"可复用性和性能\",{\"1\":{\"955\":1}}],[\"可复用性\",{\"1\":{\"954\":1,\"1512\":1}}],[\"可分可合\",{\"1\":{\"1709\":1}}],[\"可扩展性强\",{\"1\":{\"1622\":1}}],[\"可变参数\",{\"1\":{\"1521\":1}}],[\"可不可以在编译之前\",{\"1\":{\"1486\":1}}],[\"可灵活配置\",{\"1\":{\"1481\":1}}],[\"可他们却仅仅是个开始\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"可重用\",{\"1\":{\"1709\":1}}],[\"可重入代码\",{\"1\":{\"1240\":1}}],[\"可重入\",{\"1\":{\"1238\":1}}],[\"可重入的\",{\"1\":{\"1238\":1}}],[\"可重复\",{\"1\":{\"212\":1}}],[\"可触发第1层编译\",{\"1\":{\"1207\":1}}],[\"可视化\",{\"0\":{\"1157\":1,\"1158\":1}}],[\"可预测的停顿\",{\"1\":{\"1145\":1}}],[\"可达性分析\",{\"1\":{\"1125\":1}}],[\"可达性分析算法整个清理流程\",{\"1\":{\"200\":1}}],[\"可达性分析算法通过一系列成为gcroots的对象作为起始点\",{\"1\":{\"200\":1}}],[\"可达性分析算法\",{\"0\":{\"200\":1,\"1125\":1}}],[\"可回收\",{\"1\":{\"1125\":1}}],[\"可伸缩性\",{\"1\":{\"954\":1}}],[\"可优化为线程池\",{\"1\":{\"938\":1}}],[\"可中断的获取锁以\",{\"1\":{\"874\":1}}],[\"可理解性\",{\"1\":{\"793\":1}}],[\"可靠与无序\",{\"1\":{\"763\":1}}],[\"可见性修饰\",{\"1\":{\"1518\":1}}],[\"可见性是指一个线程修改了某个共享变量\",{\"1\":{\"1223\":1}}],[\"可见性\",{\"1\":{\"738\":2,\"793\":1,\"839\":1,\"840\":1,\"861\":1,\"1222\":1,\"1223\":1,\"1521\":1}}],[\"可儿\",{\"1\":{\"543\":1}}],[\"可选项\",{\"1\":{\"1966\":1}}],[\"可选的方法体\",{\"1\":{\"1518\":1}}],[\"可选\",{\"1\":{\"314\":1}}],[\"可定制性高\",{\"1\":{\"313\":1}}],[\"可能会阻塞\",{\"1\":{\"1843\":1}}],[\"可能会影响后续业务逻辑和造成内存泄露等问题\",{\"1\":{\"385\":1}}],[\"可能需要修改网络代码\",{\"1\":{\"1587\":1}}],[\"可能需要整个服务暂停\",{\"1\":{\"311\":1}}],[\"可能是直接修改后缀名造成了图片的损伤\",{\"1\":{\"76\":1}}],[\"可插拔\",{\"1\":{\"305\":1}}],[\"可以是任意线程\",{\"1\":{\"1776\":1}}],[\"可以控制\",{\"1\":{\"1713\":1}}],[\"可以显示横幅通知\",{\"1\":{\"1712\":1}}],[\"可以\",{\"1\":{\"1708\":1}}],[\"可以跳转到一个新页面\",{\"1\":{\"1708\":1}}],[\"可以定义组件的颜色\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"可以从数据源中迭代获取数据\",{\"1\":{\"1707\":1}}],[\"可以划分为容器+dist形式\",{\"1\":{\"1689\":1}}],[\"可以看一下\",{\"1\":{\"1613\":1}}],[\"可以看到\",{\"1\":{\"333\":1}}],[\"可以更进一步封装\",{\"1\":{\"1610\":1}}],[\"可以考虑用到反射\",{\"1\":{\"1598\":1}}],[\"可以在哪些组件中使用\",{\"1\":{\"1712\":1}}],[\"可以在这里获取视频时长\",{\"1\":{\"1708\":2}}],[\"可以在此处一通骚操作\",{\"1\":{\"1592\":1}}],[\"可以在file\",{\"1\":{\"1491\":1}}],[\"可以替换eventbus消息队列和处理消息的策略模式\",{\"1\":{\"1546\":1,\"1637\":1}}],[\"可以让图像效果多样化\",{\"1\":{\"1540\":1}}],[\"可以让class找到实例\",{\"1\":{\"1029\":1}}],[\"可以单独运行在一个单独线程中\",{\"1\":{\"1540\":1}}],[\"可以单独测试每一个服务\",{\"1\":{\"314\":1}}],[\"可以保证返回一个局部引用\",{\"1\":{\"1530\":1}}],[\"可以直接取用demo\",{\"1\":{\"1527\":1}}],[\"可以愉快开发了\",{\"1\":{\"1509\":1}}],[\"可以hack代码\",{\"1\":{\"1494\":1}}],[\"可以将初始化控件代码专门抽出一个类\",{\"1\":{\"1610\":1}}],[\"可以将base抽象成公共库\",{\"1\":{\"1494\":1}}],[\"可以将不同请求来进行参数化\",{\"1\":{\"257\":1,\"395\":1,\"488\":1}}],[\"可以我写的插件源码component\",{\"1\":{\"1488\":1}}],[\"可以配合arouter\",{\"1\":{\"1481\":1}}],[\"可以备选的\",{\"1\":{\"1481\":1}}],[\"可以跨组件访问数据\",{\"1\":{\"1481\":1}}],[\"可以学习到思想\",{\"1\":{\"1480\":1}}],[\"可以学习到的思想\",{\"1\":{\"1479\":1}}],[\"可以做组件间解耦\",{\"1\":{\"1479\":1}}],[\"可以做到实时部署\",{\"1\":{\"314\":1}}],[\"可以带来稳定\",{\"1\":{\"1476\":1}}],[\"可以解决布局大部分需求\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"可以解耦当前flutter页面中widget与业务逻辑混合在一起的问题\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"可以快捷名利可以快速唤起\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"可以为空\",{\"1\":{\"1332\":1}}],[\"可以合并成一个锁\",{\"1\":{\"1244\":1}}],[\"可以合为一体\",{\"1\":{\"312\":1}}],[\"可以绑定多个condition\",{\"1\":{\"1238\":1}}],[\"可以进行高效优化\",{\"1\":{\"1212\":1}}],[\"可以读取\",{\"1\":{\"1199\":1}}],[\"可以反编译class文件\",{\"1\":{\"1075\":1}}],[\"可以通过什么形式进行\",{\"1\":{\"1712\":1}}],[\"可以通过什么方式使用端云一体化\",{\"1\":{\"1708\":1}}],[\"可以通过以下哪个参数\",{\"1\":{\"1702\":1}}],[\"可以通过\",{\"1\":{\"1061\":1,\"1711\":1}}],[\"可以评估一个应用架构的好坏\",{\"1\":{\"805\":1}}],[\"可以脱离\",{\"1\":{\"738\":1}}],[\"可以编辑配置文件\",{\"1\":{\"707\":1}}],[\"可以实现多个线程访问threadlocal的值\",{\"1\":{\"384\":1}}],[\"可以实现消息队列\",{\"1\":{\"314\":1}}],[\"可以插入键为\",{\"1\":{\"356\":1}}],[\"可以去除\",{\"1\":{\"351\":1}}],[\"可以使用下列哪些属性\",{\"1\":{\"1709\":1}}],[\"可以使用以下方法得到\",{\"1\":{\"354\":1}}],[\"可以使用\",{\"1\":{\"340\":1,\"1711\":1,\"1713\":1}}],[\"可以把数组类型转换为\",{\"1\":{\"328\":1}}],[\"可以用retrofitmock的空方法替换\",{\"1\":{\"1589\":1}}],[\"可以用链式调用\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"可以用jstat命令看一下gc情况\",{\"1\":{\"833\":1}}],[\"可以用它来实现优先队列\",{\"1\":{\"324\":1}}],[\"可以用它来实现双向队列\",{\"1\":{\"324\":1}}],[\"可以用invoke方法反射\",{\"1\":{\"259\":1}}],[\"可以渐进式地开发\",{\"1\":{\"313\":1}}],[\"可以提高编译速度\",{\"1\":{\"305\":1}}],[\"可以认为老年代中存放的都是一些生命周期较长的对象\",{\"1\":{\"207\":1}}],[\"可以重新处理图片再加载\",{\"1\":{\"76\":1}}],[\"可找到项目相面的gradle\",{\"1\":{\"40\":1}}],[\"可进行分析sql找出系统性能瓶颈\",{\"1\":{\"14\":1,\"733\":1}}],[\"可自行扩展\",{\"1\":{\"12\":1,\"731\":1}}],[\"可输出完整sql与执行时间监控\",{\"1\":{\"12\":1,\"731\":1}}],[\"银行卡等\",{\"1\":{\"12\":1,\"731\":1}}],[\"地址相同\",{\"1\":{\"1203\":2}}],[\"地址是任意的\",{\"1\":{\"214\":1}}],[\"地址\",{\"1\":{\"12\":1,\"731\":1,\"1383\":1,\"1666\":1,\"1960\":1}}],[\"对native层队列进行读取消息和消息处理\",{\"1\":{\"1828\":1}}],[\"对java层阻塞及时作用\",{\"1\":{\"1828\":1}}],[\"对此\",{\"1\":{\"1779\":1}}],[\"对齐方式\",{\"1\":{\"1708\":1}}],[\"对齐填充\",{\"1\":{\"1117\":2}}],[\"对retrofit对应api\",{\"1\":{\"1592\":1}}],[\"对radix进行计数排序\",{\"1\":{\"287\":1}}],[\"对编译class文件做自定义处理\",{\"1\":{\"1561\":1}}],[\"对源码的设置\",{\"1\":{\"1534\":1}}],[\"对集合应用预言\",{\"1\":{\"1521\":1}}],[\"对合集每个元素应用给定函数\",{\"1\":{\"1521\":1}}],[\"对index进行精确控制\",{\"1\":{\"1518\":1}}],[\"对apk体积有一个概况了解\",{\"1\":{\"1317\":1}}],[\"对特定内存会高速缓存进行读写的过程抽象\",{\"1\":{\"1218\":1}}],[\"对方法code属性中字节码的擦除\",{\"1\":{\"1202\":1}}],[\"对应插件库\",{\"1\":{\"1911\":1}}],[\"对应构造方法\",{\"1\":{\"1598\":1}}],[\"对应源码\",{\"1\":{\"1530\":1}}],[\"对应产品\",{\"1\":{\"1441\":1}}],[\"对应的各种span\",{\"1\":{\"1310\":1}}],[\"对应的参数\",{\"1\":{\"1310\":1}}],[\"对应图形化工具classpy\",{\"1\":{\"1075\":1}}],[\"对应助记符指令\",{\"1\":{\"1022\":1}}],[\"对虚拟机理解更深刻时\",{\"1\":{\"1043\":1}}],[\"对比\",{\"0\":{\"884\":1}}],[\"对共享变量所做修改的\",{\"1\":{\"862\":1}}],[\"对性能的最求\",{\"1\":{\"802\":1}}],[\"对其能力进行拓展的工具\",{\"1\":{\"1711\":1}}],[\"对其研究\",{\"1\":{\"796\":1}}],[\"对其扩展了实现支持了更多功能例如\",{\"1\":{\"12\":1,\"731\":1}}],[\"对探索内容一步步深入了解\",{\"1\":{\"787\":1}}],[\"对外发布的接口\",{\"1\":{\"802\":1}}],[\"对外暴露接口或协议\",{\"1\":{\"766\":1}}],[\"对外提供统一方法\",{\"1\":{\"452\":1}}],[\"对外提供一个统一方法\",{\"1\":{\"257\":1,\"394\":1}}],[\"对修改关闭\",{\"1\":{\"752\":1}}],[\"对接口配置跨域设置\",{\"1\":{\"650\":1}}],[\"对客户程序隐藏子系统的细节\",{\"1\":{\"453\":1}}],[\"对这部分缓存进行回收\",{\"1\":{\"367\":1}}],[\"对称二叉树\",{\"1\":{\"298\":1}}],[\"对所有的计数累加\",{\"1\":{\"286\":1}}],[\"对每个桶的元素进行排序\",{\"1\":{\"285\":1}}],[\"对每一对相邻元素作同样的工作\",{\"1\":{\"278\":1}}],[\"对子序列进行排序\",{\"1\":{\"284\":1}}],[\"对原数组构建成大顶堆\",{\"1\":{\"283\":1}}],[\"对左右两边数组\",{\"1\":{\"279\":1}}],[\"对一些常见数据结构学习\",{\"1\":{\"227\":1}}],[\"对新增和删除效率高\",{\"1\":{\"214\":1}}],[\"对新生代进行回收\",{\"1\":{\"207\":1}}],[\"对整个堆进行回收\",{\"1\":{\"207\":1}}],[\"对\",{\"1\":{\"200\":1,\"351\":1,\"1707\":11}}],[\"对实时的应用比如ip电话和视频会议等\",{\"1\":{\"181\":1}}],[\"对于不再使用的消息\",{\"1\":{\"1850\":1}}],[\"对于ismain=false的情况下\",{\"1\":{\"1778\":1}}],[\"对于ismain=true的情况下\",{\"1\":{\"1778\":1}}],[\"对于binder对象的调用\",{\"1\":{\"1756\":1}}],[\"对于所有client端进程的binder请求都是交由server端进程的binder线程来处理的\",{\"1\":{\"1752\":1}}],[\"对于程序员来讲\",{\"1\":{\"1527\":1}}],[\"对于用户来讲不易使用\",{\"1\":{\"1479\":1}}],[\"对于使用者来言\",{\"1\":{\"1389\":1,\"1500\":1,\"1672\":1}}],[\"对于无关的方法\",{\"1\":{\"808\":1}}],[\"对于\",{\"1\":{\"354\":1,\"1708\":1}}],[\"对于一个server进程有一个最大binder线程数限制\",{\"1\":{\"1752\":1}}],[\"对于一个优秀的api来说\",{\"1\":{\"793\":1}}],[\"对于一个\",{\"1\":{\"353\":1}}],[\"对于简单的项目\",{\"1\":{\"312\":1}}],[\"对于数组中的元素分布均匀的情况\",{\"1\":{\"285\":1}}],[\"对于同步方法块\",{\"1\":{\"169\":1,\"843\":1}}],[\"对于静态同步方法\",{\"1\":{\"169\":1,\"843\":1}}],[\"对于普通同步方法\",{\"1\":{\"169\":1,\"843\":1}}],[\"对象可以复用\",{\"1\":{\"1711\":1}}],[\"对象不能new\",{\"1\":{\"1598\":1}}],[\"对象不可达\",{\"1\":{\"1127\":1}}],[\"对象数组\",{\"1\":{\"1527\":1}}],[\"对象表达式\",{\"1\":{\"1521\":1}}],[\"对象类型相同integer\",{\"1\":{\"1203\":1}}],[\"对象池\",{\"1\":{\"1203\":2}}],[\"对象地址相同\",{\"1\":{\"1203\":1}}],[\"对象优先分配在eden区\",{\"1\":{\"1146\":1}}],[\"对象优先在eden分配\",{\"1\":{\"184\":1}}],[\"对象被收集器回收时收到一个系统通知\",{\"1\":{\"1126\":1}}],[\"对象访问定位\",{\"0\":{\"1118\":1}}],[\"对象头\",{\"0\":{\"1246\":1},\"1\":{\"1117\":2,\"1246\":1}}],[\"对象头设置状态\",{\"1\":{\"1116\":1}}],[\"对象内存区域分为3块区域\",{\"1\":{\"1117\":1}}],[\"对象内存布局\",{\"0\":{\"1117\":1},\"1\":{\"1117\":1}}],[\"对象分代年龄\",{\"1\":{\"1116\":1}}],[\"对象或数组\",{\"1\":{\"984\":2}}],[\"对象实例化new\",{\"0\":{\"983\":1}}],[\"对象锁\",{\"0\":{\"946\":1}}],[\"对象锁不会释放\",{\"1\":{\"944\":1}}],[\"对象时就指定大概的容量大小\",{\"1\":{\"332\":1}}],[\"对象\",{\"1\":{\"271\":1,\"327\":1,\"948\":4,\"949\":1,\"1086\":1,\"1711\":1,\"1713\":1,\"1756\":1}}],[\"对象的引用关系不能发生变化\",{\"1\":{\"1135\":1}}],[\"对象的创建\",{\"0\":{\"1116\":1}}],[\"对象的构建与表现分离\",{\"1\":{\"260\":1}}],[\"对象的生命周期包含下面几个阶段\",{\"1\":{\"144\":1}}],[\"对象间一对多依赖关系\",{\"1\":{\"257\":1,\"395\":1,\"518\":1}}],[\"对象大多死亡频繁\",{\"1\":{\"207\":1}}],[\"对象经过可达性分析\",{\"1\":{\"200\":1}}],[\"对象至少被一个强引用持有着\",{\"1\":{\"145\":1}}],[\"对象空间重分配阶段\",{\"1\":{\"144\":1,\"145\":1}}],[\"对象化分页对象\",{\"1\":{\"12\":1,\"731\":1}}],[\"对系统动态配置常用参数\",{\"1\":{\"14\":1,\"733\":1}}],[\"对系统中经常使用的一些较为固定的数据进行维护\",{\"1\":{\"14\":1,\"733\":1}}],[\"对存取数据期间自动加解密支持多种策略\",{\"1\":{\"12\":1,\"731\":1}}],[\"分发处理\",{\"1\":{\"1842\":1}}],[\"分发器和事件通道\",{\"1\":{\"312\":1}}],[\"分屏\",{\"1\":{\"1702\":1}}],[\"分组\",{\"1\":{\"1521\":1}}],[\"分辨map是到底哪种实现方式很重要\",{\"1\":{\"1518\":1}}],[\"分工职责更加明确化\",{\"1\":{\"1491\":1}}],[\"分别添加到epoll实例\",{\"1\":{\"1829\":1}}],[\"分别满足安卓和ios规范\",{\"1\":{\"1443\":1}}],[\"分别放置不同模块中\",{\"1\":{\"805\":1}}],[\"分解为三个目标\",{\"1\":{\"1483\":1}}],[\"分解胖型类\",{\"1\":{\"1286\":1}}],[\"分解临时变量\",{\"1\":{\"1280\":1}}],[\"分解条件表达式\",{\"1\":{\"1277\":1}}],[\"分解庞大的api\",{\"1\":{\"784\":1}}],[\"分离开解耦\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"分离\",{\"1\":{\"1277\":1}}],[\"分支名\",{\"1\":{\"1947\":1}}],[\"分支命令\",{\"0\":{\"1947\":1}}],[\"分支\",{\"0\":{\"1941\":1}}],[\"分支逻辑\",{\"1\":{\"1277\":1}}],[\"分支频率预测\",{\"1\":{\"1210\":1}}],[\"分层编译策略\",{\"0\":{\"1207\":1}}],[\"分层架构\",{\"0\":{\"311\":1},\"1\":{\"311\":1}}],[\"分派\",{\"0\":{\"1188\":1}}],[\"分代收集\",{\"1\":{\"1145\":1}}],[\"分代收集算法\",{\"0\":{\"207\":1,\"1133\":1},\"1\":{\"1133\":1}}],[\"分代年龄\",{\"1\":{\"1117\":2}}],[\"分隔符\",{\"1\":{\"1064\":1}}],[\"分割任务\",{\"1\":{\"897\":1}}],[\"分配两个结构体内存\",{\"1\":{\"1770\":1}}],[\"分配对象内存空间\",{\"1\":{\"864\":1}}],[\"分配比例8\",{\"1\":{\"206\":1}}],[\"分析和运行init\",{\"1\":{\"1857\":1}}],[\"分析的核心应在在消息队列上pendingpostqueue\",{\"1\":{\"1546\":1}}],[\"分析及字节码生成\",{\"1\":{\"1197\":1}}],[\"分析工具\",{\"1\":{\"1155\":1}}],[\"分析\",{\"1\":{\"559\":1}}],[\"分治\",{\"1\":{\"298\":1}}],[\"分页插件框架对其进行了扩展\",{\"1\":{\"12\":1,\"731\":1}}],[\"分页插件\",{\"1\":{\"12\":1,\"731\":1}}],[\"分布式数据对象\",{\"1\":{\"1713\":1}}],[\"分布式数据服务\",{\"1\":{\"1713\":1}}],[\"分布式数据服务接口\",{\"1\":{\"1702\":1}}],[\"分布式数据服务包含以下哪几项\",{\"1\":{\"1702\":1}}],[\"分布式数据服务通过以下哪几项\",{\"1\":{\"1702\":1}}],[\"分布式服务\",{\"1\":{\"1482\":1}}],[\"分布式系统学习笔记\",{\"1\":{\"1482\":1}}],[\"分布式处理\",{\"1\":{\"314\":1}}],[\"分布式的本质使得这种架构很难实现原子性操作\",{\"1\":{\"314\":1}}],[\"分布式的异步架构\",{\"1\":{\"312\":1}}],[\"分布式和异步特性导致这个架构较难测试\",{\"1\":{\"312\":1}}],[\"分布式文件存储\",{\"1\":{\"12\":1,\"731\":1}}],[\"分布式消息队列\",{\"1\":{\"12\":1,\"731\":1}}],[\"分布式搜索引擎\",{\"1\":{\"12\":1,\"731\":1}}],[\"分布式日志中心\",{\"1\":{\"12\":1,\"731\":1}}],[\"分布式任务调度\",{\"1\":{\"12\":1,\"731\":1,\"1702\":2}}],[\"分布式幂等\",{\"1\":{\"12\":1,\"731\":1}}],[\"分布式队列\",{\"1\":{\"12\":1,\"731\":1}}],[\"分布式限流\",{\"1\":{\"12\":1,\"731\":1}}],[\"分布式限流熔断\",{\"1\":{\"12\":3,\"731\":3}}],[\"分布式事务\",{\"1\":{\"12\":1,\"731\":1}}],[\"分布式事务选型seata\",{\"1\":{\"9\":1,\"728\":1}}],[\"分布式配置中心\",{\"1\":{\"12\":1,\"731\":1}}],[\"分布式锁\",{\"1\":{\"12\":1,\"731\":1}}],[\"分布任务\",{\"1\":{\"12\":1,\"731\":1}}],[\"组名weixinapi\",{\"1\":{\"1491\":1}}],[\"组合类路径\",{\"1\":{\"1064\":1}}],[\"组合关系与聚合关系见得最大不同在于\",{\"1\":{\"738\":1}}],[\"组合关系是关联关系的一种\",{\"1\":{\"735\":1}}],[\"组合关系\",{\"1\":{\"735\":1,\"738\":1}}],[\"组合\",{\"0\":{\"735\":1},\"1\":{\"735\":3}}],[\"组合模式表示\",{\"1\":{\"465\":1}}],[\"组合模式\",{\"0\":{\"463\":1},\"1\":{\"256\":1,\"257\":1,\"394\":1,\"464\":1}}],[\"组员提升为组长\",{\"1\":{\"598\":1}}],[\"组员汇报\",{\"1\":{\"537\":1}}],[\"组员\",{\"1\":{\"537\":1}}],[\"组件传入的地址可以是本地资源也可以是网络资源\",{\"1\":{\"1713\":1}}],[\"组件是提供具有网页显示能力的一种组件\",{\"1\":{\"1713\":1}}],[\"组件描述正确的是\",{\"1\":{\"1713\":1}}],[\"组件支持下列哪些属性或事件\",{\"1\":{\"1713\":1}}],[\"组件播放网络视频时\",{\"1\":{\"1712\":1}}],[\"组件进行页签切换\",{\"1\":{\"1709\":1}}],[\"组件高度决定\",{\"1\":{\"1709\":1}}],[\"组件不支持设置通用高度属性\",{\"1\":{\"1709\":1}}],[\"组件不支持设置通用宽度属性\",{\"1\":{\"1709\":1}}],[\"组件和\",{\"1\":{\"1709\":1}}],[\"组件中有两个\",{\"1\":{\"1708\":1}}],[\"组件页签的位置设置\",{\"1\":{\"1708\":1,\"1713\":1}}],[\"组件的各种行为\",{\"1\":{\"1713\":1}}],[\"组件的属性\",{\"1\":{\"1712\":1}}],[\"组件的描述正确的是\",{\"1\":{\"1709\":1}}],[\"组件的\",{\"1\":{\"1709\":2,\"1711\":1}}],[\"组件的回调事件\",{\"1\":{\"1708\":2}}],[\"组件的参数\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"组件加载网络图片需要如下哪种权限\",{\"1\":{\"1708\":1}}],[\"组件访问在线和离线网页都需要添加\",{\"1\":{\"1708\":1}}],[\"组件大小等属性\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"组件对于所有的网页都可以使用\",{\"1\":{\"1707\":1}}],[\"组件仅可包含子组件\",{\"1\":{\"1707\":1}}],[\"组件可以支持本地视频路径和网络路径播放\",{\"1\":{\"1707\":1}}],[\"组件内转场\",{\"1\":{\"1702\":1}}],[\"组件声明式编程\",{\"0\":{\"1491\":1},\"1\":{\"1486\":1,\"1491\":1}}],[\"组件提供的功能太多\",{\"1\":{\"1481\":1}}],[\"组件间调用者\",{\"1\":{\"1481\":1}}],[\"组件单独运行和集成发布thoralone\",{\"1\":{\"1494\":1}}],[\"组件单独运行和集成发布\",{\"1\":{\"1480\":1}}],[\"组件单独调试与集成发布\",{\"0\":{\"1471\":1}}],[\"组件解耦采用这种方式\",{\"1\":{\"1476\":1}}],[\"组件注入方案\",{\"1\":{\"805\":1}}],[\"组件定位和交互\",{\"1\":{\"805\":1}}],[\"组件\",{\"1\":{\"805\":1,\"1707\":1,\"1708\":4,\"1709\":2,\"1711\":1}}],[\"组件订阅\",{\"1\":{\"305\":1}}],[\"组件升级\",{\"1\":{\"305\":1}}],[\"组件化相关文章\",{\"0\":{\"1503\":1}}],[\"组件化基础\",{\"0\":{\"1497\":1}}],[\"组件化框架目的就是为了使用者减少不必要代码编写\",{\"1\":{\"1494\":1}}],[\"组件化间场景并不多\",{\"1\":{\"1494\":1}}],[\"组件化涉及技术\",{\"1\":{\"1494\":1}}],[\"组件化需要一套系统完整的方案\",{\"1\":{\"1483\":1}}],[\"组件化选型结论\",{\"1\":{\"1479\":1}}],[\"组件化选型\",{\"0\":{\"1479\":1}}],[\"组件化思路\",{\"0\":{\"1472\":1,\"1500\":1}}],[\"组件化开发实践\",{\"0\":{\"1453\":1}}],[\"组件化开发\",{\"0\":{\"1450\":1},\"1\":{\"1453\":1}}],[\"组件化\",{\"1\":{\"305\":2}}],[\"组件化项目\",{\"1\":{\"12\":1,\"731\":1}}],[\"组件+模板\",{\"1\":{\"305\":1}}],[\"组最大长度等\",{\"1\":{\"12\":1,\"731\":1}}],[\"注释\",{\"1\":{\"1583\":1,\"1966\":1}}],[\"注释掉\",{\"1\":{\"627\":1}}],[\"注\",{\"1\":{\"1549\":1}}],[\"注意\",{\"1\":{\"200\":1,\"942\":2,\"1109\":1,\"1413\":1}}],[\"注意点\",{\"1\":{\"103\":1}}],[\"注解是否生效\",{\"1\":{\"1632\":1}}],[\"注解生成代码类\",{\"1\":{\"1604\":1}}],[\"注解有三种\",{\"1\":{\"1604\":1}}],[\"注解支持多层继承\",{\"1\":{\"1577\":1,\"1598\":1,\"1601\":1,\"1604\":2,\"1607\":1,\"1610\":1}}],[\"注解支持国际化\",{\"1\":{\"12\":1,\"731\":1}}],[\"注解处理\",{\"0\":{\"1199\":1}}],[\"注解\",{\"1\":{\"12\":4,\"731\":4,\"805\":1,\"1361\":1}}],[\"注册bintray\",{\"1\":{\"1905\":1}}],[\"注册jni方法\",{\"1\":{\"1861\":1}}],[\"注册多媒体服务\",{\"1\":{\"1798\":1}}],[\"注册到服务目录中\",{\"1\":{\"1796\":1}}],[\"注册时序图\",{\"1\":{\"1795\":1}}],[\"注册和获取服务\",{\"0\":{\"1794\":1}}],[\"注册和卸载交给框架来处理\",{\"1\":{\"766\":1}}],[\"注册成为binder服务的大管家\",{\"1\":{\"1786\":1}}],[\"注册misc设备\",{\"1\":{\"1772\":1}}],[\"注册死亡回调的过程\",{\"1\":{\"1761\":1}}],[\"注册服务和查询服务\",{\"0\":{\"1790\":1}}],[\"注册服务的过程\",{\"1\":{\"1786\":1}}],[\"注册服务\",{\"0\":{\"1795\":1},\"1\":{\"1730\":1,\"1744\":1,\"1785\":1,\"1790\":1,\"1798\":1}}],[\"注册名为\",{\"1\":{\"1725\":1}}],[\"注册动作action类\",{\"1\":{\"1555\":1}}],[\"注册该类\",{\"1\":{\"1546\":1}}],[\"注册事件列表\",{\"1\":{\"1546\":1}}],[\"注册渠道\",{\"1\":{\"1377\":1}}],[\"注册fragment\",{\"1\":{\"1295\":1}}],[\"注册native方法\",{\"0\":{\"1036\":1}}],[\"注册本地方法\",{\"1\":{\"1022\":1}}],[\"注册实现类\",{\"1\":{\"805\":1}}],[\"注册\",{\"1\":{\"519\":1,\"1022\":1,\"1023\":1,\"1702\":1,\"1761\":1}}],[\"注册码拷贝到webstorm的activation\",{\"1\":{\"109\":1}}],[\"注册插件\",{\"1\":{\"12\":1,\"731\":1}}],[\"注册中心\",{\"1\":{\"9\":1,\"12\":1,\"728\":1,\"731\":1}}],[\"多路复用\",{\"1\":{\"1863\":1}}],[\"多选题\",{\"0\":{\"1709\":1,\"1713\":1}}],[\"多行文本\",{\"1\":{\"1702\":1}}],[\"多窗口交互能力提供了以下哪几种交互方式\",{\"1\":{\"1702\":1}}],[\"多窗口问题\",{\"1\":{\"1416\":1}}],[\"多端部署\",{\"1\":{\"1709\":1}}],[\"多端复用问题\",{\"1\":{\"1694\":1}}],[\"多端公用\",{\"1\":{\"305\":1}}],[\"多重试几次\",{\"1\":{\"1690\":1}}],[\"多进程间通讯快\",{\"1\":{\"1494\":1}}],[\"多进程\",{\"1\":{\"1483\":1}}],[\"多处理器有多个高速缓存\",{\"1\":{\"1218\":1}}],[\"多处理器保证\",{\"1\":{\"840\":1}}],[\"多cpu场景下较好\",{\"1\":{\"1140\":1}}],[\"多维数组\",{\"1\":{\"1008\":1}}],[\"多了fifo排队\",{\"1\":{\"883\":1}}],[\"多生产者和多消费者场景\",{\"1\":{\"832\":1}}],[\"多线程同步\",{\"1\":{\"1778\":1}}],[\"多线程竞争锁\",{\"1\":{\"1249\":1}}],[\"多线程程序评价标准\",{\"0\":{\"953\":1}}],[\"多线程访问非线程安全方法\",{\"1\":{\"935\":1}}],[\"多线程进入读时\",{\"1\":{\"880\":1}}],[\"多线程并发时\",{\"1\":{\"879\":1}}],[\"多线程一定快吗\",{\"0\":{\"819\":1}}],[\"多线程共享数据类型\",{\"1\":{\"271\":1,\"1086\":1}}],[\"多线程共享数据\",{\"1\":{\"271\":2,\"1086\":2}}],[\"多用组合\",{\"1\":{\"754\":1,\"760\":1}}],[\"多对一\",{\"1\":{\"489\":1}}],[\"多对多转化为一对多\",{\"1\":{\"483\":1}}],[\"多数人知晓的\",{\"1\":{\"389\":1}}],[\"多数据源事务\",{\"1\":{\"12\":1,\"731\":1}}],[\"多数据源框架\",{\"1\":{\"12\":1,\"731\":1}}],[\"多数据源\",{\"1\":{\"12\":2,\"731\":2}}],[\"多个请求可以使用同一个\",{\"1\":{\"1711\":1}}],[\"多个列表合并一个集合\",{\"1\":{\"1521\":1}}],[\"多个线程访问同一个对象时\",{\"1\":{\"1231\":1}}],[\"多个线程可以同时访问不同分段锁上的桶\",{\"1\":{\"358\":1}}],[\"多个aidl复用一个service\",{\"1\":{\"268\":1}}],[\"多态在kotlin中失效的\",{\"1\":{\"1521\":1}}],[\"多态使你不必编写明显的条件表达式\",{\"1\":{\"1277\":1}}],[\"多态好处\",{\"1\":{\"1277\":1}}],[\"多态实现原理\",{\"1\":{\"1188\":1}}],[\"多态两大特性\",{\"1\":{\"753\":1}}],[\"多态三个必要条件\",{\"1\":{\"158\":1}}],[\"多态\",{\"0\":{\"158\":1},\"1\":{\"158\":1}}],[\"多模板大屏展示\",{\"1\":{\"12\":1,\"731\":1}}],[\"多样化采集\",{\"1\":{\"12\":1,\"731\":1}}],[\"多副本存储支持权限管理\",{\"1\":{\"12\":1,\"731\":1}}],[\"多分片\",{\"1\":{\"12\":1,\"731\":1}}],[\"多硬盘\",{\"1\":{\"12\":1,\"731\":1}}],[\"多主集群等模式\",{\"1\":{\"12\":1,\"731\":1}}],[\"7个\",{\"1\":{\"1868\":1}}],[\"79020527\",{\"1\":{\"1503\":1}}],[\"79\",{\"1\":{\"1367\":1}}],[\"79748\",{\"1\":{\"58\":2,\"1963\":2}}],[\"74273953\",{\"1\":{\"1574\":1}}],[\"7480014\",{\"1\":{\"1380\":1}}],[\"74\",{\"1\":{\"1367\":1}}],[\"7dc9a097090d\",{\"1\":{\"1638\":1}}],[\"7d\",{\"1\":{\"1367\":1}}],[\"7a\",{\"1\":{\"1367\":1}}],[\"738\",{\"1\":{\"1866\":1}}],[\"73866\",{\"1\":{\"28\":1}}],[\"73\",{\"1\":{\"1367\":2}}],[\"78797506\",{\"1\":{\"1574\":1}}],[\"78898113\",{\"1\":{\"1574\":1}}],[\"78011599\",{\"1\":{\"1346\":1}}],[\"78\",{\"1\":{\"1341\":2,\"1367\":2}}],[\"754\",{\"1\":{\"1530\":2}}],[\"750x1334\",{\"1\":{\"1435\":1}}],[\"7511cb18a05e\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"75\",{\"1\":{\"1338\":1,\"1367\":2}}],[\"75f\",{\"1\":{\"352\":1,\"365\":1}}],[\"720\",{\"1\":{\"1338\":2,\"1435\":3}}],[\"72\",{\"1\":{\"1338\":2,\"1367\":1,\"1435\":2}}],[\"77\",{\"1\":{\"1367\":1}}],[\"77ec123979f83f7caef71c4ca70abeeb\",{\"1\":{\"1335\":1}}],[\"77568718\",{\"1\":{\"1320\":1}}],[\"7za\",{\"1\":{\"1292\":1}}],[\"70个+\",{\"1\":{\"1868\":1}}],[\"704514698\",{\"1\":{\"1555\":1}}],[\"7045xxx\",{\"1\":{\"1518\":1}}],[\"70\",{\"1\":{\"1367\":2}}],[\"7001\",{\"1\":{\"822\":1}}],[\"70905ms\",{\"1\":{\"103\":1}}],[\"7091\",{\"1\":{\"12\":1,\"731\":1}}],[\"71\",{\"1\":{\"103\":1,\"1367\":1,\"1709\":1}}],[\"71ffca54ae501119350017ef83de8a60\",{\"1\":{\"103\":1}}],[\"76084580\",{\"1\":{\"1574\":1}}],[\"767\",{\"1\":{\"1346\":2}}],[\"765\",{\"1\":{\"1346\":2}}],[\"76\",{\"1\":{\"103\":1,\"1367\":1,\"1435\":2}}],[\"7\",{\"0\":{\"262\":1,\"284\":1,\"354\":1,\"691\":1,\"900\":1,\"1092\":1,\"1196\":1},\"1\":{\"12\":1,\"94\":1,\"144\":1,\"145\":1,\"227\":1,\"228\":1,\"246\":1,\"298\":1,\"347\":1,\"351\":1,\"360\":1,\"525\":1,\"598\":2,\"635\":1,\"693\":1,\"731\":1,\"793\":1,\"799\":1,\"802\":1,\"1078\":1,\"1253\":1,\"1256\":1,\"1259\":1,\"1262\":1,\"1274\":1,\"1277\":1,\"1280\":1,\"1283\":1,\"1286\":2,\"1367\":1,\"1417\":1,\"1481\":1,\"1756\":1}}],[\"5aba47ca5188255c56687783\",{\"1\":{\"1515\":1}}],[\"5aa1240b6fb9a028dc409a34\",{\"1\":{\"1503\":1}}],[\"5s\",{\"1\":{\"1435\":1,\"1799\":1}}],[\"5e00bc2051882512454b44f3\",{\"1\":{\"1540\":1}}],[\"5e\",{\"1\":{\"1367\":1}}],[\"5c\",{\"1\":{\"1367\":1}}],[\"5演进\",{\"1\":{\"808\":1}}],[\"5m\",{\"1\":{\"631\":1,\"638\":1,\"1317\":1}}],[\"5640533\",{\"1\":{\"1905\":1}}],[\"56340949\",{\"1\":{\"1320\":1}}],[\"567\",{\"1\":{\"1070\":1}}],[\"56\",{\"1\":{\"298\":1,\"1367\":1}}],[\"56644\",{\"1\":{\"67\":1}}],[\"51148825\",{\"1\":{\"1908\":1}}],[\"512\",{\"1\":{\"1338\":8,\"1435\":8}}],[\"51\",{\"1\":{\"298\":1,\"822\":1,\"1078\":2,\"1367\":1}}],[\"52005261\",{\"1\":{\"1580\":1}}],[\"5245923\",{\"1\":{\"1386\":1,\"1669\":1}}],[\"52\",{\"1\":{\"298\":1,\"1078\":2,\"1367\":2}}],[\"57\",{\"1\":{\"298\":1,\"614\":1,\"615\":1,\"630\":1,\"1367\":2}}],[\"57964\",{\"1\":{\"118\":4}}],[\"59822a7b2fad\",{\"1\":{\"1503\":1}}],[\"595\",{\"1\":{\"820\":1}}],[\"59\",{\"1\":{\"298\":1,\"1367\":2}}],[\"5974254\",{\"1\":{\"121\":1}}],[\"5倍+1\",{\"1\":{\"215\":1}}],[\"50x\",{\"1\":{\"640\":2}}],[\"504\",{\"1\":{\"640\":1}}],[\"503\",{\"1\":{\"640\":1}}],[\"50387207\",{\"1\":{\"115\":1}}],[\"502\",{\"1\":{\"640\":1}}],[\"500k\",{\"1\":{\"1317\":2}}],[\"500\",{\"1\":{\"640\":1}}],[\"500000\",{\"1\":{\"1799\":1}}],[\"5000\",{\"1\":{\"537\":1}}],[\"50\",{\"1\":{\"631\":2,\"1078\":2,\"1305\":2,\"1367\":1,\"1534\":1}}],[\"50742\",{\"1\":{\"615\":2}}],[\"50ms\",{\"1\":{\"103\":1}}],[\"53707042\",{\"1\":{\"1905\":1}}],[\"53\",{\"1\":{\"103\":1,\"298\":2,\"1078\":1,\"1367\":1}}],[\"58\",{\"1\":{\"103\":1,\"298\":1,\"1367\":1}}],[\"5849471\",{\"1\":{\"1380\":1}}],[\"584\",{\"0\":{\"85\":1},\"1\":{\"85\":1}}],[\"54\",{\"1\":{\"103\":1,\"298\":1,\"615\":1,\"1078\":1,\"1367\":2}}],[\"5x\",{\"1\":{\"94\":1,\"1341\":2}}],[\"55213884\",{\"1\":{\"1453\":1}}],[\"5594570\",{\"0\":{\"64\":1}}],[\"55\",{\"1\":{\"52\":1,\"298\":1,\"615\":1,\"1367\":1}}],[\"5\",{\"0\":{\"208\":1,\"216\":1,\"260\":1,\"282\":1,\"335\":1,\"352\":1,\"384\":1,\"640\":1,\"854\":1,\"873\":1,\"1074\":1,\"1128\":1,\"1146\":1,\"1168\":1,\"1313\":1,\"1447\":1,\"1607\":1},\"1\":{\"12\":1,\"144\":1,\"145\":1,\"181\":1,\"227\":1,\"228\":1,\"246\":1,\"265\":1,\"298\":1,\"327\":1,\"332\":4,\"339\":1,\"353\":1,\"405\":1,\"477\":1,\"525\":1,\"583\":1,\"595\":1,\"598\":2,\"614\":1,\"615\":1,\"619\":1,\"630\":1,\"693\":1,\"731\":1,\"738\":1,\"760\":1,\"763\":1,\"769\":1,\"793\":1,\"796\":2,\"799\":1,\"802\":1,\"805\":2,\"833\":1,\"884\":1,\"917\":1,\"923\":1,\"938\":1,\"942\":1,\"984\":3,\"1002\":1,\"1064\":1,\"1078\":1,\"1253\":1,\"1256\":1,\"1259\":1,\"1262\":1,\"1268\":1,\"1274\":1,\"1277\":1,\"1280\":1,\"1283\":1,\"1286\":5,\"1289\":1,\"1317\":1,\"1338\":1,\"1346\":2,\"1367\":1,\"1416\":1,\"1435\":4,\"1476\":1,\"1481\":1,\"1488\":1,\"1512\":1,\"1518\":3,\"1530\":1,\"1534\":10,\"1549\":1,\"1555\":1,\"1567\":1,\"1592\":1,\"1595\":1,\"1712\":1,\"1756\":2,\"1778\":1,\"1799\":1,\"1850\":1,\"1905\":1}}],[\"缓存模板类\",{\"1\":{\"1598\":1}}],[\"缓存最新的一个事件\",{\"1\":{\"1546\":1}}],[\"缓存中存在不一致性\",{\"1\":{\"1222\":1}}],[\"缓存一致性\",{\"1\":{\"1218\":1}}],[\"缓存\",{\"0\":{\"365\":1},\"1\":{\"365\":1}}],[\"缓存线程池\",{\"1\":{\"247\":2,\"828\":2,\"950\":1}}],[\"缓存注解\",{\"1\":{\"12\":1,\"731\":1}}],[\"缓存数据库\",{\"1\":{\"12\":1,\"731\":1}}],[\"缓存服务\",{\"1\":{\"12\":1,\"731\":1}}],[\"角色菜单权限分配\",{\"1\":{\"14\":1,\"733\":1}}],[\"角色管理\",{\"1\":{\"14\":1,\"668\":1,\"733\":1}}],[\"角色\",{\"1\":{\"12\":1,\"731\":1}}],[\"角色校验\",{\"1\":{\"12\":1,\"731\":1}}],[\"oa\",{\"1\":{\"1952\":1}}],[\"owner\",{\"1\":{\"1772\":1}}],[\"oh\",{\"1\":{\"1708\":1,\"1712\":1}}],[\"ohpm\",{\"1\":{\"1708\":1,\"1711\":1,\"1712\":1}}],[\"ohos\",{\"1\":{\"1702\":1,\"1707\":1,\"1708\":4,\"1712\":5}}],[\"o3\",{\"1\":{\"1534\":1}}],[\"o0\",{\"1\":{\"1534\":1}}],[\"ot\",{\"1\":{\"1530\":1}}],[\"others\",{\"1\":{\"1604\":1}}],[\"otherwise\",{\"1\":{\"631\":1}}],[\"other\",{\"1\":{\"359\":1}}],[\"occur\",{\"1\":{\"1840\":1}}],[\"occupationtv\",{\"1\":{\"1364\":1}}],[\"ocp\",{\"0\":{\"752\":1}}],[\"o2\",{\"1\":{\"1210\":1}}],[\"o8888888o\",{\"1\":{\"711\":1}}],[\"ooooo\",{\"1\":{\"711\":1}}],[\"oos\",{\"1\":{\"334\":2}}],[\"oms\",{\"1\":{\"668\":2}}],[\"ok\",{\"1\":{\"895\":1,\"978\":2,\"1009\":4,\"1015\":2,\"1022\":2,\"1030\":6,\"1417\":2,\"1770\":1}}],[\"okr这5个特性\",{\"1\":{\"589\":1}}],[\"okr的使用是可以刺激我们团队的3个内在在动机\",{\"1\":{\"589\":1}}],[\"okr较为重要的点\",{\"1\":{\"589\":1}}],[\"okr落地\",{\"0\":{\"580\":1},\"1\":{\"580\":1}}],[\"okhttpbuilder\",{\"1\":{\"1329\":2}}],[\"okhttp添加拦截器\",{\"1\":{\"1329\":1}}],[\"okhttp\",{\"1\":{\"227\":1}}],[\"okhttp3\",{\"1\":{\"52\":1,\"1329\":1,\"1580\":1}}],[\"old\",{\"0\":{\"1142\":1,\"1143\":1},\"1\":{\"900\":11}}],[\"oldtable\",{\"1\":{\"352\":3}}],[\"oldvalue\",{\"1\":{\"333\":2,\"348\":2,\"350\":4}}],[\"oldcapacity+oldcapacity\",{\"1\":{\"332\":1}}],[\"oldcapacity\",{\"1\":{\"332\":7,\"338\":3,\"352\":2}}],[\"overview\",{\"1\":{\"1552\":1}}],[\"overlay\",{\"1\":{\"604\":2,\"657\":1}}],[\"overflows\",{\"1\":{\"359\":1}}],[\"overflow\",{\"1\":{\"332\":2,\"338\":1,\"359\":4,\"882\":1}}],[\"overflowed\",{\"0\":{\"97\":1}}],[\"override\",{\"1\":{\"154\":1,\"259\":12,\"409\":1,\"415\":4,\"416\":2,\"422\":3,\"428\":6,\"435\":3,\"441\":1,\"447\":9,\"453\":5,\"459\":4,\"465\":10,\"471\":3,\"477\":1,\"483\":4,\"489\":8,\"495\":2,\"501\":6,\"507\":14,\"513\":3,\"519\":3,\"525\":4,\"531\":8,\"537\":10,\"543\":4,\"650\":1,\"823\":2,\"867\":3,\"868\":1,\"869\":1,\"870\":2,\"876\":7,\"880\":8,\"884\":1,\"897\":1,\"904\":2,\"905\":3,\"907\":1,\"908\":2,\"917\":6,\"995\":1,\"1188\":2,\"1295\":7,\"1305\":4,\"1307\":3,\"1320\":1,\"1332\":1,\"1349\":3,\"1358\":1,\"1364\":4,\"1383\":11,\"1392\":1,\"1402\":1,\"1416\":3,\"1468\":7,\"1518\":4,\"1546\":1,\"1555\":1,\"1592\":3,\"1598\":3,\"1601\":4,\"1604\":8,\"1610\":6,\"1626\":1,\"1666\":11,\"1675\":1,\"1685\":1,\"1731\":2,\"1732\":3,\"1736\":2,\"1737\":7,\"1738\":5,\"1739\":5,\"1839\":1,\"1851\":1,\"1867\":1}}],[\"outfile\",{\"1\":{\"1613\":3}}],[\"outpath\",{\"1\":{\"1613\":6}}],[\"output=>\",{\"1\":{\"1521\":1}}],[\"outputs\",{\"1\":{\"103\":3,\"1323\":2,\"1335\":2,\"1459\":2,\"1613\":1,\"1711\":1}}],[\"output\",{\"1\":{\"94\":1,\"1417\":1,\"1828\":1}}],[\"outstate\",{\"1\":{\"1295\":1,\"1468\":1}}],[\"outofmemoryerror\",{\"1\":{\"1119\":3}}],[\"out\",{\"1\":{\"154\":3,\"169\":8,\"259\":4,\"327\":1,\"334\":3,\"365\":1,\"435\":3,\"441\":3,\"447\":4,\"453\":5,\"459\":2,\"465\":4,\"471\":3,\"477\":1,\"483\":3,\"489\":4,\"501\":5,\"507\":10,\"519\":1,\"531\":6,\"537\":2,\"543\":1,\"823\":2,\"843\":3,\"853\":1,\"868\":1,\"870\":8,\"884\":4,\"897\":1,\"900\":8,\"904\":3,\"905\":3,\"907\":1,\"908\":6,\"958\":2,\"983\":1,\"1188\":5,\"1203\":6,\"1368\":1,\"1518\":1,\"1530\":2,\"1534\":1,\"1555\":1,\"1601\":2,\"1604\":1,\"1730\":1,\"1731\":2,\"1732\":1,\"1778\":2}}],[\"osbranch\",{\"1\":{\"1377\":1}}],[\"osversion\",{\"1\":{\"1377\":1}}],[\"osr编译\",{\"1\":{\"1208\":1}}],[\"os\",{\"1\":{\"115\":2,\"896\":1,\"1055\":2,\"1063\":2,\"1064\":2,\"1468\":1,\"1717\":2,\"1718\":1,\"1730\":2,\"1731\":6,\"1732\":3,\"1736\":1,\"1737\":2,\"1739\":26,\"1746\":2,\"1756\":1,\"1757\":4,\"1762\":1,\"1763\":1,\"1798\":1,\"1805\":1,\"1806\":2,\"1827\":1,\"1828\":1,\"1829\":2,\"1830\":1,\"1832\":3,\"1852\":1,\"1860\":2,\"1861\":1,\"1866\":2,\"1870\":3}}],[\"op库是空实现\",{\"1\":{\"1595\":1}}],[\"opacity\",{\"1\":{\"1392\":2,\"1402\":8,\"1675\":2,\"1685\":8,\"1713\":1}}],[\"opaque\",{\"0\":{\"70\":1},\"1\":{\"70\":1}}],[\"oppo\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"op\",{\"1\":{\"1329\":1,\"1589\":1,\"1595\":1,\"1911\":1}}],[\"opcode\",{\"1\":{\"994\":3,\"1093\":1,\"1101\":2}}],[\"opt\",{\"1\":{\"822\":1,\"833\":2}}],[\"opts\",{\"1\":{\"711\":2}}],[\"opts=\",{\"1\":{\"711\":1}}],[\"option开关选项\",{\"1\":{\"1534\":1}}],[\"option选项开关\",{\"1\":{\"1534\":1}}],[\"options\",{\"1\":{\"631\":2,\"650\":1,\"651\":2,\"652\":2,\"1055\":2,\"1062\":1,\"1604\":4,\"1861\":1}}],[\"option\",{\"1\":{\"73\":1,\"631\":7,\"1534\":1}}],[\"operations\",{\"1\":{\"1772\":1}}],[\"operations结构\",{\"1\":{\"1772\":1}}],[\"operandstack\",{\"1\":{\"984\":7,\"993\":7,\"1009\":3,\"1023\":3,\"1030\":5,\"1036\":3,\"1095\":1,\"1101\":2}}],[\"operlog\",{\"1\":{\"668\":3}}],[\"openharmony\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"openable\",{\"1\":{\"1417\":2}}],[\"openimageactivity\",{\"1\":{\"1416\":4,\"1417\":4}}],[\"openfilechooser\",{\"1\":{\"1416\":3}}],[\"openjdk\",{\"1\":{\"688\":1}}],[\"open\",{\"1\":{\"453\":2,\"631\":1,\"750\":1,\"1503\":1,\"1518\":7,\"1521\":1,\"1771\":1,\"1772\":2,\"1786\":1,\"1788\":2,\"1922\":1}}],[\"opengl代码编写完整流程\",{\"1\":{\"1540\":1}}],[\"opengl渲染管线处理流程\",{\"1\":{\"1540\":1}}],[\"opengl坐标\",{\"1\":{\"1540\":1}}],[\"opengl的安卓支持\",{\"1\":{\"1540\":1}}],[\"opengl原理及思考\",{\"1\":{\"1540\":1}}],[\"opengl学习方法\",{\"1\":{\"1540\":1}}],[\"opengl快速学习\",{\"0\":{\"1540\":1}}],[\"opengl图像学习方法论\",{\"0\":{\"1537\":1}}],[\"opengl\",{\"1\":{\"305\":1,\"1540\":5}}],[\"obslist\",{\"1\":{\"1364\":5}}],[\"observable<basedatabean<isupdatebean>>\",{\"1\":{\"1595\":2}}],[\"observable\",{\"1\":{\"1364\":1}}],[\"observon\",{\"1\":{\"1364\":1}}],[\"observe\",{\"1\":{\"1364\":2}}],[\"observeon\",{\"1\":{\"1364\":2}}],[\"observetv\",{\"1\":{\"1364\":5}}],[\"observer\",{\"1\":{\"519\":5}}],[\"obtainpendingpost\",{\"1\":{\"1546\":1}}],[\"obtain\",{\"1\":{\"359\":1,\"1648\":1,\"1731\":2,\"1739\":4,\"1756\":2,\"1849\":1,\"1850\":1}}],[\"obtainstyledattributes\",{\"1\":{\"70\":1}}],[\"obj2\",{\"1\":{\"1530\":1}}],[\"obj1\",{\"1\":{\"1530\":1}}],[\"obj\",{\"1\":{\"154\":3,\"259\":5,\"447\":8,\"983\":3,\"1364\":2,\"1416\":1,\"1518\":3,\"1530\":1,\"1717\":1,\"1732\":3,\"1739\":4,\"1756\":7,\"1762\":4,\"1805\":2,\"1806\":4,\"1850\":1,\"1851\":1}}],[\"object互相引用\",{\"1\":{\"1029\":1}}],[\"objecttest\",{\"1\":{\"1024\":1}}],[\"object中\",{\"1\":{\"1022\":1}}],[\"objectweb\",{\"1\":{\"559\":1}}],[\"objectmap\",{\"1\":{\"405\":4}}],[\"object>\",{\"1\":{\"405\":1,\"885\":2}}],[\"objects\",{\"1\":{\"348\":2,\"351\":2,\"1364\":2,\"1530\":1}}],[\"objectoutputstream\",{\"1\":{\"334\":4}}],[\"objectinputstream\",{\"1\":{\"334\":2}}],[\"object\",{\"0\":{\"983\":1},\"1\":{\"154\":2,\"169\":4,\"259\":17,\"334\":2,\"338\":1,\"342\":4,\"348\":5,\"350\":1,\"351\":1,\"381\":2,\"405\":4,\"409\":1,\"447\":7,\"822\":5,\"823\":4,\"843\":2,\"870\":2,\"885\":3,\"896\":1,\"900\":1,\"917\":4,\"950\":2,\"958\":2,\"979\":1,\"983\":1,\"1008\":2,\"1009\":13,\"1015\":9,\"1016\":1,\"1023\":5,\"1029\":2,\"1030\":2,\"1036\":2,\"1044\":1,\"1064\":2,\"1070\":1,\"1109\":1,\"1230\":1,\"1310\":1,\"1313\":1,\"1364\":2,\"1402\":1,\"1506\":1,\"1518\":1,\"1521\":3,\"1530\":3,\"1534\":1,\"1546\":9,\"1589\":3,\"1592\":18,\"1598\":2,\"1685\":1,\"1756\":2}}],[\"objc\",{\"1\":{\"67\":1}}],[\"obfuscator\",{\"1\":{\"103\":1}}],[\"obfuscation\",{\"1\":{\"103\":1}}],[\"of<defaultbloc>\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"of<t\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"of\",{\"0\":{\"64\":1,\"67\":1},\"1\":{\"67\":1,\"351\":1,\"359\":3,\"362\":2,\"615\":1,\"631\":5,\"805\":1,\"879\":1,\"984\":1,\"1292\":1,\"1518\":1,\"1530\":1,\"1534\":2,\"1555\":1,\"1641\":1,\"1648\":2}}],[\"offp++\",{\"1\":{\"1770\":1}}],[\"offp\",{\"1\":{\"1770\":1}}],[\"offstage\",{\"1\":{\"1392\":2,\"1402\":5,\"1675\":2,\"1685\":5}}],[\"offscreen\",{\"1\":{\"1392\":2,\"1675\":2}}],[\"offsets\",{\"1\":{\"1798\":2}}],[\"offset\",{\"1\":{\"1094\":4,\"1096\":1,\"1203\":2,\"1383\":1,\"1666\":1}}],[\"offer\",{\"1\":{\"298\":1,\"895\":1}}],[\"off\",{\"1\":{\"58\":1,\"1713\":1,\"1770\":1,\"1963\":1}}],[\"onvmcreated\",{\"1\":{\"1861\":1}}],[\"onzygoteinit\",{\"1\":{\"1778\":2}}],[\"onunbind\",{\"1\":{\"1737\":3}}],[\"onbind\",{\"1\":{\"1737\":2}}],[\"onbackground\",{\"1\":{\"1709\":2}}],[\"onbackpress\",{\"1\":{\"1707\":1,\"1709\":1}}],[\"onfinish\",{\"1\":{\"1712\":1,\"1713\":1}}],[\"onforeground\",{\"1\":{\"1709\":2}}],[\"onpagehide\",{\"1\":{\"1707\":1,\"1709\":1}}],[\"onpageshow\",{\"1\":{\"1707\":1,\"1709\":1}}],[\"onprogresschanged\",{\"1\":{\"1416\":2}}],[\"onattached\",{\"1\":{\"1702\":1}}],[\"onactivityresult\",{\"1\":{\"1416\":3,\"1417\":1}}],[\"onactivityresumed\",{\"1\":{\"1295\":1,\"1468\":1}}],[\"onactivitydestroyed\",{\"1\":{\"1295\":1,\"1468\":1}}],[\"onactivitysaveinstancestate\",{\"1\":{\"1295\":1,\"1468\":1}}],[\"onactivitystopped\",{\"1\":{\"1295\":1,\"1468\":1}}],[\"onactivitystarted\",{\"1\":{\"1295\":1,\"1468\":1}}],[\"onactivitypaused\",{\"1\":{\"1295\":1,\"1468\":1}}],[\"onactivitycreated\",{\"1\":{\"1295\":1,\"1468\":1}}],[\"onrestart\",{\"1\":{\"1787\":5}}],[\"onreceivevalue\",{\"1\":{\"1417\":8}}],[\"onrefresh\",{\"1\":{\"1383\":2,\"1666\":2}}],[\"onrefreshcallback\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"onservicedisconnected\",{\"1\":{\"1736\":2}}],[\"onserviceconnected\",{\"1\":{\"1736\":2}}],[\"onscroll\",{\"1\":{\"1708\":1}}],[\"onstart\",{\"1\":{\"1708\":2}}],[\"onsurfacechanged\",{\"1\":{\"1540\":1}}],[\"onsurfacecreated\",{\"1\":{\"1540\":1}}],[\"onsucess\",{\"1\":{\"1416\":2}}],[\"onshowfilechooser\",{\"1\":{\"1416\":1}}],[\"ondrawframe\",{\"1\":{\"1540\":1}}],[\"ondestroy\",{\"1\":{\"1416\":1,\"1598\":2,\"1610\":2,\"1709\":2,\"1737\":3}}],[\"ondoubletap\",{\"1\":{\"1402\":7,\"1685\":7}}],[\"ondoubletapfunc\",{\"1\":{\"1402\":6,\"1685\":6}}],[\"ontransact\",{\"1\":{\"1727\":2,\"1732\":2,\"1737\":2,\"1739\":2,\"1745\":1}}],[\"ontapfunc\",{\"1\":{\"1402\":6,\"1685\":6}}],[\"ontap\",{\"1\":{\"1402\":8,\"1685\":8}}],[\"ontextchanged\",{\"1\":{\"1349\":1,\"1364\":1}}],[\"onoffsetcallback\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"onobjectmonitor\",{\"1\":{\"822\":2}}],[\"onlongpress\",{\"1\":{\"1402\":7,\"1685\":7}}],[\"onlongpressfunc\",{\"1\":{\"1402\":6,\"1685\":6}}],[\"onloadmore\",{\"1\":{\"1383\":2,\"1666\":2}}],[\"only\",{\"0\":{\"43\":1,\"70\":1,\"82\":1},\"1\":{\"70\":1,\"351\":1,\"359\":1,\"631\":1,\"1402\":1,\"1685\":1}}],[\"onnext\",{\"1\":{\"1364\":2}}],[\"onhandleintent\",{\"1\":{\"1320\":1}}],[\"onconfirm\",{\"1\":{\"1711\":1,\"1713\":1}}],[\"oncreatewindow\",{\"1\":{\"1416\":1}}],[\"oncreate\",{\"1\":{\"1320\":5,\"1598\":2,\"1610\":8,\"1709\":2,\"1737\":3}}],[\"onclick\",{\"1\":{\"1305\":2,\"1307\":3,\"1402\":1,\"1685\":1,\"1709\":1}}],[\"on\",{\"1\":{\"73\":1,\"305\":1,\"359\":1,\"613\":1,\"629\":1,\"631\":4,\"638\":2,\"822\":2,\"867\":3,\"869\":3,\"879\":1,\"929\":1,\"1398\":1,\"1416\":1,\"1534\":1,\"1555\":1,\"1648\":1,\"1681\":1,\"1702\":1,\"1707\":1,\"1713\":2,\"1857\":3}}],[\"oneway模式下\",{\"1\":{\"1755\":1}}],[\"oneway\",{\"1\":{\"1751\":2}}],[\"onetoten\",{\"1\":{\"1521\":1}}],[\"onemillion\",{\"1\":{\"1518\":1}}],[\"one\",{\"0\":{\"67\":2},\"1\":{\"12\":2,\"67\":2,\"631\":1,\"731\":2,\"1555\":2,\"1756\":2,\"1857\":1}}],[\"o\",{\"1\":{\"16\":1,\"70\":1,\"88\":1,\"310\":1,\"322\":2,\"333\":1,\"348\":3,\"352\":1,\"711\":2,\"750\":1,\"1335\":1,\"1534\":1,\"1952\":1}}],[\"orhanobut\",{\"1\":{\"1629\":1}}],[\"orange\",{\"1\":{\"1518\":1}}],[\"oracle\",{\"1\":{\"12\":1,\"731\":1}}],[\"org\",{\"1\":{\"559\":1,\"650\":8,\"822\":4,\"1413\":4,\"1503\":1,\"1518\":1,\"1534\":1,\"1552\":1,\"1555\":3,\"1574\":1,\"1607\":1,\"1632\":1,\"1648\":1,\"1966\":1}}],[\"ordinary\",{\"1\":{\"459\":5}}],[\"order\",{\"1\":{\"334\":2,\"668\":4,\"1540\":1}}],[\"origuid\",{\"1\":{\"1717\":2}}],[\"origpid\",{\"1\":{\"1717\":2}}],[\"origin\",{\"0\":{\"1917\":1},\"1\":{\"79\":6,\"649\":1,\"651\":1,\"652\":1,\"1292\":1,\"1402\":3,\"1685\":3,\"1917\":1,\"1944\":2,\"1945\":3,\"1947\":1,\"1949\":3,\"1950\":2,\"1951\":2,\"1961\":2}}],[\"oriented\",{\"1\":{\"314\":1}}],[\"orientation=\",{\"1\":{\"1346\":1}}],[\"orientation\",{\"0\":{\"70\":1},\"1\":{\"70\":1}}],[\"orm框架\",{\"1\":{\"12\":1,\"731\":1}}],[\"or\",{\"1\":{\"12\":1,\"94\":1,\"359\":1,\"631\":1,\"731\":1,\"1064\":1,\"1332\":1,\"1335\":1,\"1604\":1,\"1648\":3,\"1840\":1}}],[\"或代码块中值\",{\"1\":{\"1518\":1}}],[\"或采用这种方式\",{\"1\":{\"1476\":1}}],[\"或升级轻量锁状态\",{\"1\":{\"1247\":1}}],[\"或者msg的触发时间是队列中最早的\",{\"1\":{\"1847\":1}}],[\"或者是消息队列的第一个消息时\",{\"1\":{\"1846\":1}}],[\"或者是调整内部数组的大小\",{\"1\":{\"335\":1}}],[\"或者消息队列被唤醒\",{\"1\":{\"1846\":1}}],[\"或者很多人不理解\",{\"1\":{\"1779\":1}}],[\"或者binder驱动在探测到没有空闲binder线程时会主动向server进程注册新的的binder线程\",{\"1\":{\"1752\":1}}],[\"或者交替运行实现完整的业务\",{\"1\":{\"1702\":1}}],[\"或者可以采用class\",{\"1\":{\"1601\":1}}],[\"或者引用该moudle\",{\"1\":{\"1481\":1}}],[\"或者全局变量会导致程序不易读\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"或者类似android\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"或者\",{\"1\":{\"1064\":1,\"1712\":1}}],[\"或特有命名空间\",{\"1\":{\"793\":1}}],[\"或\",{\"1\":{\"12\":1,\"731\":1,\"1133\":1,\"1518\":6,\"1756\":1}}],[\"如题\",{\"1\":{\"1958\":1}}],[\"如无创建\",{\"1\":{\"1923\":1}}],[\"如无内存泄漏\",{\"1\":{\"1119\":1}}],[\"如按钮\",{\"1\":{\"1837\":1}}],[\"如包含姓名\",{\"1\":{\"1711\":1}}],[\"如跟随在\",{\"1\":{\"1709\":1}}],[\"如用法示例\",{\"1\":{\"1589\":1}}],[\"如安卓代码一般编写\",{\"1\":{\"1552\":1}}],[\"如有改动须添加批注提示\",{\"1\":{\"1441\":1}}],[\"如下引用即可\",{\"1\":{\"1933\":1}}],[\"如下实现即可\",{\"0\":{\"1626\":1}}],[\"如下代码\",{\"1\":{\"1598\":1}}],[\"如下\",{\"1\":{\"1405\":1,\"1549\":1,\"1589\":1}}],[\"如模糊\",{\"1\":{\"1310\":1}}],[\"如hashcode\",{\"1\":{\"1117\":1}}],[\"如上两种用法\",{\"1\":{\"1595\":1}}],[\"如上图\",{\"1\":{\"738\":3}}],[\"如上图所示的demo类中\",{\"1\":{\"738\":1}}],[\"如上图所示\",{\"1\":{\"738\":1}}],[\"如上报错\",{\"1\":{\"40\":1}}],[\"如公司和部门是整体和部分的关系\",{\"1\":{\"735\":1}}],[\"如车和轮胎是整体和部分的关系\",{\"1\":{\"735\":1}}],[\"如何在\",{\"1\":{\"1709\":1}}],[\"如何学习ndk\",{\"0\":{\"1543\":1,\"1996\":1},\"2\":{\"1528\":1,\"1531\":1,\"1535\":1,\"1538\":1,\"1541\":1,\"1544\":1}}],[\"如何进行操作\",{\"1\":{\"1491\":1}}],[\"如何制表\",{\"0\":{\"1368\":1}}],[\"如何推行看重短期利益的人完成看似无用长期价值的事\",{\"1\":{\"1268\":1}}],[\"如何让重构真正在项目中落地\",{\"1\":{\"1268\":1}}],[\"如何让线程跑到安全点\",{\"1\":{\"1136\":1}}],[\"如何重构让代码可持续化\",{\"1\":{\"1253\":1}}],[\"如何减少上下文切换\",{\"0\":{\"821\":1}}],[\"如何做项目管理\",{\"1\":{\"586\":1}}],[\"如何向上报告\",{\"0\":{\"586\":1}}],[\"如何判定两个class相同\",{\"0\":{\"196\":1,\"1177\":1}}],[\"如java类\",{\"1\":{\"207\":1}}],[\"如此往复\",{\"1\":{\"207\":1}}],[\"如不强行停止\",{\"1\":{\"106\":1}}],[\"如果有则需要遍历队列数据\",{\"1\":{\"1841\":1}}],[\"如果有必要才加入性能监控\",{\"1\":{\"1207\":1}}],[\"如果有必要执行\",{\"1\":{\"200\":1}}],[\"如果第一次打开\",{\"1\":{\"1709\":1}}],[\"如果第一个数字为0\",{\"1\":{\"1349\":1}}],[\"如果第一个比第二个大\",{\"1\":{\"278\":1}}],[\"如果已打开项目\",{\"1\":{\"1709\":1}}],[\"如果帐号使用手机号码\",{\"1\":{\"1708\":1}}],[\"如果使用\",{\"1\":{\"1708\":1}}],[\"如果使aop失效\",{\"1\":{\"1589\":1}}],[\"如果对端设备不支持流转任务管理服务\",{\"1\":{\"1702\":2}}],[\"如果对象不会逃逸\",{\"1\":{\"1212\":1}}],[\"如果代码命名非常规范的话\",{\"1\":{\"1598\":1}}],[\"如果http开头\",{\"1\":{\"1592\":1}}],[\"如果mock\",{\"1\":{\"1592\":1}}],[\"如果markword指向当前线程执行栈帧\",{\"1\":{\"1248\":1}}],[\"如果map或entry为空\",{\"1\":{\"381\":1}}],[\"如果注解不存在\",{\"1\":{\"1592\":1}}],[\"如果接手项目或项目中期\",{\"1\":{\"1587\":1}}],[\"如果渲染器或图形视图过于复杂\",{\"1\":{\"1540\":1}}],[\"如果生成的类需要含有一个无参的构造函数\",{\"1\":{\"1518\":1}}],[\"如果想编辑\",{\"1\":{\"1491\":1}}],[\"如果能使用简单可以省心不少\",{\"1\":{\"1386\":1,\"1669\":1}}],[\"如果能保证\",{\"1\":{\"351\":1}}],[\"如果觉得实用\",{\"1\":{\"1341\":1}}],[\"如果要读取\",{\"1\":{\"1064\":1}}],[\"如果命令行没有传入\",{\"1\":{\"1063\":1}}],[\"如果创建新线程将使当前运行的线程超出maximumpoolsize\",{\"1\":{\"913\":1}}],[\"如果无法将任务加入blockingqueue\",{\"1\":{\"913\":1}}],[\"如果运行的线程等于或多于corepoolsize\",{\"1\":{\"913\":1}}],[\"如果任务大于阈值\",{\"1\":{\"897\":1}}],[\"如果任务足够小就计算任务\",{\"1\":{\"897\":1}}],[\"如果是\",{\"1\":{\"1022\":1}}],[\"如果是第一种情况\",{\"1\":{\"833\":1}}],[\"如果是透明的activity\",{\"1\":{\"70\":1}}],[\"如果你希望release包生效\",{\"1\":{\"1595\":1}}],[\"如果你需要根据对象的不同类型而采取不同行为\",{\"1\":{\"1277\":1}}],[\"如果你需要配置redis\",{\"1\":{\"707\":1}}],[\"如果你犯了足够多的错误\",{\"1\":{\"781\":1}}],[\"如果你不知道要用什么架构\",{\"1\":{\"311\":1}}],[\"如果安装成功\",{\"1\":{\"680\":1}}],[\"如果说会出现内存泄漏\",{\"1\":{\"385\":1}}],[\"如果我想共享线程的threadlocal数据怎么办\",{\"0\":{\"384\":1}}],[\"如果位置i的不为空\",{\"1\":{\"382\":1}}],[\"如果位置i不为空\",{\"1\":{\"382\":1}}],[\"如果这个对象只存在弱引用\",{\"1\":{\"385\":1}}],[\"如果这个entry对象的key和要设置的key相等\",{\"1\":{\"382\":1}}],[\"如果这个参数的值小于等于\",{\"1\":{\"338\":1}}],[\"如果当前正在发送消息\",{\"1\":{\"1826\":1}}],[\"如果当前运行的线程少于corepoolsize\",{\"1\":{\"913\":1}}],[\"如果当前位置是空的\",{\"1\":{\"382\":1}}],[\"如果当前遍历的值比父节点大的话\",{\"1\":{\"283\":1}}],[\"如果需要让它为\",{\"1\":{\"364\":1}}],[\"如果\",{\"1\":{\"363\":1,\"368\":1}}],[\"如果尝试的次数超过\",{\"1\":{\"359\":1}}],[\"如果连续两次不加锁操作得到的结果一致\",{\"1\":{\"359\":1}}],[\"如果哈希函数满足均匀性的要求\",{\"1\":{\"352\":1}}],[\"如果存在src\",{\"1\":{\"1475\":1}}],[\"如果存在\",{\"1\":{\"1063\":1}}],[\"如果存在的话就更新这个键值对的值为\",{\"1\":{\"350\":1}}],[\"如果存在父节点\",{\"1\":{\"197\":1,\"1175\":1}}],[\"如果改变了需要抛出\",{\"1\":{\"335\":1}}],[\"如果不想这样重复的写来写去\",{\"1\":{\"1598\":1}}],[\"如果不是强烈需要\",{\"1\":{\"1494\":1}}],[\"如果不是\",{\"1\":{\"984\":1,\"1537\":1}}],[\"如果不是大根堆\",{\"1\":{\"283\":1}}],[\"如果不清理自定义的\",{\"1\":{\"385\":1}}],[\"如果不⼀致\",{\"1\":{\"382\":1}}],[\"如果不够时\",{\"1\":{\"332\":1}}],[\"如果没有数据放在头\",{\"1\":{\"1841\":1}}],[\"如果没有其他线程操作\",{\"1\":{\"1239\":1}}],[\"如果没有\",{\"1\":{\"1116\":1,\"1962\":1}}],[\"如果没有找到的话再到\",{\"1\":{\"368\":1}}],[\"如果没有特别说明\",{\"1\":{\"329\":1}}],[\"如果没有加载过\",{\"1\":{\"197\":1,\"1175\":1}}],[\"如果一个对象可以安全的被多个线程同时访问\",{\"1\":{\"1231\":1}}],[\"如果一个类加载器收到加载请求\",{\"1\":{\"1175\":1}}],[\"如果一个类加载器收到类加载请求\",{\"1\":{\"194\":1}}],[\"如果一个请求涉及不同类型的处理单元\",{\"1\":{\"314\":1}}],[\"如果分布不均匀\",{\"1\":{\"285\":1}}],[\"如果父节点索引指向最大值索引\",{\"1\":{\"283\":1}}],[\"如果父节点大于最大值\",{\"1\":{\"283\":1}}],[\"如果右节点大于左节点\",{\"1\":{\"283\":1}}],[\"如果该元素\",{\"1\":{\"280\":1}}],[\"如果该对象已经重写了\",{\"1\":{\"145\":1}}],[\"如果在第二次标记\",{\"1\":{\"200\":1}}],[\"如果用自定义同名类来动态替换java核心api中定义类型\",{\"1\":{\"195\":1,\"1176\":1}}],[\"如果青年代在survivor中相同年龄所有对象大小大于survivor空间的一半\",{\"1\":{\"184\":1}}],[\"如果修改idea配置不生效的话\",{\"1\":{\"67\":1}}],[\"如base64\",{\"1\":{\"12\":1,\"731\":1}}],[\"如身份证\",{\"1\":{\"12\":1,\"731\":1}}],[\"如\",{\"1\":{\"12\":2,\"731\":2,\"735\":1,\"1709\":2}}],[\"权限检查\",{\"1\":{\"1790\":1}}],[\"权限管理\",{\"0\":{\"1716\":1}}],[\"权限判断\",{\"1\":{\"1561\":1}}],[\"权限支持\",{\"1\":{\"1416\":1}}],[\"权限控制\",{\"1\":{\"1377\":1}}],[\"权限访问\",{\"1\":{\"802\":1}}],[\"权限\",{\"1\":{\"12\":1,\"731\":1,\"1416\":1,\"1708\":1}}],[\"权限校验\",{\"1\":{\"12\":1,\"731\":1}}],[\"权限注解\",{\"1\":{\"12\":1,\"731\":1}}],[\"权限认证\",{\"1\":{\"12\":1,\"731\":1}}],[\"权限认证使用redis\",{\"1\":{\"9\":1,\"728\":1}}],[\"jfrog\",{\"1\":{\"1905\":1}}],[\"jfloatarray\",{\"1\":{\"1530\":1}}],[\"jfloat\",{\"1\":{\"1530\":2}}],[\"jthrowable\",{\"1\":{\"1530\":1}}],[\"jdr\",{\"1\":{\"1762\":3}}],[\"jdwp=transport=dt\",{\"1\":{\"1607\":1}}],[\"jdoublearray\",{\"1\":{\"1530\":1}}],[\"jdouble\",{\"1\":{\"1530\":2}}],[\"jdk8\",{\"1\":{\"1078\":1}}],[\"jdk\",{\"0\":{\"360\":1},\"1\":{\"67\":3,\"327\":1,\"329\":1,\"347\":1,\"355\":1,\"360\":3,\"688\":1,\"1030\":10}}],[\"jdk10\",{\"1\":{\"1078\":1}}],[\"jdk1\",{\"1\":{\"67\":3,\"1030\":10,\"1078\":5}}],[\"jbytearray\",{\"1\":{\"1530\":1}}],[\"jbyte\",{\"1\":{\"1530\":2}}],[\"jbooleanarray\",{\"1\":{\"1530\":1}}],[\"jboolean\",{\"1\":{\"1530\":4,\"1756\":1}}],[\"jni方法注册\",{\"1\":{\"1861\":1}}],[\"jni映射调用c++方法\",{\"1\":{\"1777\":1}}],[\"jni引用管理\",{\"1\":{\"1530\":1}}],[\"jni对应描述转换\",{\"1\":{\"1530\":2}}],[\"jni对应描述\",{\"1\":{\"1530\":1}}],[\"jni操作\",{\"1\":{\"1530\":1}}],[\"jnithrownullpointerexception\",{\"1\":{\"1762\":1}}],[\"jnithrowexception\",{\"1\":{\"1717\":1}}],[\"jnit\",{\"1\":{\"1530\":1}}],[\"jnicall\",{\"1\":{\"1530\":1}}],[\"jniexport\",{\"1\":{\"1530\":1}}],[\"jnienv\",{\"1\":{\"1530\":3,\"1717\":2,\"1756\":1,\"1762\":1,\"1829\":1}}],[\"jni与ndk区别和学习思路\",{\"1\":{\"1530\":1}}],[\"jni\",{\"1\":{\"1527\":1,\"1530\":1,\"1718\":1,\"1746\":3,\"1756\":1,\"1757\":1,\"1763\":1,\"1832\":1,\"1870\":2}}],[\"jni代码编写\",{\"1\":{\"1527\":1}}],[\"jniapp模块下nativelib\",{\"1\":{\"1527\":1}}],[\"jni基本操作\",{\"1\":{\"1527\":1}}],[\"jni基础知识讲解\",{\"0\":{\"1530\":1},\"1\":{\"1527\":1,\"1530\":1,\"1533\":1}}],[\"jni实战\",{\"1\":{\"1527\":1,\"1530\":1,\"1533\":1}}],[\"jni实战用法\",{\"0\":{\"1527\":1}}],[\"jnilibs\",{\"1\":{\"1475\":4}}],[\"j6d2rvbpa\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"jgilfelt\",{\"1\":{\"1329\":1}}],[\"jpushtoken\",{\"1\":{\"1377\":1}}],[\"jpeg\",{\"1\":{\"1292\":1}}],[\"jpg\",{\"1\":{\"1292\":1,\"1417\":1,\"1435\":1}}],[\"jps\",{\"0\":{\"1151\":1},\"1\":{\"867\":2}}],[\"jhat\",{\"0\":{\"1155\":1},\"1\":{\"1155\":1}}],[\"j2se1\",{\"1\":{\"1078\":3}}],[\"jmap\",{\"0\":{\"1154\":1},\"1\":{\"1154\":1}}],[\"jmsg\",{\"1\":{\"1036\":2}}],[\"jmm会把该线程对应的本地内存置为无效\",{\"1\":{\"862\":1}}],[\"jmm会把该线程对应的本地内存中的共享变量刷新到主内存中\",{\"1\":{\"862\":1}}],[\"jmm会把本地内存中共享变量值刷新到主内存\",{\"1\":{\"861\":1}}],[\"jmm通过控制主内存与每个线程的本地内存之间的交互\",{\"1\":{\"858\":1}}],[\"jmm\",{\"1\":{\"151\":4,\"1219\":1}}],[\"jlongarray\",{\"1\":{\"1530\":1}}],[\"jlong\",{\"1\":{\"1530\":2,\"1717\":2,\"1829\":1}}],[\"jlobject\",{\"1\":{\"1023\":4}}],[\"jlthrowable\",{\"1\":{\"1036\":2}}],[\"jlclass\",{\"1\":{\"1030\":10}}],[\"jchararray\",{\"1\":{\"1530\":1}}],[\"jchar\",{\"1\":{\"1530\":2}}],[\"jchars\",{\"1\":{\"1015\":2}}],[\"jcenter\",{\"1\":{\"1289\":1,\"1292\":1,\"1491\":1,\"1905\":4,\"1911\":2}}],[\"jconsole\",{\"0\":{\"1157\":1}}],[\"jclass\",{\"1\":{\"1023\":1,\"1029\":1,\"1030\":8,\"1530\":1,\"1829\":1}}],[\"jenkins\",{\"1\":{\"1613\":1}}],[\"jeasonlzy\",{\"1\":{\"1574\":1}}],[\"jeep\",{\"1\":{\"435\":3}}],[\"jeepcar\",{\"1\":{\"435\":4}}],[\"jetbrains\",{\"1\":{\"19\":1,\"23\":1,\"25\":1,\"109\":3,\"1552\":1,\"1555\":3}}],[\"j+1\",{\"1\":{\"278\":3}}],[\"j++\",{\"1\":{\"278\":1,\"279\":1,\"282\":1,\"284\":2,\"352\":1}}],[\"j<\",{\"1\":{\"278\":1}}],[\"j\",{\"1\":{\"278\":4,\"279\":4,\"282\":4,\"283\":3,\"284\":4,\"352\":4,\"359\":9,\"984\":2,\"1009\":2,\"1022\":1,\"1530\":2}}],[\"justifycontent\",{\"1\":{\"1707\":1,\"1708\":1}}],[\"junit\",{\"1\":{\"1567\":1}}],[\"juicy\",{\"1\":{\"1518\":1}}],[\"juejin\",{\"1\":{\"1503\":1,\"1515\":1,\"1540\":1}}],[\"judge\",{\"1\":{\"259\":2}}],[\"juc总结\",{\"0\":{\"961\":1,\"964\":1},\"1\":{\"964\":1}}],[\"juc数据交换\",{\"1\":{\"958\":1}}],[\"juc使用\",{\"1\":{\"958\":1}}],[\"juc方法\",{\"1\":{\"935\":1}}],[\"juc示例\",{\"1\":{\"929\":1}}],[\"juc包\",{\"1\":{\"852\":1}}],[\"juc编程源码\",{\"0\":{\"825\":1,\"854\":1}}],[\"juc\",{\"1\":{\"249\":1,\"825\":1,\"835\":1,\"854\":1,\"926\":1,\"938\":1},\"2\":{\"128\":1,\"548\":1,\"827\":1,\"830\":1,\"837\":1,\"856\":1,\"866\":1,\"872\":1,\"892\":1,\"899\":1,\"902\":1,\"910\":1,\"919\":1,\"922\":1,\"925\":1,\"928\":1,\"931\":1,\"934\":1,\"937\":1,\"940\":1,\"952\":1,\"957\":1,\"960\":1,\"963\":1,\"966\":1}}],[\"jvmargs=\",{\"1\":{\"1607\":1}}],[\"jvm不识别\",{\"1\":{\"1487\":1}}],[\"jvm不识别的\",{\"1\":{\"1486\":1}}],[\"jvm将对象头标志位设为\",{\"1\":{\"1247\":1}}],[\"jvm采用基于计数器\",{\"1\":{\"1209\":1}}],[\"jvm命令\",{\"0\":{\"1150\":1}}],[\"jvm根据类路径\",{\"1\":{\"1061\":1}}],[\"jvm类封装\",{\"0\":{\"1044\":1}}],[\"jvms\",{\"1\":{\"1036\":1}}],[\"jvm支持友好\",{\"1\":{\"1512\":1}}],[\"jvm支持字符串\",{\"0\":{\"1014\":1}}],[\"jvm支持数组\",{\"0\":{\"1007\":1}}],[\"jvm内存总结\",{\"0\":{\"970\":1}}],[\"jvm内存清理算法\",{\"0\":{\"175\":1}}],[\"jvm总结\",{\"0\":{\"967\":1,\"973\":1},\"1\":{\"973\":1}}],[\"jvm会先在当前线程的栈桢中创建用于存储锁记录的空间\",{\"1\":{\"847\":1}}],[\"jvm基于进入和退出monitor对象来实现方法同步和代码块同步\",{\"1\":{\"843\":1}}],[\"jvm参数\",{\"1\":{\"711\":1}}],[\"jvmgo\",{\"1\":{\"271\":1,\"980\":1,\"986\":1,\"987\":1,\"997\":2,\"998\":1,\"1004\":1,\"1010\":1,\"1011\":1,\"1017\":2,\"1018\":1,\"1024\":4,\"1025\":1,\"1030\":3,\"1031\":1,\"1037\":3,\"1038\":1,\"1044\":1,\"1045\":1,\"1051\":1,\"1057\":1,\"1065\":1,\"1071\":1,\"1082\":1,\"1089\":1,\"1097\":1,\"1103\":1,\"1104\":1,\"1111\":1},\"2\":{\"982\":1,\"989\":1,\"1000\":1,\"1006\":1,\"1013\":1,\"1020\":1,\"1027\":1,\"1033\":1,\"1040\":1,\"1047\":1,\"1053\":1,\"1059\":1,\"1067\":1,\"1073\":1,\"1084\":1,\"1091\":1,\"1099\":1,\"1106\":1,\"1113\":1}}],[\"jvm规范\",{\"1\":{\"237\":1,\"1076\":1}}],[\"jvm在搜索类中\",{\"0\":{\"196\":1,\"1177\":1}}],[\"jvm\",{\"0\":{\"172\":1},\"1\":{\"271\":3,\"367\":1,\"711\":1,\"852\":1,\"1017\":1,\"1044\":7,\"1045\":1,\"1086\":2,\"1087\":1},\"2\":{\"550\":1,\"969\":1,\"972\":1,\"975\":1,\"1121\":1,\"1148\":1,\"1161\":1,\"1167\":1,\"1179\":1,\"1195\":1,\"1215\":1,\"1252\":1}}],[\"johnsonlee\",{\"1\":{\"1561\":1}}],[\"jointhreadpool\",{\"1\":{\"1776\":1,\"1778\":1}}],[\"joinpoint\",{\"1\":{\"1374\":2,\"1589\":5}}],[\"join与yield区别\",{\"0\":{\"945\":1}}],[\"join实现\",{\"1\":{\"870\":1}}],[\"join\",{\"0\":{\"897\":1},\"1\":{\"154\":2,\"870\":4,\"897\":2,\"944\":1,\"945\":1,\"1063\":3,\"1230\":2,\"1966\":1}}],[\"jobjectarray\",{\"1\":{\"1530\":1}}],[\"jobject\",{\"1\":{\"1530\":2,\"1717\":2,\"1756\":3,\"1762\":2}}],[\"jobs\",{\"1\":{\"917\":5}}],[\"jobqueue\",{\"1\":{\"917\":2}}],[\"jobqueue<job\",{\"1\":{\"917\":1}}],[\"jobqueue<job>\",{\"1\":{\"917\":1}}],[\"jobqueue<>\",{\"1\":{\"917\":1}}],[\"job\",{\"1\":{\"12\":10,\"731\":10,\"884\":3,\"917\":16,\"950\":8}}],[\"jks\",{\"1\":{\"106\":1}}],[\"jintarray\",{\"1\":{\"1530\":1}}],[\"jint\",{\"1\":{\"1530\":5,\"1756\":2,\"1762\":1}}],[\"jinfo\",{\"0\":{\"1153\":1}}],[\"jimu\",{\"1\":{\"1503\":1}}],[\"jimi用户不多\",{\"1\":{\"1480\":1}}],[\"jiagurelease\",{\"1\":{\"1613\":1}}],[\"jiaguapk\",{\"1\":{\"1613\":2}}],[\"jiagupath\",{\"1\":{\"1613\":2}}],[\"jiagupath=\",{\"1\":{\"103\":1,\"1613\":1}}],[\"jiagupluginpath\",{\"1\":{\"1613\":2}}],[\"jiagudebug\",{\"1\":{\"103\":4,\"1613\":1}}],[\"jiagu\",{\"1\":{\"103\":10,\"1613\":11}}],[\"jianshu\",{\"1\":{\"25\":1,\"100\":1,\"115\":1,\"580\":1,\"1320\":1,\"1399\":3,\"1503\":5,\"1555\":2,\"1574\":1,\"1580\":1,\"1613\":1,\"1638\":1,\"1647\":1,\"1682\":3}}],[\"jitpack\",{\"0\":{\"100\":1},\"1\":{\"100\":1,\"1304\":1,\"1558\":1,\"1595\":1,\"1623\":1,\"1641\":1,\"1911\":2,\"1933\":1}}],[\"jsresult\",{\"1\":{\"1711\":1,\"1713\":1}}],[\"jshortarray\",{\"1\":{\"1530\":1}}],[\"jshort\",{\"1\":{\"1530\":2}}],[\"jstring\",{\"1\":{\"1015\":3,\"1016\":1,\"1030\":1,\"1044\":1,\"1530\":5}}],[\"jstr\",{\"1\":{\"1015\":7,\"1527\":1,\"1530\":2}}],[\"jstat\",{\"0\":{\"1152\":1},\"1\":{\"833\":1}}],[\"jstack\",{\"0\":{\"1156\":1},\"1\":{\"822\":1,\"833\":1,\"867\":1,\"1156\":1}}],[\"json5\",{\"1\":{\"1708\":3,\"1709\":2,\"1712\":2}}],[\"json的\",{\"1\":{\"1409\":2}}],[\"json解析函数\",{\"1\":{\"1323\":1,\"1335\":1,\"1459\":1}}],[\"jsonparse\",{\"1\":{\"1323\":11,\"1335\":8,\"1459\":11}}],[\"jsonp\",{\"1\":{\"649\":1}}],[\"json\",{\"1\":{\"94\":1,\"1323\":3,\"1335\":4,\"1399\":4,\"1409\":1,\"1413\":2,\"1459\":3,\"1558\":1,\"1592\":2,\"1595\":1,\"1682\":4,\"1702\":2,\"1707\":1,\"1708\":2,\"1709\":1,\"1712\":1}}],[\"json文件\",{\"1\":{\"85\":1}}],[\"jsbundle\",{\"1\":{\"94\":1}}],[\"js\",{\"0\":{\"85\":1,\"94\":1},\"1\":{\"85\":1,\"94\":6,\"604\":2,\"657\":4,\"1413\":2,\"1702\":2,\"1974\":1}}],[\"jredir\",{\"1\":{\"1063\":3}}],[\"jreoption\",{\"1\":{\"1063\":7}}],[\"jre\",{\"1\":{\"67\":1,\"1030\":10,\"1061\":2,\"1062\":1,\"1063\":5}}],[\"javiercbk\",{\"1\":{\"1399\":2,\"1682\":2}}],[\"java孵化进程\",{\"1\":{\"1856\":1}}],[\"javadeathrecipient\",{\"1\":{\"1762\":1}}],[\"javadoc\",{\"1\":{\"12\":1,\"731\":1,\"1966\":2}}],[\"javascript\",{\"1\":{\"1712\":1}}],[\"javascriptaccess\",{\"1\":{\"1712\":1,\"1713\":2}}],[\"javassist\",{\"1\":{\"558\":1}}],[\"javax\",{\"1\":{\"1604\":2}}],[\"javafile\",{\"1\":{\"1601\":1,\"1604\":2}}],[\"java文件加载\",{\"1\":{\"1552\":2}}],[\"java层和native层的messagequeue通过jni建立关联\",{\"1\":{\"1824\":1}}],[\"java层颜色赋值\",{\"1\":{\"1540\":1}}],[\"java层传递\",{\"1\":{\"1540\":1}}],[\"java引用类型\",{\"1\":{\"1530\":1}}],[\"java默认使用unicode\",{\"1\":{\"1530\":1}}],[\"java调用扩展函数\",{\"1\":{\"1521\":1}}],[\"java的serviceload并不完备\",{\"1\":{\"1494\":1}}],[\"java与jni签名转换\",{\"1\":{\"1530\":1}}],[\"java与线程\",{\"0\":{\"1224\":1}}],[\"java与c++对比\",{\"0\":{\"1213\":1}}],[\"java高效并发\",{\"0\":{\"1216\":1}}],[\"java高并发编程\",{\"0\":{\"1989\":1},\"2\":{\"921\":1,\"924\":1,\"927\":1,\"930\":1,\"933\":1,\"936\":1,\"939\":1,\"951\":1,\"956\":1,\"959\":1}}],[\"java动态扩展语言\",{\"1\":{\"1213\":1}}],[\"java动态类型安全语言\",{\"1\":{\"1213\":1}}],[\"java方法接收多态选择频率大于c++\",{\"1\":{\"1213\":1}}],[\"javaopt\",{\"1\":{\"1205\":1}}],[\"javacompiler\",{\"1\":{\"1197\":1}}],[\"javacompileoptions\",{\"1\":{\"73\":2}}],[\"javac\",{\"1\":{\"1197\":1}}],[\"java独立于虚拟机外部\",{\"1\":{\"1175\":1}}],[\"java堆跟踪工具\",{\"1\":{\"1156\":1}}],[\"java堆分配句柄池\",{\"1\":{\"1118\":1}}],[\"java运行时数据区\",{\"0\":{\"1114\":1}}],[\"java版本\",{\"1\":{\"1078\":1}}],[\"javapoet代码如下\",{\"1\":{\"1601\":1}}],[\"javapoet模板代码编写\",{\"1\":{\"1601\":1}}],[\"javapoet会是一阵强心剂\",{\"1\":{\"1601\":1}}],[\"javapoet解决重复模板代码编写问题\",{\"1\":{\"1601\":1}}],[\"javapoetdemo\",{\"1\":{\"1577\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1}}],[\"javapoet\",{\"1\":{\"1577\":1,\"1601\":3}}],[\"javapoet自动生成模板代码\",{\"1\":{\"1577\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1}}],[\"javapoet语法\",{\"0\":{\"1577\":1},\"1\":{\"1577\":2,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1}}],[\"javap工具\",{\"1\":{\"1075\":1}}],[\"javaprecompiledebug\",{\"1\":{\"73\":1,\"103\":2}}],[\"javahome\",{\"1\":{\"1063\":3}}],[\"java代码\",{\"1\":{\"1036\":1}}],[\"javaname\",{\"1\":{\"1030\":1,\"1036\":1}}],[\"java类中\",{\"1\":{\"1530\":1}}],[\"java类型\",{\"1\":{\"1530\":3}}],[\"java类\",{\"1\":{\"1015\":1}}],[\"java虚拟机栈\",{\"1\":{\"1115\":1}}],[\"java虚拟机256条指令\",{\"1\":{\"1093\":1}}],[\"java虚拟机指令\",{\"1\":{\"1093\":1}}],[\"java虚拟机指令地址\",{\"1\":{\"271\":1,\"1087\":1}}],[\"java虚拟机运行时生成\",{\"1\":{\"1008\":1}}],[\"java7\",{\"1\":{\"935\":1}}],[\"java线程调度\",{\"0\":{\"1229\":1}}],[\"java线程的实现\",{\"0\":{\"1228\":1}}],[\"java线程中将就绪\",{\"1\":{\"943\":1}}],[\"java线程深入讲解及线程池实现\",{\"0\":{\"941\":1}}],[\"java线程池\",{\"0\":{\"911\":1}}],[\"java线程状态6种\",{\"1\":{\"943\":1}}],[\"java线程状态\",{\"1\":{\"867\":1}}],[\"java原子操作\",{\"0\":{\"900\":1}}],[\"java锁\",{\"0\":{\"873\":1}}],[\"java对象在堆上分配对象\",{\"1\":{\"1213\":1}}],[\"java对象布局考虑访问类型数据相关信息\",{\"1\":{\"1118\":1}}],[\"java对象存储结构\",{\"1\":{\"844\":1}}],[\"java对象头\",{\"0\":{\"844\":1}}],[\"java编程实践\",{\"0\":{\"831\":1}}],[\"java接口最突出特性是多继承\",{\"1\":{\"802\":1}}],[\"java中的接口\",{\"1\":{\"808\":1}}],[\"java中接口和类的区别\",{\"1\":{\"802\":1}}],[\"java中对象生命周期\",{\"0\":{\"144\":1}}],[\"javamail\",{\"1\":{\"793\":1}}],[\"java总结\",{\"0\":{\"375\":1},\"1\":{\"375\":1}}],[\"java容器总结\",{\"0\":{\"372\":1},\"1\":{\"372\":1}}],[\"java容器\",{\"0\":{\"319\":1},\"1\":{\"369\":1}}],[\"java基础类型\",{\"1\":{\"1530\":2}}],[\"java基础\",{\"0\":{\"317\":1}}],[\"java基础知识\",{\"0\":{\"157\":1,\"163\":1}}],[\"java并发工具\",{\"0\":{\"903\":1}}],[\"java并发容器\",{\"0\":{\"893\":1}}],[\"java并发编程基础\",{\"0\":{\"867\":1}}],[\"java并发编程艺术\",{\"0\":{\"1988\":1},\"1\":{\"227\":1},\"2\":{\"826\":1,\"829\":1,\"836\":1,\"855\":1,\"865\":1,\"871\":1,\"891\":1,\"898\":1,\"901\":1,\"909\":1,\"918\":1}}],[\"java并发采用共享内存模型\",{\"1\":{\"858\":1}}],[\"java并发底层实现原理\",{\"0\":{\"838\":1}}],[\"java并发基础\",{\"0\":{\"166\":1}}],[\"java实现原子操作\",{\"0\":{\"852\":1}}],[\"java实现\",{\"1\":{\"194\":1}}],[\"java自动内存管理\",{\"1\":{\"184\":1}}],[\"java四种引用及使用场景\",{\"0\":{\"154\":1}}],[\"java内存模型与线程\",{\"0\":{\"1217\":1}}],[\"java内存模型一致性\",{\"0\":{\"860\":1}}],[\"java内存模型基础\",{\"0\":{\"858\":1}}],[\"java内存模型jmm\",{\"0\":{\"151\":1}}],[\"java内存模型\",{\"0\":{\"148\":1,\"857\":1,\"1219\":1},\"1\":{\"151\":1,\"858\":1}}],[\"javavirtualmachines\",{\"1\":{\"67\":3,\"1030\":10}}],[\"javaversion\",{\"1\":{\"43\":2}}],[\"javalaunchhelper\",{\"1\":{\"67\":1}}],[\"java\",{\"0\":{\"37\":1,\"82\":1,\"828\":1,\"1201\":1,\"1405\":1},\"1\":{\"14\":1,\"67\":6,\"103\":3,\"151\":2,\"207\":1,\"319\":1,\"328\":1,\"331\":1,\"334\":4,\"447\":1,\"611\":1,\"650\":1,\"672\":1,\"688\":1,\"711\":2,\"733\":1,\"808\":1,\"822\":10,\"833\":2,\"834\":1,\"876\":4,\"935\":1,\"979\":3,\"984\":6,\"993\":9,\"1009\":4,\"1015\":4,\"1016\":1,\"1022\":1,\"1023\":5,\"1029\":1,\"1030\":27,\"1035\":3,\"1036\":2,\"1044\":1,\"1055\":3,\"1061\":1,\"1062\":1,\"1063\":1,\"1064\":7,\"1070\":1,\"1077\":1,\"1078\":5,\"1109\":1,\"1110\":1,\"1119\":5,\"1203\":1,\"1206\":4,\"1368\":1,\"1475\":4,\"1487\":1,\"1488\":10,\"1503\":1,\"1506\":2,\"1527\":3,\"1530\":10,\"1549\":1,\"1552\":3,\"1598\":1,\"1601\":2,\"1613\":1,\"1717\":1,\"1718\":2,\"1729\":6,\"1731\":1,\"1732\":1,\"1739\":3,\"1746\":11,\"1757\":11,\"1763\":2,\"1832\":4,\"1852\":5,\"1863\":1,\"1866\":4,\"1870\":18,\"1908\":1,\"1966\":2},\"2\":{\"318\":1,\"371\":1,\"374\":1,\"377\":1,\"387\":1}}],[\"jakewharton将注解及对应aspectj方法实现\",{\"1\":{\"1632\":1}}],[\"jakewharton\",{\"1\":{\"1320\":1}}],[\"jar下\",{\"1\":{\"1064\":1}}],[\"jar下查找并读取classname文件\",{\"1\":{\"1064\":1}}],[\"jargs\",{\"1\":{\"1016\":4,\"1044\":4}}],[\"jar\",{\"1\":{\"67\":2,\"73\":1,\"103\":6,\"645\":1,\"711\":2,\"986\":1,\"997\":2,\"1010\":1,\"1017\":2,\"1024\":4,\"1030\":12,\"1037\":3,\"1044\":1,\"1064\":3,\"1103\":1,\"1383\":2,\"1613\":2,\"1632\":1,\"1666\":2,\"1733\":2,\"1966\":2}}],[\"jar包冲突\",{\"1\":{\"52\":1}}],[\"jackson\",{\"1\":{\"12\":3,\"731\":3}}],[\"jwt\",{\"1\":{\"12\":1,\"731\":1}}],[\"简洁\",{\"1\":{\"1280\":1,\"1512\":1,\"1518\":1}}],[\"简洁易用\",{\"1\":{\"559\":1}}],[\"简洁文档\",{\"0\":{\"559\":1}}],[\"简化条件表达式\",{\"0\":{\"1277\":1},\"1\":{\"1286\":1}}],[\"简化函数调用\",{\"0\":{\"1274\":1}}],[\"简化接口\",{\"1\":{\"264\":1}}],[\"简化了搭建部署流程\",{\"1\":{\"12\":1,\"731\":1}}],[\"简称br码\",{\"1\":{\"1768\":1}}],[\"简称bc码\",{\"1\":{\"1768\":1}}],[\"简称\",{\"1\":{\"151\":1,\"1206\":2}}],[\"简单地方式是直接把binder\",{\"1\":{\"1754\":1}}],[\"简单sharepref存储工具\",{\"1\":{\"1619\":1}}],[\"简单易用sharepref存储工具\",{\"0\":{\"1619\":1}}],[\"简单封装后代码\",{\"1\":{\"1610\":1}}],[\"简单少\",{\"1\":{\"1518\":1}}],[\"简单pojo\",{\"1\":{\"1512\":1}}],[\"简单好用\",{\"1\":{\"1491\":1}}],[\"简单公式要封装\",{\"1\":{\"1280\":1}}],[\"简单可靠优化\",{\"1\":{\"1207\":1}}],[\"简单高效\",{\"1\":{\"1139\":1,\"1209\":1}}],[\"简单清晰的api\",{\"1\":{\"796\":1}}],[\"简单的任务应有简单的解决方案\",{\"1\":{\"793\":1}}],[\"简单且易用\",{\"1\":{\"769\":1}}],[\"简单更能实战\",{\"1\":{\"750\":1}}],[\"简单直观\",{\"1\":{\"747\":1}}],[\"简单🍳读懂uml类图\",{\"1\":{\"738\":1}}],[\"简单\",{\"1\":{\"586\":1}}],[\"简单工厂模式\",{\"1\":{\"257\":1,\"393\":1,\"433\":1}}],[\"简单工厂\",{\"0\":{\"260\":1,\"432\":1},\"1\":{\"256\":1,\"260\":1,\"434\":1,\"435\":2}}],[\"简单说就是程序的执行已经超出了该对象的作\",{\"1\":{\"145\":1}}],[\"简单业务\",{\"1\":{\"11\":1,\"730\":1}}],[\"3个\",{\"1\":{\"1868\":1}}],[\"3h\",{\"1\":{\"1701\":1}}],[\"3使用教程\",{\"1\":{\"1491\":1}}],[\"3x\",{\"1\":{\"1435\":1,\"1443\":1}}],[\"3x切图\",{\"1\":{\"1435\":1}}],[\"3d\",{\"1\":{\"1367\":1}}],[\"3b\",{\"1\":{\"1367\":1}}],[\"3的对象\",{\"1\":{\"1203\":1}}],[\"3l\",{\"1\":{\"1203\":1}}],[\"3重排\",{\"1\":{\"864\":1}}],[\"398928\",{\"1\":{\"820\":2}}],[\"39\",{\"1\":{\"298\":1,\"822\":1,\"1367\":1}}],[\"3840\",{\"1\":{\"1435\":1}}],[\"38\",{\"1\":{\"298\":2,\"1367\":2}}],[\"387\",{\"1\":{\"298\":2}}],[\"37\",{\"1\":{\"298\":1,\"1367\":1}}],[\"36\",{\"1\":{\"298\":1,\"1338\":2,\"1367\":2}}],[\"3600\",{\"1\":{\"650\":1}}],[\"360加固\",{\"1\":{\"103\":2,\"1613\":2}}],[\"360加固登录账号密码要设置上\",{\"1\":{\"103\":1}}],[\"360jiagubao\",{\"1\":{\"103\":2,\"1613\":1}}],[\"360jiagu\",{\"1\":{\"103\":3,\"1613\":1}}],[\"345\",{\"1\":{\"1521\":1}}],[\"3466d4f5d349cc81e8b3f761d86e9856\",{\"1\":{\"1323\":1}}],[\"344\",{\"1\":{\"1070\":1}}],[\"34m$1\",{\"1\":{\"711\":1}}],[\"34\",{\"1\":{\"298\":1,\"1338\":2,\"1367\":1}}],[\"333\",{\"1\":{\"1346\":1}}],[\"3306\",{\"1\":{\"615\":1,\"631\":2,\"662\":2,\"723\":2,\"834\":1}}],[\"33\",{\"1\":{\"298\":1,\"614\":4,\"615\":5,\"630\":4,\"1367\":2}}],[\"320\",{\"1\":{\"1435\":1}}],[\"320dpi\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"320727\",{\"1\":{\"16\":1}}],[\"321\",{\"1\":{\"1203\":2}}],[\"32bit\",{\"1\":{\"1117\":1}}],[\"32768\",{\"1\":{\"983\":1}}],[\"32\",{\"1\":{\"298\":1,\"353\":1,\"359\":1,\"615\":1,\"1367\":1,\"1530\":2,\"1707\":1,\"1789\":1}}],[\"35\",{\"1\":{\"298\":1,\"1367\":1}}],[\"31177\",{\"1\":{\"822\":1,\"833\":2}}],[\"31m$1\",{\"1\":{\"711\":1,\"715\":1}}],[\"31\",{\"1\":{\"103\":1,\"298\":1,\"1367\":1,\"1521\":5}}],[\"30dp\",{\"1\":{\"1346\":6}}],[\"305\",{\"1\":{\"822\":1}}],[\"3007\",{\"1\":{\"1865\":1}}],[\"3006\",{\"1\":{\"1865\":1}}],[\"3003\",{\"1\":{\"1865\":1}}],[\"3002\",{\"1\":{\"1865\":1}}],[\"3001\",{\"1\":{\"1865\":1}}],[\"300\",{\"1\":{\"441\":1,\"537\":1,\"1583\":1}}],[\"3000\",{\"1\":{\"154\":2,\"537\":1}}],[\"30\",{\"1\":{\"103\":1,\"298\":1,\"352\":1,\"644\":1,\"907\":1,\"1305\":1,\"1367\":2,\"1521\":1,\"1540\":1}}],[\"3m\",{\"1\":{\"103\":1,\"1317\":1}}],[\"3\",{\"0\":{\"25\":1,\"160\":1,\"169\":1,\"196\":1,\"206\":1,\"214\":1,\"229\":1,\"258\":1,\"280\":1,\"324\":1,\"333\":1,\"339\":1,\"350\":1,\"360\":1,\"382\":1,\"417\":1,\"638\":1,\"746\":1,\"824\":1,\"842\":1,\"857\":1,\"944\":1,\"1044\":1,\"1060\":1,\"1063\":1,\"1126\":1,\"1132\":1,\"1134\":1,\"1137\":1,\"1149\":1,\"1165\":1,\"1193\":1,\"1200\":1,\"1204\":1,\"1227\":1,\"1249\":1,\"1306\":1,\"1311\":1,\"1417\":1,\"1445\":1,\"1474\":1,\"1475\":1,\"1488\":1,\"1589\":1,\"1604\":1,\"1627\":1,\"1646\":1,\"1709\":1,\"1713\":1,\"1923\":1,\"1961\":1},\"1\":{\"12\":1,\"25\":1,\"70\":1,\"73\":3,\"85\":1,\"103\":1,\"106\":1,\"109\":1,\"144\":1,\"145\":2,\"158\":1,\"181\":1,\"184\":1,\"194\":1,\"200\":1,\"207\":2,\"227\":1,\"228\":1,\"230\":1,\"246\":3,\"257\":2,\"261\":1,\"265\":1,\"278\":1,\"298\":1,\"328\":2,\"359\":2,\"365\":4,\"405\":1,\"558\":1,\"573\":1,\"583\":1,\"595\":1,\"598\":2,\"619\":1,\"649\":1,\"731\":1,\"738\":4,\"750\":1,\"752\":1,\"753\":4,\"754\":1,\"757\":1,\"760\":1,\"763\":1,\"766\":1,\"769\":1,\"772\":1,\"775\":1,\"778\":1,\"784\":1,\"793\":2,\"796\":3,\"799\":1,\"802\":1,\"805\":4,\"808\":1,\"821\":1,\"822\":1,\"823\":1,\"863\":1,\"864\":1,\"874\":1,\"900\":2,\"904\":1,\"914\":1,\"948\":2,\"949\":1,\"950\":2,\"954\":1,\"977\":1,\"979\":1,\"984\":5,\"1002\":1,\"1061\":1,\"1063\":1,\"1064\":2,\"1078\":2,\"1145\":1,\"1203\":4,\"1253\":3,\"1256\":1,\"1259\":1,\"1262\":1,\"1265\":1,\"1268\":4,\"1271\":1,\"1274\":1,\"1277\":1,\"1280\":1,\"1283\":1,\"1286\":7,\"1305\":1,\"1317\":1,\"1326\":1,\"1329\":1,\"1338\":4,\"1341\":1,\"1346\":1,\"1349\":1,\"1367\":1,\"1374\":1,\"1383\":2,\"1416\":3,\"1435\":12,\"1474\":3,\"1476\":1,\"1479\":1,\"1480\":2,\"1481\":2,\"1482\":1,\"1483\":2,\"1487\":1,\"1488\":2,\"1512\":5,\"1518\":7,\"1521\":1,\"1524\":1,\"1527\":1,\"1530\":3,\"1534\":12,\"1540\":6,\"1546\":2,\"1549\":1,\"1552\":2,\"1558\":1,\"1580\":1,\"1586\":1,\"1587\":1,\"1592\":2,\"1595\":3,\"1604\":2,\"1607\":1,\"1610\":1,\"1636\":1,\"1647\":1,\"1666\":2,\"1701\":1,\"1708\":1,\"1711\":6,\"1712\":5,\"1713\":2,\"1756\":3,\"1762\":1,\"1778\":1,\"1788\":1,\"1790\":1,\"1798\":1,\"1805\":1,\"1905\":2,\"1933\":2,\"1960\":2,\"1966\":1}}],[\"框架编写\",{\"0\":{\"1997\":1}}],[\"框架编写分析\",{\"2\":{\"1547\":1,\"1550\":1,\"1553\":1,\"1556\":1,\"1559\":1,\"1562\":1,\"1565\":1,\"1569\":1,\"1572\":1,\"1575\":1,\"1578\":1,\"1581\":1,\"1584\":1,\"1590\":1,\"1593\":1,\"1596\":1,\"1599\":1,\"1602\":1,\"1605\":1,\"1608\":1,\"1611\":1,\"1614\":1,\"1617\":1,\"1633\":1,\"1649\":1}}],[\"框架选型\",{\"1\":{\"1426\":1}}],[\"框架方案\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"框架图\",{\"1\":{\"305\":1,\"1824\":1}}],[\"框架还为其扩展了在线日志查看监控\",{\"1\":{\"12\":1,\"731\":1}}],[\"框架还为其增加了各种监控\",{\"1\":{\"12\":2,\"731\":2}}],[\"框架扩展了多种功能例如\",{\"1\":{\"12\":1,\"731\":1}}],[\"雪花id\",{\"1\":{\"12\":2,\"731\":2}}],[\"p为null\",{\"1\":{\"1847\":1}}],[\"ptr\",{\"1\":{\"1770\":4,\"1789\":14,\"1790\":1,\"1798\":2,\"1825\":5,\"1846\":3,\"1857\":1}}],[\"pthread\",{\"1\":{\"896\":3}}],[\"p工程\",{\"1\":{\"1494\":1}}],[\"px\",{\"1\":{\"1338\":2}}],[\"pgyer\",{\"1\":{\"1323\":3,\"1459\":3}}],[\"p3j7f\",{\"1\":{\"1298\":1}}],[\"pk\",{\"1\":{\"1077\":1}}],[\"ppa安装脚本\",{\"1\":{\"702\":1}}],[\"pms\",{\"1\":{\"668\":4}}],[\"people\",{\"1\":{\"1521\":11}}],[\"pendingidlehandlercount\",{\"1\":{\"1846\":7}}],[\"pendingpost\",{\"1\":{\"1546\":10}}],[\"pendingpostqueue\",{\"1\":{\"1546\":1}}],[\"pendown\",{\"1\":{\"1518\":3}}],[\"penup\",{\"1\":{\"1518\":3}}],[\"pem\",{\"1\":{\"638\":1}}],[\"performinit\",{\"1\":{\"1320\":2}}],[\"perflogs\",{\"1\":{\"465\":1}}],[\"per\",{\"0\":{\"938\":1,\"1405\":1}}],[\"person02\",{\"1\":{\"1518\":2}}],[\"person01\",{\"1\":{\"1518\":2}}],[\"personclothsytle\",{\"1\":{\"471\":3}}],[\"personwrapper\",{\"1\":{\"471\":6}}],[\"person\",{\"1\":{\"471\":7,\"1518\":6,\"1521\":13}}],[\"persistence\",{\"1\":{\"311\":1}}],[\"pertaining\",{\"1\":{\"381\":1}}],[\"permittedcapabilities\",{\"1\":{\"1865\":1}}],[\"permissions\",{\"1\":{\"1648\":1}}],[\"permission\",{\"1\":{\"1416\":8,\"1417\":1,\"1707\":1,\"1708\":2,\"1712\":3}}],[\"permanent\",{\"1\":{\"1119\":1}}],[\"permsize=256m\",{\"1\":{\"711\":1}}],[\"perm\",{\"1\":{\"207\":1}}],[\"phase600\",{\"1\":{\"1867\":1}}],[\"phase550\",{\"1\":{\"1867\":1}}],[\"phase\",{\"1\":{\"1867\":4}}],[\"phase480\",{\"1\":{\"1867\":1}}],[\"phantomreference<string>\",{\"1\":{\"154\":2}}],[\"phantomreference\",{\"1\":{\"154\":2,\"1126\":1}}],[\"phonewindowmanager分发电话页面各种事件\",{\"1\":{\"1849\":1}}],[\"phoneimpl\",{\"1\":{\"453\":1}}],[\"phone\",{\"1\":{\"453\":2}}],[\"pdf手敲一遍\",{\"1\":{\"1509\":1}}],[\"pdf文件\",{\"1\":{\"1077\":1}}],[\"pdf文档支持\",{\"1\":{\"805\":1}}],[\"pdf\",{\"1\":{\"310\":1,\"1077\":1}}],[\"pc\",{\"1\":{\"271\":1,\"994\":4,\"1003\":1,\"1036\":11,\"1087\":1,\"1094\":3,\"1101\":6}}],[\"publishedversion\",{\"1\":{\"1905\":1}}],[\"publishedgroupid=\",{\"1\":{\"1905\":1}}],[\"publish\",{\"1\":{\"1905\":3}}],[\"publickey\",{\"1\":{\"1923\":1}}],[\"public默认\",{\"1\":{\"1521\":1}}],[\"public方法method1接收一个类型为object的参数\",{\"1\":{\"738\":1}}],[\"publicpath\",{\"1\":{\"604\":4,\"657\":1}}],[\"public\",{\"1\":{\"124\":1,\"154\":1,\"160\":2,\"169\":8,\"247\":4,\"259\":27,\"285\":1,\"328\":1,\"331\":1,\"332\":1,\"333\":1,\"337\":2,\"338\":3,\"342\":1,\"348\":6,\"350\":1,\"351\":1,\"359\":1,\"362\":1,\"365\":1,\"368\":4,\"381\":6,\"404\":2,\"405\":14,\"409\":5,\"415\":12,\"416\":8,\"422\":21,\"428\":16,\"435\":12,\"441\":12,\"447\":23,\"453\":14,\"459\":17,\"465\":24,\"471\":12,\"477\":7,\"483\":26,\"489\":30,\"495\":11,\"501\":11,\"507\":26,\"513\":12,\"519\":10,\"525\":15,\"531\":24,\"537\":18,\"543\":14,\"650\":3,\"823\":4,\"828\":4,\"843\":5,\"852\":1,\"853\":1,\"863\":3,\"864\":2,\"867\":8,\"868\":3,\"869\":3,\"870\":16,\"874\":2,\"876\":6,\"879\":2,\"880\":9,\"884\":7,\"885\":4,\"887\":2,\"889\":3,\"895\":2,\"896\":3,\"897\":3,\"900\":18,\"904\":4,\"905\":5,\"907\":3,\"908\":4,\"917\":13,\"920\":2,\"923\":3,\"926\":8,\"929\":3,\"932\":6,\"935\":2,\"938\":5,\"945\":2,\"949\":1,\"950\":19,\"958\":9,\"983\":4,\"995\":5,\"1009\":1,\"1023\":2,\"1030\":3,\"1109\":1,\"1182\":1,\"1188\":10,\"1203\":4,\"1239\":1,\"1295\":9,\"1305\":4,\"1307\":3,\"1311\":1,\"1312\":2,\"1313\":5,\"1320\":4,\"1326\":2,\"1332\":16,\"1349\":5,\"1358\":4,\"1361\":1,\"1364\":7,\"1368\":2,\"1374\":5,\"1416\":11,\"1417\":9,\"1462\":1,\"1468\":8,\"1488\":1,\"1518\":1,\"1527\":37,\"1530\":1,\"1540\":6,\"1546\":5,\"1552\":2,\"1555\":4,\"1589\":5,\"1592\":7,\"1595\":1,\"1598\":6,\"1601\":14,\"1604\":17,\"1610\":3,\"1625\":1,\"1626\":4,\"1645\":1,\"1717\":2,\"1727\":6,\"1730\":2,\"1731\":7,\"1732\":7,\"1736\":4,\"1737\":8,\"1738\":13,\"1739\":12,\"1756\":11,\"1762\":7,\"1778\":2,\"1831\":4,\"1839\":4,\"1840\":4,\"1842\":1,\"1843\":1,\"1849\":2,\"1850\":2,\"1851\":2,\"1862\":1,\"1866\":2,\"1867\":3,\"1869\":1}}],[\"pub\",{\"1\":{\"1690\":1,\"1921\":1,\"1928\":1,\"1943\":2}}],[\"pulltofresh\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"pulltorefreshbloc\",{\"1\":{\"1383\":2,\"1666\":2}}],[\"pull\",{\"1\":{\"1383\":2,\"1666\":2}}],[\"pushresponse\",{\"1\":{\"1828\":1}}],[\"pushref\",{\"1\":{\"984\":4,\"993\":1,\"1009\":2,\"1015\":1,\"1023\":2,\"1030\":2,\"1036\":2}}],[\"pushurl\",{\"1\":{\"1707\":2,\"1708\":2}}],[\"pushlocalframe\",{\"1\":{\"1530\":1}}],[\"pushlong\",{\"1\":{\"984\":3}}],[\"pushdefaultpage\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"pushdouble\",{\"1\":{\"984\":3}}],[\"pushboolean\",{\"1\":{\"1030\":3}}],[\"push到响应数组\",{\"1\":{\"1828\":1}}],[\"push到栈顶\",{\"1\":{\"1003\":1}}],[\"push到操作数栈\",{\"1\":{\"984\":2}}],[\"pushframe\",{\"1\":{\"993\":1,\"994\":1,\"1003\":1,\"1044\":1,\"1101\":1}}],[\"pushfloat\",{\"1\":{\"984\":3}}],[\"pushint\",{\"1\":{\"984\":6,\"993\":1,\"1023\":1,\"1095\":1}}],[\"push\",{\"1\":{\"525\":3,\"1383\":1,\"1468\":1,\"1666\":1,\"1728\":4,\"1733\":7,\"1944\":1,\"1945\":1,\"1947\":1,\"1949\":3,\"1951\":1,\"1961\":1,\"1966\":1}}],[\"putobj\",{\"1\":{\"1622\":1}}],[\"putextra\",{\"1\":{\"1417\":2}}],[\"putstatic\",{\"1\":{\"983\":2,\"1003\":1,\"1169\":2}}],[\"putfield\",{\"1\":{\"983\":2}}],[\"putfornullkey\",{\"1\":{\"350\":2}}],[\"put方法首先定位到segment\",{\"1\":{\"894\":1}}],[\"put操作\",{\"1\":{\"894\":1}}],[\"putall\",{\"1\":{\"368\":1,\"1332\":6}}],[\"put\",{\"0\":{\"350\":1},\"1\":{\"349\":3,\"350\":1,\"362\":1,\"364\":1,\"365\":4,\"368\":4,\"405\":1,\"441\":1,\"650\":1,\"651\":1,\"652\":1,\"885\":2,\"958\":1,\"1332\":3,\"1518\":7,\"1540\":1,\"1546\":3,\"1598\":1,\"1604\":1,\"1628\":1,\"1713\":1,\"1770\":1}}],[\"putint\",{\"1\":{\"268\":1}}],[\"pom\",{\"1\":{\"1966\":1}}],[\"potential\",{\"1\":{\"1840\":1}}],[\"policy\",{\"1\":{\"1778\":1}}],[\"pollinner\",{\"1\":{\"1828\":2}}],[\"pollonce\",{\"1\":{\"1828\":2}}],[\"poll\",{\"1\":{\"154\":1,\"895\":1,\"1546\":2,\"1772\":2,\"1828\":6}}],[\"powermanagerservice\",{\"1\":{\"1867\":1,\"1868\":1}}],[\"poweroffstate\",{\"1\":{\"507\":3}}],[\"poweroff\",{\"1\":{\"507\":3}}],[\"poweronstate\",{\"1\":{\"507\":2}}],[\"poweron\",{\"1\":{\"501\":3,\"507\":3}}],[\"pow\",{\"1\":{\"1534\":3}}],[\"pointsize\",{\"1\":{\"1540\":2}}],[\"pointcut\",{\"1\":{\"1374\":1}}],[\"pointer\",{\"1\":{\"1023\":1,\"1116\":1}}],[\"point\",{\"1\":{\"895\":1}}],[\"pong\",{\"1\":{\"707\":1}}],[\"port=$2\",{\"1\":{\"711\":1}}],[\"port=8080\",{\"1\":{\"711\":1}}],[\"port\",{\"1\":{\"604\":2,\"631\":3,\"645\":1,\"657\":1,\"662\":1,\"711\":7,\"715\":5,\"723\":1,\"1963\":1,\"1966\":2}}],[\"poplocalframe配对使用\",{\"1\":{\"1530\":2}}],[\"popint\",{\"1\":{\"993\":1,\"1009\":3,\"1095\":2}}],[\"popframe\",{\"1\":{\"993\":3,\"1036\":1,\"1101\":1}}],[\"popslot\",{\"1\":{\"993\":1}}],[\"popref\",{\"1\":{\"984\":3,\"993\":1,\"1009\":3,\"1036\":1}}],[\"pop\",{\"1\":{\"525\":2}}],[\"posixthreads\",{\"1\":{\"1527\":1}}],[\"posix线程操作\",{\"1\":{\"1527\":1}}],[\"positioned\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"position=\",{\"1\":{\"543\":1}}],[\"position\",{\"1\":{\"351\":1,\"543\":11,\"1402\":3,\"1540\":5,\"1685\":3}}],[\"post流程\",{\"1\":{\"1841\":1}}],[\"postsyncbarrier\",{\"1\":{\"1849\":3}}],[\"poststicky\",{\"1\":{\"1546\":3}}],[\"postsingleeventforeventtype\",{\"1\":{\"1546\":2}}],[\"postsingleevent\",{\"1\":{\"1546\":1}}],[\"posttosubscription\",{\"1\":{\"1546\":1}}],[\"postingstate\",{\"1\":{\"1546\":6}}],[\"postingthreadstate\",{\"1\":{\"1546\":2}}],[\"post放入消息流程\",{\"1\":{\"1546\":1}}],[\"poster消息队列存取\",{\"1\":{\"1546\":1}}],[\"poster\",{\"1\":{\"1546\":2}}],[\"postbodystring\",{\"1\":{\"1332\":6}}],[\"post\",{\"0\":{\"1645\":1},\"1\":{\"650\":1,\"651\":1,\"652\":1,\"668\":3,\"1332\":3,\"1335\":1,\"1515\":1,\"1540\":1,\"1546\":2,\"1645\":2,\"1712\":1,\"1713\":2,\"1841\":1}}],[\"postgresql\",{\"1\":{\"12\":1,\"731\":1}}],[\"possibly\",{\"1\":{\"364\":1}}],[\"poolthread\",{\"1\":{\"1778\":3}}],[\"pool\",{\"1\":{\"237\":3,\"631\":4,\"1076\":3,\"1850\":2}}],[\"psielement\",{\"1\":{\"1555\":5}}],[\"psielementfactory\",{\"1\":{\"1552\":1}}],[\"psishortnamescache\",{\"1\":{\"1552\":1}}],[\"psiclasses\",{\"1\":{\"1552\":2}}],[\"psiclass\",{\"1\":{\"1552\":4}}],[\"psifileutils\",{\"1\":{\"1552\":1}}],[\"psifile转psiclass\",{\"1\":{\"1552\":1}}],[\"psifiles\",{\"1\":{\"1552\":3}}],[\"psifile\",{\"1\":{\"1552\":13,\"1555\":4}}],[\"psi\",{\"1\":{\"1552\":1}}],[\"ps命令查看下线程数\",{\"1\":{\"834\":1}}],[\"ps\",{\"1\":{\"118\":1,\"711\":1,\"834\":1}}],[\"ping\",{\"1\":{\"707\":1}}],[\"pivot\",{\"1\":{\"279\":5}}],[\"pixels\",{\"0\":{\"97\":1},\"1\":{\"1518\":1}}],[\"pipedreader\",{\"1\":{\"870\":2}}],[\"pipedwriter\",{\"1\":{\"870\":2}}],[\"piped\",{\"1\":{\"870\":8}}],[\"pipe\",{\"1\":{\"631\":1}}],[\"pipes\",{\"1\":{\"631\":2}}],[\"pip\",{\"1\":{\"88\":4}}],[\"pid=1\",{\"1\":{\"1856\":1}}],[\"pid=\",{\"1\":{\"1736\":1}}],[\"pid=$\",{\"1\":{\"711\":5}}],[\"pidinfo\",{\"1\":{\"1736\":2}}],[\"pid\",{\"1\":{\"58\":1,\"694\":5,\"711\":8,\"1717\":2,\"1762\":2,\"1790\":2,\"1863\":3,\"1865\":2,\"1963\":2}}],[\"py\",{\"1\":{\"88\":3}}],[\"pypa\",{\"1\":{\"88\":1}}],[\"python\",{\"0\":{\"88\":1},\"1\":{\"88\":1}}],[\"pycharm\",{\"0\":{\"19\":1},\"1\":{\"19\":3}}],[\"png\",{\"0\":{\"76\":2},\"1\":{\"305\":5,\"580\":1,\"589\":1,\"1050\":1,\"1292\":1,\"1338\":14,\"1435\":14}}],[\"playmode\",{\"1\":{\"1712\":1,\"1713\":1}}],[\"play\",{\"1\":{\"1338\":1,\"1435\":1,\"1567\":1,\"1713\":1}}],[\"player\",{\"1\":{\"489\":1,\"1796\":1,\"1798\":2,\"1799\":2}}],[\"placeholder\",{\"1\":{\"1182\":1}}],[\"platformapi\",{\"0\":{\"1358\":1},\"1\":{\"1358\":2}}],[\"platformevent\",{\"1\":{\"896\":1}}],[\"platform\",{\"1\":{\"631\":1,\"640\":1,\"1329\":2,\"1371\":3,\"1377\":1,\"1555\":1}}],[\"plan\",{\"1\":{\"67\":2}}],[\"please\",{\"1\":{\"73\":1,\"711\":1,\"1555\":2,\"1604\":1}}],[\"plugins\",{\"1\":{\"1632\":1}}],[\"pluginstate\",{\"1\":{\"1416\":1}}],[\"plugin>\",{\"1\":{\"1555\":2}}],[\"plugin\",{\"1\":{\"614\":1,\"622\":1,\"630\":1,\"1289\":1,\"1292\":2,\"1317\":1,\"1374\":2,\"1413\":2,\"1475\":4,\"1476\":6,\"1491\":3,\"1555\":4,\"1595\":2,\"1632\":1,\"1905\":6,\"1911\":5,\"1966\":1}}],[\"plugin=\",{\"1\":{\"613\":1}}],[\"pluginname\",{\"0\":{\"61\":1}}],[\"plug\",{\"1\":{\"313\":1}}],[\"plus\",{\"1\":{\"12\":5,\"731\":5,\"1435\":1,\"1527\":1,\"1530\":2}}],[\"pause\",{\"1\":{\"1713\":1}}],[\"pa\",{\"1\":{\"1702\":4}}],[\"palette\",{\"1\":{\"1567\":1}}],[\"pairs\",{\"1\":{\"1521\":1}}],[\"paddall\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"padding属性\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"padding\",{\"1\":{\"1338\":1,\"1402\":16,\"1435\":1,\"1445\":1,\"1685\":16}}],[\"panpf\",{\"1\":{\"1905\":1}}],[\"panxl6\",{\"1\":{\"1515\":1}}],[\"pan\",{\"1\":{\"1049\":1}}],[\"panic\",{\"1\":{\"979\":2,\"984\":7,\"993\":10,\"1009\":6,\"1022\":1,\"1023\":1,\"1036\":1,\"1063\":1,\"1077\":1,\"1078\":1,\"1101\":1,\"1110\":2}}],[\"pagetransitionentry\",{\"1\":{\"1702\":1}}],[\"pagetransitionexit\",{\"1\":{\"1702\":1}}],[\"pagetransition\",{\"1\":{\"1702\":1}}],[\"page=2\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"pages\",{\"0\":{\"1958\":1},\"1\":{\"657\":12,\"1707\":1,\"1708\":1}}],[\"page\",{\"1\":{\"640\":2,\"1383\":2,\"1666\":2,\"1707\":1,\"1960\":1}}],[\"passed\",{\"1\":{\"1534\":7}}],[\"pass\",{\"1\":{\"638\":2,\"935\":1,\"1534\":3}}],[\"password=heat1314\",{\"1\":{\"1914\":1}}],[\"password=xxx\",{\"1\":{\"1905\":1}}],[\"password\",{\"1\":{\"613\":1,\"614\":8,\"615\":6,\"618\":1,\"622\":5,\"630\":7,\"644\":1,\"1712\":1,\"1952\":1,\"1966\":1}}],[\"packname\",{\"1\":{\"1583\":1}}],[\"packet\",{\"1\":{\"631\":2}}],[\"packager\",{\"1\":{\"1413\":1}}],[\"packages\",{\"1\":{\"1326\":1}}],[\"packagemanagerservice\",{\"1\":{\"1867\":1,\"1868\":1}}],[\"packagemanager\",{\"1\":{\"1326\":2}}],[\"packagename=\",{\"1\":{\"1326\":1}}],[\"packagename\",{\"1\":{\"1326\":5,\"1601\":2,\"1604\":3}}],[\"packagedebug\",{\"1\":{\"103\":3}}],[\"package\",{\"1\":{\"85\":1,\"94\":1,\"650\":1,\"1023\":1,\"1055\":1,\"1056\":1,\"1063\":1,\"1064\":1,\"1335\":1,\"1352\":2,\"1361\":1,\"1383\":7,\"1392\":2,\"1402\":3,\"1413\":1,\"1468\":1,\"1521\":1,\"1534\":2,\"1660\":2,\"1666\":7,\"1675\":2,\"1685\":3,\"1708\":1,\"1709\":1,\"1712\":1,\"1739\":1}}],[\"parcel是数据通信包\",{\"1\":{\"1798\":1}}],[\"parcelforjavaobject\",{\"1\":{\"1756\":2}}],[\"parcel转为c++\",{\"1\":{\"1756\":1}}],[\"parcelable\",{\"1\":{\"1735\":1,\"1738\":1,\"1739\":2}}],[\"parcel\",{\"1\":{\"1727\":5,\"1731\":4,\"1732\":2,\"1737\":2,\"1738\":4,\"1739\":10,\"1746\":2,\"1756\":14,\"1757\":2,\"1798\":2,\"1799\":1,\"1800\":1}}],[\"party\",{\"1\":{\"1867\":1}}],[\"part\",{\"1\":{\"1326\":1}}],[\"parallel\",{\"0\":{\"1141\":1,\"1143\":1},\"1\":{\"1143\":1}}],[\"paramsmap\",{\"1\":{\"1332\":15}}],[\"params\",{\"1\":{\"1332\":3}}],[\"parametervalues\",{\"1\":{\"1589\":2}}],[\"parametertypes\",{\"1\":{\"1022\":1,\"1546\":3}}],[\"parameterizedtype\",{\"1\":{\"447\":1,\"1456\":2}}],[\"param\",{\"0\":{\"1332\":1},\"1\":{\"259\":4,\"465\":1,\"471\":1,\"477\":1,\"543\":1,\"884\":1,\"1326\":2,\"1332\":3,\"1364\":2,\"1518\":1,\"1527\":1,\"1604\":1}}],[\"parnew收集器多线程版本\",{\"1\":{\"1141\":1}}],[\"parnew\",{\"0\":{\"1140\":1}}],[\"parsedargs\",{\"1\":{\"1863\":12,\"1865\":7,\"1866\":3}}],[\"parsefile\",{\"1\":{\"1197\":1,\"1198\":1}}],[\"parseuserclasspath\",{\"1\":{\"1063\":2}}],[\"parsebootandextclasspath\",{\"1\":{\"1063\":2}}],[\"parse失败\",{\"1\":{\"1055\":1}}],[\"parsecmdline\",{\"1\":{\"1070\":1}}],[\"parsecmd\",{\"1\":{\"1055\":1,\"1056\":1,\"1062\":1,\"1070\":2}}],[\"parseclasspath\",{\"1\":{\"1064\":1,\"1070\":1}}],[\"parseclassloader\",{\"1\":{\"985\":1}}],[\"parseclass\",{\"1\":{\"979\":2}}],[\"parsemethoddescriptor\",{\"1\":{\"1022\":1}}],[\"parsereturn\",{\"1\":{\"996\":1}}],[\"parse\",{\"1\":{\"979\":1,\"985\":1,\"996\":1,\"1044\":1,\"1055\":1,\"1063\":1,\"1064\":1,\"1081\":1,\"1102\":1,\"1197\":1,\"1326\":3,\"1332\":1,\"1358\":3,\"1592\":1,\"1789\":2,\"1857\":1}}],[\"parseinterpret\",{\"1\":{\"1102\":1}}],[\"parseinttest\",{\"1\":{\"1037\":3}}],[\"parseint\",{\"1\":{\"525\":2,\"1521\":1}}],[\"parknanos\",{\"1\":{\"888\":1,\"1230\":1}}],[\"park\",{\"1\":{\"888\":1,\"896\":5,\"1230\":1}}],[\"parkandcheckinterrupt\",{\"1\":{\"879\":1,\"880\":1}}],[\"parking\",{\"1\":{\"822\":2}}],[\"parm\",{\"1\":{\"422\":10}}],[\"parentandchild\",{\"1\":{\"1604\":8}}],[\"parent=\",{\"1\":{\"1320\":2}}],[\"parentindex\",{\"1\":{\"283\":5}}],[\"parent\",{\"1\":{\"197\":2,\"1175\":2,\"1346\":26}}],[\"patterns\",{\"1\":{\"310\":1}}],[\"pattern\",{\"1\":{\"259\":1,\"406\":1,\"409\":1,\"417\":1,\"423\":1,\"429\":1,\"436\":1,\"442\":1,\"448\":1,\"454\":1,\"460\":1,\"466\":1,\"472\":1,\"478\":1,\"484\":1,\"490\":1,\"496\":1,\"502\":1,\"508\":1,\"514\":1,\"520\":1,\"526\":1,\"532\":1,\"538\":1,\"544\":1,\"1289\":1}}],[\"pathseparator\",{\"1\":{\"1966\":1}}],[\"pathclassloader\",{\"1\":{\"1866\":1}}],[\"pathcontains\",{\"1\":{\"1558\":1}}],[\"path=\",{\"1\":{\"1323\":1,\"1326\":1,\"1459\":1}}],[\"path=$path\",{\"1\":{\"1050\":1,\"1371\":1,\"1534\":1,\"1555\":1}}],[\"path=$java\",{\"1\":{\"67\":1}}],[\"path2\",{\"1\":{\"1064\":1}}],[\"path1\",{\"1\":{\"1064\":1}}],[\"pathlistseparator\",{\"1\":{\"1064\":3}}],[\"pathmatch\",{\"1\":{\"672\":1}}],[\"path匹配方法\",{\"0\":{\"666\":1}}],[\"path\",{\"1\":{\"67\":1,\"631\":1,\"651\":1,\"666\":3,\"667\":1,\"668\":23,\"672\":1,\"879\":1,\"1061\":1,\"1062\":1,\"1063\":1,\"1064\":13,\"1292\":2,\"1323\":1,\"1326\":2,\"1459\":1,\"1488\":6}}],[\"pay\",{\"1\":{\"12\":1,\"731\":1}}],[\"p\",{\"0\":{\"115\":1},\"1\":{\"25\":1,\"100\":1,\"115\":1,\"121\":2,\"362\":1,\"363\":8,\"612\":1,\"620\":1,\"629\":1,\"695\":1,\"879\":4,\"880\":4,\"895\":19,\"1320\":1,\"1380\":2,\"1399\":3,\"1503\":5,\"1518\":4,\"1521\":1,\"1555\":1,\"1574\":1,\"1580\":1,\"1583\":2,\"1613\":5,\"1638\":1,\"1647\":1,\"1682\":3,\"1847\":12,\"1849\":18,\"1905\":1,\"1978\":1}}],[\"prcessing\",{\"1\":{\"314\":1}}],[\"primitivetype\",{\"1\":{\"1030\":2}}],[\"primitivetypes\",{\"1\":{\"1009\":3,\"1030\":1}}],[\"primitive\",{\"1\":{\"1009\":2}}],[\"primaryswatch\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"primary\",{\"1\":{\"615\":1}}],[\"primarymemberstrategy\",{\"1\":{\"513\":2}}],[\"prio=10\",{\"1\":{\"822\":1}}],[\"priority\",{\"1\":{\"1546\":1,\"1730\":1}}],[\"priorityqueue\",{\"1\":{\"324\":1}}],[\"priorityblockingqueue\",{\"1\":{\"246\":1,\"896\":1,\"914\":1,\"958\":1}}],[\"priv`\",{\"1\":{\"615\":29}}],[\"priv\",{\"1\":{\"614\":29,\"622\":29,\"630\":29}}],[\"privileges\",{\"1\":{\"613\":2,\"615\":1,\"619\":1,\"621\":1,\"629\":2,\"695\":1}}],[\"private方法method3接收类型分别为int\",{\"1\":{\"738\":1}}],[\"private\",{\"1\":{\"169\":2,\"259\":2,\"283\":4,\"284\":2,\"285\":1,\"331\":1,\"332\":3,\"334\":3,\"338\":1,\"342\":1,\"345\":1,\"350\":1,\"358\":1,\"365\":1,\"367\":1,\"368\":3,\"381\":2,\"404\":2,\"405\":8,\"409\":2,\"422\":7,\"441\":1,\"447\":3,\"465\":1,\"471\":3,\"483\":6,\"489\":8,\"495\":4,\"507\":1,\"513\":1,\"519\":1,\"525\":4,\"531\":9,\"537\":1,\"543\":7,\"823\":5,\"852\":1,\"853\":1,\"863\":1,\"864\":1,\"867\":1,\"869\":1,\"870\":6,\"874\":1,\"876\":2,\"879\":2,\"880\":3,\"884\":6,\"885\":3,\"887\":4,\"889\":2,\"897\":3,\"900\":5,\"904\":1,\"907\":3,\"908\":2,\"917\":11,\"920\":1,\"923\":2,\"926\":3,\"929\":1,\"932\":6,\"935\":1,\"938\":1,\"945\":2,\"950\":10,\"958\":5,\"995\":1,\"1030\":2,\"1035\":1,\"1036\":1,\"1312\":4,\"1313\":4,\"1320\":3,\"1329\":1,\"1332\":15,\"1358\":4,\"1364\":4,\"1374\":1,\"1416\":2,\"1417\":12,\"1456\":1,\"1475\":2,\"1518\":1,\"1521\":1,\"1527\":2,\"1540\":1,\"1546\":5,\"1589\":5,\"1592\":7,\"1598\":5,\"1601\":6,\"1604\":8,\"1610\":3,\"1626\":4,\"1731\":1,\"1736\":7,\"1737\":3,\"1738\":2,\"1739\":3,\"1756\":1,\"1762\":2,\"1825\":6,\"1841\":1,\"1849\":1,\"1863\":1,\"1865\":1,\"1866\":1,\"1867\":3}}],[\"price2\",{\"1\":{\"513\":1}}],[\"price1\",{\"1\":{\"513\":1}}],[\"price\",{\"1\":{\"441\":3,\"513\":19}}],[\"printer\",{\"1\":{\"1843\":1}}],[\"printnativemsg\",{\"1\":{\"1527\":1}}],[\"printanimalsname\",{\"1\":{\"1527\":1}}],[\"printargs\",{\"1\":{\"1017\":2}}],[\"printlin\",{\"1\":{\"1521\":1}}],[\"printlist\",{\"1\":{\"1518\":5}}],[\"println\",{\"1\":{\"154\":3,\"169\":8,\"259\":4,\"327\":1,\"365\":1,\"435\":3,\"441\":3,\"447\":4,\"453\":5,\"459\":2,\"471\":3,\"477\":1,\"483\":3,\"489\":4,\"501\":5,\"507\":10,\"519\":1,\"531\":6,\"537\":2,\"543\":1,\"823\":2,\"843\":3,\"853\":1,\"868\":1,\"870\":2,\"884\":1,\"897\":1,\"900\":8,\"904\":3,\"905\":3,\"907\":1,\"908\":6,\"958\":2,\"983\":1,\"1036\":2,\"1056\":1,\"1070\":1,\"1188\":5,\"1203\":6,\"1368\":1,\"1488\":4,\"1518\":48,\"1521\":2,\"1613\":11,\"1730\":1,\"1731\":2,\"1732\":1,\"1843\":2}}],[\"printmap\",{\"1\":{\"1518\":6}}],[\"printsum\",{\"1\":{\"1518\":1}}],[\"printstacktrace\",{\"1\":{\"154\":1,\"416\":3,\"823\":1,\"867\":1,\"870\":7,\"905\":2,\"907\":1,\"908\":2,\"917\":1,\"1326\":2,\"1416\":1,\"1552\":1,\"1601\":2,\"1736\":2}}],[\"printusage\",{\"1\":{\"1055\":3,\"1056\":1,\"1070\":1}}],[\"printfregion\",{\"1\":{\"1527\":1}}],[\"printfcritical\",{\"1\":{\"1527\":1}}],[\"printf\",{\"1\":{\"926\":1,\"979\":1,\"985\":1,\"996\":1,\"1044\":1,\"1055\":1,\"1056\":1,\"1064\":3,\"1101\":4,\"1102\":1,\"1527\":1,\"1534\":1,\"1727\":4}}],[\"print\",{\"1\":{\"465\":9,\"711\":2,\"715\":1,\"822\":1,\"834\":1,\"870\":1,\"884\":3,\"923\":3,\"1055\":3,\"1323\":2,\"1335\":2,\"1459\":2,\"1518\":7,\"1527\":1}}],[\"preload\",{\"1\":{\"1862\":1}}],[\"preloadservicemethod\",{\"1\":{\"1592\":2}}],[\"precision\",{\"1\":{\"1540\":1}}],[\"predecessor\",{\"1\":{\"879\":1,\"880\":1}}],[\"predebugbuild\",{\"1\":{\"103\":1}}],[\"pred\",{\"1\":{\"879\":5}}],[\"pre\",{\"1\":{\"694\":1,\"1540\":1}}],[\"preferredauthentications\",{\"1\":{\"1923\":1}}],[\"preferences\",{\"1\":{\"1707\":1,\"1708\":1,\"1711\":1,\"1712\":1}}],[\"prefer\",{\"1\":{\"638\":1}}],[\"premium\",{\"1\":{\"615\":1}}],[\"prevmsg\",{\"1\":{\"1846\":4}}],[\"prevchannel\",{\"1\":{\"507\":5}}],[\"prev\",{\"1\":{\"345\":1,\"878\":1,\"879\":2,\"1847\":3,\"1849\":8}}],[\"previous\",{\"1\":{\"73\":1,\"109\":1,\"359\":1}}],[\"preindex+1\",{\"1\":{\"280\":1}}],[\"preindex>=0\",{\"1\":{\"280\":1}}],[\"preindex\",{\"1\":{\"280\":5,\"281\":7}}],[\"preset\",{\"1\":{\"694\":1}}],[\"presentation\",{\"1\":{\"311\":1}}],[\"present\",{\"1\":{\"115\":3}}],[\"preserve\",{\"1\":{\"16\":1}}],[\"preparemainlooper\",{\"1\":{\"1730\":1,\"1843\":1,\"1867\":1,\"1869\":1}}],[\"prepare\",{\"1\":{\"103\":1,\"979\":2,\"1839\":1,\"1840\":1}}],[\"provide\",{\"1\":{\"1713\":1}}],[\"provided\",{\"1\":{\"1534\":1}}],[\"provider\",{\"1\":{\"808\":1,\"1383\":2,\"1666\":2}}],[\"pro\",{\"1\":{\"1361\":1,\"1435\":1}}],[\"pro信息抓取\",{\"1\":{\"1298\":1}}],[\"profile文件添加\",{\"1\":{\"1555\":1}}],[\"profile\",{\"1\":{\"1050\":1,\"1371\":1,\"1534\":2,\"1555\":1,\"1708\":1,\"1709\":2,\"1712\":1}}],[\"profiler\",{\"1\":{\"870\":1}}],[\"prop\",{\"1\":{\"1702\":2,\"1708\":1,\"1711\":1,\"1712\":1}}],[\"propetties配置\",{\"1\":{\"1476\":1}}],[\"propetties配置isrunalone\",{\"1\":{\"1476\":1}}],[\"propetties\",{\"1\":{\"1473\":1,\"1476\":2}}],[\"proper\",{\"1\":{\"334\":2}}],[\"property\",{\"0\":{\"61\":1},\"1\":{\"61\":2}}],[\"properties\",{\"1\":{\"67\":2,\"1491\":1,\"1534\":6,\"1613\":9,\"1905\":2,\"1952\":1}}],[\"properties文件中\",{\"1\":{\"1607\":1}}],[\"properties文件\",{\"1\":{\"67\":1}}],[\"properties这个文件\",{\"1\":{\"40\":1}}],[\"properties设置两行\",{\"1\":{\"34\":1}}],[\"propagate\",{\"1\":{\"878\":1}}],[\"proc分配一块buffer\",{\"1\":{\"1770\":1}}],[\"proc的todo队列中\",{\"1\":{\"1754\":1}}],[\"proc中\",{\"1\":{\"1754\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"1374\":1,\"1589\":1}}],[\"proceed\",{\"1\":{\"1332\":1,\"1374\":1,\"1589\":2}}],[\"process进程启动过程\",{\"1\":{\"1860\":1}}],[\"processpendingderefs\",{\"1\":{\"1778\":1}}],[\"process=\",{\"1\":{\"1737\":1}}],[\"processstate\",{\"1\":{\"1725\":1,\"1746\":1,\"1778\":3,\"1779\":2,\"1781\":1,\"1798\":2,\"1800\":1,\"1804\":1,\"1805\":3,\"1807\":1}}],[\"processannotations\",{\"1\":{\"1197\":1,\"1199\":1}}],[\"processdata\",{\"1\":{\"887\":1}}],[\"processdebugresources\",{\"1\":{\"103\":1}}],[\"processes\",{\"1\":{\"631\":1,\"1857\":1}}],[\"processingenv\",{\"1\":{\"1604\":9}}],[\"processingenvironment\",{\"1\":{\"1604\":2}}],[\"processing\",{\"1\":{\"314\":2,\"1604\":2}}],[\"process\",{\"1\":{\"94\":2,\"614\":1,\"622\":1,\"630\":1,\"694\":2,\"1332\":2,\"1604\":1,\"1730\":2,\"1736\":1,\"1737\":2,\"1777\":1,\"1781\":1,\"1858\":1,\"1860\":1,\"1865\":1,\"1869\":1,\"1870\":2}}],[\"processor\",{\"1\":{\"73\":5,\"1604\":1}}],[\"processors\",{\"1\":{\"73\":1,\"1197\":1}}],[\"proces\",{\"0\":{\"73\":1}}],[\"proc\",{\"1\":{\"834\":4,\"1754\":1,\"1770\":18,\"1772\":2,\"1778\":2,\"1798\":1}}],[\"procs\",{\"1\":{\"820\":1}}],[\"protocol\",{\"1\":{\"1768\":2}}],[\"protocols\",{\"1\":{\"638\":1}}],[\"proto\",{\"1\":{\"662\":1,\"723\":1}}],[\"protected方法method2无参数\",{\"1\":{\"738\":1}}],[\"protected\",{\"1\":{\"197\":1,\"283\":1,\"285\":1,\"364\":1,\"365\":1,\"409\":1,\"459\":1,\"465\":1,\"483\":1,\"876\":3,\"880\":2,\"882\":1,\"883\":1,\"886\":2,\"897\":1,\"1023\":1,\"1109\":2,\"1175\":1,\"1320\":1,\"1416\":1,\"1518\":1,\"1521\":1,\"1598\":2,\"1604\":6,\"1610\":5,\"1732\":1,\"1738\":1,\"1756\":1,\"1778\":1,\"1831\":2,\"1866\":1}}],[\"produce\",{\"1\":{\"870\":2,\"889\":1}}],[\"produceandconsume\",{\"1\":{\"870\":1}}],[\"products\",{\"1\":{\"1555\":2}}],[\"productcategory\",{\"1\":{\"668\":3}}],[\"production\",{\"1\":{\"604\":1,\"657\":1}}],[\"product=\",{\"1\":{\"531\":2}}],[\"product>\",{\"1\":{\"416\":2}}],[\"productb\",{\"1\":{\"415\":2}}],[\"producta\",{\"1\":{\"415\":2,\"416\":2}}],[\"product\",{\"1\":{\"415\":9,\"416\":10,\"531\":6,\"668\":3,\"1298\":3,\"1616\":1}}],[\"prod\",{\"1\":{\"604\":1,\"657\":1}}],[\"programobjectid\",{\"1\":{\"1540\":1}}],[\"programs\",{\"1\":{\"631\":2}}],[\"program\",{\"1\":{\"115\":3,\"465\":1,\"631\":3,\"1540\":1}}],[\"progress\",{\"1\":{\"94\":2}}],[\"promise\",{\"1\":{\"94\":1}}],[\"prometheus\",{\"1\":{\"12\":1,\"731\":1}}],[\"problem\",{\"1\":{\"94\":1}}],[\"probably\",{\"1\":{\"94\":1}}],[\"projectdir\",{\"1\":{\"1488\":6}}],[\"project\",{\"0\":{\"61\":1},\"1\":{\"61\":1,\"1474\":10,\"1475\":8,\"1488\":10,\"1491\":2,\"1534\":9,\"1552\":4,\"1709\":2,\"1966\":2}}],[\"proxy构造函数\",{\"1\":{\"1739\":1}}],[\"proxy>\",{\"1\":{\"1341\":1}}],[\"proxyport=1080\",{\"1\":{\"40\":1}}],[\"proxyport=2273\",{\"1\":{\"34\":2}}],[\"proxy\",{\"0\":{\"40\":1},\"1\":{\"40\":1,\"259\":16,\"447\":7,\"638\":5,\"1341\":2,\"1589\":1,\"1592\":5,\"1739\":3}}],[\"proxyhost=127\",{\"1\":{\"34\":2,\"40\":1}}],[\"p6spy\",{\"1\":{\"12\":1,\"731\":1}}],[\"支持arr包\",{\"1\":{\"1966\":1}}],[\"支持所有的数据类型\",{\"1\":{\"1708\":1}}],[\"支持项目可拆分多部分\",{\"1\":{\"1622\":1}}],[\"支持数据类型\",{\"1\":{\"1625\":4}}],[\"支持数据异步提交用apply并且兼容\",{\"1\":{\"1622\":1}}],[\"支持数据迁移\",{\"1\":{\"1622\":1}}],[\"支持原有sp数据存储\",{\"1\":{\"1622\":1}}],[\"支持参数可配置化\",{\"1\":{\"1622\":1}}],[\"支持参数化配置\",{\"1\":{\"1619\":1}}],[\"支持360自动加固task\",{\"0\":{\"1613\":1},\"1\":{\"1613\":1}}],[\"支持http\",{\"1\":{\"1595\":1}}],[\"支持黏性事件\",{\"1\":{\"1546\":1,\"1636\":1}}],[\"支持线程安全\",{\"1\":{\"1546\":1}}],[\"支持gdb\",{\"1\":{\"1534\":1}}],[\"支持weixinapi脚本自动触发\",{\"1\":{\"1491\":1}}],[\"支持web能力\",{\"1\":{\"12\":1,\"731\":1}}],[\"支持声明api式编程\",{\"1\":{\"1491\":1}}],[\"支持壳工程\",{\"1\":{\"1476\":1}}],[\"支持用户惯性写法\",{\"1\":{\"1476\":1}}],[\"支持单独调试和发布\",{\"1\":{\"1474\":2,\"1475\":1}}],[\"支持单体服务与微服务快速切换\",{\"1\":{\"11\":1,\"730\":1}}],[\"支持编译隔离\",{\"1\":{\"1474\":1}}],[\"支持本地存储\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"支持stateful\",{\"0\":{\"1383\":1,\"1666\":1}}],[\"支持列表\",{\"0\":{\"1383\":1,\"1666\":1}}],[\"支持变量\",{\"1\":{\"1361\":1}}],[\"支持检测\",{\"1\":{\"1078\":1}}],[\"支持字符串\",{\"1\":{\"1015\":2}}],[\"支持反射\",{\"1\":{\"1015\":1}}],[\"支持可重入\",{\"1\":{\"886\":1}}],[\"支持获取锁\",{\"1\":{\"881\":1}}],[\"支持一个线程对资源重复加锁\",{\"1\":{\"881\":1}}],[\"支持类型spi\",{\"1\":{\"808\":1}}],[\"支持类型api\",{\"1\":{\"808\":1}}],[\"支持改进\",{\"1\":{\"796\":1}}],[\"支持远程连接配置\",{\"0\":{\"627\":1}}],[\"支持对容器对象的多种遍历\",{\"1\":{\"543\":1}}],[\"支持随机访问\",{\"1\":{\"323\":1}}],[\"支持快速查找\",{\"1\":{\"322\":1}}],[\"支持有序性操作\",{\"1\":{\"322\":1}}],[\"支持crud下载\",{\"1\":{\"14\":1,\"733\":1}}],[\"支持大部分注解内容国际化\",{\"1\":{\"12\":1,\"731\":1}}],[\"支持大部分新功能特性\",{\"1\":{\"12\":1,\"731\":1}}],[\"支持多sharepref文件\",{\"1\":{\"1622\":1}}],[\"支持多sharepref表使用\",{\"1\":{\"1619\":1}}],[\"支持多层注解\",{\"1\":{\"1604\":1}}],[\"支持多数据源不同种类的数据库事务回滚\",{\"1\":{\"12\":1,\"731\":1}}],[\"支持多种数据类型任意实体类\",{\"1\":{\"1622\":1}}],[\"支持多种自定义\",{\"1\":{\"12\":1,\"731\":1}}],[\"支持多种方式传参\",{\"1\":{\"12\":1,\"731\":1}}],[\"支持世面大部分数据库通过yml配置即可动态管理异构不同种类的数据库\",{\"1\":{\"12\":1,\"731\":1}}],[\"支持不同模块不同的脱敏条件支持多种策略\",{\"1\":{\"12\":1,\"731\":1}}],[\"支持前端多排序\",{\"1\":{\"12\":1,\"731\":1}}],[\"支持\",{\"1\":{\"12\":5,\"731\":5,\"1708\":1}}],[\"支持注解配置\",{\"1\":{\"1595\":1}}],[\"支持注解与工具类校验\",{\"1\":{\"12\":1,\"731\":1}}],[\"支持注解\",{\"1\":{\"12\":1,\"731\":1}}],[\"支持redis能力\",{\"1\":{\"12\":1,\"731\":1}}],[\"哨兵\",{\"1\":{\"12\":1,\"731\":1}}],[\"哨兵客户端\",{\"1\":{\"12\":1,\"731\":1}}],[\"哨兵服务\",{\"1\":{\"12\":1,\"731\":1}}],[\"i18n\",{\"1\":{\"1702\":1,\"1937\":2,\"1970\":2}}],[\"ignoring\",{\"1\":{\"1392\":1,\"1675\":1}}],[\"ignore\",{\"1\":{\"1546\":1,\"1583\":3}}],[\"ignorepointer\",{\"1\":{\"1392\":1,\"1675\":1}}],[\"ignored\",{\"1\":{\"334\":1}}],[\"iremoteservice\",{\"1\":{\"1735\":1,\"1736\":3,\"1737\":2,\"1739\":9}}],[\"ireturn\",{\"1\":{\"993\":1,\"1022\":1}}],[\"ireceive\",{\"1\":{\"489\":3}}],[\"ieee\",{\"1\":{\"1530\":2}}],[\"ie\",{\"1\":{\"896\":1}}],[\"iengine\",{\"1\":{\"428\":4}}],[\"iz2ze6r3rvh2dc9nds2291z\",{\"1\":{\"694\":2}}],[\"ivisitor<accept\",{\"1\":{\"531\":1}}],[\"ivisitor\",{\"1\":{\"531\":7}}],[\"iactivitymanager\",{\"1\":{\"1756\":11}}],[\"iaccept>\",{\"1\":{\"531\":1}}],[\"iaccept\",{\"1\":{\"531\":5}}],[\"iapplicationthread\",{\"1\":{\"1756\":1,\"1762\":1}}],[\"iadd\",{\"1\":{\"1095\":2}}],[\"iarithemticexpression\",{\"1\":{\"525\":16}}],[\"iargue\",{\"1\":{\"259\":1}}],[\"i=\",{\"1\":{\"525\":1}}],[\"i=0\",{\"1\":{\"334\":2,\"923\":1}}],[\"ic\",{\"1\":{\"1292\":1,\"1305\":2}}],[\"icon<\",{\"1\":{\"1320\":1}}],[\"iconst\",{\"1\":{\"1203\":1}}],[\"icon\",{\"1\":{\"668\":18,\"1292\":2,\"1435\":1}}],[\"icomputer\",{\"1\":{\"501\":2}}],[\"icommand\",{\"1\":{\"489\":5}}],[\"icar\",{\"1\":{\"435\":8}}],[\"icarfactory\",{\"1\":{\"428\":3}}],[\"ibinder>\",{\"1\":{\"1806\":1}}],[\"ibinder\",{\"1\":{\"1726\":1,\"1731\":4,\"1732\":3,\"1736\":1,\"1737\":1,\"1739\":7,\"1746\":1,\"1751\":1,\"1756\":8,\"1757\":1,\"1762\":5}}],[\"ibdata1\",{\"1\":{\"631\":1}}],[\"ibrake\",{\"1\":{\"428\":4}}],[\"ibm公司研究\",{\"1\":{\"206\":1}}],[\"iin\",{\"1\":{\"1739\":4}}],[\"iinterface\",{\"1\":{\"1727\":1,\"1732\":6,\"1739\":2,\"1746\":2,\"1756\":2,\"1757\":1,\"1800\":2,\"1807\":1}}],[\"iii\",{\"1\":{\"298\":2}}],[\"ii\",{\"1\":{\"298\":2}}],[\"i+1\",{\"1\":{\"279\":1,\"280\":1}}],[\"i++\",{\"1\":{\"278\":1,\"279\":1,\"280\":1,\"281\":1,\"282\":1,\"283\":1,\"284\":2,\"285\":2,\"334\":2,\"525\":1,\"884\":1,\"897\":1,\"907\":1,\"917\":1,\"923\":1,\"950\":2,\"1036\":1,\"1110\":3,\"1368\":1,\"1828\":2,\"1829\":1,\"1846\":1}}],[\"i<thread\",{\"1\":{\"907\":1}}],[\"i<size\",{\"1\":{\"334\":2}}],[\"i<j\",{\"1\":{\"279\":4}}],[\"i<\",{\"1\":{\"278\":1}}],[\"ipad\",{\"1\":{\"1435\":2}}],[\"iphonex\",{\"1\":{\"1435\":1}}],[\"iphone\",{\"1\":{\"1435\":6}}],[\"iphone8\",{\"1\":{\"1377\":1}}],[\"iphone7\",{\"1\":{\"1377\":1}}],[\"ip\",{\"1\":{\"631\":1,\"638\":1,\"680\":1,\"1966\":2}}],[\"ipowercontroller\",{\"1\":{\"507\":2}}],[\"ipcthread\",{\"1\":{\"1779\":1}}],[\"ipcthreadstate\",{\"1\":{\"1717\":6,\"1718\":1,\"1725\":1,\"1746\":1,\"1756\":2,\"1778\":3,\"1781\":1,\"1798\":2,\"1800\":1}}],[\"ipc通信进程的交互\",{\"1\":{\"1768\":1}}],[\"ipc层\",{\"1\":{\"1767\":1}}],[\"ipc原理\",{\"0\":{\"1743\":1},\"1\":{\"1743\":1}}],[\"ipc权限管理\",{\"0\":{\"1715\":1}}],[\"ipc\",{\"1\":{\"268\":1,\"1798\":1}}],[\"ipv4\",{\"1\":{\"58\":1,\"1963\":1}}],[\"iljava\",{\"1\":{\"1530\":1}}],[\"illegalmonitorstateexception\",{\"1\":{\"876\":1,\"882\":1}}],[\"illegalaccesserror\",{\"1\":{\"993\":1,\"1110\":1}}],[\"illegalaccessexception\",{\"1\":{\"416\":1,\"1592\":1,\"1604\":3}}],[\"illegalargumentexception\",{\"1\":{\"338\":1,\"880\":1,\"1332\":2,\"1518\":1,\"1527\":1,\"1847\":1}}],[\"illegal\",{\"1\":{\"338\":1}}],[\"illegalstateexception\",{\"0\":{\"82\":1},\"1\":{\"70\":1,\"1717\":1,\"1847\":1,\"1850\":1}}],[\"ilawsuit\",{\"1\":{\"259\":16,\"447\":13}}],[\"imediadeathnotifier\",{\"1\":{\"1799\":1}}],[\"imemberstrategy\",{\"1\":{\"513\":6}}],[\"imemotostore\",{\"1\":{\"495\":2}}],[\"imyservice\",{\"1\":{\"1724\":2,\"1725\":1,\"1726\":2,\"1727\":5,\"1729\":2,\"1731\":2,\"1732\":5}}],[\"iml\",{\"1\":{\"1555\":1}}],[\"img\",{\"1\":{\"1417\":1}}],[\"im\",{\"1\":{\"1335\":4,\"1503\":1,\"1515\":1,\"1540\":1}}],[\"im平台\",{\"0\":{\"1335\":1}}],[\"immutable模式\",{\"0\":{\"929\":1}}],[\"imagepath\",{\"1\":{\"1417\":2}}],[\"imageuri\",{\"1\":{\"1417\":7}}],[\"imagelist\",{\"1\":{\"409\":2}}],[\"imagespan\",{\"1\":{\"1310\":1}}],[\"images\",{\"1\":{\"409\":6,\"1417\":1}}],[\"image\",{\"1\":{\"229\":1,\"305\":5,\"589\":1,\"1050\":1,\"1417\":3,\"1708\":1,\"1712\":1}}],[\"implied\",{\"1\":{\"1648\":1}}],[\"impl\",{\"1\":{\"459\":10,\"1727\":3}}],[\"implementation\",{\"1\":{\"1304\":1,\"1329\":1,\"1491\":1,\"1534\":1,\"1623\":1,\"1642\":1}}],[\"implement\",{\"1\":{\"923\":1,\"926\":2,\"950\":3,\"958\":2,\"1727\":1,\"1805\":1,\"1806\":2}}],[\"implements\",{\"1\":{\"259\":3,\"331\":1,\"348\":1,\"358\":1,\"362\":1,\"367\":1,\"409\":1,\"415\":4,\"416\":2,\"422\":1,\"428\":4,\"435\":3,\"441\":1,\"447\":3,\"453\":2,\"477\":1,\"483\":1,\"489\":6,\"495\":1,\"501\":1,\"507\":3,\"513\":3,\"519\":2,\"525\":4,\"531\":3,\"537\":1,\"543\":2,\"650\":1,\"867\":4,\"868\":1,\"869\":1,\"876\":1,\"880\":1,\"905\":1,\"917\":2,\"945\":1,\"995\":1,\"1295\":1,\"1332\":1,\"1468\":1,\"1546\":1,\"1592\":1,\"1601\":2,\"1604\":1,\"1610\":1,\"1731\":1,\"1732\":1,\"1738\":1,\"1739\":2,\"1756\":5,\"1762\":3}}],[\"implemented\",{\"1\":{\"67\":1}}],[\"import\",{\"1\":{\"650\":9,\"666\":1,\"667\":2,\"668\":18,\"876\":4,\"1023\":3,\"1055\":3,\"1056\":1,\"1063\":1,\"1064\":2,\"1352\":3,\"1383\":9,\"1392\":2,\"1402\":3,\"1468\":6,\"1660\":3,\"1666\":9,\"1675\":2,\"1685\":3,\"1708\":2}}],[\"important\",{\"1\":{\"631\":1}}],[\"importerror\",{\"0\":{\"88\":1}}],[\"impossible\",{\"1\":{\"359\":1}}],[\"idres\",{\"1\":{\"1604\":1}}],[\"idle时执行的方法\",{\"1\":{\"1846\":1}}],[\"idler\",{\"1\":{\"1846\":3}}],[\"idlehandler\",{\"1\":{\"1846\":3}}],[\"idle\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"id=$\",{\"1\":{\"1335\":2}}],[\"id=\",{\"1\":{\"1326\":1,\"1335\":2,\"1346\":12,\"1555\":2}}],[\"idc扩展\",{\"1\":{\"1015\":1}}],[\"idc指令\",{\"1\":{\"984\":1}}],[\"idc\",{\"1\":{\"983\":1}}],[\"idcardlibrary\",{\"1\":{\"103\":2}}],[\"id\",{\"1\":{\"631\":1,\"820\":1,\"1292\":4,\"1298\":3,\"1335\":8,\"1346\":16,\"1555\":1,\"1601\":3,\"1604\":4,\"1610\":4,\"1645\":1,\"1736\":3,\"1943\":2,\"1955\":2}}],[\"id>\",{\"1\":{\"608\":2,\"1555\":1}}],[\"identityfile\",{\"1\":{\"1923\":1}}],[\"identity\",{\"1\":{\"1922\":1}}],[\"identification\",{\"1\":{\"1534\":2}}],[\"identified\",{\"1\":{\"613\":1,\"629\":1}}],[\"ident\",{\"1\":{\"1828\":1,\"1831\":1,\"1843\":1}}],[\"ide开发\",{\"1\":{\"1555\":1}}],[\"ide编写代码时\",{\"1\":{\"1473\":1}}],[\"idea的一些配置信息\",{\"1\":{\"1555\":1}}],[\"idea\",{\"1\":{\"19\":1,\"25\":1,\"67\":4,\"109\":1,\"329\":1,\"1555\":3,\"1952\":1}}],[\"ide安装\",{\"0\":{\"19\":1}}],[\"io仓库\",{\"1\":{\"1960\":1}}],[\"io信息\",{\"1\":{\"1789\":1}}],[\"ioctl\",{\"1\":{\"1771\":1,\"1772\":4,\"1789\":1}}],[\"ioctl请求后\",{\"1\":{\"1755\":1}}],[\"ioc\",{\"1\":{\"805\":1}}],[\"ios切图只能做一张\",{\"1\":{\"1443\":1}}],[\"ios必须是2x\",{\"1\":{\"1435\":1}}],[\"ios规范\",{\"1\":{\"1435\":1}}],[\"ios传空字符串\",{\"1\":{\"1377\":1}}],[\"ios\",{\"1\":{\"1335\":1,\"1377\":1,\"1413\":1,\"1435\":1}}],[\"ios提交苹果应用市场\",{\"1\":{\"595\":1}}],[\"ios审核需求与民生项目并行\",{\"1\":{\"595\":1}}],[\"ios周末加班开发\",{\"1\":{\"595\":1}}],[\"iobserver\",{\"1\":{\"519\":5}}],[\"iobservable\",{\"1\":{\"519\":2}}],[\"ioexception\",{\"0\":{\"1405\":1},\"1\":{\"334\":2,\"870\":6,\"1332\":1,\"1552\":1,\"1601\":2,\"1604\":1,\"1863\":1}}],[\"io密集型\",{\"1\":{\"248\":1,\"828\":1}}],[\"io\",{\"0\":{\"100\":1,\"1405\":1},\"1\":{\"88\":1,\"100\":1,\"331\":1,\"334\":4,\"808\":1,\"820\":1,\"1009\":1,\"1030\":1,\"1304\":1,\"1399\":2,\"1515\":1,\"1558\":1,\"1561\":1,\"1595\":1,\"1623\":1,\"1641\":1,\"1682\":2,\"1789\":3,\"1911\":2,\"1933\":1,\"1959\":3,\"1960\":3,\"1961\":1,\"1962\":1}}],[\"ifeve\",{\"1\":{\"822\":1}}],[\"ifaces\",{\"1\":{\"259\":2}}],[\"if\",{\"1\":{\"70\":2,\"154\":1,\"197\":4,\"278\":2,\"279\":3,\"280\":1,\"281\":1,\"282\":2,\"283\":5,\"284\":4,\"285\":4,\"332\":4,\"333\":1,\"334\":2,\"337\":1,\"338\":3,\"348\":3,\"350\":5,\"351\":1,\"352\":3,\"359\":7,\"363\":4,\"364\":1,\"368\":3,\"381\":6,\"405\":4,\"441\":1,\"465\":1,\"483\":3,\"501\":1,\"531\":6,\"537\":2,\"615\":1,\"631\":5,\"651\":3,\"652\":1,\"711\":5,\"852\":1,\"853\":1,\"859\":1,\"864\":2,\"876\":2,\"879\":11,\"880\":10,\"882\":6,\"883\":4,\"886\":10,\"895\":8,\"896\":6,\"897\":1,\"900\":1,\"917\":7,\"920\":1,\"950\":3,\"958\":1,\"978\":1,\"979\":4,\"983\":1,\"984\":10,\"985\":1,\"992\":1,\"993\":13,\"994\":2,\"996\":1,\"1003\":4,\"1009\":10,\"1015\":2,\"1022\":4,\"1023\":1,\"1030\":4,\"1036\":12,\"1044\":1,\"1055\":1,\"1056\":2,\"1063\":5,\"1064\":4,\"1070\":4,\"1077\":1,\"1078\":1,\"1101\":1,\"1102\":2,\"1109\":3,\"1110\":3,\"1175\":4,\"1203\":1,\"1239\":1,\"1277\":3,\"1320\":2,\"1326\":3,\"1329\":1,\"1332\":16,\"1349\":9,\"1358\":4,\"1364\":1,\"1368\":1,\"1374\":2,\"1383\":3,\"1392\":3,\"1416\":3,\"1417\":14,\"1468\":2,\"1474\":1,\"1475\":2,\"1488\":2,\"1518\":14,\"1521\":1,\"1530\":2,\"1534\":1,\"1546\":7,\"1552\":1,\"1555\":2,\"1589\":1,\"1592\":5,\"1598\":5,\"1604\":9,\"1613\":5,\"1666\":3,\"1675\":3,\"1717\":1,\"1732\":2,\"1736\":1,\"1739\":4,\"1756\":11,\"1762\":3,\"1770\":3,\"1772\":2,\"1778\":4,\"1788\":4,\"1789\":5,\"1790\":9,\"1798\":6,\"1799\":4,\"1805\":3,\"1806\":2,\"1826\":2,\"1827\":2,\"1828\":14,\"1829\":2,\"1840\":3,\"1841\":1,\"1842\":3,\"1843\":3,\"1846\":11,\"1847\":7,\"1849\":4,\"1850\":4,\"1851\":1,\"1857\":3,\"1860\":3,\"1861\":2,\"1862\":1,\"1863\":1,\"1865\":2,\"1866\":1,\"1869\":1}}],[\"islocalclass\",{\"1\":{\"1840\":1}}],[\"islogin\",{\"1\":{\"501\":3}}],[\"isolated\",{\"1\":{\"1790\":6}}],[\"isok\",{\"1\":{\"1625\":2}}],[\"isonsyncqueue\",{\"1\":{\"896\":1}}],[\"isharedpref\",{\"1\":{\"1625\":1,\"1626\":4,\"1628\":2}}],[\"isheldexclusively\",{\"1\":{\"876\":1}}],[\"ismemberclass\",{\"1\":{\"1840\":1}}],[\"ismockexist\",{\"1\":{\"1592\":2}}],[\"ismain\",{\"1\":{\"1778\":7}}],[\"ismain=false\",{\"1\":{\"1776\":1}}],[\"ismainthread\",{\"1\":{\"1546\":1}}],[\"ismainapp=true\",{\"1\":{\"1476\":2}}],[\"ismainapp\",{\"1\":{\"1474\":1}}],[\"isvertical\",{\"1\":{\"1568\":1}}],[\"isvisible\",{\"1\":{\"1568\":1}}],[\"iservicemanager\",{\"1\":{\"1725\":1,\"1726\":1,\"1746\":3,\"1757\":1,\"1798\":2,\"1799\":1,\"1800\":1,\"1805\":1,\"1806\":11,\"1807\":2}}],[\"isenabled\",{\"1\":{\"1589\":3}}],[\"isequalto\",{\"1\":{\"1567\":1}}],[\"isempty\",{\"1\":{\"917\":1,\"950\":2,\"958\":2,\"1197\":1,\"1326\":3,\"1332\":8,\"1364\":1,\"1417\":1,\"1860\":1}}],[\"isgone\",{\"1\":{\"1567\":1}}],[\"iscompile\",{\"1\":{\"1632\":1}}],[\"iscopy\",{\"1\":{\"1530\":2}}],[\"iscaptureenabled\",{\"1\":{\"1416\":1,\"1417\":2}}],[\"isrunalways=true\",{\"1\":{\"1491\":1}}],[\"isrunalone=false\",{\"1\":{\"1476\":1}}],[\"isrunalone\",{\"1\":{\"1475\":2}}],[\"isusergesture\",{\"1\":{\"1416\":1}}],[\"isup\",{\"1\":{\"1383\":2,\"1666\":2}}],[\"isdirectory\",{\"1\":{\"1488\":2}}],[\"isdialog\",{\"1\":{\"1416\":1}}],[\"isdebug上\",{\"1\":{\"61\":1}}],[\"isdebug\",{\"1\":{\"61\":1}}],[\"isfragment\",{\"1\":{\"1604\":1}}],[\"isfastdoubleclick\",{\"1\":{\"1374\":2}}],[\"isfixedorientation\",{\"1\":{\"70\":1}}],[\"isimplements\",{\"1\":{\"993\":1,\"1023\":1}}],[\"isinuse\",{\"1\":{\"1847\":1,\"1850\":1}}],[\"isinstanceof\",{\"1\":{\"984\":2}}],[\"isinterface\",{\"1\":{\"984\":1,\"1003\":1,\"1030\":5}}],[\"isinterrupted\",{\"1\":{\"867\":1,\"869\":1,\"944\":1,\"945\":1,\"950\":1}}],[\"issameobject其他用途\",{\"1\":{\"1530\":1}}],[\"issameobject\",{\"1\":{\"1530\":1}}],[\"issubtype\",{\"1\":{\"1604\":3}}],[\"issubclassof\",{\"1\":{\"1109\":1}}],[\"issuperclassof\",{\"1\":{\"1036\":1}}],[\"issuer`\",{\"1\":{\"615\":1}}],[\"issuer\",{\"1\":{\"614\":1,\"622\":1,\"630\":1}}],[\"issue管理\",{\"1\":{\"305\":1}}],[\"isstackempty\",{\"1\":{\"994\":1,\"1036\":1}}],[\"isstatic\",{\"1\":{\"984\":2,\"993\":3,\"1015\":3}}],[\"isasynchronous\",{\"1\":{\"1846\":1,\"1847\":2}}],[\"isanonymousclass\",{\"1\":{\"1840\":1}}],[\"isannotationpresent\",{\"1\":{\"1592\":1}}],[\"isactivity\",{\"1\":{\"1604\":1}}],[\"isaccessibleto\",{\"1\":{\"1109\":1,\"1110\":1}}],[\"isalipay\",{\"1\":{\"1358\":2}}],[\"isalive\",{\"1\":{\"870\":1}}],[\"isapkinstalled\",{\"1\":{\"1326\":1}}],[\"isarray\",{\"1\":{\"1009\":1}}],[\"isabstract\",{\"1\":{\"984\":1,\"993\":1}}],[\"isprotected\",{\"1\":{\"1109\":1}}],[\"isprimitive\",{\"1\":{\"1030\":5}}],[\"isprivate\",{\"1\":{\"993\":1,\"1109\":1}}],[\"ispublic\",{\"1\":{\"993\":1,\"1109\":1}}],[\"isp\",{\"1\":{\"753\":1}}],[\"isnotempty\",{\"1\":{\"1468\":2,\"1604\":5}}],[\"isnative\",{\"1\":{\"993\":1,\"1022\":1,\"1036\":1}}],[\"isn\",{\"1\":{\"359\":1}}],[\"istranslucentorfloating\",{\"1\":{\"70\":3}}],[\"is\",{\"0\":{\"67\":1},\"1\":{\"67\":2,\"73\":1,\"94\":2,\"332\":2,\"359\":1,\"381\":1,\"631\":3,\"672\":1,\"711\":5,\"715\":1,\"751\":1,\"868\":1,\"895\":3,\"908\":2,\"1036\":2,\"1475\":2,\"1518\":9,\"1521\":1,\"1527\":2,\"1534\":6,\"1546\":1,\"1555\":1,\"1648\":2,\"1788\":1,\"1847\":1,\"1850\":1}}],[\"i\",{\"1\":{\"58\":2,\"278\":2,\"279\":8,\"280\":3,\"281\":4,\"282\":7,\"283\":6,\"284\":4,\"285\":18,\"286\":2,\"334\":2,\"350\":3,\"351\":1,\"352\":3,\"381\":5,\"525\":3,\"711\":1,\"715\":1,\"750\":1,\"852\":2,\"870\":7,\"884\":2,\"897\":3,\"907\":1,\"917\":2,\"923\":2,\"950\":5,\"979\":2,\"984\":2,\"993\":4,\"1008\":2,\"1009\":7,\"1016\":2,\"1023\":2,\"1036\":7,\"1044\":2,\"1109\":11,\"1110\":12,\"1203\":10,\"1358\":2,\"1368\":4,\"1417\":10,\"1518\":6,\"1530\":10,\"1736\":5,\"1737\":6,\"1826\":6,\"1828\":7,\"1829\":3,\"1846\":4,\"1963\":2}}],[\"itvstatus\",{\"1\":{\"507\":6}}],[\"itire\",{\"1\":{\"428\":4}}],[\"its\",{\"1\":{\"333\":1,\"1604\":1}}],[\"iter\",{\"1\":{\"465\":4}}],[\"iterations\",{\"1\":{\"1702\":1,\"1712\":1}}],[\"iteration\",{\"1\":{\"359\":1}}],[\"iterator<employee>\",{\"1\":{\"543\":2}}],[\"iterator<t>\",{\"1\":{\"543\":3}}],[\"iterator<dir>\",{\"1\":{\"465\":1}}],[\"iterator\",{\"1\":{\"322\":1,\"327\":2,\"465\":1,\"543\":10,\"1203\":2,\"1332\":15}}],[\"iterable\",{\"1\":{\"327\":2}}],[\"itemat\",{\"1\":{\"1826\":1,\"1828\":1}}],[\"itemgenerator\",{\"1\":{\"1709\":1}}],[\"items\",{\"1\":{\"1518\":11}}],[\"item>\",{\"1\":{\"1320\":6}}],[\"item\",{\"1\":{\"327\":2,\"345\":1,\"667\":2,\"895\":6,\"1518\":7}}],[\"it\",{\"1\":{\"12\":1,\"359\":1,\"631\":1,\"731\":1,\"1203\":3,\"1292\":2,\"1332\":1,\"1518\":7,\"1521\":7,\"1601\":2,\"1604\":2,\"1610\":1,\"1641\":1,\"1850\":1}}],[\"indices\",{\"1\":{\"1518\":3}}],[\"indexofkey\",{\"1\":{\"1828\":1}}],[\"indexof\",{\"1\":{\"1332\":2,\"1349\":4,\"1488\":1}}],[\"indexdb\",{\"1\":{\"649\":1}}],[\"indexfor\",{\"1\":{\"350\":2,\"351\":2,\"352\":1}}],[\"index+1\",{\"1\":{\"333\":2}}],[\"index++\",{\"1\":{\"284\":4,\"1518\":1}}],[\"index\",{\"1\":{\"94\":2,\"283\":10,\"284\":3,\"285\":3,\"333\":6,\"337\":4,\"342\":2,\"614\":1,\"622\":1,\"630\":1,\"657\":12,\"667\":3,\"668\":18,\"984\":10,\"993\":3,\"1009\":6,\"1036\":4,\"1110\":4,\"1332\":4,\"1413\":1,\"1488\":2,\"1503\":1,\"1518\":7,\"1534\":1,\"1709\":1}}],[\"inline\",{\"1\":{\"1506\":2,\"1805\":1}}],[\"injectparamsintourl\",{\"1\":{\"1332\":3}}],[\"inject\",{\"1\":{\"1332\":2,\"1604\":1}}],[\"injectcodeattribute\",{\"1\":{\"1022\":2}}],[\"innost\",{\"1\":{\"1503\":1}}],[\"innodb\",{\"1\":{\"631\":11}}],[\"innerlist\",{\"1\":{\"1521\":2}}],[\"inner\",{\"1\":{\"1305\":1}}],[\"initforcurrentuser\",{\"1\":{\"1869\":1}}],[\"initflag=true\",{\"1\":{\"920\":1}}],[\"initflag=false\",{\"1\":{\"920\":1}}],[\"initflag\",{\"1\":{\"920\":1}}],[\"init的语句\",{\"1\":{\"1857\":3}}],[\"init进程\",{\"0\":{\"1857\":1}}],[\"init进程创建zygote进程\",{\"1\":{\"1856\":1}}],[\"init进程解析init\",{\"1\":{\"1787\":1}}],[\"initeventitem\",{\"1\":{\"1829\":1,\"1831\":1}}],[\"initmydata\",{\"1\":{\"1737\":2}}],[\"initview\",{\"1\":{\"1610\":4}}],[\"initcachemethodid\",{\"1\":{\"1527\":2}}],[\"initclass\",{\"1\":{\"984\":2,\"993\":1,\"1003\":3,\"1044\":1}}],[\"initalone\",{\"1\":{\"1474\":1}}],[\"initwebchrome\",{\"1\":{\"1416\":2}}],[\"initx5web\",{\"1\":{\"1416\":1}}],[\"initprocessannotations\",{\"1\":{\"1197\":1,\"1199\":1}}],[\"initjvm\",{\"1\":{\"1044\":2}}],[\"initsdk\",{\"1\":{\"1320\":1}}],[\"initstate\",{\"1\":{\"1383\":8,\"1666\":8}}],[\"initstaticfinalvar\",{\"1\":{\"1015\":1}}],[\"initstarted\",{\"1\":{\"984\":2,\"993\":1,\"1002\":4,\"1003\":2,\"1009\":1,\"1030\":1,\"1109\":1}}],[\"initsuperclass\",{\"1\":{\"1003\":2}}],[\"init\",{\"0\":{\"1858\":1},\"1\":{\"920\":1,\"1023\":2,\"1030\":1,\"1036\":1,\"1174\":1,\"1320\":3,\"1413\":1,\"1518\":2,\"1521\":1,\"1604\":5,\"1627\":1,\"1771\":1,\"1772\":3,\"1789\":3,\"1857\":6,\"1858\":1,\"1870\":4,\"1944\":1,\"1945\":1,\"1960\":1,\"1961\":1}}],[\"initialized>\",{\"1\":{\"1869\":1}}],[\"initializeicuordie\",{\"1\":{\"1798\":1}}],[\"initializeservice\",{\"1\":{\"1320\":6}}],[\"initializesystemclass\",{\"1\":{\"1042\":2}}],[\"initialize\",{\"1\":{\"879\":1,\"1042\":1}}],[\"initialvalue\",{\"1\":{\"381\":1}}],[\"initial\",{\"1\":{\"352\":1,\"878\":1}}],[\"initialcapacity\",{\"1\":{\"338\":6}}],[\"inputmethodmessage分发软键盘输入事件\",{\"1\":{\"1849\":1}}],[\"inputtype\",{\"1\":{\"1712\":1}}],[\"inputstream\",{\"1\":{\"1613\":3}}],[\"inputfilewebchromeclient\",{\"1\":{\"1416\":2}}],[\"input说明\",{\"1\":{\"1416\":1}}],[\"input\",{\"1\":{\"711\":1,\"1416\":1,\"1828\":1,\"1952\":1}}],[\"inheritablethreadlocal\",{\"1\":{\"384\":3}}],[\"infinity\",{\"1\":{\"1402\":4,\"1685\":4}}],[\"inference\",{\"1\":{\"1345\":1}}],[\"inf\",{\"1\":{\"805\":1,\"1555\":1}}],[\"inflatetable\",{\"1\":{\"350\":1}}],[\"infotv\",{\"1\":{\"1346\":2}}],[\"information\",{\"1\":{\"631\":1}}],[\"info\",{\"1\":{\"237\":4,\"711\":8,\"1076\":4,\"1093\":1,\"1326\":1,\"1534\":4,\"1604\":3}}],[\"inc\",{\"1\":{\"1827\":2}}],[\"increfs\",{\"1\":{\"1770\":2,\"1789\":1}}],[\"incremental\",{\"1\":{\"1298\":3}}],[\"incrementandget\",{\"1\":{\"917\":1,\"1239\":1}}],[\"increments\",{\"1\":{\"332\":1}}],[\"inclusive\",{\"1\":{\"1036\":1,\"1310\":4}}],[\"include\",{\"1\":{\"638\":1,\"1476\":1,\"1488\":1,\"1491\":2,\"1534\":7,\"1632\":1,\"1725\":1,\"1726\":1,\"1727\":1,\"1746\":1,\"1800\":1,\"1807\":1,\"1832\":2}}],[\"includecompileclasspath\",{\"1\":{\"73\":2}}],[\"incompatibleclasschangeerror\",{\"1\":{\"984\":2,\"993\":4}}],[\"incompatible\",{\"1\":{\"631\":1}}],[\"inspection\",{\"1\":{\"1317\":1}}],[\"instruction\",{\"1\":{\"1094\":1,\"1101\":1}}],[\"instructionset\",{\"1\":{\"1863\":1}}],[\"instructions\",{\"1\":{\"994\":1}}],[\"inst\",{\"1\":{\"994\":4,\"997\":2,\"1010\":1,\"1101\":6}}],[\"instantiate\",{\"1\":{\"1798\":8}}],[\"instantiationerror\",{\"1\":{\"984\":1}}],[\"instantiationexception\",{\"1\":{\"416\":1}}],[\"instant\",{\"1\":{\"1432\":1}}],[\"instances\",{\"1\":{\"1598\":1}}],[\"instanceslotcount\",{\"1\":{\"1009\":1,\"1109\":1}}],[\"instancemethod\",{\"1\":{\"995\":2}}],[\"instancevar\",{\"1\":{\"983\":4}}],[\"instanceholder\",{\"1\":{\"863\":2}}],[\"instancefactory\",{\"1\":{\"863\":1}}],[\"instance\",{\"1\":{\"405\":4,\"841\":1,\"863\":5,\"864\":9,\"984\":1,\"1383\":1,\"1530\":1,\"1666\":1}}],[\"instanceof<string>\",{\"1\":{\"1506\":1}}],[\"instanceof\",{\"1\":{\"348\":1,\"351\":1,\"483\":3,\"983\":3,\"984\":4,\"1506\":1,\"1732\":1,\"1739\":1}}],[\"installrequiredsystemlibraries\",{\"1\":{\"1534\":1}}],[\"install\",{\"1\":{\"16\":14,\"85\":1,\"88\":1,\"94\":2,\"636\":1,\"677\":1,\"684\":1,\"688\":1,\"693\":1,\"701\":1,\"702\":1,\"707\":1,\"1056\":1,\"1320\":1,\"1409\":5,\"1413\":6,\"1534\":5,\"1905\":1,\"1911\":1,\"1960\":2,\"1974\":1}}],[\"insertat\",{\"1\":{\"1826\":1}}],[\"insert\",{\"1\":{\"614\":1,\"615\":5,\"622\":1,\"630\":1,\"631\":1}}],[\"insertsortarrays\",{\"1\":{\"285\":2}}],[\"insertionsort\",{\"1\":{\"280\":1}}],[\"intr\",{\"1\":{\"1806\":5}}],[\"introduction\",{\"1\":{\"1701\":1}}],[\"int16\",{\"1\":{\"1530\":1}}],[\"int8\",{\"1\":{\"1530\":1}}],[\"intarray\",{\"1\":{\"1527\":1,\"1530\":4}}],[\"intarraysum\",{\"1\":{\"1527\":1}}],[\"intvalue\",{\"1\":{\"1203\":1}}],[\"ints\",{\"1\":{\"1009\":1}}],[\"int32\",{\"1\":{\"984\":2,\"1009\":7,\"1023\":1,\"1530\":1,\"1717\":1,\"1756\":1,\"1778\":1,\"1798\":2}}],[\"int64\",{\"1\":{\"984\":2,\"1530\":1,\"1717\":4}}],[\"into\",{\"1\":{\"615\":5,\"631\":1,\"1332\":1,\"1488\":1}}],[\"intellij\",{\"1\":{\"1552\":1,\"1555\":5}}],[\"intent\",{\"1\":{\"1320\":9,\"1326\":36,\"1358\":12,\"1416\":1,\"1417\":27,\"1736\":5,\"1737\":5,\"1756\":1}}],[\"intentservice\",{\"1\":{\"1320\":1}}],[\"intentservice初始化\",{\"1\":{\"1320\":1}}],[\"integercache\",{\"1\":{\"1203\":1}}],[\"integer\",{\"1\":{\"247\":2,\"285\":2,\"328\":1,\"352\":1,\"359\":1,\"525\":3,\"537\":1,\"828\":2,\"897\":1,\"984\":1,\"1203\":20,\"1232\":1,\"1368\":1,\"1625\":1,\"1846\":1}}],[\"interger\",{\"1\":{\"1521\":1}}],[\"intercept\",{\"1\":{\"1332\":2}}],[\"interceptor\",{\"1\":{\"1329\":1,\"1332\":4}}],[\"internet\",{\"1\":{\"1707\":1,\"1708\":2,\"1712\":3}}],[\"internedstrings\",{\"1\":{\"1015\":2}}],[\"internedstr\",{\"1\":{\"1015\":4}}],[\"internal\",{\"1\":{\"70\":1,\"85\":1,\"94\":1,\"1518\":2,\"1521\":1,\"1757\":1,\"1860\":2,\"1861\":1,\"1866\":2,\"1870\":2}}],[\"interpret\",{\"1\":{\"985\":1,\"994\":1,\"996\":1,\"1016\":1,\"1044\":2,\"1101\":1,\"1102\":1,\"1103\":1}}],[\"interpreter\",{\"1\":{\"525\":11}}],[\"interactive\",{\"1\":{\"631\":1}}],[\"interaction\",{\"1\":{\"631\":1}}],[\"intermediatememberstrategy\",{\"1\":{\"513\":2}}],[\"interruptible\",{\"1\":{\"1770\":1}}],[\"interrupt中断\",{\"1\":{\"945\":1}}],[\"interruptmode\",{\"1\":{\"896\":6}}],[\"interrupt\",{\"1\":{\"154\":1,\"867\":1,\"944\":1,\"945\":1}}],[\"interruptedexception\",{\"1\":{\"154\":1,\"823\":1,\"867\":2,\"870\":4,\"876\":2,\"880\":2,\"889\":1,\"896\":2,\"904\":1,\"907\":1,\"908\":2,\"917\":1}}],[\"interrupted\",{\"1\":{\"154\":1,\"879\":3,\"880\":3,\"896\":1}}],[\"interface>\",{\"1\":{\"1805\":1}}],[\"interfacemethodrefinfo\",{\"1\":{\"1110\":2}}],[\"interfacemethodref\",{\"1\":{\"993\":1}}],[\"interfacename\",{\"1\":{\"979\":2,\"1595\":2}}],[\"interfacenames\",{\"1\":{\"979\":2,\"1109\":3}}],[\"interfacecount\",{\"1\":{\"979\":3}}],[\"interfaces\",{\"1\":{\"237\":3,\"979\":2,\"992\":1,\"1009\":1,\"1076\":4,\"1081\":1,\"1109\":1}}],[\"interface\",{\"0\":{\"43\":1},\"1\":{\"259\":1,\"415\":2,\"416\":2,\"422\":1,\"428\":4,\"435\":1,\"441\":1,\"447\":1,\"453\":2,\"477\":1,\"483\":1,\"489\":2,\"495\":1,\"501\":1,\"507\":2,\"513\":1,\"519\":2,\"525\":1,\"531\":2,\"537\":1,\"543\":2,\"808\":1,\"917\":1,\"926\":1,\"950\":2,\"958\":1,\"993\":1,\"1009\":1,\"1029\":1,\"1036\":2,\"1064\":1,\"1079\":1,\"1094\":1,\"1101\":1,\"1110\":1,\"1332\":1,\"1361\":1,\"1374\":1,\"1416\":1,\"1518\":1,\"1530\":1,\"1540\":1,\"1546\":1,\"1592\":1,\"1595\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1625\":1,\"1726\":1,\"1727\":3,\"1732\":2,\"1735\":1,\"1739\":3,\"1799\":1,\"1805\":5,\"1806\":5}}],[\"int\",{\"1\":{\"246\":2,\"247\":2,\"248\":1,\"278\":5,\"279\":8,\"280\":5,\"281\":6,\"282\":5,\"283\":17,\"284\":15,\"285\":22,\"331\":1,\"332\":5,\"333\":2,\"334\":3,\"337\":1,\"338\":6,\"342\":2,\"348\":3,\"350\":7,\"351\":8,\"352\":14,\"354\":3,\"358\":6,\"359\":9,\"365\":1,\"368\":2,\"381\":2,\"441\":1,\"477\":3,\"525\":9,\"537\":7,\"543\":3,\"615\":4,\"738\":1,\"828\":3,\"852\":1,\"853\":2,\"870\":3,\"876\":5,\"878\":1,\"879\":3,\"880\":12,\"882\":5,\"883\":3,\"884\":1,\"886\":7,\"896\":3,\"897\":10,\"900\":15,\"907\":2,\"917\":12,\"923\":4,\"935\":1,\"946\":1,\"950\":19,\"958\":5,\"983\":3,\"993\":1,\"1008\":2,\"1009\":7,\"1023\":1,\"1035\":1,\"1036\":16,\"1094\":3,\"1182\":1,\"1203\":5,\"1239\":3,\"1298\":2,\"1310\":3,\"1313\":3,\"1332\":2,\"1349\":6,\"1364\":6,\"1368\":2,\"1383\":2,\"1402\":2,\"1416\":3,\"1417\":6,\"1488\":1,\"1518\":15,\"1521\":4,\"1527\":13,\"1530\":12,\"1534\":2,\"1540\":9,\"1546\":3,\"1604\":2,\"1666\":2,\"1685\":2,\"1717\":4,\"1725\":1,\"1726\":1,\"1732\":3,\"1735\":1,\"1737\":3,\"1738\":9,\"1739\":8,\"1756\":3,\"1762\":5,\"1770\":1,\"1772\":2,\"1788\":2,\"1789\":4,\"1790\":2,\"1798\":2,\"1825\":3,\"1828\":10,\"1829\":2,\"1831\":10,\"1846\":4,\"1849\":4,\"1857\":3,\"1860\":2,\"1866\":2}}],[\"inversion\",{\"1\":{\"805\":1}}],[\"invocationtargetexception\",{\"1\":{\"1592\":1}}],[\"invocationhandler\",{\"1\":{\"259\":7,\"447\":1,\"1592\":2}}],[\"invokeanimalconstructor\",{\"1\":{\"1527\":1}}],[\"invokedemo\",{\"1\":{\"995\":5,\"997\":1}}],[\"invokedynamic指令码\",{\"1\":{\"1187\":1}}],[\"invokedynamic\",{\"1\":{\"991\":1}}],[\"invokemethod\",{\"1\":{\"993\":4}}],[\"invokerframe\",{\"1\":{\"993\":10}}],[\"invokerhandler\",{\"1\":{\"537\":5}}],[\"invokevirtual指令码\",{\"1\":{\"1187\":1}}],[\"invokevirtual\",{\"1\":{\"991\":1,\"995\":1}}],[\"invokeinterface指令码\",{\"1\":{\"1187\":1}}],[\"invokeinterface\",{\"1\":{\"991\":1,\"993\":1,\"995\":1,\"1188\":1}}],[\"invokesubscriber\",{\"1\":{\"1546\":1}}],[\"invokespecial指令码\",{\"1\":{\"1187\":1}}],[\"invokespecial\",{\"1\":{\"991\":1,\"993\":1,\"995\":3}}],[\"invokestaticmain\",{\"1\":{\"1866\":1}}],[\"invokestatic指令码\",{\"1\":{\"1187\":1}}],[\"invokestatic方法句柄\",{\"1\":{\"1169\":1}}],[\"invokestatic\",{\"1\":{\"991\":1,\"993\":1,\"995\":1,\"1003\":1,\"1169\":1,\"1203\":1}}],[\"invoke\",{\"1\":{\"259\":7,\"447\":2,\"993\":3,\"1022\":3,\"1592\":13,\"1598\":1,\"1866\":1}}],[\"invisible\",{\"0\":{\"1392\":1,\"1675\":1},\"1\":{\"144\":1,\"145\":2,\"1392\":3,\"1675\":3}}],[\"invalid\",{\"1\":{\"103\":1,\"1009\":2,\"1518\":1}}],[\"inotificationsidechannel$stub\",{\"1\":{\"115\":1}}],[\"in\",{\"0\":{\"28\":1,\"91\":1},\"1\":{\"12\":1,\"28\":1,\"67\":1,\"73\":1,\"103\":1,\"144\":1,\"145\":1,\"313\":1,\"334\":5,\"359\":2,\"614\":1,\"622\":1,\"630\":1,\"631\":5,\"711\":1,\"715\":1,\"731\":1,\"820\":1,\"822\":1,\"870\":5,\"985\":1,\"996\":1,\"1044\":1,\"1102\":1,\"1515\":2,\"1518\":18,\"1521\":1,\"1534\":2,\"1555\":1,\"1604\":1,\"1641\":1,\"1648\":2,\"1738\":7,\"1756\":3,\"1846\":1,\"1847\":1,\"1850\":2}}],[\"本打算用groovy脚本写一个插件来实现\",{\"1\":{\"1905\":1}}],[\"本作者实现\",{\"1\":{\"1494\":1}}],[\"本插件代码已上传jcenter\",{\"1\":{\"1491\":1}}],[\"本插件采用groovy编写\",{\"1\":{\"1488\":1}}],[\"本质一个线程安全工作队列连接工作者线程和客户端线程\",{\"1\":{\"949\":1}}],[\"本质\",{\"0\":{\"1797\":1},\"1\":{\"879\":1,\"880\":1,\"1716\":1,\"1761\":1}}],[\"本质不同\",{\"1\":{\"263\":1}}],[\"本地引用\",{\"1\":{\"1966\":1}}],[\"本地仓库\",{\"1\":{\"1966\":1}}],[\"本地打包\",{\"1\":{\"1966\":1}}],[\"本地编译编译aar\",{\"1\":{\"1966\":1}}],[\"本地部署\",{\"1\":{\"1960\":1}}],[\"本地提交\",{\"1\":{\"1944\":1}}],[\"本地json数据\",{\"1\":{\"1595\":1}}],[\"本地json\",{\"1\":{\"1595\":1}}],[\"本地数据\",{\"1\":{\"1592\":1}}],[\"本地接口\",{\"1\":{\"1530\":1}}],[\"本地直接内存溢出\",{\"1\":{\"1119\":1}}],[\"本地方法栈中引用对象\",{\"1\":{\"1125\":1}}],[\"本地方法栈\",{\"1\":{\"1115\":1}}],[\"本地方法定义为函数\",{\"1\":{\"1022\":1}}],[\"本地方法注册与调用\",{\"0\":{\"1022\":1}}],[\"本地方法调用\",{\"0\":{\"1021\":1}}],[\"本地调试没有问题\",{\"1\":{\"603\":1,\"656\":1}}],[\"本地内存是\",{\"1\":{\"151\":1}}],[\"本地内存中存储了该线程以读\",{\"1\":{\"151\":1}}],[\"本文出自\",{\"1\":{\"1908\":1}}],[\"本文出自张鸿洋的博客\",{\"1\":{\"1346\":1}}],[\"本文代码\",{\"1\":{\"1589\":1,\"1592\":1,\"1595\":1}}],[\"本文支持学习项目\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"本文目的提供一个比较通用且优雅的脚本\",{\"1\":{\"1323\":1}}],[\"本文把常用坏味道\",{\"1\":{\"1286\":1}}],[\"本文\",{\"1\":{\"1218\":1}}],[\"本文意义\",{\"1\":{\"750\":1}}],[\"本文为大家介绍了centos\",{\"1\":{\"635\":1}}],[\"本文未验证\",{\"0\":{\"635\":1}}],[\"本文以\",{\"1\":{\"571\":1}}],[\"本文定制\",{\"1\":{\"9\":1,\"728\":1}}],[\"本篇文集目标定位在面试过程中\",{\"1\":{\"227\":1}}],[\"本框架采用改造cc\",{\"1\":{\"1494\":1}}],[\"本框架特色\",{\"1\":{\"12\":1,\"731\":1}}],[\"本框架\",{\"1\":{\"12\":1,\"731\":1}}],[\"功能级一多\",{\"1\":{\"1709\":1}}],[\"功能全面\",{\"1\":{\"1647\":1}}],[\"功能不够完善\",{\"1\":{\"1647\":1}}],[\"功能不全\",{\"1\":{\"1636\":1}}],[\"功能sdk化\",{\"1\":{\"1500\":1}}],[\"功能兼容\",{\"1\":{\"796\":1}}],[\"功能之间是隔离的\",{\"1\":{\"313\":1}}],[\"功能强大插件众多例如多租户插件\",{\"1\":{\"12\":1,\"731\":1}}],[\"功能\",{\"0\":{\"1622\":1},\"1\":{\"12\":2,\"731\":2}}],[\"xzygote\",{\"1\":{\"1858\":1}}],[\"xlogdemo\",{\"1\":{\"1616\":1}}],[\"xctoolchain\",{\"1\":{\"1534\":4}}],[\"xcodedefault\",{\"1\":{\"1534\":4}}],[\"xcode\",{\"1\":{\"1534\":4}}],[\"xcomp\",{\"1\":{\"1206\":1}}],[\"xs\",{\"1\":{\"1435\":1}}],[\"xr\",{\"1\":{\"1435\":1}}],[\"x5webview\",{\"1\":{\"1416\":4}}],[\"x509\",{\"1\":{\"614\":2,\"615\":1,\"622\":2,\"630\":2}}],[\"xhdpi\",{\"1\":{\"1338\":1,\"1435\":2}}],[\"xiatiandefeiyu\",{\"1\":{\"1503\":1}}],[\"xiaomin\",{\"1\":{\"259\":11,\"447\":11}}],[\"xiaofeifenqi\",{\"1\":{\"103\":6}}],[\"xint\",{\"1\":{\"1206\":1}}],[\"xjre\",{\"1\":{\"1062\":1,\"1063\":2}}],[\"xjreoption\",{\"1\":{\"985\":1,\"996\":1,\"1044\":1,\"1062\":2,\"1064\":1,\"1102\":1}}],[\"xbootclasspath\",{\"1\":{\"1061\":1}}],[\"xbootclasspath指定路径\",{\"1\":{\"194\":1}}],[\"xargs\",{\"1\":{\"711\":1,\"715\":1}}],[\"xmx=100m\",{\"1\":{\"1119\":1}}],[\"xmx512m\",{\"1\":{\"711\":1}}],[\"xms=100m\",{\"1\":{\"1119\":1}}],[\"xms512m\",{\"1\":{\"711\":1}}],[\"xmlns\",{\"1\":{\"1346\":2}}],[\"xml\",{\"1\":{\"12\":1,\"14\":1,\"731\":1,\"733\":1,\"1320\":1,\"1346\":1,\"1405\":3,\"1475\":3,\"1555\":1}}],[\"x86架构\",{\"1\":{\"103\":1}}],[\"xxhdpi\",{\"1\":{\"1338\":1,\"1435\":2}}],[\"xx=xx\",{\"1\":{\"1326\":2}}],[\"xx\",{\"0\":{\"91\":1},\"1\":{\"711\":9,\"1974\":2}}],[\"xxx命令\",{\"1\":{\"1755\":1,\"1768\":1}}],[\"xxx命令才会结束该过程\",{\"1\":{\"1755\":1}}],[\"xxxposter\",{\"1\":{\"1546\":1}}],[\"xxxhdpi\",{\"1\":{\"1338\":1,\"1435\":2}}],[\"xxxxxx\",{\"1\":{\"644\":1,\"1289\":1}}],[\"xxxxxxxxxxxxxxxx\",{\"1\":{\"638\":2}}],[\"xxx\",{\"0\":{\"49\":1,\"97\":1,\"1405\":4},\"1\":{\"106\":3,\"834\":1,\"984\":1,\"1009\":12,\"1374\":1,\"1409\":5,\"1410\":2,\"1459\":2,\"1768\":1,\"1928\":1}}],[\"xxl\",{\"1\":{\"12\":6,\"731\":6}}],[\"xxljob\",{\"1\":{\"12\":2,\"731\":2}}],[\"x\",{\"1\":{\"12\":1,\"351\":10,\"638\":3,\"651\":4,\"652\":1,\"702\":1,\"711\":8,\"731\":1,\"983\":5,\"1332\":4,\"1335\":2,\"1338\":2,\"1435\":2,\"1518\":17,\"1540\":1,\"1776\":1,\"1974\":1}}],[\"xnio\",{\"1\":{\"12\":2,\"731\":2}}],[\"会列出10开头的远程版本\",{\"1\":{\"1974\":1}}],[\"会忽略\",{\"1\":{\"1952\":1}}],[\"会调用systemserver\",{\"1\":{\"1866\":1}}],[\"会调用binder\",{\"1\":{\"1786\":1}}],[\"会运行idle\",{\"1\":{\"1846\":1}}],[\"会区分请求服务所属进程情况\",{\"1\":{\"1799\":1}}],[\"会回调binderdied\",{\"1\":{\"1761\":1}}],[\"会接收到相应事务\",{\"1\":{\"1745\":1}}],[\"会自动开通哪些服务\",{\"1\":{\"1713\":1}}],[\"会更高效\",{\"1\":{\"1521\":1}}],[\"会返回值\",{\"1\":{\"1518\":1}}],[\"会在同步块生成monitorenter\",{\"1\":{\"1238\":1}}],[\"会在对象头和栈帧中的锁记录里存储锁偏向的线程id\",{\"1\":{\"846\":1}}],[\"会使用instanceof判断类型\",{\"1\":{\"1203\":1}}],[\"会使用原子的cas操作将displaced\",{\"1\":{\"847\":1}}],[\"会将其中一部分符号引用转化为直接引用\",{\"1\":{\"1187\":1}}],[\"会将这个节点移到链表尾部\",{\"1\":{\"363\":1}}],[\"会影响到gc回收\",{\"1\":{\"1182\":1}}],[\"会造成大量内存碎片\",{\"1\":{\"1144\":1}}],[\"会执行idelhandler中方法\",{\"1\":{\"1846\":1}}],[\"会执行\",{\"1\":{\"1055\":1}}],[\"会把首节点中的线程唤醒\",{\"1\":{\"878\":1}}],[\"会释放对象锁\",{\"1\":{\"870\":1}}],[\"会为兼容存在潜在问题\",{\"1\":{\"799\":1}}],[\"会导致数据库\",{\"1\":{\"629\":1}}],[\"会清理掉\",{\"1\":{\"385\":1}}],[\"会先从\",{\"1\":{\"368\":1}}],[\"会让人追随境遇\",{\"1\":{\"230\":1}}],[\"会员收货地址\",{\"1\":{\"668\":1}}],[\"会员列表\",{\"1\":{\"668\":1}}],[\"会员服务\",{\"1\":{\"12\":1,\"731\":1}}],[\"会员能力\",{\"1\":{\"12\":1,\"731\":1}}],[\"会员策略\",{\"1\":{\"12\":1,\"731\":1}}],[\"会员vip\",{\"1\":{\"12\":1,\"731\":1}}],[\"会员地址\",{\"1\":{\"12\":1,\"731\":1}}],[\"会员依赖\",{\"1\":{\"12\":1,\"731\":1}}],[\"会员模块\",{\"1\":{\"12\":1,\"731\":1}}],[\"会装载当前目录下所有的config\",{\"1\":{\"11\":1,\"730\":1}}],[\"8k的内存地址空间\",{\"1\":{\"1804\":1}}],[\"8b\",{\"1\":{\"1583\":2}}],[\"8e\",{\"1\":{\"1583\":1}}],[\"890xxx\",{\"1\":{\"1518\":1}}],[\"89\",{\"1\":{\"1367\":1}}],[\"86561547\",{\"1\":{\"1465\":1}}],[\"86\",{\"1\":{\"1367\":1,\"1708\":1}}],[\"86dp\",{\"1\":{\"1346\":1}}],[\"84107272\",{\"1\":{\"1482\":1,\"1503\":1}}],[\"84\",{\"1\":{\"1367\":1}}],[\"83\",{\"1\":{\"1367\":1,\"1435\":2,\"1583\":1}}],[\"81\",{\"1\":{\"1367\":1}}],[\"8111\",{\"1\":{\"638\":1}}],[\"8112\",{\"1\":{\"638\":1}}],[\"81130589\",{\"1\":{\"46\":1,\"52\":1}}],[\"8f\",{\"1\":{\"1367\":1}}],[\"8c\",{\"1\":{\"1367\":1}}],[\"8a\",{\"1\":{\"1367\":1,\"1583\":1}}],[\"85\",{\"1\":{\"1367\":2}}],[\"82931785\",{\"1\":{\"1577\":1}}],[\"828\",{\"1\":{\"1435\":1}}],[\"82\",{\"1\":{\"1367\":2}}],[\"8分钟前\",{\"1\":{\"1346\":1}}],[\"8dp\",{\"1\":{\"1346\":4}}],[\"8888\",{\"1\":{\"1341\":1}}],[\"88\",{\"1\":{\"711\":2,\"1338\":4,\"1367\":1,\"1435\":2}}],[\"8848\",{\"1\":{\"12\":1,\"731\":1}}],[\"8m\",{\"1\":{\"631\":3,\"1317\":1}}],[\"80308531\",{\"1\":{\"1503\":1}}],[\"80650999\",{\"1\":{\"1420\":1}}],[\"806219fd4d0b\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"80035452\",{\"1\":{\"1465\":1}}],[\"800\",{\"1\":{\"1338\":7,\"1435\":8}}],[\"80\",{\"1\":{\"631\":1,\"638\":1,\"640\":1,\"1367\":2,\"1583\":1,\"1708\":1}}],[\"80857863\",{\"1\":{\"37\":1}}],[\"8080\",{\"1\":{\"12\":1,\"711\":1,\"731\":1}}],[\"8种常见排序算法\",{\"0\":{\"274\":1}}],[\"8\",{\"0\":{\"263\":1,\"285\":1,\"355\":1,\"360\":1,\"903\":1,\"1100\":1,\"1216\":1},\"1\":{\"43\":2,\"67\":3,\"70\":1,\"206\":1,\"207\":1,\"227\":1,\"228\":1,\"281\":1,\"298\":2,\"329\":1,\"351\":1,\"354\":1,\"355\":2,\"360\":2,\"513\":1,\"598\":2,\"688\":1,\"793\":1,\"802\":1,\"935\":1,\"1015\":2,\"1030\":10,\"1078\":1,\"1131\":1,\"1256\":1,\"1259\":1,\"1262\":1,\"1274\":1,\"1277\":1,\"1280\":1,\"1283\":1,\"1286\":2,\"1332\":1,\"1338\":3,\"1346\":1,\"1367\":1,\"1405\":1,\"1416\":2,\"1435\":5,\"1530\":2,\"1534\":3,\"1632\":1,\"1708\":1,\"1756\":1,\"1798\":1,\"1937\":3,\"1938\":1,\"1970\":3}}],[\"87\",{\"1\":{\"1367\":2}}],[\"87071864\",{\"1\":{\"19\":1}}],[\"8718\",{\"1\":{\"12\":1,\"731\":1}}],[\"9fbc3d0\",{\"1\":{\"1949\":1}}],[\"9b\",{\"1\":{\"1583\":1}}],[\"9a1f37ba526b\",{\"1\":{\"1580\":1}}],[\"98\",{\"1\":{\"1367\":1}}],[\"95\",{\"1\":{\"1367\":1,\"1583\":1}}],[\"93\",{\"1\":{\"1367\":1}}],[\"935\",{\"1\":{\"867\":1}}],[\"9e\",{\"1\":{\"1367\":1}}],[\"9c\",{\"1\":{\"1367\":1}}],[\"94\",{\"1\":{\"1367\":2}}],[\"9400\",{\"1\":{\"12\":1,\"731\":1}}],[\"91\",{\"1\":{\"1367\":2}}],[\"9107\",{\"1\":{\"586\":1,\"595\":2}}],[\"9100\",{\"1\":{\"12\":1,\"731\":1}}],[\"92\",{\"1\":{\"1367\":1}}],[\"929\",{\"1\":{\"867\":2}}],[\"9204\",{\"1\":{\"12\":1,\"731\":1}}],[\"9203\",{\"1\":{\"12\":1,\"731\":1}}],[\"9202\",{\"1\":{\"12\":1,\"731\":1}}],[\"9205\",{\"1\":{\"12\":1,\"731\":1}}],[\"9201\",{\"1\":{\"12\":1,\"731\":1}}],[\"9200\",{\"1\":{\"12\":1,\"731\":1}}],[\"97\",{\"1\":{\"822\":1,\"1367\":1}}],[\"960\",{\"1\":{\"1435\":1}}],[\"96\",{\"1\":{\"1338\":4,\"1367\":2,\"1435\":2}}],[\"9632\",{\"1\":{\"694\":1}}],[\"9630\",{\"1\":{\"694\":1}}],[\"9621\",{\"1\":{\"694\":1}}],[\"999\",{\"1\":{\"1717\":1}}],[\"99\",{\"1\":{\"820\":2,\"1367\":2}}],[\"996\",{\"1\":{\"586\":1}}],[\"9900\",{\"1\":{\"12\":1,\"731\":1}}],[\"9\",{\"0\":{\"264\":1,\"286\":1,\"356\":1,\"911\":1,\"1107\":1},\"1\":{\"58\":1,\"94\":1,\"118\":1,\"298\":1,\"513\":1,\"598\":2,\"711\":1,\"715\":1,\"793\":2,\"802\":1,\"1256\":1,\"1262\":1,\"1274\":1,\"1280\":1,\"1283\":1,\"1286\":2,\"1298\":3,\"1346\":2,\"1349\":6,\"1367\":1,\"1383\":1,\"1518\":2,\"1521\":1,\"1580\":1,\"1666\":1,\"1708\":1,\"1712\":2,\"1756\":1,\"1963\":2}}],[\"90°\",{\"1\":{\"1527\":1}}],[\"90\",{\"1\":{\"12\":1,\"103\":1,\"731\":1,\"1367\":1,\"1518\":1}}],[\"900000\",{\"1\":{\"537\":1}}],[\"9000\",{\"1\":{\"12\":1,\"731\":1}}],[\"v7\",{\"1\":{\"1567\":6}}],[\"v7a\",{\"1\":{\"1298\":1}}],[\"vf\",{\"1\":{\"1552\":1}}],[\"vf=\",{\"1\":{\"1552\":1}}],[\"v8a\",{\"1\":{\"1298\":1}}],[\"vmclass\",{\"1\":{\"1044\":2}}],[\"vm\",{\"1\":{\"1042\":1,\"1044\":1}}],[\"vm调用\",{\"1\":{\"1042\":1}}],[\"vmstat\",{\"1\":{\"820\":2}}],[\"vmp保护\",{\"1\":{\"103\":1}}],[\"vararg\",{\"1\":{\"1521\":1}}],[\"variant=release\",{\"1\":{\"1413\":1}}],[\"vars\",{\"1\":{\"1015\":1,\"1030\":4}}],[\"var2\",{\"1\":{\"896\":1}}],[\"var1\",{\"1\":{\"896\":1,\"900\":1}}],[\"var\",{\"1\":{\"667\":2,\"1009\":1,\"1022\":1,\"1030\":1,\"1352\":2,\"1402\":2,\"1506\":2,\"1518\":26,\"1521\":9,\"1587\":1,\"1595\":1,\"1660\":2,\"1685\":2}}],[\"validateprogram\",{\"1\":{\"1540\":1}}],[\"validation\",{\"1\":{\"12\":1,\"731\":1}}],[\"val\",{\"1\":{\"1518\":31,\"1521\":6}}],[\"valueat\",{\"1\":{\"1828\":1,\"1829\":1}}],[\"valuecallback<uri\",{\"1\":{\"1416\":1,\"1417\":2}}],[\"valuecallback<uri>\",{\"1\":{\"1416\":3,\"1417\":2}}],[\"value字段\",{\"1\":{\"1015\":1}}],[\"valueoffset\",{\"1\":{\"900\":2}}],[\"valueof\",{\"1\":{\"525\":1,\"1036\":1,\"1203\":6}}],[\"values\",{\"1\":{\"381\":1,\"615\":5}}],[\"value\",{\"1\":{\"247\":2,\"268\":1,\"285\":2,\"348\":5,\"350\":17,\"351\":1,\"352\":3,\"358\":1,\"359\":1,\"381\":12,\"385\":2,\"537\":1,\"828\":2,\"885\":2,\"900\":3,\"935\":1,\"1015\":1,\"1110\":4,\"1332\":6,\"1416\":1,\"1518\":7,\"1521\":1,\"1527\":1,\"1592\":7,\"1595\":2,\"1604\":2,\"1707\":1,\"1713\":1,\"1739\":1,\"1846\":1}}],[\"vbrnhs\",{\"1\":{\"608\":1}}],[\"v3>\",{\"1\":{\"349\":2}}],[\"v3\",{\"1\":{\"349\":1}}],[\"v1>\",{\"1\":{\"349\":1}}],[\"v1\",{\"1\":{\"348\":4,\"349\":1,\"1095\":2,\"1949\":6}}],[\"v>\",{\"1\":{\"348\":4,\"350\":4,\"352\":3,\"358\":5,\"359\":2,\"362\":6,\"363\":4,\"364\":2,\"365\":2,\"367\":2,\"368\":3}}],[\"vec4\",{\"1\":{\"1540\":2}}],[\"vector<string8>\",{\"1\":{\"1861\":1}}],[\"vector\",{\"0\":{\"336\":1},\"1\":{\"319\":1,\"323\":1,\"338\":5,\"339\":3}}],[\"vector是线程安全的\",{\"1\":{\"213\":1}}],[\"vertexshaderid\",{\"1\":{\"1540\":1}}],[\"vertexdata\",{\"1\":{\"1540\":3}}],[\"verticalalign\",{\"1\":{\"1713\":2}}],[\"vertical\",{\"1\":{\"1346\":1,\"1708\":1,\"1713\":4}}],[\"verboseflag\",{\"1\":{\"1030\":3}}],[\"verbose\",{\"1\":{\"997\":4,\"1010\":2,\"1030\":1}}],[\"verboseinstflag\",{\"1\":{\"996\":1,\"1044\":2}}],[\"verboseclassflag\",{\"1\":{\"996\":1,\"1044\":1}}],[\"verify\",{\"1\":{\"979\":1}}],[\"versionname\",{\"1\":{\"1377\":1}}],[\"version=\",{\"1\":{\"1346\":1,\"1405\":1}}],[\"versioncode\",{\"1\":{\"1332\":3}}],[\"versionflag\",{\"1\":{\"1055\":2,\"1056\":1,\"1070\":1}}],[\"version>\",{\"1\":{\"672\":2,\"1555\":1}}],[\"versions\",{\"0\":{\"64\":1}}],[\"version\",{\"0\":{\"64\":2},\"1\":{\"43\":2,\"237\":2,\"615\":2,\"688\":1,\"703\":2,\"1055\":3,\"1056\":3,\"1070\":2,\"1076\":2,\"1206\":4,\"1298\":4,\"1417\":2,\"1534\":14,\"1555\":2,\"1648\":1,\"1911\":1,\"1966\":2,\"1974\":1}}],[\"vendor>\",{\"1\":{\"1555\":1}}],[\"vendor\",{\"1\":{\"694\":1,\"1555\":1}}],[\"vog\",{\"1\":{\"1298\":5}}],[\"volaitle\",{\"1\":{\"950\":1,\"958\":1}}],[\"volatile修饰变量\",{\"1\":{\"1222\":1}}],[\"volatile特殊规则\",{\"0\":{\"1222\":1}}],[\"volatile和synchronized关键字\",{\"1\":{\"870\":1}}],[\"volatile和synchronized的区别\",{\"0\":{\"167\":1}}],[\"volatile作用\",{\"1\":{\"864\":1}}],[\"volatile++这种复合操作不\",{\"1\":{\"861\":1}}],[\"volatile内存语义\",{\"0\":{\"861\":1}}],[\"volatile使用恰当\",{\"1\":{\"840\":1}}],[\"volatile原理\",{\"0\":{\"840\":1},\"1\":{\"841\":1}}],[\"volatile\",{\"0\":{\"841\":1},\"1\":{\"358\":3,\"359\":1,\"405\":1,\"840\":1,\"841\":1,\"861\":2,\"864\":1,\"867\":1,\"869\":1,\"870\":2,\"878\":4,\"887\":1,\"917\":2,\"920\":1,\"926\":1,\"935\":1,\"945\":1,\"950\":1,\"1358\":1,\"1589\":2}}],[\"volatile标记的变量不会被编译器优化\",{\"1\":{\"167\":1}}],[\"volatile不会造成线程的阻塞\",{\"1\":{\"167\":1}}],[\"volatile仅能实现变量的修改可见性\",{\"1\":{\"167\":1}}],[\"volatile仅能使用在变量级别\",{\"1\":{\"167\":1}}],[\"volatile本质是在告诉jvm当前变量在寄存器\",{\"1\":{\"167\":1}}],[\"voltadapter\",{\"1\":{\"477\":3}}],[\"volt220\",{\"1\":{\"477\":2}}],[\"void\",{\"1\":{\"154\":2,\"160\":1,\"169\":7,\"259\":15,\"278\":1,\"279\":2,\"280\":1,\"281\":1,\"282\":1,\"283\":5,\"284\":3,\"285\":2,\"332\":3,\"334\":2,\"338\":1,\"342\":1,\"350\":2,\"352\":3,\"362\":2,\"363\":1,\"364\":1,\"365\":1,\"368\":1,\"381\":6,\"405\":3,\"409\":2,\"415\":4,\"416\":3,\"422\":12,\"428\":7,\"435\":5,\"441\":3,\"447\":15,\"453\":11,\"459\":4,\"465\":13,\"471\":7,\"477\":1,\"483\":16,\"489\":22,\"495\":5,\"501\":11,\"507\":22,\"513\":1,\"519\":7,\"525\":1,\"531\":10,\"537\":5,\"543\":1,\"650\":1,\"823\":4,\"843\":4,\"852\":1,\"853\":1,\"867\":7,\"868\":2,\"869\":2,\"870\":11,\"874\":1,\"876\":3,\"879\":1,\"880\":5,\"884\":4,\"885\":1,\"887\":1,\"889\":2,\"896\":4,\"897\":1,\"900\":4,\"904\":3,\"905\":5,\"907\":2,\"908\":3,\"917\":11,\"920\":1,\"923\":1,\"926\":3,\"932\":2,\"935\":1,\"938\":2,\"945\":2,\"949\":1,\"950\":12,\"958\":3,\"983\":1,\"995\":5,\"1009\":2,\"1030\":1,\"1036\":1,\"1188\":8,\"1197\":2,\"1203\":3,\"1295\":7,\"1305\":3,\"1307\":3,\"1311\":1,\"1313\":1,\"1320\":3,\"1326\":1,\"1332\":3,\"1349\":4,\"1358\":3,\"1364\":7,\"1368\":1,\"1374\":3,\"1383\":18,\"1402\":1,\"1416\":10,\"1417\":13,\"1468\":7,\"1474\":1,\"1475\":1,\"1488\":1,\"1527\":20,\"1530\":1,\"1540\":6,\"1546\":10,\"1555\":1,\"1589\":2,\"1592\":3,\"1598\":5,\"1601\":7,\"1604\":7,\"1610\":8,\"1626\":1,\"1645\":1,\"1666\":18,\"1685\":1,\"1717\":4,\"1727\":5,\"1730\":1,\"1731\":2,\"1732\":2,\"1736\":6,\"1737\":3,\"1738\":4,\"1762\":4,\"1770\":1,\"1772\":1,\"1778\":4,\"1789\":1,\"1790\":1,\"1798\":1,\"1825\":4,\"1826\":1,\"1827\":1,\"1828\":2,\"1829\":1,\"1831\":4,\"1839\":3,\"1842\":1,\"1843\":1,\"1849\":1,\"1850\":2,\"1851\":1,\"1857\":1,\"1861\":1,\"1862\":1,\"1863\":1,\"1866\":3,\"1867\":5,\"1869\":1}}],[\"v\",{\"1\":{\"106\":1,\"348\":8,\"350\":11,\"352\":1,\"358\":1,\"368\":11,\"381\":2,\"711\":1,\"993\":3,\"1009\":1,\"1022\":2,\"1056\":1,\"1064\":4,\"1101\":3,\"1102\":1,\"1151\":1,\"1518\":2,\"1530\":2,\"1583\":6,\"1598\":1,\"1950\":1}}],[\"v2>\",{\"1\":{\"349\":3}}],[\"v2\",{\"1\":{\"103\":1,\"348\":3,\"349\":1,\"1095\":2}}],[\"v5\",{\"1\":{\"103\":1,\"1960\":2}}],[\"v4\",{\"1\":{\"52\":1,\"55\":1,\"115\":3,\"1329\":2,\"1567\":1,\"1604\":1}}],[\"vibratorservice等\",{\"1\":{\"1868\":1}}],[\"video\",{\"1\":{\"1707\":1,\"1708\":2,\"1711\":1,\"1712\":1}}],[\"videochat\",{\"1\":{\"453\":1}}],[\"virtual\",{\"1\":{\"1727\":4,\"1778\":2,\"1798\":1,\"1799\":2,\"1831\":6}}],[\"virtualfile\",{\"1\":{\"1552\":1}}],[\"virtualized\",{\"1\":{\"314\":1}}],[\"vivo\",{\"1\":{\"1338\":2,\"1377\":1,\"1435\":2}}],[\"via\",{\"1\":{\"631\":1}}],[\"viewrootimpl接收屏幕垂直同步信息事件用于驱动ui测绘\",{\"1\":{\"1849\":1}}],[\"viewtm\",{\"1\":{\"1604\":2}}],[\"viewidannotation\",{\"1\":{\"1604\":2}}],[\"viewidelements\",{\"1\":{\"1604\":2}}],[\"viewidprocessor\",{\"1\":{\"1604\":2}}],[\"viewid\",{\"1\":{\"1604\":9}}],[\"viewbinding\",{\"1\":{\"1598\":3,\"1601\":5,\"1604\":4,\"1610\":3}}],[\"viewgroup\",{\"1\":{\"1416\":1}}],[\"viewsroutes\",{\"1\":{\"667\":2}}],[\"views\",{\"1\":{\"666\":1,\"667\":2,\"668\":18}}],[\"view\",{\"1\":{\"614\":2,\"615\":2,\"622\":2,\"630\":2,\"1305\":2,\"1307\":3,\"1326\":2,\"1358\":3,\"1383\":1,\"1416\":4,\"1567\":5,\"1598\":5,\"1601\":4,\"1604\":4,\"1610\":4,\"1666\":1,\"1699\":1,\"1736\":3}}],[\"visible\",{\"0\":{\"1392\":1,\"1675\":1},\"1\":{\"1392\":3,\"1675\":3}}],[\"visibilityflag\",{\"1\":{\"1392\":5,\"1675\":5}}],[\"visibility\",{\"1\":{\"359\":1,\"1392\":7,\"1675\":7}}],[\"visit拜访者设计模式\",{\"1\":{\"559\":1}}],[\"visitor\",{\"1\":{\"531\":16}}],[\"visit\",{\"1\":{\"531\":11}}],[\"visualvm\",{\"0\":{\"1158\":1}}],[\"visual\",{\"1\":{\"12\":6,\"731\":6}}],[\"vi\",{\"1\":{\"109\":1,\"627\":2,\"631\":2,\"638\":1,\"1050\":1,\"1534\":1,\"1952\":2}}],[\"vip\",{\"1\":{\"12\":1,\"15\":2,\"731\":1,\"734\":2}}],[\"vue文档\",{\"0\":{\"1657\":1}}],[\"vue$\",{\"1\":{\"667\":1}}],[\"vue根据views目录生成路由\",{\"0\":{\"665\":1,\"667\":1}}],[\"vue\",{\"0\":{\"2000\":1},\"1\":{\"8\":1,\"9\":1,\"667\":2,\"727\":1,\"728\":1}}],[\"uapi\",{\"1\":{\"1746\":1}}],[\"uoynq8gq\",{\"1\":{\"1564\":1}}],[\"uridata\",{\"1\":{\"1417\":3}}],[\"uri\",{\"1\":{\"1326\":7,\"1358\":7,\"1417\":12}}],[\"urls\",{\"1\":{\"1595\":2}}],[\"urlspan\",{\"1\":{\"1310\":1}}],[\"url=\",{\"1\":{\"1555\":1}}],[\"url=$\",{\"1\":{\"1335\":2}}],[\"urlencoded\",{\"1\":{\"1332\":4}}],[\"urlbasedcorsconfigurationsource\",{\"1\":{\"650\":3}}],[\"url>\",{\"1\":{\"608\":2}}],[\"url\",{\"0\":{\"100\":1},\"1\":{\"79\":6,\"100\":1,\"124\":1,\"1292\":1,\"1304\":1,\"1332\":3,\"1335\":5,\"1358\":11,\"1462\":1,\"1558\":2,\"1568\":1,\"1595\":1,\"1623\":1,\"1641\":1,\"1690\":1,\"1711\":1,\"1713\":1,\"1911\":1,\"1962\":1,\"1966\":4}}],[\"ukey=$\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"u1\",{\"1\":{\"1292\":1}}],[\"um\",{\"1\":{\"1292\":2}}],[\"umeng\",{\"1\":{\"1292\":9}}],[\"ums\",{\"1\":{\"668\":3}}],[\"uml类图关系\",{\"0\":{\"735\":1},\"1\":{\"735\":1}}],[\"uml类图\",{\"0\":{\"434\":1}}],[\"ufw防火墙\",{\"0\":{\"722\":1}}],[\"ufw\",{\"0\":{\"661\":1},\"1\":{\"661\":3,\"662\":4,\"722\":3,\"723\":4}}],[\"ubuntu\",{\"0\":{\"661\":1},\"1\":{\"675\":1}}],[\"ubuntu防火墙ufw\",{\"0\":{\"660\":1}}],[\"utf\",{\"1\":{\"1015\":3,\"1346\":1,\"1405\":1,\"1416\":2,\"1937\":3,\"1970\":3}}],[\"utf8encoder\",{\"1\":{\"1352\":1,\"1660\":1}}],[\"utf8\",{\"1\":{\"615\":36,\"651\":1}}],[\"utf8mb4\",{\"1\":{\"615\":1}}],[\"utils\",{\"1\":{\"1468\":1,\"1832\":1,\"1966\":1}}],[\"util\",{\"1\":{\"328\":1,\"650\":1,\"822\":4,\"876\":4,\"935\":1,\"1311\":1,\"1313\":3,\"1402\":1,\"1685\":1,\"1718\":1,\"1746\":1,\"1757\":1,\"1763\":1,\"1966\":1}}],[\"utility\",{\"1\":{\"314\":1}}],[\"u\",{\"1\":{\"580\":1,\"612\":1,\"620\":1,\"629\":1,\"695\":1,\"822\":1,\"833\":1,\"1540\":3,\"1555\":1,\"1944\":1,\"1947\":1}}],[\"u2\",{\"1\":{\"237\":11,\"1076\":11,\"1292\":1}}],[\"u4\",{\"1\":{\"237\":1,\"1076\":1}}],[\"udp\",{\"1\":{\"662\":1,\"723\":1}}],[\"udp支持1对1\",{\"1\":{\"181\":1}}],[\"udp面向报文\",{\"1\":{\"181\":1}}],[\"udp尽最大努力交付\",{\"1\":{\"181\":1}}],[\"udp是无连接的即发送数据前不需要先建立链接\",{\"1\":{\"181\":1}}],[\"unreasonably\",{\"1\":{\"1756\":1}}],[\"unreachable\",{\"1\":{\"144\":1,\"145\":1}}],[\"unregister\",{\"0\":{\"1646\":1},\"1\":{\"1646\":2}}],[\"unable\",{\"1\":{\"1598\":1}}],[\"unbindservice\",{\"1\":{\"1736\":1}}],[\"unbindremoteservice\",{\"1\":{\"1736\":3}}],[\"unbindbuilder\",{\"1\":{\"1601\":3,\"1604\":3}}],[\"unbind\",{\"1\":{\"1598\":7,\"1601\":5,\"1604\":3,\"1610\":2,\"1736\":1}}],[\"unbinder=null\",{\"1\":{\"1610\":1}}],[\"unbinder>\",{\"1\":{\"1598\":4}}],[\"unbinder>>\",{\"1\":{\"1598\":1}}],[\"unbinder\",{\"1\":{\"1598\":15,\"1601\":6,\"1604\":6,\"1610\":5}}],[\"unbounded\",{\"1\":{\"359\":1}}],[\"unknown\",{\"1\":{\"1298\":1}}],[\"unlinkdeathrecipient\",{\"1\":{\"1762\":1}}],[\"unlinktodeath\",{\"1\":{\"1762\":2}}],[\"unlinktodeath只有当该bpbinder的所有mobituaries都被移除\",{\"1\":{\"1761\":1}}],[\"unlinktodeath过程\",{\"1\":{\"1761\":1}}],[\"unlinkcancelledwaiters\",{\"1\":{\"896\":1}}],[\"unless\",{\"1\":{\"1648\":1}}],[\"unlocked\",{\"1\":{\"1772\":1}}],[\"unlock\",{\"1\":{\"342\":1,\"359\":1,\"874\":1,\"876\":1,\"880\":1,\"884\":1,\"885\":3,\"887\":2,\"889\":2,\"896\":1,\"932\":2,\"1220\":1,\"1828\":2}}],[\"unpark\",{\"1\":{\"888\":1}}],[\"unparksuccessor\",{\"1\":{\"879\":1}}],[\"unused\",{\"1\":{\"886\":1,\"1798\":1}}],[\"unfair\",{\"1\":{\"884\":1}}],[\"unfairlock\",{\"1\":{\"884\":2}}],[\"uniapp\",{\"1\":{\"1694\":1}}],[\"uniapp想要交给移动端负责\",{\"1\":{\"1694\":1}}],[\"uniform\",{\"1\":{\"1540\":1}}],[\"uninstall\",{\"1\":{\"1410\":2,\"1711\":1}}],[\"uninstalled\",{\"1\":{\"1326\":1}}],[\"uniq\",{\"1\":{\"822\":1}}],[\"unix\",{\"1\":{\"631\":1}}],[\"unit\",{\"1\":{\"246\":1,\"314\":3,\"876\":2,\"880\":2,\"886\":1,\"938\":1,\"1564\":2,\"1905\":1}}],[\"unexpectedly\",{\"1\":{\"1867\":1,\"1869\":1}}],[\"unexpected\",{\"0\":{\"602\":1},\"1\":{\"603\":1,\"1332\":2}}],[\"uncomment\",{\"1\":{\"631\":2,\"1555\":1}}],[\"uncaught\",{\"0\":{\"602\":1},\"1\":{\"603\":1}}],[\"unchecked\",{\"1\":{\"342\":1,\"381\":1,\"1035\":1}}],[\"unsupportedclassversionerror\",{\"1\":{\"1078\":1}}],[\"unsupportedoperationexception\",{\"1\":{\"465\":4}}],[\"unsatisfiedlinkerror\",{\"1\":{\"1022\":1}}],[\"unsafe\",{\"1\":{\"896\":1,\"900\":1,\"1023\":2}}],[\"unsigned\",{\"1\":{\"615\":5,\"1530\":2,\"1789\":1,\"1799\":1}}],[\"unsynchronized\",{\"1\":{\"359\":1}}],[\"under\",{\"1\":{\"1648\":3}}],[\"understand\",{\"1\":{\"1361\":1}}],[\"underlinespan\",{\"1\":{\"1310\":1}}],[\"undergo\",{\"1\":{\"359\":1}}],[\"undertow\",{\"1\":{\"12\":1,\"731\":1}}],[\"undefined\",{\"0\":{\"67\":1},\"1\":{\"67\":1,\"1555\":1}}],[\"upstream\",{\"1\":{\"1945\":1,\"1951\":3,\"1961\":1}}],[\"uptimemillis\",{\"1\":{\"1841\":2,\"1846\":1,\"1849\":1}}],[\"uptime\",{\"1\":{\"1826\":4,\"1828\":2,\"1831\":6}}],[\"upcommand\",{\"1\":{\"489\":13}}],[\"upon\",{\"1\":{\"334\":1}}],[\"up\",{\"1\":{\"103\":1,\"631\":1,\"896\":1,\"1383\":4,\"1666\":4,\"1770\":1}}],[\"uploadarchives\",{\"1\":{\"1966\":2}}],[\"uploadmessageabovel\",{\"1\":{\"1417\":10}}],[\"uploadmessage\",{\"1\":{\"1417\":10}}],[\"uploadmsg\",{\"1\":{\"1416\":6}}],[\"uploading\",{\"1\":{\"1323\":1,\"1335\":1,\"1459\":1}}],[\"upload\",{\"1\":{\"103\":1,\"645\":1,\"1323\":1,\"1335\":5,\"1459\":1,\"1905\":3}}],[\"updatephotos\",{\"1\":{\"1417\":3}}],[\"updatedialog\",{\"1\":{\"1358\":8}}],[\"updatedrawstate\",{\"1\":{\"1305\":2}}],[\"updatealipaydialog\",{\"1\":{\"1358\":2}}],[\"updatehandler\",{\"1\":{\"1332\":10}}],[\"updatehead\",{\"1\":{\"895\":2}}],[\"updateheap\",{\"1\":{\"283\":2}}],[\"updateconfiguration\",{\"1\":{\"1295\":1}}],[\"updateuser\",{\"1\":{\"900\":2}}],[\"updates=true\",{\"1\":{\"631\":1}}],[\"updates`\",{\"1\":{\"615\":1}}],[\"updates\",{\"1\":{\"614\":1,\"622\":1,\"630\":1,\"631\":3,\"895\":1}}],[\"update\",{\"1\":{\"79\":2,\"519\":3,\"613\":1,\"614\":1,\"621\":1,\"622\":1,\"630\":1,\"676\":1,\"692\":1,\"695\":1,\"876\":1,\"887\":2,\"900\":3,\"1292\":1,\"1595\":3,\"1712\":1,\"1933\":1}}],[\"u0026\",{\"1\":{\"1335\":1}}],[\"u003e\",{\"1\":{\"28\":1}}],[\"u012124438\",{\"1\":{\"1320\":1}}],[\"u012811342\",{\"1\":{\"1320\":1}}],[\"u012982629\",{\"1\":{\"37\":1,\"1420\":1}}],[\"usleep\",{\"1\":{\"1799\":1}}],[\"us\",{\"1\":{\"820\":1}}],[\"usagestatsservice\",{\"1\":{\"1867\":1,\"1868\":1}}],[\"usage\",{\"0\":{\"1643\":1},\"1\":{\"631\":1,\"1055\":2,\"1534\":5}}],[\"using\",{\"1\":{\"618\":1,\"631\":5}}],[\"usually\",{\"1\":{\"332\":1}}],[\"ustc\",{\"1\":{\"79\":2}}],[\"usescleartexttraffic=\",{\"1\":{\"1405\":2}}],[\"usesign\",{\"1\":{\"1292\":1}}],[\"use7zip\",{\"1\":{\"1292\":1}}],[\"useless\",{\"1\":{\"631\":1}}],[\"use\",{\"1\":{\"94\":1,\"144\":1,\"145\":1,\"619\":1,\"631\":2,\"1220\":1,\"1534\":4,\"1558\":1,\"1648\":1,\"1846\":1,\"1847\":1,\"1850\":4,\"1974\":2}}],[\"used\",{\"0\":{\"67\":1},\"1\":{\"67\":1,\"359\":1,\"631\":1,\"711\":1,\"1555\":1}}],[\"user=chentong0209\",{\"1\":{\"1914\":1}}],[\"user=xxx\",{\"1\":{\"1905\":1}}],[\"usermanagerservice\",{\"1\":{\"1867\":1,\"1868\":1}}],[\"username\",{\"1\":{\"1625\":2,\"1628\":2,\"1966\":1}}],[\"userguide\",{\"1\":{\"1574\":2}}],[\"userid\",{\"1\":{\"1332\":4,\"1756\":2}}],[\"user名\",{\"1\":{\"1298\":1}}],[\"userclasspath\",{\"1\":{\"1063\":4}}],[\"user表\",{\"0\":{\"622\":1}}],[\"user表结构和数据\",{\"0\":{\"615\":1}}],[\"user3\",{\"1\":{\"519\":2}}],[\"user2\",{\"1\":{\"519\":2}}],[\"user1\",{\"1\":{\"519\":2}}],[\"users\",{\"1\":{\"94\":4,\"103\":8,\"615\":1,\"1030\":1,\"1371\":1,\"1534\":3,\"1555\":1,\"1558\":2,\"1613\":1,\"1952\":1}}],[\"user\",{\"1\":{\"12\":2,\"58\":1,\"519\":8,\"611\":1,\"613\":2,\"614\":4,\"615\":4,\"618\":1,\"621\":2,\"622\":4,\"630\":4,\"651\":2,\"668\":21,\"695\":2,\"731\":2,\"900\":14,\"1061\":1,\"1298\":5,\"1323\":2,\"1459\":2,\"1604\":1,\"1770\":5,\"1787\":1,\"1790\":1,\"1924\":2,\"1942\":2,\"1952\":1,\"1963\":1}}],[\"usr\",{\"1\":{\"16\":1,\"118\":1,\"619\":2,\"631\":2,\"638\":4,\"640\":1,\"644\":1,\"694\":3,\"1050\":1,\"1292\":1,\"1323\":1,\"1459\":1,\"1534\":5,\"1583\":1}}],[\"uid\",{\"1\":{\"1717\":4,\"1790\":6,\"1863\":1,\"1865\":1,\"1928\":1}}],[\"uiability\",{\"1\":{\"1707\":2,\"1708\":3,\"1709\":2}}],[\"uithreadtype\",{\"1\":{\"1604\":2}}],[\"uithread\",{\"1\":{\"1598\":4,\"1601\":3,\"1604\":1,\"1610\":1}}],[\"ui界面\",{\"1\":{\"1512\":1}}],[\"ui不确认可后续开发中提供\",{\"1\":{\"1443\":1}}],[\"ui交付物基本要求\",{\"0\":{\"1442\":1}}],[\"ui交付给开发者资料\",{\"1\":{\"1435\":2}}],[\"ui设计不能在开发工期内较大变动\",{\"1\":{\"1441\":1}}],[\"ui人员\",{\"1\":{\"1441\":1}}],[\"ui颜色透明度\",{\"0\":{\"1367\":1}}],[\"uint64\",{\"1\":{\"1827\":3,\"1828\":2}}],[\"uint16\",{\"1\":{\"1076\":6,\"1079\":3,\"1109\":2,\"1530\":1,\"1790\":4}}],[\"uint32\",{\"1\":{\"1076\":1,\"1717\":1,\"1727\":3,\"1756\":4,\"1770\":2,\"1778\":1,\"1789\":5,\"1790\":2,\"1828\":1}}],[\"uintptr\",{\"1\":{\"1023\":1,\"1789\":8}}],[\"uint8\",{\"1\":{\"1009\":1,\"1530\":1,\"1798\":1}}],[\"uint\",{\"1\":{\"984\":1,\"993\":1,\"1009\":2,\"1016\":1,\"1036\":2,\"1044\":1,\"1109\":7,\"1110\":1,\"1727\":1}}],[\"ui提前询问\",{\"1\":{\"598\":1}}],[\"ui组件\",{\"1\":{\"305\":1}}],[\"ui\",{\"1\":{\"8\":1,\"12\":1,\"305\":1,\"727\":1,\"731\":1,\"1383\":1,\"1604\":1,\"1666\":1,\"1707\":1,\"1708\":1,\"1709\":3,\"1711\":1}}],[\"eintr\",{\"1\":{\"1828\":1}}],[\"either\",{\"1\":{\"359\":1,\"1648\":1}}],[\"epollresult\",{\"1\":{\"1829\":1}}],[\"epollhup\",{\"1\":{\"1828\":1}}],[\"epollerr\",{\"1\":{\"1828\":1}}],[\"epollevents\",{\"1\":{\"1828\":6}}],[\"epollout\",{\"1\":{\"1828\":1}}],[\"epollin\",{\"1\":{\"1828\":2,\"1829\":1}}],[\"epoll事件个数等于0\",{\"1\":{\"1828\":1}}],[\"epoll事件个数小于0\",{\"1\":{\"1828\":1}}],[\"epoll重建\",{\"1\":{\"1828\":1}}],[\"epoll\",{\"1\":{\"1828\":4,\"1829\":9,\"1831\":1,\"1857\":4}}],[\"euid\",{\"1\":{\"1717\":1}}],[\"e5\",{\"1\":{\"1583\":2}}],[\"e7a40a592f15\",{\"1\":{\"1574\":1}}],[\"ebadf\",{\"1\":{\"1778\":2}}],[\"eb\",{\"1\":{\"1367\":1}}],[\"e8\",{\"1\":{\"1367\":1,\"1583\":2}}],[\"e6\",{\"1\":{\"1367\":1,\"1583\":2}}],[\"e3\",{\"1\":{\"1367\":1}}],[\"e0\",{\"1\":{\"1367\":1}}],[\"et\",{\"1\":{\"1364\":2}}],[\"etc\",{\"1\":{\"25\":2,\"109\":1,\"627\":2,\"631\":2,\"638\":2,\"707\":1}}],[\"email=\",{\"1\":{\"1518\":1,\"1555\":1}}],[\"email\",{\"1\":{\"1518\":3,\"1921\":1,\"1924\":2,\"1942\":1,\"1952\":1}}],[\"emulator\",{\"1\":{\"1341\":3}}],[\"employee\",{\"1\":{\"543\":7}}],[\"emptyargs\",{\"1\":{\"1592\":2}}],[\"emptynativemethod\",{\"1\":{\"1022\":2}}],[\"empty\",{\"1\":{\"332\":1,\"334\":1,\"350\":1,\"1518\":3,\"1598\":3,\"1601\":1,\"1707\":1,\"1770\":1}}],[\"equal\",{\"1\":{\"908\":2}}],[\"equals比较时\",{\"1\":{\"1203\":1}}],[\"equals比较会先判断类型\",{\"1\":{\"1203\":1}}],[\"equals\",{\"1\":{\"348\":3,\"350\":1,\"908\":2,\"995\":1,\"1203\":8,\"1320\":1,\"1332\":1,\"1349\":3,\"1417\":1,\"1756\":1}}],[\"erich\",{\"1\":{\"742\":1}}],[\"err=talkwithdriver\",{\"1\":{\"1798\":1}}],[\"errno=\",{\"1\":{\"1827\":1}}],[\"errno\",{\"1\":{\"94\":1,\"1827\":2,\"1828\":1,\"1857\":1}}],[\"err\",{\"1\":{\"85\":1,\"94\":9,\"979\":4,\"1063\":6,\"1064\":2,\"1081\":1,\"1756\":12,\"1762\":3,\"1798\":10}}],[\"error发生error的情况\",{\"1\":{\"1780\":1}}],[\"errorcheck\",{\"1\":{\"1756\":1,\"1798\":1}}],[\"errors\",{\"1\":{\"52\":1}}],[\"error\",{\"0\":{\"28\":1,\"46\":1,\"52\":1,\"76\":1},\"1\":{\"28\":1,\"73\":1,\"115\":1,\"631\":2,\"640\":2,\"711\":9,\"715\":2,\"882\":1,\"883\":1,\"886\":1,\"1035\":1,\"1063\":1,\"1064\":1,\"1081\":1,\"1546\":1,\"1604\":2,\"1717\":1,\"1727\":2,\"1756\":2,\"1762\":1,\"1770\":1,\"1778\":2,\"1798\":4,\"1828\":2,\"1857\":1}}],[\"econnrefused\",{\"1\":{\"1778\":2}}],[\"echo\",{\"1\":{\"711\":17,\"715\":1,\"1030\":1,\"1323\":14,\"1335\":14,\"1459\":14,\"1583\":2}}],[\"ecdhe\",{\"1\":{\"638\":1}}],[\"eof\",{\"1\":{\"644\":1}}],[\"eglconfig\",{\"1\":{\"1540\":1}}],[\"eg\",{\"1\":{\"441\":1,\"471\":1,\"598\":1,\"657\":1,\"793\":2,\"1008\":1,\"1064\":1,\"1109\":1,\"1338\":1,\"1341\":1,\"1346\":1,\"1534\":1,\"1592\":2,\"1601\":4,\"1604\":1,\"1694\":1,\"1911\":1,\"1962\":1}}],[\"ev\",{\"1\":{\"1857\":3}}],[\"evict\",{\"1\":{\"362\":1,\"364\":3}}],[\"everythingglobalscope\",{\"1\":{\"1552\":2}}],[\"everywhere\",{\"1\":{\"329\":1}}],[\"eventitem\",{\"1\":{\"1829\":8,\"1831\":1}}],[\"eventitems\",{\"1\":{\"1828\":4}}],[\"eventfd\",{\"1\":{\"1829\":1}}],[\"eventcount\",{\"1\":{\"1828\":4}}],[\"eventclass\",{\"1\":{\"1546\":4}}],[\"events\",{\"1\":{\"1825\":1,\"1828\":12,\"1829\":1,\"1831\":3}}],[\"event过程\",{\"1\":{\"1755\":1}}],[\"eventmsg\",{\"1\":{\"1645\":1}}],[\"eventmain\",{\"1\":{\"1645\":2}}],[\"eventtypes\",{\"1\":{\"1546\":3}}],[\"eventtype\",{\"1\":{\"1546\":9}}],[\"eventbus使用方式\",{\"1\":{\"1647\":1}}],[\"eventbus源代码\",{\"1\":{\"1647\":1}}],[\"eventbus源代码分析\",{\"0\":{\"1638\":1}}],[\"eventbus源码分析\",{\"0\":{\"1546\":1},\"1\":{\"1546\":1}}],[\"eventbus式使用方法\",{\"1\":{\"1636\":1,\"1637\":1}}],[\"eventbus\",{\"1\":{\"1546\":2,\"1647\":1}}],[\"eventbus是观察者模式\",{\"1\":{\"1546\":1}}],[\"event\",{\"1\":{\"312\":2,\"614\":1,\"622\":1,\"630\":1,\"1546\":16,\"1645\":2,\"1711\":1,\"1713\":1,\"1770\":2,\"1828\":5,\"1829\":3,\"1831\":1,\"1857\":1}}],[\"early\",{\"1\":{\"1857\":2}}],[\"eagain\",{\"1\":{\"1827\":1}}],[\"each\",{\"1\":{\"351\":1,\"1857\":3}}],[\"easy编写spanbuilder\",{\"0\":{\"1303\":1}}],[\"easyexcel\",{\"1\":{\"12\":1,\"731\":1}}],[\"easy\",{\"0\":{\"1301\":1},\"1\":{\"12\":1,\"731\":1,\"1399\":2,\"1402\":1,\"1682\":2,\"1685\":1}}],[\"edgeinsets\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"ed\",{\"1\":{\"1367\":1}}],[\"edititemat\",{\"1\":{\"1828\":1}}],[\"edit\",{\"1\":{\"1601\":2,\"1604\":1,\"1610\":1}}],[\"editor\",{\"1\":{\"1555\":8}}],[\"editable\",{\"1\":{\"1349\":1,\"1364\":1}}],[\"edittextlist\",{\"1\":{\"1364\":3}}],[\"edittextontextchanged\",{\"1\":{\"1364\":2}}],[\"edittext\",{\"1\":{\"1349\":17,\"1364\":5}}],[\"edittextutils\",{\"1\":{\"1349\":1}}],[\"edittext输入金额类型\",{\"0\":{\"1349\":1}}],[\"eden\",{\"1\":{\"206\":1,\"207\":8,\"368\":14,\"1131\":1}}],[\"edu\",{\"1\":{\"79\":4}}],[\"e\",{\"1\":{\"154\":4,\"197\":1,\"332\":3,\"333\":2,\"337\":4,\"342\":5,\"345\":1,\"348\":3,\"350\":19,\"352\":10,\"363\":3,\"381\":8,\"416\":6,\"702\":1,\"823\":2,\"867\":3,\"868\":1,\"870\":14,\"884\":1,\"895\":6,\"897\":1,\"905\":4,\"907\":2,\"908\":4,\"917\":3,\"923\":1,\"950\":9,\"958\":9,\"1036\":2,\"1175\":1,\"1203\":5,\"1326\":4,\"1332\":1,\"1521\":2,\"1552\":2,\"1589\":1,\"1592\":3,\"1598\":4,\"1601\":4,\"1604\":2,\"1709\":5,\"1713\":4,\"1736\":4}}],[\"effectivecapabilities\",{\"1\":{\"1865\":1}}],[\"efd\",{\"1\":{\"1829\":1}}],[\"ef\",{\"1\":{\"118\":1,\"711\":1}}],[\"enforceinterface\",{\"1\":{\"1732\":1,\"1739\":2}}],[\"enhanced\",{\"1\":{\"1613\":1}}],[\"enhancement\",{\"1\":{\"631\":1}}],[\"enclosingelement\",{\"1\":{\"1604\":5}}],[\"encode\",{\"1\":{\"1352\":1,\"1660\":1}}],[\"encoding=\",{\"1\":{\"1346\":1,\"1405\":1}}],[\"encoding\",{\"1\":{\"615\":1,\"1937\":2,\"1970\":2}}],[\"entered状态\",{\"1\":{\"1780\":1}}],[\"entered\",{\"1\":{\"1770\":1,\"1780\":1}}],[\"enter\",{\"1\":{\"1770\":1,\"1778\":2,\"1779\":1,\"1780\":1,\"1789\":2}}],[\"entertrees\",{\"1\":{\"1197\":1,\"1198\":1}}],[\"entityclass\",{\"1\":{\"1456\":1}}],[\"entity\",{\"1\":{\"1280\":1,\"1552\":4}}],[\"entries\",{\"1\":{\"365\":5,\"631\":1,\"1036\":3}}],[\"entryset\",{\"1\":{\"1332\":3,\"1604\":1}}],[\"entry搜索类路径\",{\"1\":{\"1064\":1}}],[\"entry的next节点永远不为空\",{\"1\":{\"894\":1}}],[\"entry不为空\",{\"1\":{\"381\":1}}],[\"entry<typeelement\",{\"1\":{\"1604\":1}}],[\"entry<>\",{\"1\":{\"350\":1,\"352\":1}}],[\"entry<k\",{\"1\":{\"348\":4,\"350\":4,\"352\":3,\"362\":2,\"363\":3,\"364\":2,\"367\":2}}],[\"entry\",{\"1\":{\"348\":9,\"350\":1,\"352\":6,\"356\":1,\"365\":1,\"367\":1,\"381\":6,\"979\":5,\"1036\":5,\"1063\":8,\"1064\":4,\"1332\":15,\"1503\":1,\"1604\":3,\"1708\":1,\"1709\":2,\"1770\":1,\"1772\":5}}],[\"enqueuemessage\",{\"0\":{\"1847\":1},\"1\":{\"1827\":1,\"1837\":1,\"1841\":4,\"1847\":1}}],[\"enqueue\",{\"1\":{\"917\":2,\"1546\":5}}],[\"enq\",{\"1\":{\"879\":4}}],[\"enabled\",{\"1\":{\"694\":2,\"1374\":1,\"1589\":10,\"1595\":1,\"1632\":1,\"1788\":3}}],[\"enabled8=true\",{\"1\":{\"115\":1}}],[\"enable\",{\"1\":{\"631\":1,\"637\":1,\"661\":1,\"679\":1,\"684\":1,\"707\":1,\"722\":1,\"1364\":4,\"1534\":1,\"1555\":1,\"1592\":2,\"1595\":3}}],[\"enabling\",{\"1\":{\"631\":1}}],[\"en\",{\"1\":{\"631\":1}}],[\"engines\",{\"1\":{\"631\":1}}],[\"engine=innodb\",{\"1\":{\"631\":1}}],[\"engine=myisam\",{\"1\":{\"615\":1}}],[\"engineer\",{\"1\":{\"531\":9}}],[\"engine\",{\"1\":{\"428\":3,\"631\":2}}],[\"enumsingleton\",{\"1\":{\"405\":3}}],[\"enum\",{\"1\":{\"405\":1,\"435\":1,\"531\":1,\"615\":32,\"1392\":1,\"1675\":1,\"1727\":1}}],[\"ensurelocalcapacity\",{\"1\":{\"1530\":1}}],[\"ensuresegment\",{\"1\":{\"359\":1}}],[\"ensures\",{\"1\":{\"351\":1}}],[\"ensurecapacityhelper\",{\"1\":{\"337\":1}}],[\"ensurecapacityinternal\",{\"1\":{\"332\":3,\"334\":1}}],[\"ensureexplicitcapacity\",{\"1\":{\"332\":2}}],[\"endswith\",{\"1\":{\"1592\":1}}],[\"endmacro\",{\"1\":{\"1534\":1}}],[\"endif\",{\"1\":{\"1534\":1}}],[\"ending\",{\"0\":{\"1043\":1}}],[\"endpc\",{\"1\":{\"1036\":5}}],[\"end\",{\"1\":{\"103\":1,\"284\":8,\"501\":1,\"711\":1,\"870\":1,\"897\":8,\"923\":2,\"1036\":1,\"1310\":2,\"1313\":2,\"1332\":1,\"1613\":1,\"1641\":1,\"1707\":1,\"1708\":1,\"1711\":1,\"1713\":2,\"1731\":1,\"1770\":2,\"1789\":2,\"1790\":1}}],[\"env结构体\",{\"1\":{\"1530\":1}}],[\"env=common\",{\"1\":{\"94\":2}}],[\"env\",{\"1\":{\"94\":2,\"604\":4,\"657\":2,\"1323\":1,\"1459\":1,\"1527\":2,\"1530\":11,\"1583\":1,\"1717\":3,\"1756\":5,\"1762\":6,\"1829\":2,\"1861\":4},\"2\":{\"606\":1,\"610\":1,\"617\":1,\"624\":1,\"633\":1,\"642\":1,\"647\":1,\"654\":1,\"659\":1,\"664\":1,\"670\":1,\"674\":1,\"682\":1,\"686\":1,\"690\":1,\"698\":1,\"705\":1,\"709\":1,\"713\":1,\"717\":1,\"725\":1}}],[\"environment\",{\"1\":{\"16\":1,\"1869\":1}}],[\"enoent\",{\"1\":{\"94\":3}}],[\"ex\",{\"1\":{\"1036\":11,\"1056\":1,\"1070\":1,\"1863\":1,\"1867\":2}}],[\"example\",{\"1\":{\"631\":1,\"986\":1,\"997\":2,\"1010\":1,\"1017\":2,\"1024\":4,\"1030\":2,\"1037\":3,\"1044\":1,\"1103\":1,\"1383\":2,\"1509\":1,\"1567\":1,\"1666\":2,\"1911\":1,\"1921\":1}}],[\"exist\",{\"1\":{\"1613\":1}}],[\"exists\",{\"0\":{\"1917\":1},\"1\":{\"94\":1,\"615\":1,\"1417\":1,\"1475\":1,\"1534\":1,\"1613\":3}}],[\"exited\",{\"1\":{\"1867\":1,\"1869\":1}}],[\"exitvalue\",{\"1\":{\"1613\":1}}],[\"exiting\",{\"1\":{\"711\":1}}],[\"exit\",{\"1\":{\"613\":1,\"621\":1,\"695\":1,\"711\":1,\"1055\":1,\"1770\":1,\"1778\":1}}],[\"exe\",{\"1\":{\"465\":2}}],[\"execmain\",{\"1\":{\"1044\":2}}],[\"exec\",{\"1\":{\"1003\":1,\"1857\":1}}],[\"execuors获取threadfactory\",{\"1\":{\"938\":1}}],[\"executable\",{\"1\":{\"1534\":3}}],[\"executor\",{\"1\":{\"938\":4}}],[\"executor接口\",{\"1\":{\"938\":1}}],[\"executors\",{\"1\":{\"907\":1,\"908\":1,\"938\":4,\"950\":3}}],[\"executorservice\",{\"1\":{\"247\":4,\"828\":4,\"907\":1,\"908\":1,\"938\":5}}],[\"executecommand\",{\"1\":{\"1717\":1,\"1778\":1,\"1798\":1}}],[\"executecmd\",{\"1\":{\"1613\":2}}],[\"executeservice\",{\"1\":{\"923\":1}}],[\"execute\",{\"1\":{\"489\":9,\"614\":1,\"622\":1,\"630\":1,\"907\":1,\"908\":2,\"917\":2,\"923\":1,\"926\":2,\"938\":2,\"950\":2,\"984\":8,\"993\":5,\"994\":1,\"1009\":3,\"1022\":1,\"1036\":1,\"1094\":1,\"1095\":1,\"1096\":1,\"1101\":2,\"1546\":1,\"1613\":1,\"1857\":1}}],[\"executed\",{\"1\":{\"103\":1}}],[\"execution\",{\"1\":{\"73\":1,\"103\":1,\"1374\":1,\"1589\":1}}],[\"exectution模式\",{\"0\":{\"935\":1}}],[\"exectuors\",{\"1\":{\"923\":1}}],[\"execstartpre=\",{\"1\":{\"694\":1}}],[\"execstart=\",{\"1\":{\"694\":1}}],[\"execa\",{\"1\":{\"94\":4}}],[\"extclasspath\",{\"1\":{\"1063\":3}}],[\"extras\",{\"1\":{\"1966\":1}}],[\"extradata\",{\"1\":{\"1713\":1}}],[\"extra\",{\"1\":{\"1029\":1,\"1030\":7,\"1036\":1,\"1417\":2}}],[\"extern\",{\"1\":{\"1530\":1}}],[\"externalnativebuild\",{\"1\":{\"1952\":1}}],[\"external\",{\"1\":{\"631\":1,\"1416\":2,\"1709\":2,\"1713\":1}}],[\"extend\",{\"1\":{\"950\":1}}],[\"extends\",{\"0\":{\"37\":1},\"1\":{\"331\":1,\"358\":1,\"362\":1,\"365\":1,\"367\":1,\"381\":1,\"416\":2,\"459\":4,\"465\":2,\"471\":3,\"477\":1,\"483\":3,\"501\":1,\"531\":4,\"537\":4,\"876\":1,\"880\":1,\"884\":2,\"897\":1,\"917\":3,\"950\":2,\"1188\":4,\"1320\":1,\"1383\":9,\"1392\":1,\"1402\":1,\"1416\":1,\"1555\":1,\"1598\":5,\"1604\":5,\"1626\":1,\"1666\":9,\"1675\":1,\"1685\":1,\"1732\":2,\"1736\":1,\"1737\":1,\"1739\":2,\"1756\":1,\"1839\":1,\"1840\":1,\"1851\":1}}],[\"extensions>\",{\"1\":{\"1555\":1}}],[\"extensions\",{\"1\":{\"1555\":2}}],[\"extension\",{\"1\":{\"1061\":1,\"1175\":1,\"1518\":1}}],[\"extensionclassloader\",{\"1\":{\"194\":1}}],[\"extensibility\",{\"1\":{\"313\":1}}],[\"ext\",{\"1\":{\"194\":1,\"1061\":1,\"1063\":2,\"1474\":1,\"1905\":1,\"1966\":1}}],[\"expanded\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"express\",{\"1\":{\"1648\":1}}],[\"express服务\",{\"0\":{\"652\":1}}],[\"expressions\",{\"1\":{\"1289\":1}}],[\"expression\",{\"1\":{\"525\":2,\"1534\":3}}],[\"exponent\",{\"1\":{\"1534\":1}}],[\"expose\",{\"1\":{\"651\":1}}],[\"exported=\",{\"1\":{\"1320\":1}}],[\"exports\",{\"1\":{\"604\":2,\"657\":1}}],[\"export\",{\"1\":{\"67\":3,\"657\":2,\"1050\":2,\"1056\":1,\"1070\":1,\"1371\":6,\"1534\":1,\"1555\":1,\"1929\":1}}],[\"expect\",{\"1\":{\"644\":4,\"876\":1,\"900\":3}}],[\"expect脚本\",{\"1\":{\"644\":1}}],[\"expectedmodcount\",{\"1\":{\"334\":2}}],[\"expired`\",{\"1\":{\"615\":1}}],[\"expired\",{\"1\":{\"614\":1,\"622\":1,\"630\":1}}],[\"exp\",{\"1\":{\"525\":2}}],[\"exp4\",{\"1\":{\"525\":2}}],[\"exp3\",{\"1\":{\"525\":2}}],[\"exp2\",{\"1\":{\"525\":12}}],[\"exp1\",{\"1\":{\"525\":12}}],[\"explicit\",{\"1\":{\"1518\":1}}],[\"explicitly\",{\"1\":{\"73\":1}}],[\"explorer\",{\"1\":{\"465\":1}}],[\"expungestaleentry\",{\"1\":{\"381\":1}}],[\"excute\",{\"1\":{\"1101\":1}}],[\"excutor框架\",{\"0\":{\"828\":1}}],[\"exclass\",{\"1\":{\"1036\":5}}],[\"exclusivecount\",{\"1\":{\"886\":3}}],[\"exclusive\",{\"1\":{\"879\":1,\"1036\":1,\"1310\":4,\"1770\":1}}],[\"exclusions>\",{\"1\":{\"672\":1}}],[\"exclusion>\",{\"1\":{\"672\":2}}],[\"excludesfile\",{\"1\":{\"1952\":1}}],[\"exclude\",{\"1\":{\"52\":2,\"1329\":1,\"1475\":4,\"1487\":1,\"1488\":1}}],[\"exchange\",{\"1\":{\"908\":2,\"958\":1}}],[\"exchanger交换缓冲区\",{\"1\":{\"958\":1}}],[\"exchanger\",{\"1\":{\"908\":3,\"958\":8}}],[\"exchanger<string>\",{\"1\":{\"908\":2}}],[\"exchangertest\",{\"1\":{\"908\":1}}],[\"exchanger也可以用于两人校对工作\",{\"1\":{\"908\":1}}],[\"except\",{\"1\":{\"1648\":1}}],[\"exceptions\",{\"1\":{\"1583\":1}}],[\"exceptiontableentry\",{\"1\":{\"1036\":1}}],[\"exceptiontable\",{\"1\":{\"1036\":8}}],[\"exceptionhandler\",{\"1\":{\"1036\":6}}],[\"exception\",{\"1\":{\"12\":1,\"154\":1,\"672\":1,\"731\":1,\"868\":1,\"884\":1,\"897\":1,\"905\":2,\"917\":1,\"923\":1,\"1036\":2,\"1037\":1,\"1038\":1,\"1326\":1,\"1332\":1,\"1364\":1,\"1521\":1,\"1592\":3,\"1598\":2,\"1604\":1,\"1846\":1}}],[\"exceeded\",{\"1\":{\"882\":1,\"883\":1,\"886\":1}}],[\"excel框架\",{\"1\":{\"12\":1,\"731\":1}}],[\"excel\",{\"1\":{\"12\":2,\"731\":2}}],[\"especially\",{\"1\":{\"1546\":1}}],[\"esp\",{\"1\":{\"841\":1,\"1222\":1}}],[\"esi\",{\"1\":{\"841\":1}}],[\"esac\",{\"1\":{\"711\":1}}],[\"es\",{\"1\":{\"12\":1,\"731\":1}}],[\"ellipse\",{\"1\":{\"1702\":1}}],[\"elasticincurve\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"elasticsearch和kibana\",{\"1\":{\"1616\":1}}],[\"elasticsearch\",{\"1\":{\"12\":2,\"731\":2}}],[\"elf\",{\"1\":{\"834\":1}}],[\"eldest\",{\"1\":{\"362\":1,\"364\":2,\"365\":1}}],[\"else\",{\"1\":{\"197\":1,\"283\":1,\"284\":1,\"363\":3,\"381\":2,\"441\":1,\"483\":2,\"531\":4,\"537\":2,\"652\":1,\"711\":3,\"879\":1,\"882\":1,\"883\":1,\"886\":3,\"895\":5,\"897\":1,\"950\":1,\"958\":1,\"984\":1,\"985\":1,\"993\":1,\"996\":1,\"1030\":1,\"1056\":2,\"1070\":4,\"1102\":1,\"1175\":1,\"1277\":1,\"1329\":1,\"1332\":4,\"1349\":1,\"1358\":1,\"1383\":2,\"1392\":3,\"1416\":1,\"1417\":11,\"1475\":1,\"1518\":9,\"1521\":1,\"1592\":3,\"1604\":2,\"1613\":1,\"1666\":2,\"1675\":3,\"1739\":2,\"1756\":2,\"1770\":1,\"1790\":1,\"1798\":1,\"1828\":2,\"1842\":1,\"1846\":3,\"1847\":1,\"1849\":2,\"1857\":1,\"1860\":1,\"1863\":1}}],[\"elifecycle\",{\"1\":{\"94\":1}}],[\"elk\",{\"1\":{\"12\":1,\"731\":1}}],[\"elementlist\",{\"1\":{\"1604\":3}}],[\"element>\",{\"1\":{\"1604\":2}}],[\"elementutils\",{\"1\":{\"1604\":8}}],[\"elementtype\",{\"1\":{\"1361\":6,\"1374\":1,\"1592\":1}}],[\"elementcount++\",{\"1\":{\"337\":1}}],[\"elementcount\",{\"1\":{\"337\":2}}],[\"elements\",{\"1\":{\"334\":2,\"342\":3,\"359\":1,\"525\":6,\"1604\":5}}],[\"elementdata\",{\"1\":{\"332\":7,\"333\":4,\"334\":6,\"337\":2,\"338\":4}}],[\"element\",{\"1\":{\"8\":1,\"334\":1,\"543\":2,\"727\":1,\"1518\":2,\"1604\":14,\"1702\":1}}],[\"微前端\",{\"0\":{\"576\":1}}],[\"微核架构\",{\"0\":{\"313\":1},\"1\":{\"313\":1}}],[\"微信的方案\",{\"1\":{\"1491\":1}}],[\"微信android模块化架构重构实践\",{\"1\":{\"1491\":1}}],[\"微信android资源混淆打包工具\",{\"1\":{\"1317\":1}}],[\"微信\",{\"0\":{\"106\":1},\"1\":{\"12\":1,\"731\":1}}],[\"微服务架构分成三种实现模式\",{\"1\":{\"314\":1}}],[\"微服务架构\",{\"0\":{\"314\":1},\"1\":{\"314\":1}}],[\"微服务一样启动\",{\"1\":{\"12\":1,\"731\":1}}],[\"微服务壳\",{\"1\":{\"12\":2,\"731\":2}}],[\"微服务壳化\",{\"1\":{\"11\":1,\"730\":1}}],[\"微服务\",{\"1\":{\"11\":1,\"305\":1,\"730\":1}}],[\"微服务版本前端\",{\"1\":{\"9\":1,\"728\":1}}],[\"rf\",{\"1\":{\"1961\":1}}],[\"rlimits\",{\"1\":{\"1863\":1}}],[\"rlock\",{\"1\":{\"885\":3}}],[\"rdata\",{\"1\":{\"1789\":3}}],[\"rdc\",{\"1\":{\"608\":2}}],[\"rn\",{\"1\":{\"1399\":1,\"1682\":1,\"1694\":1}}],[\"rnd\",{\"1\":{\"631\":1}}],[\"rxbus源代码\",{\"1\":{\"1647\":1}}],[\"rxbus2\",{\"1\":{\"1647\":1}}],[\"rxbus2源码\",{\"1\":{\"1647\":1}}],[\"rxbus\",{\"1\":{\"1639\":1,\"1642\":1,\"1644\":1,\"1645\":1,\"1646\":2,\"1647\":3}}],[\"rxpermissions\",{\"1\":{\"1416\":4}}],[\"rxtextwidget\",{\"1\":{\"1364\":5}}],[\"rxtextwidget用法\",{\"0\":{\"1364\":1},\"1\":{\"1364\":1}}],[\"rxjava是观察者模式\",{\"1\":{\"1546\":1,\"1637\":1}}],[\"rxjava\",{\"1\":{\"805\":1}}],[\"rc初始化\",{\"1\":{\"1858\":1}}],[\"rc配置\",{\"0\":{\"1858\":1},\"1\":{\"1870\":1}}],[\"rc文件\",{\"1\":{\"1787\":1,\"1857\":2}}],[\"rc\",{\"1\":{\"1292\":7,\"1857\":1,\"1870\":1}}],[\"rc4\",{\"1\":{\"638\":1}}],[\"rtcp\",{\"1\":{\"1110\":6}}],[\"rt\",{\"1\":{\"1030\":10}}],[\"rtda\",{\"1\":{\"271\":2,\"984\":9,\"993\":6,\"994\":2,\"1003\":3,\"1009\":3,\"1022\":3,\"1023\":4,\"1030\":5,\"1036\":4,\"1044\":2,\"1086\":1,\"1088\":1,\"1094\":2,\"1095\":1,\"1096\":1,\"1101\":4}}],[\"rh\",{\"1\":{\"886\":7}}],[\"rwlock\",{\"1\":{\"885\":3}}],[\"rw\",{\"1\":{\"834\":1}}],[\"ry\",{\"1\":{\"645\":1,\"711\":5}}],[\"robolectric\",{\"1\":{\"1905\":3}}],[\"robert\",{\"1\":{\"750\":1}}],[\"row\",{\"1\":{\"1707\":2,\"1708\":3,\"1711\":1,\"1713\":2}}],[\"rows\",{\"1\":{\"614\":1,\"622\":1,\"630\":1}}],[\"rotate\",{\"1\":{\"1713\":1}}],[\"rotatebitmap\",{\"1\":{\"1527\":1}}],[\"rotatedbox\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"roundenv\",{\"1\":{\"1604\":2}}],[\"roundenvironment\",{\"1\":{\"1604\":1}}],[\"round\",{\"1\":{\"1368\":1}}],[\"routing\",{\"1\":{\"1503\":1}}],[\"routine\",{\"1\":{\"614\":2,\"615\":2,\"622\":2,\"630\":2}}],[\"route\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"routes=\",{\"1\":{\"668\":1}}],[\"routesdir==========\",{\"1\":{\"667\":1}}],[\"routes\",{\"1\":{\"667\":2}}],[\"router\",{\"1\":{\"604\":2,\"657\":1,\"1707\":2,\"1708\":5}}],[\"role\",{\"1\":{\"668\":3}}],[\"rootdir\",{\"1\":{\"1870\":1}}],[\"rootproject\",{\"1\":{\"1488\":5,\"1613\":2,\"1911\":1}}],[\"roots开始向下搜索\",{\"1\":{\"1125\":1}}],[\"roots对象作为起始点\",{\"1\":{\"1125\":1}}],[\"root设置新密码\",{\"1\":{\"695\":1}}],[\"root\",{\"1\":{\"611\":1,\"612\":1,\"613\":2,\"614\":2,\"615\":2,\"620\":1,\"621\":1,\"622\":1,\"629\":3,\"630\":2,\"638\":1,\"640\":1,\"644\":2,\"651\":1,\"695\":2,\"1534\":1,\"1641\":1,\"1772\":4,\"1858\":1}}],[\"rocketmq\",{\"1\":{\"12\":1,\"731\":1}}],[\"raw\",{\"1\":{\"1905\":1}}],[\"radioservice\",{\"1\":{\"1798\":1}}],[\"ratio\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"rasterizerspan\",{\"1\":{\"1310\":1}}],[\"ram\",{\"1\":{\"631\":1}}],[\"ranges\",{\"1\":{\"1521\":1,\"1555\":1}}],[\"range\",{\"1\":{\"651\":4,\"979\":1,\"1009\":1,\"1015\":1,\"1016\":1,\"1030\":2,\"1036\":3,\"1044\":1,\"1102\":1,\"1109\":2,\"1518\":1}}],[\"rangecheck\",{\"1\":{\"333\":1}}],[\"random\",{\"1\":{\"441\":1,\"1583\":1}}],[\"randomaccess\",{\"1\":{\"331\":2}}],[\"rabbitmq\",{\"1\":{\"12\":1,\"731\":1}}],[\"rightresult\",{\"1\":{\"897\":2}}],[\"righttask\",{\"1\":{\"897\":3}}],[\"rightcommand\",{\"1\":{\"489\":13}}],[\"right\",{\"1\":{\"279\":4,\"283\":5,\"1402\":6,\"1685\":6}}],[\"r\",{\"1\":{\"70\":1,\"73\":1,\"644\":2,\"820\":1,\"880\":3,\"886\":3,\"938\":4,\"1101\":3,\"1292\":33,\"1305\":3,\"1320\":1,\"1521\":2,\"1598\":1,\"1601\":3,\"1604\":3,\"1610\":8,\"1645\":1,\"1736\":3,\"1789\":5,\"1867\":1}}],[\"r8\",{\"1\":{\"52\":1}}],[\"rules\",{\"1\":{\"1361\":1}}],[\"ruanyifeng\",{\"1\":{\"314\":1}}],[\"runonce\",{\"1\":{\"1863\":2,\"1869\":2}}],[\"runobj\",{\"1\":{\"1527\":2}}],[\"runselectloop\",{\"1\":{\"1862\":1,\"1863\":1}}],[\"runmainapp\",{\"1\":{\"1474\":1}}],[\"run运行机制\",{\"1\":{\"1432\":1}}],[\"runalone\",{\"1\":{\"1474\":1,\"1475\":1}}],[\"runapp\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"runable有返回值\",{\"1\":{\"926\":1}}],[\"run2\",{\"1\":{\"823\":2}}],[\"run1\",{\"1\":{\"823\":2}}],[\"runner\",{\"1\":{\"867\":1,\"869\":1}}],[\"running\",{\"1\":{\"694\":1,\"711\":3,\"917\":3,\"943\":1,\"1230\":1,\"1534\":1}}],[\"runnable>\",{\"1\":{\"917\":3,\"950\":3}}],[\"runnable\",{\"1\":{\"154\":1,\"822\":1,\"823\":4,\"867\":4,\"868\":1,\"869\":1,\"870\":2,\"904\":2,\"905\":3,\"907\":1,\"908\":2,\"917\":2,\"923\":1,\"938\":4,\"943\":1,\"945\":1,\"950\":1,\"958\":1,\"995\":2,\"1230\":1,\"1527\":2,\"1546\":1,\"1866\":1,\"1867\":1}}],[\"runtimeinit启动\",{\"1\":{\"1866\":1}}],[\"runtimeinit\",{\"1\":{\"1860\":1,\"1866\":3,\"1870\":1}}],[\"runtimeexception\",{\"1\":{\"1035\":1,\"1598\":1,\"1840\":1,\"1865\":1,\"1867\":1,\"1869\":1}}],[\"runtime\",{\"1\":{\"248\":1,\"358\":1,\"828\":1,\"1592\":1,\"1604\":1,\"1860\":4,\"1865\":1}}],[\"run\",{\"1\":{\"49\":1,\"94\":2,\"154\":1,\"271\":2,\"631\":2,\"694\":2,\"822\":2,\"823\":2,\"867\":4,\"868\":1,\"869\":1,\"870\":2,\"884\":1,\"904\":2,\"905\":3,\"907\":1,\"908\":2,\"917\":2,\"923\":1,\"926\":1,\"938\":1,\"945\":1,\"950\":2,\"958\":1,\"986\":1,\"995\":3,\"997\":2,\"1010\":1,\"1017\":2,\"1024\":4,\"1030\":1,\"1037\":3,\"1044\":1,\"1056\":3,\"1070\":3,\"1086\":1,\"1088\":1,\"1103\":1,\"1317\":1,\"1413\":3,\"1546\":1,\"1839\":1,\"1842\":2,\"1862\":1,\"1866\":2,\"1867\":3}}],[\"ruoyi\",{\"1\":{\"9\":1,\"12\":90,\"15\":2,\"645\":2,\"650\":2,\"728\":1,\"731\":90,\"734\":2}}],[\"ruo\",{\"1\":{\"8\":1,\"9\":1,\"727\":1,\"728\":1}}],[\"rmdir\",{\"1\":{\"465\":3}}],[\"rm\",{\"1\":{\"16\":2,\"1917\":1,\"1945\":1,\"1950\":1,\"1961\":1,\"1974\":1}}],[\"rsa4096\",{\"1\":{\"1928\":2}}],[\"rsa\",{\"1\":{\"12\":1,\"638\":1,\"731\":1,\"1921\":4,\"1922\":3,\"1923\":1,\"1943\":3}}],[\"rpc数据\",{\"1\":{\"1767\":1}}],[\"rpc+依赖注入+spi+javassit\",{\"1\":{\"1482\":1}}],[\"rpc建议专门一个库实现\",{\"1\":{\"1481\":1}}],[\"rpc\",{\"1\":{\"12\":1,\"731\":1,\"1494\":1}}],[\"rpc远程调用\",{\"1\":{\"12\":1,\"731\":1}}],[\"rpc插件\",{\"1\":{\"12\":2,\"731\":2}}],[\"rebuildepolllocked\",{\"1\":{\"1828\":1,\"1829\":2}}],[\"rename\",{\"1\":{\"1488\":1}}],[\"renderer代码中\",{\"1\":{\"1540\":1}}],[\"renderer\",{\"1\":{\"1540\":2}}],[\"renderpriority\",{\"1\":{\"1416\":1}}],[\"render\",{\"1\":{\"631\":1}}],[\"redux这个框架本意复用mvp中的p\",{\"1\":{\"1386\":1,\"1669\":1}}],[\"redux\",{\"0\":{\"1386\":1,\"1669\":1},\"1\":{\"1386\":2,\"1399\":2,\"1669\":2,\"1682\":2}}],[\"red\",{\"1\":{\"1305\":1,\"1518\":2}}],[\"redirect\",{\"1\":{\"666\":3,\"667\":1,\"668\":5}}],[\"redis官方推荐\",{\"1\":{\"12\":1,\"731\":1}}],[\"redis客户端\",{\"1\":{\"12\":1,\"731\":1}}],[\"redisson\",{\"1\":{\"12\":2,\"731\":2}}],[\"redis\",{\"1\":{\"12\":3,\"613\":1,\"707\":7,\"731\":3}}],[\"regex\",{\"1\":{\"1534\":2}}],[\"regiontv\",{\"1\":{\"1364\":1}}],[\"registry\",{\"1\":{\"650\":2,\"1022\":3,\"1413\":4}}],[\"registerzygotesocket\",{\"1\":{\"1862\":1}}],[\"registerextensions\",{\"1\":{\"1798\":1}}],[\"registered或者binder\",{\"1\":{\"1780\":1}}],[\"registered\",{\"1\":{\"1770\":1}}],[\"register后\",{\"1\":{\"1546\":1}}],[\"register消费者注册列表\",{\"1\":{\"1546\":1}}],[\"register+自己造轮子补充\",{\"1\":{\"1479\":1,\"1483\":1}}],[\"registerfragmentcallbacks\",{\"1\":{\"1295\":1}}],[\"registernatives\",{\"1\":{\"993\":1,\"1022\":2,\"1042\":1}}],[\"registercorsconfiguration\",{\"1\":{\"650\":1}}],[\"register\",{\"0\":{\"1644\":1},\"1\":{\"519\":5,\"1022\":1,\"1023\":3,\"1030\":5,\"1036\":1,\"1479\":1,\"1481\":1,\"1494\":1,\"1546\":1,\"1644\":1,\"1770\":1,\"1772\":1,\"1778\":2,\"1779\":1,\"1780\":1,\"1790\":1}}],[\"registerservice\",{\"1\":{\"405\":1}}],[\"regular\",{\"1\":{\"1289\":1,\"1534\":3,\"1567\":2}}],[\"revert\",{\"1\":{\"1955\":1}}],[\"revertnextpc\",{\"1\":{\"984\":2,\"993\":1,\"1003\":2}}],[\"reverse\",{\"1\":{\"884\":1,\"1712\":1}}],[\"rejectedexecution\",{\"1\":{\"913\":1}}],[\"rejectedexecutionhandler\",{\"1\":{\"246\":1,\"914\":1}}],[\"reinterpret\",{\"1\":{\"1717\":1,\"1798\":2,\"1829\":1}}],[\"reinterrupt\",{\"1\":{\"896\":1}}],[\"reilly\",{\"1\":{\"310\":1}}],[\"reentrantdata\",{\"1\":{\"932\":1}}],[\"reentrant\",{\"1\":{\"886\":1}}],[\"reentrantreadwritelock\",{\"0\":{\"885\":1},\"1\":{\"885\":2,\"887\":2,\"932\":2}}],[\"reentrantlock\",{\"0\":{\"881\":1},\"1\":{\"342\":1,\"358\":2,\"360\":1,\"874\":1,\"884\":1,\"889\":1,\"1238\":1}}],[\"reminderagentmanager\",{\"1\":{\"1712\":1}}],[\"remain\",{\"1\":{\"950\":1,\"958\":1}}],[\"remainingargs\",{\"1\":{\"1866\":1}}],[\"remaining\",{\"1\":{\"870\":4,\"949\":4,\"950\":3,\"958\":3}}],[\"remount\",{\"1\":{\"1728\":1,\"1733\":1}}],[\"removecallbacksandmessages\",{\"1\":{\"1851\":1}}],[\"removechild\",{\"1\":{\"1392\":3,\"1675\":3}}],[\"removesyncbarrier\",{\"1\":{\"1849\":1}}],[\"removefd\",{\"1\":{\"1828\":1}}],[\"removefirst\",{\"1\":{\"917\":1}}],[\"removeat\",{\"1\":{\"1828\":1}}],[\"removeactivity\",{\"1\":{\"1468\":1}}],[\"removeview\",{\"1\":{\"1416\":1}}],[\"removejavascriptinterface\",{\"1\":{\"1416\":1}}],[\"removework\",{\"1\":{\"950\":1}}],[\"removeworker\",{\"1\":{\"917\":2,\"950\":1}}],[\"removenode\",{\"1\":{\"364\":1}}],[\"removeeldestentry\",{\"1\":{\"364\":4,\"365\":2}}],[\"remove\",{\"1\":{\"333\":1,\"364\":1,\"381\":4,\"385\":3,\"465\":1,\"631\":1,\"701\":1,\"917\":1,\"950\":1,\"1197\":1,\"1846\":1}}],[\"removed\",{\"1\":{\"73\":1,\"895\":1}}],[\"remoteservice\",{\"1\":{\"1736\":1,\"1737\":7}}],[\"remoteexception\",{\"1\":{\"1731\":2,\"1732\":2,\"1736\":2,\"1737\":3,\"1739\":5,\"1756\":2,\"1762\":1}}],[\"remote\",{\"0\":{\"1917\":1},\"1\":{\"16\":1,\"79\":6,\"631\":1,\"1727\":1,\"1731\":2,\"1737\":1,\"1739\":2,\"1756\":2,\"1798\":2,\"1799\":1,\"1917\":1,\"1944\":1,\"1945\":2,\"1950\":3,\"1961\":1}}],[\"required\",{\"1\":{\"1338\":1,\"1383\":2,\"1392\":2,\"1402\":13,\"1435\":1,\"1534\":1,\"1648\":1,\"1666\":2,\"1675\":2,\"1685\":13}}],[\"require\",{\"1\":{\"667\":1}}],[\"requestindex\",{\"1\":{\"1828\":3}}],[\"requestdeathnotification过程向驱动传递的命令bc\",{\"1\":{\"1761\":1}}],[\"requestmethod\",{\"1\":{\"1712\":1}}],[\"requestfactoryfield\",{\"1\":{\"1592\":3}}],[\"requestfactory\",{\"1\":{\"1592\":5}}],[\"requestcode\",{\"1\":{\"1416\":3,\"1417\":2}}],[\"requestrefresh\",{\"1\":{\"1383\":2,\"1666\":2}}],[\"requestbodystring\",{\"1\":{\"1332\":7}}],[\"requestbody\",{\"1\":{\"1332\":12}}],[\"requestbuilder\",{\"1\":{\"1332\":8}}],[\"requestpermission\",{\"1\":{\"537\":6}}],[\"requests\",{\"0\":{\"88\":1},\"1\":{\"88\":1}}],[\"request\",{\"0\":{\"70\":1},\"1\":{\"70\":1,\"422\":12,\"938\":2,\"1332\":16,\"1416\":1,\"1713\":1,\"1761\":1,\"1770\":1,\"1790\":1,\"1824\":1,\"1828\":6,\"1829\":4,\"1831\":3}}],[\"requested\",{\"0\":{\"28\":1,\"64\":1},\"1\":{\"28\":1,\"651\":2,\"652\":1}}],[\"req\",{\"1\":{\"652\":2}}],[\"rewrite\",{\"1\":{\"638\":1,\"1383\":1,\"1666\":1}}],[\"rehash\",{\"1\":{\"631\":1}}],[\"relativeurlfield\",{\"1\":{\"1592\":6}}],[\"relativeurl\",{\"1\":{\"1592\":13}}],[\"relativesizespan\",{\"1\":{\"1310\":1}}],[\"relinker\",{\"1\":{\"1317\":1}}],[\"rel\",{\"1\":{\"1298\":1}}],[\"reloadbuilder\",{\"1\":{\"1332\":2}}],[\"reload\",{\"1\":{\"614\":1,\"622\":1,\"630\":1}}],[\"release方法\",{\"1\":{\"1786\":1}}],[\"release过程会执行binder\",{\"1\":{\"1761\":1}}],[\"release包失效原理\",{\"1\":{\"1595\":1}}],[\"release包失效\",{\"1\":{\"1595\":1}}],[\"release版有注解的空实现\",{\"1\":{\"1589\":1}}],[\"releaseprimitivearraycritical\",{\"1\":{\"1530\":1}}],[\"releasecomponent=\",{\"1\":{\"1476\":2}}],[\"releaseimplementation\",{\"1\":{\"1329\":1,\"1589\":1,\"1595\":1}}],[\"releaseshared\",{\"1\":{\"880\":2}}],[\"releases\",{\"1\":{\"876\":1,\"882\":2}}],[\"releases<\",{\"1\":{\"608\":1}}],[\"release\",{\"1\":{\"608\":1,\"876\":1,\"879\":1,\"907\":1,\"1298\":5,\"1317\":1,\"1335\":4,\"1534\":1,\"1613\":1,\"1702\":1,\"1761\":1,\"1770\":1,\"1772\":2,\"1786\":1,\"1789\":1,\"1933\":1}}],[\"relevant\",{\"1\":{\"583\":1}}],[\"recipient\",{\"1\":{\"1762\":7}}],[\"rectangle\",{\"1\":{\"1518\":2}}],[\"recursivetask<integer>\",{\"1\":{\"897\":1}}],[\"recommended\",{\"1\":{\"631\":1}}],[\"record指针\",{\"1\":{\"1248\":1}}],[\"record\",{\"1\":{\"1248\":1}}],[\"records\",{\"1\":{\"615\":1}}],[\"recordaccess\",{\"1\":{\"350\":2}}],[\"receiveeventmain\",{\"1\":{\"1645\":1}}],[\"receive\",{\"0\":{\"1645\":1},\"1\":{\"489\":36,\"870\":6,\"1645\":1}}],[\"recycled\",{\"1\":{\"1850\":1}}],[\"recycleunchecked\",{\"1\":{\"1843\":1,\"1849\":1,\"1850\":2}}],[\"recyclerview\",{\"1\":{\"1567\":1}}],[\"recycleview优化\",{\"0\":{\"178\":1}}],[\"recycle\",{\"1\":{\"70\":1,\"1731\":2,\"1739\":4,\"1756\":2,\"1847\":1,\"1850\":1}}],[\"ret\",{\"1\":{\"1770\":2,\"1772\":3}}],[\"retentionpolicy\",{\"1\":{\"1361\":1,\"1374\":1,\"1592\":1}}],[\"retention\",{\"1\":{\"1361\":1,\"1374\":1,\"1592\":1,\"1604\":1}}],[\"retval\",{\"1\":{\"993\":4}}],[\"retrofiit已经封装在底层了\",{\"1\":{\"1587\":1}}],[\"retrofit作为网络核心框架\",{\"1\":{\"1595\":1}}],[\"retrofit核心代码\",{\"1\":{\"1592\":1}}],[\"retrofit2\",{\"1\":{\"1589\":2,\"1595\":1}}],[\"retrofitmock\",{\"0\":{\"1589\":1},\"1\":{\"1589\":6,\"1592\":1,\"1595\":3}}],[\"retrofit用法\",{\"1\":{\"259\":1}}],[\"retrofit写法\",{\"1\":{\"259\":1}}],[\"retrofit使用动态代理提升扩展性\",{\"1\":{\"258\":1}}],[\"retrofit\",{\"0\":{\"1586\":1,\"1587\":1,\"1592\":1,\"1595\":1},\"1\":{\"227\":1,\"1586\":3,\"1587\":1,\"1589\":10,\"1592\":17,\"1595\":11,\"1911\":1}}],[\"retry\",{\"1\":{\"359\":1,\"1827\":1,\"1828\":1,\"1857\":1}}],[\"retries++\",{\"1\":{\"359\":1}}],[\"retries\",{\"1\":{\"358\":1,\"359\":9}}],[\"returns\",{\"1\":{\"1601\":1,\"1604\":1}}],[\"returnaddress类型的值\",{\"1\":{\"1182\":1}}],[\"returntype\",{\"1\":{\"1022\":3}}],[\"return\",{\"1\":{\"197\":1,\"247\":4,\"259\":9,\"278\":1,\"279\":2,\"280\":1,\"281\":1,\"283\":2,\"284\":2,\"285\":4,\"332\":1,\"333\":1,\"337\":2,\"342\":2,\"348\":8,\"350\":5,\"351\":4,\"352\":1,\"354\":1,\"359\":1,\"364\":1,\"365\":1,\"368\":1,\"381\":5,\"404\":1,\"405\":4,\"409\":3,\"415\":2,\"416\":1,\"422\":4,\"428\":3,\"435\":4,\"441\":2,\"447\":3,\"459\":2,\"465\":2,\"477\":2,\"495\":4,\"501\":1,\"513\":4,\"525\":5,\"531\":3,\"537\":8,\"543\":5,\"650\":1,\"651\":1,\"667\":3,\"828\":4,\"863\":1,\"864\":1,\"870\":2,\"876\":8,\"879\":6,\"880\":9,\"882\":4,\"883\":3,\"884\":1,\"885\":2,\"886\":7,\"895\":3,\"897\":1,\"900\":6,\"917\":5,\"920\":1,\"926\":2,\"929\":1,\"932\":4,\"950\":5,\"958\":3,\"978\":3,\"979\":4,\"984\":4,\"992\":1,\"993\":1,\"997\":2,\"998\":1,\"1002\":1,\"1003\":1,\"1009\":25,\"1015\":6,\"1016\":1,\"1022\":5,\"1030\":3,\"1036\":16,\"1044\":3,\"1055\":1,\"1063\":7,\"1064\":5,\"1078\":2,\"1081\":1,\"1101\":1,\"1102\":2,\"1109\":7,\"1110\":6,\"1175\":1,\"1203\":2,\"1239\":1,\"1277\":1,\"1295\":1,\"1305\":1,\"1312\":1,\"1313\":3,\"1326\":4,\"1329\":2,\"1332\":16,\"1349\":1,\"1352\":1,\"1358\":5,\"1364\":4,\"1374\":2,\"1383\":6,\"1392\":4,\"1402\":31,\"1416\":2,\"1417\":1,\"1456\":1,\"1474\":1,\"1488\":1,\"1518\":15,\"1521\":1,\"1530\":1,\"1534\":1,\"1546\":3,\"1552\":3,\"1555\":4,\"1589\":4,\"1592\":10,\"1598\":8,\"1604\":9,\"1613\":5,\"1626\":2,\"1660\":1,\"1666\":6,\"1675\":4,\"1685\":31,\"1717\":3,\"1725\":1,\"1726\":1,\"1727\":2,\"1731\":2,\"1732\":7,\"1736\":1,\"1737\":5,\"1738\":6,\"1739\":13,\"1756\":16,\"1762\":2,\"1768\":1,\"1770\":2,\"1772\":1,\"1778\":2,\"1788\":2,\"1789\":2,\"1790\":8,\"1798\":2,\"1799\":4,\"1805\":5,\"1806\":2,\"1826\":1,\"1828\":1,\"1829\":1,\"1841\":1,\"1842\":1,\"1843\":1,\"1846\":3,\"1847\":2,\"1849\":2,\"1850\":3,\"1851\":1,\"1857\":1,\"1861\":2,\"1863\":1,\"1865\":1}}],[\"ref对象\",{\"1\":{\"1799\":1}}],[\"ref结构体添加binder\",{\"1\":{\"1761\":1}}],[\"ref再找到目标binder\",{\"1\":{\"1754\":1}}],[\"refbase\",{\"1\":{\"1717\":1,\"1831\":2,\"1832\":1}}],[\"refreshfailed\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"refreshidle\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"refreshstatus\",{\"1\":{\"1383\":5,\"1666\":5}}],[\"refreshcompleted\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"refreshcontroller\",{\"1\":{\"1383\":9,\"1666\":9}}],[\"refreshrequest\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"refresh\",{\"1\":{\"1383\":2,\"1666\":2}}],[\"refresh编写列表页面\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"refinfo\",{\"1\":{\"1110\":3}}],[\"reflect包进行反射时\",{\"1\":{\"1169\":1}}],[\"reflect\",{\"1\":{\"1030\":3,\"1036\":1,\"1866\":1}}],[\"reflection\",{\"1\":{\"1015\":1}}],[\"refs\",{\"1\":{\"1009\":8,\"1016\":1,\"1044\":1,\"1717\":1}}],[\"ref\",{\"1\":{\"853\":4,\"984\":14,\"993\":6,\"1009\":2,\"1015\":4,\"1110\":4,\"1169\":2,\"1690\":1,\"1754\":1,\"1761\":2}}],[\"refactor\",{\"2\":{\"557\":1}}],[\"referent\",{\"1\":{\"154\":4}}],[\"reference中存储的是对象的地址\",{\"1\":{\"1118\":1}}],[\"reference中存储的是对象的句柄\",{\"1\":{\"1118\":1}}],[\"references\",{\"1\":{\"614\":1,\"622\":1,\"630\":1}}],[\"referencequeue\",{\"1\":{\"154\":3}}],[\"referencequeue<string>\",{\"1\":{\"154\":2}}],[\"reference\",{\"1\":{\"154\":2,\"1182\":1}}],[\"refused\",{\"0\":{\"40\":1},\"1\":{\"40\":1}}],[\"repeat\",{\"1\":{\"711\":1,\"1521\":1}}],[\"replyto\",{\"1\":{\"1850\":1}}],[\"reply命令\",{\"1\":{\"1796\":1}}],[\"reply对象不为空\",{\"1\":{\"1756\":1}}],[\"replyobj\",{\"1\":{\"1756\":2}}],[\"reply\",{\"1\":{\"1717\":1,\"1727\":7,\"1731\":4,\"1732\":4,\"1737\":2,\"1739\":20,\"1755\":3,\"1756\":17,\"1770\":3,\"1776\":1,\"1780\":1,\"1789\":8,\"1796\":1,\"1798\":9,\"1799\":3}}],[\"replugin项目集成与使用\",{\"1\":{\"1426\":1}}],[\"replaceurl\",{\"1\":{\"1708\":1}}],[\"replace函数\",{\"1\":{\"1335\":1}}],[\"replace\",{\"1\":{\"667\":4,\"985\":1,\"996\":1,\"1044\":1,\"1064\":1,\"1102\":1,\"1534\":2}}],[\"replaced\",{\"0\":{\"91\":1}}],[\"repl\",{\"1\":{\"614\":2,\"622\":2,\"630\":2}}],[\"reporting\",{\"1\":{\"1292\":1}}],[\"reportinterruptafterwait\",{\"1\":{\"896\":1}}],[\"repository>\",{\"1\":{\"608\":1}}],[\"repository\",{\"1\":{\"608\":2,\"1966\":1}}],[\"repositories\",{\"1\":{\"100\":1,\"1289\":1,\"1292\":1,\"1304\":1,\"1491\":1,\"1558\":1,\"1595\":1,\"1641\":2,\"1905\":1,\"1911\":2,\"1966\":4}}],[\"repo\",{\"1\":{\"79\":6,\"608\":2,\"1960\":2}}],[\"realdata\",{\"1\":{\"926\":10}}],[\"realization\",{\"1\":{\"735\":2}}],[\"real\",{\"1\":{\"638\":1,\"1534\":1}}],[\"readbuf\",{\"1\":{\"1789\":6}}],[\"read的过程中\",{\"1\":{\"1776\":1}}],[\"read的wait\",{\"1\":{\"1755\":1}}],[\"readfromparcel\",{\"1\":{\"1738\":2,\"1756\":1}}],[\"readexceptioncode\",{\"1\":{\"1798\":1}}],[\"readexception\",{\"1\":{\"1731\":1,\"1739\":2,\"1756\":1}}],[\"reader\",{\"1\":{\"994\":5,\"1077\":2,\"1078\":3,\"1079\":1,\"1081\":11,\"1094\":4,\"1101\":5,\"1521\":2}}],[\"readershouldblock\",{\"1\":{\"886\":1}}],[\"readline\",{\"1\":{\"1521\":1}}],[\"readlock\",{\"1\":{\"885\":1,\"887\":4,\"932\":5}}],[\"readnum\",{\"1\":{\"1521\":1}}],[\"readme\",{\"1\":{\"1399\":1,\"1682\":1,\"1944\":2}}],[\"readmembers\",{\"1\":{\"1081\":2}}],[\"readargumentlist\",{\"1\":{\"1863\":1}}],[\"readassets\",{\"1\":{\"1592\":1}}],[\"readattributes\",{\"1\":{\"1081\":1}}],[\"readandcheckversion\",{\"1\":{\"1078\":1,\"1081\":1}}],[\"readandcheckmagic\",{\"1\":{\"1077\":1,\"1081\":1}}],[\"readconstantpool\",{\"1\":{\"1081\":1}}],[\"readclass\",{\"1\":{\"979\":4,\"1063\":4,\"1064\":2}}],[\"readinfo\",{\"1\":{\"1079\":1}}],[\"readint32\",{\"1\":{\"1727\":1,\"1798\":1}}],[\"readint16\",{\"1\":{\"1094\":1}}],[\"readint\",{\"1\":{\"334\":1,\"1738\":2,\"1739\":2}}],[\"readutf8\",{\"1\":{\"1332\":1}}],[\"readuint16s\",{\"1\":{\"1081\":1}}],[\"readuint16\",{\"1\":{\"1078\":2,\"1081\":3}}],[\"readuint32\",{\"1\":{\"1077\":1}}],[\"readuint8\",{\"1\":{\"994\":1,\"1101\":1}}],[\"readunlock\",{\"1\":{\"932\":1}}],[\"readwritelock\",{\"1\":{\"932\":3}}],[\"readwritelockdemo\",{\"1\":{\"885\":1}}],[\"readystatesoftware\",{\"1\":{\"1329\":2}}],[\"ready\",{\"1\":{\"926\":3,\"943\":1,\"1230\":1,\"1867\":3}}],[\"readholds\",{\"1\":{\"886\":2}}],[\"readstrongbinder\",{\"1\":{\"1799\":1}}],[\"readstring\",{\"1\":{\"1732\":1}}],[\"reads\",{\"1\":{\"359\":1}}],[\"readobject\",{\"1\":{\"334\":4}}],[\"read\",{\"0\":{\"76\":1,\"932\":1,\"1780\":1},\"1\":{\"334\":3,\"631\":2,\"870\":4,\"932\":2,\"1081\":2,\"1220\":2,\"1416\":1,\"1417\":1,\"1761\":1,\"1768\":1,\"1770\":2,\"1789\":6,\"1798\":1,\"1828\":1}}],[\"react文档\",{\"0\":{\"1651\":1}}],[\"reactnative\",{\"1\":{\"305\":1,\"1413\":1}}],[\"react\",{\"0\":{\"1413\":1,\"1998\":1},\"1\":{\"52\":2,\"1413\":5}}],[\"resconfigs\",{\"1\":{\"1317\":1}}],[\"resguarduseapk\",{\"1\":{\"1292\":1}}],[\"resguardrelease\",{\"1\":{\"1292\":1}}],[\"resguarddebug\",{\"1\":{\"1292\":1}}],[\"reset\",{\"1\":{\"994\":1,\"1101\":1,\"1951\":2,\"1955\":1}}],[\"reset重置次数\",{\"1\":{\"905\":1}}],[\"res\",{\"1\":{\"652\":5,\"1289\":4,\"1295\":4,\"1346\":2,\"1475\":4,\"1756\":2,\"1789\":9}}],[\"restmockserver\",{\"1\":{\"1558\":1}}],[\"restmock\",{\"0\":{\"1558\":1},\"1\":{\"1558\":2}}],[\"restartfromhead\",{\"1\":{\"895\":2}}],[\"restart\",{\"1\":{\"613\":1,\"628\":1,\"639\":1,\"696\":1,\"711\":6,\"1787\":5,\"1857\":1}}],[\"restorecallingidentity\",{\"1\":{\"1717\":3}}],[\"restore\",{\"1\":{\"495\":2}}],[\"restful\",{\"1\":{\"12\":1,\"314\":2,\"731\":1}}],[\"resourcemanagerservice\",{\"1\":{\"1798\":1}}],[\"resourcepattern\",{\"1\":{\"1289\":1}}],[\"resourcedir\",{\"1\":{\"1289\":1}}],[\"resource\",{\"1\":{\"649\":1,\"1292\":1,\"1518\":1,\"1534\":1,\"1707\":1,\"1708\":2,\"1711\":1}}],[\"resourcesconfig\",{\"1\":{\"650\":1}}],[\"resources\",{\"1\":{\"631\":1,\"1292\":2,\"1295\":2,\"1555\":1}}],[\"resort\",{\"1\":{\"359\":1}}],[\"resorting\",{\"1\":{\"359\":1}}],[\"resolveactivity\",{\"1\":{\"1358\":1}}],[\"resolvemethod\",{\"1\":{\"993\":8}}],[\"resolvedtype\",{\"1\":{\"1756\":2}}],[\"resolvedinterfacemethod\",{\"1\":{\"993\":1}}],[\"resolvedmethod\",{\"1\":{\"993\":4}}],[\"resolvedfield\",{\"1\":{\"984\":2}}],[\"resolvedclass\",{\"1\":{\"984\":3,\"993\":5,\"1036\":1,\"1110\":1}}],[\"resolveinterfaces\",{\"1\":{\"979\":2}}],[\"resolvesuperclass\",{\"1\":{\"979\":2}}],[\"resolveclassref\",{\"1\":{\"1110\":2}}],[\"resolveclass\",{\"1\":{\"197\":1,\"1175\":1}}],[\"resolve\",{\"0\":{\"100\":1},\"1\":{\"197\":2,\"1175\":2}}],[\"resolutionstrategy\",{\"1\":{\"55\":1,\"1329\":1}}],[\"resize\",{\"1\":{\"350\":1,\"352\":3}}],[\"resumetopactivitieslocked\",{\"1\":{\"1867\":1}}],[\"resume\",{\"1\":{\"945\":1,\"1236\":1}}],[\"results\",{\"1\":{\"1417\":3}}],[\"resultcode\",{\"1\":{\"1416\":3,\"1417\":7}}],[\"resultmsg\",{\"1\":{\"1416\":3}}],[\"result\",{\"1\":{\"154\":4,\"259\":2,\"359\":1,\"381\":2,\"447\":2,\"897\":2,\"1095\":2,\"1417\":7,\"1534\":2,\"1711\":1,\"1713\":1,\"1717\":1,\"1739\":12,\"1755\":1,\"1778\":11,\"1798\":1,\"1828\":6,\"1829\":1}}],[\"resultreceiver$1\",{\"1\":{\"115\":1}}],[\"resu\",{\"1\":{\"115\":1}}],[\"responsecode\",{\"1\":{\"1712\":2}}],[\"responsebody\",{\"1\":{\"1592\":1}}],[\"responseobj\",{\"1\":{\"1592\":2}}],[\"response\",{\"1\":{\"1323\":1,\"1332\":1,\"1335\":5,\"1459\":1,\"1828\":9,\"1831\":1}}],[\"response=$\",{\"1\":{\"1323\":1,\"1335\":2,\"1459\":1}}],[\"resp\",{\"1\":{\"12\":2,\"731\":2}}],[\"开头是注释或者当前行配置失效\",{\"1\":{\"1952\":1}}],[\"开头\",{\"1\":{\"1530\":1,\"1768\":2}}],[\"开源工具\",{\"2\":{\"1630\":1}}],[\"开源代码示例\",{\"1\":{\"1534\":1}}],[\"开源demo\",{\"1\":{\"1530\":1}}],[\"开源项目\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"开户协议\",{\"1\":{\"1307\":1}}],[\"开门\",{\"1\":{\"905\":1}}],[\"开放式测试版本发布后\",{\"1\":{\"1708\":1}}],[\"开放==开发\",{\"1\":{\"750\":1}}],[\"开放端口\",{\"0\":{\"662\":1,\"720\":1,\"723\":1},\"1\":{\"720\":1}}],[\"开闭原则\",{\"0\":{\"752\":1},\"1\":{\"750\":1}}],[\"开机自启\",{\"1\":{\"684\":1}}],[\"开机\",{\"1\":{\"501\":2,\"507\":1}}],[\"开启minifyenabled混淆代码\",{\"1\":{\"1317\":1}}],[\"开启防火墙\",{\"1\":{\"661\":1,\"722\":1}}],[\"开启电源\",{\"1\":{\"501\":1}}],[\"开启\",{\"1\":{\"365\":1}}],[\"开始支持的后台代理提醒功能模块\",{\"1\":{\"1712\":1}}],[\"开始执行动画等场景\",{\"1\":{\"1702\":1}}],[\"开始初始化的时给属性赋值个默认值\",{\"1\":{\"1524\":1}}],[\"开始\",{\"1\":{\"355\":1,\"608\":1}}],[\"开始签名使用v2签名\",{\"1\":{\"103\":1}}],[\"开始签名\",{\"1\":{\"103\":1}}],[\"开始产品运营探索\",{\"1\":{\"6\":1}}],[\"开发者信息\",{\"1\":{\"1905\":1}}],[\"开发者可以直接调用\",{\"1\":{\"1709\":1}}],[\"开发者在\",{\"1\":{\"1708\":1,\"1712\":1}}],[\"开发者需要精通前端\",{\"1\":{\"1707\":1,\"1711\":1}}],[\"开发者需要自行实现以下哪些功能\",{\"1\":{\"1702\":1}}],[\"开发者想要使用\",{\"1\":{\"1702\":1}}],[\"开发者用户还需要反复看源代码\",{\"1\":{\"1480\":1}}],[\"开发范式和基于\",{\"1\":{\"1702\":1}}],[\"开发范式的自定义组件中\",{\"1\":{\"1702\":1}}],[\"开发范式的绘图组件\",{\"1\":{\"1702\":1}}],[\"开发范式自定义组件的生命周期回调方法中\",{\"1\":{\"1702\":1}}],[\"开发范式中的自定义组件绑定子组件事件使用的是以下哪几种语法\",{\"1\":{\"1702\":1}}],[\"开发范式中的自定义组件使用以下哪个标签引入到宿主页面\",{\"1\":{\"1702\":1}}],[\"开发范式中的自定义组件引入到宿主页面时\",{\"1\":{\"1702\":3}}],[\"开发速度快\",{\"1\":{\"1512\":1}}],[\"开发flutter布局\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"开发人员自定义client\",{\"1\":{\"1744\":1}}],[\"开发人员短视\",{\"1\":{\"1268\":1}}],[\"开发人员不知道重构这项技术\",{\"1\":{\"1268\":1}}],[\"开发人员不愿意重构的现实原因\",{\"1\":{\"1268\":1}}],[\"开发人员关注的发送邮件或从邮件服务器获得邮件列表\",{\"1\":{\"793\":1}}],[\"开发api过程其实就是一个沟通交流的过程\",{\"1\":{\"796\":1}}],[\"开发api\",{\"1\":{\"772\":1}}],[\"开发同学元超和云飞带头加班\",{\"1\":{\"595\":1}}],[\"开发全员996为测试留出充分时间\",{\"1\":{\"595\":1}}],[\"开发\",{\"1\":{\"586\":1,\"1429\":1,\"1441\":1}}],[\"开发调试\",{\"1\":{\"559\":1}}],[\"开发难度相对较高\",{\"1\":{\"313\":1}}],[\"开发难度低\",{\"1\":{\"12\":1,\"731\":1}}],[\"开发一个插件即可\",{\"1\":{\"313\":1}}],[\"开发相对复杂\",{\"1\":{\"312\":1}}],[\"开发信息数据收集\",{\"1\":{\"305\":1}}],[\"开发中避免本moudle引入过多其他module声明\",{\"1\":{\"1491\":1}}],[\"开发中\",{\"1\":{\"12\":3,\"731\":3}}],[\"bwr\",{\"1\":{\"1789\":9}}],[\"bs\",{\"1\":{\"1788\":4,\"1789\":8,\"1790\":5}}],[\"bc码\",{\"1\":{\"1770\":1}}],[\"bc\",{\"1\":{\"1756\":1,\"1768\":1,\"1770\":16,\"1778\":3,\"1789\":1,\"1796\":1}}],[\"bninterface<imyservice>\",{\"1\":{\"1727\":1}}],[\"bnmyservice\",{\"1\":{\"1725\":1,\"1727\":6}}],[\"bpservicemanager巧妙将通信层与业务层逻辑合为一体\",{\"1\":{\"1804\":1}}],[\"bpservicemanager\",{\"1\":{\"1804\":1,\"1806\":1}}],[\"bpinterface\",{\"1\":{\"1800\":1}}],[\"bpinterface<imyservice>\",{\"1\":{\"1727\":2}}],[\"bp端只需要覆写binderdied\",{\"1\":{\"1761\":1}}],[\"bpbinder通过handler来指向所对应bbinder\",{\"1\":{\"1804\":1}}],[\"bpbinder发送端\",{\"1\":{\"1754\":1}}],[\"bpbinder\",{\"1\":{\"1745\":1,\"1746\":1,\"1756\":2,\"1763\":1,\"1800\":1,\"1804\":2,\"1807\":1}}],[\"bpmyservice\",{\"1\":{\"1727\":6}}],[\"bbinder\",{\"1\":{\"1717\":1,\"1745\":1}}],[\"bbj测试报告民生审核通过\",{\"1\":{\"595\":1}}],[\"bf\",{\"1\":{\"1367\":1}}],[\"bff\",{\"1\":{\"305\":1}}],[\"bd\",{\"1\":{\"1367\":1,\"1583\":1}}],[\"bdcce32c05dd\",{\"1\":{\"580\":1,\"1555\":1}}],[\"b8\",{\"1\":{\"1367\":1}}],[\"b5\",{\"1\":{\"1367\":1,\"1583\":1}}],[\"b3\",{\"1\":{\"1367\":1}}],[\"b0\",{\"1\":{\"1367\":1}}],[\"btn\",{\"1\":{\"1736\":3}}],[\"btn02\",{\"1\":{\"1346\":1}}],[\"btn01\",{\"1\":{\"1346\":2}}],[\"btrace\",{\"0\":{\"1159\":1}}],[\"b应用包名\",{\"1\":{\"1326\":2}}],[\"blankj\",{\"1\":{\"1647\":2}}],[\"blank\",{\"1\":{\"1416\":1}}],[\"blue\",{\"1\":{\"1307\":1,\"1402\":1,\"1518\":1,\"1685\":1}}],[\"blur\",{\"1\":{\"1305\":1}}],[\"blurmaskfilter\",{\"1\":{\"1305\":1,\"1310\":1}}],[\"blocbase\",{\"1\":{\"1383\":3,\"1666\":3}}],[\"blocbase>\",{\"1\":{\"1383\":2,\"1666\":2}}],[\"bloc\",{\"1\":{\"1383\":14,\"1666\":14}}],[\"blocprovider<defaultbloc>\",{\"1\":{\"1383\":2,\"1666\":2}}],[\"blocprovider<t>\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"blocprovider<t\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"blocproviderstate<t>\",{\"1\":{\"1383\":3,\"1666\":3}}],[\"blocprovider\",{\"1\":{\"1383\":2,\"1666\":2}}],[\"blockingqueue\",{\"1\":{\"958\":1}}],[\"blockingqueue<runnable>\",{\"1\":{\"246\":1}}],[\"blockqueue\",{\"1\":{\"950\":8}}],[\"blockqueue<job>\",{\"1\":{\"950\":2}}],[\"blockqueue<e>\",{\"1\":{\"950\":2,\"958\":2}}],[\"blocklist\",{\"1\":{\"950\":6,\"958\":6}}],[\"blocker\",{\"1\":{\"896\":2}}],[\"blockedthread\",{\"1\":{\"867\":2}}],[\"blocked\",{\"1\":{\"867\":4,\"943\":1,\"1230\":1}}],[\"block\",{\"1\":{\"638\":1}}],[\"blob\",{\"1\":{\"615\":3,\"1383\":1,\"1399\":1,\"1549\":1,\"1583\":1,\"1666\":1,\"1682\":1}}],[\"blog\",{\"1\":{\"19\":1,\"37\":1,\"46\":1,\"52\":1,\"58\":1,\"314\":1,\"1320\":2,\"1346\":1,\"1420\":1,\"1453\":1,\"1465\":2,\"1482\":1,\"1483\":1,\"1503\":5,\"1574\":4,\"1577\":1,\"1580\":1,\"1905\":1,\"1908\":2,\"1970\":1}}],[\"batteryservice\",{\"1\":{\"1867\":1,\"1868\":1}}],[\"barwidth\",{\"1\":{\"1709\":1}}],[\"barposition\",{\"1\":{\"1707\":2,\"1708\":1,\"1711\":2,\"1713\":4}}],[\"bar1\",{\"1\":{\"1518\":1}}],[\"bar\",{\"1\":{\"1518\":4,\"1521\":2}}],[\"barrieraction\",{\"1\":{\"905\":2}}],[\"barrier\",{\"1\":{\"905\":4}}],[\"badging\",{\"1\":{\"1371\":1}}],[\"ba\",{\"1\":{\"1367\":1}}],[\"background\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"background=\",{\"1\":{\"1346\":10}}],[\"backgroundcolorspan\",{\"1\":{\"1310\":1}}],[\"backup\",{\"1\":{\"879\":1}}],[\"baidu\",{\"1\":{\"1049\":1,\"1595\":1}}],[\"balking\",{\"1\":{\"920\":1}}],[\"balking模式\",{\"0\":{\"920\":1}}],[\"banana\",{\"1\":{\"1518\":5}}],[\"bank\",{\"1\":{\"908\":2}}],[\"banner\",{\"1\":{\"711\":4,\"1346\":2}}],[\"basis\",{\"1\":{\"1648\":1}}],[\"basics\",{\"1\":{\"1552\":1,\"1555\":2}}],[\"bash\",{\"1\":{\"702\":1,\"1050\":1,\"1323\":1,\"1335\":1,\"1371\":1,\"1459\":1,\"1534\":2,\"1555\":2,\"1583\":1,\"1922\":1}}],[\"baseprocessor\",{\"1\":{\"1604\":2}}],[\"base类\",{\"1\":{\"1604\":1}}],[\"baselinetype\",{\"1\":{\"1402\":3,\"1685\":3}}],[\"baseline\",{\"1\":{\"1402\":5,\"1685\":5}}],[\"basetemplete\",{\"1\":{\"1395\":1,\"1678\":1}}],[\"base逻辑\",{\"1\":{\"1003\":1}}],[\"base\",{\"1\":{\"984\":2,\"993\":4,\"994\":1,\"1003\":1,\"1044\":1,\"1095\":1,\"1096\":2,\"1101\":1,\"1383\":4,\"1518\":6,\"1534\":1,\"1666\":4,\"1718\":2,\"1746\":4,\"1757\":4,\"1763\":2,\"1781\":1,\"1832\":4,\"1852\":1,\"1867\":1,\"1870\":9}}],[\"basename\",{\"1\":{\"604\":3,\"657\":2}}],[\"based\",{\"1\":{\"334\":1,\"583\":1}}],[\"baas\",{\"1\":{\"305\":1}}],[\"br\",{\"1\":{\"1717\":1,\"1755\":5,\"1768\":1,\"1770\":2,\"1778\":1,\"1789\":11,\"1798\":5}}],[\"browsable\",{\"1\":{\"1326\":1}}],[\"browser\",{\"1\":{\"604\":2,\"657\":1}}],[\"broker\",{\"1\":{\"314\":1}}],[\"brand\",{\"1\":{\"668\":3,\"1298\":3}}],[\"branchinstruction\",{\"1\":{\"1094\":2,\"1096\":1}}],[\"branch\",{\"1\":{\"483\":5,\"1094\":2,\"1096\":1,\"1947\":3,\"1949\":1,\"1951\":2,\"1952\":1,\"1960\":1}}],[\"brake\",{\"1\":{\"428\":3}}],[\"break\",{\"1\":{\"283\":1,\"359\":1,\"525\":3,\"638\":1,\"852\":1,\"853\":1,\"896\":1,\"994\":1,\"1036\":1,\"1518\":1,\"1727\":2,\"1736\":3,\"1770\":2,\"1778\":2,\"1789\":11,\"1798\":3,\"1799\":1,\"1828\":1,\"1847\":1}}],[\"brew\",{\"1\":{\"79\":12,\"1413\":2}}],[\"buf\",{\"1\":{\"1717\":2,\"1770\":1}}],[\"buff\",{\"1\":{\"820\":1}}],[\"buffer为空\",{\"1\":{\"1778\":1}}],[\"buffer不足\",{\"1\":{\"1755\":1}}],[\"bufferedreader\",{\"1\":{\"1521\":1}}],[\"buffer\",{\"1\":{\"631\":11,\"932\":4,\"1119\":1,\"1332\":5,\"1717\":1,\"1755\":1,\"1756\":1,\"1770\":3,\"1789\":3,\"1798\":1}}],[\"built\",{\"1\":{\"1534\":1}}],[\"buildtype\",{\"1\":{\"1613\":5}}],[\"buildtypes\",{\"1\":{\"1317\":1}}],[\"build=\",{\"1\":{\"1555\":1}}],[\"build=1\",{\"1\":{\"1335\":1}}],[\"building\",{\"1\":{\"1534\":1}}],[\"build并不引入达到组件间代码隔离\",{\"1\":{\"1476\":1}}],[\"buildcontext\",{\"1\":{\"1383\":6,\"1392\":1,\"1402\":1,\"1666\":6,\"1675\":1,\"1685\":1}}],[\"buildconfig\",{\"1\":{\"1329\":1}}],[\"build系统信息\",{\"0\":{\"1298\":1}}],[\"buildscript\",{\"1\":{\"1289\":1,\"1292\":1,\"1491\":1,\"1595\":1,\"1632\":1,\"1905\":1,\"1911\":1}}],[\"buildpartc\",{\"1\":{\"422\":3}}],[\"buildpartb\",{\"1\":{\"422\":3}}],[\"buildparta\",{\"1\":{\"422\":3}}],[\"builder类型\",{\"1\":{\"1298\":1}}],[\"builder\",{\"1\":{\"422\":18,\"1305\":2,\"1307\":3,\"1312\":1,\"1332\":33,\"1358\":1,\"1383\":1,\"1601\":5,\"1604\":6,\"1666\":1,\"1709\":1}}],[\"build\",{\"1\":{\"64\":1,\"103\":4,\"603\":1,\"656\":1,\"1298\":21,\"1305\":2,\"1307\":3,\"1323\":2,\"1332\":6,\"1335\":2,\"1358\":1,\"1371\":3,\"1383\":2,\"1392\":1,\"1399\":1,\"1402\":3,\"1417\":2,\"1459\":2,\"1534\":2,\"1555\":1,\"1601\":5,\"1604\":6,\"1613\":1,\"1641\":1,\"1666\":2,\"1675\":1,\"1682\":1,\"1685\":3,\"1708\":2,\"1709\":1,\"1711\":1,\"1905\":1,\"1911\":1,\"1952\":3,\"1966\":1}}],[\"bundlename\",{\"1\":{\"1708\":1,\"1709\":1,\"1712\":1}}],[\"bundlemanager\",{\"1\":{\"1702\":1}}],[\"bundleid\",{\"1\":{\"1335\":1}}],[\"bundle\",{\"1\":{\"1295\":2,\"1335\":4,\"1371\":1,\"1468\":3,\"1598\":1,\"1610\":4}}],[\"bunk\",{\"1\":{\"441\":4}}],[\"bugly日志上传\",{\"1\":{\"1616\":1}}],[\"bugs\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"bug\",{\"1\":{\"1286\":1}}],[\"bump\",{\"1\":{\"1116\":1}}],[\"business\",{\"1\":{\"311\":1}}],[\"bucketindex\",{\"1\":{\"350\":7,\"352\":3}}],[\"bucketarray\",{\"1\":{\"285\":4}}],[\"bucketarrays\",{\"1\":{\"285\":4}}],[\"bucketcount\",{\"1\":{\"285\":2}}],[\"bucketsort\",{\"1\":{\"285\":2}}],[\"bubblesorttest\",{\"1\":{\"1010\":1}}],[\"bubblesort\",{\"1\":{\"278\":1}}],[\"burden\",{\"1\":{\"259\":7,\"447\":6}}],[\"butterknife归根结底\",{\"1\":{\"1610\":1}}],[\"butterknife\",{\"1\":{\"1598\":8}}],[\"butterknife解决方案通用写法\",{\"1\":{\"1598\":1}}],[\"butterknife反射调用\",{\"1\":{\"1577\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1}}],[\"button>column>image\",{\"1\":{\"1709\":1}}],[\"buttontype\",{\"1\":{\"1708\":1}}],[\"button等要有统一标准要求\",{\"1\":{\"1444\":1}}],[\"button\",{\"1\":{\"489\":12,\"1708\":1,\"1709\":3}}],[\"but\",{\"1\":{\"94\":1,\"631\":1}}],[\"b\",{\"1\":{\"67\":1,\"160\":4,\"327\":1,\"363\":5,\"365\":1,\"820\":1,\"823\":3,\"908\":3,\"984\":2,\"1009\":2,\"1203\":8,\"1518\":13,\"1521\":4,\"1527\":1,\"1530\":5,\"1702\":20,\"1708\":14,\"1709\":24,\"1712\":26,\"1713\":32,\"1756\":2,\"1943\":1,\"1947\":1,\"1949\":1}}],[\"bio\",{\"1\":{\"1789\":7}}],[\"bias\",{\"1\":{\"1346\":2}}],[\"bias=\",{\"1\":{\"1346\":2}}],[\"bi\",{\"1\":{\"820\":1}}],[\"bitmap\",{\"1\":{\"1527\":9}}],[\"bitmap处理\",{\"1\":{\"1527\":1}}],[\"bits\",{\"1\":{\"359\":1,\"1530\":6}}],[\"bit\",{\"1\":{\"351\":1,\"1530\":2}}],[\"bintray账号\",{\"0\":{\"1914\":1}}],[\"bintray\",{\"1\":{\"1905\":6,\"1914\":3}}],[\"binlog\",{\"1\":{\"631\":2}}],[\"binary\",{\"1\":{\"631\":2,\"1335\":5,\"1534\":2}}],[\"bin=mysql\",{\"1\":{\"631\":1}}],[\"bindservice\",{\"1\":{\"1736\":1}}],[\"bindremoteservice\",{\"1\":{\"1736\":3}}],[\"bindingclass\",{\"1\":{\"1598\":2}}],[\"bindings\",{\"1\":{\"1598\":3}}],[\"bind\",{\"1\":{\"627\":3,\"631\":1,\"1598\":5,\"1736\":2}}],[\"binder或binder\",{\"1\":{\"1799\":1}}],[\"binder死亡消息\",{\"1\":{\"1789\":1}}],[\"binder死亡通知\",{\"0\":{\"1760\":1,\"1761\":1},\"1\":{\"1761\":1}}],[\"binder池\",{\"1\":{\"1779\":1}}],[\"binder池上限\",{\"0\":{\"1779\":1}}],[\"binder池总结\",{\"0\":{\"1776\":1}}],[\"binder线程个数上限为8\",{\"1\":{\"1779\":1}}],[\"binder线程创建\",{\"0\":{\"1777\":1}}],[\"binder线程池\",{\"1\":{\"1752\":1,\"1776\":1}}],[\"binder其他线程\",{\"1\":{\"1776\":1}}],[\"binder普通线程\",{\"1\":{\"1776\":1}}],[\"binder主线程\",{\"1\":{\"1776\":1}}],[\"binder系统中可分为3类binder线程\",{\"1\":{\"1776\":1}}],[\"binder响应码\",{\"1\":{\"1768\":1}}],[\"binder请求码\",{\"1\":{\"1768\":1}}],[\"binder协议\",{\"1\":{\"1768\":1}}],[\"binderdied\",{\"1\":{\"1762\":1}}],[\"binder事务添加ref\",{\"1\":{\"1761\":1}}],[\"binderproxy对象的调用\",{\"1\":{\"1756\":1}}],[\"binderproxy\",{\"1\":{\"1756\":4,\"1762\":2}}],[\"binder实体为空\",{\"1\":{\"1755\":1}}],[\"binder实战使用\",{\"0\":{\"1723\":1}}],[\"binder的transaction有3种类型\",{\"1\":{\"1776\":1}}],[\"binder的路由原理\",{\"1\":{\"1754\":1}}],[\"binder的服务端\",{\"1\":{\"1727\":1}}],[\"binder路由\",{\"0\":{\"1754\":1},\"1\":{\"1754\":1}}],[\"binder传输过程\",{\"0\":{\"1753\":1}}],[\"binder进程与线程\",{\"0\":{\"1752\":1}}],[\"binderinternal\",{\"1\":{\"1751\":1,\"1757\":1}}],[\"binder类图\",{\"0\":{\"1751\":1},\"1\":{\"1751\":1}}],[\"binder架构\",{\"0\":{\"1749\":1,\"1750\":1},\"1\":{\"1750\":1}}],[\"binder架构所涉及的总共有以下5个目录\",{\"1\":{\"1746\":1}}],[\"binder驱动收到该binder应答请求\",{\"1\":{\"1796\":1}}],[\"binder驱动收到该binder请求\",{\"1\":{\"1796\":1}}],[\"binder驱动设备\",{\"1\":{\"1777\":1,\"1804\":1}}],[\"binder驱动底层方法\",{\"0\":{\"1771\":1}}],[\"binder驱动原理\",{\"0\":{\"1766\":1}}],[\"binder驱动\",{\"1\":{\"1744\":1}}],[\"binder通信协议\",{\"1\":{\"1768\":1}}],[\"binder通信过程\",{\"0\":{\"1768\":1}}],[\"binder通信\",{\"1\":{\"1744\":1}}],[\"binder原理\",{\"0\":{\"1744\":1},\"1\":{\"1744\":1}}],[\"binder开篇\",{\"0\":{\"1742\":1}}],[\"bindersimple\",{\"1\":{\"1736\":1,\"1737\":1}}],[\"binder客户端\",{\"1\":{\"1727\":1}}],[\"binder\",{\"0\":{\"1721\":1,\"1724\":1,\"1729\":1,\"1780\":1},\"1\":{\"1717\":2,\"1718\":3,\"1726\":2,\"1731\":3,\"1732\":1,\"1739\":1,\"1746\":9,\"1751\":1,\"1756\":4,\"1757\":2,\"1761\":7,\"1762\":1,\"1763\":3,\"1767\":1,\"1768\":3,\"1770\":41,\"1771\":4,\"1772\":22,\"1781\":3,\"1786\":3,\"1788\":4,\"1789\":26,\"1790\":4,\"1791\":3,\"1798\":3,\"1799\":6,\"1800\":3,\"1807\":3,\"1843\":3,\"1846\":1},\"2\":{\"1720\":1,\"1741\":1,\"1748\":1,\"1759\":1,\"1765\":1,\"1774\":1,\"1783\":1,\"1793\":1,\"1802\":1,\"1809\":1}}],[\"binderconstructor\",{\"1\":{\"1598\":8}}],[\"binder连接池\",{\"1\":{\"268\":1}}],[\"binder机制\",{\"0\":{\"132\":1}}],[\"bin里面\",{\"1\":{\"67\":1}}],[\"bin\",{\"1\":{\"67\":3,\"615\":5,\"619\":1,\"631\":1,\"644\":2,\"645\":1,\"711\":1,\"715\":1,\"822\":1,\"833\":2,\"1050\":1,\"1056\":1,\"1070\":1,\"1292\":1,\"1323\":1,\"1335\":1,\"1459\":1,\"1534\":14,\"1555\":1,\"1583\":1,\"1728\":4,\"1733\":4,\"1787\":1,\"1858\":2}}],[\"biz\",{\"1\":{\"12\":7,\"731\":7}}],[\"because\",{\"1\":{\"1850\":1}}],[\"become\",{\"1\":{\"1786\":1,\"1788\":1}}],[\"been\",{\"1\":{\"1534\":1}}],[\"beware\",{\"1\":{\"631\":1}}],[\"between\",{\"1\":{\"631\":1}}],[\"beforetextchanged\",{\"1\":{\"1349\":1,\"1364\":1}}],[\"beforeexecute\",{\"1\":{\"916\":1}}],[\"before\",{\"1\":{\"359\":5,\"363\":3,\"631\":1,\"859\":1,\"1349\":1,\"1364\":1}}],[\"behavioural\",{\"1\":{\"334\":1}}],[\"behaviorsubjectlist\",{\"1\":{\"1364\":2}}],[\"behaviorsubject\",{\"1\":{\"1364\":1}}],[\"behaviorsubject<string>\",{\"1\":{\"1364\":3}}],[\"behavior\",{\"1\":{\"73\":1}}],[\"begin\",{\"1\":{\"103\":2,\"615\":1,\"711\":1,\"870\":1,\"1613\":1}}],[\"be\",{\"0\":{\"67\":1,\"82\":1,\"91\":1},\"1\":{\"67\":1,\"73\":2,\"334\":1,\"631\":3,\"895\":1,\"1555\":1,\"1604\":2,\"1840\":1,\"1850\":1}}],[\"bean目录自动生成没有的bean实体类\",{\"1\":{\"1549\":1}}],[\"beans\",{\"1\":{\"650\":1}}],[\"bean\",{\"1\":{\"12\":2,\"650\":2,\"672\":1,\"731\":2}}],[\"by类委托\",{\"1\":{\"1521\":1}}],[\"by解决方案\",{\"1\":{\"631\":1}}],[\"by\",{\"0\":{\"82\":1,\"91\":1,\"97\":1},\"1\":{\"52\":1,\"103\":1,\"351\":1,\"381\":1,\"613\":1,\"629\":1,\"631\":2,\"711\":1,\"884\":22,\"1197\":1,\"1317\":1,\"1383\":1,\"1518\":2,\"1521\":1,\"1524\":1,\"1601\":2,\"1604\":1,\"1610\":1,\"1648\":1,\"1666\":1}}],[\"bytex\",{\"1\":{\"1561\":1}}],[\"bytedance\",{\"1\":{\"1561\":1}}],[\"byteorder\",{\"1\":{\"1540\":1}}],[\"bytebuffer\",{\"1\":{\"1540\":1}}],[\"bytes\",{\"1\":{\"1352\":1,\"1530\":1,\"1540\":1,\"1660\":1}}],[\"bytecode\",{\"1\":{\"1101\":4}}],[\"bytecodereader\",{\"1\":{\"994\":1,\"1094\":3,\"1101\":2}}],[\"byte\",{\"0\":{\"49\":1},\"1\":{\"979\":7,\"1009\":2,\"1022\":6,\"1063\":1,\"1064\":2,\"1081\":2,\"1101\":1,\"1109\":1,\"1182\":2,\"1530\":4}}],[\"bound\",{\"1\":{\"1604\":1}}],[\"bounded\",{\"1\":{\"351\":1}}],[\"bob\",{\"1\":{\"1521\":4}}],[\"bob大叔\",{\"1\":{\"750\":1}}],[\"borderradius\",{\"1\":{\"1402\":4,\"1685\":4}}],[\"box<int>\",{\"1\":{\"1518\":1}}],[\"box<t>\",{\"1\":{\"1518\":1}}],[\"box\",{\"1\":{\"1518\":1}}],[\"boxfit\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"boxconstraints\",{\"1\":{\"1402\":3,\"1685\":3}}],[\"board\",{\"1\":{\"1298\":3}}],[\"bo\",{\"1\":{\"820\":1}}],[\"boss\",{\"1\":{\"537\":9}}],[\"bodytostring\",{\"1\":{\"1332\":3}}],[\"body\",{\"1\":{\"422\":10,\"1329\":1,\"1332\":1,\"1402\":1,\"1549\":1,\"1685\":1}}],[\"bottom\",{\"0\":{\"97\":1},\"1\":{\"1402\":6,\"1685\":6,\"1713\":1}}],[\"both\",{\"1\":{\"67\":1}}],[\"boost原因\",{\"0\":{\"1689\":1}}],[\"boost接入\",{\"0\":{\"1688\":1}}],[\"booster\",{\"1\":{\"1561\":2}}],[\"boost\",{\"1\":{\"1399\":1,\"1682\":1,\"1689\":1,\"1690\":2}}],[\"boolvar\",{\"1\":{\"1055\":3}}],[\"bool\",{\"1\":{\"994\":2,\"1002\":2,\"1015\":1,\"1030\":1,\"1036\":1,\"1055\":2,\"1109\":2,\"1383\":3,\"1402\":1,\"1666\":3,\"1685\":1,\"1778\":5,\"1798\":1,\"1829\":1,\"1861\":1}}],[\"boolean>\",{\"1\":{\"1364\":1}}],[\"boolean变量线程安全且插入屏障\",{\"1\":{\"945\":1}}],[\"boolean\",{\"1\":{\"70\":1,\"197\":1,\"332\":1,\"337\":1,\"342\":1,\"348\":1,\"359\":1,\"362\":2,\"364\":2,\"365\":1,\"501\":2,\"543\":2,\"852\":1,\"853\":1,\"867\":1,\"869\":1,\"870\":1,\"876\":5,\"879\":4,\"880\":6,\"882\":3,\"883\":1,\"884\":1,\"886\":1,\"887\":1,\"895\":1,\"896\":1,\"897\":1,\"900\":2,\"917\":1,\"920\":1,\"945\":1,\"950\":1,\"1009\":2,\"1030\":3,\"1175\":1,\"1326\":1,\"1332\":1,\"1358\":3,\"1364\":1,\"1374\":1,\"1416\":4,\"1417\":1,\"1475\":1,\"1530\":3,\"1540\":1,\"1546\":2,\"1589\":6,\"1592\":2,\"1604\":3,\"1625\":1,\"1711\":1,\"1713\":3,\"1732\":1,\"1736\":1,\"1737\":2,\"1739\":1,\"1756\":1,\"1762\":3,\"1825\":1,\"1829\":1,\"1840\":2,\"1841\":1,\"1845\":1,\"1846\":1,\"1847\":2,\"1849\":1,\"1863\":1,\"1865\":1}}],[\"booksprice\",{\"1\":{\"513\":2}}],[\"book\",{\"1\":{\"409\":6,\"986\":1,\"997\":2,\"1010\":1,\"1017\":2,\"1024\":4,\"1030\":2,\"1037\":3,\"1044\":1,\"1103\":1,\"1399\":1,\"1682\":1}}],[\"bootclasspath\",{\"1\":{\"1063\":3}}],[\"bootstrp\",{\"1\":{\"1030\":1}}],[\"bootstrapclassloader\",{\"1\":{\"194\":2}}],[\"bootstrap\",{\"1\":{\"12\":1,\"88\":1,\"731\":1,\"1030\":1,\"1061\":1,\"1175\":1}}],[\"boot<\",{\"1\":{\"672\":1}}],[\"boot模块\",{\"1\":{\"12\":1,\"731\":1}}],[\"boot\",{\"0\":{\"11\":1,\"730\":1},\"1\":{\"8\":1,\"9\":1,\"12\":17,\"672\":2,\"727\":1,\"728\":1,\"731\":17}}],[\"bom\",{\"1\":{\"12\":2,\"731\":2}}],[\"txn\",{\"1\":{\"1789\":14}}],[\"txt\",{\"1\":{\"465\":2,\"1292\":1,\"1534\":5,\"1583\":1,\"1952\":3,\"1966\":1}}],[\"tcomplete\",{\"1\":{\"1770\":4}}],[\"tcp的首部较大为20字节\",{\"1\":{\"181\":1}}],[\"tcp只能是1对1的\",{\"1\":{\"181\":1}}],[\"tcp是面向字节流\",{\"1\":{\"181\":1}}],[\"tcp是面向连接的可靠性传输\",{\"1\":{\"181\":1}}],[\"tcp是面向连接的\",{\"1\":{\"181\":1}}],[\"tcp提供可靠的服务\",{\"1\":{\"181\":1}}],[\"tcp和udp区别\",{\"0\":{\"181\":1}}],[\"tcp\",{\"1\":{\"58\":1,\"631\":1,\"662\":2,\"723\":2,\"1963\":1}}],[\"tf\",{\"1\":{\"1756\":2,\"1798\":1}}],[\"ts\",{\"0\":{\"1999\":1},\"1\":{\"1702\":1}}],[\"ts文档\",{\"0\":{\"1654\":1}}],[\"tsinghua\",{\"1\":{\"79\":2}}],[\"t>\",{\"1\":{\"1506\":2}}],[\"tb\",{\"1\":{\"1292\":4}}],[\"tlab\",{\"1\":{\"1116\":1}}],[\"tlsv1\",{\"1\":{\"638\":3}}],[\"twinslock\",{\"1\":{\"880\":1}}],[\"two\",{\"0\":{\"67\":1},\"1\":{\"67\":1,\"895\":3,\"1555\":1}}],[\"tdd\",{\"1\":{\"811\":1,\"1253\":1}}],[\"tv\",{\"1\":{\"519\":8,\"1645\":1}}],[\"tvcontroller\",{\"1\":{\"507\":8}}],[\"tutorial\",{\"1\":{\"1534\":1}}],[\"turtle\",{\"1\":{\"1518\":2}}],[\"turn\",{\"1\":{\"1518\":3}}],[\"turndown\",{\"1\":{\"507\":6}}],[\"turnup\",{\"1\":{\"507\":5}}],[\"tuna\",{\"1\":{\"79\":2}}],[\"tmp\",{\"1\":{\"278\":2,\"279\":2,\"525\":4,\"614\":1,\"615\":1,\"622\":1,\"630\":1,\"631\":1}}],[\"t必须为接口类\",{\"1\":{\"259\":1}}],[\"tr\",{\"1\":{\"1717\":5,\"1770\":7,\"1798\":8}}],[\"trim\",{\"1\":{\"1349\":5,\"1592\":1}}],[\"trimand\",{\"1\":{\"1335\":2}}],[\"trimslash\",{\"1\":{\"1323\":2,\"1459\":2}}],[\"trigger\",{\"1\":{\"614\":1,\"622\":1,\"630\":1,\"1857\":3}}],[\"trx\",{\"1\":{\"631\":1}}],[\"training\",{\"1\":{\"1701\":1,\"1706\":1}}],[\"trainticket\",{\"1\":{\"441\":3}}],[\"traffic\",{\"0\":{\"1405\":1}}],[\"trackingid\",{\"1\":{\"1292\":1}}],[\"transitive\",{\"1\":{\"1966\":1}}],[\"transitive=true\",{\"1\":{\"1966\":4}}],[\"transient\",{\"1\":{\"334\":2,\"345\":2,\"348\":1,\"352\":3,\"358\":4,\"359\":1,\"362\":2}}],[\"transact主要过程\",{\"1\":{\"1756\":1}}],[\"transactnative\",{\"1\":{\"1756\":1}}],[\"transact\",{\"1\":{\"1731\":1,\"1739\":2,\"1745\":1,\"1756\":6}}],[\"transaction命令\",{\"1\":{\"1796\":1}}],[\"transaction或bc\",{\"1\":{\"1780\":1}}],[\"transaction事务\",{\"1\":{\"1770\":1}}],[\"transaction节点插入到binder\",{\"1\":{\"1754\":1}}],[\"transaction节点\",{\"1\":{\"1753\":1}}],[\"transaction\",{\"1\":{\"1717\":1,\"1731\":1,\"1732\":4,\"1739\":9,\"1755\":2,\"1756\":2,\"1770\":14,\"1780\":1,\"1789\":6,\"1798\":3,\"1799\":2}}],[\"transactional\",{\"1\":{\"631\":4}}],[\"transport\",{\"1\":{\"1416\":2}}],[\"transparent<\",{\"1\":{\"1320\":1}}],[\"trans\",{\"1\":{\"631\":2}}],[\"transfer\",{\"1\":{\"352\":2,\"615\":1}}],[\"transformaop\",{\"1\":{\"1561\":1}}],[\"transform应用场景\",{\"1\":{\"1561\":1}}],[\"transform介绍\",{\"1\":{\"1561\":1}}],[\"transformhittests\",{\"1\":{\"1402\":3,\"1685\":3}}],[\"transform\",{\"0\":{\"1561\":2},\"1\":{\"1402\":8,\"1518\":3,\"1561\":2,\"1685\":8}}],[\"transformnativelibswithmergejnilibsfordebug\",{\"1\":{\"103\":1}}],[\"transformresourceswithmergejavaresfordebug\",{\"1\":{\"103\":1}}],[\"transformdexarchivewithdexmergerfordebug\",{\"1\":{\"103\":1}}],[\"transformclasseswithajxfordebug\",{\"1\":{\"103\":1}}],[\"transformclasseswithstackframesfixerfordebug\",{\"1\":{\"103\":1}}],[\"transformclasseswithmultidexlistfordebug\",{\"1\":{\"103\":1}}],[\"transformclasseswithdesugarfordebug\",{\"1\":{\"103\":1}}],[\"transformclasseswithdexbuilderfordebug\",{\"1\":{\"103\":1}}],[\"transformclassesandresourceswithproguardfordebug\",{\"1\":{\"103\":1}}],[\"treeutils\",{\"1\":{\"1604\":2}}],[\"tree\",{\"1\":{\"1383\":2,\"1604\":2,\"1666\":2}}],[\"treemap\",{\"1\":{\"325\":1}}],[\"treeset\",{\"1\":{\"322\":2}}],[\"treeset是基于红黑树实现的\",{\"1\":{\"216\":1}}],[\"try作为表达式\",{\"1\":{\"1521\":1}}],[\"try代码段\",{\"1\":{\"1036\":4}}],[\"tryitout\",{\"1\":{\"1036\":1}}],[\"tryreleaseshared\",{\"1\":{\"880\":2}}],[\"tryrelease\",{\"1\":{\"876\":1,\"879\":1,\"882\":1}}],[\"tryacquiresharednanos\",{\"1\":{\"880\":1}}],[\"tryacquireshared\",{\"1\":{\"880\":4,\"886\":1}}],[\"tryacquirenanos\",{\"1\":{\"876\":1}}],[\"tryacquire\",{\"1\":{\"876\":2,\"879\":2,\"883\":1,\"886\":1}}],[\"trylock\",{\"1\":{\"823\":1,\"876\":2,\"880\":2}}],[\"try\",{\"1\":{\"154\":2,\"197\":1,\"342\":1,\"359\":2,\"416\":1,\"640\":1,\"823\":1,\"867\":2,\"868\":1,\"870\":7,\"874\":1,\"879\":2,\"880\":1,\"884\":1,\"885\":3,\"887\":2,\"889\":2,\"897\":1,\"905\":2,\"907\":1,\"908\":2,\"917\":2,\"923\":1,\"932\":4,\"1036\":1,\"1175\":1,\"1326\":2,\"1332\":1,\"1416\":1,\"1518\":1,\"1521\":1,\"1546\":1,\"1552\":1,\"1592\":3,\"1598\":2,\"1601\":1,\"1604\":1,\"1731\":1,\"1736\":2,\"1739\":2,\"1846\":1,\"1862\":1,\"1863\":2,\"1866\":1,\"1867\":1}}],[\"true为不显示\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"true\",{\"1\":{\"0\":1,\"28\":1,\"73\":2,\"154\":1,\"332\":1,\"337\":1,\"342\":1,\"348\":1,\"359\":2,\"363\":1,\"364\":4,\"365\":2,\"650\":2,\"666\":1,\"667\":2,\"668\":5,\"867\":4,\"868\":1,\"869\":1,\"870\":2,\"876\":2,\"879\":3,\"880\":4,\"882\":3,\"883\":2,\"884\":1,\"886\":2,\"887\":1,\"895\":1,\"917\":1,\"926\":1,\"942\":1,\"945\":1,\"950\":1,\"1002\":1,\"1009\":1,\"1015\":2,\"1030\":1,\"1036\":1,\"1109\":1,\"1203\":8,\"1292\":3,\"1317\":2,\"1320\":1,\"1326\":1,\"1358\":2,\"1364\":1,\"1374\":2,\"1383\":4,\"1392\":2,\"1402\":2,\"1405\":3,\"1416\":13,\"1546\":2,\"1589\":2,\"1592\":5,\"1595\":3,\"1604\":3,\"1632\":2,\"1666\":4,\"1675\":2,\"1685\":2,\"1702\":7,\"1707\":4,\"1708\":1,\"1713\":2,\"1732\":2,\"1736\":1,\"1739\":3,\"1756\":1,\"1762\":3,\"1776\":1,\"1778\":2,\"1788\":1,\"1799\":1,\"1828\":2,\"1841\":1,\"1846\":1,\"1847\":1,\"1857\":1,\"1863\":2,\"1865\":1}}],[\"tinker\",{\"1\":{\"1432\":2}}],[\"tinyinfo\",{\"1\":{\"1289\":1}}],[\"tinypngplugin\",{\"1\":{\"1289\":2}}],[\"tinypng\",{\"1\":{\"1289\":4,\"1317\":1}}],[\"tid\",{\"1\":{\"886\":1}}],[\"tid=0x000000004f6a8000\",{\"1\":{\"822\":1}}],[\"tire\",{\"1\":{\"428\":3}}],[\"title\",{\"1\":{\"409\":5,\"668\":18,\"1383\":1,\"1402\":2,\"1444\":1,\"1666\":1,\"1685\":2,\"1960\":1}}],[\"tips\",{\"1\":{\"1341\":1,\"1446\":1,\"1604\":2}}],[\"tip\",{\"1\":{\"271\":1,\"1088\":1,\"1326\":1}}],[\"timepickerdialog\",{\"1\":{\"1713\":1}}],[\"timewaitingthread\",{\"1\":{\"867\":1}}],[\"timewaiting\",{\"1\":{\"867\":2}}],[\"timed\",{\"1\":{\"822\":3,\"1230\":1,\"1374\":3,\"1778\":2}}],[\"timezone=asia\",{\"1\":{\"711\":1}}],[\"timeoutmillis\",{\"1\":{\"1825\":1,\"1828\":2}}],[\"timeouts\",{\"1\":{\"1583\":1}}],[\"timeout\",{\"1\":{\"631\":2,\"638\":1,\"644\":1,\"823\":1,\"876\":2,\"880\":2,\"946\":1,\"950\":4,\"958\":4,\"1828\":1,\"1857\":1}}],[\"timestamp\",{\"1\":{\"615\":1}}],[\"times\",{\"1\":{\"359\":1}}],[\"timeunit\",{\"1\":{\"246\":2,\"247\":3,\"650\":1,\"828\":3,\"867\":1,\"876\":2,\"880\":1,\"914\":1,\"938\":1}}],[\"time\",{\"1\":{\"103\":1,\"271\":1,\"583\":1,\"631\":2,\"870\":3,\"895\":2,\"943\":1,\"1086\":1,\"1230\":4,\"1298\":3,\"1374\":3,\"1534\":1,\"1828\":1}}],[\"ticket03\",{\"1\":{\"441\":2}}],[\"ticket02\",{\"1\":{\"441\":2}}],[\"ticket01\",{\"1\":{\"441\":2}}],[\"ticket>\",{\"1\":{\"441\":1}}],[\"ticketfactory\",{\"1\":{\"441\":4}}],[\"ticket\",{\"1\":{\"441\":10}}],[\"tick\",{\"1\":{\"94\":1}}],[\"tickcallback\",{\"1\":{\"94\":1}}],[\"talkwithdriver\",{\"1\":{\"1778\":1,\"1798\":1}}],[\"taixin\",{\"1\":{\"1534\":2}}],[\"tail\",{\"1\":{\"362\":2,\"363\":2,\"879\":3,\"895\":4,\"1770\":2,\"1857\":3}}],[\"tag标签\",{\"0\":{\"1949\":1}}],[\"tags\",{\"1\":{\"1298\":3,\"1949\":1}}],[\"tag\",{\"1\":{\"825\":1,\"1197\":1,\"1320\":2,\"1402\":3,\"1589\":2,\"1685\":3,\"1736\":6,\"1737\":7,\"1840\":1,\"1846\":1,\"1851\":1,\"1911\":1,\"1949\":6}}],[\"taro\",{\"0\":{\"655\":1},\"1\":{\"603\":1,\"656\":1}}],[\"target为空\",{\"1\":{\"1849\":1}}],[\"targettype\",{\"1\":{\"1604\":3}}],[\"target类增加释放方法\",{\"1\":{\"1604\":1}}],[\"target类增加构造方法\",{\"1\":{\"1604\":1}}],[\"target类增加一行field\",{\"1\":{\"1604\":1}}],[\"targetfield\",{\"1\":{\"1604\":2}}],[\"target字段\",{\"1\":{\"1604\":1}}],[\"targetclasstype\",{\"1\":{\"1604\":5}}],[\"targetclass\",{\"1\":{\"1598\":9}}],[\"targetcompatibility\",{\"1\":{\"43\":1}}],[\"targets\",{\"1\":{\"1534\":2}}],[\"targetsdkversion\",{\"1\":{\"70\":1,\"1866\":4}}],[\"target\",{\"1\":{\"477\":1,\"615\":2,\"645\":1,\"1361\":1,\"1374\":1,\"1468\":5,\"1534\":8,\"1555\":1,\"1592\":1,\"1598\":12,\"1601\":23,\"1604\":16,\"1610\":6,\"1756\":2,\"1762\":3,\"1770\":9,\"1841\":2,\"1842\":1,\"1843\":3,\"1846\":1,\"1847\":3,\"1848\":1,\"1849\":2,\"1850\":1}}],[\"tabbar\",{\"1\":{\"1709\":2}}],[\"tabcontent\",{\"1\":{\"1709\":4}}],[\"tabcontet\",{\"1\":{\"1707\":1}}],[\"tabscontroller\",{\"1\":{\"1709\":2}}],[\"tabscontent\",{\"1\":{\"1707\":1}}],[\"tabs\",{\"1\":{\"1707\":2,\"1708\":1,\"1709\":5,\"1711\":1,\"1713\":1}}],[\"tab3\",{\"1\":{\"1346\":4}}],[\"tab2\",{\"1\":{\"1346\":5}}],[\"tab03\",{\"1\":{\"1346\":2}}],[\"tab02\",{\"1\":{\"1346\":3}}],[\"tab01\",{\"1\":{\"1346\":2}}],[\"tab1\",{\"1\":{\"1346\":4}}],[\"tab可切换\",{\"1\":{\"656\":1}}],[\"tab\",{\"1\":{\"381\":4}}],[\"tablespace\",{\"1\":{\"614\":1,\"615\":1,\"622\":1,\"630\":1}}],[\"tables\",{\"1\":{\"359\":1,\"614\":1,\"615\":1,\"619\":1,\"622\":1,\"630\":1,\"631\":4}}],[\"tablesizefor\",{\"1\":{\"354\":1}}],[\"table\",{\"1\":{\"348\":2,\"350\":10,\"351\":1,\"352\":11,\"358\":1,\"359\":1,\"381\":1,\"614\":1,\"615\":4,\"622\":1,\"630\":1,\"631\":1,\"1036\":3,\"1625\":1}}],[\"takephoto\",{\"1\":{\"1416\":1,\"1417\":3}}],[\"takepicture\",{\"1\":{\"453\":3}}],[\"take方法\",{\"1\":{\"958\":1}}],[\"take\",{\"1\":{\"94\":3,\"950\":6,\"958\":5}}],[\"taps\",{\"1\":{\"79\":3}}],[\"task=\",{\"1\":{\"923\":1}}],[\"taskcount\",{\"1\":{\"916\":1}}],[\"tasks\",{\"1\":{\"103\":2,\"694\":1,\"1613\":1}}],[\"task\",{\"1\":{\"73\":1,\"103\":2,\"897\":2,\"923\":2,\"1326\":5,\"1488\":3,\"1613\":3,\"1966\":3}}],[\"taobao\",{\"0\":{\"73\":1},\"1\":{\"73\":2,\"833\":1,\"1413\":4}}],[\"ta\",{\"1\":{\"70\":3}}],[\"tech\",{\"1\":{\"1503\":1,\"1564\":1,\"1616\":1}}],[\"tel\",{\"1\":{\"1305\":1}}],[\"tencent\",{\"1\":{\"1292\":2,\"1416\":1,\"1604\":1,\"1616\":1}}],[\"tengfei\",{\"1\":{\"822\":1,\"833\":1}}],[\"terminated\",{\"1\":{\"916\":1,\"943\":1,\"1230\":1}}],[\"term\",{\"1\":{\"711\":1}}],[\"terabase\",{\"1\":{\"58\":1,\"1963\":1}}],[\"testimplementation\",{\"1\":{\"1558\":1,\"1567\":10,\"1580\":1}}],[\"testing\",{\"1\":{\"1534\":1}}],[\"tests\",{\"1\":{\"1534\":6}}],[\"testadd\",{\"1\":{\"1518\":1}}],[\"testmodule\",{\"1\":{\"1491\":1}}],[\"testmain\",{\"1\":{\"259\":2,\"415\":1,\"416\":1,\"422\":2,\"428\":1,\"435\":1,\"441\":1,\"447\":3,\"453\":1,\"459\":1,\"465\":1,\"471\":1,\"477\":1,\"483\":1,\"501\":1,\"507\":1,\"513\":1,\"519\":1,\"525\":1,\"531\":1,\"537\":1,\"543\":1}}],[\"testexample2\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"testexample1\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"testexample\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"testexc\",{\"1\":{\"1036\":1}}],[\"testclick\",{\"1\":{\"1374\":1}}],[\"testoption内容判断调用测试方法\",{\"1\":{\"1070\":1}}],[\"testoption\",{\"1\":{\"1070\":4}}],[\"testloadclass\",{\"1\":{\"1030\":2}}],[\"testlock\",{\"1\":{\"874\":1,\"884\":3}}],[\"testbarrieraction\",{\"1\":{\"905\":2}}],[\"testpage\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"testpipe\",{\"1\":{\"870\":1}}],[\"testphantomreference\",{\"1\":{\"154\":1}}],[\"test\",{\"1\":{\"154\":1,\"160\":5,\"271\":1,\"811\":1,\"884\":2,\"986\":2,\"995\":2,\"997\":4,\"1010\":2,\"1017\":4,\"1024\":4,\"1030\":2,\"1037\":3,\"1044\":1,\"1070\":5,\"1088\":1,\"1103\":2,\"1298\":1,\"1534\":40,\"1564\":2,\"1708\":1,\"1974\":1}}],[\"template<typename\",{\"1\":{\"1805\":1}}],[\"temp\",{\"1\":{\"103\":1,\"282\":2,\"283\":2,\"284\":10,\"285\":8,\"1368\":2,\"1827\":1,\"1828\":1,\"1857\":1}}],[\"textpickerdialog\",{\"1\":{\"1713\":1}}],[\"textpaint\",{\"1\":{\"1305\":1}}],[\"textinput\",{\"1\":{\"1709\":1,\"1712\":1}}],[\"text>span\",{\"1\":{\"1709\":1}}],[\"textbaseline\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"textwatcher\",{\"1\":{\"1349\":1,\"1364\":1}}],[\"textsize=\",{\"1\":{\"1346\":2}}],[\"textcolor=\",{\"1\":{\"1346\":2}}],[\"text=\",{\"1\":{\"1346\":10,\"1555\":1}}],[\"text=$1\",{\"1\":{\"1323\":1,\"1335\":1,\"1459\":1}}],[\"textutils\",{\"1\":{\"1326\":3,\"1332\":8,\"1364\":1,\"1417\":1}}],[\"textviewlist\",{\"1\":{\"1364\":5}}],[\"textview\",{\"1\":{\"1313\":5,\"1364\":7,\"1598\":1,\"1610\":4,\"1645\":1}}],[\"textappearancespan\",{\"1\":{\"1310\":1}}],[\"text\",{\"0\":{\"28\":1},\"1\":{\"28\":1,\"615\":1,\"1323\":1,\"1335\":1,\"1383\":1,\"1402\":3,\"1416\":1,\"1459\":1,\"1613\":1,\"1666\":1,\"1685\":3,\"1708\":1,\"1709\":2}}],[\"type类型\",{\"1\":{\"1768\":1}}],[\"typename\",{\"1\":{\"1604\":3}}],[\"typemirror\",{\"1\":{\"1604\":4}}],[\"typeelement>\",{\"1\":{\"1604\":1}}],[\"typeelement\",{\"1\":{\"1604\":17}}],[\"typebuilder\",{\"1\":{\"1601\":5}}],[\"typedef\",{\"1\":{\"1530\":8}}],[\"typedarray\",{\"1\":{\"70\":1}}],[\"type中把\",{\"1\":{\"1491\":1}}],[\"typespec\",{\"1\":{\"1601\":2,\"1604\":3}}],[\"typesbysubscriber\",{\"1\":{\"1546\":2}}],[\"types\",{\"1\":{\"1417\":1,\"1491\":1,\"1604\":6}}],[\"typeof<t>\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"typeof<blocprovider<t>>\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"type=\",{\"1\":{\"1335\":1}}],[\"typefacespan\",{\"1\":{\"1310\":1}}],[\"type>\",{\"1\":{\"672\":1}}],[\"type`\",{\"1\":{\"615\":1}}],[\"type\",{\"1\":{\"58\":1,\"115\":3,\"435\":2,\"614\":1,\"615\":2,\"622\":1,\"630\":1,\"651\":2,\"652\":1,\"978\":1,\"984\":2,\"1002\":1,\"1009\":2,\"1022\":1,\"1029\":2,\"1030\":1,\"1036\":6,\"1044\":1,\"1055\":1,\"1062\":1,\"1063\":1,\"1064\":1,\"1070\":1,\"1076\":1,\"1079\":2,\"1094\":3,\"1095\":1,\"1096\":1,\"1101\":1,\"1109\":4,\"1110\":6,\"1298\":3,\"1335\":4,\"1361\":2,\"1383\":3,\"1456\":1,\"1488\":1,\"1534\":1,\"1540\":1,\"1604\":3,\"1666\":3,\"1712\":1,\"1717\":1,\"1770\":6,\"1799\":2,\"1960\":1,\"1963\":1,\"1966\":3}}],[\"th\",{\"1\":{\"1546\":1}}],[\"than\",{\"1\":{\"880\":1,\"1546\":1}}],[\"that\",{\"1\":{\"73\":1,\"351\":2,\"359\":1,\"631\":5,\"1399\":1,\"1682\":1}}],[\"those\",{\"1\":{\"631\":1}}],[\"thorcomponent组件化框架\",{\"0\":{\"1494\":1}}],[\"thoralone\",{\"1\":{\"1476\":2}}],[\"thor\",{\"1\":{\"61\":1,\"1476\":2}}],[\"throttle\",{\"1\":{\"1583\":2}}],[\"throwable\",{\"1\":{\"259\":4,\"447\":1,\"1035\":2,\"1036\":4,\"1374\":1,\"1416\":3,\"1530\":3,\"1546\":1,\"1589\":1,\"1592\":3,\"1846\":1,\"1867\":1}}],[\"throws\",{\"1\":{\"197\":1,\"259\":4,\"334\":2,\"409\":1,\"447\":1,\"870\":3,\"876\":2,\"880\":2,\"889\":1,\"896\":1,\"904\":1,\"1023\":1,\"1175\":1,\"1332\":1,\"1364\":1,\"1374\":1,\"1527\":1,\"1546\":1,\"1589\":1,\"1592\":4,\"1601\":1,\"1604\":3,\"1731\":2,\"1732\":2,\"1737\":3,\"1739\":5,\"1756\":2,\"1762\":1,\"1863\":2,\"1865\":1,\"1866\":2}}],[\"throw\",{\"1\":{\"70\":1,\"85\":1,\"334\":1,\"337\":1,\"338\":1,\"465\":4,\"876\":1,\"880\":1,\"882\":2,\"883\":1,\"886\":1,\"896\":2,\"1332\":2,\"1518\":1,\"1598\":2,\"1604\":1,\"1840\":1,\"1847\":2,\"1850\":1,\"1867\":2,\"1869\":1}}],[\"threw\",{\"1\":{\"1846\":1}}],[\"threshold\",{\"1\":{\"350\":2,\"352\":8,\"358\":1,\"897\":2}}],[\"threadloop\",{\"1\":{\"1778\":1}}],[\"threadlocal变量\",{\"1\":{\"385\":1}}],[\"threadlocal本身并不存储值\",{\"1\":{\"381\":1}}],[\"threadlocal创建的副本是存储在自己的threadlocals中的\",{\"1\":{\"381\":1}}],[\"threadlocalhashcode\",{\"1\":{\"381\":1}}],[\"threadlocal<long>\",{\"1\":{\"870\":2}}],[\"threadlocal<\",{\"1\":{\"381\":2}}],[\"threadlocal的实例以及其值存放在栈还是堆\",{\"0\":{\"383\":1}}],[\"threadlocal的引用\",{\"1\":{\"381\":1}}],[\"threadlocal的概念\",{\"0\":{\"379\":1}}],[\"threadlocals是thread类的一个属性\",{\"1\":{\"381\":1}}],[\"threadlocals\",{\"1\":{\"381\":3}}],[\"threadlocalmap实现中已经考虑了这种情况\",{\"1\":{\"385\":1}}],[\"threadlocalmap中使用这个\",{\"1\":{\"385\":1}}],[\"threadlocalmap中的内部类\",{\"1\":{\"381\":1}}],[\"threadlocalmap是一个定制化的hashmap\",{\"1\":{\"382\":1}}],[\"threadlocalmap是threadlocal的内部类\",{\"1\":{\"381\":1}}],[\"threadlocalmap底层结构\",{\"0\":{\"382\":1}}],[\"threadlocalmap的键为threadlocal对象\",{\"1\":{\"381\":1}}],[\"threadlocalmap\",{\"1\":{\"381\":8,\"385\":1}}],[\"threadlocalmap对象\",{\"1\":{\"381\":3}}],[\"threadlocal原理\",{\"0\":{\"381\":1}}],[\"threadlocal会为每一个线程提供一个独立的变量副本\",{\"1\":{\"380\":1}}],[\"threadlocal解决了什么问题\",{\"0\":{\"380\":1}}],[\"threadlocal\",{\"0\":{\"378\":1},\"1\":{\"379\":1,\"381\":3,\"382\":1,\"385\":3,\"870\":2,\"1240\":1,\"1843\":1}}],[\"thread或者binder\",{\"1\":{\"1755\":1}}],[\"threadmode\",{\"1\":{\"1546\":4}}],[\"thread方式过于浪费内存资源\",{\"1\":{\"1494\":1}}],[\"threadnum\",{\"1\":{\"950\":6,\"1527\":1}}],[\"threaded\",{\"0\":{\"935\":1}}],[\"threadpool<job\",{\"1\":{\"917\":1,\"950\":1}}],[\"threadpool<job>\",{\"1\":{\"917\":1,\"950\":1}}],[\"threadpool\",{\"1\":{\"907\":3,\"908\":9,\"917\":1}}],[\"threadpoolexecutor线程池\",{\"1\":{\"950\":1}}],[\"threadpoolexecutor\",{\"1\":{\"246\":1,\"247\":4,\"828\":4}}],[\"threads++\",{\"1\":{\"1770\":1}}],[\"threads\",{\"1\":{\"884\":2,\"1770\":4,\"1780\":2}}],[\"threadstate\",{\"1\":{\"867\":2}}],[\"thread2\",{\"1\":{\"870\":3}}],[\"thread1\",{\"1\":{\"870\":3}}],[\"threadfactory定制线程\",{\"1\":{\"950\":1}}],[\"threadfactory创建thread\",{\"1\":{\"938\":1}}],[\"threadfactory\",{\"1\":{\"246\":3,\"914\":1}}],[\"thread\",{\"0\":{\"938\":1,\"1780\":1},\"1\":{\"154\":8,\"381\":11,\"631\":1,\"822\":4,\"823\":3,\"867\":5,\"868\":6,\"869\":1,\"870\":8,\"876\":1,\"878\":2,\"879\":1,\"882\":3,\"883\":2,\"884\":4,\"886\":4,\"896\":3,\"904\":2,\"905\":2,\"907\":2,\"917\":4,\"926\":1,\"938\":2,\"942\":2,\"945\":7,\"950\":5,\"958\":4,\"984\":2,\"993\":14,\"994\":10,\"1003\":13,\"1036\":13,\"1044\":1,\"1094\":1,\"1101\":7,\"1224\":1,\"1230\":1,\"1320\":1,\"1527\":2,\"1604\":1,\"1730\":1,\"1755\":1,\"1761\":3,\"1762\":3,\"1768\":2,\"1770\":19,\"1776\":1,\"1778\":1,\"1839\":1,\"1866\":1,\"1867\":1,\"1869\":4}}],[\"thetask\",{\"1\":{\"1613\":4}}],[\"theanswer\",{\"1\":{\"1518\":2}}],[\"these\",{\"1\":{\"631\":1,\"1911\":1}}],[\"thenreturnfile\",{\"1\":{\"1558\":1}}],[\"then\",{\"1\":{\"94\":1,\"711\":5,\"1277\":2}}],[\"there\",{\"1\":{\"94\":1,\"631\":1}}],[\"themes\",{\"1\":{\"1960\":1}}],[\"themedata\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"theme\",{\"1\":{\"1320\":1,\"1389\":1,\"1402\":1,\"1672\":1,\"1685\":1,\"1867\":1,\"1960\":3,\"1961\":2}}],[\"them\",{\"1\":{\"73\":1}}],[\"the\",{\"0\":{\"46\":1,\"52\":1,\"64\":1,\"67\":1},\"1\":{\"67\":1,\"73\":4,\"94\":1,\"305\":1,\"334\":2,\"359\":1,\"362\":4,\"381\":1,\"631\":12,\"638\":1,\"879\":1,\"895\":1,\"1036\":1,\"1116\":1,\"1135\":1,\"1292\":1,\"1361\":1,\"1383\":1,\"1518\":2,\"1534\":2,\"1555\":1,\"1604\":4,\"1641\":1,\"1648\":8,\"1666\":1,\"1727\":1,\"1840\":1,\"1966\":1}}],[\"thisclass\",{\"1\":{\"1076\":1,\"1081\":1}}],[\"thisisnotavalidpasswordthatcanbeusedhere\",{\"1\":{\"614\":2,\"615\":2,\"622\":1,\"630\":2}}],[\"this\",{\"0\":{\"82\":1},\"1\":{\"73\":1,\"94\":4,\"169\":1,\"237\":1,\"259\":2,\"332\":1,\"338\":4,\"342\":1,\"350\":2,\"351\":1,\"359\":2,\"368\":11,\"381\":7,\"409\":2,\"422\":10,\"441\":2,\"447\":2,\"459\":1,\"465\":1,\"471\":1,\"483\":10,\"489\":8,\"495\":3,\"507\":1,\"513\":1,\"519\":1,\"525\":5,\"531\":8,\"537\":1,\"543\":5,\"631\":7,\"884\":1,\"895\":1,\"896\":1,\"897\":2,\"900\":5,\"908\":2,\"917\":5,\"923\":2,\"926\":2,\"929\":1,\"958\":2,\"993\":1,\"995\":1,\"1023\":8,\"1030\":6,\"1036\":4,\"1076\":1,\"1305\":4,\"1307\":3,\"1312\":1,\"1313\":4,\"1332\":10,\"1383\":2,\"1392\":3,\"1402\":30,\"1416\":2,\"1417\":3,\"1474\":1,\"1518\":2,\"1546\":4,\"1592\":2,\"1598\":6,\"1601\":5,\"1604\":5,\"1610\":5,\"1627\":1,\"1644\":1,\"1646\":2,\"1648\":1,\"1666\":2,\"1675\":3,\"1685\":30,\"1732\":3,\"1736\":1,\"1738\":2,\"1739\":5,\"1756\":2,\"1762\":1,\"1772\":1,\"1798\":1,\"1840\":2,\"1841\":2,\"1846\":2,\"1847\":2,\"1849\":2,\"1850\":2,\"1911\":1}}],[\"thing\",{\"1\":{\"12\":1,\"731\":1}}],[\"third\",{\"1\":{\"12\":4,\"731\":4,\"1867\":1}}],[\"thirdpart\",{\"1\":{\"12\":1,\"731\":1}}],[\"t\",{\"0\":{\"40\":1},\"1\":{\"40\":1,\"259\":6,\"328\":1,\"359\":1,\"381\":21,\"416\":3,\"447\":2,\"543\":3,\"631\":4,\"879\":6,\"895\":11,\"896\":3,\"1063\":1,\"1101\":1,\"1383\":3,\"1456\":3,\"1503\":2,\"1506\":3,\"1518\":3,\"1530\":6,\"1592\":6,\"1666\":3,\"1717\":10,\"1727\":6,\"1756\":10,\"1762\":1,\"1770\":9,\"1778\":7,\"1789\":14,\"1790\":13,\"1798\":9,\"1826\":3,\"1827\":4,\"1828\":6,\"1829\":1,\"1831\":2,\"1846\":2,\"1921\":1,\"1943\":1}}],[\"to=origin\",{\"1\":{\"1951\":1}}],[\"touch\",{\"1\":{\"1923\":1,\"1944\":1}}],[\"touppercase\",{\"1\":{\"1368\":1,\"1518\":1}}],[\"toup\",{\"1\":{\"489\":5}}],[\"toarray\",{\"1\":{\"1846\":1}}],[\"toastutil\",{\"1\":{\"1552\":1}}],[\"toastutils\",{\"1\":{\"1416\":1}}],[\"toast\",{\"1\":{\"1305\":4,\"1307\":6,\"1598\":2}}],[\"total\",{\"1\":{\"1534\":1}}],[\"totopof=\",{\"1\":{\"1346\":5}}],[\"tolist\",{\"1\":{\"1521\":2}}],[\"toleftof=\",{\"1\":{\"1346\":9}}],[\"toleft\",{\"1\":{\"489\":5}}],[\"toregex\",{\"1\":{\"1521\":1}}],[\"torightof=\",{\"1\":{\"1346\":14}}],[\"toright\",{\"1\":{\"489\":5}}],[\"tohexstring\",{\"1\":{\"1368\":1}}],[\"to是相对控件起始位置\",{\"1\":{\"1346\":1}}],[\"tobottomof=\",{\"1\":{\"1346\":6}}],[\"toclassname\",{\"1\":{\"1009\":2}}],[\"todescriptor\",{\"1\":{\"1009\":2}}],[\"todo\",{\"1\":{\"867\":1,\"869\":1,\"870\":3,\"874\":1,\"887\":1,\"984\":1,\"993\":2,\"1009\":1,\"1015\":4,\"1022\":1,\"1023\":2,\"1029\":1,\"1030\":2,\"1036\":4,\"1197\":3,\"1383\":1,\"1402\":3,\"1530\":1,\"1666\":1,\"1685\":3,\"1828\":1,\"1839\":1,\"1952\":3}}],[\"todown\",{\"1\":{\"489\":5}}],[\"tong\",{\"1\":{\"958\":1,\"1518\":7}}],[\"tonanos\",{\"1\":{\"876\":1,\"880\":1}}],[\"topframe\",{\"1\":{\"993\":2}}],[\"top\",{\"1\":{\"833\":3,\"1402\":6,\"1685\":6,\"1713\":1}}],[\"tool\",{\"1\":{\"1604\":1}}],[\"toolchains\",{\"1\":{\"1534\":4}}],[\"tools=$android\",{\"1\":{\"1371\":3}}],[\"tools\",{\"1\":{\"12\":1,\"52\":1,\"67\":1,\"73\":1,\"731\":1,\"1197\":1,\"1341\":2,\"1371\":6}}],[\"too\",{\"1\":{\"631\":1,\"1518\":1}}],[\"tomcat8\",{\"1\":{\"684\":5}}],[\"tomcat8安装\",{\"0\":{\"684\":1}}],[\"tomcat\",{\"1\":{\"368\":1,\"644\":1,\"684\":1,\"822\":4}}],[\"tostring\",{\"1\":{\"348\":1,\"543\":2,\"1332\":2,\"1349\":18,\"1352\":1,\"1364\":2,\"1518\":8,\"1601\":1,\"1604\":3,\"1660\":1,\"1737\":1,\"1738\":1}}],[\"to\",{\"0\":{\"40\":1,\"49\":1,\"76\":1,\"100\":1,\"1405\":1},\"1\":{\"40\":1,\"73\":3,\"94\":1,\"103\":2,\"332\":1,\"333\":1,\"334\":1,\"359\":6,\"363\":1,\"381\":1,\"441\":8,\"613\":1,\"629\":1,\"631\":11,\"651\":1,\"662\":1,\"672\":1,\"723\":1,\"879\":1,\"895\":1,\"1062\":1,\"1094\":1,\"1332\":1,\"1383\":3,\"1399\":4,\"1518\":6,\"1534\":1,\"1555\":3,\"1598\":1,\"1604\":1,\"1648\":1,\"1666\":3,\"1682\":4,\"1790\":1,\"1843\":2,\"1905\":3,\"1922\":1}}],[\"token>>32\",{\"1\":{\"1717\":2}}],[\"token记录着uid信息\",{\"1\":{\"1717\":1}}],[\"token=$\",{\"1\":{\"1335\":2}}],[\"token=\",{\"1\":{\"1335\":1}}],[\"token检查\",{\"1\":{\"1200\":1}}],[\"token\",{\"0\":{\"602\":1},\"1\":{\"12\":2,\"603\":1,\"731\":2,\"1198\":2,\"1335\":5,\"1377\":1,\"1717\":7,\"1849\":5}}],[\"系统内存\",{\"0\":{\"1875\":1}}],[\"系统内部系统地工作\",{\"1\":{\"453\":1}}],[\"系统默认为\",{\"1\":{\"1708\":2}}],[\"系统方法错误\",{\"1\":{\"1598\":1}}],[\"系统标准要求\",{\"1\":{\"1435\":1}}],[\"系统学习\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"系统定制商\",{\"1\":{\"1298\":1}}],[\"系统分配执行时间\",{\"1\":{\"1229\":1}}],[\"系统支持轻量级进程数量有限\",{\"1\":{\"1225\":1}}],[\"系统启动\",{\"0\":{\"1873\":1},\"1\":{\"904\":1}}],[\"系统输入流\",{\"1\":{\"870\":1}}],[\"系统上下文切换的次数就会少\",{\"1\":{\"822\":1}}],[\"系统对外的统一接口\",{\"1\":{\"453\":1}}],[\"系统接口\",{\"1\":{\"14\":1,\"733\":1}}],[\"系统登录日志记录查询包含登录异常\",{\"1\":{\"14\":1,\"733\":1}}],[\"系统异常信息日志记录和查询\",{\"1\":{\"14\":1,\"733\":1}}],[\"系统正常操作日志记录和查询\",{\"1\":{\"14\":1,\"733\":1}}],[\"系统通知公告信息发布维护\",{\"1\":{\"14\":1,\"733\":1}}],[\"系统模块\",{\"1\":{\"12\":1,\"731\":1}}],[\"系统服务能力\",{\"1\":{\"12\":1,\"731\":1}}],[\"系统结构\",{\"0\":{\"12\":1,\"731\":1}}],[\"定而后能静\",{\"1\":{\"1271\":1}}],[\"定期会议同步进度\",{\"1\":{\"598\":1}}],[\"定制rxbus2源代码\",{\"0\":{\"1639\":1}}],[\"定制化rxbus\",{\"1\":{\"1546\":1}}],[\"定制化支持\",{\"1\":{\"305\":1}}],[\"定制服务\",{\"1\":{\"753\":1}}],[\"定制若依\",{\"0\":{\"8\":1,\"727\":1}}],[\"定义消息处理逻辑\",{\"1\":{\"1839\":1}}],[\"定义myserviceproxy\",{\"1\":{\"1729\":1}}],[\"定义myservice\",{\"1\":{\"1729\":1}}],[\"定义imyservice接口\",{\"1\":{\"1729\":1}}],[\"定义命令字段\",{\"1\":{\"1727\":1}}],[\"定义方法\",{\"1\":{\"1727\":1}}],[\"定义注解\",{\"1\":{\"1604\":1}}],[\"定义注解传入关键参数\",{\"1\":{\"1604\":1}}],[\"定义task\",{\"1\":{\"1574\":1}}],[\"定义顶点数据\",{\"1\":{\"1540\":1}}],[\"定义二进制文件变量\",{\"1\":{\"1534\":1}}],[\"定义变量\",{\"1\":{\"1518\":1}}],[\"定义助记符\",{\"1\":{\"1093\":1}}],[\"定义205条指令\",{\"1\":{\"1093\":1}}],[\"定义接口\",{\"1\":{\"1064\":1}}],[\"定义jvm\",{\"1\":{\"1044\":1}}],[\"定义函数数组\",{\"1\":{\"1022\":1}}],[\"定义classloader\",{\"0\":{\"978\":1}}],[\"定义好的接口不要轻易改变\",{\"1\":{\"793\":1}}],[\"定义了以下几种类型\",{\"1\":{\"1713\":1}}],[\"定义了3个方法\",{\"1\":{\"738\":1}}],[\"定义了线程和主内存之间的抽象关系\",{\"1\":{\"151\":1}}],[\"定义几个指标\",{\"1\":{\"598\":1}}],[\"定义为final\",{\"1\":{\"501\":1}}],[\"定义车类型\",{\"1\":{\"435\":1}}],[\"定义车\",{\"1\":{\"435\":1}}],[\"定义不同类型车\",{\"1\":{\"435\":1}}],[\"定义\",{\"0\":{\"402\":1,\"413\":1,\"421\":1,\"427\":1,\"433\":1,\"440\":1,\"446\":1,\"452\":1,\"458\":1,\"464\":1,\"470\":1,\"476\":1,\"482\":1,\"488\":1,\"494\":1,\"500\":1,\"506\":1,\"512\":1,\"518\":1,\"524\":1,\"530\":1,\"536\":1,\"542\":1},\"1\":{\"359\":1,\"409\":1,\"751\":1,\"752\":1,\"753\":3,\"754\":1,\"1253\":1,\"1761\":1}}],[\"定义一系列算法\",{\"1\":{\"257\":1,\"395\":1,\"512\":1}}],[\"定义一个宏\",{\"1\":{\"1534\":1}}],[\"定义一个不可变的契约\",{\"1\":{\"802\":1}}],[\"定义一个语言\",{\"1\":{\"257\":1,\"395\":1,\"524\":1}}],[\"定义一个算法结构\",{\"1\":{\"257\":1,\"395\":1,\"500\":1}}],[\"定义一个用于创建对象的接口\",{\"1\":{\"257\":1,\"393\":1,\"413\":1}}],[\"定义它的文法的一种表示\",{\"1\":{\"257\":1,\"395\":1,\"524\":1}}],[\"定义类和对象的交互行为\",{\"1\":{\"257\":1,\"390\":1}}],[\"定时线程池\",{\"1\":{\"247\":2,\"828\":2,\"950\":1}}],[\"定时任务\",{\"1\":{\"12\":1,\"14\":1,\"731\":1,\"733\":1}}],[\"定时任务能力\",{\"1\":{\"12\":1,\"731\":1}}],[\"定位segment\",{\"1\":{\"894\":1}}],[\"定位到table中的位置\",{\"1\":{\"382\":1}}],[\"定位到table中的位置i\",{\"1\":{\"382\":1}}],[\"定位\",{\"1\":{\"52\":1}}],[\"gmail\",{\"1\":{\"1942\":1,\"1943\":1}}],[\"gpg生成秘钥\",{\"0\":{\"1927\":1}}],[\"gpg\",{\"1\":{\"1905\":1,\"1914\":1,\"1928\":1,\"1929\":1}}],[\"gprocess\",{\"1\":{\"1805\":4}}],[\"gprocessmutex\",{\"1\":{\"1805\":1}}],[\"gpu\",{\"1\":{\"1540\":2}}],[\"gfp\",{\"1\":{\"1770\":2}}],[\"gbinderproxyoffsets\",{\"1\":{\"1756\":2,\"1762\":2}}],[\"gdefaultservicemanagerlock\",{\"1\":{\"1805\":1}}],[\"gdefaultservicemanager\",{\"1\":{\"1805\":6}}],[\"gdefault\",{\"1\":{\"1756\":2}}],[\"ggdb\",{\"1\":{\"1534\":1}}],[\"guijiaoba\",{\"1\":{\"1580\":1}}],[\"gui\",{\"1\":{\"1552\":1,\"1937\":1,\"1970\":1}}],[\"guide\",{\"1\":{\"1534\":1}}],[\"guideline\",{\"1\":{\"1346\":1}}],[\"guiying712\",{\"1\":{\"1453\":1}}],[\"gun\",{\"1\":{\"1210\":1}}],[\"guy\",{\"1\":{\"1188\":5}}],[\"g为long对象\",{\"1\":{\"1203\":1}}],[\"g==\",{\"1\":{\"1203\":3}}],[\"g\",{\"1\":{\"1203\":6,\"1409\":1,\"1410\":1,\"1413\":1,\"1521\":2,\"1534\":1,\"1960\":3,\"1974\":1}}],[\"g1收集器\",{\"0\":{\"1145\":1}}],[\"gz\",{\"1\":{\"638\":2}}],[\"gluseprogram\",{\"1\":{\"1540\":1}}],[\"glumes\",{\"1\":{\"1530\":1}}],[\"gl\",{\"1\":{\"1540\":9}}],[\"gl10\",{\"1\":{\"1540\":3}}],[\"glsurfaceview与\",{\"1\":{\"1540\":1}}],[\"glsurfaceview\",{\"1\":{\"1540\":1}}],[\"gloablref\",{\"1\":{\"1527\":1}}],[\"global\",{\"1\":{\"615\":1,\"1413\":4,\"1937\":4,\"1938\":1,\"1942\":2,\"1952\":2,\"1970\":4}}],[\"glide\",{\"1\":{\"227\":1}}],[\"gids\",{\"1\":{\"1863\":1,\"1865\":1}}],[\"gid\",{\"1\":{\"1863\":1,\"1865\":1}}],[\"gif\",{\"1\":{\"1292\":1}}],[\"girls\",{\"1\":{\"1476\":4,\"1491\":1}}],[\"girl穿了打底裤\",{\"1\":{\"471\":1}}],[\"girl\",{\"1\":{\"471\":5}}],[\"gitalk\",{\"1\":{\"1962\":2}}],[\"git仓库文件\",{\"1\":{\"1961\":1}}],[\"git撤销与回滚\",{\"0\":{\"1955\":1}}],[\"gitconfig\",{\"1\":{\"1952\":1}}],[\"git配置\",{\"1\":{\"1952\":1}}],[\"gitignore\",{\"0\":{\"1952\":1},\"1\":{\"1952\":2}}],[\"gitignore配置\",{\"0\":{\"1941\":1},\"1\":{\"1952\":1}}],[\"git项目初始化\",{\"1\":{\"1944\":1,\"1945\":1}}],[\"git常用命令\",{\"0\":{\"1941\":1}}],[\"git命令中文乱码通常是因为git配置的默认编码与系统或终端的编码不一致导致的\",{\"1\":{\"1936\":1}}],[\"git命令中文乱码\",{\"0\":{\"1936\":1}}],[\"git相关\",{\"0\":{\"2003\":1},\"2\":{\"1906\":1,\"1909\":1,\"1912\":1,\"1915\":1,\"1918\":1,\"1925\":1,\"1931\":1,\"1932\":1,\"1934\":1,\"1939\":1,\"1940\":1,\"1953\":1,\"1956\":1,\"1964\":1,\"1967\":1}}],[\"giturl=https\",{\"1\":{\"1905\":1}}],[\"githang\",{\"1\":{\"1613\":1}}],[\"githubappweex\",{\"1\":{\"1944\":1,\"1945\":1,\"1946\":1,\"1950\":1}}],[\"github网站\",{\"1\":{\"1933\":1}}],[\"github生成远程依赖\",{\"0\":{\"1933\":1}}],[\"github地址\",{\"1\":{\"1905\":1}}],[\"githubusercontent\",{\"1\":{\"1905\":1}}],[\"github开源代码\",{\"0\":{\"1314\":1}}],[\"github怎么看都不满意\",{\"1\":{\"1302\":1}}],[\"github\",{\"0\":{\"1927\":1},\"1\":{\"79\":2,\"94\":3,\"249\":1,\"259\":1,\"268\":1,\"292\":1,\"295\":1,\"299\":1,\"406\":1,\"409\":1,\"417\":1,\"423\":1,\"429\":1,\"436\":1,\"442\":1,\"448\":1,\"454\":1,\"460\":1,\"466\":1,\"472\":1,\"478\":1,\"484\":1,\"490\":1,\"496\":1,\"502\":1,\"508\":1,\"514\":1,\"520\":1,\"526\":1,\"532\":1,\"538\":1,\"544\":1,\"825\":1,\"835\":1,\"854\":1,\"1030\":1,\"1289\":1,\"1292\":1,\"1304\":1,\"1314\":1,\"1317\":2,\"1320\":1,\"1329\":1,\"1346\":1,\"1383\":4,\"1399\":14,\"1413\":1,\"1453\":1,\"1476\":1,\"1488\":1,\"1491\":1,\"1503\":7,\"1509\":1,\"1527\":1,\"1530\":1,\"1534\":2,\"1540\":1,\"1549\":3,\"1552\":2,\"1555\":2,\"1558\":2,\"1561\":4,\"1564\":1,\"1568\":1,\"1571\":1,\"1577\":2,\"1583\":1,\"1589\":3,\"1592\":1,\"1595\":3,\"1598\":1,\"1601\":2,\"1604\":1,\"1607\":1,\"1610\":1,\"1616\":3,\"1620\":1,\"1623\":1,\"1629\":1,\"1632\":1,\"1639\":1,\"1642\":1,\"1647\":3,\"1666\":4,\"1682\":14,\"1690\":2,\"1905\":5,\"1911\":5,\"1921\":3,\"1922\":3,\"1923\":4,\"1927\":1,\"1933\":1,\"1944\":1,\"1945\":1,\"1946\":1,\"1950\":1,\"1959\":3,\"1960\":5,\"1961\":1,\"1962\":2}}],[\"gitbooks\",{\"1\":{\"1515\":1}}],[\"gityuan\",{\"1\":{\"1503\":1,\"1732\":4,\"1739\":13}}],[\"git地址\",{\"0\":{\"835\":1},\"1\":{\"1292\":1}}],[\"git\",{\"0\":{\"1920\":1,\"1958\":1},\"1\":{\"79\":17,\"91\":1,\"249\":1,\"259\":1,\"271\":1,\"980\":1,\"987\":1,\"998\":1,\"1004\":1,\"1011\":1,\"1018\":1,\"1025\":1,\"1031\":1,\"1038\":1,\"1045\":1,\"1051\":1,\"1057\":1,\"1065\":1,\"1071\":1,\"1082\":1,\"1089\":1,\"1097\":1,\"1104\":1,\"1111\":1,\"1399\":2,\"1620\":1,\"1682\":2,\"1690\":2,\"1905\":1,\"1917\":1,\"1924\":2,\"1937\":4,\"1938\":1,\"1942\":2,\"1944\":8,\"1945\":8,\"1946\":3,\"1947\":7,\"1948\":1,\"1949\":10,\"1950\":5,\"1951\":5,\"1955\":2,\"1959\":2,\"1960\":6,\"1961\":11,\"1970\":4}}],[\"giteement\",{\"1\":{\"1970\":1}}],[\"gitee博客评论\",{\"0\":{\"1969\":1}}],[\"gitee\",{\"0\":{\"1930\":1},\"1\":{\"8\":1,\"9\":1,\"271\":1,\"727\":1,\"728\":1,\"980\":1,\"987\":1,\"998\":1,\"1004\":1,\"1011\":1,\"1018\":1,\"1025\":1,\"1031\":1,\"1038\":1,\"1045\":1,\"1051\":1,\"1057\":1,\"1065\":1,\"1071\":1,\"1082\":1,\"1089\":1,\"1097\":1,\"1104\":1,\"1111\":1,\"1970\":1}}],[\"ga\",{\"1\":{\"1292\":1}}],[\"gausstest\",{\"1\":{\"1103\":1}}],[\"gate\",{\"1\":{\"935\":1}}],[\"gateway\",{\"1\":{\"12\":3,\"731\":3}}],[\"gamma1990年从建筑设计领域引入软件工程领域\",{\"1\":{\"742\":1}}],[\"gap\",{\"1\":{\"281\":8}}],[\"got\",{\"1\":{\"1727\":1}}],[\"goto到retry标志处\",{\"1\":{\"1770\":1}}],[\"gotoandplay\",{\"1\":{\"1713\":1}}],[\"goto\",{\"1\":{\"1096\":2,\"1798\":2,\"1828\":4}}],[\"goto指令\",{\"0\":{\"1096\":1}}],[\"governing\",{\"1\":{\"1648\":1}}],[\"gone\",{\"0\":{\"1392\":1,\"1675\":1},\"1\":{\"1392\":1,\"1567\":2,\"1675\":1,\"1712\":1}}],[\"gourl\",{\"1\":{\"1358\":2}}],[\"google\",{\"1\":{\"1289\":1,\"1292\":5,\"1338\":1,\"1435\":1,\"1905\":1}}],[\"google官网换最新androidstudio\",{\"1\":{\"34\":1}}],[\"gof点评\",{\"1\":{\"1253\":1}}],[\"go语言\",{\"1\":{\"1075\":1}}],[\"go语言不需要显式实现接口\",{\"1\":{\"1061\":1}}],[\"go命令\",{\"1\":{\"1056\":1}}],[\"gopath=$pwd\",{\"1\":{\"1056\":1,\"1070\":1}}],[\"goroot\",{\"1\":{\"1050\":1}}],[\"goroot=\",{\"1\":{\"1050\":1}}],[\"go的ide和安装包\",{\"1\":{\"1049\":1}}],[\"gomsg\",{\"1\":{\"1036\":2}}],[\"gostring\",{\"1\":{\"1030\":1,\"1036\":1}}],[\"gostr\",{\"1\":{\"1015\":6}}],[\"go默认赋了\",{\"1\":{\"1009\":1}}],[\"goalipays\",{\"1\":{\"1358\":2}}],[\"goal\",{\"1\":{\"305\":1}}],[\"go\",{\"0\":{\"996\":1},\"1\":{\"271\":1,\"986\":1,\"997\":2,\"1009\":4,\"1010\":1,\"1015\":4,\"1017\":3,\"1022\":1,\"1023\":1,\"1024\":4,\"1030\":3,\"1037\":3,\"1044\":1,\"1050\":2,\"1055\":1,\"1056\":4,\"1070\":4,\"1088\":1,\"1094\":1,\"1103\":1,\"1399\":1,\"1682\":1}}],[\"gcheckrecycle\",{\"1\":{\"1850\":1}}],[\"gcroot对象\",{\"1\":{\"1125\":1}}],[\"gcroots对象\",{\"1\":{\"200\":1}}],[\"gcroots不可达\",{\"1\":{\"145\":1}}],[\"gcutil\",{\"1\":{\"833\":1,\"1152\":1}}],[\"gcm\",{\"1\":{\"638\":1,\"1292\":1}}],[\"gc的原因包括\",{\"1\":{\"207\":1}}],[\"gc的次数\",{\"1\":{\"207\":1}}],[\"gc要慢\",{\"1\":{\"207\":1}}],[\"gc需要对整个堆进行回收\",{\"1\":{\"207\":1}}],[\"gc\",{\"1\":{\"154\":2,\"200\":1,\"207\":13,\"333\":1,\"879\":1,\"880\":1,\"1125\":1,\"1152\":1,\"1182\":1,\"1530\":3}}],[\"gc回收器发现它\",{\"1\":{\"154\":1}}],[\"gsygithubapp\",{\"1\":{\"1413\":1}}],[\"gsygithubappflutter\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"gsygithubappweex\",{\"1\":{\"94\":3}}],[\"gsy\",{\"1\":{\"94\":3}}],[\"greenrobot\",{\"1\":{\"1647\":1}}],[\"green\",{\"1\":{\"1518\":1}}],[\"grep\",{\"1\":{\"118\":1,\"711\":5,\"715\":1,\"822\":1,\"834\":4,\"1056\":1,\"1335\":1}}],[\"grid>row>griditem\",{\"1\":{\"1712\":1}}],[\"gridlayout\",{\"1\":{\"1567\":1}}],[\"grid\",{\"1\":{\"314\":3,\"1709\":1}}],[\"groovy基础\",{\"1\":{\"1574\":1}}],[\"groovy下载\",{\"1\":{\"1555\":1}}],[\"groovy\",{\"1\":{\"1488\":1,\"1555\":2,\"1905\":1}}],[\"groovy脚本\",{\"1\":{\"305\":1}}],[\"grow\",{\"1\":{\"332\":3,\"338\":1}}],[\"groupid\",{\"1\":{\"1966\":1}}],[\"groupid>\",{\"1\":{\"672\":4}}],[\"groupby\",{\"1\":{\"1521\":2}}],[\"groups\",{\"1\":{\"124\":1,\"1462\":1}}],[\"group\",{\"1\":{\"52\":2,\"537\":6,\"631\":2,\"1329\":1,\"1488\":1,\"1555\":2,\"1613\":2,\"1787\":1,\"1911\":1}}],[\"gravity=\",{\"1\":{\"1346\":8}}],[\"grant\",{\"1\":{\"613\":1,\"614\":1,\"619\":1,\"622\":1,\"629\":1,\"630\":1,\"1416\":2,\"1417\":1}}],[\"gradle设置\",{\"1\":{\"1911\":1}}],[\"gradle经过优化的\",{\"1\":{\"1905\":1}}],[\"gradle从入门到实战\",{\"1\":{\"1574\":1}}],[\"gradle脚本编写\",{\"0\":{\"1488\":1}}],[\"gradle的配置\",{\"1\":{\"1481\":1}}],[\"gradle配置\",{\"1\":{\"1476\":2}}],[\"gradlew\",{\"1\":{\"1289\":1,\"1911\":1}}],[\"gradle插件编写\",{\"0\":{\"1574\":1}}],[\"gradle插件\",{\"2\":{\"560\":1}}],[\"gradle\",{\"0\":{\"52\":1},\"1\":{\"34\":1,\"52\":2,\"1289\":1,\"1292\":4,\"1317\":1,\"1374\":1,\"1476\":3,\"1491\":4,\"1574\":2,\"1595\":1,\"1607\":1,\"1613\":1,\"1632\":1,\"1641\":1,\"1905\":9,\"1911\":3,\"1952\":1,\"1966\":3}}],[\"grafana\",{\"1\":{\"12\":1,\"731\":1}}],[\"geolocation\",{\"1\":{\"1416\":1}}],[\"gesturedetector\",{\"1\":{\"1402\":4,\"1685\":4}}],[\"gethandler\",{\"1\":{\"1869\":1}}],[\"getqualifiedname\",{\"1\":{\"1604\":2}}],[\"getqueuedthreads\",{\"1\":{\"884\":3}}],[\"getwindow\",{\"1\":{\"1598\":3,\"1610\":2}}],[\"getuid\",{\"1\":{\"1717\":1}}],[\"getupdateinfo2\",{\"1\":{\"1595\":1}}],[\"getupdateinfo\",{\"1\":{\"1595\":1}}],[\"geturiforfile\",{\"1\":{\"1417\":1}}],[\"getbootclasspath\",{\"1\":{\"1966\":1}}],[\"getbundleinfo\",{\"1\":{\"1702\":1}}],[\"getbytes\",{\"1\":{\"1552\":1}}],[\"getbeanstr\",{\"1\":{\"1552\":1}}],[\"getbaseparams\",{\"1\":{\"1332\":1}}],[\"getnativestring\",{\"1\":{\"1527\":1}}],[\"getname0\",{\"1\":{\"1030\":4}}],[\"getname\",{\"1\":{\"416\":1,\"465\":3,\"495\":2,\"900\":3,\"929\":1,\"958\":2,\"1527\":1,\"1552\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1736\":1}}],[\"getgenericreturntype\",{\"1\":{\"1456\":1,\"1592\":1}}],[\"getgenericsuperclass\",{\"1\":{\"447\":1,\"1456\":1}}],[\"getobj\",{\"1\":{\"1622\":1}}],[\"getobslist\",{\"1\":{\"1364\":2}}],[\"getoptions\",{\"1\":{\"1604\":1}}],[\"getoffset\",{\"1\":{\"1555\":1}}],[\"getold\",{\"1\":{\"900\":3}}],[\"getjiagupath\",{\"1\":{\"1613\":3}}],[\"getjiaguproperty\",{\"1\":{\"1613\":3}}],[\"getjredir\",{\"1\":{\"1063\":2}}],[\"getjobsize\",{\"1\":{\"917\":4,\"950\":2}}],[\"getlength\",{\"1\":{\"1527\":1}}],[\"getlogging\",{\"1\":{\"1329\":2}}],[\"getlong\",{\"1\":{\"984\":2}}],[\"getlaunchintentforpackage\",{\"1\":{\"1326\":1}}],[\"getlinenumber\",{\"1\":{\"1036\":2}}],[\"getpid\",{\"1\":{\"1717\":1,\"1735\":1,\"1736\":2,\"1737\":2,\"1739\":6}}],[\"getpsielement\",{\"1\":{\"1555\":1}}],[\"getpsiclass\",{\"1\":{\"1552\":1}}],[\"getproperty\",{\"1\":{\"1613\":1}}],[\"getproject\",{\"1\":{\"1552\":4}}],[\"getprimitivearraycritical\",{\"1\":{\"1530\":1}}],[\"getprimitivearrayclass\",{\"1\":{\"1009\":2}}],[\"getprimitiveclass\",{\"1\":{\"1030\":4}}],[\"getpagecontractview\",{\"1\":{\"1552\":1}}],[\"getparametertypes\",{\"1\":{\"1546\":1}}],[\"getparentfile\",{\"1\":{\"1417\":2}}],[\"getparent\",{\"1\":{\"1416\":1}}],[\"getpath\",{\"1\":{\"1416\":3}}],[\"getpackagemanager\",{\"1\":{\"1326\":2,\"1358\":1}}],[\"getpackagename\",{\"1\":{\"1109\":4,\"1417\":1}}],[\"getpoolsize\",{\"1\":{\"916\":1}}],[\"getdefault\",{\"1\":{\"1644\":1,\"1645\":1,\"1646\":2,\"1756\":2}}],[\"getdecorview\",{\"1\":{\"1598\":3,\"1610\":2}}],[\"getdeclaredmethod\",{\"1\":{\"1592\":1}}],[\"getdeclaredmethods\",{\"1\":{\"1546\":1}}],[\"getdeclaredannotations\",{\"1\":{\"1592\":1}}],[\"getdeclaredfield\",{\"1\":{\"154\":1,\"1592\":3}}],[\"getdir\",{\"1\":{\"1416\":3}}],[\"getdisplaymetrics\",{\"1\":{\"1295\":1}}],[\"getdata2\",{\"1\":{\"1736\":1,\"1738\":1}}],[\"getdata1\",{\"1\":{\"1736\":1,\"1738\":1}}],[\"getdata\",{\"1\":{\"1383\":1,\"1417\":2,\"1666\":1}}],[\"getdrawable\",{\"1\":{\"1305\":2}}],[\"getdouble\",{\"1\":{\"984\":2}}],[\"getforthread\",{\"1\":{\"1829\":1}}],[\"getfactory\",{\"1\":{\"1552\":1}}],[\"getfloat\",{\"1\":{\"984\":2}}],[\"getfiler\",{\"1\":{\"1604\":1}}],[\"getfilebyname\",{\"1\":{\"1552\":1}}],[\"getfilesbyname\",{\"1\":{\"1552\":2}}],[\"getfilesdir\",{\"1\":{\"1417\":1}}],[\"getfiles\",{\"1\":{\"465\":3}}],[\"getfieldid\",{\"1\":{\"1527\":1}}],[\"getfield\",{\"1\":{\"983\":2,\"984\":1,\"1008\":1,\"1015\":5}}],[\"get操作\",{\"1\":{\"894\":1}}],[\"gettypeelement\",{\"1\":{\"1604\":6}}],[\"gettypeutils\",{\"1\":{\"1604\":1}}],[\"gettypearrayregion\",{\"1\":{\"1530\":1}}],[\"gettwodimensionalarray\",{\"1\":{\"1527\":1}}],[\"gettaskinfo\",{\"1\":{\"1474\":1}}],[\"gettext\",{\"1\":{\"1349\":4,\"1364\":1,\"1555\":1}}],[\"getter\",{\"1\":{\"1110\":1}}],[\"getthis\",{\"1\":{\"1023\":3,\"1030\":3,\"1036\":1,\"1589\":1}}],[\"getthreadcount\",{\"1\":{\"950\":2}}],[\"getthreadid\",{\"1\":{\"886\":1}}],[\"getting\",{\"1\":{\"1555\":2}}],[\"getticket\",{\"1\":{\"441\":4}}],[\"gettitle\",{\"1\":{\"409\":1}}],[\"getelementsannotatedwith\",{\"1\":{\"1604\":1}}],[\"getelementutils\",{\"1\":{\"1604\":1}}],[\"getexecutorservice\",{\"1\":{\"1546\":1}}],[\"getexclusiveownerthread\",{\"1\":{\"882\":2,\"883\":1,\"886\":2}}],[\"getenclosingelement\",{\"1\":{\"1604\":1}}],[\"getenv\",{\"1\":{\"1063\":1,\"1966\":1}}],[\"getentry\",{\"1\":{\"381\":1}}],[\"getrootdir\",{\"1\":{\"1613\":2}}],[\"getroutesbyviews\",{\"1\":{\"667\":2}}],[\"getreturnstring\",{\"1\":{\"1527\":1}}],[\"getreturntye\",{\"1\":{\"1456\":1,\"1592\":1}}],[\"getresources\",{\"1\":{\"1295\":3,\"1305\":1}}],[\"getrefvar\",{\"1\":{\"1015\":2,\"1036\":1}}],[\"getreffromtop\",{\"1\":{\"993\":2}}],[\"getref\",{\"1\":{\"984\":2,\"1015\":2,\"1030\":1}}],[\"getreference\",{\"1\":{\"853\":1}}],[\"getruntime\",{\"1\":{\"248\":1,\"358\":1,\"828\":1}}],[\"getvisibility\",{\"1\":{\"1567\":2}}],[\"getvirtualfile\",{\"1\":{\"1552\":1}}],[\"getversioncode\",{\"1\":{\"1332\":1}}],[\"getvolt220\",{\"1\":{\"477\":1}}],[\"getvolt5\",{\"1\":{\"477\":3}}],[\"getvalue\",{\"1\":{\"348\":5,\"1332\":3,\"1604\":1}}],[\"getsystemcontext\",{\"1\":{\"1867\":1}}],[\"getsystemclassloader\",{\"1\":{\"1866\":1}}],[\"getsupportedannotationtypes\",{\"1\":{\"1604\":1}}],[\"getsupportedsourceversion\",{\"1\":{\"1604\":1}}],[\"getsupportedoptions\",{\"1\":{\"1604\":1}}],[\"getsuperclass\",{\"1\":{\"447\":2,\"1598\":1}}],[\"getstringchars\",{\"1\":{\"1530\":1}}],[\"getstringutfchars\",{\"1\":{\"1530\":1}}],[\"getstringlength\",{\"1\":{\"1518\":1}}],[\"getstringextra\",{\"1\":{\"1468\":2}}],[\"getstringdata\",{\"1\":{\"1332\":1}}],[\"getstatic\",{\"1\":{\"983\":2,\"984\":1,\"1002\":1,\"1003\":1,\"1169\":2}}],[\"getstate\",{\"1\":{\"876\":3,\"880\":2,\"882\":2,\"883\":1,\"886\":2}}],[\"getstamp\",{\"1\":{\"853\":1}}],[\"getsimplename\",{\"1\":{\"1320\":1,\"1601\":1,\"1604\":4}}],[\"getselectionmodel\",{\"1\":{\"1555\":1}}],[\"getselectedtext\",{\"1\":{\"1555\":2}}],[\"getsettings\",{\"1\":{\"1416\":1}}],[\"getsex\",{\"1\":{\"495\":2}}],[\"getservice方法最终是交由mremote来完成\",{\"1\":{\"1751\":1}}],[\"getservice实际工作都交由servicemanagerproxy的相应方法来处理\",{\"1\":{\"1751\":1}}],[\"getservice\",{\"1\":{\"405\":1,\"1731\":1,\"1744\":1,\"1756\":1,\"1799\":2}}],[\"getid\",{\"1\":{\"884\":1,\"1736\":1}}],[\"getimages\",{\"1\":{\"409\":1}}],[\"getins\",{\"1\":{\"1626\":2,\"1627\":1}}],[\"getinstance\",{\"1\":{\"404\":1,\"405\":3,\"863\":1,\"864\":1,\"1320\":2,\"1332\":1,\"1417\":1,\"1468\":5,\"1552\":1}}],[\"getintarray\",{\"1\":{\"1527\":1}}],[\"getinterfacedescriptor\",{\"1\":{\"1727\":1,\"1731\":1,\"1739\":1,\"1798\":1,\"1799\":1,\"1806\":2}}],[\"getinterfaces\",{\"1\":{\"259\":1}}],[\"getintent\",{\"1\":{\"1468\":2}}],[\"getint\",{\"1\":{\"268\":1,\"984\":2}}],[\"getmydata\",{\"1\":{\"1735\":1,\"1736\":1,\"1737\":2,\"1739\":6}}],[\"getmsg\",{\"1\":{\"1645\":1}}],[\"getmodifiers\",{\"1\":{\"1546\":1,\"1604\":1,\"1840\":1}}],[\"getmediaplayerservice\",{\"1\":{\"1799\":1}}],[\"getmethods\",{\"1\":{\"1546\":2}}],[\"getmethodid重复调用\",{\"1\":{\"1527\":1}}],[\"getmessager\",{\"1\":{\"1604\":1}}],[\"getmessage\",{\"1\":{\"154\":1}}],[\"getmainmethod\",{\"1\":{\"985\":1,\"996\":1,\"1044\":1,\"1102\":1}}],[\"getmap\",{\"1\":{\"381\":5}}],[\"getkey\",{\"1\":{\"348\":5,\"1332\":3,\"1604\":1}}],[\"getabsolutepath\",{\"1\":{\"1613\":2}}],[\"getappfilepath\",{\"1\":{\"1613\":2}}],[\"getapplicationinfo\",{\"1\":{\"70\":1,\"1326\":1}}],[\"getargs\",{\"1\":{\"1589\":1}}],[\"getarraylength\",{\"1\":{\"1530\":1}}],[\"getarrayclassname\",{\"1\":{\"1009\":1}}],[\"getarray\",{\"1\":{\"342\":1}}],[\"getancillaryfiledescriptors\",{\"1\":{\"1863\":1}}],[\"getannotations\",{\"1\":{\"1592\":1}}],[\"getannotation\",{\"1\":{\"1546\":1,\"1592\":1,\"1604\":1}}],[\"getanimalnum\",{\"1\":{\"1527\":1}}],[\"getandexecutecommand\",{\"1\":{\"1778\":1}}],[\"getandadd\",{\"1\":{\"917\":1}}],[\"getandset\",{\"1\":{\"900\":1}}],[\"getandincrement\",{\"1\":{\"900\":3}}],[\"getallprojects\",{\"1\":{\"1488\":1}}],[\"getaccepttypes\",{\"1\":{\"1416\":1}}],[\"getactivity\",{\"1\":{\"1358\":1}}],[\"getactivecount\",{\"1\":{\"916\":1}}],[\"getaction\",{\"1\":{\"1320\":1}}],[\"getactualtypearguments\",{\"1\":{\"447\":1,\"1456\":2}}],[\"getage\",{\"1\":{\"495\":2}}],[\"getcanonicalname\",{\"1\":{\"1840\":1}}],[\"getcaretmodel\",{\"1\":{\"1555\":1}}],[\"getcatchtype\",{\"1\":{\"1036\":2}}],[\"getcomponentclassname\",{\"1\":{\"1009\":1}}],[\"getcon\",{\"1\":{\"1788\":1}}],[\"getconstructor\",{\"1\":{\"1598\":1}}],[\"getconstant\",{\"1\":{\"984\":7,\"993\":3,\"1015\":1,\"1036\":1,\"1110\":1}}],[\"getcontext\",{\"1\":{\"1416\":1}}],[\"getcontent\",{\"1\":{\"926\":5}}],[\"getcontentresolver\",{\"1\":{\"268\":2}}],[\"getclearresponsebean\",{\"1\":{\"1552\":2}}],[\"getclinitmethod\",{\"1\":{\"1003\":1}}],[\"getclassesbyname\",{\"1\":{\"1552\":1}}],[\"getclasstest\",{\"1\":{\"1024\":1}}],[\"getclassloader\",{\"1\":{\"259\":4,\"447\":2,\"1589\":1,\"1592\":2,\"1598\":1}}],[\"getclass\",{\"1\":{\"154\":2,\"259\":3,\"447\":3,\"1023\":4,\"1456\":1,\"1546\":3,\"1592\":4,\"1598\":1,\"1840\":1}}],[\"get\",{\"1\":{\"12\":1,\"88\":3,\"337\":1,\"342\":1,\"359\":1,\"362\":1,\"365\":1,\"368\":4,\"381\":3,\"385\":2,\"405\":1,\"441\":1,\"543\":2,\"650\":1,\"651\":1,\"652\":1,\"684\":1,\"701\":2,\"702\":1,\"707\":1,\"711\":2,\"731\":1,\"852\":1,\"870\":1,\"885\":2,\"886\":1,\"897\":1,\"900\":6,\"917\":5,\"950\":2,\"958\":1,\"984\":2,\"1239\":1,\"1283\":1,\"1326\":1,\"1329\":1,\"1332\":1,\"1335\":2,\"1417\":2,\"1518\":3,\"1521\":2,\"1546\":6,\"1592\":1,\"1595\":2,\"1598\":1,\"1604\":7,\"1628\":1,\"1690\":1,\"1713\":1,\"1727\":1,\"1756\":2,\"1770\":1,\"1806\":1,\"1851\":1}}],[\"genneratehelper\",{\"1\":{\"1604\":2}}],[\"genneratecode\",{\"1\":{\"1601\":2}}],[\"genericdeclaration\",{\"1\":{\"1030\":1}}],[\"generalization\",{\"1\":{\"735\":2}}],[\"general\",{\"1\":{\"631\":1}}],[\"generated\",{\"1\":{\"1601\":2,\"1604\":1,\"1610\":1}}],[\"generatedebugrfile\",{\"1\":{\"103\":1}}],[\"generategroup\",{\"1\":{\"1555\":1}}],[\"generatemd5\",{\"1\":{\"1352\":1,\"1660\":1}}],[\"generate\",{\"1\":{\"1197\":1,\"1549\":1}}],[\"generation\",{\"1\":{\"1119\":1}}],[\"generating\",{\"0\":{\"46\":1,\"52\":1},\"1\":{\"1534\":1}}],[\"gen\",{\"1\":{\"12\":4,\"731\":4,\"1928\":1}}],[\"fp\",{\"1\":{\"1770\":1}}],[\"fb538da65d28\",{\"1\":{\"1613\":1}}],[\"fstatefulmvp\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"ff\",{\"1\":{\"1367\":1}}],[\"fc\",{\"1\":{\"1367\":1}}],[\"f7\",{\"1\":{\"1367\":1}}],[\"f5\",{\"1\":{\"1367\":1}}],[\"f5514b1a826c\",{\"1\":{\"1320\":1}}],[\"f2\",{\"1\":{\"1367\":1}}],[\"f0\",{\"1\":{\"1367\":1}}],[\"f671dd76868f\",{\"1\":{\"1503\":1}}],[\"f67\",{\"1\":{\"1346\":2}}],[\"fmt\",{\"1\":{\"979\":1,\"985\":1,\"993\":1,\"996\":1,\"1036\":1,\"1044\":1,\"1055\":2,\"1056\":3,\"1064\":3,\"1070\":1,\"1101\":4,\"1102\":1,\"1110\":1}}],[\"flex\",{\"1\":{\"1402\":3,\"1685\":3}}],[\"fliu\",{\"1\":{\"1386\":1,\"1669\":1}}],[\"flistviewmvp\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"flatdir\",{\"1\":{\"1966\":1}}],[\"flatmap\",{\"1\":{\"1521\":2}}],[\"flash\",{\"1\":{\"1320\":1}}],[\"flag\",{\"1\":{\"870\":4,\"1055\":9,\"1062\":1,\"1070\":1,\"1326\":5,\"1417\":1,\"1534\":1,\"1846\":1,\"1850\":2}}],[\"flags\",{\"1\":{\"237\":1,\"1076\":1,\"1310\":2,\"1313\":2,\"1534\":2,\"1717\":1,\"1727\":2,\"1732\":2,\"1737\":2,\"1738\":1,\"1739\":2,\"1756\":10,\"1762\":6,\"1798\":1,\"1850\":2}}],[\"flow\",{\"1\":{\"1197\":1,\"1198\":1,\"1200\":1}}],[\"floatbuffer\",{\"1\":{\"1540\":5}}],[\"float32\",{\"1\":{\"984\":2}}],[\"float64\",{\"1\":{\"984\":2}}],[\"float\",{\"1\":{\"352\":2,\"358\":1,\"1009\":2,\"1182\":1,\"1368\":1,\"1530\":4,\"1540\":4}}],[\"flux效果\",{\"1\":{\"1389\":1,\"1672\":1}}],[\"flushpendingcommands\",{\"1\":{\"1846\":1}}],[\"flush\",{\"1\":{\"613\":1,\"619\":1,\"621\":1,\"629\":1,\"631\":1,\"695\":1,\"1772\":2}}],[\"flutter采用dart语言\",{\"1\":{\"1694\":1}}],[\"flutter用dart编写\",{\"1\":{\"1689\":1}}],[\"flutter学习\",{\"2\":{\"1661\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1673\":1,\"1676\":1,\"1679\":1,\"1683\":1,\"1686\":1}}],[\"flutter学习思路\",{\"0\":{\"1399\":1,\"1682\":1},\"1\":{\"1398\":1,\"1399\":1,\"1681\":1,\"1682\":1}}],[\"flutter的布局嵌套层次太多\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"flutter解决布局嵌套问题\",{\"0\":{\"1402\":1,\"1685\":1}}],[\"flutter实战\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"flutter实践学习\",{\"0\":{\"1398\":1,\"1681\":1}}],[\"flutterchina\",{\"1\":{\"1399\":3,\"1682\":3}}],[\"fluttertoast\",{\"1\":{\"1399\":1,\"1402\":1,\"1682\":1,\"1685\":1}}],[\"flutter开发工具\",{\"1\":{\"1398\":1,\"1681\":1}}],[\"flutter简易启动框架\",{\"1\":{\"1398\":1,\"1681\":1}}],[\"flutter上层ui编写\",{\"1\":{\"1395\":1,\"1678\":1}}],[\"flutter业务层编写思路\",{\"0\":{\"1395\":1,\"1678\":1}}],[\"flutter处处体现widget\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"flutter\",{\"0\":{\"97\":1,\"1352\":1,\"1355\":1,\"1383\":1,\"1386\":1,\"1389\":1,\"1392\":1,\"1660\":1,\"1663\":1,\"1666\":1,\"1669\":1,\"1672\":1,\"1675\":1,\"1688\":1,\"2001\":1},\"1\":{\"1383\":6,\"1392\":1,\"1399\":12,\"1402\":3,\"1666\":6,\"1675\":1,\"1682\":12,\"1685\":3,\"1689\":1,\"1690\":3,\"1694\":1}}],[\"feishu2md\",{\"0\":{\"1978\":1}}],[\"feign\",{\"1\":{\"12\":2,\"731\":2}}],[\"feature\",{\"1\":{\"1947\":6}}],[\"features\",{\"1\":{\"1399\":1,\"1534\":4,\"1682\":1}}],[\"fetchalonestatus\",{\"1\":{\"1475\":1}}],[\"fetchoperands\",{\"1\":{\"994\":1,\"1094\":3,\"1101\":2}}],[\"fetch\",{\"1\":{\"949\":1}}],[\"fe\",{\"2\":{\"563\":1,\"565\":1,\"567\":1,\"577\":1,\"1972\":1,\"1976\":1,\"1980\":1}}],[\"few\",{\"1\":{\"94\":3,\"359\":1}}],[\"fultter也要提供相应的支持\",{\"1\":{\"1392\":1,\"1675\":1}}],[\"fullname\",{\"1\":{\"1552\":2}}],[\"fullyrelease\",{\"1\":{\"896\":1}}],[\"fulltryacquireshared\",{\"1\":{\"886\":1}}],[\"full\",{\"1\":{\"207\":5,\"631\":1,\"879\":1}}],[\"fullscreen\",{\"0\":{\"70\":1},\"1\":{\"70\":1}}],[\"fun\",{\"1\":{\"1101\":1,\"1506\":3,\"1518\":25,\"1521\":4}}],[\"func\",{\"1\":{\"978\":2,\"979\":8,\"984\":9,\"985\":1,\"992\":1,\"993\":6,\"994\":2,\"996\":1,\"1002\":2,\"1003\":4,\"1009\":14,\"1015\":7,\"1016\":2,\"1022\":7,\"1023\":4,\"1030\":11,\"1036\":13,\"1044\":6,\"1055\":2,\"1056\":2,\"1062\":1,\"1063\":6,\"1064\":2,\"1070\":2,\"1077\":1,\"1078\":1,\"1081\":2,\"1094\":3,\"1095\":1,\"1096\":1,\"1101\":3,\"1102\":2,\"1109\":5,\"1110\":8,\"1332\":1,\"1402\":6,\"1685\":6,\"1789\":5,\"1790\":1}}],[\"function<object\",{\"1\":{\"1364\":1}}],[\"function\",{\"1\":{\"351\":1,\"652\":1,\"667\":1,\"1323\":3,\"1335\":2,\"1402\":6,\"1459\":3,\"1534\":1,\"1685\":6}}],[\"futuretask\",{\"1\":{\"926\":1}}],[\"futuredata\",{\"1\":{\"926\":6}}],[\"futuredata提货单\",{\"1\":{\"926\":1}}],[\"future模式\",{\"0\":{\"926\":1}}],[\"future<integer>\",{\"1\":{\"897\":1}}],[\"future\",{\"1\":{\"73\":1,\"870\":2,\"926\":1,\"949\":2,\"950\":2,\"958\":2,\"1383\":3,\"1399\":1,\"1666\":3,\"1682\":1}}],[\"fops\",{\"1\":{\"1772\":3}}],[\"fontfamily\",{\"1\":{\"1709\":1}}],[\"fontweight\",{\"1\":{\"1709\":1}}],[\"fontstyle\",{\"1\":{\"1709\":1}}],[\"fontsize\",{\"1\":{\"1709\":2}}],[\"fontcolor\",{\"1\":{\"1709\":1}}],[\"foo\",{\"1\":{\"1518\":9}}],[\"footercreate\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"follows\",{\"1\":{\"631\":1}}],[\"following\",{\"1\":{\"73\":1,\"631\":2,\"1840\":1}}],[\"folder\",{\"1\":{\"465\":4,\"1063\":1,\"1534\":5}}],[\"focus\",{\"1\":{\"305\":1}}],[\"foundation\",{\"1\":{\"1491\":2}}],[\"found\",{\"1\":{\"73\":1,\"94\":1,\"668\":1,\"985\":1,\"996\":1,\"1044\":1,\"1102\":1,\"1981\":1}}],[\"forward\",{\"1\":{\"1518\":3}}],[\"forwarded\",{\"1\":{\"638\":2}}],[\"fork创建\",{\"1\":{\"1865\":1}}],[\"forksystemserver\",{\"1\":{\"1865\":1}}],[\"fork子进程system\",{\"1\":{\"1865\":1}}],[\"fork新进程\",{\"1\":{\"1777\":1}}],[\"forkandspecialize\",{\"1\":{\"1777\":1,\"1863\":1}}],[\"fork出新进程的过程中\",{\"1\":{\"1776\":1}}],[\"forkjoinpool\",{\"1\":{\"897\":4}}],[\"fork\",{\"1\":{\"897\":2}}],[\"formbodystring\",{\"1\":{\"1332\":7}}],[\"formbodybuilder\",{\"1\":{\"1332\":3}}],[\"formbody\",{\"1\":{\"1332\":4}}],[\"form\",{\"0\":{\"897\":1},\"1\":{\"1332\":4,\"1552\":1}}],[\"format=b\",{\"1\":{\"1154\":1}}],[\"format=mixed\",{\"1\":{\"631\":1}}],[\"format\",{\"1\":{\"631\":2,\"1417\":1}}],[\"for循环\",{\"1\":{\"644\":1,\"1280\":1,\"1518\":1}}],[\"foreground\",{\"1\":{\"1730\":1,\"1778\":1}}],[\"foregrounddecoration\",{\"1\":{\"1402\":3,\"1685\":3}}],[\"foregroundcolorspan\",{\"1\":{\"1310\":1}}],[\"foreign\",{\"1\":{\"615\":2}}],[\"foreach\",{\"1\":{\"327\":1,\"1518\":3,\"1707\":1,\"1709\":1}}],[\"forname\",{\"1\":{\"416\":1,\"1601\":1}}],[\"force\",{\"1\":{\"55\":2,\"359\":1,\"1329\":2}}],[\"for\",{\"0\":{\"49\":1,\"61\":1},\"1\":{\"16\":1,\"61\":2,\"73\":2,\"278\":2,\"280\":1,\"281\":1,\"282\":2,\"283\":1,\"285\":6,\"327\":1,\"334\":3,\"350\":2,\"352\":1,\"359\":4,\"381\":1,\"519\":1,\"525\":2,\"531\":1,\"611\":1,\"615\":1,\"618\":1,\"631\":7,\"638\":3,\"715\":1,\"852\":1,\"853\":1,\"879\":2,\"880\":3,\"884\":2,\"895\":5,\"897\":1,\"900\":1,\"907\":1,\"917\":2,\"923\":1,\"950\":3,\"979\":1,\"993\":1,\"994\":1,\"1009\":1,\"1015\":2,\"1016\":1,\"1030\":2,\"1036\":5,\"1044\":1,\"1101\":1,\"1102\":1,\"1109\":2,\"1110\":1,\"1203\":2,\"1239\":1,\"1292\":4,\"1332\":2,\"1364\":2,\"1368\":1,\"1416\":4,\"1488\":2,\"1518\":13,\"1530\":1,\"1534\":4,\"1546\":4,\"1555\":1,\"1604\":4,\"1648\":1,\"1770\":4,\"1789\":1,\"1799\":1,\"1828\":2,\"1829\":1,\"1843\":1,\"1846\":2,\"1847\":1,\"1857\":4,\"1905\":1}}],[\"fd最大个数为16\",{\"1\":{\"1828\":1}}],[\"fdstoclose\",{\"1\":{\"1863\":1}}],[\"fds\",{\"1\":{\"1756\":1}}],[\"fd571203974ba9afe270fe62151ae967eca5e0aa\",{\"1\":{\"614\":2,\"615\":2,\"630\":2}}],[\"fd\",{\"1\":{\"58\":1,\"1770\":1,\"1825\":1,\"1828\":8,\"1829\":2,\"1831\":2,\"1857\":1,\"1963\":1}}],[\"fakereply\",{\"1\":{\"1756\":3}}],[\"fatal\",{\"0\":{\"1917\":1}}],[\"fat\",{\"1\":{\"1546\":1}}],[\"fa\",{\"1\":{\"1367\":1,\"1702\":4}}],[\"fabric\",{\"1\":{\"1292\":1}}],[\"fair\",{\"1\":{\"884\":3}}],[\"fairandunfairlock\",{\"1\":{\"884\":5}}],[\"fairandunfairtest\",{\"1\":{\"884\":1}}],[\"fairlock\",{\"1\":{\"884\":2}}],[\"failure\",{\"1\":{\"359\":1,\"879\":1,\"895\":1,\"1827\":1,\"1828\":1,\"1857\":1}}],[\"fail\",{\"0\":{\"335\":1},\"1\":{\"356\":1}}],[\"failed\",{\"0\":{\"49\":1,\"76\":1},\"1\":{\"73\":1,\"94\":2,\"672\":1,\"879\":3,\"880\":3,\"1383\":1,\"1534\":1,\"1666\":1,\"1755\":1,\"1789\":1,\"1798\":1,\"1857\":1}}],[\"fangtf\",{\"1\":{\"822\":1,\"833\":1}}],[\"familiar\",{\"1\":{\"631\":1}}],[\"factoryb\",{\"1\":{\"415\":1}}],[\"factorya\",{\"1\":{\"415\":2}}],[\"factory\",{\"1\":{\"415\":6,\"416\":5,\"650\":1,\"1552\":2}}],[\"factor\",{\"1\":{\"351\":1,\"352\":2,\"1707\":1}}],[\"facebook\",{\"1\":{\"52\":1}}],[\"faster\",{\"1\":{\"1546\":1}}],[\"fast\",{\"0\":{\"335\":1},\"1\":{\"356\":1,\"879\":1}}],[\"faas\",{\"1\":{\"305\":1}}],[\"false代表bwr数据的read\",{\"1\":{\"1778\":1}}],[\"false为显示\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"false\",{\"1\":{\"91\":1,\"197\":1,\"348\":2,\"359\":1,\"362\":1,\"364\":4,\"501\":1,\"604\":2,\"657\":1,\"867\":1,\"869\":1,\"870\":1,\"876\":1,\"879\":3,\"880\":3,\"882\":2,\"883\":1,\"884\":1,\"886\":2,\"887\":1,\"896\":1,\"917\":1,\"926\":1,\"945\":1,\"950\":1,\"984\":1,\"1015\":2,\"1030\":1,\"1036\":1,\"1055\":3,\"1175\":1,\"1203\":4,\"1292\":1,\"1320\":1,\"1326\":2,\"1358\":1,\"1364\":1,\"1374\":1,\"1383\":2,\"1402\":1,\"1416\":6,\"1546\":2,\"1595\":1,\"1604\":3,\"1625\":1,\"1666\":2,\"1685\":1,\"1702\":25,\"1707\":2,\"1711\":3,\"1713\":2,\"1736\":1,\"1756\":1,\"1776\":1,\"1778\":3,\"1798\":1,\"1828\":3,\"1829\":4,\"1840\":2,\"1846\":2,\"1847\":2,\"1849\":1,\"1869\":1,\"1937\":1,\"1938\":1,\"1970\":1}}],[\"f\",{\"1\":{\"16\":2,\"200\":1,\"644\":1,\"834\":1,\"984\":2,\"1009\":2,\"1022\":1,\"1203\":5,\"1323\":5,\"1335\":6,\"1459\":5,\"1518\":2,\"1521\":2,\"1530\":3,\"1709\":2,\"1921\":1}}],[\"fiexaign\",{\"1\":{\"1708\":1}}],[\"field元素\",{\"1\":{\"1604\":1}}],[\"field字段去重\",{\"1\":{\"1604\":1}}],[\"field添加当前类中\",{\"1\":{\"1601\":1}}],[\"fieldmap\",{\"1\":{\"1549\":1}}],[\"fielddescriptor\",{\"1\":{\"1015\":4}}],[\"fieldname\",{\"1\":{\"1015\":4,\"1604\":2}}],[\"fieldrefinfo\",{\"1\":{\"1110\":2}}],[\"fieldref\",{\"1\":{\"984\":6}}],[\"fieldspec\",{\"1\":{\"1601\":4,\"1604\":2}}],[\"fields\",{\"1\":{\"237\":3,\"984\":1,\"1015\":1,\"1076\":4,\"1081\":1,\"1109\":9,\"1604\":1}}],[\"field\",{\"1\":{\"154\":1,\"237\":1,\"738\":1,\"984\":18,\"1015\":14,\"1076\":1,\"1109\":6,\"1361\":1,\"1549\":1,\"1592\":3,\"1604\":4}}],[\"fish\",{\"1\":{\"1386\":1,\"1399\":1,\"1669\":1,\"1682\":1}}],[\"fidder\",{\"1\":{\"1380\":1}}],[\"fir\",{\"1\":{\"1335\":6}}],[\"firebase\",{\"1\":{\"1292\":1}}],[\"firstactivity\",{\"1\":{\"1598\":2,\"1601\":8,\"1604\":4,\"1610\":8}}],[\"firstreaderholdcount++\",{\"1\":{\"886\":1}}],[\"firstreaderholdcount\",{\"1\":{\"886\":1}}],[\"firstreader\",{\"1\":{\"886\":2}}],[\"firstvalue\",{\"1\":{\"381\":2}}],[\"first\",{\"1\":{\"345\":2,\"359\":1,\"364\":5,\"1732\":1,\"1739\":2,\"1944\":1,\"1945\":1,\"1961\":1}}],[\"fibonaccitest\",{\"1\":{\"997\":1}}],[\"fifo队列\",{\"1\":{\"890\":1}}],[\"fifo同步队列\",{\"1\":{\"878\":1}}],[\"fifo双向队列\",{\"0\":{\"878\":1}}],[\"fi\",{\"1\":{\"711\":5}}],[\"fixretrofit250\",{\"1\":{\"1592\":2}}],[\"fixretrofit240\",{\"1\":{\"1592\":2}}],[\"fix\",{\"1\":{\"652\":1,\"1413\":1}}],[\"fillinstacktrace\",{\"1\":{\"1035\":1,\"1036\":4}}],[\"filter>\",{\"1\":{\"1326\":4}}],[\"filter\",{\"1\":{\"650\":1,\"667\":1,\"1518\":4,\"1521\":3}}],[\"fileaccess\",{\"1\":{\"1713\":2}}],[\"file>new>create\",{\"1\":{\"1709\":1}}],[\"filetree\",{\"1\":{\"1632\":1}}],[\"filer\",{\"1\":{\"1604\":1}}],[\"fileprovider\",{\"1\":{\"1417\":2}}],[\"filepathcallback\",{\"1\":{\"1416\":2}}],[\"filepath\",{\"1\":{\"1063\":4,\"1488\":4}}],[\"filechooserparams\",{\"1\":{\"1416\":4}}],[\"filenameindex\",{\"1\":{\"1552\":2}}],[\"filename=`basename\",{\"1\":{\"1323\":1,\"1335\":1,\"1459\":1}}],[\"filename\",{\"1\":{\"1036\":2,\"1417\":2,\"1488\":3,\"1552\":2,\"1601\":2,\"1604\":2}}],[\"file=dump\",{\"1\":{\"1154\":1}}],[\"file=\",{\"1\":{\"694\":2,\"1323\":1,\"1335\":1,\"1459\":1}}],[\"fileoutputstream\",{\"1\":{\"334\":1}}],[\"files\",{\"1\":{\"55\":1,\"619\":1,\"631\":2,\"638\":1,\"640\":1,\"1534\":3,\"1966\":1}}],[\"file\",{\"0\":{\"76\":1},\"1\":{\"12\":5,\"28\":1,\"94\":2,\"103\":1,\"334\":1,\"465\":5,\"614\":1,\"615\":1,\"622\":1,\"630\":1,\"631\":6,\"644\":1,\"731\":5,\"1292\":1,\"1368\":1,\"1417\":15,\"1475\":1,\"1488\":8,\"1534\":2,\"1552\":2,\"1601\":2,\"1604\":1,\"1610\":1,\"1613\":17,\"1648\":1,\"1772\":1,\"1857\":1,\"1966\":2}}],[\"fivevolt\",{\"1\":{\"477\":2}}],[\"fine\",{\"1\":{\"1518\":1}}],[\"fingerprint\",{\"1\":{\"1298\":3}}],[\"finish\",{\"1\":{\"259\":7,\"447\":6,\"868\":1,\"1798\":2}}],[\"finished\",{\"1\":{\"103\":1,\"1604\":1,\"1843\":1}}],[\"final修饰线程安全\",{\"1\":{\"863\":1}}],[\"final修饰\",{\"1\":{\"863\":1}}],[\"final内存含义\",{\"0\":{\"863\":1}}],[\"finally块进行回收\",{\"1\":{\"385\":1}}],[\"finally\",{\"1\":{\"342\":1,\"359\":1,\"867\":1,\"868\":2,\"870\":1,\"874\":1,\"879\":1,\"880\":1,\"884\":1,\"885\":3,\"887\":2,\"889\":2,\"932\":4,\"1127\":1,\"1731\":1,\"1739\":2}}],[\"finalize方法回收垃圾不建议\",{\"1\":{\"1127\":1}}],[\"finalizer\",{\"1\":{\"200\":1}}],[\"finalize\",{\"1\":{\"145\":2,\"200\":1}}],[\"finalized\",{\"1\":{\"144\":1,\"145\":1}}],[\"final\",{\"1\":{\"70\":2,\"154\":1,\"259\":2,\"331\":1,\"342\":2,\"348\":7,\"351\":2,\"352\":4,\"354\":1,\"358\":9,\"359\":2,\"362\":1,\"365\":1,\"368\":4,\"405\":1,\"501\":1,\"799\":1,\"870\":3,\"876\":1,\"878\":1,\"879\":6,\"880\":6,\"882\":3,\"883\":2,\"886\":2,\"895\":1,\"896\":1,\"897\":1,\"900\":3,\"905\":1,\"907\":1,\"917\":8,\"923\":2,\"929\":1,\"932\":4,\"938\":1,\"950\":2,\"958\":1,\"1023\":1,\"1187\":1,\"1203\":1,\"1311\":1,\"1320\":2,\"1332\":2,\"1349\":1,\"1364\":3,\"1383\":4,\"1392\":3,\"1417\":1,\"1475\":1,\"1521\":1,\"1592\":2,\"1598\":1,\"1601\":3,\"1626\":1,\"1666\":4,\"1675\":3,\"1717\":2,\"1732\":2,\"1736\":1,\"1737\":2,\"1738\":1,\"1739\":3,\"1756\":4,\"1762\":4,\"1840\":1,\"1843\":4,\"1846\":3,\"1849\":3,\"1866\":1,\"1867\":1}}],[\"finalshell\",{\"1\":{\"16\":14}}],[\"finalshelldata\",{\"1\":{\"16\":2}}],[\"finalshell官网\",{\"1\":{\"16\":1}}],[\"finalshell安装\",{\"0\":{\"16\":1}}],[\"findviewbyid代码编写\",{\"1\":{\"1610\":1}}],[\"findviewbyid\",{\"1\":{\"1601\":3,\"1604\":3,\"1610\":4,\"1645\":1}}],[\"findbindingconstructorforclass\",{\"1\":{\"1598\":3}}],[\"findbootstrapclassornull\",{\"1\":{\"197\":1,\"1175\":1}}],[\"findelementat\",{\"1\":{\"1555\":1}}],[\"findexceptionhandler\",{\"1\":{\"1036\":4}}],[\"findfile\",{\"1\":{\"1552\":1}}],[\"findstate\",{\"1\":{\"1546\":7}}],[\"findsubscribermethods\",{\"1\":{\"1546\":2}}],[\"findusingreflectioninsingleclass\",{\"1\":{\"1546\":1}}],[\"findusingreflection\",{\"1\":{\"1546\":1}}],[\"findandgotoexceptionhandler\",{\"1\":{\"1036\":2}}],[\"findnativemethod\",{\"1\":{\"1022\":2}}],[\"findclass\",{\"1\":{\"197\":1,\"1175\":1,\"1527\":2,\"1530\":1}}],[\"findloadedclass\",{\"1\":{\"197\":1,\"1175\":1}}],[\"find\",{\"0\":{\"49\":1},\"1\":{\"1063\":1,\"1064\":1,\"1521\":2,\"1790\":4,\"1840\":1}}],[\"fits\",{\"1\":{\"1518\":1}}],[\"fittedbox\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"fit\",{\"0\":{\"28\":1},\"1\":{\"28\":1,\"1402\":3,\"1685\":3}}],[\"fruits\",{\"1\":{\"1518\":2}}],[\"fragment\",{\"1\":{\"1604\":2}}],[\"fragmenttmv4\",{\"1\":{\"1604\":2}}],[\"fragmenttm\",{\"1\":{\"1604\":2}}],[\"fragmentshaderid\",{\"1\":{\"1540\":1}}],[\"fragcolor\",{\"1\":{\"1540\":2}}],[\"fractionallysizedbox\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"fractionaloffset\",{\"1\":{\"1402\":3,\"1685\":3}}],[\"frame\",{\"1\":{\"271\":2,\"984\":38,\"993\":23,\"994\":9,\"1003\":3,\"1009\":10,\"1016\":1,\"1022\":8,\"1023\":12,\"1030\":20,\"1036\":14,\"1044\":3,\"1086\":1,\"1087\":1,\"1094\":6,\"1095\":3,\"1096\":3,\"1101\":13,\"1115\":1,\"1389\":1,\"1672\":1}}],[\"frameworkbinder\",{\"1\":{\"1732\":4}}],[\"framework实践\",{\"1\":{\"1729\":1}}],[\"frameworks\",{\"1\":{\"1718\":3,\"1763\":3,\"1781\":2,\"1800\":1,\"1870\":9}}],[\"framework指南\",{\"0\":{\"570\":1}}],[\"framework模块不容许引用\",{\"1\":{\"12\":1,\"731\":1}}],[\"framework\",{\"0\":{\"1729\":1},\"1\":{\"12\":2,\"573\":1,\"650\":1,\"731\":2,\"1503\":1,\"1733\":3,\"1746\":11,\"1757\":4,\"1781\":1,\"1791\":1,\"1800\":1,\"1807\":2,\"1832\":5,\"1852\":1},\"2\":{\"569\":1,\"574\":1,\"575\":1,\"1719\":1,\"1722\":1,\"1740\":1,\"1747\":1,\"1758\":1,\"1764\":1,\"1773\":1,\"1782\":1,\"1792\":1,\"1801\":1,\"1808\":1,\"1811\":1,\"1813\":1,\"1814\":1,\"1816\":1,\"1818\":1,\"1819\":1,\"1821\":1,\"1833\":1,\"1853\":1,\"1871\":1,\"1872\":1,\"1874\":1,\"1876\":1,\"1878\":1,\"1879\":1,\"1881\":1,\"1883\":1,\"1884\":1,\"1886\":1,\"1888\":1,\"1889\":1,\"1891\":1,\"1893\":1,\"1894\":1,\"1896\":1,\"1898\":1,\"1899\":1,\"1901\":1,\"1903\":1,\"1904\":1}}],[\"freturn\",{\"1\":{\"1022\":1}}],[\"freebuffer\",{\"1\":{\"1798\":1}}],[\"freezable\",{\"1\":{\"1770\":2}}],[\"free\",{\"1\":{\"820\":1,\"882\":3,\"1116\":1,\"1770\":1}}],[\"from=timeline\",{\"1\":{\"1503\":1}}],[\"fromfile\",{\"1\":{\"1417\":1}}],[\"from\",{\"1\":{\"441\":8,\"614\":1,\"622\":1,\"630\":1,\"631\":3,\"662\":2,\"723\":2,\"895\":1,\"979\":1,\"1030\":11,\"1335\":1,\"1488\":1,\"1518\":5,\"1613\":1,\"1708\":2,\"1727\":1,\"1770\":1,\"1789\":2,\"1905\":1,\"1966\":2}}],[\"front\",{\"1\":{\"0\":1}}],[\"yuan04\",{\"1\":{\"1518\":1}}],[\"yuan03\",{\"1\":{\"1518\":3}}],[\"yue\",{\"1\":{\"1518\":5}}],[\"yum\",{\"1\":{\"636\":1}}],[\"y+1\",{\"1\":{\"1518\":1}}],[\"yyyymmdd\",{\"1\":{\"1417\":1}}],[\"yellow\",{\"1\":{\"1305\":1,\"1307\":1}}],[\"yes\",{\"1\":{\"618\":1,\"644\":2}}],[\"yaml\",{\"1\":{\"1690\":1}}],[\"yami\",{\"1\":{\"638\":2}}],[\"yan\",{\"1\":{\"1518\":1}}],[\"yang04\",{\"1\":{\"1518\":1}}],[\"yang03\",{\"1\":{\"1518\":3}}],[\"yang02\",{\"1\":{\"1518\":1}}],[\"yang01\",{\"1\":{\"1518\":1}}],[\"yang\",{\"1\":{\"1518\":1}}],[\"yarn下载命令是并行下载\",{\"1\":{\"112\":1}}],[\"yarn\",{\"1\":{\"112\":1,\"603\":2,\"656\":2,\"1413\":3}}],[\"y\",{\"1\":{\"351\":7,\"614\":89,\"615\":120,\"622\":31,\"630\":89,\"636\":1,\"701\":1,\"702\":1,\"834\":1,\"1518\":1,\"1540\":1}}],[\"yourname\",{\"1\":{\"1924\":1}}],[\"yourself\",{\"1\":{\"1521\":1}}],[\"your\",{\"1\":{\"680\":1,\"1289\":3,\"1292\":2,\"1555\":2,\"1641\":1,\"1921\":1,\"1922\":1,\"1924\":1}}],[\"youngest\",{\"1\":{\"362\":1}}],[\"you\",{\"1\":{\"94\":1,\"631\":7,\"1383\":2,\"1648\":2,\"1666\":2}}],[\"yml文件\",{\"1\":{\"1960\":1}}],[\"yml\",{\"1\":{\"12\":1,\"731\":1}}],[\"yield\",{\"1\":{\"944\":1,\"945\":1}}],[\"yingyongbao\",{\"1\":{\"1377\":1}}],[\"yingzi\",{\"1\":{\"58\":1,\"94\":1,\"1534\":3}}],[\"yinlingchaoliu\",{\"1\":{\"8\":1,\"9\":1,\"249\":1,\"259\":1,\"268\":1,\"271\":1,\"406\":1,\"409\":1,\"417\":1,\"423\":1,\"429\":1,\"436\":1,\"442\":1,\"448\":1,\"454\":1,\"460\":1,\"466\":1,\"472\":1,\"478\":1,\"484\":1,\"490\":1,\"496\":1,\"502\":1,\"508\":1,\"514\":1,\"520\":1,\"526\":1,\"532\":1,\"538\":1,\"544\":1,\"727\":1,\"728\":1,\"825\":1,\"835\":1,\"854\":1,\"980\":1,\"987\":1,\"998\":1,\"1004\":1,\"1011\":1,\"1018\":1,\"1025\":1,\"1031\":1,\"1038\":1,\"1045\":1,\"1051\":1,\"1057\":1,\"1065\":1,\"1071\":1,\"1082\":1,\"1089\":1,\"1097\":1,\"1104\":1,\"1111\":1,\"1289\":1,\"1304\":1,\"1314\":1,\"1346\":1,\"1383\":4,\"1399\":2,\"1453\":1,\"1476\":1,\"1488\":1,\"1491\":1,\"1509\":1,\"1527\":1,\"1530\":1,\"1534\":1,\"1540\":1,\"1549\":2,\"1552\":1,\"1555\":1,\"1561\":1,\"1571\":1,\"1577\":1,\"1589\":3,\"1592\":1,\"1595\":3,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1,\"1616\":1,\"1620\":1,\"1623\":1,\"1632\":1,\"1639\":1,\"1642\":1,\"1666\":4,\"1682\":2,\"1905\":4,\"1911\":1,\"1944\":1,\"1945\":1,\"1946\":1,\"1950\":1,\"1959\":2,\"1960\":3,\"1961\":1,\"1962\":1}}],[\"yi\",{\"1\":{\"8\":1,\"9\":1,\"727\":1,\"728\":1}}],[\"│\",{\"1\":{\"12\":69,\"731\":69}}],[\"服务列表\",{\"1\":{\"1868\":1}}],[\"服务启动\",{\"0\":{\"1868\":1},\"1\":{\"1868\":1}}],[\"服务启动脚本\",{\"0\":{\"710\":1}}],[\"服务已注册时\",{\"1\":{\"1790\":1}}],[\"服务检索\",{\"1\":{\"1790\":1}}],[\"服务是否满足查询条件\",{\"1\":{\"1790\":1}}],[\"服务实体进程\",{\"1\":{\"1761\":1}}],[\"服务实现\",{\"0\":{\"1727\":1,\"1732\":1},\"1\":{\"1727\":1}}],[\"服务代理\",{\"1\":{\"1731\":1}}],[\"服务名service\",{\"1\":{\"1729\":1}}],[\"服务提醒\",{\"1\":{\"1702\":1}}],[\"服务包提供的基础服务\",{\"1\":{\"1702\":1}}],[\"服务卡片提供方包含以下哪几个模块\",{\"1\":{\"1702\":2}}],[\"服务卡片在以下哪个选项中进行加载渲染\",{\"1\":{\"1702\":1}}],[\"服务卡片使用方可以通过通信适配层和卡片提供方直接交互\",{\"1\":{\"1702\":2}}],[\"服务注册\",{\"0\":{\"1725\":1},\"1\":{\"1482\":1}}],[\"服务发现\",{\"1\":{\"1482\":1}}],[\"服务降级\",{\"1\":{\"1482\":1}}],[\"服务组件间隔离\",{\"1\":{\"1482\":1}}],[\"服务可能会拆分得很细\",{\"1\":{\"314\":1}}],[\"服务通过传统的网络协议或者应用协议提供\",{\"1\":{\"314\":1}}],[\"服务通过\",{\"1\":{\"314\":1}}],[\"服务多端\",{\"1\":{\"305\":1}}],[\"服务自动化\",{\"1\":{\"305\":1}}],[\"服务监控\",{\"1\":{\"14\":1,\"733\":1}}],[\"服务监控框架\",{\"1\":{\"12\":1,\"731\":1}}],[\"服务网关\",{\"1\":{\"12\":1,\"731\":1}}],[\"服务\",{\"1\":{\"12\":1,\"731\":1}}],[\"服务端进程\",{\"1\":{\"1761\":1}}],[\"服务端采用回调方式来通知客户端完成情况\",{\"1\":{\"1751\":1}}],[\"服务端实现\",{\"0\":{\"1737\":1}}],[\"服务端注册\",{\"0\":{\"1730\":1}}],[\"服务端程序\",{\"1\":{\"1724\":1}}],[\"服务端配置跨域cors\",{\"0\":{\"648\":1,\"650\":1}}],[\"服务端\",{\"0\":{\"7\":1},\"1\":{\"649\":1,\"1727\":1,\"1732\":1}}],[\"sdeathnotifier\",{\"1\":{\"1799\":3}}],[\"sdk\",{\"1\":{\"1298\":1,\"1341\":2,\"1371\":1,\"1416\":1,\"1417\":1,\"1534\":1,\"1552\":1,\"1555\":2,\"1709\":1}}],[\"sdkint\",{\"1\":{\"1298\":2}}],[\"svclist保存所有已注册的服务\",{\"1\":{\"1790\":1}}],[\"svclist\",{\"1\":{\"1790\":2}}],[\"svc\",{\"1\":{\"1790\":4,\"1799\":3}}],[\"svcinfo\",{\"1\":{\"1790\":4}}],[\"svcmgr\",{\"1\":{\"1788\":1}}],[\"svg\",{\"1\":{\"1702\":1}}],[\"s模式\",{\"1\":{\"1745\":1}}],[\"s1\",{\"1\":{\"1518\":1}}],[\"ssh目录有两个文件\",{\"1\":{\"1921\":1}}],[\"ssh\",{\"0\":{\"1923\":1},\"1\":{\"1921\":2,\"1922\":7,\"1923\":1,\"1943\":3}}],[\"ssize\",{\"1\":{\"1827\":1,\"1828\":1}}],[\"sservicelock\",{\"1\":{\"1799\":1}}],[\"ssp=\",{\"1\":{\"1326\":1}}],[\"ssp\",{\"1\":{\"1326\":3}}],[\"ssl\",{\"1\":{\"614\":2,\"622\":2,\"630\":2,\"638\":7}}],[\"srp\",{\"0\":{\"751\":1}}],[\"srcs\",{\"1\":{\"1534\":3}}],[\"srcdirs\",{\"1\":{\"1475\":4,\"1966\":2}}],[\"srcfile\",{\"1\":{\"1475\":2}}],[\"srccompat=\",{\"1\":{\"1346\":1}}],[\"src\",{\"1\":{\"352\":4,\"1289\":2,\"1475\":6,\"1488\":6,\"1534\":6,\"1555\":1}}],[\"sbin\",{\"1\":{\"694\":2}}],[\"sketch\",{\"1\":{\"1702\":1}}],[\"sketch放在wiki上\",{\"1\":{\"1441\":1}}],[\"sketch图\",{\"1\":{\"1440\":1}}],[\"sky\",{\"1\":{\"1905\":1}}],[\"sky24n\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"skywalking\",{\"1\":{\"12\":1,\"731\":1}}],[\"skipsuperclasses\",{\"1\":{\"1546\":1}}],[\"skip\",{\"1\":{\"619\":1,\"631\":2}}],[\"slottype\",{\"1\":{\"1712\":1}}],[\"slot交给其他变量复用\",{\"1\":{\"1182\":1}}],[\"slot\",{\"1\":{\"993\":2}}],[\"slotid\",{\"1\":{\"984\":10,\"1015\":5,\"1109\":1}}],[\"slots\",{\"1\":{\"984\":12,\"1015\":6,\"1109\":1}}],[\"slock\",{\"1\":{\"169\":2}}],[\"sl\",{\"1\":{\"702\":1}}],[\"slice\",{\"1\":{\"694\":1}}],[\"sleeping\",{\"1\":{\"822\":1}}],[\"sleep\",{\"1\":{\"645\":2,\"711\":2,\"823\":1,\"867\":4,\"868\":1,\"923\":1,\"926\":1,\"944\":1,\"1230\":1,\"1799\":1,\"1805\":1}}],[\"slaves\",{\"1\":{\"631\":1}}],[\"slave\",{\"1\":{\"614\":1,\"615\":1,\"622\":1,\"630\":1}}],[\"snapshots\",{\"1\":{\"1966\":2}}],[\"snapshots<\",{\"1\":{\"608\":1}}],[\"snapshotrepository>\",{\"1\":{\"608\":1}}],[\"snapshot\",{\"1\":{\"608\":1,\"1966\":1}}],[\"s\",{\"1\":{\"334\":8,\"603\":1,\"631\":1,\"656\":1,\"750\":1,\"979\":2,\"984\":2,\"985\":1,\"996\":1,\"1009\":2,\"1036\":3,\"1044\":1,\"1049\":1,\"1055\":1,\"1056\":2,\"1064\":1,\"1102\":1,\"1292\":1,\"1332\":1,\"1349\":26,\"1364\":6,\"1399\":2,\"1530\":1,\"1534\":1,\"1564\":1,\"1583\":2,\"1682\":2,\"1790\":7,\"1857\":1}}],[\"swpd\",{\"1\":{\"820\":1}}],[\"swagger<\",{\"1\":{\"672\":1}}],[\"swagger3依赖\",{\"1\":{\"672\":1}}],[\"swap\",{\"1\":{\"283\":4,\"820\":1,\"850\":1}}],[\"switchflag\",{\"1\":{\"945\":3,\"950\":3}}],[\"switch\",{\"1\":{\"435\":1,\"525\":1,\"820\":1,\"984\":4,\"1009\":3,\"1022\":1,\"1036\":1,\"1078\":1,\"1110\":1,\"1197\":1,\"1256\":1,\"1277\":1,\"1286\":1,\"1717\":1,\"1727\":1,\"1732\":1,\"1736\":1,\"1739\":1,\"1770\":3,\"1778\":1,\"1789\":1,\"1798\":1}}],[\"sweep\",{\"0\":{\"204\":1}}],[\"sc\",{\"1\":{\"1928\":1}}],[\"scope\",{\"1\":{\"1552\":1}}],[\"scope>\",{\"1\":{\"672\":1}}],[\"scroll\",{\"1\":{\"1709\":1}}],[\"scrolltop\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"scrollcontroller\",{\"1\":{\"1383\":5,\"1666\":5}}],[\"screen\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"script\",{\"1\":{\"94\":1,\"1911\":1}}],[\"scp\",{\"1\":{\"644\":2,\"645\":3}}],[\"scp上传免密\",{\"0\":{\"643\":1,\"644\":1,\"711\":1}}],[\"sched\",{\"1\":{\"1778\":1}}],[\"schedulerbinding\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"scheduler\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"scheduleclinit\",{\"1\":{\"1003\":2}}],[\"schedule\",{\"1\":{\"938\":1}}],[\"scheduledexecutorservice\",{\"1\":{\"938\":2}}],[\"scheduledthreadpoolexecutor\",{\"1\":{\"247\":1,\"828\":1}}],[\"scheme=\",{\"1\":{\"1326\":1}}],[\"scheme\",{\"1\":{\"1326\":6}}],[\"schemas\",{\"1\":{\"1346\":2}}],[\"schema\",{\"1\":{\"615\":1}}],[\"scaffold\",{\"1\":{\"1383\":1,\"1402\":1,\"1666\":1,\"1685\":1}}],[\"scale\",{\"1\":{\"1713\":1}}],[\"scalexspan\",{\"1\":{\"1310\":1}}],[\"scalability\",{\"1\":{\"313\":1}}],[\"scavenge收集器老年版本\",{\"1\":{\"1143\":1}}],[\"scavenge\",{\"0\":{\"1141\":1}}],[\"scanning\",{\"1\":{\"1534\":1}}],[\"scanner\",{\"1\":{\"1417\":1}}],[\"scan\",{\"1\":{\"358\":1,\"1417\":1}}],[\"symbol\",{\"1\":{\"1198\":1}}],[\"symref\",{\"1\":{\"1110\":5}}],[\"sy\",{\"1\":{\"820\":1}}],[\"syntaxerror\",{\"0\":{\"602\":1},\"1\":{\"603\":1}}],[\"synlist\",{\"1\":{\"340\":1}}],[\"synchionized\",{\"1\":{\"935\":1,\"948\":1,\"950\":3,\"958\":3}}],[\"synchrionized\",{\"1\":{\"926\":1,\"948\":1,\"949\":1,\"950\":4}}],[\"synchronousqueue<runnable>\",{\"1\":{\"247\":1,\"828\":1}}],[\"synchronousqueue\",{\"1\":{\"246\":1,\"896\":1,\"914\":1}}],[\"synchronized关键字\",{\"1\":{\"1238\":1}}],[\"synchronizedsortedset方法\",{\"1\":{\"935\":1}}],[\"synchronizedsortedmap方法\",{\"1\":{\"935\":1}}],[\"synchronizedset方法\",{\"1\":{\"935\":1}}],[\"synchronizedmap方法\",{\"1\":{\"935\":1}}],[\"synchronizedcollection方法\",{\"1\":{\"935\":1}}],[\"synchronized用的锁是存在java对象头里的\",{\"1\":{\"844\":1}}],[\"synchronized原理\",{\"0\":{\"842\":1},\"1\":{\"843\":1}}],[\"synchronizedlist方法\",{\"1\":{\"935\":1}}],[\"synchronizedlist\",{\"1\":{\"340\":2,\"917\":1}}],[\"synchronized\",{\"1\":{\"169\":6,\"337\":3,\"356\":1,\"360\":1,\"405\":2,\"823\":4,\"843\":3,\"864\":1,\"867\":2,\"870\":4,\"917\":6,\"920\":1,\"1238\":1,\"1358\":1,\"1546\":3,\"1604\":2,\"1756\":1,\"1762\":1,\"1846\":2,\"1847\":1,\"1849\":2,\"1850\":2}}],[\"synchronized三种用法\",{\"0\":{\"169\":1}}],[\"synchronized标记的变量可以被编译器优化\",{\"1\":{\"167\":1}}],[\"synchronized可能会造成线程的阻塞\",{\"1\":{\"167\":1}}],[\"synchronized则可以使用在变量\",{\"1\":{\"167\":1}}],[\"synchronized则是锁定当前变量\",{\"1\":{\"167\":1}}],[\"sync\",{\"1\":{\"876\":10,\"880\":11}}],[\"syncdemo\",{\"1\":{\"169\":7,\"843\":4}}],[\"sysnchronizedlist\",{\"1\":{\"950\":1}}],[\"sys\",{\"1\":{\"614\":2,\"615\":2,\"622\":1,\"630\":2}}],[\"syscall\",{\"1\":{\"94\":1}}],[\"systemready\",{\"1\":{\"1867\":2}}],[\"systemmain\",{\"1\":{\"1867\":1}}],[\"systemclock\",{\"1\":{\"1846\":1,\"1849\":1}}],[\"systemctl\",{\"1\":{\"613\":2,\"637\":2,\"639\":1,\"678\":1,\"679\":1,\"684\":2,\"694\":1,\"707\":3}}],[\"systemtime\",{\"1\":{\"1828\":1}}],[\"system类初始化方法\",{\"1\":{\"1042\":1}}],[\"system类初始化\",{\"0\":{\"1042\":1}}],[\"systemd\",{\"1\":{\"694\":4}}],[\"systemservice\",{\"1\":{\"1867\":4}}],[\"systemservicemanager的startservice\",{\"1\":{\"1868\":1}}],[\"systemservicemanager\",{\"1\":{\"1867\":2,\"1870\":1}}],[\"systemserverclasspath\",{\"1\":{\"1866\":2}}],[\"systemserver\",{\"1\":{\"1865\":1,\"1866\":3,\"1867\":2,\"1870\":2}}],[\"systemstatistics\",{\"1\":{\"668\":3}}],[\"systems\",{\"1\":{\"631\":1}}],[\"systemprop\",{\"1\":{\"34\":4,\"40\":1}}],[\"system\",{\"0\":{\"1864\":1,\"1867\":1},\"1\":{\"12\":5,\"154\":4,\"169\":8,\"259\":4,\"268\":2,\"284\":1,\"327\":1,\"333\":2,\"365\":1,\"435\":3,\"441\":3,\"447\":4,\"453\":5,\"459\":2,\"465\":4,\"471\":3,\"477\":1,\"483\":3,\"489\":4,\"501\":5,\"507\":10,\"519\":1,\"531\":6,\"537\":2,\"543\":1,\"631\":1,\"668\":9,\"694\":2,\"731\":5,\"820\":1,\"823\":2,\"843\":3,\"853\":1,\"868\":1,\"870\":8,\"884\":4,\"897\":1,\"900\":8,\"904\":3,\"905\":3,\"907\":1,\"908\":6,\"949\":2,\"950\":2,\"958\":4,\"983\":1,\"1042\":3,\"1182\":1,\"1188\":5,\"1203\":6,\"1368\":1,\"1374\":1,\"1527\":3,\"1601\":1,\"1604\":1,\"1728\":4,\"1730\":1,\"1731\":2,\"1732\":1,\"1733\":6,\"1787\":3,\"1828\":1,\"1832\":3,\"1856\":1,\"1858\":4,\"1865\":2,\"1867\":2,\"1869\":1,\"1870\":2,\"1966\":1}}],[\"square\",{\"1\":{\"1568\":1,\"1577\":1,\"1601\":1}}],[\"squareup\",{\"1\":{\"52\":1,\"1329\":1,\"1567\":10,\"1580\":1}}],[\"sqlexception\",{\"1\":{\"611\":1}}],[\"sql\",{\"1\":{\"14\":1,\"311\":1,\"611\":1,\"631\":4,\"733\":1}}],[\"sql监控\",{\"1\":{\"12\":1,\"731\":1}}],[\"sqlserver可同时使用异构切换\",{\"1\":{\"12\":1,\"731\":1}}],[\"so库\",{\"1\":{\"1867\":1}}],[\"so库按需下载\",{\"1\":{\"1317\":1}}],[\"social\",{\"1\":{\"1712\":1}}],[\"sock\",{\"1\":{\"631\":1}}],[\"socketname\",{\"1\":{\"1862\":2,\"1865\":2,\"1866\":1}}],[\"sockets\",{\"1\":{\"631\":1}}],[\"socket\",{\"1\":{\"630\":1,\"631\":1,\"793\":1,\"1607\":1,\"1858\":2}}],[\"socks\",{\"0\":{\"40\":1},\"1\":{\"40\":1}}],[\"sonic\",{\"1\":{\"1416\":1}}],[\"sod\",{\"1\":{\"750\":1}}],[\"solid原则\",{\"1\":{\"750\":1}}],[\"some\",{\"1\":{\"631\":1,\"1383\":1,\"1666\":1}}],[\"soundtriggerhwservice\",{\"1\":{\"1798\":1}}],[\"sound\",{\"1\":{\"483\":6}}],[\"soundcard\",{\"1\":{\"483\":14}}],[\"sourceversion\",{\"1\":{\"1604\":2}}],[\"sourceview\",{\"1\":{\"1598\":2}}],[\"sourcefileobjects\",{\"1\":{\"1197\":1}}],[\"source\",{\"0\":{\"94\":1},\"1\":{\"94\":3,\"615\":5,\"650\":3,\"1371\":1,\"1468\":5,\"1503\":1,\"1534\":10,\"1555\":1,\"1598\":4,\"1601\":6,\"1604\":7,\"1610\":2,\"1966\":1}}],[\"sourcecompatibility\",{\"1\":{\"43\":1}}],[\"sourceset项目中用法过于负责慎用\",{\"1\":{\"1494\":1}}],[\"sourcesets\",{\"1\":{\"1475\":2,\"1476\":2,\"1488\":1,\"1966\":2}}],[\"sources\",{\"1\":{\"28\":1,\"1966\":1}}],[\"so\",{\"1\":{\"332\":1,\"558\":1,\"820\":1,\"1398\":1,\"1534\":1,\"1681\":1}}],[\"soap\",{\"1\":{\"314\":1}}],[\"soa\",{\"1\":{\"314\":1}}],[\"sortedby\",{\"1\":{\"1518\":1}}],[\"sort\",{\"1\":{\"279\":1,\"283\":1,\"284\":1,\"285\":1,\"631\":2,\"822\":1,\"834\":1}}],[\"software\",{\"1\":{\"310\":2,\"314\":1,\"1648\":1,\"1966\":1}}],[\"softreference\",{\"1\":{\"154\":1,\"1126\":1}}],[\"soft\",{\"1\":{\"16\":1,\"1951\":1}}],[\"siteurl=https\",{\"1\":{\"1905\":1}}],[\"si\",{\"1\":{\"820\":1,\"1790\":25}}],[\"singwhatiwanna\",{\"1\":{\"1574\":3}}],[\"singlethread\",{\"1\":{\"1772\":1}}],[\"singleton<iactivitymanager>\",{\"1\":{\"1756\":3}}],[\"singletonholder\",{\"1\":{\"405\":2}}],[\"singleton\",{\"1\":{\"405\":7,\"841\":2,\"1709\":1}}],[\"singleholder\",{\"1\":{\"1626\":2}}],[\"singleclickaspect\",{\"1\":{\"1374\":2}}],[\"singleclick注解\",{\"1\":{\"1374\":1}}],[\"singleclick\",{\"0\":{\"1374\":1},\"1\":{\"1374\":3}}],[\"singlechildscrollview\",{\"1\":{\"97\":1}}],[\"single==单身\",{\"1\":{\"750\":1}}],[\"singledemo\",{\"1\":{\"405\":1}}],[\"single\",{\"0\":{\"935\":1},\"1\":{\"28\":1,\"1708\":1}}],[\"singl\",{\"0\":{\"28\":1}}],[\"sina\",{\"1\":{\"1292\":2}}],[\"since\",{\"1\":{\"651\":2,\"694\":1,\"1555\":1}}],[\"simplezhli\",{\"1\":{\"1564\":1}}],[\"simplethreadpool\",{\"1\":{\"950\":1}}],[\"simplethreadpool<job\",{\"1\":{\"950\":1}}],[\"simplify\",{\"1\":{\"334\":1}}],[\"simulator\",{\"1\":{\"94\":1}}],[\"signed\",{\"1\":{\"1530\":4}}],[\"signal方式\",{\"1\":{\"1857\":1}}],[\"signalexceptionforerror\",{\"1\":{\"1756\":1,\"1762\":1}}],[\"signalall\",{\"1\":{\"889\":1}}],[\"signal\",{\"1\":{\"878\":1,\"1827\":1,\"1857\":1}}],[\"signature\",{\"0\":{\"76\":1}}],[\"sign\",{\"0\":{\"76\":1}}],[\"size代表消息池的可用大小\",{\"1\":{\"1850\":1}}],[\"sizeof\",{\"1\":{\"1770\":3,\"1789\":8,\"1790\":3,\"1798\":2,\"1827\":2,\"1828\":1,\"1829\":1}}],[\"sizedbox\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"size++\",{\"1\":{\"332\":1,\"350\":1,\"352\":1}}],[\"size\",{\"0\":{\"359\":1},\"1\":{\"58\":1,\"283\":8,\"332\":3,\"333\":2,\"334\":6,\"338\":1,\"350\":1,\"352\":5,\"359\":9,\"365\":1,\"368\":9,\"543\":1,\"631\":13,\"917\":1,\"950\":10,\"958\":6,\"1332\":5,\"1338\":1,\"1435\":1,\"1518\":4,\"1527\":2,\"1546\":1,\"1738\":2,\"1770\":1,\"1789\":5,\"1790\":2,\"1798\":4,\"1826\":3,\"1828\":3,\"1829\":3,\"1846\":1,\"1850\":1,\"1963\":1}}],[\"sidecar首选\",{\"1\":{\"12\":1,\"731\":1}}],[\"spoolsize++\",{\"1\":{\"1850\":1}}],[\"spoolsize\",{\"1\":{\"1850\":2}}],[\"spoolsync\",{\"1\":{\"1850\":2}}],[\"spool\",{\"1\":{\"1850\":5}}],[\"sport\",{\"1\":{\"435\":3}}],[\"sportcar\",{\"1\":{\"435\":4}}],[\"sp<loopercallback>\",{\"1\":{\"1831\":1}}],[\"sp<messagehandler>\",{\"1\":{\"1826\":1,\"1828\":1,\"1831\":2}}],[\"sp<android\",{\"1\":{\"1806\":1}}],[\"sp<thread>\",{\"1\":{\"1778\":1}}],[\"sp<processstate>\",{\"1\":{\"1778\":1,\"1798\":1,\"1805\":1}}],[\"sp<javadeathrecipient>\",{\"1\":{\"1762\":1}}],[\"sp<interface>\",{\"1\":{\"1805\":1}}],[\"sp<imediaplayerservice>\",{\"1\":{\"1799\":1}}],[\"sp<imyservice>\",{\"1\":{\"1726\":1}}],[\"sp<iservicemanager>\",{\"1\":{\"1798\":1,\"1799\":1,\"1805\":1,\"1806\":2}}],[\"sp<ibinder>\",{\"1\":{\"1727\":2,\"1798\":1,\"1799\":4,\"1805\":1}}],[\"sp\",{\"1\":{\"1725\":1,\"1726\":2,\"1778\":1}}],[\"spname\",{\"1\":{\"1625\":1}}],[\"sp+注解\",{\"1\":{\"1622\":1}}],[\"spid\",{\"1\":{\"1790\":4}}],[\"spilt\",{\"1\":{\"1521\":1}}],[\"spinytech\",{\"1\":{\"1483\":1}}],[\"spi+\",{\"1\":{\"1483\":1}}],[\"spi\",{\"1\":{\"1479\":1,\"1503\":1}}],[\"spi中添加内容是有损的\",{\"1\":{\"808\":1}}],[\"sputil\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"spread\",{\"1\":{\"1346\":1}}],[\"sprintf\",{\"1\":{\"993\":1,\"1036\":1,\"1110\":1}}],[\"springfox<\",{\"1\":{\"672\":1}}],[\"springframework\",{\"1\":{\"650\":8,\"672\":1}}],[\"springboot2\",{\"1\":{\"650\":1}}],[\"springboot\",{\"1\":{\"12\":1,\"731\":1}}],[\"springdoc规范化代码\",{\"1\":{\"12\":1,\"731\":1}}],[\"springdoc\",{\"1\":{\"12\":1,\"731\":1}}],[\"spring官方内置序列化\",{\"1\":{\"12\":1,\"731\":1}}],[\"spring官方内置连接池\",{\"1\":{\"12\":1,\"731\":1}}],[\"springcloud\",{\"1\":{\"12\":3,\"731\":3,\"1503\":2}}],[\"spring\",{\"0\":{\"11\":1,\"730\":1},\"1\":{\"8\":2,\"9\":1,\"12\":20,\"672\":1,\"727\":2,\"728\":1,\"731\":20,\"805\":1,\"1503\":1}}],[\"splashtheme\",{\"1\":{\"1320\":1}}],[\"splash\",{\"1\":{\"1320\":1}}],[\"split\",{\"1\":{\"525\":1,\"1521\":1,\"1552\":1}}],[\"span建造者模式\",{\"1\":{\"1312\":1}}],[\"span支持工具类\",{\"1\":{\"1311\":1}}],[\"span\",{\"1\":{\"1310\":4}}],[\"spannable\",{\"1\":{\"1310\":4}}],[\"spannablestringbuilder和spannablestring主要通过使用\",{\"1\":{\"1310\":1}}],[\"spannablestringbuilder\",{\"1\":{\"1305\":1,\"1312\":2,\"1313\":3}}],[\"spannablestringbuilder三方库\",{\"1\":{\"1302\":1}}],[\"spantv\",{\"1\":{\"1307\":1,\"1313\":7}}],[\"spantextview\",{\"1\":{\"1306\":1}}],[\"spanbuilder3\",{\"1\":{\"1306\":1}}],[\"spanbuilder2\",{\"1\":{\"1306\":1}}],[\"spanbuilder1\",{\"1\":{\"1306\":1}}],[\"spanbuilder方法\",{\"1\":{\"1305\":1}}],[\"spanbuilder\",{\"1\":{\"1305\":5,\"1307\":6,\"1312\":7,\"1313\":7}}],[\"spanbuilder提供支持方法\",{\"1\":{\"1305\":1}}],[\"spanlite链式调用拼装\",{\"0\":{\"1313\":1}}],[\"spanlite让你so\",{\"0\":{\"1303\":1}}],[\"spanlite\",{\"0\":{\"1301\":1},\"1\":{\"1304\":1,\"1306\":1,\"1307\":1,\"1313\":7,\"1314\":1}}],[\"spacebetween\",{\"1\":{\"1708\":1}}],[\"space\",{\"1\":{\"1119\":2}}],[\"spawnpooledthread\",{\"1\":{\"1778\":2}}],[\"spawn\",{\"1\":{\"94\":2,\"644\":1,\"1770\":2,\"1778\":1,\"1780\":1}}],[\"special\",{\"1\":{\"993\":1}}],[\"specials\",{\"1\":{\"19\":1}}],[\"specified\",{\"1\":{\"615\":1,\"1709\":1}}],[\"specific\",{\"1\":{\"583\":1,\"631\":1,\"1326\":1,\"1648\":1}}],[\"spend\",{\"1\":{\"103\":4}}],[\"suffix\",{\"1\":{\"1601\":2,\"1604\":1}}],[\"suggestionspan\",{\"1\":{\"1310\":1}}],[\"sugar\",{\"1\":{\"459\":5}}],[\"suspend=n\",{\"1\":{\"1607\":1}}],[\"suspend\",{\"1\":{\"1236\":1}}],[\"surfaceflinger\",{\"1\":{\"1787\":1}}],[\"sur1\",{\"1\":{\"1131\":1}}],[\"sur0\",{\"1\":{\"1131\":1}}],[\"sure\",{\"1\":{\"631\":1}}],[\"survivorratio=30\",{\"1\":{\"711\":1}}],[\"survivor1\",{\"1\":{\"207\":5}}],[\"survivor1=\",{\"1\":{\"206\":1}}],[\"survivor\",{\"1\":{\"207\":1}}],[\"survivor0\",{\"1\":{\"206\":1,\"207\":8}}],[\"subdirectory\",{\"1\":{\"1534\":2}}],[\"subscriptionfound\",{\"1\":{\"1546\":2}}],[\"subscriptionsbyeventtype\",{\"1\":{\"1546\":3}}],[\"subscriptions\",{\"1\":{\"1546\":7}}],[\"subscription\",{\"1\":{\"1546\":13}}],[\"subscriptspan\",{\"1\":{\"1310\":1}}],[\"subscribeannotation\",{\"1\":{\"1546\":5}}],[\"subscribedevents\",{\"1\":{\"1546\":5}}],[\"subscribers\",{\"1\":{\"1546\":1}}],[\"subscribermethod\",{\"1\":{\"1546\":11}}],[\"subscribermethodfinder\",{\"1\":{\"1546\":1}}],[\"subscribermethods\",{\"1\":{\"1546\":6}}],[\"subscriberclass\",{\"1\":{\"1546\":5}}],[\"subscriber\",{\"1\":{\"1546\":8}}],[\"subscribe\",{\"1\":{\"1364\":2,\"1416\":1,\"1546\":5,\"1645\":1}}],[\"substring\",{\"1\":{\"1349\":3,\"1601\":1,\"1604\":1}}],[\"substitution\",{\"1\":{\"631\":2}}],[\"subsequence\",{\"1\":{\"1349\":4}}],[\"subject`\",{\"1\":{\"615\":1}}],[\"subject\",{\"1\":{\"614\":1,\"622\":1,\"630\":1,\"1364\":6}}],[\"subjectproxy\",{\"1\":{\"447\":2}}],[\"subjectproxy<ilawsuit>\",{\"1\":{\"447\":2}}],[\"subjectproxy<t>\",{\"1\":{\"447\":1}}],[\"subtractionexpression\",{\"1\":{\"525\":3}}],[\"submit\",{\"1\":{\"259\":7,\"447\":6,\"897\":1}}],[\"sum\",{\"1\":{\"359\":7,\"897\":4,\"1203\":4,\"1518\":2,\"1530\":2}}],[\"sun\",{\"1\":{\"351\":1,\"694\":1,\"1044\":1,\"1197\":1}}],[\"suppresslint\",{\"1\":{\"1364\":2,\"1416\":2}}],[\"suppresswarnings\",{\"1\":{\"342\":1,\"381\":1}}],[\"supportsuperannotation\",{\"1\":{\"1604\":3}}],[\"supports\",{\"1\":{\"631\":2}}],[\"support\",{\"0\":{\"55\":1},\"1\":{\"52\":2,\"55\":4,\"115\":3,\"619\":1,\"631\":1,\"1289\":1,\"1329\":6,\"1346\":12,\"1361\":7,\"1476\":1,\"1567\":1}}],[\"supportedabis\",{\"1\":{\"1298\":2}}],[\"supported\",{\"0\":{\"43\":1},\"1\":{\"1298\":1}}],[\"superscriptspan\",{\"1\":{\"1310\":1}}],[\"superclassname\",{\"1\":{\"979\":1,\"1109\":3}}],[\"superclass\",{\"1\":{\"979\":1,\"1003\":5,\"1009\":1,\"1015\":1,\"1076\":1,\"1081\":1,\"1109\":1}}],[\"superclazz\",{\"1\":{\"447\":2}}],[\"super\",{\"1\":{\"237\":1,\"338\":1,\"365\":1,\"381\":1,\"409\":1,\"459\":2,\"465\":2,\"471\":2,\"483\":3,\"614\":1,\"622\":1,\"630\":1,\"884\":2,\"991\":1,\"995\":1,\"1076\":1,\"1305\":1,\"1320\":2,\"1358\":1,\"1383\":5,\"1416\":2,\"1521\":1,\"1598\":2,\"1604\":2,\"1610\":5,\"1666\":5,\"1732\":1,\"1737\":4,\"1739\":1,\"1851\":1}}],[\"suc\",{\"1\":{\"852\":2,\"853\":3}}],[\"successful\",{\"1\":{\"103\":1,\"895\":1}}],[\"success\",{\"1\":{\"103\":1,\"694\":2,\"711\":1}}],[\"such\",{\"0\":{\"61\":1},\"1\":{\"61\":2,\"94\":1,\"631\":1}}],[\"su\",{\"1\":{\"16\":1,\"619\":1}}],[\"sudo\",{\"1\":{\"16\":2,\"118\":1,\"612\":1,\"613\":3,\"619\":2,\"620\":1,\"628\":1,\"661\":3,\"662\":4,\"676\":1,\"677\":1,\"678\":1,\"679\":1,\"684\":3,\"688\":1,\"692\":1,\"693\":1,\"694\":1,\"695\":1,\"696\":1,\"701\":2,\"702\":2,\"707\":4,\"722\":3,\"723\":4,\"822\":1,\"833\":2,\"1960\":1,\"1974\":1}}],[\"shrinkresources\",{\"1\":{\"1317\":1}}],[\"sh33773886d1563280923609\",{\"1\":{\"1298\":1}}],[\"shwenzhang\",{\"1\":{\"1292\":1}}],[\"shi2huang\",{\"1\":{\"1503\":1}}],[\"shinichi\",{\"1\":{\"900\":1}}],[\"shift\",{\"1\":{\"329\":1}}],[\"shift+command+g组合键\",{\"1\":{\"25\":1}}],[\"shell脚本\",{\"0\":{\"986\":1,\"997\":1,\"1017\":1,\"1103\":1}}],[\"shell\",{\"1\":{\"711\":1,\"1583\":1,\"1728\":2,\"1733\":2}}],[\"shellcheck\",{\"1\":{\"711\":4}}],[\"shellsort\",{\"1\":{\"281\":1}}],[\"shadercode\",{\"1\":{\"1540\":1}}],[\"shaderhelper\",{\"1\":{\"1540\":1}}],[\"shanghai\",{\"1\":{\"711\":1}}],[\"sharing\",{\"1\":{\"649\":1}}],[\"sharepreffacade\",{\"1\":{\"1626\":1}}],[\"shareprefmanager\",{\"1\":{\"1626\":7,\"1627\":1,\"1628\":2}}],[\"sharepref文件名\",{\"1\":{\"1625\":1}}],[\"sharepref\",{\"1\":{\"1620\":1,\"1623\":1,\"1625\":1}}],[\"sharepreferenceutill\",{\"1\":{\"1332\":1}}],[\"sharedcount\",{\"1\":{\"886\":1}}],[\"shared\",{\"1\":{\"880\":1,\"886\":1,\"1534\":1}}],[\"share\",{\"1\":{\"638\":4,\"640\":1,\"694\":1,\"1292\":1}}],[\"sharememory\",{\"1\":{\"268\":1}}],[\"sha256\",{\"1\":{\"638\":1}}],[\"shutdownnow\",{\"1\":{\"915\":1}}],[\"shutdown\",{\"1\":{\"614\":1,\"622\":1,\"630\":1,\"869\":1,\"907\":1,\"915\":1,\"917\":6,\"923\":1,\"938\":1,\"950\":5}}],[\"shop\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"shoppingcart\",{\"1\":{\"668\":2}}],[\"short\",{\"1\":{\"1009\":2,\"1182\":1,\"1305\":2,\"1307\":3,\"1335\":4,\"1530\":3,\"1598\":1}}],[\"showdeliverytime\",{\"1\":{\"1711\":1}}],[\"showtoast\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"showticketinfo\",{\"1\":{\"441\":5}}],[\"showapkinfo\",{\"1\":{\"1323\":2,\"1459\":2}}],[\"show\",{\"1\":{\"614\":2,\"622\":2,\"630\":2,\"1305\":2,\"1307\":3,\"1358\":1,\"1416\":1,\"1488\":1,\"1503\":1,\"1552\":1,\"1568\":1,\"1598\":1,\"1949\":1}}],[\"showreport\",{\"1\":{\"531\":4}}],[\"showinfo\",{\"1\":{\"531\":4}}],[\"shouldoverrideurlloading\",{\"1\":{\"1358\":2}}],[\"shouldparkafterfailedacquire\",{\"1\":{\"879\":1,\"880\":1}}],[\"should\",{\"0\":{\"82\":1},\"1\":{\"1383\":1,\"1666\":1,\"1840\":1}}],[\"sh\",{\"1\":{\"16\":14,\"94\":2,\"644\":1,\"645\":7,\"711\":6,\"715\":2,\"1056\":2,\"1070\":1}}],[\"s3\",{\"1\":{\"12\":1,\"731\":1}}],[\"smediaplayerservice\",{\"1\":{\"1799\":3}}],[\"sm\",{\"1\":{\"1725\":2,\"1726\":2,\"1798\":1,\"1799\":2}}],[\"smtt\",{\"1\":{\"1416\":1}}],[\"smscodeet\",{\"1\":{\"1364\":1}}],[\"smainthreadhandler\",{\"1\":{\"1869\":2}}],[\"smartrefreshbloc\",{\"1\":{\"1383\":5,\"1666\":5}}],[\"smartrefreshbloc页面快速开发模板\",{\"0\":{\"1383\":1,\"1666\":1}}],[\"smart原则\",{\"0\":{\"583\":1}}],[\"smallint\",{\"1\":{\"615\":1}}],[\"smallcoffeesugar\",{\"1\":{\"459\":2}}],[\"smallcoffeeordinary\",{\"1\":{\"459\":2}}],[\"smallcoffee\",{\"1\":{\"459\":6}}],[\"smallcar\",{\"1\":{\"435\":5}}],[\"small\",{\"1\":{\"435\":3,\"631\":1}}],[\"sm4等\",{\"1\":{\"12\":1,\"731\":1}}],[\"sm2\",{\"1\":{\"12\":1,\"731\":1}}],[\"say\",{\"1\":{\"1731\":1,\"1732\":2}}],[\"sayhello\",{\"1\":{\"1188\":12,\"1727\":8,\"1731\":2,\"1732\":3}}],[\"san\",{\"1\":{\"1518\":1}}],[\"save\",{\"1\":{\"1409\":2,\"1960\":1}}],[\"savedinstancestate\",{\"1\":{\"1295\":1,\"1468\":1,\"1598\":2,\"1610\":8}}],[\"savedstate\",{\"1\":{\"896\":2}}],[\"same\",{\"1\":{\"631\":1}}],[\"safehandler\",{\"1\":{\"1851\":1}}],[\"safedoublecheckedlocking\",{\"1\":{\"864\":2}}],[\"safeabacount\",{\"1\":{\"853\":1}}],[\"safecount\",{\"1\":{\"852\":1}}],[\"safe\",{\"1\":{\"619\":1,\"631\":1}}],[\"safevarargs\",{\"1\":{\"328\":1}}],[\"sa\",{\"1\":{\"12\":2,\"731\":2}}],[\"still\",{\"1\":{\"1850\":1}}],[\"stickyevent\",{\"1\":{\"1546\":2}}],[\"stickyevents\",{\"1\":{\"1546\":3}}],[\"sticky\",{\"1\":{\"1546\":2}}],[\"sticketmap\",{\"1\":{\"441\":4}}],[\"stw\",{\"1\":{\"1135\":1,\"1139\":1}}],[\"step\",{\"0\":{\"1641\":1,\"1642\":1,\"1644\":1,\"1645\":1,\"1646\":1},\"1\":{\"1518\":2}}],[\"ste\",{\"1\":{\"1036\":2}}],[\"stes\",{\"1\":{\"1036\":5}}],[\"st\",{\"1\":{\"820\":1}}],[\"storage\",{\"1\":{\"631\":1,\"1323\":1,\"1416\":2,\"1459\":1}}],[\"store\",{\"1\":{\"495\":2,\"1220\":2,\"1435\":1,\"1952\":1}}],[\"storepass\",{\"1\":{\"106\":1}}],[\"stoploading\",{\"1\":{\"1416\":1}}],[\"stopiferror\",{\"1\":{\"1197\":1}}],[\"stop不用\",{\"1\":{\"945\":1}}],[\"stopped\",{\"1\":{\"711\":2}}],[\"stop\",{\"1\":{\"619\":1,\"711\":9,\"1135\":1,\"1713\":1}}],[\"staging\",{\"1\":{\"1746\":2,\"1781\":1,\"1791\":1}}],[\"standard\",{\"1\":{\"1708\":2}}],[\"stamp\",{\"1\":{\"853\":5}}],[\"stable\",{\"1\":{\"763\":1,\"787\":1,\"793\":1,\"796\":1,\"1974\":1}}],[\"stat\",{\"1\":{\"834\":1}}],[\"statelesswidget\",{\"1\":{\"1392\":1,\"1402\":1,\"1675\":1,\"1685\":1}}],[\"state<defaultpage>\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"state<blocprovider<blocbase>>\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"statefulwidget\",{\"1\":{\"1383\":3,\"1666\":3}}],[\"state\",{\"1\":{\"822\":2,\"1383\":1,\"1666\":1,\"1702\":1,\"1708\":4,\"1709\":1,\"1711\":1,\"1712\":1,\"1713\":1,\"1770\":2,\"1780\":3,\"1788\":1,\"1789\":2,\"1790\":2}}],[\"statement\",{\"1\":{\"631\":2}}],[\"status=0\",{\"1\":{\"694\":2}}],[\"status\",{\"1\":{\"613\":1,\"661\":1,\"694\":1,\"707\":1,\"711\":8,\"722\":1,\"896\":3,\"1717\":2,\"1727\":2,\"1756\":8,\"1762\":1,\"1778\":3,\"1788\":1,\"1798\":5,\"1948\":2}}],[\"static变量会成为一个野指针\",{\"1\":{\"1530\":1}}],[\"staticcachefield\",{\"1\":{\"1527\":1}}],[\"staticslotcount\",{\"1\":{\"1109\":1}}],[\"staticmethod\",{\"1\":{\"995\":2}}],[\"staticvars\",{\"1\":{\"984\":1,\"1015\":2,\"1109\":1}}],[\"staticvar\",{\"1\":{\"983\":3}}],[\"static\",{\"1\":{\"160\":2,\"169\":5,\"247\":4,\"259\":6,\"328\":1,\"331\":1,\"345\":1,\"348\":1,\"351\":1,\"352\":3,\"354\":1,\"358\":5,\"359\":1,\"365\":2,\"367\":1,\"381\":1,\"404\":1,\"405\":12,\"415\":1,\"416\":1,\"422\":3,\"428\":1,\"435\":2,\"441\":3,\"447\":3,\"453\":1,\"459\":1,\"465\":1,\"471\":1,\"477\":1,\"483\":1,\"489\":1,\"501\":1,\"507\":1,\"513\":1,\"519\":1,\"525\":1,\"531\":1,\"537\":1,\"543\":1,\"823\":1,\"828\":4,\"843\":2,\"863\":3,\"864\":2,\"867\":5,\"868\":2,\"869\":1,\"870\":3,\"876\":1,\"878\":1,\"880\":1,\"884\":5,\"885\":1,\"896\":1,\"897\":2,\"900\":11,\"904\":2,\"905\":3,\"907\":4,\"908\":3,\"917\":3,\"950\":2,\"983\":2,\"984\":1,\"993\":1,\"995\":2,\"1030\":2,\"1042\":1,\"1188\":8,\"1203\":4,\"1311\":1,\"1312\":1,\"1313\":1,\"1320\":3,\"1326\":1,\"1332\":2,\"1349\":1,\"1358\":6,\"1364\":5,\"1368\":1,\"1374\":1,\"1383\":4,\"1416\":2,\"1417\":1,\"1468\":2,\"1475\":1,\"1488\":1,\"1527\":36,\"1530\":1,\"1534\":1,\"1540\":4,\"1552\":2,\"1555\":2,\"1589\":6,\"1598\":6,\"1601\":4,\"1626\":4,\"1666\":4,\"1717\":4,\"1730\":1,\"1731\":1,\"1732\":3,\"1736\":1,\"1737\":1,\"1738\":1,\"1739\":6,\"1756\":4,\"1762\":1,\"1770\":1,\"1772\":3,\"1806\":1,\"1825\":5,\"1829\":1,\"1840\":2,\"1843\":1,\"1850\":1,\"1851\":2,\"1862\":1,\"1863\":1,\"1865\":1,\"1866\":4,\"1867\":1,\"1869\":1}}],[\"star\",{\"1\":{\"284\":3}}],[\"startviazygote\",{\"1\":{\"1869\":1}}],[\"startvm\",{\"1\":{\"1861\":1}}],[\"startproceeslocked\",{\"1\":{\"1869\":1}}],[\"startpc\",{\"1\":{\"1036\":5}}],[\"starthomeactivitylocked\",{\"1\":{\"1867\":1}}],[\"startbootphase\",{\"1\":{\"1867\":4}}],[\"startbootstrapservices\",{\"1\":{\"1867\":1}}],[\"startotherservices\",{\"1\":{\"1867\":2}}],[\"startcoreservices\",{\"1\":{\"1867\":1}}],[\"startclass\",{\"1\":{\"1861\":1,\"1866\":1}}],[\"startmeth\",{\"1\":{\"1861\":1}}],[\"startreg\",{\"1\":{\"1861\":1}}],[\"startthreadpool\",{\"1\":{\"1777\":1,\"1778\":1}}],[\"startargs\",{\"1\":{\"1866\":1}}],[\"startability\",{\"1\":{\"1702\":1,\"1708\":2}}],[\"startapp\",{\"1\":{\"1358\":1}}],[\"startactivityforresult\",{\"1\":{\"1417\":3}}],[\"startactivity\",{\"1\":{\"1326\":4,\"1358\":2,\"1869\":1}}],[\"startsystemserver\",{\"1\":{\"1862\":3,\"1865\":2,\"1866\":1}}],[\"startswith\",{\"1\":{\"1349\":1,\"1358\":2,\"1518\":1,\"1521\":1,\"1592\":1,\"1598\":2}}],[\"startservice\",{\"1\":{\"1320\":1,\"1756\":1}}],[\"startjvm\",{\"1\":{\"1044\":1,\"1056\":2,\"1070\":1}}],[\"startinit\",{\"1\":{\"1002\":1,\"1003\":1}}],[\"starting\",{\"0\":{\"43\":1},\"1\":{\"694\":1}}],[\"start|stop|restart|status|port|banner\",{\"1\":{\"711\":1}}],[\"started\",{\"1\":{\"694\":1,\"1555\":2,\"1770\":1}}],[\"starter<\",{\"1\":{\"672\":1}}],[\"starter\",{\"1\":{\"12\":16,\"731\":16}}],[\"startup\",{\"1\":{\"501\":3}}],[\"start\",{\"0\":{\"76\":1},\"1\":{\"85\":1,\"94\":1,\"154\":1,\"284\":6,\"501\":1,\"613\":1,\"637\":1,\"672\":1,\"678\":1,\"684\":1,\"694\":1,\"707\":1,\"711\":7,\"823\":2,\"867\":4,\"868\":1,\"870\":2,\"884\":1,\"897\":8,\"904\":2,\"905\":2,\"917\":1,\"938\":1,\"945\":1,\"950\":1,\"958\":2,\"1036\":1,\"1044\":2,\"1310\":2,\"1313\":2,\"1320\":2,\"1349\":2,\"1364\":2,\"1534\":6,\"1713\":2,\"1730\":1,\"1731\":1,\"1756\":1,\"1777\":1,\"1790\":1,\"1858\":1,\"1860\":2,\"1861\":1,\"1865\":2,\"1867\":1,\"1869\":2}}],[\"stack<>\",{\"1\":{\"525\":1}}],[\"stack<iarithemticexpression>\",{\"1\":{\"525\":1}}],[\"stack\",{\"1\":{\"271\":1,\"631\":1,\"984\":27,\"1009\":11,\"1015\":1,\"1030\":4,\"1036\":3,\"1086\":1,\"1095\":4,\"1115\":1,\"1402\":1,\"1685\":1,\"1770\":1}}],[\"stackoverflowerror\",{\"1\":{\"1119\":1}}],[\"stackoverflow\",{\"1\":{\"55\":1,\"115\":1}}],[\"stacktraceelement\",{\"1\":{\"1036\":2}}],[\"stacktrace\",{\"1\":{\"52\":1}}],[\"stub构造函数\",{\"1\":{\"1739\":1}}],[\"stub\",{\"1\":{\"1736\":1,\"1737\":2,\"1739\":5}}],[\"student\",{\"1\":{\"929\":2,\"1711\":1}}],[\"student类与teacher类继承了person类\",{\"1\":{\"738\":1}}],[\"studio继续高亮该怎么办\",{\"1\":{\"1491\":1}}],[\"studio更新到3\",{\"1\":{\"64\":1}}],[\"studio\",{\"0\":{\"31\":1,\"34\":1},\"1\":{\"31\":1,\"67\":1,\"1317\":1,\"1702\":1,\"1707\":1,\"1708\":1,\"1709\":3,\"1712\":1,\"1908\":1}}],[\"stuff\",{\"1\":{\"334\":2}}],[\"stupid56862\",{\"1\":{\"46\":1,\"52\":1}}],[\"style>\",{\"1\":{\"1320\":2}}],[\"stylespan\",{\"1\":{\"1310\":1}}],[\"styleable\",{\"1\":{\"70\":1}}],[\"style\",{\"0\":{\"31\":1},\"1\":{\"31\":1,\"471\":2,\"1292\":3,\"1305\":1,\"1320\":1,\"1867\":1}}],[\"strerror\",{\"1\":{\"1857\":1}}],[\"stream\",{\"1\":{\"12\":1,\"731\":1,\"1858\":1}}],[\"strikethroughspan\",{\"1\":{\"1310\":1}}],[\"string8\",{\"1\":{\"1778\":1}}],[\"string16\",{\"1\":{\"1725\":1,\"1726\":1,\"1798\":2,\"1799\":3,\"1806\":2}}],[\"stringutilkt\",{\"1\":{\"1521\":1}}],[\"stringutils\",{\"1\":{\"1358\":2,\"1417\":1,\"1468\":3,\"1604\":1}}],[\"stringvar\",{\"1\":{\"1055\":2,\"1062\":1,\"1070\":1}}],[\"stringtest\",{\"1\":{\"1024\":1}}],[\"stringtoutf16\",{\"1\":{\"1015\":1}}],[\"stringclass\",{\"1\":{\"1016\":2,\"1044\":2}}],[\"strings\",{\"1\":{\"985\":1,\"996\":1,\"1044\":1,\"1064\":6,\"1102\":1,\"1521\":3}}],[\"string=password\",{\"1\":{\"621\":1,\"695\":1}}],[\"string`\",{\"1\":{\"615\":1}}],[\"stringhash32\",{\"1\":{\"351\":1}}],[\"string>\",{\"1\":{\"349\":1,\"365\":1,\"1332\":10,\"1518\":2,\"1604\":1}}],[\"stringbuffer是线程安全的\",{\"1\":{\"213\":1}}],[\"stringbuilder是非线程安全的\",{\"1\":{\"213\":1}}],[\"string\",{\"1\":{\"154\":3,\"169\":1,\"197\":1,\"259\":3,\"327\":1,\"348\":1,\"351\":2,\"365\":1,\"405\":3,\"409\":3,\"415\":1,\"416\":1,\"422\":14,\"428\":1,\"435\":1,\"441\":11,\"447\":3,\"453\":1,\"459\":4,\"465\":6,\"471\":1,\"477\":1,\"483\":7,\"489\":1,\"495\":9,\"501\":1,\"507\":1,\"513\":1,\"519\":7,\"525\":3,\"531\":13,\"537\":6,\"543\":8,\"614\":1,\"622\":1,\"630\":1,\"823\":1,\"843\":1,\"867\":1,\"868\":1,\"885\":2,\"897\":1,\"900\":10,\"904\":1,\"905\":1,\"907\":1,\"908\":5,\"926\":4,\"929\":3,\"932\":6,\"958\":4,\"978\":3,\"979\":2,\"983\":1,\"984\":1,\"992\":2,\"995\":1,\"1009\":12,\"1015\":15,\"1016\":2,\"1017\":2,\"1022\":4,\"1030\":10,\"1036\":9,\"1044\":1,\"1055\":3,\"1062\":1,\"1063\":9,\"1064\":5,\"1070\":1,\"1102\":1,\"1109\":5,\"1110\":6,\"1175\":1,\"1182\":1,\"1188\":2,\"1203\":3,\"1292\":12,\"1298\":19,\"1312\":3,\"1320\":4,\"1326\":5,\"1332\":23,\"1352\":2,\"1358\":4,\"1364\":2,\"1368\":2,\"1383\":3,\"1416\":3,\"1417\":8,\"1468\":2,\"1475\":1,\"1488\":3,\"1518\":12,\"1521\":4,\"1527\":18,\"1530\":10,\"1534\":2,\"1540\":1,\"1552\":5,\"1555\":1,\"1589\":1,\"1592\":6,\"1598\":1,\"1601\":6,\"1604\":6,\"1625\":1,\"1628\":1,\"1660\":2,\"1666\":3,\"1711\":2,\"1713\":3,\"1730\":1,\"1731\":3,\"1732\":4,\"1736\":2,\"1737\":1,\"1738\":1,\"1739\":2,\"1756\":4,\"1778\":1,\"1851\":1,\"1860\":2,\"1862\":1,\"1863\":1,\"1865\":3,\"1866\":3,\"1867\":1,\"1869\":1}}],[\"struct\",{\"1\":{\"978\":1,\"1002\":1,\"1009\":1,\"1029\":2,\"1036\":4,\"1044\":1,\"1055\":1,\"1062\":1,\"1063\":1,\"1070\":1,\"1076\":1,\"1079\":1,\"1094\":2,\"1095\":1,\"1096\":1,\"1109\":4,\"1110\":4,\"1708\":1,\"1770\":12,\"1772\":2,\"1788\":1,\"1789\":13,\"1790\":4,\"1828\":1,\"1829\":2,\"1831\":5}}],[\"structure\",{\"1\":{\"615\":1}}],[\"strarray\",{\"1\":{\"1861\":1}}],[\"stra\",{\"1\":{\"908\":3}}],[\"strategy取代类型码\",{\"1\":{\"1283\":1}}],[\"strategy=ant\",{\"1\":{\"672\":1}}],[\"strategy\",{\"1\":{\"12\":1,\"513\":5,\"731\":1}}],[\"strb\",{\"1\":{\"908\":5}}],[\"str\",{\"1\":{\"154\":5,\"1506\":1,\"1518\":1,\"1527\":6,\"1731\":2,\"1732\":5}}],[\"strongreference\",{\"1\":{\"1126\":1}}],[\"strong\",{\"1\":{\"154\":1}}],[\"seinfo\",{\"1\":{\"1863\":1}}],[\"seq\",{\"1\":{\"1828\":1,\"1831\":1}}],[\"sequence\",{\"1\":{\"1521\":1}}],[\"sehandle\",{\"1\":{\"1788\":2}}],[\"separator\",{\"1\":{\"1417\":2,\"1613\":8}}],[\"separately\",{\"1\":{\"314\":1}}],[\"sevenzip\",{\"1\":{\"1292\":2}}],[\"se\",{\"1\":{\"1078\":4}}],[\"ses\",{\"1\":{\"938\":2}}],[\"session\",{\"1\":{\"614\":1,\"615\":1,\"630\":1,\"638\":1}}],[\"semaphoretest\",{\"1\":{\"907\":1}}],[\"semaphore\",{\"1\":{\"907\":6}}],[\"selinux权限是否使能\",{\"1\":{\"1788\":1}}],[\"selinux\",{\"1\":{\"1788\":5}}],[\"self所在的class\",{\"1\":{\"1109\":1}}],[\"self\",{\"1\":{\"978\":3,\"979\":8,\"984\":16,\"993\":8,\"1002\":4,\"1003\":3,\"1009\":25,\"1015\":14,\"1022\":11,\"1030\":14,\"1036\":23,\"1044\":22,\"1063\":11,\"1077\":1,\"1078\":5,\"1081\":14,\"1094\":3,\"1095\":1,\"1096\":2,\"1109\":13,\"1110\":18,\"1717\":2,\"1725\":2,\"1756\":1,\"1778\":2,\"1779\":3,\"1798\":3,\"1804\":1,\"1805\":2}}],[\"selfinterrupt\",{\"1\":{\"879\":1,\"880\":1}}],[\"select\",{\"1\":{\"614\":2,\"622\":2,\"630\":2,\"631\":1}}],[\"selectionsort\",{\"1\":{\"282\":1}}],[\"sensorservice\",{\"1\":{\"1868\":1}}],[\"sensor服务\",{\"1\":{\"1867\":1}}],[\"sendinguid\",{\"1\":{\"1850\":1}}],[\"sendmessage流程\",{\"1\":{\"1841\":1}}],[\"sendmessageattime\",{\"1\":{\"1826\":1}}],[\"sendmessagedelayed\",{\"1\":{\"1826\":1}}],[\"sendmessage\",{\"1\":{\"1826\":1,\"1837\":1,\"1839\":2,\"1841\":1}}],[\"sender\",{\"1\":{\"1717\":2}}],[\"sendbroadcast\",{\"1\":{\"1417\":1}}],[\"sendback\",{\"1\":{\"1383\":3,\"1666\":3}}],[\"sendtotarget\",{\"1\":{\"1416\":1}}],[\"send\",{\"1\":{\"644\":2,\"652\":1,\"1789\":1}}],[\"sentinel\",{\"1\":{\"12\":5,\"731\":5}}],[\"sex=\",{\"1\":{\"543\":1}}],[\"sex\",{\"1\":{\"495\":5,\"543\":5}}],[\"seg\",{\"1\":{\"359\":4}}],[\"segmentat\",{\"1\":{\"359\":2}}],[\"segments\",{\"1\":{\"358\":1,\"359\":7}}],[\"segment<k\",{\"1\":{\"358\":2,\"359\":2}}],[\"segment\",{\"1\":{\"358\":4,\"359\":5,\"360\":2}}],[\"segmentfault\",{\"1\":{\"31\":1,\"1399\":1,\"1682\":1}}],[\"search=psi\",{\"1\":{\"1552\":1}}],[\"searchboxjavabridge\",{\"1\":{\"1416\":1}}],[\"search\",{\"1\":{\"329\":1}}],[\"seata\",{\"1\":{\"12\":4,\"731\":4}}],[\"serif\",{\"1\":{\"1305\":1}}],[\"serial的老年代版本\",{\"1\":{\"1142\":1}}],[\"serial收集器多线程版本\",{\"1\":{\"1140\":1}}],[\"serial\",{\"0\":{\"1139\":1,\"1142\":1},\"1\":{\"1298\":3}}],[\"serial语义\",{\"1\":{\"859\":1}}],[\"serialversionuid\",{\"1\":{\"358\":1}}],[\"serializable\",{\"1\":{\"331\":1,\"358\":1,\"1009\":1,\"1030\":1}}],[\"serivces\",{\"1\":{\"805\":1}}],[\"serivceloader\",{\"1\":{\"805\":1}}],[\"serivce\",{\"1\":{\"259\":3}}],[\"servlet\",{\"1\":{\"650\":2}}],[\"serve\",{\"1\":{\"603\":1,\"656\":1}}],[\"servers\",{\"1\":{\"1867\":2}}],[\"serverpipefd\",{\"1\":{\"1863\":1}}],[\"server中会讲到\",{\"1\":{\"1862\":1}}],[\"server走这个流程\",{\"1\":{\"1862\":1}}],[\"server通过zygote和servcemanager创建app进程\",{\"1\":{\"1856\":1}}],[\"servermanager在looper中发现数据\",{\"1\":{\"1797\":1}}],[\"server的主线程并非binder线程\",{\"1\":{\"1776\":1}}],[\"server进程的上下文信息\",{\"1\":{\"1867\":1}}],[\"server进程启动\",{\"0\":{\"1864\":1}}],[\"server进程\",{\"1\":{\"1856\":1,\"1857\":1,\"1858\":2,\"1865\":2,\"1869\":2}}],[\"server进程执行binder\",{\"1\":{\"1768\":1}}],[\"server进程就存在16个线程\",{\"1\":{\"1752\":1}}],[\"server进程要先注册service到servicemanager\",{\"1\":{\"1744\":1}}],[\"server可进行ipc通信\",{\"1\":{\"1744\":1}}],[\"server端相对于servermanage都是客户端\",{\"1\":{\"1804\":1}}],[\"server端\",{\"1\":{\"1729\":1,\"1745\":1}}],[\"serverdemo\",{\"1\":{\"1724\":1,\"1728\":3,\"1729\":1,\"1730\":1,\"1733\":3}}],[\"server=y\",{\"1\":{\"1607\":1}}],[\"server=utf8\",{\"1\":{\"631\":2}}],[\"serverless\",{\"1\":{\"305\":2}}],[\"server\",{\"1\":{\"12\":14,\"94\":1,\"613\":1,\"615\":5,\"619\":1,\"631\":2,\"638\":6,\"640\":2,\"651\":3,\"680\":1,\"693\":1,\"694\":3,\"707\":4,\"731\":14,\"1206\":2,\"1209\":2,\"1210\":1,\"1744\":1,\"1858\":1,\"1865\":4,\"1866\":2,\"1870\":3,\"1952\":1,\"1960\":1},\"2\":{\"605\":1,\"609\":1,\"616\":1,\"623\":1,\"632\":1,\"641\":1,\"646\":1,\"653\":1,\"658\":1,\"663\":1,\"669\":1,\"673\":1,\"681\":1,\"685\":1,\"689\":1,\"697\":1,\"704\":1,\"708\":1,\"712\":1,\"716\":1,\"724\":1}}],[\"servicethread\",{\"1\":{\"1870\":1}}],[\"serviceconnection\",{\"1\":{\"1736\":2}}],[\"servicemanager所对应的bbinder\",{\"1\":{\"1804\":1}}],[\"servicemanager启动流程\",{\"1\":{\"1786\":2}}],[\"servicemanager最核心的两个功能为查询和注册服务\",{\"1\":{\"1785\":1}}],[\"servicemanager便是借助servicemanagernative类来找到servicemanagerproxy\",{\"1\":{\"1751\":1}}],[\"servicemanagerproxy的addservice\",{\"1\":{\"1751\":1}}],[\"servicemanagerproxy\",{\"1\":{\"1751\":1}}],[\"servicemanager的addservice\",{\"1\":{\"1751\":1,\"1868\":1}}],[\"servicemanagernative\",{\"1\":{\"1746\":1,\"1751\":1,\"1757\":1}}],[\"servicemanager是整个binder通信机制的大管家\",{\"1\":{\"1744\":1}}],[\"servicemanager\",{\"1\":{\"1730\":1,\"1731\":1,\"1746\":3,\"1751\":1,\"1756\":1,\"1757\":1,\"1787\":2,\"1791\":1,\"1805\":2,\"1806\":1,\"1856\":1}}],[\"servicemethod\",{\"1\":{\"1592\":11}}],[\"serviceload\",{\"1\":{\"1479\":1,\"1494\":1}}],[\"serviceloader使用和解析\",{\"1\":{\"1503\":1}}],[\"serviceloader\",{\"1\":{\"305\":1,\"1481\":1}}],[\"services\",{\"1\":{\"1292\":1,\"1567\":1,\"1867\":2,\"1870\":3}}],[\"service\",{\"1\":{\"12\":1,\"259\":4,\"311\":1,\"314\":1,\"613\":2,\"628\":1,\"637\":2,\"639\":1,\"694\":4,\"696\":1,\"731\":1,\"808\":1,\"923\":3,\"1320\":1,\"1587\":1,\"1588\":1,\"1589\":3,\"1592\":5,\"1595\":1,\"1725\":3,\"1726\":2,\"1736\":2,\"1737\":1,\"1744\":1,\"1746\":1,\"1756\":3,\"1787\":1,\"1788\":2,\"1790\":2,\"1791\":1,\"1796\":1,\"1798\":3,\"1799\":1,\"1858\":1}}],[\"sec\",{\"1\":{\"614\":1,\"622\":1,\"630\":1,\"1534\":7}}],[\"seconds\",{\"1\":{\"94\":1,\"247\":1,\"828\":1,\"867\":3}}],[\"secondserror\",{\"1\":{\"94\":2}}],[\"security\",{\"1\":{\"12\":3,\"631\":1,\"731\":3,\"1405\":5,\"1583\":1,\"1755\":1}}],[\"see\",{\"1\":{\"73\":1,\"631\":1,\"1555\":2,\"1577\":1,\"1601\":1,\"1648\":1}}],[\"setgroups=1001\",{\"1\":{\"1865\":1}}],[\"setgid=1000\",{\"1\":{\"1865\":1}}],[\"setgeolocationdatabasepath\",{\"1\":{\"1416\":1}}],[\"setgeolocationenabled\",{\"1\":{\"1416\":1}}],[\"setforthread\",{\"1\":{\"1829\":1}}],[\"setflags\",{\"1\":{\"1326\":4}}],[\"set<\",{\"1\":{\"1604\":3}}],[\"set<string>\",{\"1\":{\"1604\":2}}],[\"set方法\",{\"1\":{\"1527\":1}}],[\"setwebview\",{\"1\":{\"1416\":1}}],[\"setwebviewclient\",{\"1\":{\"1358\":1,\"1416\":1}}],[\"setwebchromeclient\",{\"1\":{\"1416\":2}}],[\"setjavascriptcanopenwindowsautomatically\",{\"1\":{\"1416\":1}}],[\"setjavascriptenabled\",{\"1\":{\"1416\":2}}],[\"setuid=1000\",{\"1\":{\"1865\":1}}],[\"setusewideviewport\",{\"1\":{\"1416\":1}}],[\"setuploadmessageabovel\",{\"1\":{\"1416\":1,\"1417\":1}}],[\"setuploadmessage\",{\"1\":{\"1416\":3,\"1417\":1}}],[\"setupdatehandler\",{\"1\":{\"1332\":2}}],[\"setup\",{\"1\":{\"702\":1}}],[\"setupcommand\",{\"1\":{\"489\":2}}],[\"setloadsimagesautomatically\",{\"1\":{\"1416\":1}}],[\"setloadwithoverviewmode\",{\"1\":{\"1416\":1}}],[\"setlayoutalgorithm\",{\"1\":{\"1416\":1}}],[\"setlevel\",{\"1\":{\"1329\":2}}],[\"setleftcommand\",{\"1\":{\"489\":2}}],[\"sethighlightcolor\",{\"1\":{\"1313\":1}}],[\"setheadandpropagate\",{\"1\":{\"880\":1}}],[\"sethead\",{\"1\":{\"422\":4,\"879\":1}}],[\"setonclicklistener\",{\"1\":{\"1598\":1}}],[\"setonclick\",{\"1\":{\"1305\":2,\"1307\":3}}],[\"setnegativebutton\",{\"1\":{\"1358\":1}}],[\"setnextpc\",{\"1\":{\"994\":1,\"1036\":1,\"1094\":1,\"1101\":1}}],[\"setname\",{\"1\":{\"495\":2}}],[\"setpluginstate\",{\"1\":{\"1416\":1}}],[\"setpositivebutton\",{\"1\":{\"1358\":1}}],[\"setpackage\",{\"1\":{\"1326\":1}}],[\"setparm\",{\"1\":{\"422\":4}}],[\"setpc\",{\"1\":{\"994\":1,\"1101\":1}}],[\"setpriority\",{\"1\":{\"942\":1}}],[\"setrenderpriority\",{\"1\":{\"1416\":1}}],[\"setref\",{\"1\":{\"1015\":3,\"1016\":1,\"1044\":1}}],[\"setrefvar\",{\"1\":{\"1015\":3}}],[\"setrealdata\",{\"1\":{\"926\":2}}],[\"setrightcommand\",{\"1\":{\"489\":2}}],[\"setextra\",{\"1\":{\"1036\":1}}],[\"setexclusiveownerthread\",{\"1\":{\"876\":2,\"882\":2,\"883\":1,\"886\":1}}],[\"setenabled\",{\"1\":{\"1364\":2,\"1589\":2,\"1595\":1}}],[\"setenable\",{\"1\":{\"799\":1}}],[\"setdefaulttextencodingname\",{\"1\":{\"1416\":1}}],[\"setdebug\",{\"1\":{\"1320\":1}}],[\"setdomstorageenabled\",{\"1\":{\"1416\":1}}],[\"setdowncommand\",{\"1\":{\"489\":2}}],[\"setdisplayzoomcontrols\",{\"1\":{\"1416\":1}}],[\"setdata2\",{\"1\":{\"1737\":1,\"1738\":1}}],[\"setdata1\",{\"1\":{\"1737\":1,\"1738\":1}}],[\"setdatabasepath\",{\"1\":{\"1416\":1}}],[\"setdatabaseenabled\",{\"1\":{\"1416\":1}}],[\"setdata\",{\"1\":{\"1326\":2,\"1417\":1}}],[\"setdaemon\",{\"1\":{\"868\":1,\"942\":1}}],[\"setthreadpriority\",{\"1\":{\"1730\":1}}],[\"settheme\",{\"1\":{\"1320\":1,\"1867\":1}}],[\"settargetpage\",{\"1\":{\"1468\":1}}],[\"settypearrayregion\",{\"1\":{\"1530\":1}}],[\"settype\",{\"1\":{\"1417\":3}}],[\"settext\",{\"1\":{\"1313\":1,\"1349\":5,\"1645\":1}}],[\"setter\",{\"1\":{\"1002\":1,\"1518\":1}}],[\"setter方法来访问\",{\"1\":{\"799\":1}}],[\"setter方法传递\",{\"1\":{\"753\":1}}],[\"settodefaults\",{\"1\":{\"1295\":1}}],[\"setting\",{\"1\":{\"631\":1,\"1399\":1,\"1682\":1}}],[\"settings\",{\"1\":{\"268\":2,\"1491\":1,\"1867\":1,\"1911\":1}}],[\"settitle\",{\"1\":{\"409\":1}}],[\"setmessage\",{\"1\":{\"1358\":1}}],[\"setmovementmethod\",{\"1\":{\"1313\":1}}],[\"setmaxage\",{\"1\":{\"650\":1}}],[\"setmtvstatus\",{\"1\":{\"507\":3}}],[\"setsourcepage\",{\"1\":{\"1468\":1}}],[\"setsoundcard\",{\"1\":{\"483\":2}}],[\"setsound\",{\"1\":{\"483\":1}}],[\"setsaveformdata\",{\"1\":{\"1416\":1}}],[\"setsavepassword\",{\"1\":{\"1416\":1}}],[\"setsupportmultiplewindows\",{\"1\":{\"1416\":1}}],[\"setsupportzoom\",{\"1\":{\"1416\":1}}],[\"setselection\",{\"1\":{\"1349\":5}}],[\"setsex\",{\"1\":{\"495\":2}}],[\"setspan\",{\"1\":{\"1310\":1,\"1311\":1,\"1313\":2}}],[\"setslot\",{\"1\":{\"993\":1}}],[\"setstate\",{\"1\":{\"876\":2,\"880\":1,\"882\":2,\"883\":1,\"886\":1}}],[\"setargv0\",{\"1\":{\"1860\":1,\"1869\":1}}],[\"setarray\",{\"1\":{\"342\":2}}],[\"setasynchronous\",{\"1\":{\"1841\":1}}],[\"setaccessible\",{\"1\":{\"1592\":4}}],[\"setaction\",{\"1\":{\"1320\":1,\"1326\":1,\"1417\":1,\"1736\":1}}],[\"setanimalname\",{\"1\":{\"1527\":1}}],[\"setappcachemaxsize\",{\"1\":{\"1416\":1}}],[\"setappcachepath\",{\"1\":{\"1416\":1}}],[\"setappcacheenabled\",{\"1\":{\"1416\":1}}],[\"setallowcontentaccess\",{\"1\":{\"1416\":1}}],[\"setallowcredentials\",{\"1\":{\"650\":1}}],[\"setallowfileaccess\",{\"1\":{\"1416\":1}}],[\"setage\",{\"1\":{\"495\":2}}],[\"setcontextclassloader\",{\"1\":{\"1866\":1}}],[\"setcontentview\",{\"1\":{\"1598\":1,\"1610\":4}}],[\"setcachemode\",{\"1\":{\"1416\":1}}],[\"setclassname\",{\"1\":{\"1326\":1}}],[\"setcpu\",{\"1\":{\"483\":2}}],[\"setcddevice\",{\"1\":{\"483\":2}}],[\"setcd\",{\"1\":{\"483\":1}}],[\"setbinarycontent\",{\"1\":{\"1552\":1}}],[\"setbuiltinzoomcontrols\",{\"1\":{\"1416\":1}}],[\"setbounds\",{\"1\":{\"1305\":1}}],[\"setbody\",{\"1\":{\"422\":4}}],[\"setblocker\",{\"1\":{\"896\":2}}],[\"setbranch\",{\"1\":{\"483\":1}}],[\"setimages\",{\"1\":{\"409\":2}}],[\"setinitialvalue\",{\"1\":{\"381\":2}}],[\"setvalue\",{\"1\":{\"348\":1}}],[\"set集合从原理上如何保证不重复\",{\"0\":{\"217\":1}}],[\"set\",{\"0\":{\"212\":1,\"322\":1},\"1\":{\"12\":1,\"73\":1,\"79\":6,\"94\":1,\"212\":2,\"381\":4,\"385\":2,\"613\":1,\"614\":1,\"615\":35,\"621\":1,\"622\":1,\"630\":1,\"631\":4,\"638\":3,\"644\":2,\"695\":1,\"731\":1,\"870\":1,\"886\":1,\"900\":1,\"1056\":1,\"1070\":1,\"1283\":2,\"1413\":4,\"1521\":1,\"1534\":19,\"1592\":2,\"1778\":1,\"1843\":1,\"1860\":1,\"1938\":1,\"1945\":1,\"1951\":3,\"1961\":1}}],[\"前置流程\",{\"0\":{\"1865\":1},\"1\":{\"1865\":1}}],[\"前置资源准备\",{\"1\":{\"598\":1}}],[\"前往以下目录\",{\"1\":{\"1341\":1}}],[\"前言\",{\"0\":{\"1302\":1,\"1694\":1},\"1\":{\"1317\":1,\"1323\":1,\"1527\":1,\"1537\":1,\"1540\":1,\"1543\":1,\"1595\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1610\":1,\"1632\":1,\"1905\":1}}],[\"前驱节点\",{\"1\":{\"878\":1}}],[\"前期顺利\",{\"1\":{\"598\":1}}],[\"前面不包括\",{\"1\":{\"1310\":2}}],[\"前面包括\",{\"1\":{\"1310\":2}}],[\"前面\",{\"1\":{\"349\":1}}],[\"前端不想接手\",{\"1\":{\"1694\":1}}],[\"前端界面开发瓶颈一直卡后端联调\",{\"1\":{\"1423\":1}}],[\"前端开发者这里不需要增加任何额外的工作\",{\"1\":{\"649\":1}}],[\"前端应用和后端的api服务器可能就处于不同的域下\",{\"1\":{\"649\":1}}],[\"前端同学抽调人员加班\",{\"1\":{\"595\":1}}],[\"前端基础\",{\"0\":{\"564\":1}}],[\"前端研发模式升级\",{\"1\":{\"305\":1}}],[\"前端框架\",{\"1\":{\"12\":1,\"731\":1}}],[\"前后端bridge联通\",{\"1\":{\"305\":1}}],[\"前后端联通\",{\"1\":{\"305\":1}}],[\"前后端分离技术方案\",{\"0\":{\"1423\":1}}],[\"前后端分离\",{\"1\":{\"305\":1}}],[\"前后端分离的分布式微服务架构\",{\"1\":{\"8\":1,\"727\":1}}],[\"前后端代码的生成\",{\"1\":{\"14\":1,\"733\":1}}],[\"├──pom\",{\"1\":{\"12\":1,\"731\":1}}],[\"├──\",{\"1\":{\"12\":11,\"731\":11}}],[\"壳工程\",{\"1\":{\"1476\":1}}],[\"壳\",{\"1\":{\"11\":1,\"730\":1}}],[\"+android\",{\"1\":{\"1737\":1}}],[\"+pidinfo\",{\"1\":{\"1736\":1}}],[\"+printgcdetails\",{\"1\":{\"711\":1}}],[\"+printgcdatestamps\",{\"1\":{\"711\":1}}],[\"+file\",{\"1\":{\"1613\":1}}],[\"+fieldname+\",{\"1\":{\"1604\":1}}],[\"+fieldname\",{\"1\":{\"1604\":1}}],[\"+1\",{\"1\":{\"1540\":2}}],[\"+表格自动生成\",{\"0\":{\"1367\":1}}],[\"+id\",{\"1\":{\"1346\":12}}],[\"+数组元素类型描述符\",{\"1\":{\"1008\":1}}],[\"+timeout\",{\"1\":{\"950\":1,\"958\":1}}],[\"+mills\",{\"1\":{\"949\":1}}],[\"+count\",{\"1\":{\"923\":1}}],[\"+strb\",{\"1\":{\"908\":2}}],[\"+stra\",{\"1\":{\"908\":4}}],[\"+getid\",{\"1\":{\"884\":1}}],[\"+useparalleloldgc\",{\"1\":{\"711\":1}}],[\"+useparallelgc\",{\"1\":{\"711\":1}}],[\"+heapdumponoutofmemoryerror\",{\"1\":{\"711\":1}}],[\"+limit+\",{\"1\":{\"537\":1}}],[\"++ref\",{\"1\":{\"853\":1}}],[\"++\",{\"1\":{\"543\":1}}],[\"++i\",{\"1\":{\"525\":2,\"852\":1,\"1530\":1}}],[\"++modcount\",{\"1\":{\"363\":1}}],[\"++j\",{\"1\":{\"359\":3}}],[\"+=\",{\"1\":{\"359\":2,\"897\":1,\"1203\":2,\"1789\":5,\"1826\":1,\"1966\":1}}],[\"+n\",{\"1\":{\"298\":1}}],[\"+x\",{\"1\":{\"16\":3}}],[\"+\",{\"0\":{\"1958\":1},\"1\":{\"11\":1,\"12\":5,\"154\":7,\"215\":2,\"228\":1,\"268\":1,\"280\":1,\"281\":2,\"282\":1,\"283\":4,\"284\":3,\"285\":4,\"305\":1,\"332\":3,\"337\":1,\"338\":2,\"342\":1,\"348\":2,\"353\":2,\"354\":1,\"441\":12,\"459\":4,\"465\":1,\"477\":1,\"483\":3,\"519\":3,\"525\":6,\"531\":39,\"537\":1,\"543\":12,\"614\":138,\"622\":138,\"630\":138,\"730\":1,\"731\":5,\"738\":1,\"853\":5,\"870\":5,\"880\":1,\"882\":1,\"883\":1,\"884\":2,\"886\":4,\"897\":3,\"900\":1,\"917\":2,\"926\":1,\"950\":1,\"958\":5,\"979\":1,\"1009\":6,\"1022\":12,\"1030\":2,\"1036\":3,\"1063\":1,\"1094\":1,\"1095\":1,\"1203\":14,\"1205\":1,\"1239\":1,\"1326\":1,\"1332\":4,\"1349\":3,\"1368\":5,\"1417\":7,\"1475\":2,\"1488\":9,\"1518\":5,\"1527\":2,\"1530\":1,\"1552\":2,\"1561\":1,\"1598\":2,\"1601\":1,\"1604\":8,\"1613\":27,\"1732\":1,\"1736\":5,\"1737\":1,\"1738\":3,\"1739\":2,\"1770\":1,\"1789\":1,\"1790\":3,\"1840\":1,\"1843\":8,\"1847\":1,\"1865\":3,\"1959\":1,\"1966\":2}}],[\"=0\",{\"1\":{\"1727\":1}}],[\"=listof\",{\"1\":{\"1521\":1}}],[\"=apputlis\",{\"1\":{\"1332\":1}}],[\"=1\",{\"1\":{\"1203\":1}}],[\"=getmainmethod\",{\"1\":{\"1102\":1}}],[\"=instructions\",{\"1\":{\"1101\":1}}],[\"=reader\",{\"1\":{\"1101\":1}}],[\"=recover\",{\"1\":{\"1101\":1}}],[\"=thread\",{\"1\":{\"1101\":1}}],[\"=nil\",{\"1\":{\"1101\":1}}],[\"=null\",{\"1\":{\"154\":1,\"197\":1,\"1175\":1,\"1416\":1,\"1598\":1}}],[\"=>this\",{\"1\":{\"1521\":1}}],[\"=>\",{\"1\":{\"666\":1,\"667\":4,\"668\":18,\"853\":1,\"1009\":6,\"1015\":2,\"1383\":4,\"1666\":4,\"1711\":1,\"1713\":1}}],[\"=原始大小\",{\"1\":{\"215\":1}}],[\"===end===\",{\"1\":{\"1518\":1}}],[\"========\",{\"1\":{\"1188\":2}}],[\"======barrieraction=======\",{\"1\":{\"905\":1}}],[\"==多窗口的问题\",{\"1\":{\"1416\":1}}],[\"==yarn\",{\"1\":{\"1413\":2}}],[\"==>\",{\"1\":{\"441\":2,\"1736\":1,\"1806\":1}}],[\"==\",{\"1\":{\"197\":2,\"278\":1,\"279\":1,\"280\":1,\"281\":1,\"283\":3,\"284\":1,\"285\":6,\"332\":1,\"348\":2,\"350\":5,\"352\":1,\"359\":2,\"363\":2,\"368\":1,\"381\":1,\"405\":3,\"531\":6,\"537\":1,\"543\":1,\"652\":1,\"667\":1,\"864\":2,\"876\":2,\"879\":2,\"880\":1,\"882\":3,\"883\":2,\"886\":5,\"895\":4,\"984\":3,\"992\":1,\"993\":5,\"1009\":6,\"1015\":3,\"1022\":3,\"1030\":2,\"1036\":5,\"1044\":1,\"1056\":1,\"1063\":3,\"1070\":3,\"1078\":1,\"1102\":2,\"1109\":4,\"1110\":1,\"1175\":2,\"1203\":15,\"1332\":3,\"1392\":3,\"1417\":2,\"1518\":3,\"1546\":4,\"1555\":3,\"1592\":1,\"1598\":1,\"1613\":2,\"1675\":3,\"1732\":1,\"1739\":1,\"1756\":5,\"1762\":1,\"1770\":4,\"1778\":1,\"1788\":1,\"1789\":1,\"1790\":1,\"1798\":3,\"1799\":2,\"1805\":2,\"1806\":1,\"1826\":1,\"1828\":5,\"1829\":1,\"1840\":2,\"1843\":1,\"1846\":4,\"1847\":5,\"1849\":1,\"1851\":1,\"1857\":2,\"1863\":1,\"1865\":1,\"1869\":1}}],[\"=\",{\"1\":{\"11\":1,\"70\":2,\"73\":2,\"154\":8,\"160\":2,\"169\":3,\"197\":3,\"248\":1,\"259\":20,\"278\":6,\"279\":8,\"280\":6,\"281\":9,\"282\":8,\"283\":18,\"284\":8,\"285\":18,\"327\":1,\"328\":3,\"331\":1,\"332\":7,\"333\":3,\"334\":7,\"337\":1,\"338\":7,\"340\":3,\"342\":6,\"348\":14,\"349\":1,\"350\":23,\"351\":5,\"352\":24,\"353\":2,\"354\":1,\"358\":3,\"359\":15,\"363\":15,\"364\":3,\"365\":2,\"368\":6,\"381\":25,\"404\":1,\"405\":5,\"409\":4,\"415\":2,\"416\":4,\"422\":11,\"428\":1,\"435\":3,\"441\":9,\"447\":15,\"453\":1,\"459\":7,\"465\":6,\"471\":4,\"477\":1,\"483\":11,\"489\":14,\"495\":4,\"501\":1,\"507\":3,\"513\":4,\"519\":6,\"525\":14,\"531\":10,\"537\":5,\"543\":11,\"604\":2,\"613\":1,\"615\":2,\"621\":1,\"627\":2,\"631\":24,\"640\":2,\"650\":2,\"651\":1,\"657\":1,\"667\":5,\"695\":1,\"711\":8,\"730\":1,\"735\":1,\"738\":1,\"823\":4,\"828\":1,\"841\":1,\"843\":2,\"852\":3,\"853\":6,\"863\":1,\"864\":3,\"867\":2,\"868\":1,\"869\":2,\"870\":22,\"874\":1,\"876\":1,\"879\":18,\"880\":13,\"882\":7,\"883\":3,\"884\":6,\"885\":4,\"886\":16,\"887\":5,\"889\":2,\"895\":21,\"896\":13,\"897\":15,\"900\":14,\"904\":1,\"905\":1,\"907\":4,\"908\":6,\"917\":23,\"923\":4,\"926\":6,\"929\":1,\"932\":4,\"935\":1,\"938\":5,\"945\":3,\"949\":3,\"950\":24,\"958\":11,\"978\":1,\"979\":15,\"983\":8,\"984\":32,\"985\":6,\"992\":2,\"993\":29,\"994\":7,\"995\":1,\"996\":6,\"1002\":1,\"1003\":6,\"1009\":22,\"1015\":18,\"1016\":6,\"1022\":22,\"1023\":7,\"1030\":33,\"1036\":29,\"1044\":13,\"1055\":5,\"1056\":1,\"1063\":12,\"1064\":6,\"1070\":1,\"1077\":2,\"1078\":2,\"1081\":10,\"1094\":3,\"1095\":4,\"1101\":8,\"1102\":5,\"1109\":20,\"1110\":28,\"1131\":1,\"1175\":3,\"1182\":1,\"1188\":5,\"1197\":1,\"1203\":16,\"1239\":2,\"1289\":4,\"1292\":9,\"1295\":2,\"1298\":21,\"1305\":2,\"1312\":2,\"1313\":2,\"1320\":6,\"1326\":6,\"1329\":2,\"1332\":44,\"1349\":4,\"1352\":2,\"1358\":11,\"1364\":6,\"1368\":5,\"1374\":3,\"1383\":6,\"1392\":1,\"1402\":61,\"1416\":6,\"1417\":25,\"1456\":1,\"1468\":2,\"1474\":3,\"1475\":7,\"1488\":4,\"1506\":4,\"1518\":67,\"1521\":13,\"1530\":7,\"1534\":1,\"1540\":5,\"1546\":32,\"1552\":10,\"1555\":2,\"1587\":1,\"1589\":9,\"1592\":18,\"1595\":5,\"1598\":16,\"1601\":19,\"1604\":43,\"1610\":7,\"1613\":13,\"1626\":2,\"1628\":1,\"1660\":2,\"1666\":6,\"1675\":1,\"1685\":61,\"1717\":13,\"1725\":1,\"1726\":3,\"1727\":2,\"1731\":5,\"1732\":5,\"1736\":11,\"1737\":4,\"1738\":6,\"1739\":17,\"1756\":26,\"1762\":7,\"1770\":10,\"1772\":17,\"1778\":11,\"1780\":2,\"1788\":4,\"1789\":20,\"1790\":13,\"1798\":7,\"1799\":8,\"1805\":4,\"1806\":3,\"1826\":2,\"1827\":4,\"1828\":30,\"1829\":13,\"1831\":2,\"1839\":1,\"1840\":9,\"1841\":2,\"1842\":2,\"1843\":8,\"1845\":2,\"1846\":30,\"1847\":12,\"1848\":1,\"1849\":28,\"1850\":18,\"1851\":1,\"1857\":1,\"1861\":1,\"1863\":4,\"1865\":2,\"1866\":3,\"1867\":3,\"1869\":2,\"1905\":3,\"1911\":3,\"1952\":6,\"1966\":6}}],[\"dcendents\",{\"1\":{\"1905\":1,\"1911\":3}}],[\"dca3e2c8608a\",{\"1\":{\"1503\":1}}],[\"dllhello\",{\"1\":{\"1534\":1}}],[\"d372cc6802e5\",{\"1\":{\"1503\":1}}],[\"d9\",{\"1\":{\"1367\":1}}],[\"d6\",{\"1\":{\"1367\":1}}],[\"d4\",{\"1\":{\"1367\":1}}],[\"d1\",{\"1\":{\"1367\":1}}],[\"ds\",{\"1\":{\"1305\":2,\"1952\":1}}],[\"dname=$appname\",{\"1\":{\"711\":1}}],[\"dnt\",{\"1\":{\"651\":2}}],[\"dhe\",{\"1\":{\"638\":1}}],[\"db\",{\"1\":{\"614\":1,\"615\":1,\"622\":1,\"630\":1,\"1367\":1}}],[\"drm\",{\"1\":{\"1787\":1}}],[\"draggerdemo\",{\"1\":{\"1571\":1}}],[\"dragger2用法详见demo\",{\"0\":{\"1571\":1}}],[\"drawurl\",{\"1\":{\"1305\":1}}],[\"drawunderline\",{\"1\":{\"1305\":1}}],[\"drawimage\",{\"1\":{\"1305\":1}}],[\"drawdynamicdrawable\",{\"1\":{\"1305\":1}}],[\"drawblurmaskfilter\",{\"1\":{\"1305\":1}}],[\"drawsuperscript\",{\"1\":{\"1305\":1}}],[\"drawsubscript\",{\"1\":{\"1305\":1}}],[\"drawscalex\",{\"1\":{\"1305\":1}}],[\"drawstrikethrough\",{\"1\":{\"1305\":1}}],[\"drawtypeface\",{\"1\":{\"1305\":1}}],[\"drawtypefacenormal\",{\"1\":{\"1305\":1}}],[\"drawtypefaceitalic\",{\"1\":{\"1305\":1,\"1307\":1}}],[\"drawtypefacebolditalic\",{\"1\":{\"1305\":1}}],[\"drawtypefacebold\",{\"1\":{\"1305\":2,\"1307\":2}}],[\"drawtextappearance\",{\"1\":{\"1305\":1}}],[\"drawtextsize\",{\"1\":{\"1307\":1}}],[\"drawtextsizerelative\",{\"1\":{\"1305\":1}}],[\"drawtextsizeabsolute\",{\"1\":{\"1305\":1}}],[\"drawtextcolor\",{\"1\":{\"1305\":2,\"1307\":1}}],[\"drawtextbackgroundcolor\",{\"1\":{\"1305\":2,\"1307\":1}}],[\"drawable\",{\"1\":{\"1289\":1,\"1292\":7,\"1305\":5}}],[\"dry\",{\"1\":{\"1521\":1}}],[\"dream\",{\"1\":{\"1905\":1}}],[\"dreturn\",{\"1\":{\"1022\":1}}],[\"dressshoes\",{\"1\":{\"471\":2}}],[\"dressjean\",{\"1\":{\"471\":2}}],[\"dressed\",{\"1\":{\"471\":8}}],[\"drop\",{\"1\":{\"614\":1,\"615\":1,\"622\":1,\"630\":1}}],[\"driver来根据是否有空闲的binder线程来决定是否创建binder线程\",{\"1\":{\"1776\":1}}],[\"driver层传递到ipc层\",{\"1\":{\"1768\":1}}],[\"driver层\",{\"1\":{\"1768\":1}}],[\"driver发起binder\",{\"1\":{\"1755\":1}}],[\"driver\",{\"1\":{\"1746\":1,\"1767\":1}}],[\"drivers\",{\"1\":{\"1746\":2,\"1781\":1,\"1791\":1}}],[\"driver的drive方法只有传入了一个car对象才能发挥作用\",{\"1\":{\"738\":1}}],[\"drive\",{\"1\":{\"435\":7}}],[\"driven\",{\"1\":{\"312\":1}}],[\"d\",{\"1\":{\"365\":1,\"627\":1,\"631\":1,\"638\":1,\"750\":1,\"984\":2,\"1009\":6,\"1022\":1,\"1036\":1,\"1109\":8,\"1110\":4,\"1203\":5,\"1335\":1,\"1358\":1,\"1521\":1,\"1527\":2,\"1530\":1,\"1534\":2,\"1702\":13,\"1708\":4,\"1709\":14,\"1712\":6,\"1713\":24,\"1727\":1,\"1827\":1,\"1851\":1,\"1922\":1,\"1947\":1,\"1960\":1}}],[\"duse\",{\"1\":{\"1534\":1}}],[\"duser\",{\"1\":{\"711\":1}}],[\"duration\",{\"1\":{\"1383\":2,\"1402\":4,\"1666\":2,\"1685\":4,\"1712\":1}}],[\"dump\",{\"1\":{\"1154\":1,\"1155\":1,\"1371\":1,\"1789\":2}}],[\"dump17\",{\"1\":{\"822\":2,\"833\":1}}],[\"dummy\",{\"1\":{\"1035\":1,\"1036\":1}}],[\"due\",{\"1\":{\"359\":1}}],[\"dubbo3\",{\"1\":{\"12\":1,\"731\":1}}],[\"dubbo\",{\"1\":{\"12\":3,\"731\":3,\"1503\":2}}],[\"dianping\",{\"1\":{\"1616\":1}}],[\"dialoginterface\",{\"1\":{\"1358\":2}}],[\"dio网络\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"dio\",{\"1\":{\"1399\":2,\"1682\":2}}],[\"digest\",{\"1\":{\"1352\":3,\"1660\":3}}],[\"dimen\",{\"1\":{\"1292\":1}}],[\"dip\",{\"1\":{\"753\":1}}],[\"dict\",{\"1\":{\"668\":3}}],[\"divider\",{\"1\":{\"1709\":1}}],[\"dividers\",{\"1\":{\"1568\":1}}],[\"division\",{\"1\":{\"631\":2}}],[\"diverge\",{\"1\":{\"631\":1}}],[\"different\",{\"1\":{\"1555\":1}}],[\"differ\",{\"1\":{\"351\":1}}],[\"dismiss\",{\"1\":{\"1358\":2}}],[\"dispose\",{\"1\":{\"1383\":8,\"1666\":8,\"1830\":1,\"1846\":1}}],[\"displaymanagerservice\",{\"1\":{\"1867\":1,\"1868\":1}}],[\"display\",{\"1\":{\"1298\":3}}],[\"displaced\",{\"1\":{\"847\":2,\"1248\":1}}],[\"dispatching\",{\"1\":{\"1843\":1}}],[\"dispatchmessage\",{\"1\":{\"1842\":2,\"1843\":1}}],[\"dispatch\",{\"1\":{\"1188\":9}}],[\"disable=sc2107\",{\"1\":{\"711\":1}}],[\"disable=sc2126\",{\"1\":{\"711\":1}}],[\"disable=sc2046\",{\"1\":{\"711\":1}}],[\"disable=sc2006\",{\"1\":{\"711\":1}}],[\"disable\",{\"1\":{\"661\":1,\"722\":1}}],[\"discount\",{\"1\":{\"513\":5}}],[\"discardpolicy\",{\"1\":{\"246\":1,\"914\":1}}],[\"discardorderestpolicy\",{\"1\":{\"246\":1,\"914\":1}}],[\"diskc\",{\"1\":{\"465\":4}}],[\"distributed\",{\"1\":{\"1648\":2}}],[\"distributionmanagement>\",{\"1\":{\"608\":1}}],[\"disturl\",{\"1\":{\"1413\":2}}],[\"dist部署\",{\"1\":{\"657\":1}}],[\"dist文件时\",{\"1\":{\"603\":1,\"656\":1}}],[\"dist\",{\"1\":{\"94\":1,\"603\":1,\"640\":1,\"656\":1,\"1413\":2}}],[\"direntry\",{\"1\":{\"1064\":1}}],[\"direct\",{\"1\":{\"631\":1,\"1119\":1}}],[\"directly\",{\"1\":{\"631\":1}}],[\"directories\",{\"1\":{\"1534\":2}}],[\"director\",{\"1\":{\"422\":6,\"537\":7}}],[\"directory\",{\"1\":{\"94\":1,\"1534\":2,\"1552\":2}}],[\"dirwin\",{\"1\":{\"465\":3}}],[\"dirs\",{\"1\":{\"465\":6,\"1488\":2,\"1966\":1}}],[\"dir\",{\"1\":{\"465\":23,\"631\":2,\"1289\":1,\"1475\":6,\"1488\":5,\"1534\":13,\"1613\":3,\"1632\":1,\"1772\":7}}],[\"dir=\",{\"1\":{\"103\":1,\"1613\":2}}],[\"didi\",{\"1\":{\"1561\":1}}],[\"did\",{\"1\":{\"94\":1}}],[\"dt\",{\"1\":{\"67\":1}}],[\"dylib\",{\"1\":{\"67\":1}}],[\"dynamicdrawablespan\",{\"1\":{\"1305\":1,\"1310\":1}}],[\"dynamicproxy\",{\"1\":{\"259\":8,\"447\":6}}],[\"dynamic\",{\"1\":{\"12\":2,\"731\":2,\"1772\":1}}],[\"d8\",{\"0\":{\"43\":1}}],[\"dolast\",{\"1\":{\"1613\":2}}],[\"dooccn\",{\"1\":{\"1368\":1}}],[\"doprocess\",{\"1\":{\"1199\":1}}],[\"dowrite\",{\"1\":{\"932\":2}}],[\"downto\",{\"1\":{\"1518\":1}}],[\"downlatch\",{\"1\":{\"923\":3}}],[\"downloadtemplate\",{\"1\":{\"1711\":1}}],[\"downloadchannel\",{\"1\":{\"1377\":1}}],[\"download\",{\"1\":{\"23\":1,\"109\":1,\"1335\":3,\"1555\":2}}],[\"downloads\",{\"1\":{\"16\":3}}],[\"downcommand\",{\"1\":{\"489\":13}}],[\"doread\",{\"1\":{\"932\":2}}],[\"doreleaseshared\",{\"1\":{\"880\":1}}],[\"doacquireshared\",{\"1\":{\"880\":2}}],[\"dom\",{\"1\":{\"649\":1}}],[\"domain\",{\"1\":{\"11\":1,\"12\":19,\"652\":1,\"730\":1,\"731\":19}}],[\"don`t\",{\"1\":{\"1521\":1}}],[\"dong\",{\"1\":{\"1518\":2}}],[\"dontwarn\",{\"1\":{\"1361\":1}}],[\"don\",{\"1\":{\"631\":1}}],[\"done\",{\"1\":{\"94\":3,\"711\":1,\"715\":1,\"1518\":1,\"1534\":6,\"1770\":4,\"1828\":5}}],[\"dosomething\",{\"1\":{\"405\":2,\"920\":1,\"945\":1}}],[\"doubly\",{\"1\":{\"362\":2}}],[\"double类型特殊规则\",{\"0\":{\"1221\":1}}],[\"double类型分配\",{\"1\":{\"1182\":1}}],[\"double采用\",{\"1\":{\"1182\":1}}],[\"doublechecksingleton\",{\"1\":{\"405\":11}}],[\"double\",{\"0\":{\"864\":1},\"1\":{\"329\":1,\"405\":1,\"513\":10,\"1009\":2,\"1383\":1,\"1402\":27,\"1518\":2,\"1530\":4,\"1666\":1,\"1685\":27}}],[\"doesn\",{\"1\":{\"631\":1}}],[\"does\",{\"0\":{\"76\":1}}],[\"document\",{\"1\":{\"1616\":1}}],[\"documentationpluginsbootstrapper\",{\"1\":{\"672\":1}}],[\"docs\",{\"1\":{\"684\":1,\"1509\":1,\"1515\":1,\"1552\":1,\"1555\":2,\"1574\":1,\"1959\":1}}],[\"doc\",{\"1\":{\"15\":1,\"631\":1,\"734\":1,\"1601\":2,\"1952\":3}}],[\"docker\",{\"1\":{\"12\":1,\"731\":1}}],[\"do\",{\"1\":{\"12\":2,\"333\":1,\"352\":1,\"711\":1,\"715\":1,\"731\":2,\"1022\":1,\"1094\":1,\"1534\":14,\"1601\":2,\"1604\":1,\"1610\":1,\"1778\":1,\"1790\":2,\"1799\":1,\"1846\":1}}],[\"darkactionbar\",{\"1\":{\"1867\":1}}],[\"dart端集成\",{\"1\":{\"1690\":1}}],[\"dart\",{\"1\":{\"1352\":3,\"1383\":16,\"1392\":2,\"1399\":4,\"1402\":3,\"1660\":3,\"1666\":16,\"1675\":2,\"1682\":4,\"1685\":3}}],[\"dal\",{\"1\":{\"834\":1}}],[\"daemonrunner\",{\"1\":{\"868\":4}}],[\"daemon线程被用作完成支持性工作\",{\"1\":{\"868\":1}}],[\"daemon线程是一种支持型线程\",{\"1\":{\"868\":1}}],[\"daemon线程\",{\"0\":{\"868\":1},\"1\":{\"867\":1}}],[\"daemonize\",{\"1\":{\"694\":2}}],[\"daemon\",{\"1\":{\"631\":1,\"822\":1,\"868\":1}}],[\"dail\",{\"1\":{\"453\":2}}],[\"dataavail\",{\"1\":{\"1798\":1}}],[\"dataobj\",{\"1\":{\"1756\":2}}],[\"data1\",{\"1\":{\"1736\":1,\"1738\":9}}],[\"data2=\",{\"1\":{\"1736\":1,\"1738\":1}}],[\"data2\",{\"1\":{\"958\":2,\"1738\":8}}],[\"databases\",{\"1\":{\"1416\":1}}],[\"database\",{\"1\":{\"311\":1,\"1292\":1}}],[\"data\",{\"1\":{\"271\":1,\"314\":1,\"615\":1,\"631\":4,\"926\":7,\"932\":1,\"958\":6,\"979\":8,\"1009\":5,\"1015\":2,\"1063\":4,\"1064\":1,\"1086\":1,\"1352\":2,\"1416\":3,\"1417\":9,\"1518\":1,\"1521\":1,\"1660\":2,\"1712\":1,\"1727\":6,\"1731\":5,\"1732\":4,\"1737\":2,\"1739\":12,\"1756\":20,\"1770\":3,\"1789\":4,\"1798\":10,\"1799\":4,\"1828\":4,\"1829\":1,\"1831\":2,\"1850\":1,\"1857\":1}}],[\"datasource\",{\"1\":{\"12\":2,\"731\":2}}],[\"datascope\",{\"1\":{\"12\":1,\"731\":1}}],[\"datepickerdialog\",{\"1\":{\"1713\":1}}],[\"dateformat\",{\"1\":{\"1417\":1}}],[\"date\",{\"1\":{\"103\":1,\"615\":1,\"631\":4,\"711\":1,\"1311\":1,\"1312\":1,\"1313\":1,\"1323\":1,\"1332\":1,\"1374\":1,\"1402\":1,\"1459\":1,\"1685\":1}}],[\"dashboard\",{\"1\":{\"12\":1,\"731\":1}}],[\"deathnotifier\",{\"1\":{\"1799\":1}}],[\"deathrecipientlist\",{\"1\":{\"1762\":2}}],[\"deathrecipient\",{\"1\":{\"1762\":6}}],[\"deathrecipient子类对象\",{\"1\":{\"1762\":1}}],[\"deathrecipient类\",{\"1\":{\"1761\":1}}],[\"death的cookie记录bpbinder指针\",{\"1\":{\"1761\":1}}],[\"death指针\",{\"1\":{\"1761\":1}}],[\"death\",{\"1\":{\"1761\":3,\"1770\":3,\"1789\":5,\"1790\":4}}],[\"dead\",{\"1\":{\"825\":1,\"1755\":1,\"1756\":2,\"1761\":2,\"1770\":3,\"1789\":2,\"1798\":1}}],[\"deadlock\",{\"1\":{\"823\":2}}],[\"deadlockdemo\",{\"1\":{\"823\":2}}],[\"detecting\",{\"1\":{\"1534\":8}}],[\"detail\",{\"1\":{\"1706\":1}}],[\"detailedaddresset\",{\"1\":{\"1364\":1}}],[\"detailmessage\",{\"1\":{\"1036\":1}}],[\"details\",{\"1\":{\"19\":1,\"37\":1,\"46\":1,\"52\":1,\"73\":1,\"1320\":2,\"1326\":1,\"1346\":1,\"1420\":1,\"1453\":1,\"1465\":2,\"1482\":1,\"1503\":4,\"1574\":4,\"1577\":1,\"1580\":1,\"1905\":1,\"1908\":2,\"1970\":1}}],[\"derived\",{\"1\":{\"1518\":3}}],[\"degrees\",{\"1\":{\"1518\":1}}],[\"degradelock\",{\"1\":{\"887\":1}}],[\"demand\",{\"1\":{\"1416\":1}}],[\"demo5\",{\"1\":{\"1534\":2}}],[\"demo1activity\",{\"1\":{\"1598\":2}}],[\"demo1\",{\"1\":{\"1534\":3}}],[\"demo效果\",{\"1\":{\"1346\":1}}],[\"demo\",{\"1\":{\"103\":1,\"169\":4,\"843\":3,\"995\":3,\"1383\":1,\"1402\":1,\"1534\":15,\"1616\":1,\"1666\":1,\"1685\":1,\"1727\":1,\"1767\":1}}],[\"demo案例\",{\"1\":{\"12\":1,\"731\":1}}],[\"decrefs\",{\"1\":{\"1770\":1,\"1789\":1}}],[\"decoratedbox\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"decorationposition\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"decoration\",{\"1\":{\"1402\":9,\"1685\":9}}],[\"decode\",{\"1\":{\"994\":1}}],[\"declare\",{\"1\":{\"1727\":1,\"1805\":1,\"1806\":1}}],[\"declared\",{\"1\":{\"73\":1}}],[\"declaration\",{\"1\":{\"1317\":1}}],[\"dequeue\",{\"1\":{\"917\":2}}],[\"debsity\",{\"1\":{\"1338\":1,\"1435\":1}}],[\"deb\",{\"1\":{\"702\":1}}],[\"debian\",{\"1\":{\"614\":1,\"615\":1,\"630\":1}}],[\"debugflags\",{\"1\":{\"1863\":1,\"1865\":1}}],[\"debugfs\",{\"1\":{\"1772\":7}}],[\"debuglog\",{\"1\":{\"1632\":1}}],[\"debug操作\",{\"1\":{\"1607\":1}}],[\"debugger\",{\"1\":{\"1607\":1}}],[\"debug调试\",{\"1\":{\"1607\":1}}],[\"debug目录\",{\"1\":{\"1494\":1}}],[\"debugcomponent=\",{\"1\":{\"1476\":2}}],[\"debugmanifest\",{\"1\":{\"1475\":3}}],[\"debug模式下\",{\"1\":{\"1475\":1}}],[\"debugimplementation\",{\"1\":{\"1329\":1,\"1589\":1,\"1595\":1}}],[\"debug\",{\"1\":{\"103\":6,\"1323\":2,\"1329\":1,\"1335\":2,\"1371\":1,\"1459\":2,\"1475\":12,\"1534\":2,\"1613\":1,\"1702\":1}}],[\"denied\",{\"1\":{\"611\":1,\"618\":1}}],[\"delegates\",{\"1\":{\"1524\":1}}],[\"delegatecollection<t>\",{\"1\":{\"1521\":1}}],[\"delegatecompiler\",{\"1\":{\"1197\":2}}],[\"deletedir\",{\"1\":{\"1613\":1}}],[\"deleteweakglobalref\",{\"1\":{\"1530\":1}}],[\"deleteglobalref\",{\"1\":{\"1530\":1}}],[\"delete\",{\"1\":{\"103\":1,\"614\":1,\"622\":1,\"630\":1,\"650\":1,\"651\":1,\"652\":1,\"662\":1,\"723\":1,\"1488\":2,\"1949\":1}}],[\"delay\",{\"1\":{\"938\":1,\"1712\":1,\"1713\":1}}],[\"delayqueue\",{\"1\":{\"896\":1,\"958\":1}}],[\"delayedworkqueue\",{\"1\":{\"247\":1,\"828\":1}}],[\"de\",{\"1\":{\"144\":1,\"145\":1,\"1367\":1}}],[\"deveco\",{\"1\":{\"1702\":1,\"1707\":1,\"1708\":1,\"1709\":3,\"1712\":1}}],[\"development\",{\"1\":{\"604\":1,\"1530\":1}}],[\"developeremail=704514698\",{\"1\":{\"1905\":1}}],[\"developername=tong\",{\"1\":{\"1905\":1}}],[\"developerid=yinlingchaoliu\",{\"1\":{\"1905\":1}}],[\"developer\",{\"1\":{\"73\":1,\"1534\":4,\"1604\":1,\"1701\":1,\"1706\":1}}],[\"devdependencies\",{\"1\":{\"1409\":1}}],[\"devserver\",{\"1\":{\"604\":2,\"657\":1}}],[\"devops\",{\"1\":{\"305\":1}}],[\"dev\",{\"1\":{\"94\":4,\"603\":1,\"604\":1,\"631\":1,\"656\":1,\"711\":1,\"834\":1,\"1335\":1,\"1409\":1,\"1706\":1,\"1777\":1,\"1804\":1,\"1951\":3}}],[\"devicedefault\",{\"1\":{\"1867\":1}}],[\"devicetype\",{\"1\":{\"1377\":1}}],[\"deviceid\",{\"1\":{\"1377\":1}}],[\"device\",{\"1\":{\"58\":1,\"1298\":3,\"1963\":1}}],[\"deffggrr\",{\"1\":{\"1521\":1}}],[\"def\",{\"1\":{\"1475\":1,\"1613\":14}}],[\"deferred\",{\"1\":{\"1772\":1}}],[\"defer\",{\"1\":{\"994\":1,\"1061\":1,\"1101\":1}}],[\"defend\",{\"1\":{\"259\":7,\"447\":6}}],[\"defineclass\",{\"1\":{\"979\":3}}],[\"defineconstants\",{\"1\":{\"604\":2,\"657\":1}}],[\"define\",{\"1\":{\"55\":1,\"1534\":2,\"1806\":2}}],[\"defaultservicemanager\",{\"1\":{\"1725\":1,\"1726\":1,\"1798\":2,\"1799\":1,\"1804\":1,\"1805\":1}}],[\"defaultsenderid\",{\"1\":{\"1292\":1}}],[\"defaultextensionns\",{\"1\":{\"1555\":1}}],[\"defaultextensionns=\",{\"1\":{\"1555\":1}}],[\"defaultbloc\",{\"1\":{\"1383\":4,\"1666\":4}}],[\"defaultpagestate\",{\"1\":{\"1383\":3,\"1666\":3}}],[\"defaultpage\",{\"1\":{\"1383\":3,\"1666\":3}}],[\"defaultthreadfactory\",{\"1\":{\"938\":1}}],[\"defaultthreadpool\",{\"1\":{\"917\":1}}],[\"defaultthreadpool<job\",{\"1\":{\"917\":1}}],[\"defaultwriteobject\",{\"1\":{\"334\":1}}],[\"defaultreadobject\",{\"1\":{\"334\":1}}],[\"defaultcapacity\",{\"1\":{\"332\":1}}],[\"defaultconfig\",{\"1\":{\"73\":1,\"1317\":1}}],[\"default\",{\"0\":{\"43\":1},\"1\":{\"331\":1,\"332\":1,\"351\":1,\"352\":2,\"358\":1,\"435\":1,\"525\":1,\"615\":42,\"631\":1,\"638\":2,\"657\":2,\"667\":1,\"711\":1,\"738\":1,\"917\":2,\"950\":2,\"984\":2,\"1009\":3,\"1022\":1,\"1109\":1,\"1292\":1,\"1326\":2,\"1383\":2,\"1399\":1,\"1518\":1,\"1592\":2,\"1625\":4,\"1666\":2,\"1682\":1,\"1711\":1,\"1727\":1,\"1789\":1,\"1798\":1,\"1928\":1}}],[\"dex文件加密\",{\"1\":{\"103\":1}}],[\"dex\",{\"0\":{\"46\":1,\"52\":1},\"1\":{\"28\":1,\"55\":1,\"103\":1,\"115\":1}}],[\"describecontents\",{\"1\":{\"1738\":1}}],[\"description=\",{\"1\":{\"1555\":1}}],[\"description\",{\"1\":{\"1555\":2}}],[\"description>\",{\"1\":{\"1555\":1}}],[\"descriptors\",{\"1\":{\"1863\":3}}],[\"descriptorindex\",{\"1\":{\"1079\":1}}],[\"descriptor\",{\"1\":{\"984\":2,\"992\":3,\"993\":2,\"1009\":9,\"1015\":7,\"1022\":2,\"1102\":1,\"1109\":3,\"1110\":4,\"1731\":2,\"1732\":5,\"1739\":9,\"1756\":6,\"1806\":3}}],[\"dest\",{\"1\":{\"1738\":3}}],[\"destinationdir\",{\"1\":{\"1966\":1}}],[\"destination\",{\"1\":{\"1534\":4}}],[\"destroy\",{\"1\":{\"1416\":1,\"1711\":1,\"1713\":1}}],[\"desugar\",{\"1\":{\"1197\":1}}],[\"desiredassertionstatus0\",{\"1\":{\"1030\":4}}],[\"design\",{\"0\":{\"55\":1},\"1\":{\"55\":2,\"259\":1,\"406\":1,\"409\":1,\"417\":1,\"423\":1,\"429\":1,\"436\":1,\"442\":1,\"448\":1,\"454\":1,\"460\":1,\"466\":1,\"472\":1,\"478\":1,\"484\":1,\"490\":1,\"496\":1,\"502\":1,\"508\":1,\"514\":1,\"520\":1,\"526\":1,\"532\":1,\"538\":1,\"544\":1,\"1329\":2,\"1567\":1},\"2\":{\"400\":1}}],[\"design版本\",{\"0\":{\"10\":1,\"729\":1}}],[\"desktop\",{\"1\":{\"16\":1}}],[\"dept\",{\"1\":{\"668\":3}}],[\"dependson\",{\"1\":{\"1613\":3,\"1966\":1}}],[\"depends>\",{\"1\":{\"1555\":1}}],[\"dependencyname\",{\"1\":{\"1474\":2}}],[\"dependency\",{\"0\":{\"1640\":1},\"1\":{\"735\":2}}],[\"dependency>\",{\"1\":{\"672\":2}}],[\"dependencies<\",{\"1\":{\"672\":1}}],[\"dependencies\",{\"0\":{\"34\":1},\"1\":{\"12\":6,\"52\":1,\"73\":1,\"631\":1,\"731\":6,\"1289\":1,\"1292\":1,\"1304\":1,\"1329\":1,\"1409\":1,\"1476\":1,\"1491\":2,\"1534\":1,\"1595\":2,\"1632\":1,\"1642\":1,\"1905\":1,\"1911\":1}}],[\"depend\",{\"1\":{\"631\":1}}],[\"deployer\",{\"1\":{\"1960\":1}}],[\"deployed\",{\"1\":{\"314\":1}}],[\"deploy\",{\"1\":{\"1960\":1}}],[\"deployment\",{\"1\":{\"314\":1,\"631\":1}}],[\"deprecated\",{\"1\":{\"73\":1}}],[\"deps\",{\"1\":{\"12\":5,\"731\":5,\"1476\":1}}],[\"am\",{\"1\":{\"1756\":2,\"1870\":1}}],[\"amn\",{\"1\":{\"1756\":1}}],[\"ams\",{\"0\":{\"1755\":1},\"1\":{\"1755\":1}}],[\"among\",{\"1\":{\"359\":1}}],[\"a7\",{\"1\":{\"1583\":1}}],[\"a>b\",{\"1\":{\"1521\":1}}],[\"audiopolicyservice\",{\"1\":{\"1798\":1}}],[\"audioflinger\",{\"1\":{\"1798\":1}}],[\"audit\",{\"1\":{\"1413\":1}}],[\"aux\",{\"1\":{\"1534\":2}}],[\"ausboyue\",{\"1\":{\"1465\":1}}],[\"autolock\",{\"1\":{\"1799\":1,\"1805\":1}}],[\"automutex\",{\"1\":{\"1778\":1,\"1805\":1,\"1826\":1,\"1829\":1}}],[\"automulpkg\",{\"1\":{\"103\":3,\"1613\":1}}],[\"autosetuprebase\",{\"1\":{\"1952\":1}}],[\"autoservice\",{\"1\":{\"1604\":1}}],[\"autosign\",{\"1\":{\"103\":3,\"1613\":1}}],[\"autoconnect\",{\"1\":{\"1345\":1}}],[\"autocrlf\",{\"1\":{\"91\":1,\"1952\":1}}],[\"autowired\",{\"1\":{\"650\":1}}],[\"auto\",{\"1\":{\"631\":1,\"1346\":1,\"1479\":1,\"1736\":1}}],[\"autoextend\",{\"1\":{\"631\":1}}],[\"authentication\",{\"1\":{\"614\":1,\"621\":1,\"622\":1,\"630\":1,\"695\":1,\"1922\":1,\"1966\":1}}],[\"authorization\",{\"1\":{\"652\":1,\"1962\":1}}],[\"author\",{\"1\":{\"404\":1,\"405\":3,\"650\":1,\"711\":1,\"917\":1,\"1311\":1,\"1312\":1,\"1313\":1,\"1323\":1,\"1332\":1,\"1335\":1,\"1364\":1,\"1374\":1,\"1383\":2,\"1402\":2,\"1459\":1,\"1598\":1,\"1666\":2,\"1685\":2}}],[\"auth\",{\"1\":{\"12\":4,\"630\":1,\"731\":4}}],[\"aqxss\",{\"1\":{\"1380\":1}}],[\"aqs主要包括\",{\"1\":{\"877\":1}}],[\"aqs原理\",{\"0\":{\"877\":1}}],[\"aqs方法2\",{\"1\":{\"876\":1}}],[\"aqs方法1\",{\"1\":{\"876\":1}}],[\"aqs模版\",{\"0\":{\"876\":1}}],[\"aqs\",{\"0\":{\"875\":1}}],[\"aop切片编程\",{\"1\":{\"1632\":1}}],[\"aop开启\",{\"1\":{\"1595\":1}}],[\"aop\",{\"0\":{\"1374\":1,\"1561\":1,\"1589\":1},\"1\":{\"1374\":1,\"1586\":1,\"1592\":1,\"1595\":1}}],[\"a8\",{\"1\":{\"1367\":1}}],[\"a6\",{\"1\":{\"1367\":1}}],[\"a67\",{\"1\":{\"1346\":2}}],[\"a3\",{\"1\":{\"1367\":1}}],[\"a1\",{\"1\":{\"1367\":1}}],[\"a应用拉起b应用的时候千万不要忘记添加\",{\"1\":{\"1326\":1}}],[\"a+b计算结果装箱为integer\",{\"1\":{\"1203\":1}}],[\"a+b\",{\"1\":{\"1203\":9}}],[\"aar\",{\"1\":{\"1966\":1}}],[\"aarlibrary\",{\"1\":{\"1966\":1}}],[\"aar引用\",{\"1\":{\"1966\":1}}],[\"aar包增加注释\",{\"1\":{\"1966\":1}}],[\"aar包增加源码\",{\"1\":{\"1966\":1}}],[\"aar打包发布\",{\"1\":{\"1966\":1}}],[\"aapt\",{\"1\":{\"1371\":1}}],[\"aapt打印apk信息\",{\"0\":{\"1371\":1}}],[\"aastore\",{\"1\":{\"1009\":1}}],[\"aaload\",{\"1\":{\"1009\":1}}],[\"aid\",{\"1\":{\"1790\":3}}],[\"aidl模版\",{\"0\":{\"1739\":1}}],[\"aidl中定义的方法\",{\"1\":{\"1737\":1}}],[\"aidl接口\",{\"0\":{\"1735\":1}}],[\"aidl\",{\"1\":{\"1481\":1}}],[\"ai\",{\"1\":{\"900\":6,\"1702\":1}}],[\"airportd\",{\"1\":{\"118\":2}}],[\"awoken\",{\"1\":{\"1828\":2}}],[\"awesome\",{\"1\":{\"1647\":1}}],[\"awesomeproject\",{\"1\":{\"1413\":1}}],[\"aweiloveandroid\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"await\",{\"1\":{\"822\":1,\"896\":1,\"904\":1,\"905\":2,\"923\":3}}],[\"awk\",{\"1\":{\"711\":2,\"715\":1,\"822\":1,\"1323\":2,\"1335\":2,\"1459\":2}}],[\"aws\",{\"1\":{\"12\":1,\"668\":1,\"731\":1}}],[\"ajax\",{\"1\":{\"649\":1}}],[\"agreed\",{\"1\":{\"1648\":1}}],[\"aggregation\",{\"1\":{\"735\":2}}],[\"ago\",{\"1\":{\"694\":1}}],[\"age和email这3个属性\",{\"1\":{\"738\":1}}],[\"agentlib\",{\"1\":{\"1607\":1}}],[\"agent\",{\"1\":{\"651\":2,\"1922\":2}}],[\"age=\",{\"1\":{\"543\":1}}],[\"age\",{\"1\":{\"495\":5,\"543\":5,\"651\":1,\"1521\":5,\"1625\":2}}],[\"agpbi\",{\"0\":{\"28\":1},\"1\":{\"28\":1}}],[\"af\",{\"1\":{\"1583\":1}}],[\"aftertextchanged\",{\"1\":{\"1349\":1,\"1364\":1}}],[\"afterdottwo\",{\"1\":{\"1349\":1}}],[\"afterexecute\",{\"1\":{\"916\":1}}],[\"aftersale\",{\"1\":{\"668\":3}}],[\"after\",{\"1\":{\"363\":4,\"895\":1,\"1349\":1,\"1364\":1}}],[\"afternodeinsertion\",{\"0\":{\"364\":1},\"1\":{\"362\":1,\"364\":1}}],[\"afternodeaccess\",{\"0\":{\"363\":1},\"1\":{\"362\":1,\"363\":1}}],[\"afatcoder\",{\"1\":{\"292\":1,\"295\":1}}],[\"avocado\",{\"1\":{\"1518\":1}}],[\"avoid\",{\"1\":{\"359\":1}}],[\"avd\",{\"1\":{\"1341\":2}}],[\"availableprocessors\",{\"1\":{\"248\":1,\"358\":1,\"828\":1}}],[\"ab\",{\"1\":{\"1367\":1}}],[\"abilist\",{\"1\":{\"1862\":2,\"1863\":1,\"1865\":2,\"1866\":1}}],[\"ability\",{\"1\":{\"1702\":2,\"1707\":3,\"1709\":3}}],[\"abi\",{\"1\":{\"1534\":4}}],[\"abifilters\",{\"1\":{\"1317\":1}}],[\"abis\",{\"1\":{\"1298\":1}}],[\"absolutesizespan\",{\"1\":{\"1310\":1}}],[\"abstract修饰符\",{\"1\":{\"1521\":1}}],[\"abstractprocessor\",{\"1\":{\"1205\":1,\"1604\":1}}],[\"abstractmethoderror\",{\"1\":{\"993\":1}}],[\"abstractqueuedsynchronizer\",{\"1\":{\"876\":2,\"880\":1}}],[\"abstractcomputer\",{\"1\":{\"501\":3}}],[\"abstract\",{\"1\":{\"459\":4,\"465\":6,\"471\":2,\"483\":2,\"501\":1,\"531\":1,\"537\":1,\"1188\":2,\"1383\":3,\"1518\":2,\"1604\":1,\"1666\":3,\"1739\":1,\"1756\":2}}],[\"abstractlist<e>\",{\"1\":{\"331\":1}}],[\"abcdef\",{\"1\":{\"1905\":1}}],[\"abcd\",{\"1\":{\"1702\":3,\"1709\":2}}],[\"abcc\",{\"1\":{\"1521\":1}}],[\"abc\",{\"1\":{\"1037\":1,\"1521\":2,\"1702\":1}}],[\"aba解决方案\",{\"1\":{\"853\":1}}],[\"aba问题\",{\"1\":{\"853\":1}}],[\"abort\",{\"1\":{\"1778\":1,\"1788\":2}}],[\"abortpolicy\",{\"1\":{\"246\":1,\"914\":1}}],[\"abouttodisappear\",{\"1\":{\"1709\":1}}],[\"abouttoappear\",{\"1\":{\"1708\":1,\"1709\":1}}],[\"about\",{\"1\":{\"631\":1,\"1416\":1}}],[\"above\",{\"1\":{\"94\":1}}],[\"asinterface\",{\"1\":{\"1732\":1,\"1736\":1,\"1739\":1,\"1756\":2,\"1805\":1,\"1806\":1}}],[\"asiontang\",{\"1\":{\"121\":1}}],[\"asbinder\",{\"1\":{\"1731\":1,\"1732\":1,\"1739\":2,\"1756\":1,\"1762\":1}}],[\"asfloatbuffer\",{\"1\":{\"1540\":1}}],[\"aspectj便引入完毕了\",{\"1\":{\"1632\":1}}],[\"aspectjtools\",{\"1\":{\"1632\":1}}],[\"aspectj是否complie引入\",{\"1\":{\"1632\":1}}],[\"aspectj\",{\"1\":{\"1561\":1,\"1632\":3}}],[\"aspectjx\",{\"1\":{\"1374\":4,\"1595\":4,\"1632\":1}}],[\"aspectratio\",{\"1\":{\"1402\":5,\"1685\":5}}],[\"aspect\",{\"1\":{\"1374\":2,\"1586\":1,\"1588\":1,\"1589\":1,\"1592\":1,\"1595\":1}}],[\"as集成tinypngplugin插件配置\",{\"0\":{\"1289\":1}}],[\"astype\",{\"1\":{\"1604\":10}}],[\"ast\",{\"1\":{\"1198\":1}}],[\"astore指令\",{\"1\":{\"1009\":1}}],[\"astore\",{\"1\":{\"1008\":1,\"1203\":1}}],[\"assertionerror\",{\"1\":{\"1598\":1}}],[\"assertequals\",{\"1\":{\"1567\":1}}],[\"assertthat\",{\"1\":{\"1567\":2,\"1568\":1}}],[\"assertj\",{\"0\":{\"1567\":1},\"1\":{\"1567\":22,\"1568\":2}}],[\"assequence\",{\"1\":{\"1521\":1,\"1524\":1}}],[\"assets\",{\"1\":{\"1475\":4}}],[\"assemblerelease\",{\"1\":{\"1613\":2}}],[\"assemble\",{\"1\":{\"1476\":1}}],[\"assembletask\",{\"1\":{\"1474\":2}}],[\"assembledebug\",{\"1\":{\"52\":1,\"103\":2,\"1613\":2}}],[\"assign\",{\"1\":{\"1220\":1}}],[\"association\",{\"1\":{\"735\":2}}],[\"asm\",{\"1\":{\"559\":1,\"1494\":1,\"1561\":1}}],[\"asm操作字节码是最快的\",{\"1\":{\"558\":1}}],[\"asm手册\",{\"0\":{\"558\":1}}],[\"asynctask\",{\"1\":{\"1320\":1}}],[\"async\",{\"1\":{\"359\":1,\"1776\":1,\"1840\":4}}],[\"as\",{\"1\":{\"334\":1,\"631\":1,\"859\":1,\"1338\":1,\"1435\":1,\"1648\":1}}],[\"aslist\",{\"1\":{\"328\":6,\"1203\":2}}],[\"athrow指令码\",{\"1\":{\"1185\":1}}],[\"athrow\",{\"1\":{\"1035\":1,\"1036\":1}}],[\"atype\",{\"1\":{\"1009\":4}}],[\"atomicuserref\",{\"1\":{\"900\":5}}],[\"atomicmarkablereference\",{\"1\":{\"900\":1}}],[\"atomicreference<user>\",{\"1\":{\"900\":2}}],[\"atomicreferencetest\",{\"1\":{\"900\":1}}],[\"atomicreferencefieldupdater\",{\"1\":{\"900\":1}}],[\"atomicreference\",{\"1\":{\"900\":1}}],[\"atomicreferencearray\",{\"1\":{\"900\":1}}],[\"atomiclongfieldupdater\",{\"1\":{\"900\":1}}],[\"atomiclongarray\",{\"1\":{\"900\":1}}],[\"atomiclong\",{\"1\":{\"900\":1}}],[\"atomicboolean\",{\"1\":{\"900\":1}}],[\"atomicstampedref\",{\"1\":{\"853\":4}}],[\"atomicstampedreference<integer>\",{\"1\":{\"853\":2}}],[\"atomicstampedreference\",{\"1\":{\"853\":1,\"900\":1}}],[\"atomici\",{\"1\":{\"852\":3}}],[\"atomicintegertest\",{\"1\":{\"900\":1}}],[\"atomicintegerfieldupdater<user>\",{\"1\":{\"900\":1}}],[\"atomicintegerfieldupdatertest\",{\"1\":{\"900\":1}}],[\"atomicintegerfieldupdater\",{\"1\":{\"900\":2}}],[\"atomicintegerarraytest\",{\"1\":{\"900\":1}}],[\"atomicintegerarray\",{\"1\":{\"900\":3}}],[\"atomicinteger\",{\"1\":{\"852\":2,\"900\":3,\"917\":2}}],[\"atomic类\",{\"1\":{\"852\":1}}],[\"atomic包使用cas算法更新数据\",{\"1\":{\"821\":1}}],[\"atoi\",{\"1\":{\"298\":1}}],[\"attach\",{\"1\":{\"1869\":1}}],[\"attach到系统进程\",{\"1\":{\"1869\":1}}],[\"attachapplicationlocked\",{\"1\":{\"1762\":1}}],[\"attachinterface\",{\"1\":{\"1732\":1,\"1739\":1}}],[\"attachbasecontext\",{\"1\":{\"1320\":2}}],[\"attainable\",{\"1\":{\"583\":1}}],[\"attrinfo\",{\"1\":{\"1036\":3}}],[\"attributeinfo\",{\"1\":{\"1076\":1,\"1079\":2}}],[\"attribute\",{\"1\":{\"237\":1,\"1076\":1,\"1197\":1,\"1200\":1,\"1540\":1}}],[\"attributes\",{\"1\":{\"237\":3,\"1036\":1,\"1076\":4,\"1079\":1,\"1081\":1}}],[\"at\",{\"0\":{\"602\":1},\"1\":{\"94\":4,\"351\":2,\"603\":1,\"631\":2,\"822\":5,\"895\":2,\"1009\":8,\"1036\":1,\"1110\":1,\"1518\":4,\"1641\":1,\"1648\":1,\"1866\":4}}],[\"a\",{\"0\":{\"28\":1},\"1\":{\"28\":1,\"67\":1,\"94\":4,\"160\":4,\"327\":1,\"328\":1,\"332\":1,\"334\":2,\"342\":4,\"351\":1,\"359\":1,\"363\":5,\"365\":1,\"631\":6,\"711\":1,\"751\":2,\"822\":2,\"823\":3,\"843\":2,\"853\":1,\"895\":2,\"900\":3,\"908\":3,\"1203\":11,\"1289\":2,\"1338\":1,\"1399\":1,\"1435\":1,\"1518\":17,\"1521\":8,\"1527\":1,\"1530\":3,\"1540\":3,\"1648\":1,\"1682\":1,\"1702\":19,\"1708\":14,\"1709\":19,\"1712\":6,\"1713\":30,\"1847\":1,\"1905\":1,\"1922\":1,\"1952\":5}}],[\"acid\",{\"1\":{\"1707\":1}}],[\"acfdf25fdc001ebb2494b1ab8a566193\",{\"1\":{\"1323\":1}}],[\"acquireresult\",{\"1\":{\"1798\":1}}],[\"acquire命令\",{\"1\":{\"1790\":1}}],[\"acquires\",{\"1\":{\"882\":3,\"883\":3,\"886\":4}}],[\"acquiresharedinterruptibly\",{\"1\":{\"880\":1}}],[\"acquireshared\",{\"1\":{\"880\":2}}],[\"acquirequeued\",{\"1\":{\"879\":2,\"896\":1}}],[\"acquireinterruptibly\",{\"1\":{\"876\":1}}],[\"acquire\",{\"1\":{\"876\":1,\"879\":1,\"886\":1,\"907\":1,\"1755\":1,\"1770\":2,\"1789\":1,\"1790\":1,\"1798\":1}}],[\"acc\",{\"1\":{\"1009\":1,\"1030\":1}}],[\"accepttype\",{\"1\":{\"1416\":4,\"1417\":11}}],[\"acceptlist\",{\"1\":{\"531\":10}}],[\"accept\",{\"1\":{\"531\":10,\"652\":1,\"1756\":1}}],[\"accessflags\",{\"1\":{\"1009\":1,\"1030\":1,\"1076\":1,\"1079\":1,\"1081\":1,\"1109\":6}}],[\"accessorder\",{\"1\":{\"362\":2,\"363\":2,\"365\":1}}],[\"accessed\",{\"1\":{\"359\":1}}],[\"access\",{\"1\":{\"237\":1,\"334\":1,\"611\":1,\"618\":1,\"651\":5,\"652\":3,\"1076\":1}}],[\"accurate\",{\"1\":{\"359\":2}}],[\"account\",{\"1\":{\"25\":1,\"109\":1,\"614\":1,\"622\":1,\"630\":1}}],[\"active\",{\"1\":{\"694\":2,\"1306\":1,\"1307\":1,\"1313\":1}}],[\"activitythread启动\",{\"1\":{\"1869\":1}}],[\"activitythread接收ams的事件驱动生命周期\",{\"1\":{\"1849\":1}}],[\"activitythread\",{\"1\":{\"1842\":1,\"1843\":1,\"1867\":4,\"1869\":2,\"1870\":1}}],[\"activitytm\",{\"1\":{\"1604\":2}}],[\"activitymanagerservice\",{\"1\":{\"1762\":2,\"1867\":1,\"1868\":1,\"1870\":1}}],[\"activitymanagerproxy\",{\"1\":{\"1756\":3}}],[\"activitymanagernative\",{\"1\":{\"1756\":1}}],[\"activitymanagerlifecallback\",{\"1\":{\"1468\":1}}],[\"activitystackmanager\",{\"1\":{\"1468\":7}}],[\"activity过渡\",{\"1\":{\"1465\":1}}],[\"activity\",{\"1\":{\"1295\":19,\"1320\":1,\"1326\":6,\"1358\":8,\"1417\":13,\"1468\":19,\"1598\":2,\"1604\":1,\"1610\":6,\"1756\":2,\"1867\":1}}],[\"activitylifecyclecallbacks\",{\"1\":{\"1295\":1,\"1468\":1}}],[\"activityresourcelifecyclecallback\",{\"1\":{\"1295\":1}}],[\"activity回调\",{\"1\":{\"1295\":1}}],[\"activityinfo\",{\"1\":{\"70\":1}}],[\"activities\",{\"0\":{\"70\":1},\"1\":{\"70\":1,\"1546\":1}}],[\"actionperformed\",{\"1\":{\"1555\":1}}],[\"action>\",{\"1\":{\"1555\":1}}],[\"actions>\",{\"1\":{\"1555\":1}}],[\"actions\",{\"1\":{\"1555\":2}}],[\"actionname\",{\"1\":{\"1326\":2}}],[\"actionname=\",{\"1\":{\"1326\":1}}],[\"action\",{\"1\":{\"483\":5,\"1320\":5,\"1326\":3,\"1358\":3,\"1364\":9,\"1386\":1,\"1417\":4,\"1515\":1,\"1669\":1,\"1857\":6}}],[\"actionable\",{\"1\":{\"103\":1}}],[\"actuator\",{\"1\":{\"12\":1,\"731\":1}}],[\"arch\",{\"1\":{\"1952\":1}}],[\"architectural\",{\"1\":{\"1552\":1}}],[\"architecture\",{\"1\":{\"310\":2,\"311\":1,\"312\":1,\"313\":2,\"314\":4}}],[\"archives\",{\"0\":{\"1983\":1},\"1\":{\"1966\":3}}],[\"archive\",{\"2\":{\"18\":1,\"21\":1,\"27\":1,\"30\":1,\"33\":1,\"36\":1,\"39\":1,\"42\":1,\"45\":1,\"48\":1,\"51\":1,\"54\":1,\"57\":1,\"60\":1,\"63\":1,\"66\":1,\"69\":1,\"72\":1,\"75\":1,\"78\":1,\"81\":1,\"84\":1,\"87\":1,\"90\":1,\"93\":1,\"96\":1,\"99\":1,\"102\":1,\"105\":1,\"108\":1,\"111\":1,\"114\":1,\"117\":1,\"120\":1,\"123\":1,\"126\":1,\"131\":1,\"134\":1,\"137\":1,\"140\":1,\"143\":1,\"147\":1,\"150\":1,\"153\":1,\"156\":1,\"162\":1,\"165\":1,\"171\":1,\"174\":1,\"177\":1,\"180\":1,\"183\":1,\"186\":1,\"189\":1,\"192\":1,\"199\":1,\"202\":1,\"210\":1,\"219\":1,\"222\":1,\"225\":1,\"232\":1,\"235\":1,\"239\":1,\"242\":1,\"245\":1,\"251\":1,\"254\":1,\"267\":1,\"270\":1,\"273\":1,\"307\":1,\"316\":1,\"398\":1,\"408\":1,\"411\":1,\"419\":1,\"425\":1,\"431\":1,\"438\":1,\"444\":1,\"450\":1,\"456\":1,\"462\":1,\"468\":1,\"474\":1,\"480\":1,\"486\":1,\"492\":1,\"498\":1,\"504\":1,\"510\":1,\"516\":1,\"522\":1,\"528\":1,\"534\":1,\"540\":1,\"546\":1,\"561\":1,\"582\":1,\"585\":1,\"588\":1,\"591\":1,\"594\":1,\"597\":1,\"600\":1,\"737\":1,\"740\":1,\"749\":1,\"756\":1,\"759\":1,\"762\":1,\"765\":1,\"768\":1,\"771\":1,\"774\":1,\"777\":1,\"780\":1,\"783\":1,\"786\":1,\"789\":1,\"792\":1,\"795\":1,\"798\":1,\"801\":1,\"804\":1,\"807\":1,\"810\":1,\"813\":1,\"816\":1,\"1255\":1,\"1258\":1,\"1261\":1,\"1264\":1,\"1267\":1,\"1270\":1,\"1273\":1,\"1276\":1,\"1279\":1,\"1282\":1,\"1285\":1,\"1288\":1,\"1291\":1,\"1294\":1,\"1297\":1,\"1300\":1,\"1316\":1,\"1319\":1,\"1322\":1,\"1325\":1,\"1328\":1,\"1331\":1,\"1334\":1,\"1337\":1,\"1340\":1,\"1343\":1,\"1348\":1,\"1351\":1,\"1354\":1,\"1357\":1,\"1360\":1,\"1363\":1,\"1366\":1,\"1370\":1,\"1373\":1,\"1376\":1,\"1379\":1,\"1382\":1,\"1385\":1,\"1388\":1,\"1391\":1,\"1394\":1,\"1397\":1,\"1401\":1,\"1404\":1,\"1407\":1,\"1412\":1,\"1415\":1,\"1419\":1,\"1422\":1,\"1425\":1,\"1428\":1,\"1431\":1,\"1434\":1,\"1437\":1,\"1449\":1,\"1452\":1,\"1455\":1,\"1458\":1,\"1461\":1,\"1464\":1,\"1467\":1,\"1470\":1,\"1478\":1,\"1485\":1,\"1490\":1,\"1493\":1,\"1496\":1,\"1499\":1,\"1502\":1,\"1505\":1,\"1508\":1,\"1511\":1,\"1514\":1,\"1517\":1,\"1520\":1,\"1523\":1,\"1526\":1,\"1529\":1,\"1532\":1,\"1536\":1,\"1539\":1,\"1542\":1,\"1545\":1,\"1548\":1,\"1551\":1,\"1554\":1,\"1557\":1,\"1560\":1,\"1563\":1,\"1566\":1,\"1570\":1,\"1573\":1,\"1576\":1,\"1579\":1,\"1582\":1,\"1585\":1,\"1591\":1,\"1594\":1,\"1597\":1,\"1600\":1,\"1603\":1,\"1606\":1,\"1609\":1,\"1612\":1,\"1615\":1,\"1618\":1,\"1631\":1,\"1634\":1,\"1650\":1,\"1662\":1,\"1665\":1,\"1668\":1,\"1671\":1,\"1674\":1,\"1677\":1,\"1680\":1,\"1684\":1,\"1687\":1,\"1692\":1,\"1696\":1,\"1907\":1,\"1910\":1,\"1913\":1,\"1916\":1,\"1919\":1,\"1926\":1,\"1935\":1,\"1954\":1,\"1957\":1,\"1965\":1,\"1968\":1}}],[\"arkts\",{\"0\":{\"1699\":1},\"1\":{\"1709\":2}}],[\"arkui\",{\"0\":{\"1699\":1},\"1\":{\"1699\":1,\"1707\":1,\"1713\":1}}],[\"arouter页面路由\",{\"1\":{\"1500\":1}}],[\"arouter\",{\"1\":{\"1482\":1,\"1503\":1}}],[\"arouter使用简单\",{\"1\":{\"1479\":1}}],[\"aroundjoinpoint\",{\"1\":{\"1374\":1,\"1589\":1}}],[\"around\",{\"1\":{\"1374\":1,\"1589\":1}}],[\"armor\",{\"1\":{\"1929\":1}}],[\"arm\",{\"1\":{\"1555\":1}}],[\"armnetwork\",{\"1\":{\"1555\":1}}],[\"armmvp\",{\"1\":{\"1555\":2}}],[\"armmvphelper自动生成代码\",{\"1\":{\"1549\":1}}],[\"armconstant\",{\"1\":{\"1552\":2}}],[\"armeabi\",{\"1\":{\"1298\":2,\"1317\":1}}],[\"arm64\",{\"1\":{\"1298\":1}}],[\"arsc\",{\"1\":{\"1292\":1}}],[\"artifacts\",{\"1\":{\"1966\":1}}],[\"artifactid\",{\"1\":{\"1911\":1,\"1966\":1}}],[\"artifactid>\",{\"1\":{\"672\":4}}],[\"artifact\",{\"1\":{\"1292\":1,\"1905\":1,\"1911\":1}}],[\"articles\",{\"1\":{\"1386\":1,\"1669\":1}}],[\"article\",{\"1\":{\"19\":1,\"37\":1,\"46\":1,\"52\":1,\"1320\":2,\"1346\":1,\"1420\":1,\"1453\":1,\"1465\":2,\"1482\":1,\"1503\":4,\"1574\":4,\"1577\":1,\"1580\":1,\"1604\":1,\"1905\":1,\"1908\":2,\"1970\":1}}],[\"arguments\",{\"1\":{\"1863\":1,\"1866\":1}}],[\"argusapm\",{\"1\":{\"1561\":1}}],[\"argue\",{\"1\":{\"259\":4}}],[\"argv\",{\"1\":{\"1534\":2,\"1788\":1,\"1798\":1,\"1857\":1,\"1860\":3,\"1862\":1,\"1866\":4}}],[\"argc\",{\"1\":{\"1534\":1,\"1788\":1,\"1798\":1,\"1857\":1,\"1860\":2}}],[\"arg2\",{\"1\":{\"1534\":5,\"1850\":1}}],[\"arg1\",{\"1\":{\"1534\":5,\"1849\":2,\"1850\":1}}],[\"arg\",{\"1\":{\"715\":1,\"876\":1,\"879\":7,\"880\":9,\"1016\":2,\"1044\":2}}],[\"argsarr\",{\"1\":{\"1016\":3,\"1044\":3}}],[\"argslotcount\",{\"1\":{\"993\":6,\"1022\":1,\"1109\":1}}],[\"args\",{\"1\":{\"169\":1,\"259\":10,\"365\":1,\"405\":1,\"415\":1,\"416\":1,\"422\":2,\"428\":1,\"435\":1,\"441\":1,\"447\":5,\"453\":1,\"459\":1,\"465\":2,\"471\":2,\"477\":2,\"483\":1,\"489\":1,\"501\":1,\"507\":1,\"513\":1,\"519\":1,\"525\":1,\"531\":1,\"537\":1,\"543\":1,\"823\":1,\"843\":1,\"867\":1,\"868\":1,\"897\":1,\"900\":4,\"904\":1,\"905\":1,\"907\":1,\"908\":1,\"983\":1,\"995\":1,\"1016\":4,\"1017\":1,\"1044\":2,\"1055\":10,\"1056\":2,\"1062\":1,\"1064\":2,\"1182\":1,\"1188\":2,\"1203\":3,\"1368\":1,\"1518\":1,\"1592\":13,\"1601\":1,\"1730\":1,\"1731\":1,\"1860\":2,\"1863\":2,\"1865\":2,\"1866\":2,\"1867\":1,\"1869\":1}}],[\"arrref\",{\"1\":{\"1009\":6}}],[\"arrclass\",{\"1\":{\"1009\":2}}],[\"arr为原始数组\",{\"1\":{\"287\":1}}],[\"array<string>\",{\"1\":{\"1518\":1}}],[\"arrayclass\",{\"1\":{\"1016\":1,\"1044\":1}}],[\"arraycopy\",{\"1\":{\"284\":1,\"333\":2}}],[\"arraylength\",{\"1\":{\"1009\":2}}],[\"arraylength读取长度\",{\"1\":{\"1008\":1}}],[\"arraylist<t>\",{\"1\":{\"1521\":1}}],[\"arraylist<thread>\",{\"1\":{\"884\":1}}],[\"arraylist<behaviorsubject<string>>\",{\"1\":{\"1364\":1}}],[\"arraylist<worker>\",{\"1\":{\"917\":1,\"950\":1}}],[\"arraylist<string>\",{\"1\":{\"409\":3,\"1518\":1}}],[\"arraylist<e>\",{\"1\":{\"331\":1}}],[\"arraylist<>\",{\"1\":{\"327\":1,\"340\":1,\"465\":1,\"519\":1,\"531\":1,\"543\":1,\"1332\":2,\"1364\":1,\"1546\":1,\"1604\":1}}],[\"arraylist初始化大小为10\",{\"1\":{\"215\":1}}],[\"arraylist与linkedlist扩容\",{\"0\":{\"215\":1}}],[\"arraylist与linkedlist区别\",{\"0\":{\"214\":1}}],[\"arraylist是基于动态数组的数据结构实现\",{\"1\":{\"214\":1}}],[\"arraylist\",{\"0\":{\"330\":1,\"339\":1,\"346\":1},\"1\":{\"213\":1,\"319\":1,\"323\":2,\"331\":1,\"332\":1,\"333\":1,\"334\":4,\"335\":1,\"337\":1,\"339\":3,\"340\":1,\"346\":2,\"409\":2,\"884\":3,\"950\":1,\"958\":1}}],[\"arraylist扩容\",{\"0\":{\"129\":1}}],[\"arrayblockingqueue\",{\"1\":{\"896\":1,\"958\":1}}],[\"arrayblockqueue<e>\",{\"1\":{\"950\":1,\"958\":1}}],[\"arrayblockqueue\",{\"1\":{\"246\":1,\"914\":1,\"950\":1}}],[\"arrayindexoutofboundsexception\",{\"1\":{\"337\":1}}],[\"array\",{\"1\":{\"332\":1,\"334\":1,\"338\":1,\"342\":1,\"543\":5,\"1009\":8,\"1010\":1,\"1018\":1,\"1518\":6}}],[\"arrays\",{\"1\":{\"328\":3,\"332\":2,\"338\":1,\"342\":1,\"1203\":2}}],[\"arr\",{\"1\":{\"94\":1,\"285\":6,\"328\":2,\"1009\":2,\"1530\":2,\"1709\":1}}],[\"areturn\",{\"1\":{\"993\":1,\"1022\":1}}],[\"area\",{\"1\":{\"271\":2,\"1086\":2}}],[\"are\",{\"0\":{\"43\":1},\"1\":{\"73\":1,\"631\":3,\"1546\":1}}],[\"aes128\",{\"1\":{\"638\":1}}],[\"aes\",{\"1\":{\"12\":1,\"731\":1}}],[\"aprendpoint\",{\"1\":{\"822\":2}}],[\"aprendpoint$worker\",{\"1\":{\"822\":4}}],[\"apr\",{\"1\":{\"694\":2}}],[\"apt与javapoet联动\",{\"1\":{\"1604\":1}}],[\"apt与注解\",{\"1\":{\"1577\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1}}],[\"apt调试\",{\"1\":{\"1577\":1,\"1598\":1,\"1601\":1,\"1604\":1,\"1607\":1,\"1610\":1}}],[\"apt注解\",{\"1\":{\"1494\":1}}],[\"apt技术\",{\"1\":{\"1205\":1}}],[\"apt\",{\"1\":{\"676\":1,\"677\":1,\"684\":1,\"688\":1,\"692\":1,\"693\":1,\"701\":2,\"702\":1,\"707\":1,\"1604\":2,\"1607\":1}}],[\"apm性能监控\",{\"1\":{\"573\":1}}],[\"apk包名\",{\"1\":{\"1583\":1}}],[\"apkpath\",{\"1\":{\"1335\":2}}],[\"apkpath=\",{\"1\":{\"1335\":1}}],[\"apk上传fir\",{\"0\":{\"1335\":1}}],[\"apk`\",{\"1\":{\"1323\":1,\"1335\":1,\"1459\":1}}],[\"apk实战瘦身\",{\"0\":{\"1317\":1}}],[\"apk大小优化\",{\"1\":{\"103\":1}}],[\"apk\",{\"1\":{\"103\":6,\"1317\":1,\"1323\":4,\"1335\":2,\"1346\":2,\"1371\":1,\"1399\":1,\"1459\":4,\"1613\":3,\"1682\":1}}],[\"app发起进程\",{\"1\":{\"1869\":1}}],[\"app启动\",{\"1\":{\"1869\":1}}],[\"app启动流程\",{\"0\":{\"1869\":1},\"1\":{\"1320\":1}}],[\"appruntime\",{\"1\":{\"1860\":1}}],[\"approximately\",{\"1\":{\"351\":1}}],[\"appdir\",{\"1\":{\"1944\":2,\"1945\":1}}],[\"appdiedlocked\",{\"1\":{\"1762\":1}}],[\"appdatadir\",{\"1\":{\"1863\":1}}],[\"appdeathrecipient\",{\"1\":{\"1761\":1,\"1762\":3}}],[\"appdeathrecipient是继承ibinder\",{\"1\":{\"1761\":1}}],[\"appgallery\",{\"1\":{\"1707\":1}}],[\"app打包过程\",{\"1\":{\"1561\":1}}],[\"app上线\",{\"1\":{\"1472\":1}}],[\"app上传时间\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"appbinderdemo\",{\"1\":{\"1739\":13}}],[\"appbar\",{\"1\":{\"1383\":2,\"1402\":2,\"1666\":2,\"1685\":2}}],[\"appbuildversion\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"appbuild\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"app请求公共参数\",{\"0\":{\"1377\":1}}],[\"app=\",{\"1\":{\"1346\":1}}],[\"apppkg\",{\"1\":{\"1326\":4}}],[\"appcache\",{\"1\":{\"1416\":1}}],[\"appcreated\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"appcompatactivity\",{\"1\":{\"1736\":1}}],[\"appcompat\",{\"1\":{\"1320\":1,\"1567\":1}}],[\"appqrcodeurl\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"app二维码地址\",{\"1\":{\"1323\":1,\"1335\":1,\"1459\":1}}],[\"appkey\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"app下载页地址\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"appstore\",{\"1\":{\"1377\":1}}],[\"apps\",{\"1\":{\"1335\":2,\"1867\":1}}],[\"appshortcuturl\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"appsecret和微信后台一致\",{\"1\":{\"106\":1}}],[\"app短链接\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"appfilepath\",{\"1\":{\"1613\":6}}],[\"appfilepath=\",{\"1\":{\"103\":1,\"1613\":1}}],[\"appfilesize\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"app包体积\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"app版本号\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"app版本名\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"appversionno\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"appversion\",{\"1\":{\"1323\":1,\"1459\":1,\"1595\":1}}],[\"appidentifier\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"appid\",{\"1\":{\"1323\":1,\"1459\":1,\"1790\":3}}],[\"appname\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"appname=ruoyi\",{\"1\":{\"711\":1}}],[\"app的名称\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"app冷启动\",{\"0\":{\"1320\":1},\"1\":{\"1435\":1}}],[\"append\",{\"1\":{\"1306\":3,\"1307\":3,\"1313\":2}}],[\"apptheme\",{\"1\":{\"1305\":1,\"1320\":2}}],[\"app不受系统设置字体大小影响\",{\"0\":{\"1295\":1}}],[\"applicable\",{\"1\":{\"1648\":1}}],[\"applicationinit\",{\"1\":{\"1866\":3}}],[\"applicationinfo\",{\"1\":{\"1326\":1}}],[\"application初始化\",{\"0\":{\"1627\":1}}],[\"applicationcontext\",{\"1\":{\"1320\":3}}],[\"applicationclassloader\",{\"1\":{\"194\":1}}],[\"application\",{\"1\":{\"1295\":1,\"1320\":3,\"1332\":1,\"1335\":1,\"1468\":2,\"1475\":2,\"1476\":1,\"1592\":1,\"1709\":2,\"1713\":1,\"1962\":1}}],[\"applications\",{\"1\":{\"16\":1,\"67\":1,\"1534\":4}}],[\"appleclang\",{\"1\":{\"1534\":2}}],[\"apple\",{\"1\":{\"1518\":6}}],[\"apply函数\",{\"1\":{\"1521\":1}}],[\"apply\",{\"1\":{\"1289\":1,\"1292\":1,\"1364\":1,\"1374\":1,\"1474\":1,\"1475\":4,\"1476\":4,\"1491\":1,\"1595\":1,\"1613\":1,\"1632\":1,\"1905\":1,\"1911\":2,\"1966\":1}}],[\"app\",{\"0\":{\"1338\":1,\"1860\":1},\"1\":{\"67\":1,\"73\":1,\"94\":3,\"103\":31,\"115\":1,\"651\":1,\"652\":1,\"657\":3,\"1175\":1,\"1289\":1,\"1292\":1,\"1320\":5,\"1323\":3,\"1335\":6,\"1346\":47,\"1371\":1,\"1374\":1,\"1413\":2,\"1435\":3,\"1459\":3,\"1468\":5,\"1534\":4,\"1604\":1,\"1613\":3,\"1708\":2,\"1712\":2,\"1756\":1,\"1762\":3,\"1777\":1,\"1781\":2,\"1858\":1,\"1865\":1,\"1870\":3}}],[\"apache\",{\"1\":{\"12\":2,\"731\":2,\"822\":4,\"1503\":1,\"1555\":1,\"1648\":2,\"1966\":2}}],[\"api9\",{\"1\":{\"1708\":2}}],[\"api介绍\",{\"0\":{\"1561\":1}}],[\"api要注意分包摆放\",{\"1\":{\"1494\":1}}],[\"api要根据目标受众来分包api\",{\"1\":{\"793\":1}}],[\"api作为java文件类型\",{\"1\":{\"1491\":1}}],[\"api后缀的java文件\",{\"1\":{\"1491\":1}}],[\"api后缀文件到工程当中\",{\"1\":{\"1491\":1}}],[\"apimodule=\",{\"1\":{\"1491\":1}}],[\"api文件拷贝指定api\",{\"1\":{\"1488\":1}}],[\"api文档支持\",{\"1\":{\"793\":1}}],[\"api化\",{\"1\":{\"1483\":1}}],[\"api调用暴露了很多底层细节\",{\"1\":{\"1480\":1}}],[\"api方案\",{\"1\":{\"1479\":1}}],[\"apiv1\",{\"1\":{\"1323\":1,\"1459\":1}}],[\"apikey=d4db83f4036a8c5a4823696449354b94833e7fa4\",{\"1\":{\"1914\":1}}],[\"apikey=xxx\",{\"1\":{\"1905\":1}}],[\"apikey\",{\"1\":{\"1289\":1}}],[\"api与spi间要划一条泾渭分明的界限\",{\"1\":{\"808\":1}}],[\"api集合有不同受众\",{\"1\":{\"808\":1}}],[\"api也要分类\",{\"1\":{\"808\":1}}],[\"api中添加内容是容许的\",{\"1\":{\"808\":1}}],[\"api中公开的方法都可能被误用\",{\"1\":{\"799\":1}}],[\"api演进不同于spi\",{\"1\":{\"808\":1}}],[\"api是开发人员与用户的沟通方式\",{\"1\":{\"796\":1}}],[\"api是作者与用户之间主要的交流工具\",{\"1\":{\"778\":1}}],[\"api的副作用一致\",{\"1\":{\"796\":1}}],[\"api的模式\",{\"1\":{\"772\":1}}],[\"api向后兼容\",{\"1\":{\"796\":1}}],[\"api用户是最珍惜的宝贵财富\",{\"1\":{\"793\":1}}],[\"api用户更关心是如何完成他们工作\",{\"1\":{\"793\":1}}],[\"api开发过程中最好保持一致风格\",{\"1\":{\"793\":1}}],[\"api开发也需要方法论\",{\"1\":{\"757\":1}}],[\"api广泛定义\",{\"1\":{\"793\":1}}],[\"api提供行为效果\",{\"1\":{\"793\":1}}],[\"api第一受众是人\",{\"1\":{\"787\":1}}],[\"api譬如恒星\",{\"1\":{\"784\":1}}],[\"api设计的一致性\",{\"1\":{\"796\":1}}],[\"api设计者需要理解其目标用户普遍具有的知识\",{\"1\":{\"793\":1}}],[\"api设计动力之源\",{\"1\":{\"787\":1}}],[\"api设计需要相应的理论支持\",{\"1\":{\"787\":1}}],[\"api设计中自相矛盾\",{\"1\":{\"772\":1}}],[\"api设计中的矛盾之处\",{\"0\":{\"772\":1}}],[\"api设计特殊所在\",{\"1\":{\"757\":1}}],[\"api尽量简单的\",{\"1\":{\"769\":1}}],[\"api必须是对称的\",{\"1\":{\"769\":1}}],[\"api必须是绝对兼容的\",{\"1\":{\"769\":1}}],[\"api必须是高性能的\",{\"1\":{\"769\":1}}],[\"api必须是正确的\",{\"1\":{\"769\":1}}],[\"api必须是漂亮的\",{\"1\":{\"769\":1}}],[\"api具体运行时的一些内容\",{\"0\":{\"763\":1}}],[\"api到时是什么东西\",{\"1\":{\"757\":1}}],[\"api一旦发布\",{\"1\":{\"757\":1}}],[\"apis\",{\"1\":{\"638\":2}}],[\"api模块属于业务层\",{\"1\":{\"12\":1,\"731\":1}}],[\"api归属业务层模块\",{\"1\":{\"12\":1,\"731\":1}}],[\"api四大元素\",{\"1\":{\"12\":1,\"731\":1}}],[\"api式rpc调用\",{\"1\":{\"12\":1,\"731\":1}}],[\"api接口\",{\"1\":{\"12\":1,\"731\":1}}],[\"api\",{\"0\":{\"1486\":1,\"1491\":1},\"1\":{\"12\":6,\"61\":1,\"314\":2,\"638\":1,\"651\":1,\"731\":6,\"763\":1,\"787\":1,\"793\":1,\"796\":1,\"1292\":2,\"1323\":3,\"1335\":5,\"1459\":3,\"1486\":4,\"1487\":4,\"1488\":12,\"1491\":14,\"1552\":1,\"1561\":1,\"1587\":1,\"1589\":2,\"1592\":10,\"1595\":2,\"1708\":1,\"1712\":5,\"1713\":1,\"1966\":1}}],[\"anactionevent\",{\"1\":{\"1555\":2}}],[\"anaction\",{\"1\":{\"1555\":1}}],[\"analyze\",{\"1\":{\"1317\":1}}],[\"anchor=\",{\"1\":{\"1555\":1}}],[\"ancestorwidgetofexacttype\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"animationitem\",{\"1\":{\"1712\":1}}],[\"animation\",{\"1\":{\"1712\":2,\"1713\":1}}],[\"animatedopacity\",{\"1\":{\"1402\":3,\"1685\":3}}],[\"animateto\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"animals\",{\"1\":{\"1527\":1}}],[\"animal\",{\"1\":{\"1527\":21}}],[\"anim\",{\"1\":{\"1292\":1}}],[\"annotatedelement\",{\"1\":{\"1030\":1}}],[\"annotations\",{\"1\":{\"1604\":2}}],[\"annotationprocessoroptions\",{\"1\":{\"73\":2}}],[\"annotationprocessor\",{\"1\":{\"73\":2}}],[\"annotation\",{\"1\":{\"73\":3,\"650\":5,\"1361\":7,\"1374\":1,\"1399\":1,\"1604\":3,\"1682\":1}}],[\"annotatio\",{\"0\":{\"37\":1}}],[\"anewarray\",{\"1\":{\"1008\":1}}],[\"anull\",{\"1\":{\"638\":1}}],[\"an\",{\"1\":{\"359\":1,\"1648\":1}}],[\"anysis\",{\"1\":{\"559\":1}}],[\"any\",{\"1\":{\"334\":2,\"615\":1,\"662\":1,\"723\":1,\"1518\":5,\"1521\":2,\"1648\":1}}],[\"andyals\",{\"1\":{\"1616\":1}}],[\"andrzejchm\",{\"1\":{\"1558\":4}}],[\"andresguard\",{\"1\":{\"1292\":4}}],[\"andresguard实战配置\",{\"0\":{\"1292\":1}}],[\"androidjavadocsjar\",{\"1\":{\"1966\":2}}],[\"androidjavadocs\",{\"1\":{\"1966\":3}}],[\"android发布library到jitpack\",{\"0\":{\"1911\":1}}],[\"android启动核心模块\",{\"1\":{\"1856\":1}}],[\"android启动流程\",{\"0\":{\"1856\":1}}],[\"androidruntime\",{\"0\":{\"1861\":1},\"1\":{\"1746\":1,\"1757\":1,\"1861\":1,\"1865\":1,\"1870\":1}}],[\"android开发中必要的一环\",{\"1\":{\"1564\":1}}],[\"android开发进阶从小工到专家\",{\"1\":{\"754\":1}}],[\"androidut\",{\"1\":{\"1564\":1}}],[\"android单元测试\",{\"0\":{\"1564\":1}}],[\"android为opengl提供特定视图glsurfaceview\",{\"1\":{\"1540\":1}}],[\"android界面\",{\"1\":{\"1512\":1}}],[\"android省略findviewbyid\",{\"1\":{\"1512\":2}}],[\"android架构思考\",{\"1\":{\"1483\":1}}],[\"androidcomponent\",{\"1\":{\"1476\":2,\"1488\":1,\"1491\":1}}],[\"androidmanifest\",{\"1\":{\"1475\":3}}],[\"androidmodulepattern\",{\"1\":{\"1453\":1}}],[\"android组件化\",{\"0\":{\"1994\":1},\"2\":{\"1477\":1,\"1484\":1,\"1489\":1,\"1492\":1,\"1495\":1,\"1498\":1,\"1501\":1,\"1504\":1}}],[\"android组件化开发实践\",{\"1\":{\"1450\":1}}],[\"android组件化框架设计与实践\",{\"1\":{\"1450\":1}}],[\"android组件化方案\",{\"1\":{\"1450\":1}}],[\"android彻底组件化demo发布\",{\"1\":{\"1450\":1,\"1503\":1}}],[\"android规范\",{\"1\":{\"1435\":1}}],[\"android热修复技术总结\",{\"1\":{\"1432\":1}}],[\"android插件化之路简介\",{\"1\":{\"1426\":1}}],[\"android插件化\",{\"1\":{\"1426\":1}}],[\"android插件化完美实现代码资源加载及原理讲解\",{\"1\":{\"1426\":1}}],[\"android全面插件化replugin\",{\"1\":{\"1426\":1}}],[\"android9\",{\"1\":{\"1405\":1}}],[\"androidid\",{\"1\":{\"1377\":1}}],[\"androidsourcesjar\",{\"1\":{\"1966\":2}}],[\"androidstudy\",{\"1\":{\"1583\":1}}],[\"androidstudio上运行weex\",{\"0\":{\"73\":1}}],[\"androidstudio3\",{\"0\":{\"37\":1}}],[\"androidschedulers\",{\"1\":{\"1364\":2}}],[\"android代码\",{\"1\":{\"1361\":1}}],[\"android适配url拦截alipays\",{\"0\":{\"1358\":1}}],[\"android新特性介绍\",{\"1\":{\"1346\":1}}],[\"android=\",{\"1\":{\"1346\":1}}],[\"android设置公共请求头head\",{\"0\":{\"1332\":1}}],[\"android网络日志集成\",{\"0\":{\"1329\":1}}],[\"android中通过外部程序启动app三种方式\",{\"0\":{\"1326\":1}}],[\"android上传蒲公英平台脚本\",{\"0\":{\"1323\":1}}],[\"android性能优化系列之apk瘦身\",{\"1\":{\"1317\":1}}],[\"android相关\",{\"0\":{\"1993\":1},\"2\":{\"1290\":1,\"1293\":1,\"1296\":1,\"1299\":1,\"1315\":1,\"1318\":1,\"1321\":1,\"1324\":1,\"1327\":1,\"1330\":1,\"1333\":1,\"1336\":1,\"1339\":1,\"1342\":1,\"1347\":1,\"1350\":1,\"1353\":1,\"1356\":1,\"1359\":1,\"1362\":1,\"1365\":1,\"1369\":1,\"1372\":1,\"1375\":1,\"1378\":1,\"1381\":1,\"1384\":1,\"1387\":1,\"1390\":1,\"1393\":1,\"1396\":1,\"1400\":1,\"1403\":1,\"1406\":1,\"1411\":1,\"1414\":1,\"1418\":1,\"1421\":1,\"1424\":1,\"1427\":1,\"1430\":1,\"1433\":1,\"1436\":1,\"1448\":1,\"1451\":1,\"1454\":1,\"1457\":1,\"1460\":1,\"1463\":1,\"1469\":1}}],[\"android系统启动\",{\"0\":{\"1855\":1}}],[\"android系统源代码情景分析\",{\"1\":{\"572\":1}}],[\"android系统源码分析\",{\"0\":{\"568\":1}}],[\"android系统设计原则与设计模式\",{\"1\":{\"396\":1}}],[\"android源码设计模式解析与实战\",{\"1\":{\"396\":1,\"754\":1}}],[\"android\",{\"0\":{\"31\":1,\"34\":1,\"43\":1,\"73\":1,\"562\":1,\"1295\":1,\"1298\":1,\"1301\":1,\"1317\":1,\"1320\":1,\"1527\":1,\"1567\":1,\"1905\":1,\"1908\":1},\"1\":{\"31\":1,\"52\":2,\"55\":2,\"64\":3,\"67\":1,\"70\":1,\"73\":4,\"94\":3,\"103\":14,\"115\":4,\"268\":1,\"1317\":2,\"1320\":10,\"1326\":13,\"1329\":4,\"1335\":2,\"1341\":1,\"1346\":107,\"1361\":6,\"1371\":6,\"1374\":2,\"1377\":1,\"1405\":3,\"1413\":2,\"1416\":4,\"1417\":1,\"1468\":3,\"1475\":6,\"1476\":2,\"1483\":1,\"1503\":1,\"1512\":1,\"1527\":2,\"1530\":2,\"1533\":2,\"1534\":3,\"1555\":1,\"1558\":1,\"1564\":1,\"1567\":11,\"1568\":2,\"1583\":2,\"1595\":2,\"1598\":1,\"1613\":1,\"1717\":2,\"1718\":2,\"1724\":1,\"1727\":3,\"1730\":2,\"1731\":6,\"1732\":3,\"1736\":1,\"1737\":2,\"1739\":26,\"1746\":5,\"1756\":2,\"1757\":5,\"1762\":1,\"1763\":2,\"1781\":1,\"1788\":1,\"1791\":2,\"1798\":1,\"1805\":1,\"1806\":7,\"1829\":1,\"1832\":3,\"1850\":1,\"1860\":2,\"1861\":1,\"1865\":1,\"1866\":4,\"1867\":2,\"1870\":7,\"1905\":5,\"1908\":2,\"1911\":4,\"1966\":7},\"2\":{\"1652\":1,\"1653\":1,\"1655\":1,\"1656\":1,\"1658\":1,\"1659\":1}}],[\"andorid\",{\"1\":{\"1832\":2,\"1852\":1}}],[\"andor\",{\"1\":{\"12\":1,\"731\":1}}],[\"and\",{\"1\":{\"12\":1,\"67\":1,\"73\":1,\"334\":2,\"359\":1,\"615\":1,\"631\":2,\"731\":1,\"850\":1,\"1036\":1,\"1055\":1,\"1398\":1,\"1399\":1,\"1518\":1,\"1648\":1,\"1681\":1,\"1682\":1,\"1770\":1}}],[\"antialias\",{\"1\":{\"1402\":3,\"1685\":3}}],[\"ant\",{\"0\":{\"10\":1,\"729\":1}}],[\"adr\",{\"1\":{\"1762\":3}}],[\"adapt\",{\"1\":{\"1592\":1}}],[\"adaptee\",{\"1\":{\"477\":1}}],[\"adapter\",{\"1\":{\"477\":3}}],[\"adb\",{\"1\":{\"1583\":1,\"1728\":6,\"1733\":9}}],[\"ad\",{\"1\":{\"1367\":1}}],[\"advancedmemberstrategy\",{\"1\":{\"513\":2}}],[\"add命令\",{\"1\":{\"1922\":1}}],[\"added\",{\"1\":{\"1922\":1}}],[\"addeventlistener\",{\"1\":{\"1712\":1}}],[\"addentry\",{\"1\":{\"350\":3,\"352\":1}}],[\"addfield\",{\"1\":{\"1601\":1,\"1604\":1}}],[\"addflags\",{\"1\":{\"1326\":1,\"1417\":1}}],[\"addservice\",{\"1\":{\"1730\":1,\"1744\":1,\"1798\":1,\"1867\":1}}],[\"addstatement\",{\"1\":{\"1601\":3,\"1604\":3}}],[\"addsuperinterface\",{\"1\":{\"1601\":1,\"1604\":1}}],[\"addsomething\",{\"1\":{\"459\":5}}],[\"addmethod\",{\"1\":{\"1601\":2,\"1604\":2}}],[\"addmodifiers\",{\"1\":{\"1601\":3,\"1604\":3}}],[\"addmapping\",{\"1\":{\"650\":1}}],[\"addjavadoc\",{\"1\":{\"1601\":1,\"1604\":1}}],[\"addannotation\",{\"1\":{\"1601\":2,\"1604\":2}}],[\"addactivity\",{\"1\":{\"1468\":1}}],[\"addall\",{\"1\":{\"1332\":1}}],[\"addallowedmethod\",{\"1\":{\"650\":1}}],[\"addallowedheader\",{\"1\":{\"650\":1}}],[\"addallowedoriginpattern\",{\"1\":{\"650\":1}}],[\"addallowedorigin\",{\"1\":{\"650\":1}}],[\"addcategory\",{\"1\":{\"1417\":2}}],[\"addcomponent\",{\"1\":{\"1474\":2,\"1476\":3,\"1491\":1}}],[\"addconditionwaiter\",{\"1\":{\"896\":1}}],[\"addcorsmappings\",{\"1\":{\"650\":1}}],[\"addpostframecallback\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"addparameter\",{\"1\":{\"1601\":2,\"1604\":2}}],[\"addparamsmap\",{\"1\":{\"1332\":1}}],[\"addparam\",{\"1\":{\"1332\":3}}],[\"addtextchangedlistener\",{\"1\":{\"1349\":1,\"1364\":1}}],[\"addqueryparamsmap\",{\"1\":{\"1332\":1}}],[\"addqueryparam\",{\"1\":{\"1332\":1}}],[\"addqueryparameter\",{\"1\":{\"1332\":1}}],[\"addheaderlineslist\",{\"1\":{\"1332\":1}}],[\"addheaderline\",{\"1\":{\"1332\":1}}],[\"addheaderparamsmap\",{\"1\":{\"1332\":1}}],[\"addheaderparam\",{\"1\":{\"1332\":1}}],[\"addinterceptor\",{\"1\":{\"1329\":2}}],[\"additionexpression\",{\"1\":{\"525\":3}}],[\"additional\",{\"1\":{\"94\":1,\"631\":1}}],[\"add指令\",{\"0\":{\"1095\":1}}],[\"addworker\",{\"1\":{\"950\":3}}],[\"addworkers\",{\"1\":{\"917\":3}}],[\"addwaiter\",{\"1\":{\"879\":2,\"880\":1}}],[\"addlast\",{\"1\":{\"917\":1}}],[\"addl\",{\"1\":{\"841\":1,\"1222\":1}}],[\"addr\",{\"1\":{\"638\":1}}],[\"address=5005\",{\"1\":{\"1607\":1}}],[\"address\",{\"1\":{\"12\":1,\"627\":3,\"631\":1,\"731\":1,\"1924\":1,\"1966\":1}}],[\"adddir\",{\"1\":{\"465\":6}}],[\"add\",{\"0\":{\"1640\":1},\"1\":{\"73\":1,\"327\":2,\"332\":1,\"337\":1,\"342\":1,\"465\":1,\"519\":1,\"531\":8,\"543\":4,\"638\":1,\"651\":5,\"917\":1,\"950\":5,\"958\":3,\"1332\":5,\"1364\":6,\"1402\":1,\"1413\":1,\"1518\":5,\"1534\":14,\"1546\":2,\"1552\":1,\"1555\":2,\"1604\":4,\"1641\":1,\"1685\":1,\"1770\":2,\"1790\":1,\"1798\":1,\"1829\":2,\"1857\":3,\"1911\":3,\"1922\":3,\"1944\":3,\"1945\":2,\"1950\":1,\"1961\":3}}],[\"admin123\",{\"1\":{\"15\":1,\"734\":1}}],[\"admin\",{\"1\":{\"12\":4,\"15\":1,\"638\":3,\"645\":2,\"684\":1,\"711\":1,\"731\":4,\"734\":1,\"822\":1,\"833\":1,\"834\":1}}],[\"always\",{\"1\":{\"1952\":1}}],[\"alwaysincludesemantics\",{\"1\":{\"1402\":3,\"1685\":3}}],[\"algo\",{\"1\":{\"1928\":1}}],[\"alarmmanagerservice\",{\"1\":{\"1868\":1}}],[\"alertdialog\",{\"1\":{\"1713\":1}}],[\"alogw\",{\"1\":{\"1827\":1}}],[\"alone\",{\"1\":{\"1476\":2}}],[\"aload\",{\"1\":{\"1009\":1}}],[\"alpha\",{\"1\":{\"1368\":2}}],[\"al00\",{\"1\":{\"1298\":6}}],[\"alter\",{\"1\":{\"614\":2,\"622\":2,\"630\":2}}],[\"alternatively\",{\"1\":{\"73\":1}}],[\"alice\",{\"1\":{\"1521\":3}}],[\"alignitems\",{\"1\":{\"1707\":1,\"1708\":1}}],[\"alignmentgeometry\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"alignment\",{\"1\":{\"1402\":20,\"1685\":20}}],[\"align\",{\"1\":{\"1402\":4,\"1685\":4}}],[\"alipayurl\",{\"1\":{\"1358\":2}}],[\"alipayutil\",{\"1\":{\"1358\":3}}],[\"alipay\",{\"1\":{\"1358\":2}}],[\"alipays\",{\"1\":{\"1358\":3}}],[\"alive\",{\"1\":{\"651\":2}}],[\"aliyun\",{\"1\":{\"124\":1,\"608\":3,\"1462\":1}}],[\"alibaba\",{\"1\":{\"8\":1,\"9\":1,\"12\":4,\"727\":1,\"728\":1,\"731\":4,\"1399\":4,\"1682\":4,\"1690\":1}}],[\"already\",{\"0\":{\"1917\":1},\"1\":{\"115\":3,\"711\":1,\"1847\":1}}],[\"alloc\",{\"1\":{\"1770\":1}}],[\"allocobject\",{\"1\":{\"1527\":1}}],[\"allocanimalconstructor\",{\"1\":{\"1527\":1}}],[\"allocandinitstaticvars\",{\"1\":{\"979\":1}}],[\"allocate\",{\"1\":{\"334\":1,\"864\":1}}],[\"allocatedirect\",{\"1\":{\"1540\":1}}],[\"allocated\",{\"1\":{\"144\":1,\"145\":1}}],[\"allownoncallbacks\",{\"1\":{\"1829\":2}}],[\"allowisolated=\",{\"1\":{\"1798\":1}}],[\"allowisolated\",{\"1\":{\"1798\":2}}],[\"allow\",{\"1\":{\"651\":3,\"652\":3,\"662\":3,\"723\":3,\"1790\":2}}],[\"allowcredentials\",{\"1\":{\"650\":1}}],[\"allowedheaders\",{\"1\":{\"650\":1}}],[\"allowedmethods\",{\"1\":{\"650\":1}}],[\"allowedorigins\",{\"1\":{\"650\":2}}],[\"allowedoriginpatterns\",{\"1\":{\"650\":2}}],[\"allowed\",{\"1\":{\"631\":2}}],[\"allatori\",{\"1\":{\"103\":2}}],[\"allprojects\",{\"1\":{\"100\":1,\"1304\":1,\"1558\":1,\"1595\":1,\"1641\":1,\"1911\":1,\"1966\":1}}],[\"all\",{\"0\":{\"1568\":1},\"1\":{\"12\":2,\"52\":1,\"55\":1,\"94\":1,\"334\":2,\"613\":1,\"629\":1,\"631\":4,\"652\":1,\"731\":2,\"1036\":2,\"1329\":1,\"1399\":1,\"1402\":3,\"1488\":1,\"1521\":2,\"1530\":1,\"1555\":1,\"1682\":1,\"1685\":3,\"1947\":1}}],[\"毫无保留给个人及企业免费使用\",{\"1\":{\"9\":1,\"728\":1}}],[\"和phase500\",{\"1\":{\"1867\":1}}],[\"和处理相应消息事件\",{\"1\":{\"1837\":1}}],[\"和取走消息池的消息\",{\"1\":{\"1837\":1}}],[\"和软件生成的消息\",{\"1\":{\"1837\":1}}],[\"和业务代码复用问题\",{\"1\":{\"1694\":1}}],[\"和对应插件放在一起\",{\"1\":{\"1632\":1}}],[\"和正常开发无任何变化\",{\"1\":{\"1491\":1}}],[\"和细节优化\",{\"1\":{\"1488\":1}}],[\"和guiying\",{\"1\":{\"1453\":1}}],[\"和sp可以简单应付大部分场景\",{\"1\":{\"1395\":1,\"1678\":1}}],[\"和运行中\",{\"1\":{\"943\":1}}],[\"和方法\",{\"1\":{\"738\":1}}],[\"和信金服项目\",{\"1\":{\"595\":1}}],[\"和信贷退出\",{\"1\":{\"595\":1}}],[\"和绩效理解不做强挂钩\",{\"1\":{\"589\":1}}],[\"和指定的值\",{\"1\":{\"381\":1}}],[\"和扩容相关的参数主要有\",{\"1\":{\"352\":1}}],[\"和虚拟中间件\",{\"1\":{\"314\":1}}],[\"和数组第二个数交换位置\",{\"1\":{\"282\":1}}],[\"和数组第一个数交换位置\",{\"1\":{\"282\":1}}],[\"和这个\",{\"1\":{\"207\":1}}],[\"和三级缓存\",{\"0\":{\"178\":1}}],[\"和类级别的\",{\"1\":{\"167\":1}}],[\"和npm命令一样\",{\"1\":{\"112\":1}}],[\"和\",{\"1\":{\"8\":1,\"207\":2,\"320\":1,\"323\":1,\"325\":1,\"334\":1,\"345\":1,\"346\":1,\"352\":1,\"358\":1,\"649\":2,\"727\":1,\"935\":1,\"1268\":1,\"1277\":1,\"1530\":1,\"1540\":1,\"1707\":2,\"1708\":2,\"1712\":1,\"1713\":1,\"1856\":1}}],[\"基础组件和容器组件\",{\"1\":{\"1712\":1}}],[\"基础知识\",{\"1\":{\"1518\":1}}],[\"基础业务库采用java\",{\"1\":{\"1512\":1}}],[\"基础概念\",{\"0\":{\"942\":1}}],[\"基础功能自动化\",{\"1\":{\"305\":1}}],[\"基础模块化\",{\"1\":{\"305\":1}}],[\"基础加固服务\",{\"1\":{\"103\":1}}],[\"基数排序是按照低位先排序\",{\"1\":{\"287\":1}}],[\"基数排序\",{\"0\":{\"287\":1},\"1\":{\"287\":1}}],[\"基准线布局\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"基准\",{\"1\":{\"279\":2}}],[\"基准默认取第一个\",{\"1\":{\"279\":1}}],[\"基本库\",{\"1\":{\"1622\":1}}],[\"基本思考\",{\"1\":{\"1540\":1}}],[\"基本图元\",{\"1\":{\"1540\":1}}],[\"基本要求\",{\"0\":{\"1439\":1}}],[\"基本覆盖app大多数ui场景\",{\"1\":{\"1395\":1,\"1678\":1}}],[\"基本块重排序\",{\"1\":{\"1210\":1}}],[\"基本型数组\",{\"1\":{\"1008\":1}}],[\"基本原理\",{\"0\":{\"352\":1}}],[\"基本数据类型\",{\"1\":{\"271\":1,\"1087\":1,\"1232\":1,\"1530\":1}}],[\"基本类型\",{\"1\":{\"271\":1,\"900\":1,\"1087\":1}}],[\"基本功\",{\"0\":{\"1\":1},\"2\":{\"2\":1,\"4\":1,\"579\":1}}],[\"基于端云一体化开发\",{\"1\":{\"1707\":1}}],[\"基于rxjava2\",{\"1\":{\"1647\":1}}],[\"基于rxandroid的库\",{\"1\":{\"1364\":1}}],[\"基于cc\",{\"0\":{\"1494\":1}}],[\"基于uri的优秀的路由框架\",{\"1\":{\"1481\":1}}],[\"基于uri开发的框架\",{\"1\":{\"1481\":1}}],[\"基于gsygithubappflutter项目重构\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"基于dio支持网络请求任意灵活配置\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"基于pull\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"基于x轴缩放\",{\"1\":{\"1310\":1}}],[\"基于文本基线或底部对齐\",{\"1\":{\"1310\":1}}],[\"基于计数器\",{\"1\":{\"1209\":1}}],[\"基于采样\",{\"1\":{\"1209\":1}}],[\"基于栈的解释器\",{\"0\":{\"1193\":1},\"1\":{\"1189\":1}}],[\"基于链表blockingqueue\",{\"1\":{\"958\":1}}],[\"基于数组blockingqueue\",{\"1\":{\"958\":1}}],[\"基于数组实现\",{\"1\":{\"334\":1}}],[\"基于用例\",{\"1\":{\"796\":1}}],[\"基于事件\",{\"1\":{\"559\":1}}],[\"基于此开发的\",{\"1\":{\"558\":1}}],[\"基于堆结构实现\",{\"1\":{\"324\":1}}],[\"基于双向链表实现\",{\"1\":{\"323\":1,\"345\":1,\"346\":1}}],[\"基于动态数组实现\",{\"1\":{\"323\":1,\"346\":1}}],[\"基于哈希表实现\",{\"1\":{\"322\":1,\"325\":1}}],[\"基于红黑树实现\",{\"1\":{\"322\":1,\"325\":1}}],[\"基于请求头动态返回不同语种的文本内容\",{\"1\":{\"12\":1,\"731\":1}}],[\"基于springboot官方\",{\"1\":{\"12\":1,\"731\":1}}],[\"基于注解自动生成\",{\"1\":{\"12\":1,\"731\":1}}],[\"基于插件化框架对其增加了很多功能\",{\"1\":{\"12\":1,\"731\":1}}],[\"基于时间戳的\",{\"1\":{\"12\":1,\"731\":1}}],[\"基于对象几乎不用写sql全java操作\",{\"1\":{\"12\":1,\"731\":1}}],[\"基于netty的客户端工具支持redis\",{\"1\":{\"12\":1,\"731\":1}}],[\"基于\",{\"1\":{\"8\":1,\"9\":1,\"12\":3,\"727\":1,\"728\":1,\"731\":3}}],[\"m2repository\",{\"1\":{\"1966\":1}}],[\"mjavavm\",{\"1\":{\"1861\":1}}],[\"mblocked\",{\"1\":{\"1846\":2,\"1847\":2}}],[\"mbinder\",{\"1\":{\"1737\":2}}],[\"mnextbarriertoken++\",{\"1\":{\"1849\":1}}],[\"mnextrequestseq\",{\"1\":{\"1829\":1}}],[\"mnextmessageuptime\",{\"1\":{\"1828\":2,\"1829\":1}}],[\"mquitting\",{\"1\":{\"1846\":1,\"1847\":1,\"1849\":1}}],[\"mquitallowed\",{\"1\":{\"1829\":1,\"1845\":1}}],[\"mqueue\",{\"1\":{\"1840\":4,\"1843\":1}}],[\"mqzhangw\",{\"1\":{\"1503\":1}}],[\"mrequests\",{\"1\":{\"1828\":2,\"1829\":2}}],[\"mresponseindex\",{\"1\":{\"1828\":1,\"1829\":1}}],[\"mresponses\",{\"1\":{\"1828\":3}}],[\"mremoteservice\",{\"1\":{\"1736\":6}}],[\"mremote\",{\"1\":{\"1731\":4,\"1739\":5,\"1756\":2}}],[\"mwakeeventfd\",{\"1\":{\"1827\":1,\"1828\":2,\"1829\":4}}],[\"mwebview\",{\"1\":{\"1416\":12}}],[\"mwebview=new\",{\"1\":{\"1320\":1}}],[\"mthreadpoolstarted\",{\"1\":{\"1778\":3}}],[\"mtvstatus\",{\"1\":{\"507\":8}}],[\"mlogging\",{\"1\":{\"1843\":1}}],[\"mlooper\",{\"1\":{\"1829\":4,\"1840\":4}}],[\"mlock\",{\"1\":{\"1778\":1,\"1826\":1,\"1828\":4,\"1829\":1}}],[\"mlasterror\",{\"1\":{\"1756\":1}}],[\"mlawsuit\",{\"1\":{\"259\":10,\"447\":4}}],[\"mhandler\",{\"1\":{\"1839\":3}}],[\"mhandle\",{\"1\":{\"1756\":1}}],[\"mcurrentuserid\",{\"1\":{\"1867\":1}}],[\"mcallback\",{\"1\":{\"1840\":2,\"1842\":3}}],[\"mcallinguid<<32\",{\"1\":{\"1717\":1}}],[\"mcallinguid\",{\"1\":{\"1717\":5}}],[\"mcallingpid\",{\"1\":{\"1717\":6}}],[\"mconnection\",{\"1\":{\"1736\":3}}],[\"mkdir\",{\"1\":{\"1944\":1}}],[\"mkdirs\",{\"1\":{\"1417\":1,\"1613\":1}}],[\"mk编译上述代码\",{\"1\":{\"1728\":1}}],[\"mk\",{\"1\":{\"1724\":1}}],[\"mfiler\",{\"1\":{\"1604\":3}}],[\"mvp\",{\"1\":{\"1503\":2,\"1555\":1}}],[\"mvparms很难找出这样的点\",{\"1\":{\"1588\":1}}],[\"mvparmsnetworkhelper\",{\"1\":{\"1549\":3,\"1552\":1,\"1555\":1}}],[\"mvparmshelper<\",{\"1\":{\"1555\":1}}],[\"mvparmshelper插件编写环境配置\",{\"0\":{\"1555\":1}}],[\"mvparmshelper插件编写代码编写\",{\"0\":{\"1552\":1},\"1\":{\"1549\":1,\"1552\":1,\"1555\":1}}],[\"mvparmshelper\",{\"0\":{\"1549\":1},\"1\":{\"1549\":1,\"1552\":1,\"1555\":1}}],[\"mvparms\",{\"1\":{\"1503\":1}}],[\"mvc模式\",{\"1\":{\"1283\":1}}],[\"mvc\",{\"1\":{\"672\":1,\"1265\":1}}],[\"mpendingidlehandlers\",{\"1\":{\"1846\":6}}],[\"mperson\",{\"1\":{\"471\":7}}],[\"mpollobj\",{\"1\":{\"1829\":1}}],[\"mpollenv\",{\"1\":{\"1829\":1}}],[\"mpolling\",{\"1\":{\"1828\":2,\"1829\":1}}],[\"mptr\",{\"1\":{\"1829\":1,\"1845\":1,\"1846\":1,\"1847\":1,\"1849\":1}}],[\"mptr记录native消息队列的信息\",{\"1\":{\"1829\":1}}],[\"mprocess\",{\"1\":{\"1778\":1}}],[\"mproject\",{\"1\":{\"1474\":1,\"1488\":3}}],[\"mpid\",{\"1\":{\"1762\":1}}],[\"mp\",{\"1\":{\"1399\":1,\"1564\":1,\"1682\":1}}],[\"mmessages\",{\"1\":{\"1846\":4,\"1847\":2,\"1849\":6}}],[\"mmessageenvelopes\",{\"1\":{\"1826\":4,\"1828\":3}}],[\"mmythreadid\",{\"1\":{\"1778\":1}}],[\"mmydata\",{\"1\":{\"1737\":6}}],[\"mmap\",{\"1\":{\"1771\":1,\"1772\":2}}],[\"mmmcuuehgby67\",{\"1\":{\"1564\":1}}],[\"mm\",{\"1\":{\"1292\":2}}],[\"mstacksupervisor\",{\"1\":{\"1867\":1}}],[\"msystemcontext\",{\"1\":{\"1867\":3}}],[\"msystemservicemanager\",{\"1\":{\"1867\":6}}],[\"msocket\",{\"1\":{\"1863\":1}}],[\"msendingmessage\",{\"1\":{\"1826\":1,\"1828\":2,\"1829\":1}}],[\"msi\",{\"1\":{\"1218\":1}}],[\"msg\",{\"1\":{\"519\":6,\"1402\":1,\"1527\":5,\"1685\":1,\"1789\":3,\"1839\":3,\"1841\":4,\"1842\":7,\"1843\":10,\"1846\":16,\"1847\":12,\"1848\":1,\"1849\":8,\"1851\":3}}],[\"mdescriptor\",{\"1\":{\"1756\":1}}],[\"mdescriptor的初始化在attachinterface\",{\"1\":{\"1756\":1}}],[\"mdpi\",{\"1\":{\"1338\":1,\"1435\":2}}],[\"md\",{\"1\":{\"1022\":3,\"1399\":1,\"1583\":1,\"1682\":1,\"1944\":2}}],[\"md5加密\",{\"0\":{\"1352\":1,\"1660\":1}}],[\"md5\",{\"1\":{\"638\":1,\"1352\":2,\"1660\":2}}],[\"md5指纹\",{\"1\":{\"106\":1}}],[\"m\",{\"1\":{\"352\":6,\"381\":3,\"1102\":4,\"1151\":1,\"1227\":1,\"1850\":5,\"1944\":1,\"1945\":1,\"1949\":1,\"1961\":1}}],[\"muliton\",{\"1\":{\"1708\":4}}],[\"multition\",{\"1\":{\"1709\":1}}],[\"multidex\",{\"1\":{\"1320\":1,\"1476\":1}}],[\"multidexenabled\",{\"1\":{\"28\":1}}],[\"multiples\",{\"1\":{\"351\":1}}],[\"multiple\",{\"1\":{\"55\":1}}],[\"mutablelistof\",{\"1\":{\"1518\":2}}],[\"mutablelist<string>\",{\"1\":{\"1518\":2}}],[\"mutablemap<string\",{\"1\":{\"1518\":1}}],[\"mutablemapof\",{\"1\":{\"1518\":2}}],[\"mutablemapof<string\",{\"1\":{\"1518\":1}}],[\"mutablecontextwrapper\",{\"1\":{\"1320\":1}}],[\"mutex\",{\"1\":{\"876\":1,\"896\":5,\"1799\":1,\"1805\":1}}],[\"much\",{\"1\":{\"631\":1}}],[\"must\",{\"1\":{\"73\":1,\"631\":1,\"879\":1,\"880\":1,\"1203\":1,\"1847\":1}}],[\"me\",{\"1\":{\"1843\":3}}],[\"mexceptionobj\",{\"1\":{\"1829\":1}}],[\"mexpstack\",{\"1\":{\"525\":7}}],[\"mepollrebuildrequired\",{\"1\":{\"1828\":2,\"1829\":1}}],[\"mepollfd\",{\"1\":{\"1828\":1,\"1829\":7}}],[\"mediump\",{\"1\":{\"1540\":2}}],[\"mediaplayerservice对象\",{\"1\":{\"1798\":1}}],[\"mediaplayerservice\",{\"1\":{\"1798\":3}}],[\"mediaplayerservice进程调用ioctl\",{\"1\":{\"1796\":1}}],[\"media类图\",{\"1\":{\"1795\":1}}],[\"mediaserver和servicemanager的主线程都是binder线程\",{\"1\":{\"1776\":1}}],[\"mediastore\",{\"1\":{\"1417\":2}}],[\"mediarouter\",{\"1\":{\"1567\":1}}],[\"media\",{\"1\":{\"1417\":1,\"1787\":1,\"1796\":1,\"1798\":2,\"1799\":2}}],[\"mediatype\",{\"1\":{\"1332\":1,\"1592\":1}}],[\"mediator\",{\"1\":{\"483\":7}}],[\"mediaor\",{\"1\":{\"483\":20}}],[\"meituan\",{\"1\":{\"1503\":3,\"1564\":1,\"1616\":2}}],[\"meili\",{\"1\":{\"1317\":1}}],[\"messenger\",{\"1\":{\"1491\":2}}],[\"messaging\",{\"1\":{\"314\":1}}],[\"message主要包含以下内容\",{\"1\":{\"1850\":1}}],[\"message的回调方法\",{\"1\":{\"1842\":1}}],[\"messagehandler\",{\"1\":{\"1831\":2}}],[\"messagequeue\",{\"0\":{\"1844\":1},\"1\":{\"1827\":2,\"1828\":2,\"1829\":4,\"1830\":1,\"1832\":2,\"1837\":3,\"1841\":1,\"1843\":2,\"1845\":1,\"1852\":1}}],[\"messagecount\",{\"1\":{\"1826\":2}}],[\"messageenvelope里面记录着收信人\",{\"1\":{\"1831\":1}}],[\"messageenvelope正如其名字\",{\"1\":{\"1831\":1}}],[\"messageenvelope\",{\"1\":{\"1826\":4,\"1828\":6,\"1831\":3}}],[\"message模式\",{\"0\":{\"938\":1}}],[\"message\",{\"1\":{\"73\":1,\"314\":1,\"441\":1,\"1055\":2,\"1329\":2,\"1416\":1,\"1534\":4,\"1711\":1,\"1713\":1,\"1824\":3,\"1826\":3,\"1828\":4,\"1831\":13,\"1837\":1,\"1839\":2,\"1841\":1,\"1842\":2,\"1843\":1,\"1846\":4,\"1847\":5,\"1849\":6,\"1850\":4,\"1851\":1,\"1852\":1}}],[\"mesi\",{\"1\":{\"1218\":1}}],[\"menory\",{\"1\":{\"864\":1}}],[\"menu\",{\"1\":{\"668\":3}}],[\"meta\",{\"1\":{\"668\":18,\"1392\":2,\"1555\":1,\"1675\":2,\"1727\":2,\"1805\":2,\"1806\":3}}],[\"methodandargscaller\",{\"1\":{\"1862\":1,\"1863\":2,\"1865\":1,\"1866\":3}}],[\"methodannotated\",{\"1\":{\"1374\":2}}],[\"methodbuilder\",{\"1\":{\"1601\":1,\"1604\":1}}],[\"methodinfo\",{\"1\":{\"1022\":2,\"1101\":2}}],[\"methodinstance\",{\"1\":{\"169\":2}}],[\"methoddescriptor\",{\"1\":{\"1022\":8}}],[\"methodname\",{\"1\":{\"1022\":8,\"1036\":2}}],[\"methodtobeinvoked\",{\"1\":{\"993\":5}}],[\"methodrefinfo\",{\"1\":{\"1110\":2}}],[\"methodref\",{\"1\":{\"993\":13}}],[\"method2\",{\"1\":{\"843\":2}}],[\"method1\",{\"1\":{\"843\":2}}],[\"methodconfig2\",{\"1\":{\"169\":2}}],[\"methodconfig1\",{\"1\":{\"169\":2}}],[\"methodconfig3\",{\"1\":{\"169\":2}}],[\"methodconfig\",{\"1\":{\"169\":2}}],[\"methodclass\",{\"1\":{\"169\":2}}],[\"method\",{\"0\":{\"82\":1},\"1\":{\"237\":1,\"259\":11,\"415\":4,\"416\":3,\"447\":3,\"651\":1,\"652\":1,\"711\":1,\"738\":1,\"822\":1,\"843\":2,\"984\":7,\"985\":1,\"992\":5,\"993\":17,\"994\":4,\"996\":1,\"1009\":1,\"1016\":1,\"1022\":23,\"1030\":1,\"1036\":6,\"1044\":1,\"1076\":1,\"1093\":1,\"1102\":1,\"1109\":6,\"1203\":1,\"1332\":1,\"1361\":1,\"1374\":1,\"1456\":3,\"1546\":9,\"1592\":30,\"1604\":1,\"1866\":2}}],[\"methodspec\",{\"1\":{\"1601\":4,\"1604\":6}}],[\"methods\",{\"0\":{\"43\":1},\"1\":{\"28\":1,\"237\":3,\"359\":1,\"651\":1,\"652\":1,\"1076\":4,\"1081\":1,\"1102\":1,\"1109\":10,\"1546\":4}}],[\"measurable\",{\"1\":{\"583\":1}}],[\"mean\",{\"1\":{\"94\":1}}],[\"memset\",{\"1\":{\"1829\":1}}],[\"memcpy\",{\"1\":{\"1790\":1}}],[\"meminfo\",{\"1\":{\"834\":1}}],[\"mem\",{\"1\":{\"631\":1}}],[\"memoto\",{\"1\":{\"495\":17}}],[\"memory\",{\"1\":{\"151\":2,\"631\":2,\"820\":1,\"864\":2,\"1119\":1,\"1218\":1,\"1530\":2}}],[\"memberref\",{\"1\":{\"1110\":4}}],[\"memberinfo\",{\"1\":{\"1022\":1,\"1036\":1,\"1076\":2,\"1079\":1,\"1101\":1,\"1102\":1,\"1109\":7}}],[\"membercart\",{\"1\":{\"668\":1}}],[\"memberaddress\",{\"1\":{\"668\":3}}],[\"member\",{\"1\":{\"12\":10,\"668\":4,\"731\":10,\"1518\":1}}],[\"merge\",{\"1\":{\"284\":2,\"1947\":1}}],[\"mergesort\",{\"1\":{\"284\":4}}],[\"mergedebugresources\",{\"1\":{\"103\":1}}],[\"merging\",{\"1\":{\"115\":1}}],[\"might\",{\"1\":{\"1840\":1}}],[\"mirrorbitmap\",{\"1\":{\"1527\":1}}],[\"mirrors\",{\"1\":{\"79\":4}}],[\"mime\",{\"1\":{\"1417\":1}}],[\"mipmap\",{\"1\":{\"1289\":1,\"1292\":1,\"1305\":2,\"1320\":1}}],[\"mills\",{\"1\":{\"870\":3,\"949\":1}}],[\"milliseconds\",{\"1\":{\"247\":2,\"828\":2}}],[\"mixed\",{\"1\":{\"631\":1}}],[\"mismain\",{\"1\":{\"1778\":3}}],[\"misbound\",{\"1\":{\"1736\":4}}],[\"misharedprefdelegate\",{\"1\":{\"1626\":3}}],[\"missyoung\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"missing\",{\"1\":{\"94\":1}}],[\"miscdevice\",{\"1\":{\"1772\":1}}],[\"miscdev\",{\"1\":{\"1772\":2}}],[\"misc\",{\"1\":{\"351\":1,\"1044\":1,\"1772\":2}}],[\"midlehandlers\",{\"1\":{\"1846\":3}}],[\"middle\",{\"1\":{\"897\":3,\"1568\":1}}],[\"middleware\",{\"1\":{\"314\":1}}],[\"mid\",{\"1\":{\"284\":8}}],[\"minstance\",{\"1\":{\"1756\":3}}],[\"minheight\",{\"1\":{\"1402\":3,\"1685\":3}}],[\"minwidth\",{\"1\":{\"1402\":3,\"1685\":3}}],[\"mine\",{\"1\":{\"657\":2}}],[\"mincapacity\",{\"1\":{\"332\":12,\"338\":4}}],[\"min\",{\"1\":{\"285\":7,\"917\":2,\"1798\":4,\"1846\":1}}],[\"minimum\",{\"1\":{\"1534\":1}}],[\"minifyenabled\",{\"1\":{\"1317\":1}}],[\"mini\",{\"1\":{\"604\":2,\"657\":1}}],[\"minindex\",{\"1\":{\"282\":6}}],[\"minio\",{\"1\":{\"12\":1,\"731\":1}}],[\"minorversion\",{\"1\":{\"1076\":1,\"1078\":2}}],[\"minorgc\",{\"1\":{\"184\":1,\"207\":1,\"1146\":2}}],[\"minor\",{\"1\":{\"64\":1,\"207\":4,\"237\":1,\"1076\":1,\"1534\":6,\"1772\":2}}],[\"microseconds\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"microservices\",{\"1\":{\"314\":1}}],[\"microsoft\",{\"1\":{\"16\":1}}],[\"microkernel\",{\"1\":{\"313\":1}}],[\"micro\",{\"1\":{\"8\":1,\"9\":1,\"727\":1,\"728\":1}}],[\"myhandler\",{\"1\":{\"1851\":1}}],[\"mylooper\",{\"1\":{\"1840\":1,\"1843\":1,\"1851\":1}}],[\"mypid\",{\"1\":{\"1737\":2}}],[\"mydata自定义\",{\"0\":{\"1738\":1}}],[\"mydata\",{\"1\":{\"1735\":2,\"1736\":4,\"1737\":3,\"1738\":7,\"1739\":5}}],[\"myserver\",{\"1\":{\"1732\":1}}],[\"myserviceproxy\",{\"1\":{\"1729\":1,\"1731\":3}}],[\"myservice\",{\"1\":{\"1725\":3,\"1726\":2,\"1727\":2,\"1729\":2,\"1730\":3,\"1731\":4,\"1732\":3}}],[\"mysqlhotcopy\",{\"1\":{\"631\":1}}],[\"mysql配置\",{\"0\":{\"631\":1}}],[\"mysql远程开放3306\",{\"0\":{\"625\":1}}],[\"mysqldump\",{\"1\":{\"631\":1}}],[\"mysqld\",{\"1\":{\"619\":1,\"627\":2,\"631\":8,\"694\":7}}],[\"mysql服务\",{\"1\":{\"619\":1}}],[\"mysql解决1045\",{\"0\":{\"618\":1}}],[\"mysql>\",{\"1\":{\"614\":1,\"619\":2,\"622\":1,\"630\":1}}],[\"mysql没有权限\",{\"0\":{\"611\":1}}],[\"mysql\",{\"0\":{\"627\":1},\"1\":{\"12\":1,\"612\":1,\"613\":4,\"614\":8,\"615\":11,\"619\":5,\"620\":1,\"621\":1,\"622\":4,\"627\":2,\"628\":1,\"629\":1,\"630\":7,\"631\":12,\"693\":1,\"694\":9,\"695\":2,\"696\":1,\"731\":1}}],[\"myinterface\",{\"1\":{\"1518\":2}}],[\"myisamchk\",{\"1\":{\"631\":1}}],[\"myisam\",{\"1\":{\"631\":1}}],[\"myturtle\",{\"1\":{\"1518\":2}}],[\"mytask\",{\"1\":{\"923\":4}}],[\"myapplication\",{\"1\":{\"1320\":1,\"1332\":1,\"1530\":1}}],[\"myobj\",{\"1\":{\"983\":6}}],[\"myobject\",{\"1\":{\"983\":7,\"986\":1}}],[\"my\",{\"1\":{\"627\":1,\"631\":1}}],[\"mybatis\",{\"1\":{\"12\":9,\"731\":9}}],[\"mountexternal\",{\"1\":{\"1863\":1}}],[\"mout\",{\"1\":{\"1778\":2}}],[\"morgue\",{\"1\":{\"1762\":1}}],[\"more\",{\"1\":{\"73\":1}}],[\"mobject成员变量值\",{\"1\":{\"1762\":1}}],[\"mobject\",{\"1\":{\"1756\":1,\"1762\":1}}],[\"mobject中保存的是new\",{\"1\":{\"1756\":1}}],[\"mobilephone\",{\"1\":{\"453\":5}}],[\"mowner\",{\"1\":{\"1756\":1}}],[\"mock的依赖\",{\"1\":{\"1595\":1}}],[\"mock的动态代理及注解\",{\"1\":{\"1586\":1,\"1592\":1,\"1595\":1}}],[\"mock用法\",{\"1\":{\"1595\":1}}],[\"mock用法2\",{\"1\":{\"1586\":1,\"1592\":1,\"1595\":1}}],[\"mock库\",{\"1\":{\"1595\":1}}],[\"mock库是mock真正实现代码\",{\"1\":{\"1595\":1}}],[\"mock库在debug包生效\",{\"1\":{\"1595\":1}}],[\"mock在debug生效\",{\"1\":{\"1595\":1}}],[\"mock框架正式生产包\",{\"1\":{\"1595\":1}}],[\"mock框架无入侵式注入\",{\"1\":{\"1595\":1}}],[\"mock框架功能\",{\"1\":{\"1595\":1}}],[\"mock框架编写背景需求\",{\"0\":{\"1587\":1}}],[\"mockercall\",{\"1\":{\"1592\":1}}],[\"mockerhandler<t>\",{\"1\":{\"1592\":1}}],[\"mockerhandler\",{\"1\":{\"1589\":1,\"1592\":2}}],[\"mockresponsejson\",{\"1\":{\"1592\":2}}],[\"mock提供了好的思路\",{\"1\":{\"1589\":1,\"1592\":1,\"1595\":1}}],[\"mock开关\",{\"1\":{\"1589\":2}}],[\"mock测试代码与生产代码一致\",{\"1\":{\"1587\":1}}],[\"mock编写思路\",{\"1\":{\"1586\":1,\"1592\":2,\"1595\":1}}],[\"mock\",{\"0\":{\"1586\":1,\"1592\":1,\"1595\":1},\"1\":{\"1589\":2,\"1592\":7,\"1595\":10,\"1911\":1}}],[\"mockwebserver\",{\"0\":{\"1580\":1},\"1\":{\"1580\":2}}],[\"monotonic\",{\"1\":{\"1828\":1}}],[\"monkey\",{\"1\":{\"1583\":2}}],[\"monkey压力测试\",{\"0\":{\"1583\":1}}],[\"monitorexit\",{\"1\":{\"1238\":1}}],[\"monitorexit指令\",{\"1\":{\"1238\":1}}],[\"monitorenter\",{\"1\":{\"1238\":1}}],[\"monitor\",{\"1\":{\"12\":1,\"668\":1,\"731\":1,\"822\":1,\"834\":2,\"1583\":1}}],[\"mosi\",{\"1\":{\"1218\":1}}],[\"movb\",{\"1\":{\"841\":1}}],[\"move\",{\"1\":{\"363\":1}}],[\"modularization\",{\"1\":{\"1483\":1}}],[\"modulename\",{\"1\":{\"1604\":4}}],[\"moduler\",{\"1\":{\"1503\":1}}],[\"moduler组件化demo\",{\"1\":{\"1503\":1}}],[\"modulebus\",{\"1\":{\"1503\":2}}],[\"module间代码隔离\",{\"1\":{\"1494\":1}}],[\"module急剧增大\",{\"1\":{\"1491\":1}}],[\"module空文件夹清理\",{\"1\":{\"1488\":1}}],[\"module中所有java代码\",{\"1\":{\"1488\":1}}],[\"module\",{\"0\":{\"88\":1},\"1\":{\"52\":1,\"604\":2,\"657\":1,\"668\":1,\"1329\":1,\"1476\":14,\"1488\":5,\"1491\":6,\"1604\":5,\"1699\":1,\"1708\":1,\"1709\":2,\"1772\":1,\"1905\":2}}],[\"modules\",{\"0\":{\"85\":1},\"1\":{\"12\":11,\"85\":2,\"94\":3,\"731\":11,\"1534\":1,\"1555\":1}}],[\"modifier\",{\"1\":{\"1546\":1,\"1601\":4,\"1604\":5,\"1840\":1}}],[\"modifiers\",{\"1\":{\"1546\":4}}],[\"modified\",{\"1\":{\"651\":2}}],[\"modification\",{\"1\":{\"359\":1}}],[\"model\",{\"1\":{\"1298\":3,\"1604\":1}}],[\"models<\",{\"1\":{\"672\":1}}],[\"mode=strict\",{\"1\":{\"631\":2}}],[\"mode=only\",{\"1\":{\"631\":1}}],[\"mode\",{\"1\":{\"604\":2,\"657\":1,\"879\":2,\"1383\":6,\"1666\":6,\"1708\":1}}],[\"modcounts\",{\"1\":{\"359\":1}}],[\"modcount++\",{\"1\":{\"332\":1,\"333\":1,\"337\":1,\"350\":2}}],[\"modcount\",{\"1\":{\"332\":1,\"334\":2,\"335\":2,\"352\":1,\"358\":1,\"359\":1}}],[\"modle时\",{\"0\":{\"73\":1}}],[\"mallownoncallbacks\",{\"1\":{\"1829\":1}}],[\"malloc\",{\"1\":{\"1790\":1}}],[\"mall4j\",{\"1\":{\"638\":2,\"640\":1}}],[\"malive\",{\"1\":{\"1756\":2}}],[\"magin等属性\",{\"1\":{\"1445\":1}}],[\"magic\",{\"1\":{\"237\":1,\"1076\":2,\"1077\":3}}],[\"manifiest\",{\"1\":{\"1555\":1}}],[\"manifest\",{\"1\":{\"1416\":3,\"1475\":2}}],[\"manufacturer\",{\"1\":{\"1298\":3}}],[\"man\",{\"1\":{\"1188\":16}}],[\"manage\",{\"1\":{\"531\":9}}],[\"manager的线程收到请求\",{\"1\":{\"1796\":1}}],[\"manager进入循环\",{\"1\":{\"1789\":1}}],[\"manager进程\",{\"1\":{\"1787\":1}}],[\"manager上下文\",{\"1\":{\"1788\":1}}],[\"manager位于用户空间\",{\"1\":{\"1744\":1}}],[\"manager引用\",{\"1\":{\"1725\":1,\"1726\":1}}],[\"manager\",{\"1\":{\"314\":1,\"537\":7,\"1725\":1,\"1746\":1,\"1786\":1,\"1788\":2,\"1791\":1,\"1867\":1}}],[\"mars\",{\"1\":{\"1616\":1}}],[\"marginright=\",{\"1\":{\"1346\":1}}],[\"margintop=\",{\"1\":{\"1346\":4}}],[\"marginleft=\",{\"1\":{\"1346\":5}}],[\"marginstart=\",{\"1\":{\"1346\":3}}],[\"margin\",{\"1\":{\"1338\":1,\"1402\":3,\"1435\":1,\"1685\":3}}],[\"martin\",{\"1\":{\"750\":1}}],[\"markinuse\",{\"1\":{\"1846\":1,\"1847\":1,\"1849\":1}}],[\"market\",{\"1\":{\"1326\":1}}],[\"marketpkg\",{\"1\":{\"1326\":4}}],[\"markword\",{\"1\":{\"1248\":1}}],[\"mark\",{\"0\":{\"204\":1,\"205\":1},\"1\":{\"757\":1,\"844\":1,\"847\":3,\"1117\":1}}],[\"masynchronous\",{\"1\":{\"1840\":2,\"1841\":1}}],[\"master\",{\"1\":{\"631\":1,\"1383\":3,\"1549\":1,\"1583\":1,\"1666\":3,\"1905\":1,\"1944\":1,\"1945\":1,\"1951\":1,\"1960\":1,\"1961\":1}}],[\"maskfilterspan\",{\"1\":{\"1310\":1}}],[\"mask+1\",{\"1\":{\"354\":2}}],[\"mask\",{\"1\":{\"354\":6}}],[\"made\",{\"1\":{\"631\":1}}],[\"makebinderthreadname\",{\"1\":{\"1778\":1}}],[\"makefile前言\",{\"0\":{\"1534\":1}}],[\"maketext\",{\"1\":{\"1305\":2,\"1307\":3,\"1598\":1}}],[\"makecoffee\",{\"1\":{\"459\":7}}],[\"make\",{\"1\":{\"359\":1,\"631\":1,\"978\":1,\"979\":1,\"1009\":2,\"1030\":1,\"1036\":1,\"1109\":2,\"1110\":1,\"1534\":4}}],[\"makeerror\",{\"1\":{\"94\":1}}],[\"maxby\",{\"1\":{\"1521\":1}}],[\"maxheight\",{\"1\":{\"1402\":6,\"1685\":6}}],[\"maxwidth\",{\"1\":{\"1402\":6,\"1685\":6}}],[\"maxlocals\",{\"1\":{\"1022\":1,\"1036\":2,\"1101\":3,\"1109\":1}}],[\"maxstack\",{\"1\":{\"1022\":1,\"1036\":2,\"1101\":3,\"1109\":1}}],[\"maxpermsize=512m\",{\"1\":{\"711\":1}}],[\"maxage\",{\"1\":{\"650\":1}}],[\"maximum\",{\"1\":{\"352\":2,\"354\":2,\"882\":1,\"883\":1,\"886\":1}}],[\"maximumpoolsize\",{\"1\":{\"246\":2,\"914\":1}}],[\"max\",{\"1\":{\"247\":2,\"285\":6,\"332\":2,\"338\":1,\"352\":1,\"358\":1,\"359\":1,\"365\":5,\"537\":1,\"614\":4,\"622\":4,\"630\":4,\"631\":2,\"651\":1,\"828\":2,\"886\":2,\"917\":3,\"950\":3,\"1416\":1,\"1435\":1,\"1518\":3,\"1521\":2,\"1828\":3,\"1829\":1,\"1846\":2,\"1850\":1}}],[\"maputils\",{\"1\":{\"1604\":2}}],[\"mapof\",{\"1\":{\"1518\":1}}],[\"map04\",{\"1\":{\"1518\":5}}],[\"map03\",{\"1\":{\"1518\":2}}],[\"map02\",{\"1\":{\"1518\":4}}],[\"map01\",{\"1\":{\"1518\":4}}],[\"map创建\",{\"1\":{\"1518\":1}}],[\"mappthread\",{\"1\":{\"1762\":1}}],[\"mapp\",{\"1\":{\"1762\":1}}],[\"mapping\",{\"1\":{\"1292\":1}}],[\"mappingfile\",{\"1\":{\"1292\":2}}],[\"mapper\",{\"1\":{\"11\":1,\"730\":1}}],[\"map存储class类\",{\"1\":{\"977\":1}}],[\"mapstruct<\",{\"1\":{\"672\":1}}],[\"mapsingleton\",{\"1\":{\"405\":2}}],[\"map<typeelement\",{\"1\":{\"1604\":1}}],[\"map<class<\",{\"1\":{\"1598\":1}}],[\"map<string\",{\"1\":{\"405\":1,\"441\":1,\"885\":1,\"1332\":10,\"1518\":1,\"1604\":1}}],[\"map<k\",{\"1\":{\"362\":1,\"368\":2}}],[\"map为空\",{\"1\":{\"381\":1}}],[\"map不为空\",{\"1\":{\"381\":2}}],[\"map不是\",{\"1\":{\"212\":1}}],[\"map\",{\"0\":{\"325\":1},\"1\":{\"212\":1,\"319\":1,\"320\":2,\"348\":4,\"349\":4,\"356\":1,\"364\":2,\"365\":1,\"367\":1,\"381\":10,\"667\":1,\"885\":4,\"978\":2,\"1009\":1,\"1022\":1,\"1030\":1,\"1283\":1,\"1332\":6,\"1518\":20,\"1521\":3,\"1604\":1,\"1622\":1}}],[\"map特点\",{\"0\":{\"212\":1}}],[\"mavendeployer\",{\"1\":{\"1966\":1}}],[\"maven库上传\",{\"1\":{\"608\":1}}],[\"maven上传\",{\"0\":{\"607\":1,\"608\":1}}],[\"maven\",{\"1\":{\"100\":1,\"124\":2,\"1304\":1,\"1462\":2,\"1558\":1,\"1595\":1,\"1623\":1,\"1641\":1,\"1905\":1,\"1911\":5,\"1966\":3}}],[\"maybe\",{\"1\":{\"1604\":1}}],[\"may\",{\"1\":{\"94\":3,\"631\":1,\"1648\":2}}],[\"majorversion\",{\"1\":{\"1076\":1,\"1078\":2}}],[\"major\",{\"1\":{\"64\":1,\"207\":2,\"237\":1,\"1076\":1,\"1534\":6}}],[\"matrix4\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"materialapp\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"material\",{\"1\":{\"1383\":3,\"1402\":2,\"1666\":3,\"1685\":2}}],[\"match失效\",{\"1\":{\"1346\":1}}],[\"match\",{\"1\":{\"1346\":9}}],[\"matcher\",{\"1\":{\"672\":1}}],[\"matched\",{\"0\":{\"64\":1}}],[\"matching\",{\"1\":{\"672\":1}}],[\"math\",{\"1\":{\"285\":2,\"332\":1,\"1368\":1,\"1846\":2}}],[\"matter\",{\"1\":{\"0\":1}}],[\"main入口\",{\"1\":{\"1870\":1}}],[\"main方法\",{\"1\":{\"1861\":1}}],[\"mainbin\",{\"1\":{\"1534\":1}}],[\"mainboard\",{\"1\":{\"483\":3}}],[\"main下删除所有debug目录下的文件\",{\"1\":{\"1475\":1}}],[\"mainactivity\",{\"1\":{\"1305\":2,\"1307\":3}}],[\"main类\",{\"1\":{\"1169\":1}}],[\"main函数调用\",{\"1\":{\"1070\":1}}],[\"mainmethod\",{\"1\":{\"985\":3,\"996\":3,\"1044\":3,\"1102\":3}}],[\"mainclass\",{\"1\":{\"985\":2,\"996\":2,\"1044\":2}}],[\"mainthread\",{\"1\":{\"1044\":7,\"1364\":2}}],[\"maint\",{\"1\":{\"614\":1,\"615\":1,\"630\":1}}],[\"maintained\",{\"1\":{\"381\":1}}],[\"maintain\",{\"1\":{\"359\":1}}],[\"main\",{\"0\":{\"46\":1,\"52\":1,\"1860\":1,\"1867\":1},\"1\":{\"151\":1,\"160\":1,\"169\":1,\"259\":3,\"271\":1,\"365\":1,\"405\":1,\"415\":1,\"416\":1,\"422\":2,\"428\":1,\"435\":1,\"441\":1,\"447\":3,\"453\":1,\"459\":1,\"465\":1,\"471\":1,\"477\":1,\"483\":1,\"489\":1,\"501\":1,\"507\":1,\"513\":1,\"519\":1,\"525\":1,\"531\":1,\"537\":1,\"543\":1,\"694\":1,\"711\":1,\"823\":1,\"843\":1,\"867\":1,\"868\":1,\"897\":1,\"900\":4,\"904\":1,\"905\":1,\"907\":1,\"908\":1,\"923\":1,\"926\":1,\"938\":1,\"945\":1,\"958\":1,\"983\":1,\"985\":1,\"986\":1,\"995\":1,\"996\":1,\"997\":2,\"1010\":1,\"1017\":2,\"1023\":3,\"1024\":4,\"1030\":1,\"1037\":3,\"1044\":2,\"1055\":1,\"1056\":3,\"1064\":1,\"1070\":5,\"1088\":1,\"1102\":2,\"1103\":1,\"1182\":1,\"1188\":2,\"1197\":1,\"1203\":3,\"1218\":1,\"1289\":2,\"1326\":1,\"1368\":1,\"1402\":1,\"1475\":9,\"1476\":7,\"1488\":7,\"1491\":1,\"1494\":1,\"1506\":1,\"1518\":1,\"1534\":8,\"1540\":2,\"1598\":1,\"1601\":1,\"1610\":4,\"1645\":1,\"1685\":1,\"1707\":1,\"1708\":1,\"1725\":1,\"1726\":1,\"1730\":1,\"1731\":1,\"1777\":1,\"1781\":1,\"1788\":1,\"1798\":1,\"1842\":1,\"1843\":1,\"1857\":1,\"1860\":3,\"1861\":1,\"1862\":1,\"1865\":2,\"1866\":5,\"1867\":2,\"1869\":5,\"1870\":1,\"1966\":2}}],[\"mail\",{\"1\":{\"12\":1,\"731\":1,\"1928\":1}}],[\"mactivitymanagerservice\",{\"1\":{\"1867\":1}}],[\"mactivityinfo\",{\"1\":{\"70\":1}}],[\"macro\",{\"1\":{\"1534\":1}}],[\"mac环境\",{\"0\":{\"1049\":1}}],[\"mac破解版\",{\"0\":{\"22\":1}}],[\"mac\",{\"0\":{\"31\":1,\"58\":1,\"109\":1,\"1937\":1,\"1963\":1,\"1974\":1},\"1\":{\"16\":1,\"31\":1,\"103\":2,\"1380\":1,\"1613\":1,\"1943\":1}}],[\"mac远程桌面\",{\"1\":{\"16\":1}}],[\"mac远程桌面安装\",{\"0\":{\"16\":1}}],[\"mac一键安装脚本\",{\"1\":{\"16\":1}}],[\"mac版安装路径\",{\"1\":{\"16\":1}}],[\"cxxflags\",{\"1\":{\"1534\":2}}],[\"cxx\",{\"1\":{\"1534\":11}}],[\"c特点\",{\"1\":{\"1530\":1}}],[\"ctl\",{\"1\":{\"1829\":5}}],[\"ctx\",{\"1\":{\"1383\":1,\"1521\":2,\"1666\":1}}],[\"ctorinstance\",{\"1\":{\"864\":1}}],[\"ctovisitor\",{\"1\":{\"531\":2}}],[\"cto\",{\"1\":{\"531\":4}}],[\"cc组件化\",{\"1\":{\"1503\":1}}],[\"ccc5\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"cc\",{\"1\":{\"1367\":1,\"1399\":1,\"1481\":3,\"1503\":3,\"1534\":2,\"1682\":1}}],[\"c9\",{\"1\":{\"1367\":1}}],[\"c7\",{\"1\":{\"1367\":1}}],[\"c4\",{\"1\":{\"1367\":1}}],[\"c00e180r2p1\",{\"1\":{\"1298\":1}}],[\"c2\",{\"1\":{\"1209\":1,\"1367\":1}}],[\"c2编译\",{\"1\":{\"1207\":1}}],[\"c2编译器\",{\"1\":{\"1206\":1}}],[\"c101664263955318144\",{\"1\":{\"1701\":1}}],[\"c1\",{\"1\":{\"1209\":1}}],[\"c1编译\",{\"1\":{\"1207\":1}}],[\"c1编译器\",{\"1\":{\"1206\":1}}],[\"c++默认使用utf编码\",{\"1\":{\"1530\":1}}],[\"c++开发\",{\"1\":{\"1530\":1}}],[\"c++开发工具包\",{\"1\":{\"1530\":1}}],[\"c++多种分配\",{\"1\":{\"1213\":1}}],[\"c++\",{\"1\":{\"1175\":1,\"1210\":1,\"1527\":1,\"1530\":1,\"1534\":2}}],[\"c的子类或者同一个包可以访问\",{\"1\":{\"1109\":1}}],[\"cmath\",{\"1\":{\"1534\":1}}],[\"cmakefiles\",{\"1\":{\"1534\":1}}],[\"cmakelists\",{\"1\":{\"1534\":3}}],[\"cmake\",{\"1\":{\"1534\":28}}],[\"cmake官网\",{\"1\":{\"1534\":1}}],[\"cmake快速实战\",{\"0\":{\"1533\":1},\"1\":{\"1527\":1,\"1530\":1,\"1533\":1}}],[\"cms收集器\",{\"0\":{\"1144\":1}}],[\"cmds\",{\"1\":{\"1746\":2,\"1781\":1,\"1791\":1,\"1870\":1}}],[\"cmdjiagu\",{\"1\":{\"1613\":2}}],[\"cmdbase\",{\"1\":{\"1613\":2}}],[\"cmd添加jre目录\",{\"0\":{\"1062\":1}}],[\"cmd命令行参数解析\",{\"0\":{\"1054\":1}}],[\"cmd\",{\"1\":{\"985\":6,\"996\":8,\"1044\":18,\"1055\":13,\"1056\":10,\"1057\":1,\"1062\":3,\"1064\":8,\"1070\":14,\"1102\":6,\"1613\":3,\"1717\":2,\"1770\":3,\"1778\":2,\"1789\":2,\"1798\":4}}],[\"cmtc笔记总结\",{\"0\":{\"305\":1}}],[\"cfcp\",{\"1\":{\"1110\":3}}],[\"cffield\",{\"1\":{\"1109\":3}}],[\"cffields\",{\"1\":{\"1109\":3}}],[\"cfmethods\",{\"1\":{\"1109\":3}}],[\"cfmethod\",{\"1\":{\"1022\":3,\"1036\":2,\"1109\":3}}],[\"cf\",{\"1\":{\"979\":2,\"1081\":3,\"1102\":4,\"1109\":8,\"1367\":1}}],[\"cyclicbarrier循环栏珊\",{\"1\":{\"923\":1}}],[\"cyclicbarrier和countdownlatch的区别\",{\"0\":{\"906\":1}}],[\"cyclicbarrier\",{\"1\":{\"905\":2}}],[\"cyclicbarriertest\",{\"1\":{\"905\":1}}],[\"cyclic\",{\"1\":{\"905\":1}}],[\"cyc2018\",{\"1\":{\"299\":1,\"369\":1}}],[\"c语言中函数指针\",{\"1\":{\"808\":1}}],[\"c和java语言中如何定义api和spi\",{\"1\":{\"808\":1}}],[\"cgroup\",{\"1\":{\"694\":1}}],[\"cglib\",{\"1\":{\"558\":1}}],[\"centerright\",{\"1\":{\"1402\":3,\"1685\":3}}],[\"centertitle\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"center\",{\"1\":{\"1346\":8,\"1402\":6,\"1685\":6,\"1713\":1}}],[\"cert\",{\"1\":{\"638\":2,\"1706\":1}}],[\"certificate\",{\"1\":{\"638\":2}}],[\"ceovisitor\",{\"1\":{\"531\":2}}],[\"ceo\",{\"1\":{\"531\":4}}],[\"ci\",{\"1\":{\"631\":1}}],[\"ciphers\",{\"1\":{\"638\":2}}],[\"cipher`\",{\"1\":{\"615\":1}}],[\"cipher\",{\"1\":{\"614\":1,\"622\":1,\"630\":1}}],[\"c盘根目录下有三个目录windows\",{\"1\":{\"465\":1}}],[\"c盘根目录下有一个文件log\",{\"1\":{\"465\":1}}],[\"cs模式\",{\"0\":{\"1745\":1}}],[\"css\",{\"1\":{\"1702\":1}}],[\"cst\",{\"1\":{\"694\":1}}],[\"cs\",{\"1\":{\"299\":1,\"820\":2,\"1726\":2}}],[\"csdn\",{\"1\":{\"19\":1,\"37\":1,\"46\":1,\"52\":1,\"1320\":2,\"1346\":1,\"1420\":1,\"1453\":1,\"1465\":2,\"1482\":1,\"1503\":4,\"1574\":4,\"1577\":1,\"1580\":1,\"1905\":1,\"1908\":2,\"1970\":1}}],[\"cpacksourceconfig\",{\"1\":{\"1534\":1}}],[\"cpackconfig\",{\"1\":{\"1534\":1}}],[\"cpack命令\",{\"1\":{\"1534\":1}}],[\"cpack\",{\"1\":{\"1534\":8}}],[\"cpp文件\",{\"1\":{\"1805\":1}}],[\"cpp中onzygoteinit\",{\"1\":{\"1777\":1}}],[\"cpp\",{\"0\":{\"1860\":1},\"1\":{\"1534\":5,\"1718\":2,\"1724\":3,\"1746\":8,\"1757\":3,\"1763\":2,\"1781\":3,\"1800\":7,\"1807\":4,\"1832\":4,\"1870\":4}}],[\"cpinfo\",{\"1\":{\"1110\":11}}],[\"cpindex\",{\"1\":{\"1015\":1}}],[\"cpcount\",{\"1\":{\"1110\":3}}],[\"cpoption\",{\"1\":{\"985\":1,\"996\":1,\"1044\":1,\"1055\":3,\"1056\":1,\"1063\":6,\"1064\":1,\"1102\":1}}],[\"cpu指令集\",{\"1\":{\"1298\":1}}],[\"cpu操作互斥\",{\"1\":{\"851\":1}}],[\"cpu利用率高的几个线程在不停变化\",{\"1\":{\"833\":1}}],[\"cpu密集型\",{\"1\":{\"248\":1,\"828\":1}}],[\"cpu\",{\"1\":{\"248\":1,\"483\":17,\"820\":1,\"828\":1,\"1702\":1}}],[\"cp\",{\"1\":{\"237\":1,\"978\":4,\"979\":1,\"984\":14,\"985\":2,\"986\":1,\"993\":6,\"996\":2,\"997\":2,\"1010\":1,\"1015\":1,\"1017\":2,\"1024\":4,\"1030\":4,\"1036\":4,\"1037\":3,\"1044\":3,\"1055\":1,\"1061\":1,\"1063\":4,\"1064\":8,\"1076\":1,\"1079\":1,\"1102\":2,\"1103\":1,\"1110\":5}}],[\"critical\",{\"1\":{\"1787\":1}}],[\"crypto\",{\"1\":{\"1352\":2,\"1660\":2}}],[\"credential\",{\"1\":{\"1335\":3}}],[\"credential=$\",{\"1\":{\"1335\":1}}],[\"creator\",{\"1\":{\"1738\":1,\"1739\":1}}],[\"creator<mydata>\",{\"1\":{\"1738\":2}}],[\"creatoneworker\",{\"1\":{\"950\":2}}],[\"creation\",{\"1\":{\"359\":1}}],[\"createsystemcontext\",{\"1\":{\"1867\":2}}],[\"createstate\",{\"1\":{\"1383\":2,\"1666\":2}}],[\"createstacktraceelements\",{\"1\":{\"1036\":1}}],[\"createfromparcel\",{\"1\":{\"1738\":1,\"1739\":1}}],[\"createfile\",{\"1\":{\"1552\":1}}],[\"createhttp\",{\"1\":{\"1713\":1}}],[\"createbinding\",{\"1\":{\"1598\":3}}],[\"createbrake\",{\"1\":{\"428\":3}}],[\"createmocker\",{\"1\":{\"1587\":1,\"1595\":1}}],[\"createmethodfromtext\",{\"1\":{\"1552\":1}}],[\"createmap\",{\"1\":{\"381\":3}}],[\"createnativethread\",{\"1\":{\"1527\":1}}],[\"createnewbuilder\",{\"1\":{\"1332\":2}}],[\"createchooser\",{\"1\":{\"1417\":1}}],[\"createcar\",{\"1\":{\"435\":4}}],[\"createargsarray\",{\"1\":{\"1016\":2,\"1044\":2}}],[\"createtire\",{\"1\":{\"428\":3}}],[\"createtopheap\",{\"1\":{\"283\":2}}],[\"createengine\",{\"1\":{\"428\":3}}],[\"createentry\",{\"1\":{\"350\":2}}],[\"createproduct\",{\"1\":{\"415\":4,\"416\":3}}],[\"create\",{\"1\":{\"259\":6,\"422\":2,\"614\":6,\"615\":1,\"622\":6,\"630\":6,\"1320\":3,\"1332\":1,\"1364\":1,\"1588\":1,\"1589\":2,\"1592\":3,\"1626\":2,\"1709\":1,\"1736\":1,\"1756\":2,\"1772\":3,\"1829\":1}}],[\"created\",{\"1\":{\"144\":1,\"145\":1,\"1383\":1,\"1666\":1}}],[\"crawlermanager\",{\"1\":{\"1320\":2}}],[\"crashes\",{\"1\":{\"1583\":2}}],[\"crash\",{\"1\":{\"1292\":1}}],[\"crashlytics\",{\"1\":{\"1292\":1}}],[\"cr\",{\"1\":{\"1081\":2}}],[\"cross\",{\"1\":{\"649\":1,\"652\":1}}],[\"crlf\",{\"0\":{\"91\":1}}],[\"cjs\",{\"0\":{\"85\":1},\"1\":{\"85\":1}}],[\"cnpm\",{\"1\":{\"1413\":2}}],[\"cnf\",{\"1\":{\"627\":2,\"631\":2}}],[\"cnblogs\",{\"1\":{\"121\":2,\"1380\":2,\"1386\":1,\"1399\":1,\"1669\":1,\"1682\":1,\"1905\":1}}],[\"cn\",{\"1\":{\"79\":4,\"1399\":1,\"1413\":1,\"1503\":1,\"1682\":1,\"1701\":1,\"1706\":1,\"1959\":1}}],[\"cddevice\",{\"1\":{\"483\":15}}],[\"cd设备\",{\"1\":{\"483\":1}}],[\"cdb36b91b205\",{\"1\":{\"100\":1}}],[\"cd\",{\"1\":{\"79\":6,\"483\":6,\"619\":1,\"1070\":1,\"1944\":1,\"1945\":1,\"1952\":2,\"1960\":1,\"1961\":1}}],[\"cui130\",{\"1\":{\"1465\":1}}],[\"cupertinopageroute<void>\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"cupertino\",{\"1\":{\"1383\":2,\"1666\":2}}],[\"curves\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"curve\",{\"1\":{\"1383\":1,\"1402\":4,\"1666\":1,\"1685\":4,\"1713\":1}}],[\"cur\",{\"1\":{\"1239\":3}}],[\"currentclass\",{\"1\":{\"993\":2}}],[\"currentframe\",{\"1\":{\"993\":4,\"994\":1,\"1036\":1}}],[\"current\",{\"1\":{\"880\":6,\"882\":3,\"883\":3,\"886\":9,\"900\":4,\"1527\":1,\"1534\":9,\"1574\":1}}],[\"currenttimemills\",{\"1\":{\"949\":2,\"950\":2,\"958\":2}}],[\"currenttimemillis\",{\"1\":{\"870\":4,\"1374\":1}}],[\"currentthread\",{\"1\":{\"154\":1,\"381\":4,\"867\":1,\"869\":1,\"876\":1,\"879\":1,\"882\":2,\"883\":1,\"886\":2,\"896\":1,\"945\":1,\"950\":1,\"958\":2,\"1527\":1,\"1866\":1}}],[\"currindex\",{\"1\":{\"283\":6}}],[\"curr\",{\"1\":{\"280\":3,\"281\":4}}],[\"curl\",{\"1\":{\"16\":1,\"88\":1,\"702\":1,\"1323\":1,\"1335\":2,\"1459\":1}}],[\"customer04\",{\"1\":{\"1518\":2}}],[\"customer03\",{\"1\":{\"1518\":3}}],[\"customer02\",{\"1\":{\"1518\":2}}],[\"customer01\",{\"1\":{\"1518\":3}}],[\"customer\",{\"1\":{\"1518\":13}}],[\"customclipper<path>\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"customclipper<rrect>\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"customclipper<rect>\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"customdialog\",{\"1\":{\"1358\":2,\"1707\":1,\"1708\":1,\"1711\":1,\"1713\":1}}],[\"customheader\",{\"1\":{\"651\":2}}],[\"custom\",{\"1\":{\"67\":1}}],[\"chinese\",{\"1\":{\"1515\":1}}],[\"china\",{\"1\":{\"1417\":1,\"1518\":1}}],[\"childpipefd\",{\"1\":{\"1863\":1}}],[\"childs\",{\"1\":{\"1604\":3}}],[\"child\",{\"1\":{\"1383\":5,\"1392\":8,\"1402\":31,\"1518\":1,\"1666\":5,\"1675\":8,\"1685\":31}}],[\"children\",{\"1\":{\"666\":1,\"668\":5}}],[\"chooseimage\",{\"1\":{\"1417\":6}}],[\"chooseabove\",{\"1\":{\"1417\":2}}],[\"choosebelow\",{\"1\":{\"1417\":2}}],[\"chooser\",{\"1\":{\"1417\":6}}],[\"chuckinterceptor\",{\"1\":{\"1329\":1}}],[\"chuck\",{\"1\":{\"1329\":3}}],[\"ch10\",{\"1\":{\"1037\":3}}],[\"ch05\",{\"1\":{\"1103\":1}}],[\"ch09\",{\"1\":{\"1024\":4,\"1030\":2}}],[\"ch01\",{\"1\":{\"1017\":1,\"1044\":1}}],[\"ch08\",{\"1\":{\"1010\":1,\"1017\":1}}],[\"ch07\",{\"1\":{\"997\":2}}],[\"ch06\",{\"1\":{\"986\":1}}],[\"chen04\",{\"1\":{\"1518\":1}}],[\"chen03\",{\"1\":{\"1518\":3}}],[\"chen02\",{\"1\":{\"1518\":1}}],[\"chen01\",{\"1\":{\"1518\":1}}],[\"chenlogin\",{\"1\":{\"1380\":1}}],[\"chen\",{\"1\":{\"958\":1,\"1518\":4,\"1905\":1}}],[\"chentong01\",{\"1\":{\"1942\":1,\"1943\":1,\"1952\":1}}],[\"chentong\",{\"1\":{\"58\":1,\"94\":4,\"103\":8,\"404\":1,\"405\":3,\"711\":1,\"917\":1,\"1030\":1,\"1311\":1,\"1312\":1,\"1313\":1,\"1323\":1,\"1332\":1,\"1335\":1,\"1364\":1,\"1371\":1,\"1374\":1,\"1383\":3,\"1402\":2,\"1459\":1,\"1518\":2,\"1534\":3,\"1555\":1,\"1598\":1,\"1601\":2,\"1604\":1,\"1610\":1,\"1613\":1,\"1666\":3,\"1685\":2,\"1942\":1,\"1952\":1,\"1963\":1}}],[\"chentong$\",{\"1\":{\"58\":1,\"94\":1,\"1534\":3}}],[\"checkout\",{\"1\":{\"1947\":2,\"1949\":2,\"1960\":1}}],[\"checkparcel\",{\"1\":{\"1756\":1}}],[\"checkpoststickyeventtosubscription\",{\"1\":{\"1546\":1}}],[\"checkadd\",{\"1\":{\"1546\":1}}],[\"checkalipayinstalled\",{\"1\":{\"1358\":2}}],[\"checkfunctionexists\",{\"1\":{\"1534\":1}}],[\"checkresult\",{\"1\":{\"1364\":2,\"1416\":1}}],[\"checked异常\",{\"1\":{\"1035\":1}}],[\"checkindex\",{\"1\":{\"1009\":2}}],[\"checkinterruptwhilewaiting\",{\"1\":{\"896\":1}}],[\"checknotnil\",{\"1\":{\"1009\":2}}],[\"checknotnull\",{\"1\":{\"895\":1}}],[\"checkcast\",{\"1\":{\"983\":2,\"984\":1}}],[\"checkservice\",{\"1\":{\"1799\":2}}],[\"checks\",{\"1\":{\"615\":2}}],[\"checkhardware\",{\"1\":{\"501\":3}}],[\"check\",{\"0\":{\"864\":1},\"1\":{\"405\":1,\"895\":1,\"984\":1,\"1534\":5,\"1604\":1,\"1727\":1,\"1799\":1}}],[\"chainstyle=\",{\"1\":{\"1346\":1}}],[\"chain\",{\"1\":{\"1332\":4}}],[\"charels\",{\"0\":{\"1380\":1},\"1\":{\"1380\":1}}],[\"charles\",{\"0\":{\"1341\":1},\"1\":{\"1341\":1}}],[\"charsequence\",{\"1\":{\"1030\":1,\"1349\":2,\"1364\":2}}],[\"charset=utf\",{\"1\":{\"1332\":1}}],[\"charset=utf8\",{\"1\":{\"615\":1}}],[\"charset\",{\"1\":{\"651\":1}}],[\"chars\",{\"1\":{\"1015\":2}}],[\"char数组\",{\"1\":{\"1015\":2}}],[\"character\",{\"1\":{\"615\":32,\"631\":2}}],[\"charat\",{\"1\":{\"525\":1}}],[\"char\",{\"1\":{\"615\":3,\"870\":1,\"1009\":2,\"1182\":1,\"1521\":2,\"1527\":1,\"1530\":3,\"1534\":1,\"1717\":1,\"1788\":1,\"1798\":1,\"1857\":1,\"1860\":1,\"1861\":1}}],[\"changer\",{\"1\":{\"958\":4}}],[\"changed`\",{\"1\":{\"615\":1}}],[\"changed\",{\"1\":{\"614\":1,\"622\":1,\"630\":1}}],[\"change\",{\"1\":{\"483\":5,\"1383\":1,\"1555\":2,\"1666\":1}}],[\"changes\",{\"1\":{\"359\":1}}],[\"chaoliu\",{\"1\":{\"61\":1,\"1326\":2,\"1491\":1,\"1595\":1,\"1632\":1,\"1905\":1}}],[\"chmod\",{\"1\":{\"16\":3}}],[\"categries\",{\"1\":{\"1604\":1}}],[\"categories\",{\"1\":{\"1604\":3}}],[\"category\",{\"1\":{\"1326\":3,\"1417\":2}}],[\"cat\",{\"1\":{\"834\":4,\"1943\":1}}],[\"catalog\",{\"1\":{\"657\":4}}],[\"catch异常\",{\"1\":{\"1101\":1}}],[\"catchclass\",{\"1\":{\"1036\":3}}],[\"catchtype\",{\"1\":{\"1036\":6}}],[\"catchone\",{\"1\":{\"1036\":1}}],[\"catcherr\",{\"1\":{\"994\":1,\"1101\":2}}],[\"catch\",{\"1\":{\"154\":2,\"197\":1,\"416\":3,\"823\":1,\"867\":2,\"868\":1,\"870\":7,\"884\":1,\"897\":1,\"905\":2,\"907\":1,\"908\":2,\"917\":2,\"923\":1,\"1036\":3,\"1175\":1,\"1326\":2,\"1332\":1,\"1416\":1,\"1521\":1,\"1546\":1,\"1552\":1,\"1592\":3,\"1598\":3,\"1601\":2,\"1604\":1,\"1736\":2,\"1846\":1,\"1862\":1,\"1863\":1,\"1866\":1,\"1867\":1}}],[\"causes\",{\"1\":{\"631\":1}}],[\"caused\",{\"1\":{\"52\":1}}],[\"caliburn\",{\"1\":{\"1648\":1}}],[\"calendar\",{\"1\":{\"1417\":1}}],[\"calargslotcount\",{\"1\":{\"1022\":1,\"1109\":1}}],[\"calcargslotcount\",{\"1\":{\"1022\":1}}],[\"calcstaticfieldslotids\",{\"1\":{\"979\":1}}],[\"calcinstancefieldslotids\",{\"1\":{\"979\":1}}],[\"calculator\",{\"1\":{\"525\":6}}],[\"callingpackage\",{\"1\":{\"1756\":2}}],[\"callinstancemethod\",{\"1\":{\"1527\":1}}],[\"call\",{\"1\":{\"1732\":1,\"1739\":2,\"1776\":1}}],[\"call<long>\",{\"1\":{\"1625\":1}}],[\"call<integer>\",{\"1\":{\"1625\":1}}],[\"call<boolean>\",{\"1\":{\"1625\":1}}],[\"call<string>\",{\"1\":{\"1625\":1}}],[\"callcachemethod\",{\"1\":{\"1527\":1}}],[\"callsupermethod\",{\"1\":{\"1527\":1}}],[\"callstaticmethod\",{\"1\":{\"1527\":1}}],[\"callbackresult\",{\"1\":{\"1828\":2}}],[\"callback\",{\"1\":{\"1383\":1,\"1416\":5,\"1666\":1,\"1711\":1,\"1713\":1,\"1828\":5,\"1831\":1,\"1840\":6,\"1842\":3,\"1843\":2,\"1850\":1,\"1962\":1}}],[\"callable接口\",{\"1\":{\"926\":1}}],[\"caller\",{\"1\":{\"1756\":3,\"1862\":2,\"1866\":2}}],[\"callerrunspolicy\",{\"1\":{\"246\":1,\"914\":1}}],[\"called\",{\"0\":{\"82\":1}}],[\"cameraservice\",{\"1\":{\"1798\":1}}],[\"cameraimpl\",{\"1\":{\"453\":1}}],[\"camera\",{\"1\":{\"453\":2,\"1416\":1,\"1417\":1}}],[\"cardview\",{\"1\":{\"1567\":1}}],[\"caret\",{\"1\":{\"1555\":2}}],[\"caretmodel\",{\"1\":{\"1555\":1}}],[\"caretaker\",{\"1\":{\"495\":1}}],[\"carol\",{\"1\":{\"1521\":1}}],[\"carguo\",{\"1\":{\"1399\":1,\"1413\":1,\"1682\":1}}],[\"car类与ship类都实现了vehicle接口\",{\"1\":{\"738\":1}}],[\"cart\",{\"1\":{\"657\":4}}],[\"cartype\",{\"1\":{\"435\":5}}],[\"carfactory\",{\"1\":{\"435\":4}}],[\"car\",{\"1\":{\"435\":9}}],[\"cas操作\",{\"1\":{\"1247\":1,\"1248\":1}}],[\"cas加上重试\",{\"1\":{\"1116\":1}}],[\"cast<jlong>\",{\"1\":{\"1829\":1}}],[\"cast<iservicemanager\",{\"1\":{\"1806\":1}}],[\"cast<iservicemanager>\",{\"1\":{\"1805\":1}}],[\"cast<imediaplayerservice>\",{\"1\":{\"1799\":1}}],[\"cast<const\",{\"1\":{\"1798\":2}}],[\"cast<bbinder\",{\"1\":{\"1717\":1}}],[\"cast\",{\"1\":{\"984\":1,\"1726\":1,\"1805\":1}}],[\"castail\",{\"1\":{\"895\":1}}],[\"casitem\",{\"1\":{\"895\":1}}],[\"casnext\",{\"1\":{\"895\":1}}],[\"cas实现原子操作的三大问题\",{\"0\":{\"853\":1}}],[\"cas将对象头中的mark\",{\"1\":{\"847\":1}}],[\"cas算法\",{\"1\":{\"821\":1}}],[\"case\",{\"1\":{\"435\":3,\"513\":1,\"525\":2,\"711\":1,\"984\":16,\"1009\":10,\"1015\":2,\"1022\":5,\"1036\":1,\"1078\":2,\"1110\":9,\"1197\":1,\"1717\":1,\"1727\":1,\"1732\":2,\"1736\":3,\"1739\":3,\"1770\":26,\"1778\":1,\"1789\":11,\"1798\":5}}],[\"cas\",{\"1\":{\"360\":2,\"850\":1,\"852\":1,\"895\":1}}],[\"capabilities\",{\"1\":{\"1865\":2}}],[\"capabilities=\",{\"1\":{\"1865\":1}}],[\"capacityincrement\",{\"1\":{\"338\":9}}],[\"capacity\",{\"1\":{\"331\":1,\"332\":1,\"334\":3,\"338\":3,\"351\":2,\"352\":8,\"353\":6,\"354\":2}}],[\"capsule\",{\"1\":{\"1708\":1}}],[\"captures\",{\"1\":{\"1952\":1}}],[\"capture\",{\"1\":{\"1416\":2,\"1417\":3}}],[\"cap\",{\"1\":{\"354\":2}}],[\"canthrowremoteexception\",{\"1\":{\"1762\":1}}],[\"canbe27\",{\"1\":{\"1521\":5}}],[\"cangwang\",{\"1\":{\"1503\":1}}],[\"cancompute\",{\"1\":{\"897\":2}}],[\"cancelall\",{\"1\":{\"1713\":1}}],[\"cancelacquire\",{\"1\":{\"879\":1,\"880\":1}}],[\"cancelled\",{\"1\":{\"878\":1,\"896\":1}}],[\"cancel\",{\"1\":{\"867\":1,\"869\":1,\"945\":2,\"1713\":1}}],[\"can\",{\"0\":{\"40\":1,\"70\":1},\"1\":{\"40\":1,\"70\":1,\"631\":4,\"1063\":1,\"1604\":1,\"1790\":2,\"1867\":1}}],[\"cannot\",{\"0\":{\"28\":1},\"1\":{\"28\":1,\"1850\":1}}],[\"cachedholdcounter\",{\"1\":{\"886\":2}}],[\"cache\",{\"1\":{\"12\":1,\"103\":1,\"365\":7,\"631\":1,\"651\":2,\"731\":1,\"820\":1,\"1203\":2,\"1218\":1,\"1416\":1,\"1546\":1}}],[\"c\",{\"1\":{\"16\":1,\"359\":3,\"365\":1,\"465\":1,\"750\":1,\"822\":1,\"834\":3,\"882\":6,\"883\":3,\"886\":11,\"984\":10,\"1009\":2,\"1015\":9,\"1109\":6,\"1110\":6,\"1203\":13,\"1518\":4,\"1521\":4,\"1530\":5,\"1534\":11,\"1702\":17,\"1708\":8,\"1709\":20,\"1712\":16,\"1713\":26,\"1745\":1,\"1746\":3,\"1781\":1,\"1791\":4,\"1921\":1,\"1943\":1}}],[\"column>row>button\",{\"1\":{\"1709\":1}}],[\"column\",{\"1\":{\"1707\":2,\"1708\":1,\"1709\":1,\"1711\":1,\"1713\":1}}],[\"columns\",{\"1\":{\"1416\":1}}],[\"colors\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"colorprimary\",{\"1\":{\"1346\":1}}],[\"coloraccent\",{\"1\":{\"1346\":1}}],[\"color\",{\"1\":{\"1292\":3,\"1305\":2,\"1307\":2,\"1320\":1,\"1346\":2,\"1402\":4,\"1518\":3,\"1540\":3,\"1685\":4,\"1709\":1}}],[\"collation\",{\"1\":{\"631\":1}}],[\"collate=utf8\",{\"1\":{\"615\":1}}],[\"collate\",{\"1\":{\"615\":4}}],[\"colleague\",{\"1\":{\"483\":15}}],[\"collectionutils\",{\"1\":{\"1604\":2}}],[\"collection<thread>\",{\"1\":{\"884\":2}}],[\"collection<t>\",{\"1\":{\"543\":1}}],[\"collection<employee>\",{\"1\":{\"543\":1}}],[\"collections\",{\"1\":{\"340\":2,\"884\":1,\"917\":1,\"950\":1}}],[\"collection\",{\"0\":{\"321\":1},\"1\":{\"319\":1,\"320\":2,\"327\":2}}],[\"collect\",{\"1\":{\"154\":1}}],[\"collected\",{\"1\":{\"144\":1,\"145\":1}}],[\"collisions\",{\"1\":{\"351\":1}}],[\"course\",{\"1\":{\"1701\":1}}],[\"could\",{\"1\":{\"1064\":1,\"1827\":1,\"1922\":1}}],[\"counter\",{\"1\":{\"1828\":2}}],[\"counttypes\",{\"1\":{\"1546\":2}}],[\"counttask\",{\"1\":{\"897\":8}}],[\"count=9\",{\"1\":{\"923\":1}}],[\"count=4\",{\"1\":{\"923\":1}}],[\"count=3\",{\"1\":{\"923\":1}}],[\"count=2\",{\"1\":{\"923\":1}}],[\"count=1\",{\"1\":{\"923\":1}}],[\"count=0\",{\"1\":{\"923\":1}}],[\"count=\",{\"1\":{\"923\":1}}],[\"countdown\",{\"1\":{\"904\":2,\"923\":2}}],[\"countdownlatch和cyclicbarrier区别\",{\"0\":{\"923\":1}}],[\"countdownlatch的计数器只能使用一次\",{\"1\":{\"906\":1}}],[\"countdownlatchtest\",{\"1\":{\"904\":1}}],[\"countdownlatch\",{\"0\":{\"904\":1},\"1\":{\"904\":2,\"923\":5}}],[\"count++\",{\"1\":{\"886\":1,\"917\":1,\"935\":1}}],[\"count\",{\"1\":{\"237\":10,\"334\":1,\"358\":1,\"359\":5,\"880\":4,\"882\":1,\"883\":1,\"886\":4,\"907\":3,\"917\":3,\"923\":3,\"935\":1,\"993\":1,\"1009\":6,\"1076\":10,\"1349\":2,\"1364\":2,\"1521\":2}}],[\"corsregistry\",{\"1\":{\"650\":2}}],[\"corsfilter\",{\"1\":{\"650\":4}}],[\"corsconfiguration\",{\"1\":{\"650\":3}}],[\"cors\",{\"1\":{\"649\":2,\"650\":2}}],[\"core代码写得不够洁癖\",{\"1\":{\"1480\":1}}],[\"corepoolsize\",{\"1\":{\"246\":2,\"247\":2,\"828\":2,\"914\":1}}],[\"core\",{\"1\":{\"79\":9,\"91\":1,\"94\":2,\"313\":1,\"1718\":2,\"1746\":4,\"1757\":4,\"1763\":2,\"1787\":1,\"1832\":6,\"1852\":1,\"1870\":9,\"1937\":1,\"1938\":1,\"1952\":1,\"1970\":1}}],[\"coffee\",{\"1\":{\"459\":4}}],[\"coffeeadditives\",{\"1\":{\"459\":9}}],[\"cookie\",{\"1\":{\"103\":1,\"649\":1,\"1717\":1,\"1789\":1}}],[\"coordinatorlayout1\",{\"1\":{\"55\":1}}],[\"coordinatorlayout\",{\"0\":{\"55\":1},\"1\":{\"1329\":1}}],[\"copyright\",{\"1\":{\"1648\":1}}],[\"copyapiforcommlib\",{\"1\":{\"1488\":1}}],[\"copyattributes\",{\"1\":{\"1022\":1,\"1036\":1,\"1109\":2}}],[\"copymemberrefinfo\",{\"1\":{\"1110\":1}}],[\"copymemberinfo\",{\"1\":{\"1022\":1,\"1109\":3}}],[\"copyonwirtearraylist\",{\"1\":{\"929\":1}}],[\"copyonwritearraylist<subscription>\",{\"1\":{\"1546\":2}}],[\"copyonwritearraylist<>\",{\"1\":{\"340\":1,\"1546\":1}}],[\"copyonwritearraylist\",{\"0\":{\"341\":1},\"1\":{\"319\":1,\"340\":1,\"343\":3}}],[\"copyof\",{\"1\":{\"332\":2,\"338\":1,\"342\":1}}],[\"copy\",{\"1\":{\"94\":3,\"631\":1,\"929\":1,\"1488\":1,\"1521\":1,\"1648\":1,\"1770\":1}}],[\"conllection<t>\",{\"1\":{\"1521\":2}}],[\"convertbitmap\",{\"1\":{\"1527\":1}}],[\"convert\",{\"1\":{\"1352\":5,\"1592\":1,\"1660\":5}}],[\"conan\",{\"1\":{\"900\":5}}],[\"cond\",{\"1\":{\"896\":2}}],[\"conditions\",{\"1\":{\"1648\":1}}],[\"condition实现分析\",{\"0\":{\"890\":1}}],[\"conditionusecase\",{\"1\":{\"889\":1}}],[\"condition接口\",{\"0\":{\"889\":1}}],[\"conditionobject\",{\"1\":{\"876\":1,\"880\":1}}],[\"condition\",{\"1\":{\"876\":3,\"878\":1,\"880\":2,\"889\":4,\"896\":1}}],[\"conf\",{\"1\":{\"627\":1,\"631\":1,\"638\":2,\"707\":1}}],[\"configure\",{\"1\":{\"1534\":1}}],[\"configuring\",{\"1\":{\"1534\":1}}],[\"configuration\",{\"1\":{\"73\":1,\"638\":1,\"650\":2,\"1295\":2,\"1604\":1}}],[\"configurations\",{\"1\":{\"52\":1,\"55\":1,\"1329\":1}}],[\"config>\",{\"1\":{\"1405\":2}}],[\"config文件\",{\"1\":{\"1405\":1}}],[\"config\",{\"0\":{\"1923\":1},\"1\":{\"91\":1,\"94\":1,\"631\":1,\"650\":11,\"657\":3,\"668\":3,\"1405\":3,\"1413\":4,\"1534\":4,\"1540\":1,\"1702\":2,\"1708\":1,\"1709\":1,\"1712\":1,\"1857\":1,\"1923\":1,\"1924\":2,\"1937\":4,\"1938\":1,\"1942\":2,\"1960\":1,\"1970\":4}}],[\"concretebuilder\",{\"1\":{\"422\":3}}],[\"concretefactory\",{\"1\":{\"416\":2}}],[\"concurrency\",{\"1\":{\"358\":1}}],[\"concurrent方法\",{\"1\":{\"935\":1}}],[\"concurrentlinkedqueue1\",{\"1\":{\"895\":1}}],[\"concurrentlinkedqueue\",{\"0\":{\"895\":1},\"1\":{\"958\":1}}],[\"concurrentcache<k\",{\"1\":{\"368\":1}}],[\"concurrentcache\",{\"0\":{\"368\":1},\"1\":{\"368\":3}}],[\"concurrent\",{\"1\":{\"340\":1,\"650\":1,\"876\":4}}],[\"concurrentmodificationexception\",{\"1\":{\"334\":1,\"335\":1}}],[\"concurrenthashmap总结\",{\"1\":{\"935\":1}}],[\"concurrenthashmap分段锁存储key\",{\"1\":{\"935\":1}}],[\"concurrenthashmap是由segment数组结构和hashentry数组结构组成\",{\"1\":{\"894\":1}}],[\"concurrenthashmap的锁分段技术可有效提升并发访问率\",{\"1\":{\"894\":1}}],[\"concurrenthashmap<>\",{\"1\":{\"368\":1,\"441\":1}}],[\"concurrenthashmap\",{\"0\":{\"357\":1,\"894\":1},\"1\":{\"319\":1,\"325\":3,\"358\":2,\"359\":1,\"368\":1,\"894\":2,\"935\":1}}],[\"consumed\",{\"1\":{\"1770\":1,\"1789\":3}}],[\"consumer\",{\"1\":{\"1701\":1,\"1706\":1}}],[\"consumer<boolean>\",{\"1\":{\"1364\":3}}],[\"consumer<string>\",{\"1\":{\"1364\":1}}],[\"consumewait\",{\"1\":{\"870\":1}}],[\"consume\",{\"1\":{\"870\":2,\"889\":1}}],[\"console\",{\"1\":{\"667\":4}}],[\"constrainedbox\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"constraints\",{\"1\":{\"1402\":6,\"1685\":6}}],[\"constraintvertical\",{\"1\":{\"1346\":3}}],[\"constrainthorizontal\",{\"1\":{\"1346\":7}}],[\"constraintdimensionratio=\",{\"1\":{\"1346\":4}}],[\"constraintbottom\",{\"1\":{\"1346\":5}}],[\"constraintright\",{\"1\":{\"1346\":10}}],[\"constrainttop\",{\"1\":{\"1346\":6}}],[\"constraintleft\",{\"1\":{\"1346\":13}}],[\"constraintlayout完全解析\",{\"1\":{\"1346\":1}}],[\"constraintlayoutdemo\",{\"1\":{\"1346\":1}}],[\"constraintlayout中0代表\",{\"1\":{\"1346\":1}}],[\"constraintlayout>\",{\"1\":{\"1346\":6}}],[\"constraintlayout\",{\"1\":{\"1346\":6}}],[\"constraintlayout实战\",{\"0\":{\"1344\":1}}],[\"constraint\",{\"1\":{\"1346\":13}}],[\"constructorbuilder\",{\"1\":{\"1601\":5,\"1604\":4}}],[\"constructor<\",{\"1\":{\"1598\":5}}],[\"constructor\",{\"1\":{\"1361\":1,\"1518\":3,\"1521\":1,\"1598\":4,\"1604\":2}}],[\"constructproduct\",{\"1\":{\"422\":2}}],[\"consts\",{\"1\":{\"1110\":14,\"1604\":6}}],[\"const\",{\"1\":{\"667\":3,\"668\":1,\"1023\":1,\"1030\":1,\"1036\":1,\"1064\":1,\"1717\":2,\"1727\":4,\"1756\":2,\"1772\":1,\"1778\":1,\"1790\":2,\"1798\":2,\"1799\":4,\"1805\":1,\"1806\":4,\"1826\":2,\"1828\":1,\"1829\":1,\"1831\":4,\"1860\":1,\"1861\":2}}],[\"constantmemberrefinfo\",{\"1\":{\"1110\":1}}],[\"constantmethodrefinfo\",{\"1\":{\"1110\":2}}],[\"constantfieldrefinfo\",{\"1\":{\"1110\":2}}],[\"constantfloatinfo\",{\"1\":{\"1110\":2}}],[\"constantclassinfo\",{\"1\":{\"1110\":4}}],[\"constantdoubleinfo\",{\"1\":{\"1110\":2}}],[\"constantlonginfo\",{\"1\":{\"1110\":2}}],[\"constantinterfacemethodrefinfo\",{\"1\":{\"1110\":2}}],[\"constantintegerinfo\",{\"1\":{\"1110\":2}}],[\"constantinfo\",{\"1\":{\"1110\":1}}],[\"constantvalueindex\",{\"1\":{\"1109\":1}}],[\"constantpool\",{\"1\":{\"984\":7,\"993\":3,\"1036\":3,\"1076\":2,\"1079\":1,\"1081\":4,\"1109\":4,\"1110\":7}}],[\"constant\",{\"1\":{\"237\":3,\"351\":1,\"1076\":3,\"1110\":6,\"1540\":1}}],[\"constantstringinfo\",{\"1\":{\"1110\":2}}],[\"constants\",{\"1\":{\"12\":1,\"731\":1}}],[\"conscious\",{\"1\":{\"332\":2,\"338\":1}}],[\"contansutils\",{\"1\":{\"1332\":2}}],[\"container\",{\"1\":{\"1392\":1,\"1402\":2,\"1675\":1,\"1685\":2}}],[\"contains\",{\"1\":{\"1064\":1,\"1332\":1,\"1349\":2,\"1604\":1}}],[\"containskey\",{\"1\":{\"405\":1,\"441\":1,\"1604\":1,\"1613\":1}}],[\"containsvalue\",{\"1\":{\"359\":1}}],[\"contain\",{\"1\":{\"73\":1,\"1402\":1,\"1685\":1}}],[\"controls\",{\"1\":{\"1711\":1}}],[\"control\",{\"1\":{\"651\":7,\"652\":3,\"805\":1}}],[\"continuous\",{\"1\":{\"359\":2}}],[\"continue取代\",{\"1\":{\"1518\":1}}],[\"continue\",{\"1\":{\"73\":1,\"285\":1,\"895\":1,\"1798\":1,\"1846\":1}}],[\"contextimpl\",{\"1\":{\"1870\":1}}],[\"contextweakreference\",{\"1\":{\"1851\":3}}],[\"contextwrapper\",{\"1\":{\"471\":1}}],[\"context使用weakreference\",{\"1\":{\"1851\":1}}],[\"context1\",{\"1\":{\"1329\":1}}],[\"context\",{\"1\":{\"268\":2,\"471\":1,\"650\":2,\"667\":1,\"1320\":5,\"1326\":3,\"1358\":7,\"1383\":9,\"1392\":1,\"1402\":1,\"1416\":5,\"1666\":9,\"1675\":1,\"1685\":1,\"1736\":1,\"1786\":1,\"1788\":3,\"1851\":3}}],[\"context原理\",{\"0\":{\"135\":1}}],[\"contenttype存在空\",{\"1\":{\"1332\":1}}],[\"contenttype\",{\"1\":{\"1332\":5}}],[\"content=$1\",{\"1\":{\"1323\":2,\"1335\":1,\"1459\":2}}],[\"content\",{\"1\":{\"124\":1,\"651\":4,\"652\":2,\"820\":1,\"926\":3,\"1312\":7,\"1323\":11,\"1335\":2,\"1338\":1,\"1346\":8,\"1352\":2,\"1417\":2,\"1435\":1,\"1459\":11,\"1462\":1,\"1515\":1,\"1552\":5,\"1660\":2,\"1966\":2}}],[\"contents\",{\"1\":{\"67\":5,\"1030\":10,\"1534\":4}}],[\"connections`\",{\"1\":{\"615\":2}}],[\"connections\",{\"1\":{\"614\":2,\"622\":2,\"630\":2}}],[\"connection\",{\"0\":{\"40\":1},\"1\":{\"40\":1,\"1922\":1}}],[\"connect\",{\"0\":{\"40\":2},\"1\":{\"40\":2,\"631\":2,\"870\":1,\"1702\":7,\"1707\":1}}],[\"codes\",{\"1\":{\"1417\":1,\"1534\":1}}],[\"codename\",{\"1\":{\"1298\":3}}],[\"code属性\",{\"1\":{\"1101\":1}}],[\"codeattribute\",{\"1\":{\"1036\":2,\"1101\":1}}],[\"codeattr\",{\"1\":{\"1036\":7,\"1101\":4}}],[\"code=exited\",{\"1\":{\"694\":2}}],[\"codetop\",{\"0\":{\"292\":1}}],[\"code注册框\",{\"1\":{\"109\":1}}],[\"code注册框中\",{\"1\":{\"25\":1}}],[\"code\",{\"0\":{\"31\":1,\"49\":1},\"1\":{\"31\":1,\"94\":1,\"332\":2,\"338\":1,\"994\":1,\"1022\":6,\"1036\":2,\"1101\":1,\"1109\":1,\"1417\":5,\"1521\":1,\"1717\":1,\"1727\":3,\"1732\":3,\"1737\":2,\"1739\":3,\"1756\":9,\"1798\":1}}],[\"code按钮\",{\"1\":{\"25\":1}}],[\"comit\",{\"1\":{\"1945\":1}}],[\"com>\",{\"1\":{\"1928\":1}}],[\"combinelatest\",{\"1\":{\"1364\":1}}],[\"communication\",{\"1\":{\"1712\":1}}],[\"community\",{\"1\":{\"694\":3,\"1555\":1}}],[\"comment\",{\"1\":{\"631\":1}}],[\"comment=\",{\"1\":{\"615\":1}}],[\"commit\",{\"1\":{\"615\":1,\"631\":1,\"1937\":1,\"1944\":2,\"1945\":1,\"1955\":2,\"1961\":2,\"1970\":1}}],[\"command为bc\",{\"1\":{\"1778\":2}}],[\"command\",{\"1\":{\"58\":1,\"94\":2,\"711\":1,\"1768\":1,\"1857\":1,\"1963\":1}}],[\"commoninit\",{\"1\":{\"1866\":2}}],[\"commonutil\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"common\",{\"1\":{\"12\":3,\"731\":3,\"1402\":2,\"1509\":1,\"1685\":2}}],[\"common模块tools化\",{\"1\":{\"12\":1,\"731\":1}}],[\"comp\",{\"1\":{\"1702\":1}}],[\"compprop\",{\"1\":{\"1702\":1}}],[\"comppath\",{\"1\":{\"667\":4}}],[\"complete事务\",{\"1\":{\"1770\":1}}],[\"complete\",{\"1\":{\"1755\":2,\"1770\":2,\"1789\":1,\"1798\":1}}],[\"completed\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"completedtaskcount\",{\"1\":{\"916\":1}}],[\"compliance\",{\"1\":{\"1648\":1}}],[\"compressfilepattern\",{\"1\":{\"1292\":1}}],[\"computeargblocksize\",{\"1\":{\"1860\":1}}],[\"computed\",{\"1\":{\"1518\":1}}],[\"compute\",{\"1\":{\"897\":1}}],[\"computer\",{\"1\":{\"501\":2}}],[\"compositeentry\",{\"1\":{\"1064\":1}}],[\"composition\",{\"1\":{\"735\":2}}],[\"componentname\",{\"1\":{\"1358\":3,\"1736\":2,\"1756\":3}}],[\"componenttypedescriptor\",{\"1\":{\"1009\":2}}],[\"component\",{\"1\":{\"11\":1,\"666\":2,\"667\":2,\"668\":23,\"730\":1,\"1476\":1,\"1488\":1,\"1491\":1,\"1707\":1,\"1708\":1}}],[\"compcontext\",{\"1\":{\"667\":3}}],[\"companion\",{\"1\":{\"1521\":1}}],[\"companyli\",{\"1\":{\"543\":6}}],[\"company\",{\"1\":{\"531\":8}}],[\"comparable\",{\"1\":{\"1030\":1}}],[\"compareandswapint\",{\"1\":{\"900\":2}}],[\"compareandsethead\",{\"1\":{\"879\":1}}],[\"compareandsettail\",{\"1\":{\"879\":2}}],[\"compareandsetstate\",{\"1\":{\"876\":2,\"880\":2,\"882\":1,\"883\":1,\"886\":2}}],[\"compareandset\",{\"1\":{\"852\":1,\"853\":1,\"900\":3,\"1239\":1}}],[\"compare\",{\"1\":{\"850\":1}}],[\"compatibility\",{\"1\":{\"334\":1,\"811\":1,\"1555\":1}}],[\"compat\",{\"0\":{\"205\":1},\"1\":{\"1772\":1}}],[\"compileshader\",{\"1\":{\"1540\":1}}],[\"compilestage\",{\"1\":{\"1197\":1}}],[\"compileapi\",{\"1\":{\"1491\":2}}],[\"compilecomponents\",{\"1\":{\"1474\":1}}],[\"compile2\",{\"1\":{\"1197\":2}}],[\"compiler优化\",{\"1\":{\"1210\":2}}],[\"compiler\",{\"1\":{\"1152\":1,\"1206\":2,\"1534\":10,\"1604\":1}}],[\"compiledebugjavawithjavac\",{\"1\":{\"103\":1}}],[\"compile\",{\"1\":{\"52\":1,\"73\":1,\"94\":1,\"1197\":1,\"1534\":4,\"1966\":1}}],[\"compileoptions\",{\"1\":{\"43\":1}}],[\"compilationerror\",{\"1\":{\"52\":1}}],[\"com\",{\"1\":{\"8\":1,\"9\":1,\"12\":1,\"16\":4,\"19\":2,\"23\":1,\"25\":3,\"31\":1,\"52\":4,\"55\":3,\"61\":1,\"70\":1,\"73\":3,\"79\":2,\"100\":1,\"103\":1,\"109\":4,\"115\":2,\"121\":2,\"124\":1,\"249\":1,\"259\":1,\"268\":1,\"271\":1,\"292\":1,\"295\":1,\"299\":1,\"314\":1,\"406\":1,\"409\":1,\"417\":1,\"423\":1,\"429\":1,\"436\":1,\"442\":1,\"448\":1,\"454\":1,\"460\":1,\"466\":1,\"472\":1,\"478\":1,\"484\":1,\"490\":1,\"496\":1,\"502\":1,\"508\":1,\"514\":1,\"520\":1,\"526\":1,\"532\":1,\"538\":1,\"544\":1,\"580\":1,\"608\":2,\"631\":1,\"638\":2,\"640\":1,\"650\":1,\"702\":1,\"727\":1,\"728\":1,\"731\":1,\"825\":1,\"835\":1,\"854\":1,\"980\":1,\"987\":1,\"998\":1,\"1004\":1,\"1011\":1,\"1018\":1,\"1025\":1,\"1031\":1,\"1038\":1,\"1045\":1,\"1049\":1,\"1051\":1,\"1057\":1,\"1065\":1,\"1071\":1,\"1082\":1,\"1089\":1,\"1097\":1,\"1104\":1,\"1111\":1,\"1197\":1,\"1289\":3,\"1292\":4,\"1304\":1,\"1314\":1,\"1317\":2,\"1320\":3,\"1323\":3,\"1326\":2,\"1329\":7,\"1346\":3,\"1358\":1,\"1368\":1,\"1374\":2,\"1380\":2,\"1383\":4,\"1386\":1,\"1399\":18,\"1413\":1,\"1416\":1,\"1453\":1,\"1459\":3,\"1462\":1,\"1468\":4,\"1475\":4,\"1476\":3,\"1481\":1,\"1483\":1,\"1488\":1,\"1491\":2,\"1503\":16,\"1509\":1,\"1527\":1,\"1530\":2,\"1534\":3,\"1540\":1,\"1549\":2,\"1552\":1,\"1555\":8,\"1558\":2,\"1561\":4,\"1564\":3,\"1567\":10,\"1568\":1,\"1571\":1,\"1574\":1,\"1577\":2,\"1580\":2,\"1583\":1,\"1589\":3,\"1592\":1,\"1595\":6,\"1598\":1,\"1601\":2,\"1604\":2,\"1607\":1,\"1610\":1,\"1613\":2,\"1616\":5,\"1620\":1,\"1623\":1,\"1629\":1,\"1632\":2,\"1638\":1,\"1639\":1,\"1642\":1,\"1647\":5,\"1666\":4,\"1669\":1,\"1682\":18,\"1690\":1,\"1701\":1,\"1706\":1,\"1732\":4,\"1739\":13,\"1757\":1,\"1860\":2,\"1865\":1,\"1866\":4,\"1870\":5,\"1905\":10,\"1911\":5,\"1921\":1,\"1923\":2,\"1924\":1,\"1933\":1,\"1942\":1,\"1943\":1,\"1944\":1,\"1945\":1,\"1946\":1,\"1950\":1,\"1952\":1,\"1959\":1,\"1960\":2,\"1961\":1,\"1962\":1,\"1966\":2,\"1970\":1,\"1978\":1}}],[\"cl\",{\"1\":{\"1866\":4}}],[\"club\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"cleanjiagudir\",{\"1\":{\"1613\":2}}],[\"cleanapilib\",{\"1\":{\"1488\":1}}],[\"clean\",{\"1\":{\"896\":1,\"1960\":2,\"1966\":1}}],[\"cleardeathnotification过程向驱动传递bc\",{\"1\":{\"1761\":1}}],[\"clearcaller\",{\"1\":{\"1717\":2}}],[\"clearcallingidentity\",{\"1\":{\"1717\":3,\"1843\":3}}],[\"clearapiemptydir\",{\"1\":{\"1488\":1}}],[\"clearhistory\",{\"1\":{\"1416\":2}}],[\"cleartexttrafficpermitted=\",{\"1\":{\"1405\":1}}],[\"cleartext\",{\"0\":{\"1405\":1}}],[\"clearstack\",{\"1\":{\"1036\":1}}],[\"clear\",{\"1\":{\"333\":1,\"368\":1,\"381\":1,\"465\":4,\"885\":2,\"917\":1,\"1036\":1,\"1332\":4,\"1488\":3,\"1761\":2,\"1770\":3,\"1828\":2}}],[\"clickhandler\",{\"1\":{\"1736\":1}}],[\"clickable\",{\"1\":{\"1521\":1}}],[\"clickablespan\",{\"1\":{\"1310\":1}}],[\"clippath\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"clipper\",{\"1\":{\"1402\":12,\"1685\":12}}],[\"cliprect\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"cliprrect\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"clipbehavior\",{\"1\":{\"1402\":12,\"1685\":12}}],[\"clip\",{\"1\":{\"1402\":8,\"1685\":8,\"1943\":1}}],[\"clipoval\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"clinit\",{\"1\":{\"1003\":3}}],[\"cli\",{\"1\":{\"707\":1,\"1413\":1,\"1960\":1}}],[\"client收到应答数据\",{\"1\":{\"1797\":1}}],[\"client在驱动写入指定数据\",{\"1\":{\"1797\":1}}],[\"client和servicemanager通过binder驱动通信\",{\"1\":{\"1797\":1}}],[\"client与service交互\",{\"1\":{\"1744\":1}}],[\"client进程执行binder\",{\"1\":{\"1768\":1}}],[\"client进程使用某个service前\",{\"1\":{\"1744\":1}}],[\"client进程向server进程通信\",{\"1\":{\"1743\":1}}],[\"clientactivity\",{\"1\":{\"1736\":7}}],[\"client端收尾工作\",{\"1\":{\"1761\":1}}],[\"client端\",{\"1\":{\"1729\":1,\"1745\":1,\"1804\":1}}],[\"client端依赖\",{\"1\":{\"12\":1,\"731\":1}}],[\"clientdemo\",{\"1\":{\"1724\":1,\"1728\":4,\"1729\":1,\"1731\":1,\"1733\":3}}],[\"client\",{\"1\":{\"614\":1,\"615\":1,\"622\":1,\"630\":1,\"938\":1,\"1206\":2,\"1209\":2,\"1210\":1,\"1292\":1,\"1521\":1,\"1727\":1,\"1731\":2,\"1744\":1}}],[\"clonetest\",{\"1\":{\"1024\":1}}],[\"clonenotsupportedexception\",{\"1\":{\"409\":1,\"1023\":2}}],[\"clone\",{\"1\":{\"334\":2,\"409\":3,\"1023\":5,\"1946\":1,\"1960\":1}}],[\"cloneable\",{\"1\":{\"331\":1,\"409\":1,\"1009\":1,\"1023\":3,\"1030\":1}}],[\"close\",{\"1\":{\"332\":1,\"453\":2,\"870\":3,\"1829\":1}}],[\"cloudprogram\",{\"1\":{\"1709\":2,\"1713\":1}}],[\"cloud\",{\"1\":{\"8\":2,\"9\":2,\"12\":4,\"314\":1,\"640\":1,\"727\":2,\"728\":2,\"731\":4,\"1604\":1,\"1616\":1}}],[\"clazzname\",{\"1\":{\"1598\":4}}],[\"clazz=\",{\"1\":{\"197\":1,\"1175\":1}}],[\"clazz\",{\"1\":{\"197\":7,\"416\":3,\"1030\":1,\"1175\":7,\"1506\":1,\"1546\":4,\"1717\":2,\"1829\":1}}],[\"classbuilder\",{\"1\":{\"1601\":1,\"1604\":1}}],[\"class=\",{\"1\":{\"1555\":2}}],[\"classof<string>\",{\"1\":{\"1506\":1}}],[\"classof\",{\"1\":{\"1506\":1}}],[\"classifier\",{\"1\":{\"1966\":2}}],[\"classicindicator\",{\"1\":{\"1383\":2,\"1666\":2}}],[\"classinfo\",{\"1\":{\"1110\":4}}],[\"class对象\",{\"1\":{\"1170\":1}}],[\"classmember\",{\"1\":{\"1109\":5}}],[\"classmap\",{\"1\":{\"978\":3,\"979\":1,\"1009\":2,\"1030\":6}}],[\"class版本号\",{\"1\":{\"1078\":1}}],[\"classreader\",{\"1\":{\"1077\":1,\"1078\":1,\"1079\":1,\"1081\":4}}],[\"classref\",{\"1\":{\"984\":10,\"1036\":4,\"1110\":4}}],[\"classdata\",{\"1\":{\"1064\":2,\"1081\":2}}],[\"class文件\",{\"1\":{\"1077\":1}}],[\"class文件有严格规范\",{\"1\":{\"1075\":1}}],[\"class文件的相对路径\",{\"1\":{\"1064\":1}}],[\"class文件加载顺序\",{\"1\":{\"1030\":1}}],[\"class文件加载\",{\"1\":{\"1008\":1}}],[\"class与object\",{\"1\":{\"1030\":2}}],[\"class实例\",{\"1\":{\"1029\":1}}],[\"class实例上加锁后\",{\"1\":{\"867\":1}}],[\"class实例上等待\",{\"1\":{\"867\":1}}],[\"classcastexception\",{\"1\":{\"984\":1}}],[\"classformaterror\",{\"1\":{\"979\":1,\"984\":1,\"1077\":1}}],[\"classfile\",{\"0\":{\"1110\":1,\"1163\":1},\"1\":{\"237\":1,\"979\":3,\"1022\":1,\"1036\":3,\"1076\":2,\"1077\":1,\"1078\":1,\"1080\":1,\"1081\":5,\"1101\":1,\"1102\":3,\"1109\":9,\"1110\":23,\"1170\":1}}],[\"classfile结构体\",{\"0\":{\"237\":1,\"1076\":1}}],[\"classloader启动类加载器\",{\"1\":{\"1030\":1}}],[\"classloader原理\",{\"0\":{\"1028\":1,\"1029\":1,\"1030\":1}}],[\"classloader扩展\",{\"1\":{\"1015\":1}}],[\"classloader加载\",{\"1\":{\"1015\":1}}],[\"classloader\",{\"1\":{\"259\":4,\"447\":2,\"978\":4,\"979\":3,\"985\":2,\"986\":1,\"996\":2,\"1009\":5,\"1015\":1,\"1016\":1,\"1030\":6,\"1044\":9,\"1109\":1,\"1175\":3,\"1866\":8}}],[\"classnotfoundexception\",{\"1\":{\"197\":2,\"334\":1,\"416\":1,\"979\":1,\"1175\":2,\"1598\":1,\"1601\":2}}],[\"classnames\",{\"1\":{\"1197\":1}}],[\"classname文件\",{\"1\":{\"1064\":1}}],[\"classname\",{\"1\":{\"197\":5,\"985\":2,\"996\":2,\"1009\":13,\"1022\":7,\"1030\":3,\"1036\":2,\"1044\":2,\"1063\":6,\"1064\":4,\"1102\":2,\"1109\":1,\"1110\":5,\"1175\":5,\"1552\":2,\"1604\":2,\"1860\":1,\"1861\":1}}],[\"class<t>\",{\"1\":{\"259\":2,\"416\":2,\"447\":1,\"1592\":1}}],[\"class<\",{\"1\":{\"197\":2,\"1023\":1,\"1030\":2,\"1175\":2,\"1546\":8,\"1589\":1,\"1592\":2,\"1598\":3,\"1840\":1}}],[\"classpaht=\",{\"1\":{\"67\":1}}],[\"classpath\",{\"0\":{\"34\":1},\"1\":{\"67\":1,\"73\":1,\"978\":4,\"979\":1,\"985\":1,\"996\":1,\"1030\":2,\"1044\":1,\"1055\":3,\"1056\":1,\"1061\":4,\"1063\":8,\"1064\":3,\"1070\":2,\"1102\":1,\"1289\":1,\"1292\":1,\"1374\":1,\"1491\":1,\"1595\":1,\"1632\":2,\"1905\":2,\"1911\":1,\"1966\":1}}],[\"class\",{\"0\":{\"37\":1,\"61\":1,\"1456\":1},\"1\":{\"61\":2,\"67\":1,\"154\":1,\"160\":3,\"169\":2,\"237\":2,\"259\":12,\"331\":1,\"334\":1,\"345\":1,\"348\":1,\"358\":2,\"362\":1,\"365\":1,\"367\":1,\"368\":1,\"381\":2,\"404\":1,\"405\":7,\"409\":1,\"415\":5,\"416\":5,\"422\":6,\"428\":5,\"435\":5,\"441\":3,\"447\":13,\"453\":3,\"459\":7,\"465\":4,\"471\":5,\"477\":3,\"483\":6,\"489\":7,\"495\":2,\"501\":3,\"507\":4,\"513\":5,\"519\":3,\"525\":5,\"531\":8,\"537\":6,\"543\":4,\"650\":1,\"823\":1,\"843\":1,\"863\":2,\"864\":2,\"867\":8,\"868\":2,\"869\":2,\"870\":3,\"874\":1,\"876\":2,\"878\":1,\"880\":2,\"884\":3,\"885\":1,\"887\":1,\"889\":1,\"897\":1,\"900\":7,\"904\":1,\"905\":2,\"907\":1,\"908\":1,\"917\":3,\"920\":1,\"923\":1,\"926\":2,\"929\":1,\"932\":2,\"935\":1,\"938\":2,\"945\":1,\"978\":6,\"979\":39,\"983\":1,\"984\":24,\"985\":3,\"992\":4,\"993\":10,\"995\":1,\"996\":3,\"997\":2,\"1002\":3,\"1003\":14,\"1009\":23,\"1010\":1,\"1015\":8,\"1016\":1,\"1022\":5,\"1023\":7,\"1029\":3,\"1030\":50,\"1036\":5,\"1044\":3,\"1055\":4,\"1056\":3,\"1061\":1,\"1062\":1,\"1063\":4,\"1064\":8,\"1070\":1,\"1076\":2,\"1102\":3,\"1109\":31,\"1110\":12,\"1152\":1,\"1170\":1,\"1182\":1,\"1188\":8,\"1256\":1,\"1286\":1,\"1295\":1,\"1311\":1,\"1312\":1,\"1313\":1,\"1320\":3,\"1332\":2,\"1349\":1,\"1358\":1,\"1361\":6,\"1364\":1,\"1368\":1,\"1374\":2,\"1383\":8,\"1392\":1,\"1402\":2,\"1416\":1,\"1417\":1,\"1456\":4,\"1468\":1,\"1506\":3,\"1518\":14,\"1521\":4,\"1527\":3,\"1530\":5,\"1540\":1,\"1546\":2,\"1555\":1,\"1589\":4,\"1592\":6,\"1595\":2,\"1598\":2,\"1601\":11,\"1604\":12,\"1610\":1,\"1626\":3,\"1666\":8,\"1675\":1,\"1685\":2,\"1727\":3,\"1730\":1,\"1731\":2,\"1732\":1,\"1736\":3,\"1737\":1,\"1738\":1,\"1739\":2,\"1756\":6,\"1762\":4,\"1778\":1,\"1787\":1,\"1831\":2,\"1839\":1,\"1840\":1,\"1851\":1,\"1867\":2}}],[\"classes\",{\"0\":{\"28\":1},\"1\":{\"28\":1,\"1064\":2,\"1546\":1}}],[\"hmservice\",{\"1\":{\"1708\":1}}],[\"h++\",{\"1\":{\"1546\":1}}],[\"h文件\",{\"1\":{\"1534\":1,\"1805\":1}}],[\"hhmmss\",{\"1\":{\"1417\":1}}],[\"hdpi\",{\"1\":{\"1338\":1,\"1435\":2}}],[\"hwvog\",{\"1\":{\"1298\":2}}],[\"hprof\",{\"1\":{\"1154\":1,\"1155\":1}}],[\"hrvisitor\",{\"1\":{\"531\":2}}],[\"hr\",{\"1\":{\"531\":4}}],[\"hint\",{\"1\":{\"1829\":1}}],[\"hilink\",{\"1\":{\"1702\":3}}],[\"hir\",{\"1\":{\"1210\":1}}],[\"high\",{\"1\":{\"631\":1,\"638\":1,\"1416\":1}}],[\"hidden\",{\"1\":{\"334\":2,\"666\":1,\"667\":1,\"668\":5}}],[\"hikaricp\",{\"1\":{\"12\":1,\"731\":1}}],[\"huks\",{\"1\":{\"1708\":1}}],[\"hupo376787\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"hujiang\",{\"1\":{\"1374\":1,\"1595\":1}}],[\"hugo\",{\"1\":{\"1320\":1,\"1632\":1}}],[\"hugecapacity\",{\"1\":{\"332\":1,\"338\":1}}],[\"huaweivog\",{\"1\":{\"1298\":2}}],[\"huawei\",{\"1\":{\"1298\":3,\"1701\":1,\"1706\":1}}],[\"human\",{\"1\":{\"1188\":11}}],[\"hungrysingleton\",{\"1\":{\"404\":7}}],[\"hutool\",{\"1\":{\"12\":1,\"731\":1}}],[\"h5数据存储\",{\"1\":{\"1416\":1}}],[\"h5接入支付宝支付\",{\"0\":{\"1358\":1}}],[\"h5\",{\"1\":{\"603\":3,\"604\":4,\"656\":3,\"657\":1,\"1708\":1}}],[\"h5视频化\",{\"1\":{\"305\":1}}],[\"h5优化\",{\"1\":{\"305\":1}}],[\"h\",{\"1\":{\"281\":1,\"348\":2,\"350\":2,\"351\":11,\"833\":1,\"879\":4,\"895\":5,\"1335\":1,\"1346\":3,\"1534\":5,\"1546\":3,\"1724\":1,\"1725\":1,\"1726\":1,\"1727\":1,\"1746\":3,\"1800\":1,\"1807\":2,\"1832\":2}}],[\"harmonyos\",{\"1\":{\"1702\":50,\"1707\":2,\"1708\":2,\"1711\":1,\"1712\":2,\"1713\":3}}],[\"hard\",{\"1\":{\"1951\":1,\"1955\":1}}],[\"hardedge\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"hardware\",{\"1\":{\"1298\":3}}],[\"hap\",{\"1\":{\"1702\":4,\"1708\":2}}],[\"happens\",{\"1\":{\"859\":1}}],[\"hawk\",{\"1\":{\"1629\":1}}],[\"hawei\",{\"1\":{\"1377\":1}}],[\"hahack\",{\"1\":{\"1534\":1}}],[\"hack\",{\"1\":{\"993\":1}}],[\"hassecondzygote\",{\"1\":{\"1865\":1}}],[\"hasshowdividers\",{\"1\":{\"1568\":1}}],[\"hassuffix\",{\"1\":{\"1064\":3}}],[\"haschildcount\",{\"1\":{\"1568\":1}}],[\"hasrequestbody\",{\"1\":{\"1332\":2}}],[\"hasqueuedpredecessors\",{\"1\":{\"883\":2}}],[\"has\",{\"1\":{\"751\":1,\"1604\":2,\"1770\":2}}],[\"hasjob\",{\"1\":{\"537\":6}}],[\"haslimit\",{\"1\":{\"537\":6}}],[\"hasnext\",{\"1\":{\"465\":2,\"543\":3,\"1203\":1,\"1332\":3}}],[\"hashentry\",{\"1\":{\"358\":1}}],[\"hashentry<k\",{\"1\":{\"358\":3}}],[\"hashing\",{\"1\":{\"351\":1}}],[\"hashseed\",{\"1\":{\"351\":1}}],[\"hashset<string>\",{\"1\":{\"1604\":2}}],[\"hashset\",{\"1\":{\"322\":5}}],[\"hashset要求放入对象实现hashcode\",{\"1\":{\"216\":1}}],[\"hashset是基于哈希表实现的\",{\"1\":{\"216\":1}}],[\"hashset是非线程安全的\",{\"1\":{\"213\":1}}],[\"hashset和treeset区别\",{\"0\":{\"216\":1}}],[\"hash\",{\"1\":{\"348\":2,\"350\":14,\"351\":7,\"352\":3,\"353\":6,\"358\":1,\"364\":1,\"1023\":2}}],[\"hashtable容器使用synchronized来保证线程安全\",{\"1\":{\"894\":1}}],[\"hashtable\",{\"0\":{\"356\":1},\"1\":{\"325\":2,\"356\":1}}],[\"hashtable是非线程安全的\",{\"1\":{\"213\":1}}],[\"hashmap在并发执行put操作时会引起死循环\",{\"1\":{\"894\":1}}],[\"hashmap线程不安全\",{\"1\":{\"894\":1}}],[\"hashmap<k\",{\"1\":{\"362\":1}}],[\"hashmap<>\",{\"1\":{\"349\":1,\"405\":1,\"1332\":6,\"1604\":1}}],[\"hashmap<string\",{\"1\":{\"349\":1,\"885\":1,\"1518\":3}}],[\"hashmap\",{\"0\":{\"347\":1},\"1\":{\"319\":1,\"325\":2,\"348\":1,\"349\":1,\"350\":2,\"352\":2,\"353\":2,\"354\":2,\"356\":3,\"358\":1,\"362\":2,\"935\":1,\"1518\":1}}],[\"hashmap是线程安全的\",{\"1\":{\"213\":1}}],[\"hashcode方法\",{\"1\":{\"1518\":1}}],[\"hashcodes\",{\"1\":{\"351\":1}}],[\"hashcode\",{\"1\":{\"154\":2,\"348\":3,\"349\":3,\"350\":1,\"351\":4,\"1023\":4,\"1116\":1,\"1117\":1}}],[\"hashcode原理\",{\"0\":{\"138\":1}}],[\"handlesystemserverprocess\",{\"1\":{\"1865\":1,\"1866\":1}}],[\"handleparentproc\",{\"1\":{\"1863\":1}}],[\"handlechildproc\",{\"1\":{\"1863\":1}}],[\"handlecallback\",{\"1\":{\"1842\":1}}],[\"handleevent\",{\"1\":{\"1831\":1}}],[\"handleexc\",{\"1\":{\"1036\":1}}],[\"handlemessage\",{\"1\":{\"1831\":1,\"1837\":1,\"1839\":1,\"1842\":5,\"1851\":2}}],[\"handle为目标的信息\",{\"1\":{\"1790\":1}}],[\"handleuncaughtexception\",{\"1\":{\"1036\":2}}],[\"handle\",{\"1\":{\"938\":1,\"1756\":3,\"1767\":1,\"1770\":2,\"1788\":1,\"1790\":6}}],[\"handler内存泄漏\",{\"0\":{\"1851\":1}}],[\"handler个数为0\",{\"1\":{\"1846\":1}}],[\"handlers\",{\"1\":{\"1846\":2}}],[\"handler的默认方法\",{\"1\":{\"1842\":1}}],[\"handler的回调方法\",{\"1\":{\"1842\":1}}],[\"handler自身的回调方法handlemessage\",{\"1\":{\"1842\":1}}],[\"handler处理\",{\"0\":{\"1842\":1}}],[\"handler发送\",{\"0\":{\"1841\":1}}],[\"handler>\",{\"1\":{\"1840\":1}}],[\"handler构建\",{\"0\":{\"1840\":1}}],[\"handler类图\",{\"0\":{\"1838\":1},\"1\":{\"1838\":1}}],[\"handler机制\",{\"1\":{\"1837\":1}}],[\"handler模型\",{\"0\":{\"1837\":1}}],[\"handler架构\",{\"1\":{\"1823\":1,\"1836\":1}}],[\"handler整体架构\",{\"0\":{\"1823\":1,\"1836\":1}}],[\"handlerpc\",{\"1\":{\"1036\":8}}],[\"handlerequest\",{\"1\":{\"537\":9}}],[\"handler\",{\"0\":{\"1820\":1,\"1822\":1,\"1835\":1},\"1\":{\"246\":2,\"537\":3,\"938\":1,\"1036\":10,\"1320\":1,\"1788\":1,\"1789\":2,\"1824\":1,\"1826\":2,\"1828\":3,\"1831\":5,\"1837\":3,\"1839\":2,\"1840\":5,\"1841\":2,\"1842\":2,\"1851\":2,\"1852\":1,\"1857\":1},\"2\":{\"1834\":1,\"1854\":1}}],[\"hangup\",{\"1\":{\"453\":2,\"1828\":1}}],[\"have\",{\"1\":{\"351\":1,\"1534\":2,\"1847\":1}}],[\"hero\",{\"1\":{\"1402\":2,\"1685\":2}}],[\"here\",{\"1\":{\"631\":1,\"1555\":2}}],[\"heightfactor\",{\"1\":{\"1402\":6,\"1685\":6}}],[\"height\",{\"1\":{\"1402\":9,\"1540\":1,\"1685\":9,\"1709\":1}}],[\"height=\",{\"1\":{\"1346\":20}}],[\"hexo\",{\"0\":{\"1960\":1},\"1\":{\"1959\":3,\"1960\":12,\"1961\":3}}],[\"hexo建站+gitalk评论\",{\"0\":{\"1958\":1}}],[\"hexstr\",{\"1\":{\"1368\":5}}],[\"hex\",{\"1\":{\"1352\":1,\"1660\":1}}],[\"hexindai\",{\"1\":{\"1952\":1}}],[\"hexin\",{\"1\":{\"103\":6,\"1468\":4,\"1952\":1}}],[\"hellotv\",{\"1\":{\"1598\":2,\"1601\":9,\"1604\":6,\"1610\":13}}],[\"hello=off\",{\"1\":{\"1534\":1}}],[\"hellobin\",{\"1\":{\"1534\":5}}],[\"hello\",{\"1\":{\"1017\":1,\"1188\":9,\"1518\":1,\"1521\":1,\"1527\":1,\"1534\":18,\"1598\":1,\"1727\":4,\"1732\":1}}],[\"helloworld\",{\"1\":{\"1017\":1,\"1044\":1}}],[\"helpflag\",{\"1\":{\"1055\":3,\"1056\":1,\"1070\":1}}],[\"helper助手\",{\"1\":{\"938\":1}}],[\"helper\",{\"1\":{\"938\":5,\"1009\":1,\"1416\":10,\"1549\":1,\"1555\":4}}],[\"help\",{\"1\":{\"67\":1,\"631\":1,\"879\":1,\"880\":1,\"1055\":4,\"1534\":1}}],[\"healthd\",{\"1\":{\"1787\":1}}],[\"heap\",{\"1\":{\"984\":6,\"985\":1,\"993\":5,\"994\":1,\"996\":1,\"1003\":3,\"1009\":2,\"1015\":1,\"1016\":3,\"1030\":5,\"1036\":3,\"1044\":4,\"1110\":1,\"1119\":1}}],[\"heapsort\",{\"1\":{\"283\":2}}],[\"headercreate\",{\"1\":{\"1383\":1,\"1666\":1}}],[\"headerline\",{\"1\":{\"1332\":8}}],[\"headerlineslist\",{\"1\":{\"1332\":11}}],[\"headerbuilder\",{\"1\":{\"1332\":4}}],[\"headerparamsmap\",{\"1\":{\"1332\":11}}],[\"headersreceive\",{\"1\":{\"1707\":1,\"1713\":1}}],[\"headers\",{\"1\":{\"651\":2,\"652\":1,\"1332\":3}}],[\"header\",{\"1\":{\"638\":3,\"651\":5,\"652\":3,\"1332\":3}}],[\"head\",{\"1\":{\"362\":2,\"363\":2,\"364\":1,\"422\":10,\"879\":3,\"880\":1,\"895\":2,\"1332\":2,\"1770\":2,\"1951\":2}}],[\"horizontalalign\",{\"1\":{\"1708\":1}}],[\"hook\",{\"1\":{\"1592\":1}}],[\"how\",{\"1\":{\"1555\":1}}],[\"howtolearnndk\",{\"1\":{\"1527\":1,\"1530\":1,\"1534\":3,\"1540\":1}}],[\"hotspot\",{\"1\":{\"1209\":1}}],[\"hotreload\",{\"1\":{\"94\":1}}],[\"hops\",{\"1\":{\"895\":1}}],[\"hop\",{\"1\":{\"895\":2}}],[\"holdcounter\",{\"1\":{\"886\":1}}],[\"hostname\",{\"1\":{\"1923\":1}}],[\"host=\",{\"1\":{\"1326\":1}}],[\"host值\",{\"1\":{\"1298\":1}}],[\"host宿主\",{\"1\":{\"938\":1}}],[\"host\",{\"1\":{\"604\":2,\"614\":1,\"615\":1,\"622\":1,\"630\":1,\"631\":1,\"638\":1,\"657\":1,\"938\":5,\"1298\":3,\"1326\":2,\"1923\":1}}],[\"hosts\",{\"1\":{\"25\":2,\"109\":1}}],[\"hostbuf\",{\"1\":{\"16\":4}}],[\"home>\",{\"1\":{\"194\":1}}],[\"homebrew\",{\"1\":{\"79\":12}}],[\"homebrew换源\",{\"0\":{\"79\":1}}],[\"home=\",{\"1\":{\"67\":1,\"1371\":1}}],[\"home\",{\"1\":{\"0\":1,\"67\":7,\"194\":1,\"631\":2,\"822\":1,\"833\":1,\"834\":1,\"1030\":10,\"1063\":2,\"1371\":5,\"1402\":1,\"1685\":1,\"1966\":1}}],[\"html\",{\"1\":{\"14\":1,\"16\":1,\"19\":1,\"73\":1,\"109\":1,\"121\":2,\"314\":1,\"631\":1,\"640\":5,\"733\":1,\"1380\":2,\"1386\":1,\"1399\":2,\"1416\":1,\"1503\":2,\"1515\":1,\"1534\":1,\"1552\":1,\"1555\":3,\"1564\":1,\"1574\":1,\"1616\":1,\"1669\":1,\"1682\":2,\"1905\":1}}],[\"httprequest\",{\"1\":{\"1711\":2,\"1713\":1}}],[\"http地址\",{\"1\":{\"1595\":1}}],[\"httpmanager\",{\"1\":{\"1399\":1,\"1682\":1}}],[\"httpurlbuilder\",{\"1\":{\"1332\":3}}],[\"httpurl\",{\"1\":{\"1332\":1}}],[\"httpbaseparamsinterceptor\",{\"1\":{\"1332\":7}}],[\"httpbasic校验\",{\"1\":{\"12\":1,\"731\":1}}],[\"httplogginginterceptor\",{\"1\":{\"1329\":6}}],[\"http等\",{\"1\":{\"793\":1}}],[\"http\",{\"0\":{\"1405\":1},\"1\":{\"15\":2,\"16\":1,\"19\":1,\"25\":1,\"34\":2,\"40\":2,\"103\":1,\"109\":1,\"121\":1,\"124\":1,\"314\":1,\"631\":1,\"638\":2,\"680\":1,\"734\":2,\"822\":1,\"1335\":2,\"1341\":4,\"1346\":3,\"1368\":1,\"1399\":1,\"1462\":1,\"1483\":1,\"1503\":2,\"1534\":1,\"1552\":1,\"1555\":2,\"1592\":1,\"1648\":1,\"1682\":1,\"1702\":1,\"1707\":1,\"1708\":2,\"1711\":2,\"1712\":1,\"1713\":2,\"1908\":1,\"1960\":1,\"1966\":3}}],[\"https抓包\",{\"0\":{\"1380\":1}}],[\"https与http\",{\"0\":{\"141\":1}}],[\"https\",{\"0\":{\"100\":1},\"1\":{\"8\":1,\"9\":1,\"16\":1,\"19\":2,\"23\":1,\"25\":1,\"31\":1,\"34\":2,\"37\":1,\"46\":1,\"52\":1,\"55\":1,\"73\":1,\"79\":6,\"88\":1,\"100\":2,\"109\":1,\"115\":2,\"121\":1,\"249\":1,\"259\":1,\"268\":1,\"271\":1,\"292\":1,\"295\":1,\"299\":1,\"406\":1,\"409\":1,\"417\":1,\"423\":1,\"429\":1,\"436\":1,\"442\":1,\"448\":1,\"454\":1,\"460\":1,\"466\":1,\"472\":1,\"478\":1,\"484\":1,\"490\":1,\"496\":1,\"502\":1,\"508\":1,\"514\":1,\"520\":1,\"526\":1,\"532\":1,\"538\":1,\"544\":1,\"580\":1,\"702\":1,\"727\":1,\"728\":1,\"825\":1,\"835\":1,\"854\":1,\"980\":1,\"987\":1,\"998\":1,\"1004\":1,\"1011\":1,\"1018\":1,\"1025\":1,\"1031\":1,\"1038\":1,\"1045\":1,\"1049\":1,\"1051\":1,\"1057\":1,\"1065\":1,\"1071\":1,\"1082\":1,\"1089\":1,\"1097\":1,\"1104\":1,\"1111\":1,\"1289\":1,\"1292\":1,\"1304\":1,\"1314\":1,\"1317\":2,\"1320\":4,\"1323\":3,\"1329\":1,\"1335\":2,\"1346\":1,\"1358\":1,\"1380\":2,\"1383\":4,\"1386\":1,\"1399\":22,\"1413\":6,\"1420\":1,\"1453\":1,\"1459\":3,\"1465\":2,\"1476\":1,\"1481\":1,\"1482\":1,\"1488\":1,\"1491\":1,\"1503\":21,\"1509\":1,\"1515\":3,\"1518\":1,\"1527\":1,\"1530\":1,\"1534\":3,\"1540\":2,\"1549\":2,\"1552\":1,\"1555\":5,\"1558\":2,\"1561\":5,\"1564\":3,\"1568\":1,\"1571\":1,\"1574\":6,\"1577\":3,\"1580\":2,\"1583\":1,\"1589\":1,\"1592\":1,\"1595\":3,\"1598\":1,\"1601\":2,\"1604\":2,\"1607\":1,\"1610\":1,\"1613\":2,\"1616\":5,\"1620\":1,\"1623\":1,\"1629\":1,\"1632\":1,\"1638\":1,\"1639\":1,\"1641\":1,\"1647\":5,\"1666\":4,\"1669\":1,\"1682\":22,\"1690\":1,\"1701\":1,\"1702\":1,\"1706\":1,\"1905\":5,\"1908\":1,\"1911\":3,\"1933\":2,\"1959\":2,\"1960\":2,\"1962\":2,\"1970\":2,\"1978\":1}}],[\"你看我还能点击呢\",{\"1\":{\"1402\":1,\"1685\":1}}],[\"你好小妹\",{\"1\":{\"1305\":1,\"1307\":1}}],[\"你的app\",{\"1\":{\"1335\":1}}],[\"你的appid\",{\"1\":{\"1335\":1}}],[\"你的各个子类的唯一差别只在\",{\"1\":{\"1283\":1}}],[\"你的类存在一个public字段\",{\"1\":{\"1283\":1}}],[\"你从一个类衍生许多彼此相等的实例\",{\"1\":{\"1283\":1}}],[\"你从某个对象中取出若干值\",{\"1\":{\"1274\":1}}],[\"你需要再三检查某对象是否为null\",{\"1\":{\"1277\":1}}],[\"你需要在页面\",{\"1\":{\"0\":1}}],[\"你手上有个条件表达式\",{\"1\":{\"1277\":1}}],[\"你手上一些传统过程化风格的代码\",{\"1\":{\"1265\":1}}],[\"你有一个类型码\",{\"1\":{\"1283\":1}}],[\"你有一个字面数值\",{\"1\":{\"1283\":1}}],[\"你有一个数组\",{\"1\":{\"1283\":1}}],[\"你有一个数据项\",{\"1\":{\"1283\":1}}],[\"你有一个复杂条件\",{\"1\":{\"1277\":1}}],[\"你有一系列条件测试\",{\"1\":{\"1277\":1}}],[\"你有一些子类\",{\"1\":{\"1262\":1}}],[\"你有某个类做了太多工作\",{\"1\":{\"1265\":1}}],[\"你就应该停止前进\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"你就应该重构\",{\"1\":{\"1253\":1}}],[\"你就可以前进\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"你可以自信停止重构\",{\"1\":{\"1253\":1,\"1271\":1}}],[\"你可以在这里放置你的主体内容\",{\"1\":{\"0\":1}}],[\"你应该看到nginx的默认欢迎页面\",{\"1\":{\"680\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
