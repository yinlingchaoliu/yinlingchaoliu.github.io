import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as r,a as e}from"./app-CtvCwAmI.js";const o={},a=e("p",null,"原则：“分支逻辑” 和 “操作细节” 分离",-1),i=e("p",null,"1）分解条件表达式 要点：你有一个复杂条件（if-then-else）语句 2）合并条件表达式 要点：你有一系列条件测试，都得到相同结果 3）合并重复的条件片段 要点：在条件表达式分支上都有着相同的一段代码 4）移除控制标志 要点：在一些列布尔表达式中，某个变量带有“控制标记”的作用 方案：以break语句或return语句取代控制标记 5）以卫语句（函数）取代嵌套条件表达式 要点：函数中条件逻辑使人难以看清正常的执行路径 方案：if .... return.... 条件罕见，难以触发 6）以多态取代条件表达式 要点：你手上有个条件表达式，它根据对象类型的不同而选择不同行为 方案：策略模式 多态好处：如果你需要根据对象的不同类型而采取不同行为，多态使你不必编写明显的条件表达式 （省略条件表达式 switch / if ...then...） 7）引入Null对象（空值校验，引入默认值） 要点：你需要再三检查某对象是否为null 方案：将null值替换为null对象 8）引入断言 要点：某一段代码需要对程序状态做出某种假设 方案：增强校验",-1),c=[a,i];function l(p,s){return n(),r("div",null,c)}const h=t(o,[["render",l],["__file","简化条件表达式.html.vue"]]),d=JSON.parse('{"path":"/basis/refactor/%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/%E7%AE%80%E5%8C%96%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"简化条件表达式","lang":"zh-CN","frontmatter":{"title":"简化条件表达式","date":"2024-03-24T11:47:50.000Z","category":["重构-改善代码设计"],"tag":["archive"],"description":"原则：“分支逻辑” 和 “操作细节” 分离 1）分解条件表达式 要点：你有一个复杂条件（if-then-else）语句 2）合并条件表达式 要点：你有一系列条件测试，都得到相同结果 3）合并重复的条件片段 要点：在条件表达式分支上都有着相同的一段代码 4）移除控制标志 要点：在一些列布尔表达式中，某个变量带有“控制标记”的作用 方案：以break语句或...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/refactor/%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/%E7%AE%80%E5%8C%96%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"简化条件表达式"}],["meta",{"property":"og:description","content":"原则：“分支逻辑” 和 “操作细节” 分离 1）分解条件表达式 要点：你有一个复杂条件（if-then-else）语句 2）合并条件表达式 要点：你有一系列条件测试，都得到相同结果 3）合并重复的条件片段 要点：在条件表达式分支上都有着相同的一段代码 4）移除控制标志 要点：在一些列布尔表达式中，某个变量带有“控制标记”的作用 方案：以break语句或..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T14:17:18.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"archive"}],["meta",{"property":"article:published_time","content":"2024-03-24T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T14:17:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简化条件表达式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-24T11:47:50.000Z\\",\\"dateModified\\":\\"2024-03-25T14:17:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711376238000,"updatedTime":1711376238000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":1}]},"readingTime":{"minutes":1.3,"words":389},"filePathRelative":"basis/refactor/重构-改善代码设计/简化条件表达式.md","localizedDate":"2024年3月24日","excerpt":"<p>原则：“分支逻辑” 和 “操作细节” 分离</p>\\n<p>1）分解条件表达式\\n要点：你有一个复杂条件（if-then-else）语句\\n2）合并条件表达式\\n要点：你有一系列条件测试，都得到相同结果\\n3）合并重复的条件片段\\n要点：在条件表达式分支上都有着相同的一段代码\\n4）移除控制标志\\n要点：在一些列布尔表达式中，某个变量带有“控制标记”的作用\\n方案：以break语句或return语句取代控制标记\\n5）以卫语句（函数）取代嵌套条件表达式\\n要点：函数中条件逻辑使人难以看清正常的执行路径\\n方案：if .... return.... 条件罕见，难以触发\\n6）以多态取代条件表达式\\n要点：你手上有个条件表达式，它根据对象类型的不同而选择不同行为\\n方案：策略模式\\n多态好处：如果你需要根据对象的不同类型而采取不同行为，多态使你不必编写明显的条件表达式 （省略条件表达式 switch / if ...then...）\\n7）引入Null对象（空值校验，引入默认值）\\n要点：你需要再三检查某对象是否为null\\n方案：将null值替换为null对象\\n8）引入断言\\n要点：某一段代码需要对程序状态做出某种假设\\n方案：增强校验</p>","autoDesc":true}');export{h as comp,d as data};
