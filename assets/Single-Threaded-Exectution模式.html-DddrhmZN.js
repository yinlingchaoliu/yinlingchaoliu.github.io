import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as p,a as n,b as e,d as t,f as i}from"./app-CtvCwAmI.js";const r={},l=i(`<p>一次只有一个线程通过</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">Gate</span><span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> synchionized <span class="token keyword">void</span> <span class="token function">pass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//逻辑</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用场景： 多线程访问非线程安全方法，解决方案：使用单线程执行模式。</p><p>线程安全方法： synchronizedCollection方法 synchronizedList方法 synchronizedMap方法 synchronizedSet方法 synchronizedSortedMap方法 synchronizedSortedSet方法</p><p>java.util.concurrent方法(JUC方法) ConcurrentHashMap分段锁存储key-value</p>`,6),d={href:"http://www.importnew.com/28263.html",target:"_blank",rel:"noopener noreferrer"},u={href:"http://www.importnew.com/22007.html",target:"_blank",rel:"noopener noreferrer"};function m(h,k){const a=o("ExternalLinkIcon");return c(),p("div",null,[l,n("p",null,[e("详细介绍 "),n("a",d,[e("Java7/8 中的 HashMap 和 ConcurrentHashMap 全解析"),t(a)])]),n("p",null,[n("a",u,[e("ConcurrentHashMap总结"),t(a)])])])}const g=s(r,[["render",m],["__file","Single-Threaded-Exectution模式.html.vue"]]),_=JSON.parse('{"path":"/basis/juc/java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Single-Threaded-Exectution%E6%A8%A1%E5%BC%8F.html","title":"Single-Threaded-Exectution模式","lang":"zh-CN","frontmatter":{"title":"Single-Threaded-Exectution模式","date":"2024-03-24T11:47:50.000Z","category":["java高并发编程"],"tag":["juc"],"description":"一次只有一个线程通过 示例： 使用场景： 多线程访问非线程安全方法，解决方案：使用单线程执行模式。 线程安全方法： synchronizedCollection方法 synchronizedList方法 synchronizedMap方法 synchronizedSet方法 synchronizedSortedMap方法 synchronizedSor...","head":[["meta",{"property":"og:url","content":"https://yinlingchaoliu.github.io/basis/juc/java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Single-Threaded-Exectution%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"引领潮流"}],["meta",{"property":"og:title","content":"Single-Threaded-Exectution模式"}],["meta",{"property":"og:description","content":"一次只有一个线程通过 示例： 使用场景： 多线程访问非线程安全方法，解决方案：使用单线程执行模式。 线程安全方法： synchronizedCollection方法 synchronizedList方法 synchronizedMap方法 synchronizedSet方法 synchronizedSortedMap方法 synchronizedSor..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-09T00:56:59.000Z"}],["meta",{"property":"article:author","content":"引领潮流"}],["meta",{"property":"article:tag","content":"juc"}],["meta",{"property":"article:published_time","content":"2024-03-24T11:47:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-09T00:56:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Single-Threaded-Exectution模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-24T11:47:50.000Z\\",\\"dateModified\\":\\"2024-05-09T00:56:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"引领潮流\\",\\"url\\":\\"https://www.jianshu.com/u/bdcce32c05dd\\"}]}"]]},"headers":[],"git":{"createdTime":1711376238000,"updatedTime":1715216219000,"contributors":[{"name":"引领潮流","email":"heat13@qq.com","commits":2}]},"readingTime":{"minutes":0.46,"words":138},"filePathRelative":"basis/juc/java高并发编程/Single-Threaded-Exectution模式.md","localizedDate":"2024年3月24日","excerpt":"<p>一次只有一个线程通过</p>\\n<p>示例：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span>  <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Gate</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">volatile</span> <span class=\\"token keyword\\">int</span> count <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">public</span> synchionized <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">pass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//逻辑</span>\\n    count<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{g as comp,_ as data};
